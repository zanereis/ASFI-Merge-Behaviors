[{"url":"https://api.github.com/repos/apache/storm/issues/comments/231608683","html_url":"https://github.com/apache/storm/pull/1546#issuecomment-231608683","issue_url":"https://api.github.com/repos/apache/storm/issues/1546","id":231608683,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYwODY4Mw==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:19:24Z","updated_at":"2016-07-10T20:19:24Z","author_association":"CONTRIBUTOR","body":"Thanks @csivaguru merged into 1.x-branch and master.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231608683/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920912","html_url":"https://github.com/apache/storm/issues/5712#issuecomment-2612920912","issue_url":"https://api.github.com/repos/apache/storm/issues/5712","id":2612920912,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA5MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:31:26Z","updated_at":"2025-01-24T16:25:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1516\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1516</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920912/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231609278","html_url":"https://github.com/apache/storm/pull/1516#issuecomment-231609278","issue_url":"https://api.github.com/repos/apache/storm/issues/1516","id":231609278,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYwOTI3OA==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:31:51Z","updated_at":"2016-07-10T20:31:51Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231609278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920913","html_url":"https://github.com/apache/storm/issues/5712#issuecomment-2612920913","issue_url":"https://api.github.com/repos/apache/storm/issues/5712","id":2612920913,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA5MTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:31:52Z","updated_at":"2025-01-24T16:25:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1516\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1516</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231609472","html_url":"https://github.com/apache/storm/pull/1510#issuecomment-231609472","issue_url":"https://api.github.com/repos/apache/storm/issues/1510","id":231609472,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYwOTQ3Mg==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:36:05Z","updated_at":"2016-07-10T20:36:05Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231609472/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612911473","html_url":"https://github.com/apache/storm/issues/5649#issuecomment-2612911473","issue_url":"https://api.github.com/repos/apache/storm/issues/5649","id":2612911473,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTE0NzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:36:06Z","updated_at":"2025-01-24T16:20:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1510\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1510</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612911473/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612919959","html_url":"https://github.com/apache/storm/issues/5704#issuecomment-2612919959","issue_url":"https://api.github.com/repos/apache/storm/issues/5704","id":2612919959,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTk5NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:45:20Z","updated_at":"2025-01-24T16:24:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1519\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1519</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612919959/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231610047","html_url":"https://github.com/apache/storm/pull/1519#issuecomment-231610047","issue_url":"https://api.github.com/repos/apache/storm/issues/1519","id":231610047,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMDA0Nw==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:48:51Z","updated_at":"2016-07-10T20:48:51Z","author_association":"CONTRIBUTOR","body":"Thanks @vesense merged into master,1.x, 1.0.x\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231610047/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612919963","html_url":"https://github.com/apache/storm/issues/5704#issuecomment-2612919963","issue_url":"https://api.github.com/repos/apache/storm/issues/5704","id":2612919963,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTk5NjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:48:53Z","updated_at":"2025-01-24T16:24:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1519\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1519</a></p>\n\n<p>    Thanks @vesense merged into master,1.x, 1.0.x</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612919963/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612922656","html_url":"https://github.com/apache/storm/issues/5724#issuecomment-2612922656","issue_url":"https://api.github.com/repos/apache/storm/issues/5724","id":2612922656,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjI2NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:51:20Z","updated_at":"2025-01-24T16:26:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1537\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1537</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612922656/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612911476","html_url":"https://github.com/apache/storm/issues/5649#issuecomment-2612911476","issue_url":"https://api.github.com/repos/apache/storm/issues/5649","id":2612911476,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTE0NzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:57:19Z","updated_at":"2025-01-24T16:20:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1510\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1510</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612911476/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231610572","html_url":"https://github.com/apache/storm/pull/1520#issuecomment-231610572","issue_url":"https://api.github.com/repos/apache/storm/issues/1520","id":231610572,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMDU3Mg==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:59:51Z","updated_at":"2016-07-10T20:59:51Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231610572/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920537","html_url":"https://github.com/apache/storm/issues/5709#issuecomment-2612920537","issue_url":"https://api.github.com/repos/apache/storm/issues/5709","id":2612920537,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA1Mzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T20:59:53Z","updated_at":"2025-01-24T16:25:08Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1520\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1520</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231610886","html_url":"https://github.com/apache/storm/pull/1468#issuecomment-231610886","issue_url":"https://api.github.com/repos/apache/storm/issues/1468","id":231610886,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMDg4Ng==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:06:09Z","updated_at":"2016-07-10T21:06:09Z","author_association":"CONTRIBUTOR","body":"@HeartSaVioR Thanks for documenting the script.\n\"Branch policy is not compatible with projects which uses this script. They have branches per version but we just maintain version lines (major, minor, bugfix) so we should do something while determining fix versions from merged branches.\"\nAgree but than again we need modify either script to get this done . So spark or kafka script doesn't matter much.\n\"We're having master and 1.x / 1.0.x branches heavily diverged, so there're often two or more pull requests submitted per one issue. (Committers don't cherry-pick between master and 1.x for storm-core manually since it's easy to see merge conflict.) It should be tested (at least unit test and integration test) individually, and issue should be closed when all of pull requests are checked in. It means that we're having different merging step which other projects don't have.\nMoreover, commit message hook (closing PR) doesn't work if PR is not against master.\"\nI am +1 on adding unit tests, integration tests to be run as part of the script but have a manual validation from the user to say yes/no to go-ahead with merge. As the unit tests can be flaky there can be false negatives.\n\"We should update CHANGELOG while merging step. Personally I don't like updating CHANGELOG so opened thread for discussion but we didn't decide something clearly.\"\nAgree with you on this. This extra-step adds unnecessary commits to the log. As long as we update the JIRA fixVersions before the release its easy to generate a change log.\n\n\"Commit message will contain body of pull request which is free format for now and tends to be meaningless for commit message.\"\nWith the above script one can edit the commit title and it will have JIRA number & title that will give us much more meaningful message about the work done as part of th ejira.\n\n\"So without arranging our branch policy and merging step, it will be hard to get merge script fit for us.\"\nI disagree with this. We can have minimal modifications to the script to work with our current branches.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231610886/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612914374","html_url":"https://github.com/apache/storm/issues/5667#issuecomment-2612914374","issue_url":"https://api.github.com/repos/apache/storm/issues/5667","id":2612914374,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTQzNzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:06:11Z","updated_at":"2025-01-24T16:22:02Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1468\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1468</a></p>\n\n<p>    @HeartSaVioR Thanks for documenting the script.<br/>\n    \"Branch policy is not compatible with projects which uses this script. They have branches per version but we just maintain version lines (major, minor, bugfix) so we should do something while determining fix versions from merged branches.\"<br/>\n    Agree but than again we need modify either script to get this done . So spark or kafka script doesn't matter much.<br/>\n    \"We're having master and 1.x / 1.0.x branches heavily diverged, so there're often two or more pull requests submitted per one issue. (Committers don't cherry-pick between master and 1.x for storm-core manually since it's easy to see merge conflict.) It should be tested (at least unit test and integration test) individually, and issue should be closed when all of pull requests are checked in. It means that we're having different merging step which other projects don't have.<br/>\n    Moreover, commit message hook (closing PR) doesn't work if PR is not against master.\"<br/>\n    I am +1 on adding unit tests, integration tests to be run as part of the script but have a manual validation from the user to say yes/no to go-ahead with merge. As the unit tests can be flaky there can be false negatives.<br/>\n    \"We should update CHANGELOG while merging step. Personally I don't like updating CHANGELOG so opened thread for discussion but we didn't decide something clearly.\"<br/>\n    Agree with you on this. This extra-step adds unnecessary commits to the log. As long as we update the JIRA fixVersions before the release its easy to generate a change log.</p>\n\n<p>    \"Commit message will contain body of pull request which is free format for now and tends to be meaningless for commit message.\"<br/>\n    With the above script one can edit the commit title and it will have JIRA number & title that will give us much more meaningful message about the work done as part of th ejira.</p>\n\n<p>    \"So without arranging our branch policy and merging step, it will be hard to get merge script fit for us.\"<br/>\n    I disagree with this. We can have minimal modifications to the script to work with our current branches.</p>\n\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612914374/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231611081","html_url":"https://github.com/apache/storm/pull/1287#issuecomment-231611081","issue_url":"https://api.github.com/repos/apache/storm/issues/1287","id":231611081,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMTA4MQ==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:09:21Z","updated_at":"2016-07-10T21:09:21Z","author_association":"CONTRIBUTOR","body":"@moesol can you please close this PR . Its already merged here https://github.com/apache/storm/commit/f069cfb08099a54448bba3f96f20c5b929ea6af3\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231611081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612891907","html_url":"https://github.com/apache/storm/issues/5509#issuecomment-2612891907","issue_url":"https://api.github.com/repos/apache/storm/issues/5509","id":2612891907,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4OTE5MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:09:24Z","updated_at":"2025-01-24T16:11:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1287\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1287</a></p>\n\n<p>    @moesol can you please close this PR . Its already merged here <a href=\"https://github.com/apache/storm/commit/f069cfb08099a54448bba3f96f20c5b929ea6af3\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/commit/f069cfb08099a54448bba3f96f20c5b929ea6af3</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612891907/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231611143","html_url":"https://github.com/apache/storm/pull/1413#issuecomment-231611143","issue_url":"https://api.github.com/repos/apache/storm/issues/1413","id":231611143,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMTE0Mw==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:10:39Z","updated_at":"2016-07-10T21:10:39Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231611143/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612906979","html_url":"https://github.com/apache/storm/issues/5616#issuecomment-2612906979","issue_url":"https://api.github.com/repos/apache/storm/issues/5616","id":2612906979,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDY5Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:10:41Z","updated_at":"2025-01-24T16:18:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1413\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1413</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612906979/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612906980","html_url":"https://github.com/apache/storm/issues/5616#issuecomment-2612906980","issue_url":"https://api.github.com/repos/apache/storm/issues/5616","id":2612906980,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDY5ODA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:30:33Z","updated_at":"2025-01-24T16:18:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1413\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1413</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612906980/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231612142","html_url":"https://github.com/apache/storm/pull/1413#issuecomment-231612142","issue_url":"https://api.github.com/repos/apache/storm/issues/1413","id":231612142,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMjE0Mg==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:32:29Z","updated_at":"2016-07-10T21:32:29Z","author_association":"CONTRIBUTOR","body":"Thanks @arunmahadevan merged into master, 1.x-branch\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231612142/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612906984","html_url":"https://github.com/apache/storm/issues/5616#issuecomment-2612906984","issue_url":"https://api.github.com/repos/apache/storm/issues/5616","id":2612906984,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDY5ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:32:31Z","updated_at":"2025-01-24T16:18:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1413\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1413</a></p>\n\n<p>    Thanks @arunmahadevan merged into master, 1.x-branch</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612906984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231612192","html_url":"https://github.com/apache/storm/pull/476#issuecomment-231612192","issue_url":"https://api.github.com/repos/apache/storm/issues/476","id":231612192,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMjE5Mg==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:33:36Z","updated_at":"2016-07-10T21:33:36Z","author_association":"CONTRIBUTOR","body":"@knusbaum are we good to merge this?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231612192/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612532454","html_url":"https://github.com/apache/storm/issues/4561#issuecomment-2612532454","issue_url":"https://api.github.com/repos/apache/storm/issues/4561","id":2612532454,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MzI0NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:33:37Z","updated_at":"2025-01-24T13:28:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/476\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/476</a></p>\n\n<p>    @knusbaum are we good to merge this?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612532454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231612450","html_url":"https://github.com/apache/storm/pull/728#issuecomment-231612450","issue_url":"https://api.github.com/repos/apache/storm/issues/728","id":231612450,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMjQ1MA==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:39:11Z","updated_at":"2016-07-10T21:39:11Z","author_association":"CONTRIBUTOR","body":"@hsun-cnnxty we would like to get this into 1.x-branch as well as master. Did you get a chance to look at @revans2 comment above . It will be great if you can address the comment and up merge your patch.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231612450/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598560","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598560","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598560,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg1NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:39:12Z","updated_at":"2025-01-24T14:00:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/728\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/728</a></p>\n\n<p>    @hsun-cnnxty we would like to get this into 1.x-branch as well as master. Did you get a chance to look at @revans2 comment above . It will be great if you can address the comment and up merge your patch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598560/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231612491","html_url":"https://github.com/apache/storm/pull/1277#issuecomment-231612491","issue_url":"https://api.github.com/repos/apache/storm/issues/1277","id":231612491,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYxMjQ5MQ==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:40:05Z","updated_at":"2016-07-10T21:40:05Z","author_association":"CONTRIBUTOR","body":"@priyank5485 sorry for the delay on this. Can you up merge this patch.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231612491/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612614084","html_url":"https://github.com/apache/storm/issues/4967#issuecomment-2612614084","issue_url":"https://api.github.com/repos/apache/storm/issues/4967","id":2612614084,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTQwODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-10T21:40:06Z","updated_at":"2025-01-24T14:06:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1277\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1277</a></p>\n\n<p>    @priyank5485 sorry for the delay on this. Can you up merge this patch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612614084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231620269","html_url":"https://github.com/apache/storm/pull/728#issuecomment-231620269","issue_url":"https://api.github.com/repos/apache/storm/issues/728","id":231620269,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYyMDI2OQ==","user":{"login":"ooasis","id":10720176,"node_id":"MDQ6VXNlcjEwNzIwMTc2","avatar_url":"https://avatars.githubusercontent.com/u/10720176?v=4","gravatar_id":"","url":"https://api.github.com/users/ooasis","html_url":"https://github.com/ooasis","followers_url":"https://api.github.com/users/ooasis/followers","following_url":"https://api.github.com/users/ooasis/following{/other_user}","gists_url":"https://api.github.com/users/ooasis/gists{/gist_id}","starred_url":"https://api.github.com/users/ooasis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ooasis/subscriptions","organizations_url":"https://api.github.com/users/ooasis/orgs","repos_url":"https://api.github.com/users/ooasis/repos","events_url":"https://api.github.com/users/ooasis/events{/privacy}","received_events_url":"https://api.github.com/users/ooasis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T00:29:48Z","updated_at":"2016-07-11T00:29:48Z","author_association":"NONE","body":"I am currently on vacation and will be back in two weeks.  Will work on it as soon as I am back home.\n\n-thanks\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231620269/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598564","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598564","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598564,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg1NjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T00:29:50Z","updated_at":"2025-01-24T14:00:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hsun-cnnxty commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/728\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/728</a></p>\n\n<p>    I am currently on vacation and will be back in two weeks.  Will work on it as soon as I am back home.</p>\n\n<p>    -thanks</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598564/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231621228","html_url":"https://github.com/apache/storm/pull/728#issuecomment-231621228","issue_url":"https://api.github.com/repos/apache/storm/issues/728","id":231621228,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYyMTIyOA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T00:47:35Z","updated_at":"2016-07-11T00:47:35Z","author_association":"CONTRIBUTOR","body":"After rebasing, could you do the performance test against 1.x branch? The status of master branch is a  WIP so we would be more convenient with 1.x branch.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231621228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598568","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598568","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598568,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg1Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T00:47:36Z","updated_at":"2025-01-24T14:00:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/728\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/728</a></p>\n\n<p>    After rebasing, could you do the performance test against 1.x branch? The status of master branch is a  WIP so we would be more convenient with 1.x branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612901009","html_url":"https://github.com/apache/storm/issues/5572#issuecomment-2612901009","issue_url":"https://api.github.com/repos/apache/storm/issues/5572","id":2612901009,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDEwMDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T00:58:07Z","updated_at":"2025-01-24T16:15:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>If this issue can be fixed by several days I'm OK to mark this as 'Blocker', but if not I don't think this issue should block releasing 1.0.2.<br/>\nYes Kafka is a kind of de-facto standard queue now so we should consider Kafka as first class, but Apache Kafka 0.10 was released just 1 month ago and no other streaming frameworks seem support Kafka 0.10.</p>\n\n<p>Btw, can we make storm-kafka-client not using methods marked as 'Unstable'? Since it's marked as 'Unstable' Kafka community can change that at other minor updates, and I don't think we should follow their changes ASAP.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612901009/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923837","html_url":"https://github.com/apache/storm/issues/5732#issuecomment-2612923837","issue_url":"https://api.github.com/repos/apache/storm/issues/5732","id":2612923837,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM4Mzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:09:04Z","updated_at":"2025-01-24T16:26:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1545\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1545</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923578","html_url":"https://github.com/apache/storm/issues/5731#issuecomment-2612923578","issue_url":"https://api.github.com/repos/apache/storm/issues/5731","id":2612923578,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM1Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:11:12Z","updated_at":"2025-01-24T16:26:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>I'm OK to disable backpressure by default for short time, but we should work on resolving backpressure issue now, and enable backpressure again at next release or so.<br/>\nThis is not same as 'event logging', cause event logging is a kind of unique feature of Storm, but backpressure is common feature of recent streaming frameworks. Also backpressure is the only choice of non-ACK topology which needs throttle.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923578/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231623248","html_url":"https://github.com/apache/storm/pull/1516#issuecomment-231623248","issue_url":"https://api.github.com/repos/apache/storm/issues/1516","id":231623248,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYyMzI0OA==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:18:40Z","updated_at":"2016-07-11T01:18:40Z","author_association":"CONTRIBUTOR","body":"merged into 1.x-branch and master\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231623248/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920917","html_url":"https://github.com/apache/storm/issues/5712#issuecomment-2612920917","issue_url":"https://api.github.com/repos/apache/storm/issues/5712","id":2612920917,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA5MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:18:41Z","updated_at":"2025-01-24T16:25:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1516\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1516</a></p>\n\n<p>    merged into 1.x-branch and master</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920917/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612924100","html_url":"https://github.com/apache/storm/issues/5734#issuecomment-2612924100","issue_url":"https://api.github.com/repos/apache/storm/issues/5734","id":2612924100,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjQxMDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:23:41Z","updated_at":"2025-01-24T16:26:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Please correct me if I'm wrong. AFAIK, topology code is not same as cache because topology code is not used anymore when topology is killed. So while following LRU policy makes sense for this scenario, we can just remove topology code when supervisor knows it can be deleted.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612924100/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231623845","html_url":"https://github.com/apache/storm/pull/728#issuecomment-231623845","issue_url":"https://api.github.com/repos/apache/storm/issues/728","id":231623845,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYyMzg0NQ==","user":{"login":"ooasis","id":10720176,"node_id":"MDQ6VXNlcjEwNzIwMTc2","avatar_url":"https://avatars.githubusercontent.com/u/10720176?v=4","gravatar_id":"","url":"https://api.github.com/users/ooasis","html_url":"https://github.com/ooasis","followers_url":"https://api.github.com/users/ooasis/followers","following_url":"https://api.github.com/users/ooasis/following{/other_user}","gists_url":"https://api.github.com/users/ooasis/gists{/gist_id}","starred_url":"https://api.github.com/users/ooasis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ooasis/subscriptions","organizations_url":"https://api.github.com/users/ooasis/orgs","repos_url":"https://api.github.com/users/ooasis/repos","events_url":"https://api.github.com/users/ooasis/events{/privacy}","received_events_url":"https://api.github.com/users/ooasis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:26:22Z","updated_at":"2016-07-11T01:26:22Z","author_association":"NONE","body":"Sure.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231623845/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598575","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598575","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598575,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg1NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:26:24Z","updated_at":"2025-01-24T14:00:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hsun-cnnxty commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/728\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/728</a></p>\n\n<p>    Sure.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598575/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612914040","html_url":"https://github.com/apache/storm/issues/5665#issuecomment-2612914040","issue_url":"https://api.github.com/repos/apache/storm/issues/5665","id":2612914040,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTQwNDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:32:44Z","updated_at":"2025-01-24T16:21:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1462#discussion_r70193414\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1462#discussion_r70193414</a></p>\n\n<p>    &#8212; Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/spout/FileReader.java &#8212;<br/>\n    @@ -20,10 +20,11 @@</p>\n\n<p>     import org.apache.hadoop.fs.Path;</p>\n\n<p>    +import java.io.Closeable;<br/>\n     import java.io.IOException;<br/>\n     import java.util.List;</p>\n\n<p>    -interface FileReader {<br/>\n    +interface FileReader extends Closeable{<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    please add space after the Closeable</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612914040/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231624440","html_url":"https://github.com/apache/storm/pull/1462#issuecomment-231624440","issue_url":"https://api.github.com/repos/apache/storm/issues/1462","id":231624440,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTYyNDQ0MA==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:33:06Z","updated_at":"2016-07-11T01:33:06Z","author_association":"CONTRIBUTOR","body":"+1 after addressing the minor comment . @roshannaik can you review as well.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231624440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612914045","html_url":"https://github.com/apache/storm/issues/5665#issuecomment-2612914045","issue_url":"https://api.github.com/repos/apache/storm/issues/5665","id":2612914045,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTQwNDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:33:07Z","updated_at":"2025-01-24T16:21:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1462\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1462</a></p>\n\n<p>    +1 after addressing the minor comment . @roshannaik can you review as well.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612914045/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654746","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654746","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654746,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3NDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:34:08Z","updated_at":"2025-01-24T14:24:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70193475\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70193475</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -101,7 +101,7 @@ public void execute(Tuple input) {<br/>\n }<br/>\n curr.failed = true;<br/>\n pending.put(id, curr);</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>} else if (ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)) \n{\n    +}\n<p> else if(ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)) {</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    space after if</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654746/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654753","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654753","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654753,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:35:38Z","updated_at":"2025-01-24T14:24:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70193530\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70193530</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Task.java &#8212;<br/>\n    @@ -179,23 +180,22 @@ public BuiltinMetrics getBuiltInMetrics() {<br/>\n private TopologyContext mkTopologyContext(StormTopology topology) throws IOException {<br/>\n     Map conf = (Map) workerData.get(\"conf\");<br/>\n     return new TopologyContext(</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>topology,</li>\n\t<li>(Map) workerData.get(\"storm-conf\"),</li>\n\t<li>(Map<Integer, String>) workerData.get(\"task->component\"),</li>\n\t<li>(Map<String, List<Integer>>) workerData.get(\"component->sorted-tasks\"),</li>\n\t<li>(Map<String, Map<String, Fields>>) workerData.get(\"component->stream->fields\"),</li>\n\t<li>(String) workerData.get(\"storm-id\"),</li>\n\t<li>ConfigUtils.supervisorStormResourcesPath(ConfigUtils.supervisorStormDistRoot(conf, (String) workerData.get(\"storm-id\"))),</li>\n\t<li>ConfigUtils.workerPidsRoot(conf, (String) workerData.get(\"worker-id\")),</li>\n\t<li>taskId,</li>\n\t<li>(Integer) workerData.get(\"port\"),</li>\n\t<li>(List<Integer>) workerData.get(\"task-ids\"),</li>\n\t<li>(Map<String, Object>) workerData.get(\"default-shared-resources\"),</li>\n\t<li>(Map<String, Object>) workerData.get(\"user-shared-resources\"),</li>\n\t<li>(Map<String, Object>) executorData.get(\"shared-executor-data\"),</li>\n\t<li>(Map<Integer, Map<Integer, Map<String, IMetric>>>) executorData.get(\"interval->task->metric-registry\"),</li>\n\t<li>(clojure.lang.Atom) executorData.get(\"open-or-prepare-was-called?\")</li>\n\t<li>);<br/>\n    +topology,<br/>\n    +(Map) workerData.get(\"storm-conf\"),\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    can we move these strings into final String at the top level. I prefer if we add a file ExecutorDataConstants and all these there.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654753/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654757","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654757","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654757,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3NTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:36:02Z","updated_at":"2025-01-24T14:24:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70193545\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70193545</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,567 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    can we not do wildcard imports</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654757/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654762","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654762","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654762,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3NjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:47:42Z","updated_at":"2025-01-24T14:24:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70194012\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70194012</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -539,10 +542,34 @@ protected IAuthorizer mkAuthorizationHandlerImpl(String klassName, Map conf) thr<br/>\n     if (aznHandler != null) </p>\n{\n aznHandler.prepare(conf);\n     }\n<ul class=\"alternate\" type=\"square\">\n\t<li>LOG.debug(\"authorization class name:{}, class:{}, handler:{}\",klassName, aznClass, aznHandler);<br/>\n    +LOG.debug(\"authorization class name:{}, class:{}, handler:{}\", klassName, aznClass, aznHandler);<br/>\n }<br/>\n     }</li>\n</ul>\n\n\n<p>     return aznHandler;<br/>\n }<br/>\n    +<br/>\n    +    public static WorkerTopologyContext makeWorkerContext(Map<String, Object> workerData) {<br/>\n    +try {<br/>\n    +    StormTopology stormTopology = (StormTopology) workerData.get(\"system-topology\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    we should add these strings at the top with private static final String</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654762/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612921393","html_url":"https://github.com/apache/storm/issues/5715#issuecomment-2612921393","issue_url":"https://api.github.com/repos/apache/storm/issues/5715","id":2612921393,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjEzOTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:48:18Z","updated_at":"2025-01-24T16:25:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/browse/STORM-1934\" title=\"Race condition between sync-supervisor and sync-processes raises several strange issues\" class=\"issue-link\" data-issue-key=\"STORM-1934\"><del>STORM-1934</del></a> is merged. I'll run the test 20 times and close this issue if there's no intermittent failure on test-multiple-active-storms-multiple-supervisors.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612921393/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654768","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654768","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654768,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:54:23Z","updated_at":"2025-01-24T14:24:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70194309\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70194309</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,567 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    +    protected String hostname;<br/>\n    +<br/>\n    +    protected Executor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +this.workerData = workerData;<br/>\n    +this.executorId = executorId;<br/>\n    +this.workerTopologyContext = StormCommon.makeWorkerContext(workerData);<br/>\n    +this.taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +this.componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +this.openOrPrepareWasCalled = new AtomicBoolean(false);<br/>\n    +this.stormConf = normalizedComponentConf((Map) workerData.get(\"storm-conf\"), workerTopologyContext, componentId);<br/>\n    +this.receiveQueue = (DisruptorQueue) (((Map) workerData.get(\"executor-receive-queue-map\")).get(executorId));<br/>\n    +this.stormId = (String) workerData.get(\"storm-id\");<br/>\n    +this.conf = (Map) workerData.get(\"conf\");<br/>\n    +this.sharedExecutorData = new HashMap();<br/>\n    +this.stormActive = (AtomicBoolean) workerData.get(\"storm-active-atom\");<br/>\n    +this.stormComponentDebug = (AtomicReference<Map<String, DebugOptions>>) workerData.get(\"storm-component->debug-atom\");<br/>\n    +<br/>\n    +this.transferQueue = mkExecutorBatchQueue(stormConf, executorId);<br/>\n    +this.transferFn = (IFn) workerData.get(\"transfer-fn\");<br/>\n    +this.executorTransfer = new ExecutorTransfer(workerTopologyContext, transferQueue, stormConf, transferFn);<br/>\n    +<br/>\n    +this.suicideFn = (Runnable) workerData.get(\"suicide-fn\");<br/>\n    +try </p>\n{\n    +    this.stormClusterState = ClusterUtils.mkStormClusterState(workerData.get(\"state-store\"), Utils.getWorkerACL(stormConf),\n    +    new ClusterStateContext(DaemonType.SUPERVISOR));\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    this.type = StatsUtil.SPOUT;\n    +    this.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else if (bolts.containsKey(componentId)) {\n    +    this.type = StatsUtil.BOLT;\n    +    this.stats = new BoltExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else {\n    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);\n    +}<br/>\n    +<br/>\n    +this.intervalToTaskToMetricToRegistry = new HashMap<>();<br/>\n    +this.taskToComponent = (Map<Integer, String>) workerData.get(\"task->component\");<br/>\n    +this.streamToComponentToGrouper = outboundComponents(workerTopologyContext, componentId, stormConf);<br/>\n    +this.reportError = new ReportError(stormConf, stormClusterState, stormId, componentId, workerTopologyContext);<br/>\n    +this.reportErrorDie = new ReportErrorAndDie(reportError, suicideFn);<br/>\n    +this.sampler = ConfigUtils.mkStatsSampler(stormConf);<br/>\n    +this.backpressure = new AtomicBoolean(false);<br/>\n    +this.throttleOn = (AtomicBoolean) workerData.get(\"throttle-on\");<br/>\n    +this.isDebug = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_DEBUG), false);<br/>\n    +this.rand = new Random(Utils.secureRandomLong());<br/>\n    +this.credentials = credentials;<br/>\n    +this.isEventLoggers = StormCommon.hasEventLoggers(stormConf);<br/>\n    +<br/>\n    +try {\n    +    this.hostname = Utils.hostname(stormConf);\n    +} catch (UnknownHostException ignored) {\n    +    this.hostname = \"\";\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Executor mkExecutor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +Executor executor;<br/>\n    +<br/>\n    +Map<String, Object> convertedWorkerData = Utils.convertMap(workerData);<br/>\n    +WorkerTopologyContext workerTopologyContext = StormCommon.makeWorkerContext(convertedWorkerData);<br/>\n    +List<Integer> taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +String componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +<br/>\n    +String type = getExecutorType(workerTopologyContext, componentId);<br/>\n    +if (StatsUtil.SPOUT.equals(type)) {\n    +    executor = new SpoutExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +} else {\n    +    executor = new BoltExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new BoltExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +}<br/>\n    +<br/>\n    +Map<Integer, Task> idToTask = new HashMap<>();<br/>\n    +for (Integer taskId : taskIds) {<br/>\n    +    try {\n    +Task task = new Task(executor, taskId);\n    +executor.sendUnanchored(task, StormCommon.SYSTEM_STREAM_ID, new Values(\"startup\"), executor.getExecutorTransfer());\n    +idToTask.put(taskId, task);\n    +    } catch (IOException ex) {\n    +throw Utils.wrapInRuntime(ex);\n    +    }<br/>\n    +}<br/>\n    +executor.init(idToTask);<br/>\n    +<br/>\n    +return executor;<br/>\n    +    }<br/>\n    +<br/>\n    +    private static String getExecutorType(WorkerTopologyContext workerTopologyContext, String componentId) {<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    return StatsUtil.SPOUT;\n    +} else if (bolts.containsKey(componentId)) {\n    +    return StatsUtil.BOLT;\n    +} else {    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * separated from mkExecutor in order to replace executor transfer in executor data for testing<br/>\n    +     */<br/>\n    +    public ExecutorShutdown execute() throws Exception {\n    +LOG.info(\"Loading executor tasks \" + componentId + \":\" + executorId);\n    +\n    +registerBackpressure();\n    +Utils.SmartThread systemThreads =\n    +Utils.asyncLoop(executorTransfer, executorTransfer.getName(), reportErrorDie);\n    +\n    +String handlerName = componentId + \"-executor\" + executorId;\n    +Utils.SmartThread handlers = Utils.asyncLoop(this, false, reportErrorDie, Thread.NORM_PRIORITY, false, true, handlerName);\n    +setupTicks(StatsUtil.SPOUT.equals(type));\n    +LOG.info(\"Finished loading executor \" + componentId + \":\" + executorId);\n    +return new ExecutorShutdown(this, Lists.newArrayList(systemThreads, handlers), idToTask);\n    +    }<br/>\n    +<br/>\n    +    public abstract void tupleActionFn(int taskId, TupleImpl tuple) throws Exception;<br/>\n    +<br/>\n    +    public abstract void init(Map<Integer, Task> idToTask);<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    @Override<br/>\n    +    public void onEvent(Object event, long seq, boolean endOfBatch) throws Exception {<br/>\n    +ArrayList<AddressedTuple> addressedTuples = (ArrayList<AddressedTuple>) event;<br/>\n    +for (AddressedTuple addressedTuple : addressedTuples) {<br/>\n    +    TupleImpl tuple = (TupleImpl) addressedTuple.getTuple();<br/>\n    +    int taskId = addressedTuple.getDest();<br/>\n    +    if (isDebug) {<br/>\n    +LOG.info(\"Processing received message FOR {} TUPLE: {}\", taskId, tuple);<br/>\n    +    }<br/>\n    +    if (taskId != AddressedTuple.BROADCAST_DEST) {\n    +tupleActionFn(taskId, tuple);\n    +    } else {<br/>\n    +for (Integer t : taskIds) {\n    +    tupleActionFn(t, tuple);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void metricsTick(Task taskData, TupleImpl tuple) {<br/>\n    +try {<br/>\n    +    Integer interval = tuple.getInteger(0);<br/>\n    +    int taskId = taskData.getTaskId();<br/>\n    +    Map<Integer, Map<String, IMetric>> taskToMetricToRegistry = intervalToTaskToMetricToRegistry.get(interval);<br/>\n    +    Map<String, IMetric> nameToRegistry = null;<br/>\n    +    if (taskToMetricToRegistry != null) {\n    +nameToRegistry = taskToMetricToRegistry.get(taskId);\n    +    }<br/>\n    +    if (nameToRegistry != null) {<br/>\n    +IMetricsConsumer.TaskInfo taskInfo = new IMetricsConsumer.TaskInfo(hostname, workerTopologyContext.getThisWorkerPort(),<br/>\n    +componentId, taskId, Time.currentTimeSecs(), interval);<br/>\n    +List<IMetricsConsumer.DataPoint> dataPoints = new ArrayList<>();<br/>\n    +for (Map.Entry<String, IMetric> entry : nameToRegistry.entrySet()) {<br/>\n    +    IMetric metric = entry.getValue();<br/>\n    +    Object value = metric.getValueAndReset();<br/>\n    +    if (value != null) {\n    +IMetricsConsumer.DataPoint dataPoint = new IMetricsConsumer.DataPoint(entry.getKey(), value);\n    +dataPoints.add(dataPoint);\n    +    }<br/>\n    +}<br/>\n    +if (!dataPoints.isEmpty()) {\n    +    sendUnanchored(taskData, Constants.METRICS_STREAM_ID, new Values(taskInfo, dataPoints), executorTransfer);\n    +}<br/>\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void setupMetrics() {<br/>\n    +for (final Integer interval : intervalToTaskToMetricToRegistry.keySet()) {<br/>\n    +    StormTimer timerTask = (StormTimer) workerData.get(\"user-timer\");<br/>\n    +    timerTask.scheduleRecurring(interval, interval, new Runnable() {<br/>\n    +@Override<br/>\n    +public void run() </p>\n{\n    +    TupleImpl tuple =\n    +    new TupleImpl(workerTopologyContext, new Values(interval), (int) Constants.SYSTEM_TASK_ID, Constants.METRICS_TICK_STREAM_ID);\n    +    List<AddressedTuple> metricsTickTuple = Lists.newArrayList(new AddressedTuple(AddressedTuple.BROADCAST_DEST, tuple));\n    +    receiveQueue.publish(metricsTickTuple);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) {<br/>\n    +Tuple tuple = task.getTuple(stream, values);<br/>\n    +List<Integer> tasks = task.getOutgoingTasks(stream, values);<br/>\n    +if (tasks.size() == 0) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    we don't need this check right. For loop won't enter if tasks are empty. We should avoid having multiple returns.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654768/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654784","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654784","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654784,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T01:56:23Z","updated_at":"2025-01-24T14:24:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70194386\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70194386</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,567 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    +    protected String hostname;<br/>\n    +<br/>\n    +    protected Executor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +this.workerData = workerData;<br/>\n    +this.executorId = executorId;<br/>\n    +this.workerTopologyContext = StormCommon.makeWorkerContext(workerData);<br/>\n    +this.taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +this.componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +this.openOrPrepareWasCalled = new AtomicBoolean(false);<br/>\n    +this.stormConf = normalizedComponentConf((Map) workerData.get(\"storm-conf\"), workerTopologyContext, componentId);<br/>\n    +this.receiveQueue = (DisruptorQueue) (((Map) workerData.get(\"executor-receive-queue-map\")).get(executorId));<br/>\n    +this.stormId = (String) workerData.get(\"storm-id\");<br/>\n    +this.conf = (Map) workerData.get(\"conf\");<br/>\n    +this.sharedExecutorData = new HashMap();<br/>\n    +this.stormActive = (AtomicBoolean) workerData.get(\"storm-active-atom\");<br/>\n    +this.stormComponentDebug = (AtomicReference<Map<String, DebugOptions>>) workerData.get(\"storm-component->debug-atom\");<br/>\n    +<br/>\n    +this.transferQueue = mkExecutorBatchQueue(stormConf, executorId);<br/>\n    +this.transferFn = (IFn) workerData.get(\"transfer-fn\");<br/>\n    +this.executorTransfer = new ExecutorTransfer(workerTopologyContext, transferQueue, stormConf, transferFn);<br/>\n    +<br/>\n    +this.suicideFn = (Runnable) workerData.get(\"suicide-fn\");<br/>\n    +try </p>\n{\n    +    this.stormClusterState = ClusterUtils.mkStormClusterState(workerData.get(\"state-store\"), Utils.getWorkerACL(stormConf),\n    +    new ClusterStateContext(DaemonType.SUPERVISOR));\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    this.type = StatsUtil.SPOUT;\n    +    this.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else if (bolts.containsKey(componentId)) {\n    +    this.type = StatsUtil.BOLT;\n    +    this.stats = new BoltExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else {\n    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);\n    +}<br/>\n    +<br/>\n    +this.intervalToTaskToMetricToRegistry = new HashMap<>();<br/>\n    +this.taskToComponent = (Map<Integer, String>) workerData.get(\"task->component\");<br/>\n    +this.streamToComponentToGrouper = outboundComponents(workerTopologyContext, componentId, stormConf);<br/>\n    +this.reportError = new ReportError(stormConf, stormClusterState, stormId, componentId, workerTopologyContext);<br/>\n    +this.reportErrorDie = new ReportErrorAndDie(reportError, suicideFn);<br/>\n    +this.sampler = ConfigUtils.mkStatsSampler(stormConf);<br/>\n    +this.backpressure = new AtomicBoolean(false);<br/>\n    +this.throttleOn = (AtomicBoolean) workerData.get(\"throttle-on\");<br/>\n    +this.isDebug = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_DEBUG), false);<br/>\n    +this.rand = new Random(Utils.secureRandomLong());<br/>\n    +this.credentials = credentials;<br/>\n    +this.isEventLoggers = StormCommon.hasEventLoggers(stormConf);<br/>\n    +<br/>\n    +try {\n    +    this.hostname = Utils.hostname(stormConf);\n    +} catch (UnknownHostException ignored) {\n    +    this.hostname = \"\";\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Executor mkExecutor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +Executor executor;<br/>\n    +<br/>\n    +Map<String, Object> convertedWorkerData = Utils.convertMap(workerData);<br/>\n    +WorkerTopologyContext workerTopologyContext = StormCommon.makeWorkerContext(convertedWorkerData);<br/>\n    +List<Integer> taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +String componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +<br/>\n    +String type = getExecutorType(workerTopologyContext, componentId);<br/>\n    +if (StatsUtil.SPOUT.equals(type)) {\n    +    executor = new SpoutExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +} else {\n    +    executor = new BoltExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new BoltExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +}<br/>\n    +<br/>\n    +Map<Integer, Task> idToTask = new HashMap<>();<br/>\n    +for (Integer taskId : taskIds) {<br/>\n    +    try {\n    +Task task = new Task(executor, taskId);\n    +executor.sendUnanchored(task, StormCommon.SYSTEM_STREAM_ID, new Values(\"startup\"), executor.getExecutorTransfer());\n    +idToTask.put(taskId, task);\n    +    } catch (IOException ex) {\n    +throw Utils.wrapInRuntime(ex);\n    +    }<br/>\n    +}<br/>\n    +executor.init(idToTask);<br/>\n    +<br/>\n    +return executor;<br/>\n    +    }<br/>\n    +<br/>\n    +    private static String getExecutorType(WorkerTopologyContext workerTopologyContext, String componentId) {<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    return StatsUtil.SPOUT;\n    +} else if (bolts.containsKey(componentId)) {\n    +    return StatsUtil.BOLT;\n    +} else {    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * separated from mkExecutor in order to replace executor transfer in executor data for testing<br/>\n    +     */<br/>\n    +    public ExecutorShutdown execute() throws Exception {\n    +LOG.info(\"Loading executor tasks \" + componentId + \":\" + executorId);\n    +\n    +registerBackpressure();\n    +Utils.SmartThread systemThreads =\n    +Utils.asyncLoop(executorTransfer, executorTransfer.getName(), reportErrorDie);\n    +\n    +String handlerName = componentId + \"-executor\" + executorId;\n    +Utils.SmartThread handlers = Utils.asyncLoop(this, false, reportErrorDie, Thread.NORM_PRIORITY, false, true, handlerName);\n    +setupTicks(StatsUtil.SPOUT.equals(type));\n    +LOG.info(\"Finished loading executor \" + componentId + \":\" + executorId);\n    +return new ExecutorShutdown(this, Lists.newArrayList(systemThreads, handlers), idToTask);\n    +    }<br/>\n    +<br/>\n    +    public abstract void tupleActionFn(int taskId, TupleImpl tuple) throws Exception;<br/>\n    +<br/>\n    +    public abstract void init(Map<Integer, Task> idToTask);<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    @Override<br/>\n    +    public void onEvent(Object event, long seq, boolean endOfBatch) throws Exception {<br/>\n    +ArrayList<AddressedTuple> addressedTuples = (ArrayList<AddressedTuple>) event;<br/>\n    +for (AddressedTuple addressedTuple : addressedTuples) {<br/>\n    +    TupleImpl tuple = (TupleImpl) addressedTuple.getTuple();<br/>\n    +    int taskId = addressedTuple.getDest();<br/>\n    +    if (isDebug) {<br/>\n    +LOG.info(\"Processing received message FOR {} TUPLE: {}\", taskId, tuple);<br/>\n    +    }<br/>\n    +    if (taskId != AddressedTuple.BROADCAST_DEST) {\n    +tupleActionFn(taskId, tuple);\n    +    } else {<br/>\n    +for (Integer t : taskIds) {\n    +    tupleActionFn(t, tuple);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void metricsTick(Task taskData, TupleImpl tuple) {<br/>\n    +try {<br/>\n    +    Integer interval = tuple.getInteger(0);<br/>\n    +    int taskId = taskData.getTaskId();<br/>\n    +    Map<Integer, Map<String, IMetric>> taskToMetricToRegistry = intervalToTaskToMetricToRegistry.get(interval);<br/>\n    +    Map<String, IMetric> nameToRegistry = null;<br/>\n    +    if (taskToMetricToRegistry != null) {\n    +nameToRegistry = taskToMetricToRegistry.get(taskId);\n    +    }<br/>\n    +    if (nameToRegistry != null) {<br/>\n    +IMetricsConsumer.TaskInfo taskInfo = new IMetricsConsumer.TaskInfo(hostname, workerTopologyContext.getThisWorkerPort(),<br/>\n    +componentId, taskId, Time.currentTimeSecs(), interval);<br/>\n    +List<IMetricsConsumer.DataPoint> dataPoints = new ArrayList<>();<br/>\n    +for (Map.Entry<String, IMetric> entry : nameToRegistry.entrySet()) {<br/>\n    +    IMetric metric = entry.getValue();<br/>\n    +    Object value = metric.getValueAndReset();<br/>\n    +    if (value != null) {\n    +IMetricsConsumer.DataPoint dataPoint = new IMetricsConsumer.DataPoint(entry.getKey(), value);\n    +dataPoints.add(dataPoint);\n    +    }<br/>\n    +}<br/>\n    +if (!dataPoints.isEmpty()) {\n    +    sendUnanchored(taskData, Constants.METRICS_STREAM_ID, new Values(taskInfo, dataPoints), executorTransfer);\n    +}<br/>\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void setupMetrics() {<br/>\n    +for (final Integer interval : intervalToTaskToMetricToRegistry.keySet()) {<br/>\n    +    StormTimer timerTask = (StormTimer) workerData.get(\"user-timer\");<br/>\n    +    timerTask.scheduleRecurring(interval, interval, new Runnable() {<br/>\n    +@Override<br/>\n    +public void run() </p>\n{\n    +    TupleImpl tuple =\n    +    new TupleImpl(workerTopologyContext, new Values(interval), (int) Constants.SYSTEM_TASK_ID, Constants.METRICS_TICK_STREAM_ID);\n    +    List<AddressedTuple> metricsTickTuple = Lists.newArrayList(new AddressedTuple(AddressedTuple.BROADCAST_DEST, tuple));\n    +    receiveQueue.publish(metricsTickTuple);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) {<br/>\n    +Tuple tuple = task.getTuple(stream, values);<br/>\n    +List<Integer> tasks = task.getOutgoingTasks(stream, values);<br/>\n    +if (tasks.size() == 0) </p>\n{\n    +    return;\n    +}\n<p>    +for (Integer t : tasks) </p>\n{\n    +    transfer.transfer(t, tuple);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Send sampled data to the eventlogger if the global or component level debug flag is set (via nimbus api).<br/>\n    +     */<br/>\n    +    public void sendToEventLogger(Executor executor, Task taskData, List values, String componentId, Object messageId, Random random) {<br/>\n    +Map<String, DebugOptions> componentDebug = executor.getStormComponentDebug().get();<br/>\n    +DebugOptions debugOptions = componentDebug.get(componentId);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    can we use ternary operator as below.<br/>\n    DebugOptions debugOptions = (componentDebug.get(componentId) ! = null) ? componentDebug.get(componentId) : componentDebug.get(executor.getStormId());</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654784/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654791","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654791","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654791,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T02:04:06Z","updated_at":"2025-01-24T14:24:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70194730\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70194730</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -77,7 +78,7 @@ public static StormCommon setInstance(StormCommon common) </p>\n{\n     return oldInstance;\n }\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +    private static final Logger LOG = getLogger(StormCommon.class);\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    lets keep it to LoggerFactory.getLogger given that we are using the same way everywhere else.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654791/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612921396","html_url":"https://github.com/apache/storm/issues/5715#issuecomment-2612921396","issue_url":"https://api.github.com/repos/apache/storm/issues/5715","id":2612921396,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjEzOTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T02:51:11Z","updated_at":"2025-01-24T16:25:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Intermittent failure is not shown within 20 times build. Closing.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612921396/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923844","html_url":"https://github.com/apache/storm/issues/5732#issuecomment-2612923844","issue_url":"https://api.github.com/repos/apache/storm/issues/5732","id":2612923844,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM4NDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T03:13:14Z","updated_at":"2025-01-24T16:26:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Merged by <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sriharsha\" class=\"user-hover\" rel=\"sriharsha\">Harsha</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923844/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654797","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654797","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654797,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T05:20:50Z","updated_at":"2025-01-24T14:24:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70203481\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70203481</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,567 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    +    protected String hostname;<br/>\n    +<br/>\n    +    protected Executor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +this.workerData = workerData;<br/>\n    +this.executorId = executorId;<br/>\n    +this.workerTopologyContext = StormCommon.makeWorkerContext(workerData);<br/>\n    +this.taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +this.componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +this.openOrPrepareWasCalled = new AtomicBoolean(false);<br/>\n    +this.stormConf = normalizedComponentConf((Map) workerData.get(\"storm-conf\"), workerTopologyContext, componentId);<br/>\n    +this.receiveQueue = (DisruptorQueue) (((Map) workerData.get(\"executor-receive-queue-map\")).get(executorId));<br/>\n    +this.stormId = (String) workerData.get(\"storm-id\");<br/>\n    +this.conf = (Map) workerData.get(\"conf\");<br/>\n    +this.sharedExecutorData = new HashMap();<br/>\n    +this.stormActive = (AtomicBoolean) workerData.get(\"storm-active-atom\");<br/>\n    +this.stormComponentDebug = (AtomicReference<Map<String, DebugOptions>>) workerData.get(\"storm-component->debug-atom\");<br/>\n    +<br/>\n    +this.transferQueue = mkExecutorBatchQueue(stormConf, executorId);<br/>\n    +this.transferFn = (IFn) workerData.get(\"transfer-fn\");<br/>\n    +this.executorTransfer = new ExecutorTransfer(workerTopologyContext, transferQueue, stormConf, transferFn);<br/>\n    +<br/>\n    +this.suicideFn = (Runnable) workerData.get(\"suicide-fn\");<br/>\n    +try </p>\n{\n    +    this.stormClusterState = ClusterUtils.mkStormClusterState(workerData.get(\"state-store\"), Utils.getWorkerACL(stormConf),\n    +    new ClusterStateContext(DaemonType.SUPERVISOR));\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    this.type = StatsUtil.SPOUT;\n    +    this.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else if (bolts.containsKey(componentId)) {\n    +    this.type = StatsUtil.BOLT;\n    +    this.stats = new BoltExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else {\n    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);\n    +}<br/>\n    +<br/>\n    +this.intervalToTaskToMetricToRegistry = new HashMap<>();<br/>\n    +this.taskToComponent = (Map<Integer, String>) workerData.get(\"task->component\");<br/>\n    +this.streamToComponentToGrouper = outboundComponents(workerTopologyContext, componentId, stormConf);<br/>\n    +this.reportError = new ReportError(stormConf, stormClusterState, stormId, componentId, workerTopologyContext);<br/>\n    +this.reportErrorDie = new ReportErrorAndDie(reportError, suicideFn);<br/>\n    +this.sampler = ConfigUtils.mkStatsSampler(stormConf);<br/>\n    +this.backpressure = new AtomicBoolean(false);<br/>\n    +this.throttleOn = (AtomicBoolean) workerData.get(\"throttle-on\");<br/>\n    +this.isDebug = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_DEBUG), false);<br/>\n    +this.rand = new Random(Utils.secureRandomLong());<br/>\n    +this.credentials = credentials;<br/>\n    +this.isEventLoggers = StormCommon.hasEventLoggers(stormConf);<br/>\n    +<br/>\n    +try {\n    +    this.hostname = Utils.hostname(stormConf);\n    +} catch (UnknownHostException ignored) {\n    +    this.hostname = \"\";\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Executor mkExecutor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +Executor executor;<br/>\n    +<br/>\n    +Map<String, Object> convertedWorkerData = Utils.convertMap(workerData);<br/>\n    +WorkerTopologyContext workerTopologyContext = StormCommon.makeWorkerContext(convertedWorkerData);<br/>\n    +List<Integer> taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +String componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +<br/>\n    +String type = getExecutorType(workerTopologyContext, componentId);<br/>\n    +if (StatsUtil.SPOUT.equals(type)) {\n    +    executor = new SpoutExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +} else {\n    +    executor = new BoltExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new BoltExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +}<br/>\n    +<br/>\n    +Map<Integer, Task> idToTask = new HashMap<>();<br/>\n    +for (Integer taskId : taskIds) {<br/>\n    +    try {\n    +Task task = new Task(executor, taskId);\n    +executor.sendUnanchored(task, StormCommon.SYSTEM_STREAM_ID, new Values(\"startup\"), executor.getExecutorTransfer());\n    +idToTask.put(taskId, task);\n    +    } catch (IOException ex) {\n    +throw Utils.wrapInRuntime(ex);\n    +    }<br/>\n    +}<br/>\n    +executor.init(idToTask);<br/>\n    +<br/>\n    +return executor;<br/>\n    +    }<br/>\n    +<br/>\n    +    private static String getExecutorType(WorkerTopologyContext workerTopologyContext, String componentId) {<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    return StatsUtil.SPOUT;\n    +} else if (bolts.containsKey(componentId)) {\n    +    return StatsUtil.BOLT;\n    +} else {    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * separated from mkExecutor in order to replace executor transfer in executor data for testing<br/>\n    +     */<br/>\n    +    public ExecutorShutdown execute() throws Exception {\n    +LOG.info(\"Loading executor tasks \" + componentId + \":\" + executorId);\n    +\n    +registerBackpressure();\n    +Utils.SmartThread systemThreads =\n    +Utils.asyncLoop(executorTransfer, executorTransfer.getName(), reportErrorDie);\n    +\n    +String handlerName = componentId + \"-executor\" + executorId;\n    +Utils.SmartThread handlers = Utils.asyncLoop(this, false, reportErrorDie, Thread.NORM_PRIORITY, false, true, handlerName);\n    +setupTicks(StatsUtil.SPOUT.equals(type));\n    +LOG.info(\"Finished loading executor \" + componentId + \":\" + executorId);\n    +return new ExecutorShutdown(this, Lists.newArrayList(systemThreads, handlers), idToTask);\n    +    }<br/>\n    +<br/>\n    +    public abstract void tupleActionFn(int taskId, TupleImpl tuple) throws Exception;<br/>\n    +<br/>\n    +    public abstract void init(Map<Integer, Task> idToTask);<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    @Override<br/>\n    +    public void onEvent(Object event, long seq, boolean endOfBatch) throws Exception {<br/>\n    +ArrayList<AddressedTuple> addressedTuples = (ArrayList<AddressedTuple>) event;<br/>\n    +for (AddressedTuple addressedTuple : addressedTuples) {<br/>\n    +    TupleImpl tuple = (TupleImpl) addressedTuple.getTuple();<br/>\n    +    int taskId = addressedTuple.getDest();<br/>\n    +    if (isDebug) {<br/>\n    +LOG.info(\"Processing received message FOR {} TUPLE: {}\", taskId, tuple);<br/>\n    +    }<br/>\n    +    if (taskId != AddressedTuple.BROADCAST_DEST) {\n    +tupleActionFn(taskId, tuple);\n    +    } else {<br/>\n    +for (Integer t : taskIds) {\n    +    tupleActionFn(t, tuple);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void metricsTick(Task taskData, TupleImpl tuple) {<br/>\n    +try {<br/>\n    +    Integer interval = tuple.getInteger(0);<br/>\n    +    int taskId = taskData.getTaskId();<br/>\n    +    Map<Integer, Map<String, IMetric>> taskToMetricToRegistry = intervalToTaskToMetricToRegistry.get(interval);<br/>\n    +    Map<String, IMetric> nameToRegistry = null;<br/>\n    +    if (taskToMetricToRegistry != null) {\n    +nameToRegistry = taskToMetricToRegistry.get(taskId);\n    +    }<br/>\n    +    if (nameToRegistry != null) {<br/>\n    +IMetricsConsumer.TaskInfo taskInfo = new IMetricsConsumer.TaskInfo(hostname, workerTopologyContext.getThisWorkerPort(),<br/>\n    +componentId, taskId, Time.currentTimeSecs(), interval);<br/>\n    +List<IMetricsConsumer.DataPoint> dataPoints = new ArrayList<>();<br/>\n    +for (Map.Entry<String, IMetric> entry : nameToRegistry.entrySet()) {<br/>\n    +    IMetric metric = entry.getValue();<br/>\n    +    Object value = metric.getValueAndReset();<br/>\n    +    if (value != null) {\n    +IMetricsConsumer.DataPoint dataPoint = new IMetricsConsumer.DataPoint(entry.getKey(), value);\n    +dataPoints.add(dataPoint);\n    +    }<br/>\n    +}<br/>\n    +if (!dataPoints.isEmpty()) {\n    +    sendUnanchored(taskData, Constants.METRICS_STREAM_ID, new Values(taskInfo, dataPoints), executorTransfer);\n    +}<br/>\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void setupMetrics() {<br/>\n    +for (final Integer interval : intervalToTaskToMetricToRegistry.keySet()) {<br/>\n    +    StormTimer timerTask = (StormTimer) workerData.get(\"user-timer\");<br/>\n    +    timerTask.scheduleRecurring(interval, interval, new Runnable() {<br/>\n    +@Override<br/>\n    +public void run() </p>\n{\n    +    TupleImpl tuple =\n    +    new TupleImpl(workerTopologyContext, new Values(interval), (int) Constants.SYSTEM_TASK_ID, Constants.METRICS_TICK_STREAM_ID);\n    +    List<AddressedTuple> metricsTickTuple = Lists.newArrayList(new AddressedTuple(AddressedTuple.BROADCAST_DEST, tuple));\n    +    receiveQueue.publish(metricsTickTuple);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) {<br/>\n    +Tuple tuple = task.getTuple(stream, values);<br/>\n    +List<Integer> tasks = task.getOutgoingTasks(stream, values);<br/>\n    +if (tasks.size() == 0) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    ok, addressed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654797/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654798","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654798","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654798,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ3OTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T06:05:36Z","updated_at":"2025-01-24T14:24:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70205623\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70205623</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -101,7 +101,7 @@ public void execute(Tuple input) {<br/>\n }<br/>\n curr.failed = true;<br/>\n pending.put(id, curr);</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>} else if (ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)) \n{\n    +}\n<p> else if(ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)) {</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    addressed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654798/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654806","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654806","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654806,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T06:05:46Z","updated_at":"2025-01-24T14:24:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70205629\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70205629</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -77,7 +78,7 @@ public static StormCommon setInstance(StormCommon common) </p>\n{\n     return oldInstance;\n }\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +    private static final Logger LOG = getLogger(StormCommon.class);\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    addressed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654813","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654813","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654813,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4MTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T06:07:40Z","updated_at":"2025-01-24T14:24:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70205708\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70205708</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -539,10 +542,34 @@ protected IAuthorizer mkAuthorizationHandlerImpl(String klassName, Map conf) thr<br/>\n     if (aznHandler != null) </p>\n{\n aznHandler.prepare(conf);\n     }\n<ul class=\"alternate\" type=\"square\">\n\t<li>LOG.debug(\"authorization class name:{}, class:{}, handler:{}\",klassName, aznClass, aznHandler);<br/>\n    +LOG.debug(\"authorization class name:{}, class:{}, handler:{}\", klassName, aznClass, aznHandler);<br/>\n }<br/>\n     }</li>\n</ul>\n\n\n<p>     return aznHandler;<br/>\n }<br/>\n    +<br/>\n    +    public static WorkerTopologyContext makeWorkerContext(Map<String, Object> workerData) {<br/>\n    +try {<br/>\n    +    StormTopology stormTopology = (StormTopology) workerData.get(\"system-topology\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    addressed, moved them into Constants class</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654813/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654817","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654817","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654817,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T06:08:12Z","updated_at":"2025-01-24T14:24:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70205731\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70205731</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Task.java &#8212;<br/>\n    @@ -179,23 +180,22 @@ public BuiltinMetrics getBuiltInMetrics() {<br/>\n private TopologyContext mkTopologyContext(StormTopology topology) throws IOException {<br/>\n     Map conf = (Map) workerData.get(\"conf\");<br/>\n     return new TopologyContext(</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>topology,</li>\n\t<li>(Map) workerData.get(\"storm-conf\"),</li>\n\t<li>(Map<Integer, String>) workerData.get(\"task->component\"),</li>\n\t<li>(Map<String, List<Integer>>) workerData.get(\"component->sorted-tasks\"),</li>\n\t<li>(Map<String, Map<String, Fields>>) workerData.get(\"component->stream->fields\"),</li>\n\t<li>(String) workerData.get(\"storm-id\"),</li>\n\t<li>ConfigUtils.supervisorStormResourcesPath(ConfigUtils.supervisorStormDistRoot(conf, (String) workerData.get(\"storm-id\"))),</li>\n\t<li>ConfigUtils.workerPidsRoot(conf, (String) workerData.get(\"worker-id\")),</li>\n\t<li>taskId,</li>\n\t<li>(Integer) workerData.get(\"port\"),</li>\n\t<li>(List<Integer>) workerData.get(\"task-ids\"),</li>\n\t<li>(Map<String, Object>) workerData.get(\"default-shared-resources\"),</li>\n\t<li>(Map<String, Object>) workerData.get(\"user-shared-resources\"),</li>\n\t<li>(Map<String, Object>) executorData.get(\"shared-executor-data\"),</li>\n\t<li>(Map<Integer, Map<Integer, Map<String, IMetric>>>) executorData.get(\"interval->task->metric-registry\"),</li>\n\t<li>(clojure.lang.Atom) executorData.get(\"open-or-prepare-was-called?\")</li>\n\t<li>);<br/>\n    +topology,<br/>\n    +(Map) workerData.get(\"storm-conf\"),\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    addressed, moved them into Constants.java</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654817/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654822","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654822","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654822,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4MjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T06:08:23Z","updated_at":"2025-01-24T14:24:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70205741\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70205741</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,567 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    ok, addressed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654822/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654830","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654830","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654830,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4MzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T06:10:15Z","updated_at":"2025-01-24T14:24:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70205841\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70205841</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,567 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    +    protected String hostname;<br/>\n    +<br/>\n    +    protected Executor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +this.workerData = workerData;<br/>\n    +this.executorId = executorId;<br/>\n    +this.workerTopologyContext = StormCommon.makeWorkerContext(workerData);<br/>\n    +this.taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +this.componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +this.openOrPrepareWasCalled = new AtomicBoolean(false);<br/>\n    +this.stormConf = normalizedComponentConf((Map) workerData.get(\"storm-conf\"), workerTopologyContext, componentId);<br/>\n    +this.receiveQueue = (DisruptorQueue) (((Map) workerData.get(\"executor-receive-queue-map\")).get(executorId));<br/>\n    +this.stormId = (String) workerData.get(\"storm-id\");<br/>\n    +this.conf = (Map) workerData.get(\"conf\");<br/>\n    +this.sharedExecutorData = new HashMap();<br/>\n    +this.stormActive = (AtomicBoolean) workerData.get(\"storm-active-atom\");<br/>\n    +this.stormComponentDebug = (AtomicReference<Map<String, DebugOptions>>) workerData.get(\"storm-component->debug-atom\");<br/>\n    +<br/>\n    +this.transferQueue = mkExecutorBatchQueue(stormConf, executorId);<br/>\n    +this.transferFn = (IFn) workerData.get(\"transfer-fn\");<br/>\n    +this.executorTransfer = new ExecutorTransfer(workerTopologyContext, transferQueue, stormConf, transferFn);<br/>\n    +<br/>\n    +this.suicideFn = (Runnable) workerData.get(\"suicide-fn\");<br/>\n    +try </p>\n{\n    +    this.stormClusterState = ClusterUtils.mkStormClusterState(workerData.get(\"state-store\"), Utils.getWorkerACL(stormConf),\n    +    new ClusterStateContext(DaemonType.SUPERVISOR));\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    this.type = StatsUtil.SPOUT;\n    +    this.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else if (bolts.containsKey(componentId)) {\n    +    this.type = StatsUtil.BOLT;\n    +    this.stats = new BoltExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else {\n    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);\n    +}<br/>\n    +<br/>\n    +this.intervalToTaskToMetricToRegistry = new HashMap<>();<br/>\n    +this.taskToComponent = (Map<Integer, String>) workerData.get(\"task->component\");<br/>\n    +this.streamToComponentToGrouper = outboundComponents(workerTopologyContext, componentId, stormConf);<br/>\n    +this.reportError = new ReportError(stormConf, stormClusterState, stormId, componentId, workerTopologyContext);<br/>\n    +this.reportErrorDie = new ReportErrorAndDie(reportError, suicideFn);<br/>\n    +this.sampler = ConfigUtils.mkStatsSampler(stormConf);<br/>\n    +this.backpressure = new AtomicBoolean(false);<br/>\n    +this.throttleOn = (AtomicBoolean) workerData.get(\"throttle-on\");<br/>\n    +this.isDebug = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_DEBUG), false);<br/>\n    +this.rand = new Random(Utils.secureRandomLong());<br/>\n    +this.credentials = credentials;<br/>\n    +this.isEventLoggers = StormCommon.hasEventLoggers(stormConf);<br/>\n    +<br/>\n    +try {\n    +    this.hostname = Utils.hostname(stormConf);\n    +} catch (UnknownHostException ignored) {\n    +    this.hostname = \"\";\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Executor mkExecutor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +Executor executor;<br/>\n    +<br/>\n    +Map<String, Object> convertedWorkerData = Utils.convertMap(workerData);<br/>\n    +WorkerTopologyContext workerTopologyContext = StormCommon.makeWorkerContext(convertedWorkerData);<br/>\n    +List<Integer> taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +String componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +<br/>\n    +String type = getExecutorType(workerTopologyContext, componentId);<br/>\n    +if (StatsUtil.SPOUT.equals(type)) {\n    +    executor = new SpoutExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +} else {\n    +    executor = new BoltExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new BoltExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +}<br/>\n    +<br/>\n    +Map<Integer, Task> idToTask = new HashMap<>();<br/>\n    +for (Integer taskId : taskIds) {<br/>\n    +    try {\n    +Task task = new Task(executor, taskId);\n    +executor.sendUnanchored(task, StormCommon.SYSTEM_STREAM_ID, new Values(\"startup\"), executor.getExecutorTransfer());\n    +idToTask.put(taskId, task);\n    +    } catch (IOException ex) {\n    +throw Utils.wrapInRuntime(ex);\n    +    }<br/>\n    +}<br/>\n    +executor.init(idToTask);<br/>\n    +<br/>\n    +return executor;<br/>\n    +    }<br/>\n    +<br/>\n    +    private static String getExecutorType(WorkerTopologyContext workerTopologyContext, String componentId) {<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    return StatsUtil.SPOUT;\n    +} else if (bolts.containsKey(componentId)) {\n    +    return StatsUtil.BOLT;\n    +} else {    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * separated from mkExecutor in order to replace executor transfer in executor data for testing<br/>\n    +     */<br/>\n    +    public ExecutorShutdown execute() throws Exception {\n    +LOG.info(\"Loading executor tasks \" + componentId + \":\" + executorId);\n    +\n    +registerBackpressure();\n    +Utils.SmartThread systemThreads =\n    +Utils.asyncLoop(executorTransfer, executorTransfer.getName(), reportErrorDie);\n    +\n    +String handlerName = componentId + \"-executor\" + executorId;\n    +Utils.SmartThread handlers = Utils.asyncLoop(this, false, reportErrorDie, Thread.NORM_PRIORITY, false, true, handlerName);\n    +setupTicks(StatsUtil.SPOUT.equals(type));\n    +LOG.info(\"Finished loading executor \" + componentId + \":\" + executorId);\n    +return new ExecutorShutdown(this, Lists.newArrayList(systemThreads, handlers), idToTask);\n    +    }<br/>\n    +<br/>\n    +    public abstract void tupleActionFn(int taskId, TupleImpl tuple) throws Exception;<br/>\n    +<br/>\n    +    public abstract void init(Map<Integer, Task> idToTask);<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    @Override<br/>\n    +    public void onEvent(Object event, long seq, boolean endOfBatch) throws Exception {<br/>\n    +ArrayList<AddressedTuple> addressedTuples = (ArrayList<AddressedTuple>) event;<br/>\n    +for (AddressedTuple addressedTuple : addressedTuples) {<br/>\n    +    TupleImpl tuple = (TupleImpl) addressedTuple.getTuple();<br/>\n    +    int taskId = addressedTuple.getDest();<br/>\n    +    if (isDebug) {<br/>\n    +LOG.info(\"Processing received message FOR {} TUPLE: {}\", taskId, tuple);<br/>\n    +    }<br/>\n    +    if (taskId != AddressedTuple.BROADCAST_DEST) {\n    +tupleActionFn(taskId, tuple);\n    +    } else {<br/>\n    +for (Integer t : taskIds) {\n    +    tupleActionFn(t, tuple);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void metricsTick(Task taskData, TupleImpl tuple) {<br/>\n    +try {<br/>\n    +    Integer interval = tuple.getInteger(0);<br/>\n    +    int taskId = taskData.getTaskId();<br/>\n    +    Map<Integer, Map<String, IMetric>> taskToMetricToRegistry = intervalToTaskToMetricToRegistry.get(interval);<br/>\n    +    Map<String, IMetric> nameToRegistry = null;<br/>\n    +    if (taskToMetricToRegistry != null) {\n    +nameToRegistry = taskToMetricToRegistry.get(taskId);\n    +    }<br/>\n    +    if (nameToRegistry != null) {<br/>\n    +IMetricsConsumer.TaskInfo taskInfo = new IMetricsConsumer.TaskInfo(hostname, workerTopologyContext.getThisWorkerPort(),<br/>\n    +componentId, taskId, Time.currentTimeSecs(), interval);<br/>\n    +List<IMetricsConsumer.DataPoint> dataPoints = new ArrayList<>();<br/>\n    +for (Map.Entry<String, IMetric> entry : nameToRegistry.entrySet()) {<br/>\n    +    IMetric metric = entry.getValue();<br/>\n    +    Object value = metric.getValueAndReset();<br/>\n    +    if (value != null) {\n    +IMetricsConsumer.DataPoint dataPoint = new IMetricsConsumer.DataPoint(entry.getKey(), value);\n    +dataPoints.add(dataPoint);\n    +    }<br/>\n    +}<br/>\n    +if (!dataPoints.isEmpty()) {\n    +    sendUnanchored(taskData, Constants.METRICS_STREAM_ID, new Values(taskInfo, dataPoints), executorTransfer);\n    +}<br/>\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void setupMetrics() {<br/>\n    +for (final Integer interval : intervalToTaskToMetricToRegistry.keySet()) {<br/>\n    +    StormTimer timerTask = (StormTimer) workerData.get(\"user-timer\");<br/>\n    +    timerTask.scheduleRecurring(interval, interval, new Runnable() {<br/>\n    +@Override<br/>\n    +public void run() </p>\n{\n    +    TupleImpl tuple =\n    +    new TupleImpl(workerTopologyContext, new Values(interval), (int) Constants.SYSTEM_TASK_ID, Constants.METRICS_TICK_STREAM_ID);\n    +    List<AddressedTuple> metricsTickTuple = Lists.newArrayList(new AddressedTuple(AddressedTuple.BROADCAST_DEST, tuple));\n    +    receiveQueue.publish(metricsTickTuple);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) {<br/>\n    +Tuple tuple = task.getTuple(stream, values);<br/>\n    +List<Integer> tasks = task.getOutgoingTasks(stream, values);<br/>\n    +if (tasks.size() == 0) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    yes, you're right, addressed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654830/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654831","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654831","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654831,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T06:11:16Z","updated_at":"2025-01-24T14:24:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70205892\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70205892</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,567 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    +    protected String hostname;<br/>\n    +<br/>\n    +    protected Executor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +this.workerData = workerData;<br/>\n    +this.executorId = executorId;<br/>\n    +this.workerTopologyContext = StormCommon.makeWorkerContext(workerData);<br/>\n    +this.taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +this.componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +this.openOrPrepareWasCalled = new AtomicBoolean(false);<br/>\n    +this.stormConf = normalizedComponentConf((Map) workerData.get(\"storm-conf\"), workerTopologyContext, componentId);<br/>\n    +this.receiveQueue = (DisruptorQueue) (((Map) workerData.get(\"executor-receive-queue-map\")).get(executorId));<br/>\n    +this.stormId = (String) workerData.get(\"storm-id\");<br/>\n    +this.conf = (Map) workerData.get(\"conf\");<br/>\n    +this.sharedExecutorData = new HashMap();<br/>\n    +this.stormActive = (AtomicBoolean) workerData.get(\"storm-active-atom\");<br/>\n    +this.stormComponentDebug = (AtomicReference<Map<String, DebugOptions>>) workerData.get(\"storm-component->debug-atom\");<br/>\n    +<br/>\n    +this.transferQueue = mkExecutorBatchQueue(stormConf, executorId);<br/>\n    +this.transferFn = (IFn) workerData.get(\"transfer-fn\");<br/>\n    +this.executorTransfer = new ExecutorTransfer(workerTopologyContext, transferQueue, stormConf, transferFn);<br/>\n    +<br/>\n    +this.suicideFn = (Runnable) workerData.get(\"suicide-fn\");<br/>\n    +try </p>\n{\n    +    this.stormClusterState = ClusterUtils.mkStormClusterState(workerData.get(\"state-store\"), Utils.getWorkerACL(stormConf),\n    +    new ClusterStateContext(DaemonType.SUPERVISOR));\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    this.type = StatsUtil.SPOUT;\n    +    this.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else if (bolts.containsKey(componentId)) {\n    +    this.type = StatsUtil.BOLT;\n    +    this.stats = new BoltExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else {\n    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);\n    +}<br/>\n    +<br/>\n    +this.intervalToTaskToMetricToRegistry = new HashMap<>();<br/>\n    +this.taskToComponent = (Map<Integer, String>) workerData.get(\"task->component\");<br/>\n    +this.streamToComponentToGrouper = outboundComponents(workerTopologyContext, componentId, stormConf);<br/>\n    +this.reportError = new ReportError(stormConf, stormClusterState, stormId, componentId, workerTopologyContext);<br/>\n    +this.reportErrorDie = new ReportErrorAndDie(reportError, suicideFn);<br/>\n    +this.sampler = ConfigUtils.mkStatsSampler(stormConf);<br/>\n    +this.backpressure = new AtomicBoolean(false);<br/>\n    +this.throttleOn = (AtomicBoolean) workerData.get(\"throttle-on\");<br/>\n    +this.isDebug = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_DEBUG), false);<br/>\n    +this.rand = new Random(Utils.secureRandomLong());<br/>\n    +this.credentials = credentials;<br/>\n    +this.isEventLoggers = StormCommon.hasEventLoggers(stormConf);<br/>\n    +<br/>\n    +try {\n    +    this.hostname = Utils.hostname(stormConf);\n    +} catch (UnknownHostException ignored) {\n    +    this.hostname = \"\";\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Executor mkExecutor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +Executor executor;<br/>\n    +<br/>\n    +Map<String, Object> convertedWorkerData = Utils.convertMap(workerData);<br/>\n    +WorkerTopologyContext workerTopologyContext = StormCommon.makeWorkerContext(convertedWorkerData);<br/>\n    +List<Integer> taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +String componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +<br/>\n    +String type = getExecutorType(workerTopologyContext, componentId);<br/>\n    +if (StatsUtil.SPOUT.equals(type)) {\n    +    executor = new SpoutExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +} else {\n    +    executor = new BoltExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new BoltExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +}<br/>\n    +<br/>\n    +Map<Integer, Task> idToTask = new HashMap<>();<br/>\n    +for (Integer taskId : taskIds) {<br/>\n    +    try {\n    +Task task = new Task(executor, taskId);\n    +executor.sendUnanchored(task, StormCommon.SYSTEM_STREAM_ID, new Values(\"startup\"), executor.getExecutorTransfer());\n    +idToTask.put(taskId, task);\n    +    } catch (IOException ex) {\n    +throw Utils.wrapInRuntime(ex);\n    +    }<br/>\n    +}<br/>\n    +executor.init(idToTask);<br/>\n    +<br/>\n    +return executor;<br/>\n    +    }<br/>\n    +<br/>\n    +    private static String getExecutorType(WorkerTopologyContext workerTopologyContext, String componentId) {<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    return StatsUtil.SPOUT;\n    +} else if (bolts.containsKey(componentId)) {\n    +    return StatsUtil.BOLT;\n    +} else {    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * separated from mkExecutor in order to replace executor transfer in executor data for testing<br/>\n    +     */<br/>\n    +    public ExecutorShutdown execute() throws Exception {\n    +LOG.info(\"Loading executor tasks \" + componentId + \":\" + executorId);\n    +\n    +registerBackpressure();\n    +Utils.SmartThread systemThreads =\n    +Utils.asyncLoop(executorTransfer, executorTransfer.getName(), reportErrorDie);\n    +\n    +String handlerName = componentId + \"-executor\" + executorId;\n    +Utils.SmartThread handlers = Utils.asyncLoop(this, false, reportErrorDie, Thread.NORM_PRIORITY, false, true, handlerName);\n    +setupTicks(StatsUtil.SPOUT.equals(type));\n    +LOG.info(\"Finished loading executor \" + componentId + \":\" + executorId);\n    +return new ExecutorShutdown(this, Lists.newArrayList(systemThreads, handlers), idToTask);\n    +    }<br/>\n    +<br/>\n    +    public abstract void tupleActionFn(int taskId, TupleImpl tuple) throws Exception;<br/>\n    +<br/>\n    +    public abstract void init(Map<Integer, Task> idToTask);<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    @Override<br/>\n    +    public void onEvent(Object event, long seq, boolean endOfBatch) throws Exception {<br/>\n    +ArrayList<AddressedTuple> addressedTuples = (ArrayList<AddressedTuple>) event;<br/>\n    +for (AddressedTuple addressedTuple : addressedTuples) {<br/>\n    +    TupleImpl tuple = (TupleImpl) addressedTuple.getTuple();<br/>\n    +    int taskId = addressedTuple.getDest();<br/>\n    +    if (isDebug) {<br/>\n    +LOG.info(\"Processing received message FOR {} TUPLE: {}\", taskId, tuple);<br/>\n    +    }<br/>\n    +    if (taskId != AddressedTuple.BROADCAST_DEST) {\n    +tupleActionFn(taskId, tuple);\n    +    } else {<br/>\n    +for (Integer t : taskIds) {\n    +    tupleActionFn(t, tuple);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void metricsTick(Task taskData, TupleImpl tuple) {<br/>\n    +try {<br/>\n    +    Integer interval = tuple.getInteger(0);<br/>\n    +    int taskId = taskData.getTaskId();<br/>\n    +    Map<Integer, Map<String, IMetric>> taskToMetricToRegistry = intervalToTaskToMetricToRegistry.get(interval);<br/>\n    +    Map<String, IMetric> nameToRegistry = null;<br/>\n    +    if (taskToMetricToRegistry != null) {\n    +nameToRegistry = taskToMetricToRegistry.get(taskId);\n    +    }<br/>\n    +    if (nameToRegistry != null) {<br/>\n    +IMetricsConsumer.TaskInfo taskInfo = new IMetricsConsumer.TaskInfo(hostname, workerTopologyContext.getThisWorkerPort(),<br/>\n    +componentId, taskId, Time.currentTimeSecs(), interval);<br/>\n    +List<IMetricsConsumer.DataPoint> dataPoints = new ArrayList<>();<br/>\n    +for (Map.Entry<String, IMetric> entry : nameToRegistry.entrySet()) {<br/>\n    +    IMetric metric = entry.getValue();<br/>\n    +    Object value = metric.getValueAndReset();<br/>\n    +    if (value != null) {\n    +IMetricsConsumer.DataPoint dataPoint = new IMetricsConsumer.DataPoint(entry.getKey(), value);\n    +dataPoints.add(dataPoint);\n    +    }<br/>\n    +}<br/>\n    +if (!dataPoints.isEmpty()) {\n    +    sendUnanchored(taskData, Constants.METRICS_STREAM_ID, new Values(taskInfo, dataPoints), executorTransfer);\n    +}<br/>\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void setupMetrics() {<br/>\n    +for (final Integer interval : intervalToTaskToMetricToRegistry.keySet()) {<br/>\n    +    StormTimer timerTask = (StormTimer) workerData.get(\"user-timer\");<br/>\n    +    timerTask.scheduleRecurring(interval, interval, new Runnable() {<br/>\n    +@Override<br/>\n    +public void run() </p>\n{\n    +    TupleImpl tuple =\n    +    new TupleImpl(workerTopologyContext, new Values(interval), (int) Constants.SYSTEM_TASK_ID, Constants.METRICS_TICK_STREAM_ID);\n    +    List<AddressedTuple> metricsTickTuple = Lists.newArrayList(new AddressedTuple(AddressedTuple.BROADCAST_DEST, tuple));\n    +    receiveQueue.publish(metricsTickTuple);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) {<br/>\n    +Tuple tuple = task.getTuple(stream, values);<br/>\n    +List<Integer> tasks = task.getOutgoingTasks(stream, values);<br/>\n    +if (tasks.size() == 0) </p>\n{\n    +    return;\n    +}\n<p>    +for (Integer t : tasks) </p>\n{\n    +    transfer.transfer(t, tuple);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Send sampled data to the eventlogger if the global or component level debug flag is set (via nimbus api).<br/>\n    +     */<br/>\n    +    public void sendToEventLogger(Executor executor, Task taskData, List values, String componentId, Object messageId, Random random) {<br/>\n    +Map<String, DebugOptions> componentDebug = executor.getStormComponentDebug().get();<br/>\n    +DebugOptions debugOptions = componentDebug.get(componentId);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    since `componentDebug.get(componentId)` will be called twice, I personally prefer current approach, what do you think?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231657304","html_url":"https://github.com/apache/storm/pull/1445#issuecomment-231657304","issue_url":"https://api.github.com/repos/apache/storm/issues/1445","id":231657304,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTY1NzMwNA==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T07:07:57Z","updated_at":"2016-07-11T07:07:57Z","author_association":"NONE","body":"@harshach thanks for your comments, all updated. I also made some changes to code format/styles in StormCommon.java, if that's ok.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231657304/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654833","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654833","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654833,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4MzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T07:07:58Z","updated_at":"2025-01-24T14:24:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445</a></p>\n\n<p>    @harshach thanks for your comments, all updated. I also made some changes to code format/styles in StormCommon.java, if that's ok.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654833/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231659980","html_url":"https://github.com/apache/storm/pull/1526#issuecomment-231659980","issue_url":"https://api.github.com/repos/apache/storm/issues/1526","id":231659980,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTY1OTk4MA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T07:24:17Z","updated_at":"2016-07-11T07:24:17Z","author_association":"CONTRIBUTOR","body":"Could anyone review this? This is critical issue on multilang spout.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231659980/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920663","html_url":"https://github.com/apache/storm/issues/5710#issuecomment-2612920663","issue_url":"https://api.github.com/repos/apache/storm/issues/5710","id":2612920663,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA2NjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T07:24:18Z","updated_at":"2025-01-24T16:25:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1526\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1526</a></p>\n\n<p>    Could anyone review this? This is critical issue on multilang spout.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920663/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612914046","html_url":"https://github.com/apache/storm/issues/5665#issuecomment-2612914046","issue_url":"https://api.github.com/repos/apache/storm/issues/5665","id":2612914046,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTQwNDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T07:31:46Z","updated_at":"2025-01-24T16:21:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user darionyaphet commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1462#discussion_r70212495\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1462#discussion_r70212495</a></p>\n\n<p>    &#8212; Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/spout/FileReader.java &#8212;<br/>\n    @@ -20,10 +20,11 @@</p>\n\n<p>     import org.apache.hadoop.fs.Path;</p>\n\n<p>    +import java.io.Closeable;<br/>\n     import java.io.IOException;<br/>\n     import java.util.List;</p>\n\n<p>    -interface FileReader {<br/>\n    +interface FileReader extends Closeable{<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    fixed <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612914046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645999","html_url":"https://github.com/apache/storm/issues/5076#issuecomment-2612645999","issue_url":"https://api.github.com/repos/apache/storm/issues/5076","id":2612645999,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDU5OTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T09:39:52Z","updated_at":"2025-01-24T14:20:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1359#discussion_r70228042\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1359#discussion_r70228042</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/scheduler/IsolationScheduler.java &#8212;<br/>\n    @@ -0,0 +1,417 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.scheduler;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.TreeMap;<br/>\n    +<br/>\n    +import org.apache.commons.lang.Validate;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.scheduler.Cluster;<br/>\n    +import org.apache.storm.scheduler.ExecutorDetails;<br/>\n    +import org.apache.storm.scheduler.IScheduler;<br/>\n    +import org.apache.storm.scheduler.SchedulerAssignment;<br/>\n    +import org.apache.storm.scheduler.Topologies;<br/>\n    +import org.apache.storm.scheduler.TopologyDetails;<br/>\n    +import org.apache.storm.scheduler.WorkerSlot;<br/>\n    +<br/>\n    +// for each isolated topology:<br/>\n    +//   compute even distribution of executors -> workers on the number of workers specified for the topology<br/>\n    +//   compute distribution of workers to machines<br/>\n    +// determine host -> list of <span class=\"error\">&#91;slot, topology id, executors&#93;</span><br/>\n    +// iterate through hosts and: a machine is good if:<br/>\n    +//   1. only running workers from one isolated topology<br/>\n    +//   2. all workers running on it match one of the distributions of executors for that topology<br/>\n    +//   3. matches one of the # of workers<br/>\n    +// blacklist the good hosts and remove those workers from the list of need to be assigned workers<br/>\n    +// otherwise unassign all other workers for isolated topologies if assigned<br/>\n    +public class IsolationScheduler implements IScheduler {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(IsolationScheduler.class);<br/>\n    +<br/>\n    +    private Map<String, Number> isoMachines;<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +this.isoMachines = (Map<String, Number>) conf.get(Config.ISOLATION_SCHEDULER_MACHINES);\n    +Validate.notEmpty(isoMachines);\n    +    }\n<p>    +<br/>\n    +    // get host -> all assignable worker slots for non-blacklisted machines (assigned or not assigned)<br/>\n    +    // will then have a list of machines that need to be assigned (machine -> <span class=\"error\">&#91;topology, list of list of executors&#93;</span>)<br/>\n    +    // match each spec to a machine (who has the right number of workers), free everything else on that machine and assign those slots (do one topology at a time)<br/>\n    +    // blacklist all machines who had production slots defined<br/>\n    +    // log isolated topologies who weren't able to get enough slots / machines<br/>\n    +    // run default scheduler on isolated topologies that didn't have enough slots + non-isolated topologies on remaining machines<br/>\n    +    // set blacklist to what it was initially<br/>\n    +    @Override<br/>\n    +    public void schedule(Topologies topologies, Cluster cluster) {<br/>\n    +Set<String> origBlacklist = cluster.getBlacklistedHosts();<br/>\n    +List<TopologyDetails> isoTopologies = isolatedTopologies(topologies.getTopologies());<br/>\n    +Set<String> isoIds = isolatedTopoplogyIds(isoTopologies);<br/>\n    +Map<String, Set<Set<ExecutorDetails>>> topologyWorkerSpecs = topologyWorkerSpecs(isoTopologies);<br/>\n    +Map<String, Map<Integer, Integer>> topologyMachineDistributions = topologyMachineDistributions(isoTopologies);<br/>\n    +Map<String, List<AssignmentInfo>> hostAssignments = hostAssignments(cluster);<br/>\n    +<br/>\n    +for (Map.Entry<String, List<AssignmentInfo>> entry : hostAssignments.entrySet()) {<br/>\n    +    List<AssignmentInfo> assignments = entry.getValue();<br/>\n    +    String topologyId = assignments.get(0).getTopologyId();<br/>\n    +    Map<Integer, Integer> distribution = topologyMachineDistributions.get(topologyId);<br/>\n    +    Set<Set<ExecutorDetails>> workerSpecs = topologyWorkerSpecs.get(topologyId);<br/>\n    +    int numWorkers = assignments.size();<br/>\n    +<br/>\n    +    if (isoIds.contains(topologyId)<br/>\n    +    && checkAssignmentTopology(assignments, topologyId)<br/>\n    +    && distribution.containsKey(numWorkers)<br/>\n    +    && checkAssignmentWorkerSpecs(assignments, workerSpecs)) {<br/>\n    +decrementDistribution(distribution, numWorkers);<br/>\n    +for (AssignmentInfo ass : assignments) </p>\n{\n    +    workerSpecs.remove(ass.getExecutors());\n    +}\n<p>    +cluster.blacklistHost(entry.getKey());<br/>\n    +    } else {<br/>\n    +for (AssignmentInfo ass : assignments) {<br/>\n    +    if (isoIds.contains(ass.getTopologyId())) </p>\n{\n    +cluster.freeSlot(ass.getWorkerSlot());\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Set<WorkerSlot>> hostUsedSlots = hostUsedSlots(cluster);<br/>\n    +LinkedList<HostAssignableSlots> hss = hostAssignableSlots(cluster);<br/>\n    +List<String> failedTopologyIds = new ArrayList<String>();<br/>\n    +for (Map.Entry<String, Set<Set<ExecutorDetails>>> entry : topologyWorkerSpecs.entrySet()) {<br/>\n    +    String topologyId = entry.getKey();<br/>\n    +    Set<Set<ExecutorDetails>> executorSet = entry.getValue();<br/>\n    +    if (executorSet != null && executorSet.size() > 0) </p>\n{\n    +failedTopologyIds.add(topologyId);\n    +    }\n<p>    +    List<Integer> workerNum = distributionSortedAmts(topologyMachineDistributions.get(topologyId));<br/>\n    +    for (Integer num : workerNum) {<br/>\n    +HostAssignableSlots hostSlots = hss.peek();<br/>\n    +List<WorkerSlot> slot = hostSlots != null ? hostSlots.getWorkerSlots() : null;<br/>\n    +<br/>\n    +if (slot != null && slot.size() >= num.intValue()) {<br/>\n    +    hss.poll();<br/>\n    +    cluster.freeSlots(hostUsedSlots.get(hostSlots.getHostName()));<br/>\n    +    for (WorkerSlot tmpSlot : slot.subList(0, num)) </p>\n{\n    +Set<ExecutorDetails> executor = removeElemFromSet(executorSet);\n    +cluster.assign(tmpSlot, topologyId, executor);\n    +    }\n<p>    +    cluster.blacklistHost(hostSlots.getHostName());<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +if (failedTopologyIds.size() > 0) {<br/>\n    +    LOG.warn(\"Unable to isolate topologies \" + failedTopologyIds<br/>\n    +    + \". No machine had enough worker slots to run the remaining workers for these topologies. \"<br/>\n    +    + \"Clearing all other resources and will wait for enough resources for \"<br/>\n    +    + \"isolated topologies before allocating any other resources.\");<br/>\n    +    // clear workers off all hosts that are not blacklisted<br/>\n    +    Map<String, Set<WorkerSlot>> usedSlots = hostUsedSlots(cluster);<br/>\n    +    Set<Map.Entry<String, Set<WorkerSlot>>> entries = usedSlots.entrySet();<br/>\n    +    for (Map.Entry<String, Set<WorkerSlot>> entry : entries) {<br/>\n    +if (!cluster.isBlacklistedHost(entry.getKey())) </p>\n{\n    +    cluster.freeSlots(entry.getValue());\n    +}\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    // run default scheduler on non-isolated topologies\n    +    Set<String> allocatedTopologies = allocatedTopologies(topologyWorkerSpecs);\n    +    Topologies leftOverTopologies = leftoverTopologies(topologies, allocatedTopologies);\n    +    DefaultScheduler.defaultSchedule(leftOverTopologies, cluster);\n    +}\n<p>    +cluster.setBlacklistedHosts(origBlacklist);<br/>\n    +    }<br/>\n    +<br/>\n    +    public Set<ExecutorDetails> removeElemFromSet(Set<Set<ExecutorDetails>> executorsSets) </p>\n{\n    +Set<ExecutorDetails> elem = executorsSets.iterator().next();\n    +executorsSets.remove(elem);\n    +return elem;\n    +    }\n<p>    +<br/>\n    +    private List<TopologyDetails> isolatedTopologies(Collection<TopologyDetails> topologies) {<br/>\n    +Set<String> topologyNames = isoMachines.keySet();<br/>\n    +List<TopologyDetails> isoTopologies = new ArrayList<TopologyDetails>();<br/>\n    +for (TopologyDetails topo : topologies) {<br/>\n    +    if (topologyNames.contains(topo.getName())) </p>\n{\n    +isoTopologies.add(topo);\n    +    }\n<p>    +}<br/>\n    +return isoTopologies;<br/>\n    +    }<br/>\n    +<br/>\n    +    private Set<String> isolatedTopoplogyIds(List<TopologyDetails> topologies) {<br/>\n    +Set<String> ids = new HashSet<String>();<br/>\n    +if (topologies != null && topologies.size() > 0) {<br/>\n    +    for (TopologyDetails topology : topologies) </p>\n{\n    +ids.add(topology.getId());\n    +    }\n<p>    +}<br/>\n    +return ids;<br/>\n    +    }<br/>\n    +<br/>\n    +    // map from topology id -> set of sets of executors<br/>\n    +    private Map<String, Set<Set<ExecutorDetails>>> topologyWorkerSpecs(List<TopologyDetails> topologies) {<br/>\n    +Map<String, Set<Set<ExecutorDetails>>> workerSpecs = new HashMap<String, Set<Set<ExecutorDetails>>>();<br/>\n    +for (TopologyDetails topology : topologies) </p>\n{\n    +    workerSpecs.put(topology.getId(), computeWorkerSpecs(topology));\n    +}\n<p>    +return workerSpecs;<br/>\n    +    }<br/>\n    +<br/>\n    +    private Map<String, List<AssignmentInfo>> hostAssignments(Cluster cluster) {<br/>\n    +Collection<SchedulerAssignment> assignmentValues =  cluster.getAssignments().values();<br/>\n    +Map<String, List<AssignmentInfo>> hostAssignments = new HashMap<String, List<AssignmentInfo>>();<br/>\n    +<br/>\n    +for (SchedulerAssignment sa : assignmentValues) {<br/>\n    +    Map<WorkerSlot, List<ExecutorDetails>> slotExecutors = Utils.reverseMap(sa.getExecutorToSlot());<br/>\n    +    Set<Map.Entry<WorkerSlot, List<ExecutorDetails>>> entries = slotExecutors.entrySet();<br/>\n    +    for (Map.Entry<WorkerSlot, List<ExecutorDetails>> entry : entries) {<br/>\n    +WorkerSlot slot = entry.getKey();<br/>\n    +List<ExecutorDetails> executors = entry.getValue();<br/>\n    +<br/>\n    +String host = cluster.getHost(slot.getNodeId());<br/>\n    +AssignmentInfo ass = new AssignmentInfo(slot, sa.getTopologyId(), new HashSet<ExecutorDetails>(executors));<br/>\n    +List<AssignmentInfo> executorList = hostAssignments.get(host);<br/>\n    +if (executorList == null) </p>\n{\n    +    executorList = new ArrayList<AssignmentInfo>();\n    +    hostAssignments.put(host, executorList);\n    +}\n<p>    +executorList.add(ass);<br/>\n    +    }<br/>\n    +}<br/>\n    +return hostAssignments;<br/>\n    +    }<br/>\n    +<br/>\n    +    private Set<Set<ExecutorDetails>> computeWorkerSpecs(TopologyDetails topology) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    It might be better to keep the value name to `details`, or use full name `topologyDetails`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645999/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612646004","html_url":"https://github.com/apache/storm/issues/5076#issuecomment-2612646004","issue_url":"https://api.github.com/repos/apache/storm/issues/5076","id":2612646004,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDYwMDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T09:57:06Z","updated_at":"2025-01-24T14:20:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1359#discussion_r70230499\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1359#discussion_r70230499</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/scheduler/IsolationScheduler.java &#8212;<br/>\n    @@ -0,0 +1,417 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.scheduler;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.TreeMap;<br/>\n    +<br/>\n    +import org.apache.commons.lang.Validate;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.scheduler.Cluster;<br/>\n    +import org.apache.storm.scheduler.ExecutorDetails;<br/>\n    +import org.apache.storm.scheduler.IScheduler;<br/>\n    +import org.apache.storm.scheduler.SchedulerAssignment;<br/>\n    +import org.apache.storm.scheduler.Topologies;<br/>\n    +import org.apache.storm.scheduler.TopologyDetails;<br/>\n    +import org.apache.storm.scheduler.WorkerSlot;<br/>\n    +<br/>\n    +// for each isolated topology:<br/>\n    +//   compute even distribution of executors -> workers on the number of workers specified for the topology<br/>\n    +//   compute distribution of workers to machines<br/>\n    +// determine host -> list of <span class=\"error\">&#91;slot, topology id, executors&#93;</span><br/>\n    +// iterate through hosts and: a machine is good if:<br/>\n    +//   1. only running workers from one isolated topology<br/>\n    +//   2. all workers running on it match one of the distributions of executors for that topology<br/>\n    +//   3. matches one of the # of workers<br/>\n    +// blacklist the good hosts and remove those workers from the list of need to be assigned workers<br/>\n    +// otherwise unassign all other workers for isolated topologies if assigned<br/>\n    +public class IsolationScheduler implements IScheduler {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(IsolationScheduler.class);<br/>\n    +<br/>\n    +    private Map<String, Number> isoMachines;<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +this.isoMachines = (Map<String, Number>) conf.get(Config.ISOLATION_SCHEDULER_MACHINES);\n    +Validate.notEmpty(isoMachines);\n    +    }\n<p>    +<br/>\n    +    // get host -> all assignable worker slots for non-blacklisted machines (assigned or not assigned)<br/>\n    +    // will then have a list of machines that need to be assigned (machine -> <span class=\"error\">&#91;topology, list of list of executors&#93;</span>)<br/>\n    +    // match each spec to a machine (who has the right number of workers), free everything else on that machine and assign those slots (do one topology at a time)<br/>\n    +    // blacklist all machines who had production slots defined<br/>\n    +    // log isolated topologies who weren't able to get enough slots / machines<br/>\n    +    // run default scheduler on isolated topologies that didn't have enough slots + non-isolated topologies on remaining machines<br/>\n    +    // set blacklist to what it was initially<br/>\n    +    @Override<br/>\n    +    public void schedule(Topologies topologies, Cluster cluster) {<br/>\n    +Set<String> origBlacklist = cluster.getBlacklistedHosts();<br/>\n    +List<TopologyDetails> isoTopologies = isolatedTopologies(topologies.getTopologies());<br/>\n    +Set<String> isoIds = isolatedTopoplogyIds(isoTopologies);<br/>\n    +Map<String, Set<Set<ExecutorDetails>>> topologyWorkerSpecs = topologyWorkerSpecs(isoTopologies);<br/>\n    +Map<String, Map<Integer, Integer>> topologyMachineDistributions = topologyMachineDistributions(isoTopologies);<br/>\n    +Map<String, List<AssignmentInfo>> hostAssignments = hostAssignments(cluster);<br/>\n    +<br/>\n    +for (Map.Entry<String, List<AssignmentInfo>> entry : hostAssignments.entrySet()) {<br/>\n    +    List<AssignmentInfo> assignments = entry.getValue();<br/>\n    +    String topologyId = assignments.get(0).getTopologyId();<br/>\n    +    Map<Integer, Integer> distribution = topologyMachineDistributions.get(topologyId);<br/>\n    +    Set<Set<ExecutorDetails>> workerSpecs = topologyWorkerSpecs.get(topologyId);<br/>\n    +    int numWorkers = assignments.size();<br/>\n    +<br/>\n    +    if (isoIds.contains(topologyId)<br/>\n    +    && checkAssignmentTopology(assignments, topologyId)<br/>\n    +    && distribution.containsKey(numWorkers)<br/>\n    +    && checkAssignmentWorkerSpecs(assignments, workerSpecs)) {<br/>\n    +decrementDistribution(distribution, numWorkers);<br/>\n    +for (AssignmentInfo ass : assignments) </p>\n{\n    +    workerSpecs.remove(ass.getExecutors());\n    +}\n<p>    +cluster.blacklistHost(entry.getKey());<br/>\n    +    } else {<br/>\n    +for (AssignmentInfo ass : assignments) {<br/>\n    +    if (isoIds.contains(ass.getTopologyId())) </p>\n{\n    +cluster.freeSlot(ass.getWorkerSlot());\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Set<WorkerSlot>> hostUsedSlots = hostUsedSlots(cluster);<br/>\n    +LinkedList<HostAssignableSlots> hss = hostAssignableSlots(cluster);<br/>\n    +List<String> failedTopologyIds = new ArrayList<String>();<br/>\n    +for (Map.Entry<String, Set<Set<ExecutorDetails>>> entry : topologyWorkerSpecs.entrySet()) {<br/>\n    +    String topologyId = entry.getKey();<br/>\n    +    Set<Set<ExecutorDetails>> executorSet = entry.getValue();<br/>\n    +    if (executorSet != null && executorSet.size() > 0) </p>\n{\n    +failedTopologyIds.add(topologyId);\n    +    }\n<p>    +    List<Integer> workerNum = distributionSortedAmts(topologyMachineDistributions.get(topologyId));<br/>\n    +    for (Integer num : workerNum) {<br/>\n    +HostAssignableSlots hostSlots = hss.peek();<br/>\n    +List<WorkerSlot> slot = hostSlots != null ? hostSlots.getWorkerSlots() : null;<br/>\n    +<br/>\n    +if (slot != null && slot.size() >= num.intValue()) {<br/>\n    +    hss.poll();<br/>\n    +    cluster.freeSlots(hostUsedSlots.get(hostSlots.getHostName()));<br/>\n    +    for (WorkerSlot tmpSlot : slot.subList(0, num)) </p>\n{\n    +Set<ExecutorDetails> executor = removeElemFromSet(executorSet);\n    +cluster.assign(tmpSlot, topologyId, executor);\n    +    }\n<p>    +    cluster.blacklistHost(hostSlots.getHostName());<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +if (failedTopologyIds.size() > 0) {<br/>\n    +    LOG.warn(\"Unable to isolate topologies \" + failedTopologyIds<br/>\n    +    + \". No machine had enough worker slots to run the remaining workers for these topologies. \"<br/>\n    +    + \"Clearing all other resources and will wait for enough resources for \"<br/>\n    +    + \"isolated topologies before allocating any other resources.\");<br/>\n    +    // clear workers off all hosts that are not blacklisted<br/>\n    +    Map<String, Set<WorkerSlot>> usedSlots = hostUsedSlots(cluster);<br/>\n    +    Set<Map.Entry<String, Set<WorkerSlot>>> entries = usedSlots.entrySet();<br/>\n    +    for (Map.Entry<String, Set<WorkerSlot>> entry : entries) {<br/>\n    +if (!cluster.isBlacklistedHost(entry.getKey())) </p>\n{\n    +    cluster.freeSlots(entry.getValue());\n    +}\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    // run default scheduler on non-isolated topologies\n    +    Set<String> allocatedTopologies = allocatedTopologies(topologyWorkerSpecs);\n    +    Topologies leftOverTopologies = leftoverTopologies(topologies, allocatedTopologies);\n    +    DefaultScheduler.defaultSchedule(leftOverTopologies, cluster);\n    +}\n<p>    +cluster.setBlacklistedHosts(origBlacklist);<br/>\n    +    }<br/>\n    +<br/>\n    +    public Set<ExecutorDetails> removeElemFromSet(Set<Set<ExecutorDetails>> executorsSets) </p>\n{\n    +Set<ExecutorDetails> elem = executorsSets.iterator().next();\n    +executorsSets.remove(elem);\n    +return elem;\n    +    }\n<p>    +<br/>\n    +    private List<TopologyDetails> isolatedTopologies(Collection<TopologyDetails> topologies) {<br/>\n    +Set<String> topologyNames = isoMachines.keySet();<br/>\n    +List<TopologyDetails> isoTopologies = new ArrayList<TopologyDetails>();<br/>\n    +for (TopologyDetails topo : topologies) {<br/>\n    +    if (topologyNames.contains(topo.getName())) </p>\n{\n    +isoTopologies.add(topo);\n    +    }\n<p>    +}<br/>\n    +return isoTopologies;<br/>\n    +    }<br/>\n    +<br/>\n    +    private Set<String> isolatedTopoplogyIds(List<TopologyDetails> topologies) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I'd rather rename to `extractTopologyIds` since method logic is general, not related to isolation.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612646004/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612646006","html_url":"https://github.com/apache/storm/issues/5076#issuecomment-2612646006","issue_url":"https://api.github.com/repos/apache/storm/issues/5076","id":2612646006,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDYwMDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T10:04:02Z","updated_at":"2025-01-24T14:20:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1359#discussion_r70231398\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1359#discussion_r70231398</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/scheduler/IsolationScheduler.java &#8212;<br/>\n    @@ -0,0 +1,417 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.scheduler;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.TreeMap;<br/>\n    +<br/>\n    +import org.apache.commons.lang.Validate;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.scheduler.Cluster;<br/>\n    +import org.apache.storm.scheduler.ExecutorDetails;<br/>\n    +import org.apache.storm.scheduler.IScheduler;<br/>\n    +import org.apache.storm.scheduler.SchedulerAssignment;<br/>\n    +import org.apache.storm.scheduler.Topologies;<br/>\n    +import org.apache.storm.scheduler.TopologyDetails;<br/>\n    +import org.apache.storm.scheduler.WorkerSlot;<br/>\n    +<br/>\n    +// for each isolated topology:<br/>\n    +//   compute even distribution of executors -> workers on the number of workers specified for the topology<br/>\n    +//   compute distribution of workers to machines<br/>\n    +// determine host -> list of <span class=\"error\">&#91;slot, topology id, executors&#93;</span><br/>\n    +// iterate through hosts and: a machine is good if:<br/>\n    +//   1. only running workers from one isolated topology<br/>\n    +//   2. all workers running on it match one of the distributions of executors for that topology<br/>\n    +//   3. matches one of the # of workers<br/>\n    +// blacklist the good hosts and remove those workers from the list of need to be assigned workers<br/>\n    +// otherwise unassign all other workers for isolated topologies if assigned<br/>\n    +public class IsolationScheduler implements IScheduler {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(IsolationScheduler.class);<br/>\n    +<br/>\n    +    private Map<String, Number> isoMachines;<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +this.isoMachines = (Map<String, Number>) conf.get(Config.ISOLATION_SCHEDULER_MACHINES);\n    +Validate.notEmpty(isoMachines);\n    +    }\n<p>    +<br/>\n    +    // get host -> all assignable worker slots for non-blacklisted machines (assigned or not assigned)<br/>\n    +    // will then have a list of machines that need to be assigned (machine -> <span class=\"error\">&#91;topology, list of list of executors&#93;</span>)<br/>\n    +    // match each spec to a machine (who has the right number of workers), free everything else on that machine and assign those slots (do one topology at a time)<br/>\n    +    // blacklist all machines who had production slots defined<br/>\n    +    // log isolated topologies who weren't able to get enough slots / machines<br/>\n    +    // run default scheduler on isolated topologies that didn't have enough slots + non-isolated topologies on remaining machines<br/>\n    +    // set blacklist to what it was initially<br/>\n    +    @Override<br/>\n    +    public void schedule(Topologies topologies, Cluster cluster) {<br/>\n    +Set<String> origBlacklist = cluster.getBlacklistedHosts();<br/>\n    +List<TopologyDetails> isoTopologies = isolatedTopologies(topologies.getTopologies());<br/>\n    +Set<String> isoIds = isolatedTopoplogyIds(isoTopologies);<br/>\n    +Map<String, Set<Set<ExecutorDetails>>> topologyWorkerSpecs = topologyWorkerSpecs(isoTopologies);<br/>\n    +Map<String, Map<Integer, Integer>> topologyMachineDistributions = topologyMachineDistributions(isoTopologies);<br/>\n    +Map<String, List<AssignmentInfo>> hostAssignments = hostAssignments(cluster);<br/>\n    +<br/>\n    +for (Map.Entry<String, List<AssignmentInfo>> entry : hostAssignments.entrySet()) {<br/>\n    +    List<AssignmentInfo> assignments = entry.getValue();<br/>\n    +    String topologyId = assignments.get(0).getTopologyId();<br/>\n    +    Map<Integer, Integer> distribution = topologyMachineDistributions.get(topologyId);<br/>\n    +    Set<Set<ExecutorDetails>> workerSpecs = topologyWorkerSpecs.get(topologyId);<br/>\n    +    int numWorkers = assignments.size();<br/>\n    +<br/>\n    +    if (isoIds.contains(topologyId)<br/>\n    +    && checkAssignmentTopology(assignments, topologyId)<br/>\n    +    && distribution.containsKey(numWorkers)<br/>\n    +    && checkAssignmentWorkerSpecs(assignments, workerSpecs)) {<br/>\n    +decrementDistribution(distribution, numWorkers);<br/>\n    +for (AssignmentInfo ass : assignments) </p>\n{\n    +    workerSpecs.remove(ass.getExecutors());\n    +}\n<p>    +cluster.blacklistHost(entry.getKey());<br/>\n    +    } else {<br/>\n    +for (AssignmentInfo ass : assignments) {<br/>\n    +    if (isoIds.contains(ass.getTopologyId())) </p>\n{\n    +cluster.freeSlot(ass.getWorkerSlot());\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Set<WorkerSlot>> hostUsedSlots = hostUsedSlots(cluster);<br/>\n    +LinkedList<HostAssignableSlots> hss = hostAssignableSlots(cluster);<br/>\n    +List<String> failedTopologyIds = new ArrayList<String>();<br/>\n    +for (Map.Entry<String, Set<Set<ExecutorDetails>>> entry : topologyWorkerSpecs.entrySet()) {<br/>\n    +    String topologyId = entry.getKey();<br/>\n    +    Set<Set<ExecutorDetails>> executorSet = entry.getValue();<br/>\n    +    if (executorSet != null && executorSet.size() > 0) </p>\n{\n    +failedTopologyIds.add(topologyId);\n    +    }\n<p>    +    List<Integer> workerNum = distributionSortedAmts(topologyMachineDistributions.get(topologyId));<br/>\n    +    for (Integer num : workerNum) {<br/>\n    +HostAssignableSlots hostSlots = hss.peek();<br/>\n    +List<WorkerSlot> slot = hostSlots != null ? hostSlots.getWorkerSlots() : null;<br/>\n    +<br/>\n    +if (slot != null && slot.size() >= num.intValue()) {<br/>\n    +    hss.poll();<br/>\n    +    cluster.freeSlots(hostUsedSlots.get(hostSlots.getHostName()));<br/>\n    +    for (WorkerSlot tmpSlot : slot.subList(0, num)) </p>\n{\n    +Set<ExecutorDetails> executor = removeElemFromSet(executorSet);\n    +cluster.assign(tmpSlot, topologyId, executor);\n    +    }\n<p>    +    cluster.blacklistHost(hostSlots.getHostName());<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +if (failedTopologyIds.size() > 0) {<br/>\n    +    LOG.warn(\"Unable to isolate topologies \" + failedTopologyIds<br/>\n    +    + \". No machine had enough worker slots to run the remaining workers for these topologies. \"<br/>\n    +    + \"Clearing all other resources and will wait for enough resources for \"<br/>\n    +    + \"isolated topologies before allocating any other resources.\");<br/>\n    +    // clear workers off all hosts that are not blacklisted<br/>\n    +    Map<String, Set<WorkerSlot>> usedSlots = hostUsedSlots(cluster);<br/>\n    +    Set<Map.Entry<String, Set<WorkerSlot>>> entries = usedSlots.entrySet();<br/>\n    +    for (Map.Entry<String, Set<WorkerSlot>> entry : entries) {<br/>\n    +if (!cluster.isBlacklistedHost(entry.getKey())) </p>\n{\n    +    cluster.freeSlots(entry.getValue());\n    +}\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    // run default scheduler on non-isolated topologies\n    +    Set<String> allocatedTopologies = allocatedTopologies(topologyWorkerSpecs);\n    +    Topologies leftOverTopologies = leftoverTopologies(topologies, allocatedTopologies);\n    +    DefaultScheduler.defaultSchedule(leftOverTopologies, cluster);\n    +}\n<p>    +cluster.setBlacklistedHosts(origBlacklist);<br/>\n    +    }<br/>\n    +<br/>\n    +    public Set<ExecutorDetails> removeElemFromSet(Set<Set<ExecutorDetails>> executorsSets) </p>\n{\n    +Set<ExecutorDetails> elem = executorsSets.iterator().next();\n    +executorsSets.remove(elem);\n    +return elem;\n    +    }\n<p>    +<br/>\n    +    private List<TopologyDetails> isolatedTopologies(Collection<TopologyDetails> topologies) {<br/>\n    +Set<String> topologyNames = isoMachines.keySet();<br/>\n    +List<TopologyDetails> isoTopologies = new ArrayList<TopologyDetails>();<br/>\n    +for (TopologyDetails topo : topologies) {<br/>\n    +    if (topologyNames.contains(topo.getName())) </p>\n{\n    +isoTopologies.add(topo);\n    +    }\n<p>    +}<br/>\n    +return isoTopologies;<br/>\n    +    }<br/>\n    +<br/>\n    +    private Set<String> isolatedTopoplogyIds(List<TopologyDetails> topologies) {<br/>\n    +Set<String> ids = new HashSet<String>();<br/>\n    +if (topologies != null && topologies.size() > 0) {<br/>\n    +    for (TopologyDetails topology : topologies) </p>\n{\n    +ids.add(topology.getId());\n    +    }\n<p>    +}<br/>\n    +return ids;<br/>\n    +    }<br/>\n    +<br/>\n    +    // map from topology id -> set of sets of executors<br/>\n    +    private Map<String, Set<Set<ExecutorDetails>>> topologyWorkerSpecs(List<TopologyDetails> topologies) {<br/>\n    +Map<String, Set<Set<ExecutorDetails>>> workerSpecs = new HashMap<String, Set<Set<ExecutorDetails>>>();<br/>\n    +for (TopologyDetails topology : topologies) </p>\n{\n    +    workerSpecs.put(topology.getId(), computeWorkerSpecs(topology));\n    +}\n<p>    +return workerSpecs;<br/>\n    +    }<br/>\n    +<br/>\n    +    private Map<String, List<AssignmentInfo>> hostAssignments(Cluster cluster) {<br/>\n    +Collection<SchedulerAssignment> assignmentValues =  cluster.getAssignments().values();<br/>\n    +Map<String, List<AssignmentInfo>> hostAssignments = new HashMap<String, List<AssignmentInfo>>();<br/>\n    +<br/>\n    +for (SchedulerAssignment sa : assignmentValues) {<br/>\n    +    Map<WorkerSlot, List<ExecutorDetails>> slotExecutors = Utils.reverseMap(sa.getExecutorToSlot());<br/>\n    +    Set<Map.Entry<WorkerSlot, List<ExecutorDetails>>> entries = slotExecutors.entrySet();<br/>\n    +    for (Map.Entry<WorkerSlot, List<ExecutorDetails>> entry : entries) {<br/>\n    +WorkerSlot slot = entry.getKey();<br/>\n    +List<ExecutorDetails> executors = entry.getValue();<br/>\n    +<br/>\n    +String host = cluster.getHost(slot.getNodeId());<br/>\n    +AssignmentInfo ass = new AssignmentInfo(slot, sa.getTopologyId(), new HashSet<ExecutorDetails>(executors));<br/>\n    +List<AssignmentInfo> executorList = hostAssignments.get(host);<br/>\n    +if (executorList == null) </p>\n{\n    +    executorList = new ArrayList<AssignmentInfo>();\n    +    hostAssignments.put(host, executorList);\n    +}\n<p>    +executorList.add(ass);<br/>\n    +    }<br/>\n    +}<br/>\n    +return hostAssignments;<br/>\n    +    }<br/>\n    +<br/>\n    +    private Set<Set<ExecutorDetails>> computeWorkerSpecs(TopologyDetails topology) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Not at all. It was already inconsistent.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612646006/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654839","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654839","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654839,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T10:40:14Z","updated_at":"2025-01-24T14:24:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user lujinhong commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70235783\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70235783</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutOutputCollectorImpl.java &#8212;<br/>\n    @@ -0,0 +1,155 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.executor.ExecutorTransfer;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutOutputCollector;<br/>\n    +import org.apache.storm.tuple.MessageId;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Random;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class SpoutOutputCollectorImpl implements ISpoutOutputCollector {<br/>\n    +    private final Logger LOG = LoggerFactory.getLogger(getClass());<br/>\n    +<br/>\n    +    private final SpoutExecutor executor;<br/>\n    +    private final Task taskData;<br/>\n    +    private final int taskId;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private final Random random;<br/>\n    +    private final Boolean isEventLoggers;<br/>\n    +    private final Boolean isDebug;<br/>\n    +    private final RotatingMap<Long, TupleInfo> pending;<br/>\n    +<br/>\n    +    public SpoutOutputCollectorImpl(ISpout spout, SpoutExecutor executor, Task taskData, int taskId,<br/>\n    +    MutableLong emittedCount, boolean hasAckers, Random random,<br/>\n    +    Boolean isEventLoggers, Boolean isDebug, RotatingMap<Long, TupleInfo> pending) </p>\n{\n    +this.executor = executor;\n    +this.taskData = taskData;\n    +this.taskId = taskId;\n    +this.emittedCount = emittedCount;\n    +this.hasAckers = hasAckers;\n    +this.random = random;\n    +this.isEventLoggers = isEventLoggers;\n    +this.isDebug = isDebug;\n    +this.pending = pending;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<Integer> emit(String streamId, List<Object> tuple, Object messageId) </p>\n{\n    +return sendSpoutMsg(streamId, tuple, messageId, null);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void emitDirect(int taskId, String streamId, List<Object> tuple, Object messageId) </p>\n{\n    +sendSpoutMsg(streamId, tuple, messageId, taskId);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public long getPendingCount() </p>\n{\n    +return pending.size();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void reportError(Throwable error) </p>\n{\n    +executor.getReportError().report(error);\n    +    }\n<p>    +<br/>\n    +    private List<Integer> sendSpoutMsg(String stream, List<Object> values, Object messageId, Integer outTaskId) {<br/>\n    +emittedCount.increment();<br/>\n    +<br/>\n    +java.util.List<Integer> outTasks;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    java.util. can be removed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654844","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654844","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654844,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4NDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T10:54:02Z","updated_at":"2025-01-24T14:24:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r70237264\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r70237264</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutOutputCollectorImpl.java &#8212;<br/>\n    @@ -0,0 +1,155 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.executor.ExecutorTransfer;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutOutputCollector;<br/>\n    +import org.apache.storm.tuple.MessageId;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Random;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class SpoutOutputCollectorImpl implements ISpoutOutputCollector {<br/>\n    +    private final Logger LOG = LoggerFactory.getLogger(getClass());<br/>\n    +<br/>\n    +    private final SpoutExecutor executor;<br/>\n    +    private final Task taskData;<br/>\n    +    private final int taskId;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private final Random random;<br/>\n    +    private final Boolean isEventLoggers;<br/>\n    +    private final Boolean isDebug;<br/>\n    +    private final RotatingMap<Long, TupleInfo> pending;<br/>\n    +<br/>\n    +    public SpoutOutputCollectorImpl(ISpout spout, SpoutExecutor executor, Task taskData, int taskId,<br/>\n    +    MutableLong emittedCount, boolean hasAckers, Random random,<br/>\n    +    Boolean isEventLoggers, Boolean isDebug, RotatingMap<Long, TupleInfo> pending) </p>\n{\n    +this.executor = executor;\n    +this.taskData = taskData;\n    +this.taskId = taskId;\n    +this.emittedCount = emittedCount;\n    +this.hasAckers = hasAckers;\n    +this.random = random;\n    +this.isEventLoggers = isEventLoggers;\n    +this.isDebug = isDebug;\n    +this.pending = pending;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<Integer> emit(String streamId, List<Object> tuple, Object messageId) </p>\n{\n    +return sendSpoutMsg(streamId, tuple, messageId, null);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void emitDirect(int taskId, String streamId, List<Object> tuple, Object messageId) </p>\n{\n    +sendSpoutMsg(streamId, tuple, messageId, taskId);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public long getPendingCount() </p>\n{\n    +return pending.size();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void reportError(Throwable error) </p>\n{\n    +executor.getReportError().report(error);\n    +    }\n<p>    +<br/>\n    +    private List<Integer> sendSpoutMsg(String stream, List<Object> values, Object messageId, Integer outTaskId) {<br/>\n    +emittedCount.increment();<br/>\n    +<br/>\n    +java.util.List<Integer> outTasks;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    thanks, addressed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654844/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920670","html_url":"https://github.com/apache/storm/issues/5710#issuecomment-2612920670","issue_url":"https://api.github.com/repos/apache/storm/issues/5710","id":2612920670,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA2NzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T12:53:20Z","updated_at":"2025-01-24T16:25:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1526#discussion_r70251081\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1526#discussion_r70251081</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/spout/ShellSpout.java &#8212;<br/>\n    @@ -47,6 +50,8 @@<br/>\n private String[] _command;<br/>\n private Map<String, String> env = new HashMap<>();<br/>\n private ShellProcess _process;<br/>\n    +    private volatile boolean _running = true;<br/>\n    +    private volatile Throwable _exception;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    nit: this is only ever set to a RuntimeException already, and then it is wrapped in a RuntimeException.  It might be nice to just have it be a RuntimeException to begin with and then we can skip the wrapping.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920670/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231725626","html_url":"https://github.com/apache/storm/pull/1526#issuecomment-231725626","issue_url":"https://api.github.com/repos/apache/storm/issues/1526","id":231725626,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTcyNTYyNg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T12:53:36Z","updated_at":"2016-07-11T12:53:36Z","author_association":"CONTRIBUTOR","body":"one minor nit, but overall I am +1 with or without the change.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231725626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920675","html_url":"https://github.com/apache/storm/issues/5710#issuecomment-2612920675","issue_url":"https://api.github.com/repos/apache/storm/issues/5710","id":2612920675,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA2NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T12:53:37Z","updated_at":"2025-01-24T16:25:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1526\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1526</a></p>\n\n<p>    one minor nit, but overall I am +1 with or without the change.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920675/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612924104","html_url":"https://github.com/apache/storm/issues/5734#issuecomment-2612924104","issue_url":"https://api.github.com/repos/apache/storm/issues/5734","id":2612924104,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjQxMDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T13:05:52Z","updated_at":"2025-01-24T16:26:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>There are two situations here.</p>\n\n<p>1) The topology is still up and running, and for some reason it got rescheduled some place else. <br/>\n2) The topology is killed and will not ever come back.</p>\n\n<p>This JIRA is trying to address the first one because when it happens it can take a long time for the topology to come back up on a node that it was running on previously (think about a rolling upgrade).  This is why I suggested using the dist cache code with LRU, because it will keep the jar/etc around longer, but not forever, if the disk space is needed for something else.</p>\n\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a>,</p>\n\n<p>I think your comment is about the second situation and if so yes you are correct about that too. If we do modify the topology specific download to use the cache code it would be good to add an optimization to remove them from the cache when we know it will never be used again.  But that I see as an optimization, not necessarily as a requirement.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612924104/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923583","html_url":"https://github.com/apache/storm/issues/5731#issuecomment-2612923583","issue_url":"https://api.github.com/repos/apache/storm/issues/5731","id":2612923583,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM1ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T13:16:35Z","updated_at":"2025-01-24T16:26:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>I am not sure that we can use our internal messaging as is to make this work.  The messages to turn on and off backpressure would likely get blocked behind actual data messages and never make it to the spout that is throttled off.  I would prefer to see us go towards the model of JStorm and have a topology master, there is a lot of work that ZK is doing that could be moved over to a master. It could easily take over the responsibilities of both pacemaker/ZK(for metrics) and ZK for backpressure.</p>\n\n<p>I'm not sure I am ready to let the master reschedule the topology itself, I prefer to still have centralized scheduling, but I could be persuaded.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923583/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612924786","html_url":"https://github.com/apache/storm/issues/5739#issuecomment-2612924786","issue_url":"https://api.github.com/repos/apache/storm/issues/5739","id":2612924786,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjQ3ODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T13:39:27Z","updated_at":"2025-01-24T16:27:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user darionyaphet opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1550\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1550</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1957\" title=\"Support Storm JDBC batch insert\" class=\"issue-link\" data-issue-key=\"STORM-1957\"><del>STORM-1957</del></a> Support Storm JDBC batch insert</p>\n\n<p>    <span class=\"error\">&#91;STORM-1957 Support Storm JDBC batch insert&#93;</span>(<a href=\"https://issues.apache.org/jira/browse/STORM-1957?jql=project%20%3D%20STORM\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1957?jql=project%20%3D%20STORM</a>)</p>\n\n<p>    Batch insert support execute grouped SQL a batch and submit into one call . It can reduce the amount of communication , improving performance.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/darionyaphet/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/darionyaphet/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1957\" title=\"Support Storm JDBC batch insert\" class=\"issue-link\" data-issue-key=\"STORM-1957\"><del>STORM-1957</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1550.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1550.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1550</p>\n\n<hr />\n<p>commit adbed94e51453c7dd3d69629f0cd8fc90061614d<br/>\nAuthor: darionyaphet <darion.yaphet@gmail.com><br/>\nDate:   2016-07-11T13:36:48Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1957\" title=\"Support Storm JDBC batch insert\" class=\"issue-link\" data-issue-key=\"STORM-1957\"><del>STORM-1957</del></a> Support Storm JDBC batch insert</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612924786/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612609345","html_url":"https://github.com/apache/storm/issues/4934#issuecomment-2612609345","issue_url":"https://api.github.com/repos/apache/storm/issues/4934","id":2612609345,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDkzNDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T13:46:51Z","updated_at":"2025-01-24T14:04:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sriharsha\" class=\"user-hover\" rel=\"sriharsha\">Harsha</a>,</p>\n\n<p>If we want to support doAsUser on the REST API then we have to have REST/UI also validate that it is OK, otherwise I can add that parameter in and pretend to be anyone through the REST API.</p>\n\n<p>It is a chain of trust.  userB is pretending to be userA to the UI, so the UI in turn pretends to be userA to nimbus.  The thrift connection to nimbus from the UI loses the fact that userB is the real user and as such will never be able to properly validate that userB is allowed to impersonate userA.  If we change how the impersonation code works so that the UI can say to nimbus I am the UI but I am pretending to be userB who is pretending to be userA we could make it work.  But this would be a non-standard change as SASL does not really support that.  We could hack it in, but I prefer the way it is.</p>\n\n<p>We cannot have impersonation fail open.  I will -1 anything that tries to do that.</p>\n\n<p><a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/ui/core.clj#L92-L105\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/ui/core.clj#L92-L105</a><br/>\nand <br/>\n<a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/nimbus.clj#L1017-L1038\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/nimbus.clj#L1017-L1038</a></p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">(log-warn <span class=\"code-quote\">\" principal \"</span> (.realPrincipal context) <span class=\"code-quote\">\" is trying to impersonate \"</span> (.principal context) <span class=\"code-quote\">\" but \"</span> NIMBUS-IMPERSONATION-AUTHORIZER <span class=\"code-quote\">\" has no authorizer configured. This is a potential security hole. Please see SECURITY.MD to learn how to configure an impersonation authorizer.\"</span>)\n</pre>\n</div></div>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">(log-warn <span class=\"code-quote\">\"impersonation attempt but \"</span> NIMBUS-IMPERSONATION-AUTHORIZER <span class=\"code-quote\">\" has no authorizer configured. potential security risk, please see SECURITY.MD to learn how to configure impersonation authorizer.\"</span>)\n</pre>\n</div></div>\n\n<p>Some warning messages appearing in a log somewhere saying you configured security incorrectly and by the way we are printing this out because someone may have just pawned you is not enough. What is more your complaints about it being difficult to configure correctly and wanting to disable it tell me that we cannot have it off because there will be lots and lots of people who will leave it off and think that they are secure when they are not.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612609345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920678","html_url":"https://github.com/apache/storm/issues/5710#issuecomment-2612920678","issue_url":"https://api.github.com/repos/apache/storm/issues/5710","id":2612920678,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA2Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T14:08:05Z","updated_at":"2025-01-24T16:25:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1526#discussion_r70263885\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1526#discussion_r70263885</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/spout/ShellSpout.java &#8212;<br/>\n    @@ -47,6 +50,8 @@<br/>\n private String[] _command;<br/>\n private Map<String, String> env = new HashMap<>();<br/>\n private ShellProcess _process;<br/>\n    +    private volatile boolean _running = true;<br/>\n    +    private volatile Throwable _exception;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes it would be better to fix this. Thanks for pointing out. Fixed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920678/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231755537","html_url":"https://github.com/apache/storm/pull/1526#issuecomment-231755537","issue_url":"https://api.github.com/repos/apache/storm/issues/1526","id":231755537,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTc1NTUzNw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T14:43:16Z","updated_at":"2016-07-11T14:43:16Z","author_association":"CONTRIBUTOR","body":"+1 but all 4 CI jobs failed.  They look unrelated to this, as some of them are failing because of a RAT problem.  Lets fix the build ASAP before we merge in much more.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231755537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920682","html_url":"https://github.com/apache/storm/issues/5710#issuecomment-2612920682","issue_url":"https://api.github.com/repos/apache/storm/issues/5710","id":2612920682,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA2ODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T14:43:18Z","updated_at":"2025-01-24T16:25:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1526\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1526</a></p>\n\n<p>    +1 but all 4 CI jobs failed.  They look unrelated to this, as some of them are failing because of a RAT problem.  Lets fix the build ASAP before we merge in much more.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920682/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231758612","html_url":"https://github.com/apache/storm/pull/1526#issuecomment-231758612","issue_url":"https://api.github.com/repos/apache/storm/issues/1526","id":231758612,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTc1ODYxMg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T14:53:17Z","updated_at":"2016-07-11T14:53:17Z","author_association":"CONTRIBUTOR","body":"The file without a license is external/storm-kafka-monitor/src/main/java/org/apache/storm/kafka/monitor/KafkaPartitionOffsetLag.java\n\nI'll file a separate JIRA for that.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231758612/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920687","html_url":"https://github.com/apache/storm/issues/5710#issuecomment-2612920687","issue_url":"https://api.github.com/repos/apache/storm/issues/5710","id":2612920687,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjA2ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T14:53:19Z","updated_at":"2025-01-24T16:25:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1526\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1526</a></p>\n\n<p>    The file without a license is external/storm-kafka-monitor/src/main/java/org/apache/storm/kafka/monitor/KafkaPartitionOffsetLag.java</p>\n\n<p>    I'll file a separate JIRA for that.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612920687/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923849","html_url":"https://github.com/apache/storm/issues/5732#issuecomment-2612923849","issue_url":"https://api.github.com/repos/apache/storm/issues/5732","id":2612923849,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM4NDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T14:57:23Z","updated_at":"2025-01-24T16:26:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sriharsha\" class=\"user-hover\" rel=\"sriharsha\">Harsha</a> and <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a>,</p>\n\n<p>Could you please take a look at <a href=\"https://issues.apache.org/jira/browse/STORM-1959\" title=\"KafkaPartitionOffsetLag.java does not have license\" class=\"issue-link\" data-issue-key=\"STORM-1959\"><del>STORM-1959</del></a>.  It is causing the travis builds to fail.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612609348","html_url":"https://github.com/apache/storm/issues/4934#issuecomment-2612609348","issue_url":"https://api.github.com/repos/apache/storm/issues/4934","id":2612609348,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDkzNDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:14:36Z","updated_at":"2025-01-24T14:04:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sriharsha\">sriharsha</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\" class=\"user-hover\" rel=\"revans2\">Robert Joseph Evans</a> Agree. It looks confusing and would be good add some comments around that.<br/>\nSecurity is off by default and turning it on is today takes lot of steps and we are adding another step to it which is not ideal. But printing these messages when most of the users are in non-secure environment does no good to the users. Why would they need to see these messages in non-secure cluster.<br/>\nTurning these log messages in secure environment makes sense if the users are not configuring impersonation authorizer.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612609348/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923588","html_url":"https://github.com/apache/storm/issues/5731#issuecomment-2612923588","issue_url":"https://api.github.com/repos/apache/storm/issues/5731","id":2612923588,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM1ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:15:27Z","updated_at":"2025-01-24T16:26:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\">abhishek.agarwal</a>:</i>\n<p>I have the same concern as Jungtake with disabling backpressue by default. If my understanding is correct, transfer queues are not bounded anymore and if acking is not enabled, can keep growing. This will result in out of memory exceptions. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923588/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925138","html_url":"https://github.com/apache/storm/issues/5741#issuecomment-2612925138","issue_url":"https://api.github.com/repos/apache/storm/issues/5741","id":2612925138,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjUxMzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:16:41Z","updated_at":"2025-01-24T16:27:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Thanks for finding missed spot, Bobby. I'll create a quick fix.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923591","html_url":"https://github.com/apache/storm/issues/5731#issuecomment-2612923591","issue_url":"https://api.github.com/repos/apache/storm/issues/5731","id":2612923591,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM1OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:19:05Z","updated_at":"2025-01-24T16:26:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sriharsha\">sriharsha</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\" class=\"user-hover\" rel=\"abhishek.agarwal\">Abhishek Agarwal</a> <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a> As we can see keeping this as default is resulting in performance degradation that we are unable to fix in near-term. Since this is a new feature turning it off by default makes sense until we figure out more details.<br/>\n<a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a> of course the idea is to fix any issues and make it default.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923591/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925144","html_url":"https://github.com/apache/storm/issues/5741#issuecomment-2612925144","issue_url":"https://api.github.com/repos/apache/storm/issues/5741","id":2612925144,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjUxNDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:25:57Z","updated_at":"2025-01-24T16:27:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user HeartSaVioR opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1551\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1551</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1959\" title=\"KafkaPartitionOffsetLag.java does not have license\" class=\"issue-link\" data-issue-key=\"STORM-1959\"><del>STORM-1959</del></a> Add missing license header to KafkaPartitionOffsetLag</p>\n\n<p>    This is just an addition of missing license header (not code change), so I think it can be merged without waiting one day rule. I feel Travis CI pass and another one +1 by other committer are sufficient to check in.<br/>\n    It should be applied to also 1.x branch.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/HeartSaVioR/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/HeartSaVioR/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1959\" title=\"KafkaPartitionOffsetLag.java does not have license\" class=\"issue-link\" data-issue-key=\"STORM-1959\"><del>STORM-1959</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1551.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1551.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1551</p>\n\n<hr />\n<p>commit e5224b3bd07226dd68f67cbaa4788cd85df1b06d<br/>\nAuthor: Jungtaek Lim <kabhwan@gmail.com><br/>\nDate:   2016-07-11T15:21:00Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1959\" title=\"KafkaPartitionOffsetLag.java does not have license\" class=\"issue-link\" data-issue-key=\"STORM-1959\"><del>STORM-1959</del></a> Add missing license header to KafkaPartitionOffsetLag</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925144/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231769339","html_url":"https://github.com/apache/storm/pull/1482#issuecomment-231769339","issue_url":"https://api.github.com/repos/apache/storm/issues/1482","id":231769339,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTc2OTMzOQ==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:27:13Z","updated_at":"2016-07-11T15:27:13Z","author_association":"CONTRIBUTOR","body":"@harshach @hmcl - can you guys take a look?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231769339/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612913063","html_url":"https://github.com/apache/storm/issues/5659#issuecomment-2612913063","issue_url":"https://api.github.com/repos/apache/storm/issues/5659","id":2612913063,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MTMwNjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:27:15Z","updated_at":"2025-01-24T16:21:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1482\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1482</a></p>\n\n<p>    @harshach @hmcl - can you guys take a look?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612913063/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231769764","html_url":"https://github.com/apache/storm/pull/1551#issuecomment-231769764","issue_url":"https://api.github.com/repos/apache/storm/issues/1551","id":231769764,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTc2OTc2NA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:28:36Z","updated_at":"2016-07-11T15:28:36Z","author_association":"CONTRIBUTOR","body":"+1 pending travis\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231769764/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925151","html_url":"https://github.com/apache/storm/issues/5741#issuecomment-2612925151","issue_url":"https://api.github.com/repos/apache/storm/issues/5741","id":2612925151,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjUxNTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:28:38Z","updated_at":"2025-01-24T16:27:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1551\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1551</a></p>\n\n<p>    +1 pending travis</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923596","html_url":"https://github.com/apache/storm/issues/5731#issuecomment-2612923596","issue_url":"https://api.github.com/repos/apache/storm/issues/5731","id":2612923596,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM1OTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:36:01Z","updated_at":"2025-01-24T16:26:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\">abhishek.agarwal</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sriharsha\" class=\"user-hover\" rel=\"sriharsha\">Harsha</a> We can disable the back-pressure. But I want to know what will be the alternative for topologies with non-acking? If backpressure is not enabled, there should be some other way to bound the send/receive queues.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612609354","html_url":"https://github.com/apache/storm/issues/4934#issuecomment-2612609354","issue_url":"https://api.github.com/repos/apache/storm/issues/4934","id":2612609354,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDkzNTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:36:33Z","updated_at":"2025-01-24T14:04:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=harsha_ch\" class=\"user-hover\" rel=\"harsha_ch\">sriharsha chintalapani</a>,</p>\n\n<p>Then it sounds like we are trying to enforce security when it is turned off, and that is the real underlying problem.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612609354/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923605","html_url":"https://github.com/apache/storm/issues/5731#issuecomment-2612923605","issue_url":"https://api.github.com/repos/apache/storm/issues/5731","id":2612923605,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM2MDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:38:01Z","updated_at":"2025-01-24T16:26:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sriharsha\">sriharsha</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\" class=\"user-hover\" rel=\"abhishek.agarwal\">Abhishek Agarwal</a> we don't have alternative for non-acking before this back pressure feature. We always told users to depend on acking & topology.max.spout.pending if they need a way to control the fast spout.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923605/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612609366","html_url":"https://github.com/apache/storm/issues/4934#issuecomment-2612609366","issue_url":"https://api.github.com/repos/apache/storm/issues/4934","id":2612609366,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDkzNjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:41:42Z","updated_at":"2025-01-24T14:04:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sriharsha\">sriharsha</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\" class=\"user-hover\" rel=\"revans2\">Robert Joseph Evans</a> not sure if we are talking about the same issue <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/>. I was pointing to having nimbus.impersonation.authorizer in defaults.yaml which seems to be confusing to the users given we print logs on every request. I don't think users will expect us to check impersonation in non-secure environments. <br/>\nOr atleast lets check on another config that indicates that the cluster is secure and than only print the logs if we want to have this as default.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612609366/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923611","html_url":"https://github.com/apache/storm/issues/5731#issuecomment-2612923611","issue_url":"https://api.github.com/repos/apache/storm/issues/5731","id":2612923611,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjM2MTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:47:59Z","updated_at":"2025-01-24T16:26:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knusbaum\">knusbaum</a>:</i>\n<p>I'm okay with polling ZK for changes as a fix (for now) so we can keep backpressure on by default. There are obviously issues with the design of backpressure in general, but polling shouldn't make these issues significantly worse. I don't think the load on ZK will increase appreciably from a few nodes polling. The load problem is inherent to other parts of backpressure design.</p>\n\n<p>We could also turn it off by default, but it's nice to have a flow-control mechanism that works automatically without needing the user to perform acking. It might be some time until we have a better system in place. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612923611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/231776331","html_url":"https://github.com/apache/storm/pull/1551#issuecomment-231776331","issue_url":"https://api.github.com/repos/apache/storm/issues/1551","id":231776331,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMTc3NjMzMQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:49:06Z","updated_at":"2016-07-11T15:49:06Z","author_association":"CONTRIBUTOR","body":"Travis passed this is just a comment/documentation change, not a code change so I will push this in without waiting 24 hours.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/231776331/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925154","html_url":"https://github.com/apache/storm/issues/5741#issuecomment-2612925154","issue_url":"https://api.github.com/repos/apache/storm/issues/5741","id":2612925154,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjUxNTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-11T15:49:08Z","updated_at":"2025-01-24T16:27:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1551\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1551</a></p>\n\n<p>    Travis passed this is just a comment/documentation change, not a code change so I will push this in without waiting 24 hours.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]