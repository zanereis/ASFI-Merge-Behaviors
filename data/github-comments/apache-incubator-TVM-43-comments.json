[{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417208446","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417208446","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417208446,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzIwODQ0Ng==","user":{"login":"zheng-da","id":70481,"node_id":"MDQ6VXNlcjcwNDgx","avatar_url":"https://avatars.githubusercontent.com/u/70481?v=4","gravatar_id":"","url":"https://api.github.com/users/zheng-da","html_url":"https://github.com/zheng-da","followers_url":"https://api.github.com/users/zheng-da/followers","following_url":"https://api.github.com/users/zheng-da/following{/other_user}","gists_url":"https://api.github.com/users/zheng-da/gists{/gist_id}","starred_url":"https://api.github.com/users/zheng-da/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zheng-da/subscriptions","organizations_url":"https://api.github.com/users/zheng-da/orgs","repos_url":"https://api.github.com/users/zheng-da/repos","events_url":"https://api.github.com/users/zheng-da/events{/privacy}","received_events_url":"https://api.github.com/users/zheng-da/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T06:47:55Z","updated_at":"2018-08-30T06:48:21Z","author_association":"CONTRIBUTOR","body":"@tqchen Another question is how to integrate with some backward libraries in Relay. Maybe this isn't really a Relay question, but it's something we need to consider after TVM moves to Relay. I suppose Relay is good at pattern matching. Is it easy to take out the matched pattern and put it somewhere (maybe in an operator) to invoke TensorRT? How do you think about supporting stateful operators, both from the perspective of Relay and TVM? Having a stateful operator may be easier for us to integrate with TensorRT.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417208446/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417209140","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417209140","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417209140,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzIwOTE0MA==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T06:51:11Z","updated_at":"2018-08-30T11:35:16Z","author_association":"MEMBER","body":"@zheng-da Can you be more specific about “good at pattern matching”?\r\n\r\n> @tqchen Another question is how to integrate with some backward libraries in Relay. Maybe this isn't really a Relay question, but it's something we need to consider after TVM moves to Relay. I suppose Relay is good at pattern matching. Is it easy to take out the matched pattern and put it somewhere (maybe in an operator) to invoke TensorRT? How do you think about supporting stateful operators, both from the perspective of Relay and TVM? Having a stateful operator may be easier for us to integrate with TensorRT.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417209140/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417210718","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417210718","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417210718,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzIxMDcxOA==","user":{"login":"zheng-da","id":70481,"node_id":"MDQ6VXNlcjcwNDgx","avatar_url":"https://avatars.githubusercontent.com/u/70481?v=4","gravatar_id":"","url":"https://api.github.com/users/zheng-da","html_url":"https://github.com/zheng-da","followers_url":"https://api.github.com/users/zheng-da/followers","following_url":"https://api.github.com/users/zheng-da/following{/other_user}","gists_url":"https://api.github.com/users/zheng-da/gists{/gist_id}","starred_url":"https://api.github.com/users/zheng-da/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zheng-da/subscriptions","organizations_url":"https://api.github.com/users/zheng-da/orgs","repos_url":"https://api.github.com/users/zheng-da/repos","events_url":"https://api.github.com/users/zheng-da/events{/privacy}","received_events_url":"https://api.github.com/users/zheng-da/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T06:58:22Z","updated_at":"2018-08-30T06:58:22Z","author_association":"CONTRIBUTOR","body":"@junrushao1994 actually, I don't know. I guess Relay should be able to do pattern matching. One example of pattern matching is to find a set of operators that can be fused in TVM.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417210718/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417212303","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417212303","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417212303,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzIxMjMwMw==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T07:05:14Z","updated_at":"2018-08-30T07:05:14Z","author_association":"MEMBER","body":"@zheng-da NNVM can already do operator fusion. TVM supports cuDNN offload out of the box. [This tutorial ](https://docs.tvm.ai/tutorials/nnvm/using_external_lib.html#sphx-glr-tutorials-nnvm-using-external-lib-py )maybe helpful. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417212303/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417220373","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417220373","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417220373,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzIyMDM3Mw==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T07:36:49Z","updated_at":"2018-08-30T07:36:49Z","author_association":"MEMBER","body":"I think Da's asking similar question as mine, since TensorRT eats a graph, if we extract a subset of Relay IR and pass it to TensorRT for accelerating, then an intermediate graph representation is required.\r\n\r\n@zheng-da I don't think it is a problem to find out operators meet a specific requirement - we can still traverse the Relay AST.\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417220373/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417230423","html_url":"https://github.com/apache/tvm/pull/1672#issuecomment-417230423","issue_url":"https://api.github.com/repos/apache/tvm/issues/1672","id":417230423,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzIzMDQyMw==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T08:12:35Z","updated_at":"2018-08-30T08:12:35Z","author_association":"MEMBER","body":"Another style issue: it looks like & position in function arguments are basically random everywhere. They need to be consistent.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417230423/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417234041","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417234041","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417234041,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzIzNDA0MQ==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T08:24:56Z","updated_at":"2018-08-30T08:24:56Z","author_association":"MEMBER","body":"@merrymercy need another rebase","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417234041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417246824","html_url":"https://github.com/apache/tvm/pull/1660#issuecomment-417246824","issue_url":"https://api.github.com/repos/apache/tvm/issues/1660","id":417246824,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzI0NjgyNA==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T09:07:35Z","updated_at":"2018-08-30T09:07:35Z","author_association":"MEMBER","body":"@tqchen My code can handle this case. I only do check inside a kernel","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417246824/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417270681","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417270681","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417270681,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzI3MDY4MQ==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T10:25:49Z","updated_at":"2018-08-30T11:35:46Z","author_association":"MEMBER","body":"@zheng-da I got what you mean. I was confused because “pattern matching” typically refers to conditional statements in FP.\r\n\r\nI think @zheng-da is right. This is not a Relay question. I would say it is pretty trivial to do by traversing the IR and extract whatever TensorRT supports,as @yzhliu suggests. However, there are two things we should keep an eye on:\r\n1) I am not a big fan of a stateful operator (and I believe nobody is). We should try to separate their state out as the arguments, and return the new states back after computation.\r\n2) We should be careful with infinite recursion.\r\n\r\n> @junrushao1994 actually, I don't know. I guess Relay should be able to do pattern matching. One example of pattern matching is to find a set of operators that can be fused in TVM.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417270681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417274015","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417274015","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417274015,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzI3NDAxNQ==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T10:39:23Z","updated_at":"2018-08-30T11:36:15Z","author_association":"MEMBER","body":"@yzhliu I think what you are trying to say is “we need an IR converter”. Yes, that makes a lot of sense. Ideally, there should be a bridge IR to which every DL framework converts themselves, and from which the low-level lib provider writes a pass to convert to their own IR. But such thing does not seem to exist yet (or ONNX?).\r\n\r\nWe could definitely make it more systematic though, but it does not seem that necessary for now, because only a very small number of low-level lib consumes a graph.\r\n\r\nAs for integrating operator-level libraries like cuDNN, this is never a problem in TVM...\r\n\r\n> I think Da's asking similar question as mine, since TensorRT eats a graph, if we extract a subset of Relay IR and pass it to TensorRT for accelerating, then an intermediate graph representation is required.\r\n>\r\n> @zheng-da I don't think it is a problem to find out operators meet a specific requirement - we can still traverse the Relay AST.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417274015/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417283365","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417283365","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417283365,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzI4MzM2NQ==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T11:16:22Z","updated_at":"2018-08-30T11:28:08Z","author_association":"MEMBER","body":"@tqchen @jroesch Let's talk about introducing data structures like lists, dict. (I re-structured the stuff I wrote yesterday)\r\n\r\n**Solution A**: use confluently persistent data structure. (immutable)\r\nThere is theoretically no difficulty in implementing functional data structures like functional List or functional Map. But we may have two concerns:\r\n1) overhead for being functional. For example, I often write the functional Map using merge/split Treap, which maintains an expected O(log n) time & space complexity, but my C++ implementation is likely to be 4x - 10x slower than non-functional ones. If we have a good runtime, the latency should somewhat be hidden, but I am not sure.\r\n2) Another thing is if we introduce immutable lists / dicts, the semantics of `list` and `map` would be changed. But of course, we could force users use things like `tvm.immutable_list`, and declare \"we don't want you guys to use Python list/map\".\r\n\r\n**Solution B**: let's leave it dirty. (mutable)\r\nThere are also two concerns.\r\n1) In my opinion, we should try to avoid any tracing-based autodiff, otherwise it loses both the elegancy of our design and part of the meaning of being functional.\r\n2) It leaks side effect everywhere. To avoid this, it is possible to slice the graph. But it is relatively bad idea especially when it is inside a loop (see the self-attention example), because it discourages a lot of global optimizations.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417283365/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417286814","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417286814","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417286814,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzI4NjgxNA==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T11:30:47Z","updated_at":"2018-08-30T14:37:07Z","author_association":"MEMBER","body":"## Part II: Optimization\r\n\r\nI feel that this part is tightly entangled with runtime though...\r\n\r\n### Terms\r\nOptimization for deep learning kernels (vectorized) seems totally different from that for scalar operations (e.g. `+`, `*`, `/`, `->`, etc). I am not an expert, but please allow me to define two terms to distinguish these two kind of optimizations:\r\n* we use **kernel optimization** to refer to that we optimize deep learning kernels like TVM does.\r\n* we use **scalar optimization** to refer to classic optimizations applied to scalars, like constant propagation, strength reduction, global common sub-expression elimination, etc.\r\n\r\nNote that kernel optimization is a superset of scalar optimization by definition, but here let's assume kernel optimization refers to the part that is not scalar.\r\n\r\n### Memory for high-level, speed for low-level\r\nAs far as I could tell,\r\n* A high-level IR typically could not optimize the performance (speed) of kernels, because of unawareness of low-level intrinsics (it could somehow help improve speed by improving memory locality, but let's say it is memory optimization rather than speed optimization)\r\n* A low-level IR like HalideIR and better scheduling are the keys to improving performance (speed). Therefore, we would prefer first talking about optimizing memory footprint instead of speed in this discussion of the high-level IR.\r\n\r\nHowever, by prioritize instructions, optimization in speed is also possible, when control flow exists or in the distributed setting.\r\n\r\n### Memory I: Liveness analysis, memory preallocation and sharing\r\nOne good thing for a purely FP is liveness analysis is pretty trivial. I would prefer just to add a tag `DEAD(some-memory-chunk)` to inform the runtime.\r\n\r\nThere are several situations we need to consider:\r\n1) An ordinary function, and no other functions are its arguments, no infinite recursion, no pattern matching: Memory preallocation is directly doable once all shapes are known.\r\n2) An ordinary function, and no other functions are its arguments, no infinite recursion, but has pattern matching: This creates exponential number of combinations of memory footprint. We could build a bin estimator statistically analyzing the memory footprint.\r\n3) A higher-order function, or a function could trigger self/mutable recursion: it is hard, let's not do such optimization for this kind of function.\r\n\r\nAlso, memory sharing is trivial across functions.\r\n\r\n### Memory II: Host memory as $L_\\infty$ cache\r\nThis is inspired by @tqchen's paper [1], but in a less elegant way. I also prefer to leave this to the runtime.\r\n\r\n### Memory III: Detecting contiguous memory allocation\r\nFrom the NLP community, it has raised lots of concern to detect contiguous memory allocation. Again, I would love to take self-attention as the example, which is widely used in generating sequences of better quality in machine translation, question answering, etc.\r\n\r\n```python\r\ndef self-attentive-generator():\r\n  initialize states\r\n  initialize outputs = []\r\n  while True:\r\n    prev_outputs = concat(outputs)\r\n    context_vector = self-attention(prev_outputs, inputs, state)\r\n    step_output, states = DecoderStep(states, prev_outputs)\r\n    outputs.append(step_output)\r\n    if some_condition:\r\n      break\r\n  outputs = concat(outputs)\r\n  return outputs, states\r\n```\r\n\r\nAt each step, we have a `concat`, which produces a new chunk of memory. Unfortunately, this memory could not be released, because we probably are going to back-propagate through it. This causes quadratic memory consumption.\r\n\r\nI think it is worth mentioning that it is not a corner case, but seems to me a trend that many practitioners now knows it works, and they wants to add this seemingly free lunch to their sentence generation model.\r\n\r\nIt is possible to optimize this, as long as we could detect this memory allocate pattern. Fortunately, yes, it is doable in this IR.\r\n\r\n### Memory IV: (hard case) optimize shape-related operations following Numpy\r\nThis optimization is pretty useful, but not easy to implement under the current IR.\r\n\r\nFor example, a rank-n Tensor is `np.swapaxes`, and subsequently a `reshape` is called. Numpy will check if it is possible not to do zero-copy in `reshape`. However, it seems that we did not expose such thing in current level of IR because it requires `ndarray.strides`.\r\n\r\n@tqchen As I suggested in my proposal, we should expose everything in some level of IR.\r\n\r\n### Speed I: LLVM/GCC does much better than any single person\r\nScalars are currently represented using rank-0 tensors, which is unified under current IR. However, it remains a question to me whether we want to do this by like launching a kernel to some GPU stream, or MKLDNN stream, then waiting for callback, merely for computing scalars like `a + b`.\r\n\r\nI would propose to do program slicing in the lower-level IR to distinguish scalar and kernel operations, then grant scalar operations to LLVM RTC for optimization.\r\n\r\n### Speed II: Decoupling scalar, memory and kernel operation\r\nThis is similar to the previous section, that in a lower-level runtime, we would decouple these three things into 3 program counters, do speculative execution over some PCs, in order to let kernel operations launch continuously, in this case, launching gap will be fully eliminated.\r\n\r\n### Speed III: Register allocation\r\nI don't think it is doable in current version of TVM, but it could bring significant speed improvement when viable. For example, fixing weights of a RNN cell into some registers, make sure they aren't spilled.\r\n\r\nThis optimization is also related to pipelining instructions layer by layer in inference. Let's leave it to f future work...\r\n\r\n[1] Chen, T., Xu, B., Zhang, C., & Guestrin, C. (2016). Training deep nets with sublinear memory cost. arXiv preprint arXiv:1604.06174.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417286814/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417294508","html_url":"https://github.com/apache/tvm/pull/1678#issuecomment-417294508","issue_url":"https://api.github.com/repos/apache/tvm/issues/1678","id":417294508,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzI5NDUwOA==","user":{"login":"oss-dev-somewhere","id":2771164,"node_id":"MDQ6VXNlcjI3NzExNjQ=","avatar_url":"https://avatars.githubusercontent.com/u/2771164?v=4","gravatar_id":"","url":"https://api.github.com/users/oss-dev-somewhere","html_url":"https://github.com/oss-dev-somewhere","followers_url":"https://api.github.com/users/oss-dev-somewhere/followers","following_url":"https://api.github.com/users/oss-dev-somewhere/following{/other_user}","gists_url":"https://api.github.com/users/oss-dev-somewhere/gists{/gist_id}","starred_url":"https://api.github.com/users/oss-dev-somewhere/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oss-dev-somewhere/subscriptions","organizations_url":"https://api.github.com/users/oss-dev-somewhere/orgs","repos_url":"https://api.github.com/users/oss-dev-somewhere/repos","events_url":"https://api.github.com/users/oss-dev-somewhere/events{/privacy}","received_events_url":"https://api.github.com/users/oss-dev-somewhere/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T12:01:56Z","updated_at":"2018-08-30T12:01:56Z","author_association":"CONTRIBUTOR","body":"@nishi-t Thank you for reviewing. As you mentioned, it might be a good idea to use RPC. I close this PR and will work on RPC.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417294508/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417344202","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417344202","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417344202,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzM0NDIwMg==","user":{"login":"MarisaKirisame","id":3397377,"node_id":"MDQ6VXNlcjMzOTczNzc=","avatar_url":"https://avatars.githubusercontent.com/u/3397377?v=4","gravatar_id":"","url":"https://api.github.com/users/MarisaKirisame","html_url":"https://github.com/MarisaKirisame","followers_url":"https://api.github.com/users/MarisaKirisame/followers","following_url":"https://api.github.com/users/MarisaKirisame/following{/other_user}","gists_url":"https://api.github.com/users/MarisaKirisame/gists{/gist_id}","starred_url":"https://api.github.com/users/MarisaKirisame/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarisaKirisame/subscriptions","organizations_url":"https://api.github.com/users/MarisaKirisame/orgs","repos_url":"https://api.github.com/users/MarisaKirisame/repos","events_url":"https://api.github.com/users/MarisaKirisame/events{/privacy}","received_events_url":"https://api.github.com/users/MarisaKirisame/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T14:41:12Z","updated_at":"2018-08-30T17:41:03Z","author_association":"CONTRIBUTOR","body":"@junrushao1994 I am the main designer/implementer of relay's automatic differentiation system.\r\n\r\nIn general, doing non-tracing based reverse mode automatic differentiation on arbitrary lambda is extremely hard. There is only one paper (Reverse Mode AD in a functional framework) that does it, which work by traversing the reflected program, is complicated, and is untyped.\r\n\r\nWe might be able to type it, but it will bring a huge source of complexity, and optimizing on reflection will not be easier then optimizing trace. So, we actually use a tracing based approach, which is very similar to (Demystifying Differentiable Programming), except we do not use continuation, only Mutation.\r\n\r\nIMO as there is already effect everywhere (random, IO in reinforcement learning, mutation in NLP, distributed training) etc, the problem is less of 'whether there should be effect or not', and is more 'how should we capture effect? Monad or Eff-like effect system or doesnt at all (as in OCaml/SML), only in static analysis?' I do agree that it is a problem in it's own right, but I think some notion of effect is inevitable.\r\n\r\nBack to your particular problem, I think there is a 'best of both world solution'.\r\nintroduce a type Ref a. It mean a pointer pointing to a, which can change it's content. the pointer cannot change what it point to though (albeit it can be achieved with Ref(Ref a)).\r\nThere is 3 function on Ref.\r\nMkRef : a -> Ref a\r\nGetRef : Ref a -> a\r\nSetRef : Ref a -> a -> ()\r\nand possibly, updateRef : Ref a -> (a -> a) -> (), which is atomic.\r\nintroduce effectless list/dict.\r\ntranslate python list into Ref(List a).\r\nin the compiler, add special hook for Ref(List a), and use custom mutable datastructure.\r\nwe can also change list a to mutable one(in compiler) if it is not being shared.\r\n\r\nI think this address the (1, 2) in solution A, and the previous paragraph address (1) in solution B.\r\n\r\nLet's talk about (2) B.\r\nI do agree that reference hinder optimization. However, so does reflection - which is the only other way for higher order reverse mode differentiation on higher order function. I also postulate that with constant folding, the reference can be optimized away when the control flow is known. It will only exists at the boundary of unknown function call. If some variable are only used locally, never leaked outside, and their usage does not vary to the control flow, they should not generate Ref.\r\n\r\nOf course, it is only a postulation at this point, but we also has a first order reverse mode automatic differentiation algorithm implemented, with no wengert list at runtime. The down side is that it does not work with control flow. We can always add special case to make sure no Ref is generated here, to achieve better speed.\r\n\r\nAlso IMHO we are pondering into the future too far ahead. AFAIK No one know how will reference, data-structure, tensor, ad, play together, when we try to compile efficient code on GPU. I think we should hold such design decision until much later phase, when we have a clearer picture.\r\n\r\nDoes I address your question?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417344202/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417345086","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417345086","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417345086,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzM0NTA4Ng==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T14:43:52Z","updated_at":"2018-08-30T14:43:52Z","author_association":"MEMBER","body":"@tqchen @jroesch\r\nI guess I have done the optimization part. I believe most of the optimization techniques for deep learning workloads that I could up with could be somehow covered by using in RelayIR, thanks to the purity of FP. Could you guys give some feedback about this?\r\n\r\nI am really interested in how you guys could implement a low-level runtime environment, because I didn't see the design in the Relay paper. Could you guys kindly share some information with me?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417345086/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417355153","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417355153","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417355153,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzM1NTE1Mw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T15:11:15Z","updated_at":"2018-08-30T15:11:15Z","author_association":"MEMBER","body":"WRt to optimizations, we should try to push most optimization to compiler and leave runtime lightweight.\r\n\r\nScalar slicing and fusion. This is likely can be done already in relay, by slice out 0 rank tensor and generated a fused function to compute them, only one memory store is necessary and they act similarly as infer shape.\r\n\r\nReshape opt is not as important, usually inplace type memory optimization is not as important as long as there is memory reuse. Because the memory before reshape can get reused in the next stage. Compact memory is much better for speed optimizations\r\n\r\nConcat, directly add to slice\r\n\r\nThis has something to do with custom calling convention, when building a relay function, there are multiple ways on how to handle calls. The tensor space can be caller allocated or callee allocated. And we can specify if there is a fused op for return value. For example we can support customized calling convention, like invoke this function and add the result to a preallocated array. Combining compile time analysis with customized calling convention likely can solve this problem ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417355153/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417358018","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417358018","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417358018,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzM1ODAxOA==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T15:19:08Z","updated_at":"2018-08-30T15:19:08Z","author_association":"MEMBER","body":"@MarisaKirisame Thank you so much for your very helpful comments! It does address most of my questions.\r\n\r\n> @junrushao1994 I am the main designer/implementer of relay's automatic differentiation system.\r\n> \r\n> In general, doing non-tracing based reverse mode automatic differentiation on arbitrary lambda is extremely hard. There is only one paper (Reverse Mode AD in a functional framework) that does it, which work by traversing the reflected program, is complicated, and is untyped.\r\n> \r\n> We might be able to type it, but it will bring a huge source of complexity, and optimizing on reflection will not be easier then optimizing trace. So, we actually use a tracing based approach, which is very similar to , except we do not use continuation, only Mutation.\r\n> \r\n> IMO as there is already effect everywhere (random, IO in reinforcement learning, mutation in NLP, distributed training) etc, the problem is less of 'whether there should be effect or not', and is more 'how should we capture effect? Monad or Eff-like effect system or doesnt at all (as in OCaml/SML), only in static analysis?' I do agree that it is a problem in it's own right, but I think some notion of effect is inevitable.\r\n> \r\n> Back to your particular problem, I think there is a 'best of both world solution'.\r\n> introduce a type Ref. It mean a pointer pointing to a, which can change it's content. the pointer cannot change what it point to though (albeit it can be achieved with Ref<Ref>).\r\n> introduce effectless list/dict.\r\n> translate python list into Ref<List>.\r\n> in the compiler, add special hook for Ref<List>, and use custom mutable datastructure.\r\n> we can also change list a to mutable one(in compiler) if it is not being shared.\r\n> \r\n> I think this address the (1, 2) in solution A, and the previous paragraph address (1) in solution B.\r\n> \r\n> Let's talk about (2) B.\r\n> I do agree that reference hinder optimization. However, so does reflection - which is the only other way for higher order reverse mode differentiation on higher order function. I also postulate that with constant folding, the reference can be optimized away when the control flow is known. It will only exists at the boundary of unknown function call. If some variable are only used locally, never leaked outside, and their usage does not vary to the control flow, they should not generate Ref.\r\n> \r\n> Of course, it is only a postulation at this point, but we also has a first order reverse mode automatic differentiation algorithm implemented, with no wengert list at runtime. The down side is that it does not work with control flow. We can always add special case to make sure no Ref is generated here, to achieve better speed.\r\n> \r\n> Also IMHO we are pondering into the future too far ahead. AFAIK No one know how will reference, data-structure, tensor, ad, play together, when we try to compile efficient code on GPU. I think we should hold such design decision until much later phase, when we have a clearer picture.\r\n> \r\n> Does I address your question?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417358018/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417362073","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417362073","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417362073,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzM2MjA3Mw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T15:30:38Z","updated_at":"2018-08-30T15:30:38Z","author_association":"MEMBER","body":"One thing to keep in mind is that we need to codesign things, instead of simply think in terms of high level ir, for example, the function slicing likely have things to do with what low level code generator and hw has to offer. So most low level info need to be registered in high level and we need embed meta data to reflect certain info ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417362073/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417393349","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417393349","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417393349,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzM5MzM0OQ==","user":{"login":"zhiics","id":5145158,"node_id":"MDQ6VXNlcjUxNDUxNTg=","avatar_url":"https://avatars.githubusercontent.com/u/5145158?v=4","gravatar_id":"","url":"https://api.github.com/users/zhiics","html_url":"https://github.com/zhiics","followers_url":"https://api.github.com/users/zhiics/followers","following_url":"https://api.github.com/users/zhiics/following{/other_user}","gists_url":"https://api.github.com/users/zhiics/gists{/gist_id}","starred_url":"https://api.github.com/users/zhiics/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhiics/subscriptions","organizations_url":"https://api.github.com/users/zhiics/orgs","repos_url":"https://api.github.com/users/zhiics/repos","events_url":"https://api.github.com/users/zhiics/events{/privacy}","received_events_url":"https://api.github.com/users/zhiics/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T17:03:19Z","updated_at":"2018-08-30T17:09:52Z","author_association":"MEMBER","body":"@tqchen I also totally agree that we should give most of optimization work to the compiler and keep runtime light. But I actually also have a concern about the optimization passes which is probably more related to NNVM. There are already many passes and the number is expected to continue growing. As the number passes grows, I think it would be beneficial to have a more systematic way to manager them.\r\n\r\nFor example, I am thinking if it makes sense to introduce something like a \"PassManager\" (as in llvm) to maintain the passes. PassManager may provide the following things. \r\n1. It can expose some APIs to users to implement their own opt passes at different levels, e.g. optOnGraph(Graph&& g) and optOnTensor(Tenosr&& t) for optimizations on graph and tensor respectively.\r\n2. The passmanager might be able to help maintain or tune the sequence of different opt passes.  \r\n3. It could reserve some analysis information for loops and/or tensors, although I am not exactly sure about what information would be necessary. This information can help more optimizaitons.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417393349/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417414402","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417414402","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417414402,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQxNDQwMg==","user":{"login":"zheng-da","id":70481,"node_id":"MDQ6VXNlcjcwNDgx","avatar_url":"https://avatars.githubusercontent.com/u/70481?v=4","gravatar_id":"","url":"https://api.github.com/users/zheng-da","html_url":"https://github.com/zheng-da","followers_url":"https://api.github.com/users/zheng-da/followers","following_url":"https://api.github.com/users/zheng-da/following{/other_user}","gists_url":"https://api.github.com/users/zheng-da/gists{/gist_id}","starred_url":"https://api.github.com/users/zheng-da/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zheng-da/subscriptions","organizations_url":"https://api.github.com/users/zheng-da/orgs","repos_url":"https://api.github.com/users/zheng-da/repos","events_url":"https://api.github.com/users/zheng-da/events{/privacy}","received_events_url":"https://api.github.com/users/zheng-da/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T18:07:18Z","updated_at":"2018-08-30T18:08:07Z","author_association":"CONTRIBUTOR","body":"@junrushao1994@gmail.com <junrushao1994@gmail.com> I don't know many\r\nexternal libraries for deep learning, but I can name a few: TensorRT,\r\nnGraph, which requires graph-level integration. As far as I know, both Intel and Nvidia are developing more\r\ngraph-level libraries. I think it's pretty common. I think we should think\r\nabout this problem.\r\nAs for stateful operators, I wonder what is the other option. If we\r\nseparate the state and pass it as an input argument, the data structure (it\r\ncan contain any arbitrary data required by the external libraries) might be\r\npretty complex. It doesn't seem to me that Relay can handle this kind of\r\ndata structure.\r\n\r\nOn Thu, Aug 30, 2018 at 3:39 AM Junru Shao <notifications@github.com> wrote:\r\n\r\n> @yzhliu <https://github.com/yzhliu> I think what you are saying is “we\r\n> need an IR converter”. Yes, that makes a lot of sense. Ideally, there\r\n> should be a bridge IR that every DL framework converts their IR to the\r\n> bridge IR, and the low-level lib provider writes a pass from the bridge IR\r\n> to their own IR. But such thing does not seem to exist.\r\n>\r\n> We could definitely make it more systematic though, but it does not seem\r\n> that necessary for now, because only a very few number of low-level lib\r\n> consumes a graph.\r\n>\r\n> —\r\n> You are receiving this because you were mentioned.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/dmlc/tvm/issues/1673#issuecomment-417274015>, or mute\r\n> the thread\r\n> <https://github.com/notifications/unsubscribe-auth/AAETUVTEugZ4-2II2ws5iodl-qukmWsgks5uV8DigaJpZM4WRCFP>\r\n> .\r\n>\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417414402/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417417999","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417417999","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417417999,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQxNzk5OQ==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T18:18:23Z","updated_at":"2018-08-31T05:12:44Z","author_association":"MEMBER","body":"@zheng-da these are just trivial engineering choices, and could you name a specific thing that relay could not handle? @tqchen could you comment on this?\r\n\r\n> @junrushao1994@gmail.com <junrushao1994@gmail.com> I don't know many\r\n> external libraries for deep learning, but I can name a few: TensorRT,\r\n> nGraph, which requires graph-level integration. As far as I know, both Intel and Nvidia are developing more\r\n> graph-level libraries. I think it's pretty common. I think we should think\r\n> about this problem.\r\n> As for stateful operators, I wonder what is the other option. If we\r\n> separate the state and pass it as an input argument, the data structure (it\r\n> can contain any arbitrary data required by the external libraries) might be\r\n> pretty complex. It doesn't seem to me that Relay can handle this kind of\r\n> data structure.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417417999/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417418240","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417418240","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417418240,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQxODI0MA==","user":{"login":"kevinthesun","id":15520525,"node_id":"MDQ6VXNlcjE1NTIwNTI1","avatar_url":"https://avatars.githubusercontent.com/u/15520525?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinthesun","html_url":"https://github.com/kevinthesun","followers_url":"https://api.github.com/users/kevinthesun/followers","following_url":"https://api.github.com/users/kevinthesun/following{/other_user}","gists_url":"https://api.github.com/users/kevinthesun/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinthesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinthesun/subscriptions","organizations_url":"https://api.github.com/users/kevinthesun/orgs","repos_url":"https://api.github.com/users/kevinthesun/repos","events_url":"https://api.github.com/users/kevinthesun/events{/privacy}","received_events_url":"https://api.github.com/users/kevinthesun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T18:19:06Z","updated_at":"2018-08-30T18:19:06Z","author_association":"CONTRIBUTOR","body":"@eqy @merrymercy I got an issue using autotvm to tune conv2d_NCHWc on intel cpu. The benchmark results got from autotvm mismatch with the results that I use the same records to run with pure tvm(use tvm.build and feed in data directly). This usually happens when average exec time is under 0.1 ms, and autotvm gets much shorter exec time comparing to actual result, such as 0.097808883 ms vs 0.19609940052 ms. \r\n\r\nI use the following settings:\r\n```python\r\nmeasure_option = autotvm.measure_option(\r\n        builder=autotvm.LocalBuilder(n_parallel=1),\r\n        runner=autotvm.LocalRunner(number=run_times, min_repeat_ms=1500, cooldown_interval=2))\r\n```\r\n\r\nI use all cpu cores and no parallel jobs. I set min_repeat_ms to be 1500 so that the execution number is sufficient.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417418240/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417425828","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417425828","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417425828,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQyNTgyOA==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T18:43:35Z","updated_at":"2018-08-30T18:48:50Z","author_association":"MEMBER","body":"Did you use `time_evaluator` for your \"pure tvm\"?\r\n\r\nAutotvm uses time_evaluator, which will skip the first warm up run\r\n https://github.com/dmlc/tvm/blob/0c523787297039ce00b320c1d32e022e61e97ac2/python/tvm/autotvm/measure/measure_methods.py#L456-L458\r\n\r\nhttps://github.com/dmlc/tvm/blob/b95b5958913927b90463dddb61eb18ef6e1556f6/src/runtime/rpc/rpc_session.cc#L1193-L1198","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417425828/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417434622","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417434622","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417434622,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQzNDYyMg==","user":{"login":"kevinthesun","id":15520525,"node_id":"MDQ6VXNlcjE1NTIwNTI1","avatar_url":"https://avatars.githubusercontent.com/u/15520525?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinthesun","html_url":"https://github.com/kevinthesun","followers_url":"https://api.github.com/users/kevinthesun/followers","following_url":"https://api.github.com/users/kevinthesun/following{/other_user}","gists_url":"https://api.github.com/users/kevinthesun/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinthesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinthesun/subscriptions","organizations_url":"https://api.github.com/users/kevinthesun/orgs","repos_url":"https://api.github.com/users/kevinthesun/repos","events_url":"https://api.github.com/users/kevinthesun/events{/privacy}","received_events_url":"https://api.github.com/users/kevinthesun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T19:13:29Z","updated_at":"2018-08-30T19:13:29Z","author_association":"CONTRIBUTOR","body":"I tried time_evaluator and got the similar results. I also apply the results of autotvm to graph tuner. The result doesn't match the records of autotvm. For example, for resnet18 the total exec time of conv2d is around 1.6 ms given record of autotvm. The actual exec time is around 3.6 ms, which corresponds \"pure tvm\" exec time.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417434622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417435887","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417435887","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417435887,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQzNTg4Nw==","user":{"login":"eqy","id":2239616,"node_id":"MDQ6VXNlcjIyMzk2MTY=","avatar_url":"https://avatars.githubusercontent.com/u/2239616?v=4","gravatar_id":"","url":"https://api.github.com/users/eqy","html_url":"https://github.com/eqy","followers_url":"https://api.github.com/users/eqy/followers","following_url":"https://api.github.com/users/eqy/following{/other_user}","gists_url":"https://api.github.com/users/eqy/gists{/gist_id}","starred_url":"https://api.github.com/users/eqy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eqy/subscriptions","organizations_url":"https://api.github.com/users/eqy/orgs","repos_url":"https://api.github.com/users/eqy/repos","events_url":"https://api.github.com/users/eqy/events{/privacy}","received_events_url":"https://api.github.com/users/eqy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T19:17:55Z","updated_at":"2018-08-30T19:17:55Z","author_association":"CONTRIBUTOR","body":"I wonder if this may have something to do with whether layout\ntransformation time is included? Don’t know the details here so that is\njust a guess.\n\nEddie\nOn Thu, Aug 30, 2018 at 12:13 PM Yao Wang <notifications@github.com> wrote:\n\n> I tried time_evaluator and got the similar results. I also apply the\n> results of autotvm to graph tuner. The result doesn't match the records of\n> autotvm. For example, for resnet18 the total exec time of conv2d is around\n> 1.6 ms given record of autotvm. The actual exec time is around 3.6 ms,\n> which corresponds \"pure tvm\" exec time.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dmlc/tvm/issues/1585#issuecomment-417434622>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACIsgIzXV-W9mM3V-eHlIllb16hEXRgQks5uWDlhgaJpZM4V45-3>\n> .\n>\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417435887/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417439919","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417439919","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417439919,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQzOTkxOQ==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T19:30:58Z","updated_at":"2018-08-30T19:31:05Z","author_association":"MEMBER","body":"Can you try to use `repeat=1` in `LocalRunner`?\r\nOr can you give me some scripts that  I can verify","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417439919/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417447966","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417447966","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417447966,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQ0Nzk2Ng==","user":{"login":"kevinthesun","id":15520525,"node_id":"MDQ6VXNlcjE1NTIwNTI1","avatar_url":"https://avatars.githubusercontent.com/u/15520525?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinthesun","html_url":"https://github.com/kevinthesun","followers_url":"https://api.github.com/users/kevinthesun/followers","following_url":"https://api.github.com/users/kevinthesun/following{/other_user}","gists_url":"https://api.github.com/users/kevinthesun/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinthesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinthesun/subscriptions","organizations_url":"https://api.github.com/users/kevinthesun/orgs","repos_url":"https://api.github.com/users/kevinthesun/repos","events_url":"https://api.github.com/users/kevinthesun/events{/privacy}","received_events_url":"https://api.github.com/users/kevinthesun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T19:58:06Z","updated_at":"2018-08-30T20:44:18Z","author_association":"CONTRIBUTOR","body":"@eqy I looked at the fused graph, there are only two layout transform, one at the beginning and one at the end, which is expected, but the e2e performance is not good.\r\n@merrymercy This is graph tuner branch: https://github.com/kevinthesun/tvm/tree/GraphTuner Major changes to use autotvm is under x86/conv2d.py.\r\nThis is the script I use to benchmark:\r\n```python\r\nimport logging\r\nimport sys\r\nimport time\r\n\r\nimport numpy as np\r\nimport nnvm\r\nimport tvm\r\nimport topi\r\n\r\nfrom tvm import autotvm\r\nfrom tvm.autotvm.task import register, get_config\r\nfrom tvm.autotvm.task.nnvm_integration import deserialize_args\r\nfrom tvm.autotvm.util import get_const_tuple\r\nfrom nnvm import symbol as sym\r\nfrom tvm.contrib import graph_runtime\r\nfrom nnvm.testing.utils import create_workload\r\nfrom mxnet.gluon.model_zoo.vision import get_model\r\n\r\nif __name__ == \"__main__\":\r\n    run_times = 10\r\n    model = \"resnet18_v1\"\r\n    image_shape = (3, 299, 299) if \"inception\" in model else (3, 224, 224)\r\n    dshape = (1,) + image_shape\r\n    dtype = \"float32\"\r\n    target = 'llvm -mcpu=skylake-avx512'\r\n    block = get_model(model, pretrained=True)\r\n    net, params = nnvm.frontend.from_mxnet(block)\r\n    tasks = autotvm.task.extract_from_graph(net, target=target, shape={'data': dshape}, dtype=dtype, symbols=(sym.conv2d,))\r\n\r\n    logging.getLogger('autotvm').setLevel(logging.DEBUG)\r\n    logging.getLogger('autotvm').addHandler(logging.StreamHandler(sys.stdout))\r\n    measure_option = autotvm.measure_option(\r\n        builder=autotvm.LocalBuilder(n_parallel=1),\r\n        runner=autotvm.LocalRunner(number=run_times, min_repeat_ms=1500))\r\n    args_set = set()\r\n    for i, task in enumerate(tasks):\r\n        data, kernel, strides, padding, layout, dtype = task.args\r\n        kernel_size = (kernel[1][2], kernel[1][3])\r\n        data_plc = tvm.placeholder(data[1], name=\"data\")\r\n        kernel_plc = tvm.placeholder(kernel[1], name=\"kernel\")\r\n        args = [data_plc, kernel_plc, data[1][1], kernel_size, strides, padding, layout, layout, dtype]\r\n        args = autotvm.task.nnvm_integration.serialize_args(args)\r\n        #print(args)\r\n        if args in args_set:\r\n            continue\r\n        args_set.add(args)\r\n        task = autotvm.task.create(\"topi_x86_conv2d_NCHWc\", args=args, target=target)\r\n        task.workload = topi.x86.conv2d.conv_NCHWc_arg_to_workload(data_plc, kernel_plc, kernel_size, strides, padding, layout, dtype)\r\n        tuner = autotvm.tuner.GridSearchTuner(task)\r\n        tuner.tune(n_trial=len(task.config_space),\r\n                   measure_option=measure_option,\r\n                   callbacks=[autotvm.callback.log_to_file('resnet.log')])\r\n```\r\nI run it on AWS c5.9xlarge with:\r\n```bash\r\nTVM_NUM_THREADS=18 nohup python test_autotvm.py\r\n```\r\nusing all 18 cores to sequentially benchmarking all jobs. I'll try repeat=1.\r\n\r\nThese are optimal records I got for resnet18:\r\n```\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 3, 224, 224], \"float32\"], [\"TENSOR\", [64, 3, 7, 7], \"float32\"], 3, [7, 7], [2, 2], [3, 3], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 3, 224, 224, \"float32\"], [64, 3, 7, 7, \"float32\"], [2, 2], [3, 3], \"NCHW\", \"float32\"], {\"i\": 41, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [1, 3]], [\"tile_oc\", \"sp\", [1, 64]], [\"tile_ow\", \"sp\", [28, 4]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[9.7808883e-05], 0, 1.138369083404541, 1535505799.372973], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 64, 56, 56], \"float32\"], [\"TENSOR\", [64, 64, 3, 3], \"float32\"], 64, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 64, 56, 56, \"float32\"], [64, 64, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 139, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [1, 64]], [\"tile_oc\", \"sp\", [2, 32]], [\"tile_ow\", \"sp\", [14, 4]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.0001027261465], 0, 1.166485071182251, 1535509104.953128], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 64, 56, 56], \"float32\"], [\"TENSOR\", [64, 64, 3, 3], \"float32\"], 64, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 64, 56, 56, \"float32\"], [64, 64, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 96, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [2, 32]], [\"tile_oc\", \"sp\", [1, 64]], [\"tile_ow\", \"sp\", [28, 2]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.00010640119299999999], 0, 1.223567008972168, 1535508795.96213], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 64, 56, 56], \"float32\"], [\"TENSOR\", [64, 64, 3, 3], \"float32\"], 64, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 64, 56, 56, \"float32\"], [64, 64, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 139, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [1, 64]], [\"tile_oc\", \"sp\", [2, 32]], [\"tile_ow\", \"sp\", [14, 4]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.0001027261465], 0, 1.166485071182251, 1535509104.953128], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 64, 56, 56], \"float32\"], [\"TENSOR\", [64, 64, 3, 3], \"float32\"], 64, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 64, 56, 56, \"float32\"], [64, 64, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 96, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [2, 32]], [\"tile_oc\", \"sp\", [1, 64]], [\"tile_ow\", \"sp\", [28, 2]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.00010640119299999999], 0, 1.223567008972168, 1535508795.96213], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 64, 56, 56], \"float32\"], [\"TENSOR\", [128, 64, 1, 1], \"float32\"], 64, [1, 1], [2, 2], [0, 0], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 64, 56, 56, \"float32\"], [128, 64, 1, 1, \"float32\"], [2, 2], [0, 0], \"NCHW\", \"float32\"], {\"i\": 209, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [1, 64]], [\"tile_oc\", \"sp\", [4, 32]], [\"tile_ow\", \"sp\", [4, 7]], [\"tile_oh\", \"ot\", 1]], \"t\": \"\"}], \"r\": [[8.558321500000001e-06], 0, 0.20387506484985352, 1535523457.846529], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 64, 56, 56], \"float32\"], [\"TENSOR\", [128, 64, 3, 3], \"float32\"], 64, [3, 3], [2, 2], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 64, 56, 56, \"float32\"], [128, 64, 3, 3, \"float32\"], [2, 2], [1, 1], \"NCHW\", \"float32\"], {\"i\": 447, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [1, 64]], [\"tile_oc\", \"sp\", [1, 128]], [\"tile_ow\", \"sp\", [14, 2]], [\"unroll_kw\", \"ot\", false]], \"t\": \"\"}], \"r\": [[6.20716565e-05], 0, 0.7738749980926514, 1535516294.860449], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 128, 28, 28], \"float32\"], [\"TENSOR\", [128, 128, 3, 3], \"float32\"], 128, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 128, 28, 28, \"float32\"], [128, 128, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 175, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [1, 128]], [\"tile_oc\", \"sp\", [4, 32]], [\"tile_ow\", \"sp\", [7, 4]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.00010006059279999999], 0, 1.1714038848876953, 1535519139.417935], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 128, 28, 28], \"float32\"], [\"TENSOR\", [128, 128, 3, 3], \"float32\"], 128, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 128, 28, 28, \"float32\"], [128, 128, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 509, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [4, 32]], [\"tile_oc\", \"sp\", [1, 128]], [\"tile_ow\", \"sp\", [14, 2]], [\"unroll_kw\", \"ot\", false]], \"t\": \"\"}], \"r\": [[0.0001036367829], 0, 1.2258639335632324, 1535521977.144608], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 128, 28, 28], \"float32\"], [\"TENSOR\", [128, 128, 3, 3], \"float32\"], 128, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 128, 28, 28, \"float32\"], [128, 128, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 175, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [1, 128]], [\"tile_oc\", \"sp\", [4, 32]], [\"tile_ow\", \"sp\", [7, 4]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.00010006059279999999], 0, 1.1714038848876953, 1535519139.417935], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 128, 28, 28], \"float32\"], [\"TENSOR\", [256, 128, 1, 1], \"float32\"], 128, [1, 1], [2, 2], [0, 0], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 128, 28, 28, \"float32\"], [256, 128, 1, 1, \"float32\"], [2, 2], [0, 0], \"NCHW\", \"float32\"], {\"i\": 133, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [4, 32]], [\"tile_oc\", \"sp\", [2, 128]], [\"tile_ow\", \"sp\", [7, 2]], [\"tile_oh\", \"ot\", 1]], \"t\": \"\"}], \"r\": [[7.8310528e-06], 0, 0.22060489654541016, 1535532290.707203], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 128, 28, 28], \"float32\"], [\"TENSOR\", [256, 128, 3, 3], \"float32\"], 128, [3, 3], [2, 2], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 128, 28, 28, \"float32\"], [256, 128, 3, 3, \"float32\"], [2, 2], [1, 1], \"NCHW\", \"float32\"], {\"i\": 133, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [4, 32]], [\"tile_oc\", \"sp\", [2, 128]], [\"tile_ow\", \"sp\", [7, 2]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[5.92470041e-05], 0, 0.7696590423583984, 1535524742.028239], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 256, 14, 14], \"float32\"], [\"TENSOR\", [256, 256, 3, 3], \"float32\"], 256, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 256, 14, 14, \"float32\"], [256, 256, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 475, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [2, 128]], [\"tile_oc\", \"sp\", [2, 128]], [\"tile_ow\", \"sp\", [7, 2]], [\"unroll_kw\", \"ot\", false]], \"t\": \"\"}], \"r\": [[0.0001025999385], 0, 1.2034080028533936, 1535531394.87406], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 256, 14, 14], \"float32\"], [\"TENSOR\", [256, 256, 3, 3], \"float32\"], 256, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 256, 14, 14, \"float32\"], [256, 256, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 475, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [2, 128]], [\"tile_oc\", \"sp\", [2, 128]], [\"tile_ow\", \"sp\", [7, 2]], [\"unroll_kw\", \"ot\", false]], \"t\": \"\"}], \"r\": [[0.0001025999385], 0, 1.2034080028533936, 1535531394.87406], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 256, 14, 14], \"float32\"], [\"TENSOR\", [256, 256, 3, 3], \"float32\"], 256, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 256, 14, 14, \"float32\"], [256, 256, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 475, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [2, 128]], [\"tile_oc\", \"sp\", [2, 128]], [\"tile_ow\", \"sp\", [7, 2]], [\"unroll_kw\", \"ot\", false]], \"t\": \"\"}], \"r\": [[0.0001025999385], 0, 1.2034080028533936, 1535531394.87406], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 256, 14, 14], \"float32\"], [\"TENSOR\", [512, 256, 1, 1], \"float32\"], 256, [1, 1], [2, 2], [0, 0], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 256, 14, 14, \"float32\"], [512, 256, 1, 1, \"float32\"], [2, 2], [0, 0], \"NCHW\", \"float32\"], {\"i\": 142, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [2, 128]], [\"tile_oc\", \"sp\", [16, 32]], [\"tile_ow\", \"sp\", [1, 7]], [\"tile_oh\", \"ot\", 1]], \"t\": \"\"}], \"r\": [[7.6947802e-06], 0, 0.18447494506835938, 1535539846.239089], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 256, 14, 14], \"float32\"], [\"TENSOR\", [512, 256, 3, 3], \"float32\"], 256, [3, 3], [2, 2], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 256, 14, 14, \"float32\"], [512, 256, 3, 3, \"float32\"], [2, 2], [1, 1], \"NCHW\", \"float32\"], {\"i\": 133, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [2, 128]], [\"tile_oc\", \"sp\", [32, 16]], [\"tile_ow\", \"sp\", [1, 7]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[7.73579001e-05], 0, 0.9138240814208984, 1535533580.560437], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 512, 7, 7], \"float32\"], [\"TENSOR\", [512, 512, 3, 3], \"float32\"], 512, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 512, 7, 7, \"float32\"], [512, 512, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 154, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [32, 16]], [\"tile_oc\", \"sp\", [16, 32]], [\"tile_ow\", \"sp\", [1, 7]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.0001014149207], 0, 1.1709089279174805, 1535537031.453512], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 512, 7, 7], \"float32\"], [\"TENSOR\", [512, 512, 3, 3], \"float32\"], 512, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 512, 7, 7, \"float32\"], [512, 512, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 155, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [16, 32]], [\"tile_oc\", \"sp\", [16, 32]], [\"tile_ow\", \"sp\", [1, 7]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.0001060334912], 0, 1.224541187286377, 1535537032.803111], \"v\": 0.1}\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 512, 7, 7], \"float32\"], [\"TENSOR\", [512, 512, 3, 3], \"float32\"], 512, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 512, 7, 7, \"float32\"], [512, 512, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 155, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [16, 32]], [\"tile_oc\", \"sp\", [16, 32]], [\"tile_ow\", \"sp\", [1, 7]], [\"unroll_kw\", \"ot\", true]], \"t\": \"\"}], \"r\": [[0.0001060334912], 0, 1.224541187286377, 1535537032.803111], \"v\": 0.1}\r\n```\r\nMost of them can't match with pure tvm execution time.\r\nI use this script to verify:\r\n```python\r\nimport logging\r\nimport sys\r\nimport time\r\n\r\nimport numpy as np\r\nimport nnvm\r\nimport tvm\r\nimport topi\r\n\r\nfrom tvm import autotvm\r\nfrom tvm.autotvm.task import register, get_config\r\nfrom tvm.autotvm.task.nnvm_integration import deserialize_args\r\nfrom tvm.autotvm.record import load_from_file\r\nfrom tvm.autotvm.util import get_const_tuple\r\nfrom nnvm import symbol as sym\r\nfrom tvm.contrib import graph_runtime\r\nfrom nnvm.testing.utils import create_workload\r\nfrom mxnet.gluon.model_zoo.vision import get_model\r\n\r\ndef helper(cfg, *args):\r\n    data, kernel = args[:2]\r\n    kernel_size = args[3]\r\n    strides = args[4]\r\n    padding = args[5]\r\n    layout = args[6]\r\n    kh, kw = kernel_size if isinstance(kernel_size, (tuple, list)\r\n                                       ) else (kernel_size, kernel_size)\r\n    is_kernel_1x1 = kh == 1 and kw == 1\r\n    raw_data_shape = get_const_tuple(data[1])\r\n    raw_kernel_shape = get_const_tuple(kernel[1])\r\n\r\n    # change shape with the value in config\r\n    ic_bn, oc_bn, ow_bn = (cfg[\"tile_ic\"].size[-1], cfg[\"tile_oc\"].size[-1],\r\n                           cfg[\"tile_ow\"].size[-1])\r\n    new_data_shape = (raw_data_shape[0], raw_data_shape[1] // ic_bn,\r\n                      raw_data_shape[2], raw_data_shape[3], ic_bn)\r\n    data_layout = \"NCHW%dc\" % ic_bn\r\n    out_layout = \"NCHW%dc\" % oc_bn\r\n    if is_kernel_1x1:\r\n        new_kernel_shape = (raw_kernel_shape[0] // oc_bn, raw_kernel_shape[1] // ic_bn,\r\n                            ic_bn, oc_bn, raw_kernel_shape[2], raw_kernel_shape[3])\r\n    else:\r\n        new_kernel_shape = (raw_kernel_shape[0] // oc_bn, raw_kernel_shape[1] // ic_bn,\r\n                            raw_kernel_shape[2], raw_kernel_shape[3], ic_bn, oc_bn)\r\n    data = tvm.placeholder(new_data_shape, args[-1])\r\n    kernel = tvm.placeholder(new_kernel_shape, args[-1])\r\n\r\n    C = topi.x86.conv2d._declaration_conv_NCHWc(cfg, data, kernel, args[2], args[3], args[4], args[5],\r\n                                data_layout, out_layout, args[-1])\r\n    s = topi.x86.conv2d._schedule_conv2d_NCHWc(cfg, args[2], args[3], args[4], args[5],\r\n                              data_layout, out_layout, [C])\r\n    return s, [data, kernel, C]\r\n\r\ntarget = \"llvm -mcpu=skylake-avx512\"\r\nctx = tvm.cpu()\r\na = load_from_file(\"resnet18_opt.log\")\r\nt = 0\r\n\r\nfor i, o in a:\r\n    args = i.task.args\r\n    print(args)\r\n    cfg = i.config\r\n    print(cfg)\r\n    print(\"Autotvm time: %f\" % (o.costs[0] * 1000))\r\n    s, ts = helper(cfg, *args)\r\n    data, kernel, out = ts\r\n    f = tvm.build(s, [data, kernel, out], target)\r\n    d = tvm.nd.array(np.random.uniform(size=get_const_tuple(data.shape)).astype(\"float32\"), ctx)\r\n    k = tvm.nd.array(np.random.uniform(size=get_const_tuple(kernel.shape)).astype(\"float32\"), ctx)\r\n    o = tvm.nd.array(np.zeros(get_const_tuple(out.shape)).astype(\"float32\"), ctx)\r\n    f_t = f.time_evaluator(\r\n            f.entry_name, ctx, number=10000, repeat=1)\r\n    cost = f_t(d, k, o).results[0]\r\n    print(\"Actual time: %f\" % (cost * 1000))\r\n    t += cost * 1000\r\n    print(\"\\n\")\r\n\r\nprint(t)\r\n```","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417447966/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417489776","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417489776","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417489776,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQ4OTc3Ng==","user":{"login":"kevinthesun","id":15520525,"node_id":"MDQ6VXNlcjE1NTIwNTI1","avatar_url":"https://avatars.githubusercontent.com/u/15520525?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinthesun","html_url":"https://github.com/kevinthesun","followers_url":"https://api.github.com/users/kevinthesun/followers","following_url":"https://api.github.com/users/kevinthesun/following{/other_user}","gists_url":"https://api.github.com/users/kevinthesun/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinthesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinthesun/subscriptions","organizations_url":"https://api.github.com/users/kevinthesun/orgs","repos_url":"https://api.github.com/users/kevinthesun/repos","events_url":"https://api.github.com/users/kevinthesun/events{/privacy}","received_events_url":"https://api.github.com/users/kevinthesun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T22:37:27Z","updated_at":"2018-08-30T22:37:27Z","author_association":"CONTRIBUTOR","body":"This is a good chance to look at data layout system. I think @yzhliu is currently working on refactoring layout in TVM: https://discuss.tvm.ai/t/datalayout-structure/80 \r\n\r\nTo enable graph level optimization, every operator will require layout information. Maybe we can considering adding it Relay type system.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417489776/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417499901","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417499901","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417499901,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzQ5OTkwMQ==","user":{"login":"zheng-da","id":70481,"node_id":"MDQ6VXNlcjcwNDgx","avatar_url":"https://avatars.githubusercontent.com/u/70481?v=4","gravatar_id":"","url":"https://api.github.com/users/zheng-da","html_url":"https://github.com/zheng-da","followers_url":"https://api.github.com/users/zheng-da/followers","following_url":"https://api.github.com/users/zheng-da/following{/other_user}","gists_url":"https://api.github.com/users/zheng-da/gists{/gist_id}","starred_url":"https://api.github.com/users/zheng-da/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zheng-da/subscriptions","organizations_url":"https://api.github.com/users/zheng-da/orgs","repos_url":"https://api.github.com/users/zheng-da/repos","events_url":"https://api.github.com/users/zheng-da/events{/privacy}","received_events_url":"https://api.github.com/users/zheng-da/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T23:26:42Z","updated_at":"2018-08-30T23:26:42Z","author_association":"CONTRIBUTOR","body":"@junrushao1994 when i look at the type system (in the Relay paper), it supports Base type, shape, Tensor, function, type, reference, tuple. Do you suggest representing the data structure for any arbitrary external library with the Relay type system? For example, MKLDNN requires some data structure like `mkldnn::memory::primitive_desc`. It's a class that contains std shared_ptr. It's probably doable to store this data structure in Relay, but it might be more convenient to support something like OpaqueType for arbitrary operator states.\r\n\r\nThe other problem is that these external libraries may change the state after each invocation. However, we don't know if they really change or how they change the states. Therefore, the operator can't be pure functional. Does Relay need to deal with it?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417499901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417503625","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417503625","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417503625,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzUwMzYyNQ==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-30T23:47:41Z","updated_at":"2018-08-30T23:47:41Z","author_association":"MEMBER","body":"I added a smarter fallback mechanism. For untuned shapes, tvm will find the most similar tuned shape from TopHub and mimic its tiling strategy. This mechanism works well. Now we can run all backends with any shape, batch in a reasonable speed.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417503625/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417509630","html_url":"https://github.com/apache/tvm/pull/1663#issuecomment-417509630","issue_url":"https://api.github.com/repos/apache/tvm/issues/1663","id":417509630,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzUwOTYzMA==","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T00:21:59Z","updated_at":"2018-08-31T00:21:59Z","author_association":"CONTRIBUTOR","body":"I think that HLS is meant quite broadly here as High Level Synthesis, it does not necessarily refer to C/C++ back-ends (that differ from OpenCL ones). ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417509630/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417517230","html_url":"https://github.com/apache/tvm/pull/1680#issuecomment-417517230","issue_url":"https://api.github.com/repos/apache/tvm/issues/1680","id":417517230,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzUxNzIzMA==","user":{"login":"anijain2305","id":13822661,"node_id":"MDQ6VXNlcjEzODIyNjYx","avatar_url":"https://avatars.githubusercontent.com/u/13822661?v=4","gravatar_id":"","url":"https://api.github.com/users/anijain2305","html_url":"https://github.com/anijain2305","followers_url":"https://api.github.com/users/anijain2305/followers","following_url":"https://api.github.com/users/anijain2305/following{/other_user}","gists_url":"https://api.github.com/users/anijain2305/gists{/gist_id}","starred_url":"https://api.github.com/users/anijain2305/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anijain2305/subscriptions","organizations_url":"https://api.github.com/users/anijain2305/orgs","repos_url":"https://api.github.com/users/anijain2305/repos","events_url":"https://api.github.com/users/anijain2305/events{/privacy}","received_events_url":"https://api.github.com/users/anijain2305/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T01:09:59Z","updated_at":"2018-08-31T01:09:59Z","author_association":"CONTRIBUTOR","body":"@yidawang @yzhliu @zhiics Please review. Also please feel free to add other reviewers who might be interested. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417517230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417546483","html_url":"https://github.com/apache/tvm/pull/1680#issuecomment-417546483","issue_url":"https://api.github.com/repos/apache/tvm/issues/1680","id":417546483,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzU0NjQ4Mw==","user":{"login":"FrozenGene","id":7287321,"node_id":"MDQ6VXNlcjcyODczMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7287321?v=4","gravatar_id":"","url":"https://api.github.com/users/FrozenGene","html_url":"https://github.com/FrozenGene","followers_url":"https://api.github.com/users/FrozenGene/followers","following_url":"https://api.github.com/users/FrozenGene/following{/other_user}","gists_url":"https://api.github.com/users/FrozenGene/gists{/gist_id}","starred_url":"https://api.github.com/users/FrozenGene/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FrozenGene/subscriptions","organizations_url":"https://api.github.com/users/FrozenGene/orgs","repos_url":"https://api.github.com/users/FrozenGene/repos","events_url":"https://api.github.com/users/FrozenGene/events{/privacy}","received_events_url":"https://api.github.com/users/FrozenGene/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T04:07:00Z","updated_at":"2018-08-31T04:07:00Z","author_association":"MEMBER","body":"@yzhliu Could we start to convert x86 cpu schedule into auto tvm? I think we can leverage arm cpu auto tvm template. Then like this PR, we could avoid add workload manually. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417546483/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417553501","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417553501","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417553501,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzU1MzUwMQ==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T05:11:02Z","updated_at":"2018-08-31T05:31:15Z","author_association":"MEMBER","body":"@zheng-da Relay has some notion to track effects, so why not you guys put these arbitrary stuff inside something like a `PackedFunc`?\r\n\r\nUpdate: as @MarisaKirisame mentioned, I am wrong. Please just ignore this reply.\r\n\r\n> @junrushao1994 when i look at the type system (in the Relay paper), it supports Base type, shape, Tensor, function, type, reference, tuple. Do you suggest representing the data structure for any arbitrary external library with the Relay type system? For example, MKLDNN requires some data structure like mkldnn::memory::primitive_desc. It's a class that contains std shared_ptr. It's probably doable to store this data structure in Relay, but it might be more convenient to support something like OpaqueType for arbitrary operator states.\r\n>\r\n> The other problem is that these external libraries may change the state after each invocation. However, we don't know if they really change or how they change the states. Therefore, the operator can't be pure functional. Does Relay need to deal with it?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417553501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417554040","html_url":"https://github.com/apache/tvm/pull/1680#issuecomment-417554040","issue_url":"https://api.github.com/repos/apache/tvm/issues/1680","id":417554040,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzU1NDA0MA==","user":{"login":"yidawang","id":4458509,"node_id":"MDQ6VXNlcjQ0NTg1MDk=","avatar_url":"https://avatars.githubusercontent.com/u/4458509?v=4","gravatar_id":"","url":"https://api.github.com/users/yidawang","html_url":"https://github.com/yidawang","followers_url":"https://api.github.com/users/yidawang/followers","following_url":"https://api.github.com/users/yidawang/following{/other_user}","gists_url":"https://api.github.com/users/yidawang/gists{/gist_id}","starred_url":"https://api.github.com/users/yidawang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yidawang/subscriptions","organizations_url":"https://api.github.com/users/yidawang/orgs","repos_url":"https://api.github.com/users/yidawang/repos","events_url":"https://api.github.com/users/yidawang/events{/privacy}","received_events_url":"https://api.github.com/users/yidawang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T05:14:58Z","updated_at":"2018-08-31T05:14:58Z","author_association":"CONTRIBUTOR","body":"@FrozenGene We are indeed working on applying auto tvm to x86 cpus. This PR is about INT8 quantization, using intrinsics provided by avx-512 bw, which is potentially applicable to auto tvm as well but we still need to anyway set it up manually first.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417554040/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417554102","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417554102","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417554102,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzU1NDEwMg==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T05:15:28Z","updated_at":"2018-08-31T05:16:18Z","author_association":"MEMBER","body":"@kevinthesun Hey Yao, could you kindly share more thoughts about what information you think must be put into the type system? It will be very helpful!\r\n\r\n> This is a good chance to look at data layout system. I think @yzhliu is currently working on refactoring layout in TVM: https://discuss.tvm.ai/t/datalayout-structure/80\r\n> \r\n> To enable graph level optimization, every operator will require layout information. Maybe we can considering adding it Relay type system.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417554102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417554459","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417554459","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417554459,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzU1NDQ1OQ==","user":{"login":"MarisaKirisame","id":3397377,"node_id":"MDQ6VXNlcjMzOTczNzc=","avatar_url":"https://avatars.githubusercontent.com/u/3397377?v=4","gravatar_id":"","url":"https://api.github.com/users/MarisaKirisame","html_url":"https://github.com/MarisaKirisame","followers_url":"https://api.github.com/users/MarisaKirisame/followers","following_url":"https://api.github.com/users/MarisaKirisame/following{/other_user}","gists_url":"https://api.github.com/users/MarisaKirisame/gists{/gist_id}","starred_url":"https://api.github.com/users/MarisaKirisame/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarisaKirisame/subscriptions","organizations_url":"https://api.github.com/users/MarisaKirisame/orgs","repos_url":"https://api.github.com/users/MarisaKirisame/repos","events_url":"https://api.github.com/users/MarisaKirisame/events{/privacy}","received_events_url":"https://api.github.com/users/MarisaKirisame/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T05:18:14Z","updated_at":"2018-08-31T05:18:14Z","author_association":"CONTRIBUTOR","body":"@junrushao1994 we hasnt settle on any effect system yet. We would love to know what actual use case is there!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417554459/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417555910","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417555910","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417555910,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzU1NTkxMA==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T05:28:52Z","updated_at":"2018-08-31T05:29:26Z","author_association":"MEMBER","body":"@MarisaKirisame This is the concern raised from colleagues working on external library integration, as mentioned by @zheng-da.\r\n\r\n> @junrushao1994 we hasnt settle on any effect system yet. We would love to know what actual use case is there!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417555910/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417568956","html_url":"https://github.com/apache/tvm/pull/1663#issuecomment-417568956","issue_url":"https://api.github.com/repos/apache/tvm/issues/1663","id":417568956,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzU2ODk1Ng==","user":{"login":"kazum","id":812126,"node_id":"MDQ6VXNlcjgxMjEyNg==","avatar_url":"https://avatars.githubusercontent.com/u/812126?v=4","gravatar_id":"","url":"https://api.github.com/users/kazum","html_url":"https://github.com/kazum","followers_url":"https://api.github.com/users/kazum/followers","following_url":"https://api.github.com/users/kazum/following{/other_user}","gists_url":"https://api.github.com/users/kazum/gists{/gist_id}","starred_url":"https://api.github.com/users/kazum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kazum/subscriptions","organizations_url":"https://api.github.com/users/kazum/orgs","repos_url":"https://api.github.com/users/kazum/repos","events_url":"https://api.github.com/users/kazum/events{/privacy}","received_events_url":"https://api.github.com/users/kazum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T06:47:52Z","updated_at":"2018-08-31T06:47:52Z","author_association":"CONTRIBUTOR","body":"Yes. The scheduler I added in this PR has no optimization, so the targets are any kinds of HLS backends including OpenCL based ones.  We can implement, e.g., C/C++ HLS specific optimization on top of it in future.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417568956/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417631655","html_url":"https://github.com/apache/tvm/issues/1676#issuecomment-417631655","issue_url":"https://api.github.com/repos/apache/tvm/issues/1676","id":417631655,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzYzMTY1NQ==","user":{"login":"srkreddy1238","id":14215163,"node_id":"MDQ6VXNlcjE0MjE1MTYz","avatar_url":"https://avatars.githubusercontent.com/u/14215163?v=4","gravatar_id":"","url":"https://api.github.com/users/srkreddy1238","html_url":"https://github.com/srkreddy1238","followers_url":"https://api.github.com/users/srkreddy1238/followers","following_url":"https://api.github.com/users/srkreddy1238/following{/other_user}","gists_url":"https://api.github.com/users/srkreddy1238/gists{/gist_id}","starred_url":"https://api.github.com/users/srkreddy1238/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/srkreddy1238/subscriptions","organizations_url":"https://api.github.com/users/srkreddy1238/orgs","repos_url":"https://api.github.com/users/srkreddy1238/repos","events_url":"https://api.github.com/users/srkreddy1238/events{/privacy}","received_events_url":"https://api.github.com/users/srkreddy1238/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T11:08:15Z","updated_at":"2018-08-31T11:08:15Z","author_association":"CONTRIBUTOR","body":"Renaming is intended while pruning any compute node and we shouldn't retain the original param name here.\r\n\r\nNew name is necessary as if  ```there is two compute nodes get's pruned out of same param``` the final param nodes should go with different names than initial param name.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417631655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417636230","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417636230","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417636230,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzYzNjIzMA==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T11:29:00Z","updated_at":"2018-08-31T11:49:33Z","author_association":"MEMBER","body":"The default repeat for `LocalRunner` is 3, and it will remove the largest and smallest result\r\nhttps://github.com/dmlc/tvm/blob/0c523787297039ce00b320c1d32e022e61e97ac2/python/tvm/autotvm/measure/measure_methods.py#L465-L469\r\n\r\nOne quick verification you can try is to change your time evaluator part in your check script with the following code. Now the check script uses the exactly same setting in `LocalRunner` \r\n```python\r\n    f = tvm.build(s, [data, kernel, out], target)\r\n    d = tvm.nd.array(np.random.uniform(size=get_const_tuple(data.shape)).astype(\"float32\"), ctx)\r\n    k = tvm.nd.array(np.random.uniform(size=get_const_tuple(kernel.shape)).astype(\"float32\"), ctx)\r\n    output = tvm.nd.array(np.zeros(get_const_tuple(out.shape)).astype(\"float32\"), ctx)\r\n\r\n    number = int(1.5 / o.costs[0])     # adjust number\r\n    f_t = f.time_evaluator(f.entry_name, ctx, number=number, repeat=3)\r\n    cost = list(f_t(d, k, output).results)\r\n    cost.sort()\r\n    cost = cost[1]   # remove largest and smallest.\r\n    print(\"Actual time: %f\" % (cost * 1000))\r\n```\r\n\r\n\r\n\r\nI run your code on a 16-core AMD ThreadRipper. The autotvm results match your check script for kernels that run < 0.1ms. (without changing repeat setting)\r\nI have sent the limit increase request on AWS. Once I have access to c5.9xlarge instance, I can verify this on c5.9xlarge instance.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417636230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417648024","html_url":"https://github.com/apache/tvm/pull/1664#issuecomment-417648024","issue_url":"https://api.github.com/repos/apache/tvm/issues/1664","id":417648024,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzY0ODAyNA==","user":{"login":"FrozenGene","id":7287321,"node_id":"MDQ6VXNlcjcyODczMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7287321?v=4","gravatar_id":"","url":"https://api.github.com/users/FrozenGene","html_url":"https://github.com/FrozenGene","followers_url":"https://api.github.com/users/FrozenGene/followers","following_url":"https://api.github.com/users/FrozenGene/following{/other_user}","gists_url":"https://api.github.com/users/FrozenGene/gists{/gist_id}","starred_url":"https://api.github.com/users/FrozenGene/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FrozenGene/subscriptions","organizations_url":"https://api.github.com/users/FrozenGene/orgs","repos_url":"https://api.github.com/users/FrozenGene/repos","events_url":"https://api.github.com/users/FrozenGene/events{/privacy}","received_events_url":"https://api.github.com/users/FrozenGene/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T12:25:28Z","updated_at":"2018-08-31T12:25:28Z","author_association":"MEMBER","body":"@tqchen @yzhliu Could you help to merge this? Thanks.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417648024/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417705750","html_url":"https://github.com/apache/tvm/issues/1676#issuecomment-417705750","issue_url":"https://api.github.com/repos/apache/tvm/issues/1676","id":417705750,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzcwNTc1MA==","user":{"login":"reminisce","id":4978794,"node_id":"MDQ6VXNlcjQ5Nzg3OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/4978794?v=4","gravatar_id":"","url":"https://api.github.com/users/reminisce","html_url":"https://github.com/reminisce","followers_url":"https://api.github.com/users/reminisce/followers","following_url":"https://api.github.com/users/reminisce/following{/other_user}","gists_url":"https://api.github.com/users/reminisce/gists{/gist_id}","starred_url":"https://api.github.com/users/reminisce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reminisce/subscriptions","organizations_url":"https://api.github.com/users/reminisce/orgs","repos_url":"https://api.github.com/users/reminisce/repos","events_url":"https://api.github.com/users/reminisce/events{/privacy}","received_events_url":"https://api.github.com/users/reminisce/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T15:46:20Z","updated_at":"2018-08-31T15:46:20Z","author_association":"CONTRIBUTOR","body":"@srkreddy1238 Thanks for the reply. I understand in some cases the names have to be changed. In my case, there is nothing to prune, and pruning pass just replaces a param node with a newly created param node of a new name, but does not generate a precompute graph since `non_var_edge` is 0. So the loaded param map cannot be updated because there is no precompute graph to generate output names. This results in name mismatch between the loaded param map and and the graph input names. This looks more like a bug to me. Please correct me if my understanding is wrong. Thanks.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417705750/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417706914","html_url":"https://github.com/apache/tvm/issues/1676#issuecomment-417706914","issue_url":"https://api.github.com/repos/apache/tvm/issues/1676","id":417706914,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzcwNjkxNA==","user":{"login":"srkreddy1238","id":14215163,"node_id":"MDQ6VXNlcjE0MjE1MTYz","avatar_url":"https://avatars.githubusercontent.com/u/14215163?v=4","gravatar_id":"","url":"https://api.github.com/users/srkreddy1238","html_url":"https://github.com/srkreddy1238","followers_url":"https://api.github.com/users/srkreddy1238/followers","following_url":"https://api.github.com/users/srkreddy1238/following{/other_user}","gists_url":"https://api.github.com/users/srkreddy1238/gists{/gist_id}","starred_url":"https://api.github.com/users/srkreddy1238/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/srkreddy1238/subscriptions","organizations_url":"https://api.github.com/users/srkreddy1238/orgs","repos_url":"https://api.github.com/users/srkreddy1238/repos","events_url":"https://api.github.com/users/srkreddy1238/events{/privacy}","received_events_url":"https://api.github.com/users/srkreddy1238/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T15:49:43Z","updated_at":"2018-08-31T15:49:43Z","author_association":"CONTRIBUTOR","body":"Can you share the front end model if not private ?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417706914/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417713141","html_url":"https://github.com/apache/tvm/issues/1676#issuecomment-417713141","issue_url":"https://api.github.com/repos/apache/tvm/issues/1676","id":417713141,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzcxMzE0MQ==","user":{"login":"reminisce","id":4978794,"node_id":"MDQ6VXNlcjQ5Nzg3OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/4978794?v=4","gravatar_id":"","url":"https://api.github.com/users/reminisce","html_url":"https://github.com/reminisce","followers_url":"https://api.github.com/users/reminisce/followers","following_url":"https://api.github.com/users/reminisce/following{/other_user}","gists_url":"https://api.github.com/users/reminisce/gists{/gist_id}","starred_url":"https://api.github.com/users/reminisce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reminisce/subscriptions","organizations_url":"https://api.github.com/users/reminisce/orgs","repos_url":"https://api.github.com/users/reminisce/repos","events_url":"https://api.github.com/users/reminisce/events{/privacy}","received_events_url":"https://api.github.com/users/reminisce/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T16:10:49Z","updated_at":"2018-08-31T16:10:49Z","author_association":"CONTRIBUTOR","body":"Yes, here is my [dev branch](https://github.com/reminisce/tvm/tree/subgraph_integration) for running the following script. I introduced a subgraph operator here that contains a subgraph of the whole graph. The subgraph operator is not optimized by the compiler and is backed up by an external accelerator at runtime.\r\n\r\nI added a check at this line to skip replacing var entries and the following script can print the same input names of params and graph.\r\nhttps://github.com/reminisce/tvm/blob/subgraph_integration/nnvm/src/compiler/precompute_prune.cc#L71\r\n\r\n\r\n```python\r\nimport numpy as np\r\nimport tvm\r\nimport nnvm\r\nfrom tvm.contrib import graph_runtime\r\nfrom nnvm.testing.utils import create_workload\r\n\r\n\r\ndef test_tvm_compile():\r\n    batch_size = 1\r\n    image_shape = (1, 4, 4)\r\n    data_shape = (batch_size,) + image_shape\r\n    data = nnvm.symbol.Variable('data')\r\n    data = nnvm.symbol.batch_norm(data=data, epsilon=2e-5, scale=False, name='bn_data')\r\n    sym = nnvm.symbol.exp(data)\r\n\r\n    with open('./original_simple_graph.json', 'w') as fo:\r\n        fo.write(nnvm.graph.create(sym).json())\r\n\r\n    opt_level = 3\r\n    op_names = ['batch_norm']\r\n    sym = nnvm.symbol.partition_by_names(sym, 'tensorrt', op_names)\r\n    with open('./partitioned_simple_graph.json', 'w') as fo:\r\n        fo.write(nnvm.graph.create(sym).json())\r\n\r\n    target = tvm.target.create('llvm')\r\n    _, params = create_workload(sym, batch_size, image_shape)\r\n    print(sym.list_input_names())\r\n    with nnvm.compiler.build_config(opt_level=opt_level):\r\n        graph, lib, params = nnvm.compiler.build(sym, target, shape={'data': data_shape}, params=params)\r\n    print(graph.symbol().list_input_names())\r\n    print(params.keys())\r\n    with open('./partitioned_optimized_simple_graph.json', \"w\") as fo:\r\n        fo.write(graph.json())\r\n```","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417713141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417722672","html_url":"https://github.com/apache/tvm/pull/1680#issuecomment-417722672","issue_url":"https://api.github.com/repos/apache/tvm/issues/1680","id":417722672,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzcyMjY3Mg==","user":{"login":"yidawang","id":4458509,"node_id":"MDQ6VXNlcjQ0NTg1MDk=","avatar_url":"https://avatars.githubusercontent.com/u/4458509?v=4","gravatar_id":"","url":"https://api.github.com/users/yidawang","html_url":"https://github.com/yidawang","followers_url":"https://api.github.com/users/yidawang/followers","following_url":"https://api.github.com/users/yidawang/following{/other_user}","gists_url":"https://api.github.com/users/yidawang/gists{/gist_id}","starred_url":"https://api.github.com/users/yidawang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yidawang/subscriptions","organizations_url":"https://api.github.com/users/yidawang/orgs","repos_url":"https://api.github.com/users/yidawang/repos","events_url":"https://api.github.com/users/yidawang/events{/privacy}","received_events_url":"https://api.github.com/users/yidawang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T16:42:09Z","updated_at":"2018-08-31T16:42:09Z","author_association":"CONTRIBUTOR","body":"@anijain2305 Can you edit the PR description to put the preliminary performance results on?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417722672/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417735278","html_url":"https://github.com/apache/tvm/pull/1680#issuecomment-417735278","issue_url":"https://api.github.com/repos/apache/tvm/issues/1680","id":417735278,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzczNTI3OA==","user":{"login":"anijain2305","id":13822661,"node_id":"MDQ6VXNlcjEzODIyNjYx","avatar_url":"https://avatars.githubusercontent.com/u/13822661?v=4","gravatar_id":"","url":"https://api.github.com/users/anijain2305","html_url":"https://github.com/anijain2305","followers_url":"https://api.github.com/users/anijain2305/followers","following_url":"https://api.github.com/users/anijain2305/following{/other_user}","gists_url":"https://api.github.com/users/anijain2305/gists{/gist_id}","starred_url":"https://api.github.com/users/anijain2305/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anijain2305/subscriptions","organizations_url":"https://api.github.com/users/anijain2305/orgs","repos_url":"https://api.github.com/users/anijain2305/repos","events_url":"https://api.github.com/users/anijain2305/events{/privacy}","received_events_url":"https://api.github.com/users/anijain2305/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T17:25:51Z","updated_at":"2018-08-31T17:25:51Z","author_association":"CONTRIBUTOR","body":"Thanks @yidawang for the comments :) I will start working on them","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417735278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417737131","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417737131","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417737131,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzczNzEzMQ==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T17:33:00Z","updated_at":"2018-08-31T17:33:00Z","author_association":"MEMBER","body":"@nishi-t @eqy  please review","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417737131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417737984","html_url":"https://github.com/apache/tvm/pull/1664#issuecomment-417737984","issue_url":"https://api.github.com/repos/apache/tvm/issues/1664","id":417737984,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzczNzk4NA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T17:36:13Z","updated_at":"2018-08-31T17:36:13Z","author_association":"MEMBER","body":"Thanks @FrozenGene @merrymercy this is now merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417737984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417738342","html_url":"https://github.com/apache/tvm/pull/1680#issuecomment-417738342","issue_url":"https://api.github.com/repos/apache/tvm/issues/1680","id":417738342,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzczODM0Mg==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T17:37:35Z","updated_at":"2018-08-31T17:37:35Z","author_association":"MEMBER","body":"cc @ajtulloch @eqy @cowanmeg ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417738342/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417738495","html_url":"https://github.com/apache/tvm/issues/1679#issuecomment-417738495","issue_url":"https://api.github.com/repos/apache/tvm/issues/1679","id":417738495,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzczODQ5NQ==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T17:38:12Z","updated_at":"2018-08-31T17:38:12Z","author_association":"MEMBER","body":"please open a thread at https://discuss.tvm.ai/","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417738495/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417738722","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417738722","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417738722,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzczODcyMg==","user":{"login":"kevinthesun","id":15520525,"node_id":"MDQ6VXNlcjE1NTIwNTI1","avatar_url":"https://avatars.githubusercontent.com/u/15520525?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinthesun","html_url":"https://github.com/kevinthesun","followers_url":"https://api.github.com/users/kevinthesun/followers","following_url":"https://api.github.com/users/kevinthesun/following{/other_user}","gists_url":"https://api.github.com/users/kevinthesun/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinthesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinthesun/subscriptions","organizations_url":"https://api.github.com/users/kevinthesun/orgs","repos_url":"https://api.github.com/users/kevinthesun/repos","events_url":"https://api.github.com/users/kevinthesun/events{/privacy}","received_events_url":"https://api.github.com/users/kevinthesun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T17:39:06Z","updated_at":"2018-08-31T17:39:06Z","author_association":"CONTRIBUTOR","body":"I tried the time evaluator settings autotvm used and still got similar results as before. I randomly pick some records. Even when exec time > 0.1, sometimes the result is not accurate, such as 0.17 measured VS 0.3 real.\r\n\r\nThis workload and cfg has 4 times gap between measurement and real value:\r\n(('TENSOR', (1, 256, 14, 14), 'float32'), ('TENSOR', (256, 256, 3, 3), 'float32'), 256, (3, 3), (1, 1), (1, 1), 'NCHW', 'NCHW', 'float32')\r\n[('tile_ic', [2, 128]), ('tile_oc', [2, 128]), ('tile_ow', [7, 2]), ('unroll_kw', False)],,None,475\r\nAutotvm time: 0.102600\r\nActual time: 0.494045","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417738722/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417746092","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417746092","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417746092,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzc0NjA5Mg==","user":{"login":"kevinthesun","id":15520525,"node_id":"MDQ6VXNlcjE1NTIwNTI1","avatar_url":"https://avatars.githubusercontent.com/u/15520525?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinthesun","html_url":"https://github.com/kevinthesun","followers_url":"https://api.github.com/users/kevinthesun/followers","following_url":"https://api.github.com/users/kevinthesun/following{/other_user}","gists_url":"https://api.github.com/users/kevinthesun/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinthesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinthesun/subscriptions","organizations_url":"https://api.github.com/users/kevinthesun/orgs","repos_url":"https://api.github.com/users/kevinthesun/repos","events_url":"https://api.github.com/users/kevinthesun/events{/privacy}","received_events_url":"https://api.github.com/users/kevinthesun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T18:05:42Z","updated_at":"2018-08-31T18:05:42Z","author_association":"CONTRIBUTOR","body":"@junrushao1994 For NNVM/Relay, the layout information is mainly used to insert layout transformation op when necessary. Currently this is achieved by FCorrectLayout attribute.It's like an \"InferLayout\" attr. We might want to preserve the latest valid layout of each op, so that we can easily fall back to last valid layout when the new layout pass is illegal for some ops. The logic should be similar to current NNVM implementation, but we might be able to better manage it in Relay.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417746092/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417750748","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417750748","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417750748,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzc1MDc0OA==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T18:22:53Z","updated_at":"2018-08-31T18:22:53Z","author_association":"MEMBER","body":"@kevinthesun IMO the concern is valid, @tqchen what do you think?\r\n\r\n> @junrushao1994 For NNVM/Relay, the layout information is mainly used to insert layout transformation op when necessary. Currently this is achieved by FCorrectLayout attribute.It's like an \"InferLayout\" attr. We might want to preserve the latest valid layout of each op, so that we can easily fall back to last valid layout when the new layout pass is illegal for some ops. The logic should be similar to current NNVM implementation, but we might be able to better manage it in Relay.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417750748/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417752279","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417752279","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417752279,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzc1MjI3OQ==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T18:28:29Z","updated_at":"2018-08-31T18:28:29Z","author_association":"MEMBER","body":"Let us hear the opinion and possible proposals from everyone in the community :) at this moment for things that are in flux we don’t necessarily need decisions. Instead we would love to see clear actionable options ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417752279/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417768690","html_url":"https://github.com/apache/tvm/pull/1665#issuecomment-417768690","issue_url":"https://api.github.com/repos/apache/tvm/issues/1665","id":417768690,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzc2ODY5MA==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T19:35:14Z","updated_at":"2018-08-31T19:35:14Z","author_association":"MEMBER","body":"Thanks @lixiaoquan @srkreddy1238 this is now merged.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417768690/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417769409","html_url":"https://github.com/apache/tvm/pull/1666#issuecomment-417769409","issue_url":"https://api.github.com/repos/apache/tvm/issues/1666","id":417769409,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzc2OTQwOQ==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T19:38:35Z","updated_at":"2018-08-31T19:38:35Z","author_association":"MEMBER","body":"@siju-samuel Please help to address the conflicts, thanks!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417769409/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417770909","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417770909","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417770909,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzc3MDkwOQ==","user":{"login":"kevinthesun","id":15520525,"node_id":"MDQ6VXNlcjE1NTIwNTI1","avatar_url":"https://avatars.githubusercontent.com/u/15520525?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinthesun","html_url":"https://github.com/kevinthesun","followers_url":"https://api.github.com/users/kevinthesun/followers","following_url":"https://api.github.com/users/kevinthesun/following{/other_user}","gists_url":"https://api.github.com/users/kevinthesun/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinthesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinthesun/subscriptions","organizations_url":"https://api.github.com/users/kevinthesun/orgs","repos_url":"https://api.github.com/users/kevinthesun/repos","events_url":"https://api.github.com/users/kevinthesun/events{/privacy}","received_events_url":"https://api.github.com/users/kevinthesun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T19:45:26Z","updated_at":"2018-08-31T20:06:19Z","author_association":"CONTRIBUTOR","body":"A phenomenon for workload (('TENSOR', (1, 256, 14, 14), 'float32'), ('TENSOR', (256, 256, 3, 3), 'float32'), 256, (3, 3), (1, 1), (1, 1), 'NCHW', 'NCHW', 'float32') is that when 'tile_oc' is [2, 128] and 'tile_ow' is [7, 2], the gap between measurement and actual result is quite large. You can verify this by skipping other tasks except when i == 6.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417770909/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417816204","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-417816204","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":417816204,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzgxNjIwNA==","user":{"login":"eqy","id":2239616,"node_id":"MDQ6VXNlcjIyMzk2MTY=","avatar_url":"https://avatars.githubusercontent.com/u/2239616?v=4","gravatar_id":"","url":"https://api.github.com/users/eqy","html_url":"https://github.com/eqy","followers_url":"https://api.github.com/users/eqy/followers","following_url":"https://api.github.com/users/eqy/following{/other_user}","gists_url":"https://api.github.com/users/eqy/gists{/gist_id}","starred_url":"https://api.github.com/users/eqy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eqy/subscriptions","organizations_url":"https://api.github.com/users/eqy/orgs","repos_url":"https://api.github.com/users/eqy/repos","events_url":"https://api.github.com/users/eqy/events{/privacy}","received_events_url":"https://api.github.com/users/eqy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-08-31T23:54:43Z","updated_at":"2018-08-31T23:54:43Z","author_association":"CONTRIBUTOR","body":"Just for a sanity check, I wonder if we can quickly compare the dumped llvm IR source between the two versions.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417816204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417821587","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417821587","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417821587,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzgyMTU4Nw==","user":{"login":"xqdan","id":23742050,"node_id":"MDQ6VXNlcjIzNzQyMDUw","avatar_url":"https://avatars.githubusercontent.com/u/23742050?v=4","gravatar_id":"","url":"https://api.github.com/users/xqdan","html_url":"https://github.com/xqdan","followers_url":"https://api.github.com/users/xqdan/followers","following_url":"https://api.github.com/users/xqdan/following{/other_user}","gists_url":"https://api.github.com/users/xqdan/gists{/gist_id}","starred_url":"https://api.github.com/users/xqdan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqdan/subscriptions","organizations_url":"https://api.github.com/users/xqdan/orgs","repos_url":"https://api.github.com/users/xqdan/repos","events_url":"https://api.github.com/users/xqdan/events{/privacy}","received_events_url":"https://api.github.com/users/xqdan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T00:59:41Z","updated_at":"2018-09-01T00:59:41Z","author_association":"CONTRIBUTOR","body":"How can I do MergeSeq or MergeNest in python, should we expose these api to python?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417821587/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417824906","html_url":"https://github.com/apache/tvm/pull/1527#issuecomment-417824906","issue_url":"https://api.github.com/repos/apache/tvm/issues/1527","id":417824906,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzgyNDkwNg==","user":{"login":"kaishijeng","id":12689630,"node_id":"MDQ6VXNlcjEyNjg5NjMw","avatar_url":"https://avatars.githubusercontent.com/u/12689630?v=4","gravatar_id":"","url":"https://api.github.com/users/kaishijeng","html_url":"https://github.com/kaishijeng","followers_url":"https://api.github.com/users/kaishijeng/followers","following_url":"https://api.github.com/users/kaishijeng/following{/other_user}","gists_url":"https://api.github.com/users/kaishijeng/gists{/gist_id}","starred_url":"https://api.github.com/users/kaishijeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaishijeng/subscriptions","organizations_url":"https://api.github.com/users/kaishijeng/orgs","repos_url":"https://api.github.com/users/kaishijeng/repos","events_url":"https://api.github.com/users/kaishijeng/events{/privacy}","received_events_url":"https://api.github.com/users/kaishijeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T01:58:21Z","updated_at":"2018-09-01T01:58:21Z","author_association":"NONE","body":"@kevinthesun \r\n\r\nAny progress of gluoncv ssd implementation: ?\r\n\r\nThanks,","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417824906/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417833619","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417833619","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417833619,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzgzMzYxOQ==","user":{"login":"were","id":2356965,"node_id":"MDQ6VXNlcjIzNTY5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/2356965?v=4","gravatar_id":"","url":"https://api.github.com/users/were","html_url":"https://github.com/were","followers_url":"https://api.github.com/users/were/followers","following_url":"https://api.github.com/users/were/following{/other_user}","gists_url":"https://api.github.com/users/were/gists{/gist_id}","starred_url":"https://api.github.com/users/were/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/were/subscriptions","organizations_url":"https://api.github.com/users/were/orgs","repos_url":"https://api.github.com/users/were/repos","events_url":"https://api.github.com/users/were/events{/privacy}","received_events_url":"https://api.github.com/users/were/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T05:07:14Z","updated_at":"2018-09-01T05:07:14Z","author_association":"CONTRIBUTOR","body":"@xqdan Can you make the question more specific?\r\nAt the first glance I even suppose this question is not related at all.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417833619/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417833644","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417833644","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417833644,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzgzMzY0NA==","user":{"login":"were","id":2356965,"node_id":"MDQ6VXNlcjIzNTY5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/2356965?v=4","gravatar_id":"","url":"https://api.github.com/users/were","html_url":"https://github.com/were","followers_url":"https://api.github.com/users/were/followers","following_url":"https://api.github.com/users/were/following{/other_user}","gists_url":"https://api.github.com/users/were/gists{/gist_id}","starred_url":"https://api.github.com/users/were/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/were/subscriptions","organizations_url":"https://api.github.com/users/were/orgs","repos_url":"https://api.github.com/users/were/repos","events_url":"https://api.github.com/users/were/events{/privacy}","received_events_url":"https://api.github.com/users/were/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T05:07:45Z","updated_at":"2018-09-01T05:07:45Z","author_association":"CONTRIBUTOR","body":"@eqy I resolved your requests!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417833644/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417836682","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417836682","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417836682,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzgzNjY4Mg==","user":{"login":"xqdan","id":23742050,"node_id":"MDQ6VXNlcjIzNzQyMDUw","avatar_url":"https://avatars.githubusercontent.com/u/23742050?v=4","gravatar_id":"","url":"https://api.github.com/users/xqdan","html_url":"https://github.com/xqdan","followers_url":"https://api.github.com/users/xqdan/followers","following_url":"https://api.github.com/users/xqdan/following{/other_user}","gists_url":"https://api.github.com/users/xqdan/gists{/gist_id}","starred_url":"https://api.github.com/users/xqdan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqdan/subscriptions","organizations_url":"https://api.github.com/users/xqdan/orgs","repos_url":"https://api.github.com/users/xqdan/repos","events_url":"https://api.github.com/users/xqdan/events{/privacy}","received_events_url":"https://api.github.com/users/xqdan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T06:23:06Z","updated_at":"2018-09-01T06:23:06Z","author_association":"CONTRIBUTOR","body":"@were that's the problem when I wrote a python pass, we may need more until api for writing a pass. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417836682/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417838175","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417838175","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417838175,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzgzODE3NQ==","user":{"login":"sergei-mironov","id":4477729,"node_id":"MDQ6VXNlcjQ0Nzc3Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4477729?v=4","gravatar_id":"","url":"https://api.github.com/users/sergei-mironov","html_url":"https://github.com/sergei-mironov","followers_url":"https://api.github.com/users/sergei-mironov/followers","following_url":"https://api.github.com/users/sergei-mironov/following{/other_user}","gists_url":"https://api.github.com/users/sergei-mironov/gists{/gist_id}","starred_url":"https://api.github.com/users/sergei-mironov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sergei-mironov/subscriptions","organizations_url":"https://api.github.com/users/sergei-mironov/orgs","repos_url":"https://api.github.com/users/sergei-mironov/repos","events_url":"https://api.github.com/users/sergei-mironov/events{/privacy}","received_events_url":"https://api.github.com/users/sergei-mironov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T06:56:07Z","updated_at":"2018-09-01T07:00:24Z","author_association":"CONTRIBUTOR","body":"Hi. Very interesting discussion we have. I have some questions related maybe more to the [Relay paper](https://dl.acm.org/citation.cfm?id=3211348) than to this exact RFC. AFAIK they are closely connected, but please let me know if we have a better place to discuss the article.\r\n\r\n### Python typing\r\n\r\nI'm glad that you are going to employ Python typing facilities! In the article, type specifications look like  `def lenet(x: Tensor[Float, (1, 28, 28)]) -> Tensor[Float, 10]`. Since python doesn't specify the exact typechecking algorithm, I assume we are going to extract type information from Python and pass it to C++ core to do shape math during graph compilation passes. Am I correct with that?\r\n\r\nNext, If we use other typing tools (probably `mypy`) in the same project, then two things are going to happen: 1) Mypy will see Relay types while performing before-runtime typechecking. 2) Relay will see mypy types at runtime.\r\n\r\nAFAIK, mypy will not accept Relay types as they are, it needs some stubs/definitions or maybe it needs to know which places in code to avoid looking at. Do you plan to maintain some degree of toolset  compatibility? ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417838175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417846815","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417846815","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417846815,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg0NjgxNQ==","user":{"login":"were","id":2356965,"node_id":"MDQ6VXNlcjIzNTY5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/2356965?v=4","gravatar_id":"","url":"https://api.github.com/users/were","html_url":"https://github.com/were","followers_url":"https://api.github.com/users/were/followers","following_url":"https://api.github.com/users/were/following{/other_user}","gists_url":"https://api.github.com/users/were/gists{/gist_id}","starred_url":"https://api.github.com/users/were/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/were/subscriptions","organizations_url":"https://api.github.com/users/were/orgs","repos_url":"https://api.github.com/users/were/repos","events_url":"https://api.github.com/users/were/events{/privacy}","received_events_url":"https://api.github.com/users/were/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T09:42:01Z","updated_at":"2018-09-01T09:42:01Z","author_association":"CONTRIBUTOR","body":"@xqdan Can you be more specific? What util (I suppose ur 'until' is typo) do you need?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417846815/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417849017","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417849017","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417849017,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg0OTAxNw==","user":{"login":"xqdan","id":23742050,"node_id":"MDQ6VXNlcjIzNzQyMDUw","avatar_url":"https://avatars.githubusercontent.com/u/23742050?v=4","gravatar_id":"","url":"https://api.github.com/users/xqdan","html_url":"https://github.com/xqdan","followers_url":"https://api.github.com/users/xqdan/followers","following_url":"https://api.github.com/users/xqdan/following{/other_user}","gists_url":"https://api.github.com/users/xqdan/gists{/gist_id}","starred_url":"https://api.github.com/users/xqdan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqdan/subscriptions","organizations_url":"https://api.github.com/users/xqdan/orgs","repos_url":"https://api.github.com/users/xqdan/repos","events_url":"https://api.github.com/users/xqdan/events{/privacy}","received_events_url":"https://api.github.com/users/xqdan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T10:27:22Z","updated_at":"2018-09-01T10:27:22Z","author_association":"CONTRIBUTOR","body":"@were I mean we may need more utility functions when writing python pass, eg. MergeNest in c++,\r\nhttps://github.com/dmlc/tvm/blob/b95b5958913927b90463dddb61eb18ef6e1556f6/src/pass/ir_util.cc#L11","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417849017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417849407","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417849407","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417849407,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg0OTQwNw==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T10:34:55Z","updated_at":"2018-09-01T15:45:16Z","author_association":"MEMBER","body":"@merrymercy I tried your branch on my machine with GTX 1070 ti, with parameters trained on 1080 ti.\r\nThe result looks great! Without tuning on my device, it seems faster than tvm + cudnn. I'll try it on my R9 Nano.\r\n\r\n```\r\n$ python gpu_imagenet_bench.py \r\n--------------------------------------------------\r\nNetwork Name         Mean Inference Time (std dev)\r\n--------------------------------------------------\r\nresnet-50            4.22 ms             (0.05 ms)\r\nmobilenet            1.20 ms             (0.01 ms)\r\nvgg-19               7.88 ms             (0.06 ms)\r\ninception_v3         8.58 ms             (0.01 ms)\r\n```\r\n\r\n```\r\n$ python gpu_imagenet_bench.py --network vgg-16\r\n--------------------------------------------------\r\nNetwork Name         Mean Inference Time (std dev)\r\n--------------------------------------------------\r\nvgg-16               6.83 ms             (0.02 ms)\r\n```\r\n\r\nOn the vgg result above, 2.3 ms is taken on dense layer alone. Optimizing dense schedule will benefit a lot. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417849407/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417849839","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417849839","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417849839,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg0OTgzOQ==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T10:42:55Z","updated_at":"2018-09-01T10:42:55Z","author_association":"MEMBER","body":"@merrymercy how can I use cudnn in gpu_imagenet_bench.py script? Even if I add -libs=cudnn to the target string, it seems to be ignored and winograd_cuda function in conv2d_cuda.py is always called.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417849839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417852268","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417852268","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417852268,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg1MjI2OA==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T11:15:10Z","updated_at":"2018-09-01T12:09:19Z","author_association":"MEMBER","body":"Another thing I am concerning is autobatch (https://arxiv.org/abs/1705.07860), which is an important feature that could potentially speed up irregular workloads. This involves some sort of scalar arithmetics, indexing, concatenation stuff.\r\n\r\nRelay could definitely represent these stuff easily. Just curious, if you guys want to support auto-batching, would you prefer to write it in frontend language, parse it out, and represent it with Relay, or write a low-level kernel or a `PackedFunc`?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417852268/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417861942","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417861942","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417861942,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg2MTk0Mg==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T14:05:04Z","updated_at":"2018-09-01T14:31:04Z","author_association":"MEMBER","body":"@masahi I tried that dense layer. TVM is already faster than cublas. I cannot optimize current schedule a lot.\r\nThe `-libs=cudnn` issue is due to alter op layout. I fixed this.\r\n\r\nIf you want to tune for rocm backend. The current rocm compiler has issue with fork (used in python multiprocessing). You'd better use rpc mode rather than local mode. You need to start a rpc tracker and a rpc server with '--no-fork'","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417861942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417862433","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417862433","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417862433,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg2MjQzMw==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T14:12:59Z","updated_at":"2018-09-01T14:14:48Z","author_association":"MEMBER","body":"re @Laurawly : Is your target intel graphics? @FrozenGene is also interested in intel graphics. He tried cuda template on intel graphics and got better result then cldnn for his network. Maybe you can share some experience. @Laurawly You can try port some intel graphics specific optimization to the cuda template.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417862433/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417868867","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417868867","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417868867,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg2ODg2Nw==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T15:57:46Z","updated_at":"2018-09-01T16:01:33Z","author_association":"MEMBER","body":"I think using shfl instruction to do reduction in dense schedule can improve performance. But as batch size gets bigger, the current approach of using explicit reduction to do matrix multiply will hurt perf a lot. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417868867/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417871802","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417871802","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417871802,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg3MTgwMg==","user":{"login":"were","id":2356965,"node_id":"MDQ6VXNlcjIzNTY5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/2356965?v=4","gravatar_id":"","url":"https://api.github.com/users/were","html_url":"https://github.com/were","followers_url":"https://api.github.com/users/were/followers","following_url":"https://api.github.com/users/were/following{/other_user}","gists_url":"https://api.github.com/users/were/gists{/gist_id}","starred_url":"https://api.github.com/users/were/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/were/subscriptions","organizations_url":"https://api.github.com/users/were/orgs","repos_url":"https://api.github.com/users/were/repos","events_url":"https://api.github.com/users/were/events{/privacy}","received_events_url":"https://api.github.com/users/were/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T16:44:25Z","updated_at":"2018-09-01T16:44:25Z","author_association":"CONTRIBUTOR","body":"@xqdan but it is not `stmt->stmt` mapping at all.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417871802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417871836","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417871836","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417871836,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg3MTgzNg==","user":{"login":"were","id":2356965,"node_id":"MDQ6VXNlcjIzNTY5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/2356965?v=4","gravatar_id":"","url":"https://api.github.com/users/were","html_url":"https://github.com/were","followers_url":"https://api.github.com/users/were/followers","following_url":"https://api.github.com/users/were/following{/other_user}","gists_url":"https://api.github.com/users/were/gists{/gist_id}","starred_url":"https://api.github.com/users/were/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/were/subscriptions","organizations_url":"https://api.github.com/users/were/orgs","repos_url":"https://api.github.com/users/were/repos","events_url":"https://api.github.com/users/were/events{/privacy}","received_events_url":"https://api.github.com/users/were/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T16:44:57Z","updated_at":"2018-09-01T16:44:57Z","author_association":"CONTRIBUTOR","body":"also, i believe this c++ code can be done in equivalent python in tvm","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417871836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417875197","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417875197","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417875197,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg3NTE5Nw==","user":{"login":"jekbradbury","id":11729078,"node_id":"MDQ6VXNlcjExNzI5MDc4","avatar_url":"https://avatars.githubusercontent.com/u/11729078?v=4","gravatar_id":"","url":"https://api.github.com/users/jekbradbury","html_url":"https://github.com/jekbradbury","followers_url":"https://api.github.com/users/jekbradbury/followers","following_url":"https://api.github.com/users/jekbradbury/following{/other_user}","gists_url":"https://api.github.com/users/jekbradbury/gists{/gist_id}","starred_url":"https://api.github.com/users/jekbradbury/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jekbradbury/subscriptions","organizations_url":"https://api.github.com/users/jekbradbury/orgs","repos_url":"https://api.github.com/users/jekbradbury/repos","events_url":"https://api.github.com/users/jekbradbury/events{/privacy}","received_events_url":"https://api.github.com/users/jekbradbury/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T17:33:06Z","updated_at":"2018-09-01T17:33:06Z","author_association":"NONE","body":"Autobatching is probably best implemented as a transformation on Relay IR? That’s pretty much what’s working for PyTorch.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417875197/reactions","total_count":3,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417875738","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417875738","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417875738,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg3NTczOA==","user":{"login":"szha","id":2626883,"node_id":"MDQ6VXNlcjI2MjY4ODM=","avatar_url":"https://avatars.githubusercontent.com/u/2626883?v=4","gravatar_id":"","url":"https://api.github.com/users/szha","html_url":"https://github.com/szha","followers_url":"https://api.github.com/users/szha/followers","following_url":"https://api.github.com/users/szha/following{/other_user}","gists_url":"https://api.github.com/users/szha/gists{/gist_id}","starred_url":"https://api.github.com/users/szha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szha/subscriptions","organizations_url":"https://api.github.com/users/szha/orgs","repos_url":"https://api.github.com/users/szha/repos","events_url":"https://api.github.com/users/szha/events{/privacy}","received_events_url":"https://api.github.com/users/szha/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T17:41:41Z","updated_at":"2018-09-01T17:41:41Z","author_association":"MEMBER","body":"On the other hand, dynet seems happy with putting it in the scheduler and batch whatever is available to run. I think whether IR transformation is better depends on the granularity of the graph, as well as the ability to discover reusable sub-graphs.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417875738/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417876066","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417876066","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417876066,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg3NjA2Ng==","user":{"login":"szha","id":2626883,"node_id":"MDQ6VXNlcjI2MjY4ODM=","avatar_url":"https://avatars.githubusercontent.com/u/2626883?v=4","gravatar_id":"","url":"https://api.github.com/users/szha","html_url":"https://github.com/szha","followers_url":"https://api.github.com/users/szha/followers","following_url":"https://api.github.com/users/szha/following{/other_user}","gists_url":"https://api.github.com/users/szha/gists{/gist_id}","starred_url":"https://api.github.com/users/szha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szha/subscriptions","organizations_url":"https://api.github.com/users/szha/orgs","repos_url":"https://api.github.com/users/szha/repos","events_url":"https://api.github.com/users/szha/events{/privacy}","received_events_url":"https://api.github.com/users/szha/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T17:46:48Z","updated_at":"2018-09-01T17:46:48Z","author_association":"MEMBER","body":"Oh I forgot, also depends on whether you need to keep the dependency graph for AD or not.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417876066/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417876126","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417876126","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417876126,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg3NjEyNg==","user":{"login":"jekbradbury","id":11729078,"node_id":"MDQ6VXNlcjExNzI5MDc4","avatar_url":"https://avatars.githubusercontent.com/u/11729078?v=4","gravatar_id":"","url":"https://api.github.com/users/jekbradbury","html_url":"https://github.com/jekbradbury","followers_url":"https://api.github.com/users/jekbradbury/followers","following_url":"https://api.github.com/users/jekbradbury/following{/other_user}","gists_url":"https://api.github.com/users/jekbradbury/gists{/gist_id}","starred_url":"https://api.github.com/users/jekbradbury/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jekbradbury/subscriptions","organizations_url":"https://api.github.com/users/jekbradbury/orgs","repos_url":"https://api.github.com/users/jekbradbury/repos","events_url":"https://api.github.com/users/jekbradbury/events{/privacy}","received_events_url":"https://api.github.com/users/jekbradbury/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T17:47:48Z","updated_at":"2018-09-01T17:47:48Z","author_association":"NONE","body":"DyNet’s original approach (essentially a runtime scheduling pass) doesn’t scale well with accelerators. But the next version of DyNet will likely use Cavs, which solves that by dramatically reducing the complexity of the scheduling problem at the cost of a new user-visible level of abstraction (an annotated static subgraph they call a vertex). In the long run a combination of IR transformation for SPMD-style batching and Cavs-like scheduling for more highly divergent cases seems like it might be the right approach.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417876126/reactions","total_count":3,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417876408","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-417876408","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":417876408,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg3NjQwOA==","user":{"login":"szha","id":2626883,"node_id":"MDQ6VXNlcjI2MjY4ODM=","avatar_url":"https://avatars.githubusercontent.com/u/2626883?v=4","gravatar_id":"","url":"https://api.github.com/users/szha","html_url":"https://github.com/szha","followers_url":"https://api.github.com/users/szha/followers","following_url":"https://api.github.com/users/szha/following{/other_user}","gists_url":"https://api.github.com/users/szha/gists{/gist_id}","starred_url":"https://api.github.com/users/szha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szha/subscriptions","organizations_url":"https://api.github.com/users/szha/orgs","repos_url":"https://api.github.com/users/szha/repos","events_url":"https://api.github.com/users/szha/events{/privacy}","received_events_url":"https://api.github.com/users/szha/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T17:51:25Z","updated_at":"2018-09-01T17:51:25Z","author_association":"MEMBER","body":"Indeed, a combination of these two approaches will likely cover more cases.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417876408/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417890756","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417890756","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417890756,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg5MDc1Ng==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T22:12:41Z","updated_at":"2018-09-01T22:12:41Z","author_association":"MEMBER","body":"@merrymercy do I need to modify tune_nnvm_cuda.py to use RPC mode on rocm (use autotvm.RPCRunner instead of autotvm.LocalRunner)? And do I need to use the [rocm RPC app](https://github.com/dmlc/tvm/tree/master/apps/rocm_rpc)? Sorry, I've never worked with tvm rpc mechanism.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417890756/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417892642","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417892642","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417892642,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg5MjY0Mg==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-01T22:49:00Z","updated_at":"2018-09-01T22:50:49Z","author_association":"MEMBER","body":"@masahi  Tutorial for using RPC is updated here https://github.com/merrymercy/tvm/blob/77f8f4777baa6ad7dc712b3aed0171fd85a140d5/tutorials/autotvm/tune_nnvm_cuda.py#L306","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417892642/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417897294","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417897294","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417897294,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg5NzI5NA==","user":{"login":"xqdan","id":23742050,"node_id":"MDQ6VXNlcjIzNzQyMDUw","avatar_url":"https://avatars.githubusercontent.com/u/23742050?v=4","gravatar_id":"","url":"https://api.github.com/users/xqdan","html_url":"https://github.com/xqdan","followers_url":"https://api.github.com/users/xqdan/followers","following_url":"https://api.github.com/users/xqdan/following{/other_user}","gists_url":"https://api.github.com/users/xqdan/gists{/gist_id}","starred_url":"https://api.github.com/users/xqdan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqdan/subscriptions","organizations_url":"https://api.github.com/users/xqdan/orgs","repos_url":"https://api.github.com/users/xqdan/repos","events_url":"https://api.github.com/users/xqdan/events{/privacy}","received_events_url":"https://api.github.com/users/xqdan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-02T00:53:46Z","updated_at":"2018-09-02T00:54:58Z","author_association":"CONTRIBUTOR","body":"@were consider you want to insert two new stmts before a stmt, and one new stmt after it, how do you do that? that's usual requirement when you writing a pass. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417897294/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417897536","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417897536","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417897536,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzg5NzUzNg==","user":{"login":"xqdan","id":23742050,"node_id":"MDQ6VXNlcjIzNzQyMDUw","avatar_url":"https://avatars.githubusercontent.com/u/23742050?v=4","gravatar_id":"","url":"https://api.github.com/users/xqdan","html_url":"https://github.com/xqdan","followers_url":"https://api.github.com/users/xqdan/followers","following_url":"https://api.github.com/users/xqdan/following{/other_user}","gists_url":"https://api.github.com/users/xqdan/gists{/gist_id}","starred_url":"https://api.github.com/users/xqdan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqdan/subscriptions","organizations_url":"https://api.github.com/users/xqdan/orgs","repos_url":"https://api.github.com/users/xqdan/repos","events_url":"https://api.github.com/users/xqdan/events{/privacy}","received_events_url":"https://api.github.com/users/xqdan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-02T00:59:29Z","updated_at":"2018-09-02T01:00:34Z","author_association":"CONTRIBUTOR","body":"@were actually it's stmt -> stmt, because stmt can be big, can be small, the whole AST can be a stmt, which also can be divided into small ones\r\n\r\nanything we have had in c++, we can register them to python, you need not to implement again in python.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417897536/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417903251","html_url":"https://github.com/apache/tvm/issues/1625#issuecomment-417903251","issue_url":"https://api.github.com/repos/apache/tvm/issues/1625","id":417903251,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzkwMzI1MQ==","user":{"login":"ZihengJiang","id":17693755,"node_id":"MDQ6VXNlcjE3NjkzNzU1","avatar_url":"https://avatars.githubusercontent.com/u/17693755?v=4","gravatar_id":"","url":"https://api.github.com/users/ZihengJiang","html_url":"https://github.com/ZihengJiang","followers_url":"https://api.github.com/users/ZihengJiang/followers","following_url":"https://api.github.com/users/ZihengJiang/following{/other_user}","gists_url":"https://api.github.com/users/ZihengJiang/gists{/gist_id}","starred_url":"https://api.github.com/users/ZihengJiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ZihengJiang/subscriptions","organizations_url":"https://api.github.com/users/ZihengJiang/orgs","repos_url":"https://api.github.com/users/ZihengJiang/repos","events_url":"https://api.github.com/users/ZihengJiang/events{/privacy}","received_events_url":"https://api.github.com/users/ZihengJiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-02T03:57:02Z","updated_at":"2018-09-02T03:57:02Z","author_association":"CONTRIBUTOR","body":"For this situation, you need to bind buffer with strides in tensor intrinsic.\r\n\r\n```\r\nimport tvm\r\nimport numpy as np\r\n\r\ndef intrin_vadd(n):\r\n    x = tvm.placeholder((n, 1, 1), name='vx')\r\n    y = tvm.placeholder((n, 1, 1), name='vy')\r\n    z = tvm.compute(x.shape, lambda i, j, k: x[i, j, k] + y[i, j, k], name='z')\r\n    def intrin_func(ins, outs):\r\n        xx, yy = ins\r\n        zz = outs[0]\r\n        return tvm.call_packed(\"vadd\", xx, yy, zz)\r\n\r\n\r\n    strides = [tvm.var('so'), tvm.var('si'), 1]\r\n    offset_factor = 1\r\n    xb = tvm.decl_buffer(x.shape, x.dtype,\r\n                         name=\"xb\",\r\n                         offset_factor=offset_factor,\r\n                         strides=strides)\r\n    yb = tvm.decl_buffer(y.shape, y.dtype,\r\n                         name=\"yb\",\r\n                         offset_factor=offset_factor,\r\n                         strides=strides)\r\n    zb = tvm.decl_buffer(z.shape, z.dtype,\r\n                         name=\"zb\",\r\n                         offset_factor=offset_factor,\r\n                         strides=strides)\r\n    binds = {x: xb, y: yb, z: zb}\r\n    return tvm.decl_tensor_intrin(z.op, intrin_func, binds=binds)\r\n\r\n\r\ndef test_tensorize_vadd():\r\n    m = 16\r\n    n = 16\r\n    l = 16\r\n    x = tvm.placeholder((m,n, l), name='x')\r\n    y = tvm.placeholder((m,n, l), name='y')\r\n    z = tvm.compute(x.shape, lambda i,j, k: x[i,j, k] + y[i,j, k], name='z')\r\n\r\n    def check(factor):\r\n        s = tvm.create_schedule(z.op)\r\n        xa, xb, xc = s[z].op.axis\r\n        s[z].reorder(xb, xc, xa)\r\n        print(tvm.lower(s, [x, y, z], simple_mode=True))\r\n        vadd = intrin_vadd(factor)\r\n        s[z].tensorize(xa, vadd)\r\n        s = s.normalize()\r\n        print(tvm.lower(s, [x, y, z], simple_mode=True))\r\n\r\n    check(16)\r\n\r\ntest_tensorize_vadd()\r\n```","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417903251/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417903449","html_url":"https://github.com/apache/tvm/issues/1485#issuecomment-417903449","issue_url":"https://api.github.com/repos/apache/tvm/issues/1485","id":417903449,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzkwMzQ0OQ==","user":{"login":"ZihengJiang","id":17693755,"node_id":"MDQ6VXNlcjE3NjkzNzU1","avatar_url":"https://avatars.githubusercontent.com/u/17693755?v=4","gravatar_id":"","url":"https://api.github.com/users/ZihengJiang","html_url":"https://github.com/ZihengJiang","followers_url":"https://api.github.com/users/ZihengJiang/followers","following_url":"https://api.github.com/users/ZihengJiang/following{/other_user}","gists_url":"https://api.github.com/users/ZihengJiang/gists{/gist_id}","starred_url":"https://api.github.com/users/ZihengJiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ZihengJiang/subscriptions","organizations_url":"https://api.github.com/users/ZihengJiang/orgs","repos_url":"https://api.github.com/users/ZihengJiang/repos","events_url":"https://api.github.com/users/ZihengJiang/events{/privacy}","received_events_url":"https://api.github.com/users/ZihengJiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-02T04:02:36Z","updated_at":"2018-09-02T04:37:27Z","author_association":"CONTRIBUTOR","body":"@tqchen As for the implementation, what is the return value of `intrin_add(A[i, [0:factor], B[i, 0:factor])`? It should be a statement, but in ComputeOp, `body` is an `Expr`.\r\n\r\nAlso, when we do `intrin_add(A[i, 0:factor], B[i, 0:factor]`, we do not have the information of the output tensor, should we use a placeholder for it?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417903449/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417945749","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-417945749","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":417945749,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzk0NTc0OQ==","user":{"login":"were","id":2356965,"node_id":"MDQ6VXNlcjIzNTY5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/2356965?v=4","gravatar_id":"","url":"https://api.github.com/users/were","html_url":"https://github.com/were","followers_url":"https://api.github.com/users/were/followers","following_url":"https://api.github.com/users/were/following{/other_user}","gists_url":"https://api.github.com/users/were/gists{/gist_id}","starred_url":"https://api.github.com/users/were/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/were/subscriptions","organizations_url":"https://api.github.com/users/were/orgs","repos_url":"https://api.github.com/users/were/repos","events_url":"https://api.github.com/users/were/events{/privacy}","received_events_url":"https://api.github.com/users/were/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-02T17:22:19Z","updated_at":"2018-09-02T17:22:19Z","author_association":"CONTRIBUTOR","body":"@xqdan Eazy! You can just go to the node before which you want to inject to statement and transform it to a block statement.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417945749/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417947730","html_url":"https://github.com/apache/tvm/issues/1485#issuecomment-417947730","issue_url":"https://api.github.com/repos/apache/tvm/issues/1485","id":417947730,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzk0NzczMA==","user":{"login":"were","id":2356965,"node_id":"MDQ6VXNlcjIzNTY5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/2356965?v=4","gravatar_id":"","url":"https://api.github.com/users/were","html_url":"https://github.com/were","followers_url":"https://api.github.com/users/were/followers","following_url":"https://api.github.com/users/were/following{/other_user}","gists_url":"https://api.github.com/users/were/gists{/gist_id}","starred_url":"https://api.github.com/users/were/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/were/subscriptions","organizations_url":"https://api.github.com/users/were/orgs","repos_url":"https://api.github.com/users/were/repos","events_url":"https://api.github.com/users/were/events{/privacy}","received_events_url":"https://api.github.com/users/were/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-02T17:55:10Z","updated_at":"2018-09-02T17:55:10Z","author_association":"CONTRIBUTOR","body":"I like the 1st one better.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417947730/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417979310","html_url":"https://github.com/apache/tvm/issues/1679#issuecomment-417979310","issue_url":"https://api.github.com/repos/apache/tvm/issues/1679","id":417979310,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzk3OTMxMA==","user":{"login":"lxwithgod","id":15165432,"node_id":"MDQ6VXNlcjE1MTY1NDMy","avatar_url":"https://avatars.githubusercontent.com/u/15165432?v=4","gravatar_id":"","url":"https://api.github.com/users/lxwithgod","html_url":"https://github.com/lxwithgod","followers_url":"https://api.github.com/users/lxwithgod/followers","following_url":"https://api.github.com/users/lxwithgod/following{/other_user}","gists_url":"https://api.github.com/users/lxwithgod/gists{/gist_id}","starred_url":"https://api.github.com/users/lxwithgod/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lxwithgod/subscriptions","organizations_url":"https://api.github.com/users/lxwithgod/orgs","repos_url":"https://api.github.com/users/lxwithgod/repos","events_url":"https://api.github.com/users/lxwithgod/events{/privacy}","received_events_url":"https://api.github.com/users/lxwithgod/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T01:50:56Z","updated_at":"2018-09-03T01:50:56Z","author_association":"NONE","body":"thanks","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417979310/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417986253","html_url":"https://github.com/apache/tvm/pull/1666#issuecomment-417986253","issue_url":"https://api.github.com/repos/apache/tvm/issues/1666","id":417986253,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzk4NjI1Mw==","user":{"login":"siju-samuel","id":15828974,"node_id":"MDQ6VXNlcjE1ODI4OTc0","avatar_url":"https://avatars.githubusercontent.com/u/15828974?v=4","gravatar_id":"","url":"https://api.github.com/users/siju-samuel","html_url":"https://github.com/siju-samuel","followers_url":"https://api.github.com/users/siju-samuel/followers","following_url":"https://api.github.com/users/siju-samuel/following{/other_user}","gists_url":"https://api.github.com/users/siju-samuel/gists{/gist_id}","starred_url":"https://api.github.com/users/siju-samuel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siju-samuel/subscriptions","organizations_url":"https://api.github.com/users/siju-samuel/orgs","repos_url":"https://api.github.com/users/siju-samuel/repos","events_url":"https://api.github.com/users/siju-samuel/events{/privacy}","received_events_url":"https://api.github.com/users/siju-samuel/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T02:47:48Z","updated_at":"2018-09-03T02:47:48Z","author_association":"MEMBER","body":"@yzhliu Conflicts resolved and updated. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417986253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417997689","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417997689","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417997689,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzk5NzY4OQ==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T04:33:47Z","updated_at":"2018-09-03T04:33:47Z","author_association":"MEMBER","body":"@merrymercy In the [rocm_v0.01.log](https://github.com/uwsaml/tvm-distro/blob/master/tophub/rocm_v0.01.log) file on tophub, some of the configs have unroll_explicit=0. But in your latest commit, for rocm backend unroll_explicit is always 1. Is this discrepancy intended?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417997689/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417999741","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-417999741","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":417999741,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzk5OTc0MQ==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T04:53:32Z","updated_at":"2018-09-04T23:48:34Z","author_association":"MEMBER","body":"On R9 Nano, I got this result after auto tuning on the device. I think this is a great result, considering MIOpen's highly tuned hand written asm kernels.\r\n\r\nTime in millisecond\r\n\r\n| | VGG16 | Resnet50 |\r\n|------|--------|-------|\r\n| AutoTVM |  7.44 | 6.45  |\r\n| TVM + MIOpen | 7.18 | 6.13  |\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/417999741/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418004842","html_url":"https://github.com/apache/tvm/pull/1671#issuecomment-418004842","issue_url":"https://api.github.com/repos/apache/tvm/issues/1671","id":418004842,"node_id":"MDEyOklzc3VlQ29tbWVudDQxODAwNDg0Mg==","user":{"login":"were","id":2356965,"node_id":"MDQ6VXNlcjIzNTY5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/2356965?v=4","gravatar_id":"","url":"https://api.github.com/users/were","html_url":"https://github.com/were","followers_url":"https://api.github.com/users/were/followers","following_url":"https://api.github.com/users/were/following{/other_user}","gists_url":"https://api.github.com/users/were/gists{/gist_id}","starred_url":"https://api.github.com/users/were/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/were/subscriptions","organizations_url":"https://api.github.com/users/were/orgs","repos_url":"https://api.github.com/users/were/repos","events_url":"https://api.github.com/users/were/events{/privacy}","received_events_url":"https://api.github.com/users/were/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T05:35:47Z","updated_at":"2018-09-03T05:35:47Z","author_association":"CONTRIBUTOR","body":"@tqchen My changes have been approved.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418004842/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418071436","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-418071436","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":418071436,"node_id":"MDEyOklzc3VlQ29tbWVudDQxODA3MTQzNg==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T10:22:23Z","updated_at":"2018-09-03T10:22:46Z","author_association":"MEMBER","body":"@masahi  The `rocm_v0.01.log` is produced by old templates. I am running a new round of tuning using the new templates and will upload the log later.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418071436/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418088037","html_url":"https://github.com/apache/tvm/issues/1681#issuecomment-418088037","issue_url":"https://api.github.com/repos/apache/tvm/issues/1681","id":418088037,"node_id":"MDEyOklzc3VlQ29tbWVudDQxODA4ODAzNw==","user":{"login":"siju-samuel","id":15828974,"node_id":"MDQ6VXNlcjE1ODI4OTc0","avatar_url":"https://avatars.githubusercontent.com/u/15828974?v=4","gravatar_id":"","url":"https://api.github.com/users/siju-samuel","html_url":"https://github.com/siju-samuel","followers_url":"https://api.github.com/users/siju-samuel/followers","following_url":"https://api.github.com/users/siju-samuel/following{/other_user}","gists_url":"https://api.github.com/users/siju-samuel/gists{/gist_id}","starred_url":"https://api.github.com/users/siju-samuel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siju-samuel/subscriptions","organizations_url":"https://api.github.com/users/siju-samuel/orgs","repos_url":"https://api.github.com/users/siju-samuel/repos","events_url":"https://api.github.com/users/siju-samuel/events{/privacy}","received_events_url":"https://api.github.com/users/siju-samuel/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T11:32:25Z","updated_at":"2018-09-03T11:32:25Z","author_association":"MEMBER","body":"@merrymercy \r\nThe recent changes in tutorial is with PR  #1501 broken the link for downloading the weights file, leading to this CI failure.\r\n\r\n@yzhliu please merge #1682 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418088037/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418090570","html_url":"https://github.com/apache/tvm/pull/1682#issuecomment-418090570","issue_url":"https://api.github.com/repos/apache/tvm/issues/1682","id":418090570,"node_id":"MDEyOklzc3VlQ29tbWVudDQxODA5MDU3MA==","user":{"login":"siju-samuel","id":15828974,"node_id":"MDQ6VXNlcjE1ODI4OTc0","avatar_url":"https://avatars.githubusercontent.com/u/15828974?v=4","gravatar_id":"","url":"https://api.github.com/users/siju-samuel","html_url":"https://github.com/siju-samuel","followers_url":"https://api.github.com/users/siju-samuel/followers","following_url":"https://api.github.com/users/siju-samuel/following{/other_user}","gists_url":"https://api.github.com/users/siju-samuel/gists{/gist_id}","starred_url":"https://api.github.com/users/siju-samuel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siju-samuel/subscriptions","organizations_url":"https://api.github.com/users/siju-samuel/orgs","repos_url":"https://api.github.com/users/siju-samuel/repos","events_url":"https://api.github.com/users/siju-samuel/events{/privacy}","received_events_url":"https://api.github.com/users/siju-samuel/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T11:44:02Z","updated_at":"2018-09-03T11:44:02Z","author_association":"MEMBER","body":"@merrymercy @yzhliu @PariksheetPinjari909 please review and help to merge this PR","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418090570/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418092293","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-418092293","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":418092293,"node_id":"MDEyOklzc3VlQ29tbWVudDQxODA5MjI5Mw==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T11:51:49Z","updated_at":"2018-09-03T11:52:24Z","author_association":"MEMBER","body":"@merrymercy when you write \"gfx900\", you mean vega frontier Edition, right? (which I remember @eqy was using) \r\n\r\ngfx 900 refers to a family of gpus, which include Vega 56, 64, and FE. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418092293/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418102359","html_url":"https://github.com/apache/tvm/pull/1638#issuecomment-418102359","issue_url":"https://api.github.com/repos/apache/tvm/issues/1638","id":418102359,"node_id":"MDEyOklzc3VlQ29tbWVudDQxODEwMjM1OQ==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T12:34:10Z","updated_at":"2018-09-03T12:35:10Z","author_association":"MEMBER","body":"Yes. It is the only AMD GPU we have. I don't know what name I should use. Please correct me. I use clinfo and it prints `Devic Name: gfx900`","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418102359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418118798","html_url":"https://github.com/apache/tvm/issues/1585#issuecomment-418118798","issue_url":"https://api.github.com/repos/apache/tvm/issues/1585","id":418118798,"node_id":"MDEyOklzc3VlQ29tbWVudDQxODExODc5OA==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T13:40:30Z","updated_at":"2018-09-03T14:26:04Z","author_association":"MEMBER","body":"I confirmed one thing. In autotvm, I use `tvm.nd.empty` to create input arrays. In this way we don't copy the array (several megabytes) to remote rpc devices. \r\nhttps://github.com/dmlc/tvm/blob/4c4a8ea47b88677d89468e97e584cdad64b5b88e/python/tvm/autotvm/measure/measure_methods.py#L463\r\n\r\nBut it results in the inaccurate measurement for  workload `workload (('TENSOR', (1, 256, 14, 14), 'float32'), ('TENSOR', (256, 256, 3, 3), 'float32'), 256, (3, 3), (1, 1), (1, 1), 'NCHW', 'NCHW', 'float32')`\r\n\r\n## Reproduce on c5.9xlarge \r\ncreate file `check_empty.log` and run `python3 check.py` twice.\r\n\r\n### check_empty.log\r\n```\r\n# one row copied from your log\r\n{\"i\": [\"llvm -mcpu=skylake-avx512\", \"topi_x86_conv2d_NCHWc\", [[\"TENSOR\", [1, 256, 14, 14], \"float32\"], [\"TENSOR\", [256, 256, 3, 3], \"float32\"], 256, [3, 3], [1, 1], [1, 1], \"NCHW\", \"NCHW\", \"float32\"], {}, [\"conv2d_NCHWc\", [1, 256, 14, 14, \"float32\"], [256, 256, 3, 3, \"float32\"], [1, 1], [1, 1], \"NCHW\", \"float32\"], {\"i\": 475, \"c\": null, \"e\": [[\"tile_ic\", \"sp\", [2, 128]], [\"tile_oc\", \"sp\", [2, 128]], [\"tile_ow\", \"sp\", [7, 2]], [\"unroll_kw\", \"ot\", false]], \"t\": \"\"}], \"r\": [[0.0001025999385], 0, 1.2034080028533936, 1535531394.87406], \"v\": 0.1}\r\n```\r\n\r\n### check.py\r\n```python\r\nimport logging\r\nimport sys\r\nimport time\r\n\r\nimport numpy as np\r\nimport nnvm\r\nimport tvm\r\nimport topi\r\n\r\nfrom tvm import autotvm\r\nfrom tvm.autotvm.task import register, get_config\r\nfrom tvm.autotvm.task.nnvm_integration import deserialize_args\r\nfrom tvm.autotvm.record import load_from_file\r\nfrom tvm.autotvm.util import get_const_tuple\r\nfrom nnvm import symbol as sym\r\nfrom tvm.contrib import graph_runtime\r\nfrom nnvm.testing.utils import create_workload\r\nfrom mxnet.gluon.model_zoo.vision import get_model\r\n\r\ndef helper(cfg, *args):\r\n    data, kernel = args[:2]\r\n    kernel_size = args[3]\r\n    strides = args[4]\r\n    padding = args[5]\r\n    layout = args[6]\r\n    kh, kw = kernel_size if isinstance(kernel_size, (tuple, list)\r\n                                       ) else (kernel_size, kernel_size)\r\n    is_kernel_1x1 = kh == 1 and kw == 1\r\n    raw_data_shape = get_const_tuple(data[1])\r\n    raw_kernel_shape = get_const_tuple(kernel[1])\r\n\r\n    # change shape with the value in config\r\n    ic_bn, oc_bn, ow_bn = (cfg[\"tile_ic\"].size[-1], cfg[\"tile_oc\"].size[-1],\r\n                           cfg[\"tile_ow\"].size[-1])\r\n    new_data_shape = (raw_data_shape[0], raw_data_shape[1] // ic_bn,\r\n                      raw_data_shape[2], raw_data_shape[3], ic_bn)\r\n    data_layout = \"NCHW%dc\" % ic_bn\r\n    out_layout = \"NCHW%dc\" % oc_bn\r\n    if is_kernel_1x1:\r\n        new_kernel_shape = (raw_kernel_shape[0] // oc_bn, raw_kernel_shape[1] // ic_bn,\r\n                            ic_bn, oc_bn, raw_kernel_shape[2], raw_kernel_shape[3])\r\n    else:\r\n        new_kernel_shape = (raw_kernel_shape[0] // oc_bn, raw_kernel_shape[1] // ic_bn,\r\n                            raw_kernel_shape[2], raw_kernel_shape[3], ic_bn, oc_bn)\r\n    data = tvm.placeholder(new_data_shape, args[-1])\r\n    kernel = tvm.placeholder(new_kernel_shape, args[-1])\r\n\r\n    C = topi.x86.conv2d._declaration_conv_NCHWc(cfg, data, kernel, args[2], args[3], args[4], args[5],\r\n                                data_layout, out_layout, args[-1])\r\n    s = topi.x86.conv2d._schedule_conv2d_NCHWc(cfg, args[2], args[3], args[4], args[5],\r\n                              data_layout, out_layout, [C])\r\n    return s, [data, kernel, C]\r\n\r\nctx = tvm.cpu()\r\ntarget = \"llvm -mcpu=skylake-avx512\"\r\na = load_from_file(\"check_empty.log\")\r\nt = 0\r\n\r\nfor i, o in a:\r\n    if o.error_no != 0:\r\n        continue\r\n\r\n    args = i.task.args\r\n    print(args)\r\n    cfg = i.config\r\n    print(\"Autotvm time: %f\" % (o.costs[0] * 1000))\r\n    s, ts = helper(cfg, *args)\r\n    data, kernel, out = ts\r\n    f = tvm.build(s, [data, kernel, out], target)\r\n\r\n    number = int(1.5 / o.costs[0] * 1.1)     # adjust number\r\n    f_t = f.time_evaluator(f.entry_name, ctx, number=number, repeat=3)\r\n\r\n    # measure using empty tvm array\r\n    d_empty = tvm.nd.empty(get_const_tuple(data.shape), dtype=\"float32\", ctx=ctx)\r\n    k_empty = tvm.nd.empty(get_const_tuple(kernel.shape), dtype=\"float32\", ctx=ctx)\r\n    output_empty = tvm.nd.empty(get_const_tuple(out.shape), dtype=\"float32\", ctx=ctx)\r\n    cost = f_t(d_empty, k_empty, output_empty).results[-1]\r\n    print(\"Empty time: %f\" % (cost * 1000))\r\n\r\n    # measure using random tvm array\r\n    d = tvm.nd.array(np.random.uniform(size=get_const_tuple(data.shape)).astype(\"float32\"), ctx)\r\n    k = tvm.nd.array(np.random.uniform(size=get_const_tuple(kernel.shape)).astype(\"float32\"), ctx)\r\n    output = tvm.nd.array(np.zeros(get_const_tuple(out.shape)).astype(\"float32\"), ctx)\r\n    cost = f_t(d, k, output).results[-1]\r\n    print(\"Actual time: %f\\n\" % (cost * 1000))\r\n\r\n    t += cost * 1000\r\n\r\nprint(t)\r\n```\r\n\r\n### output\r\n```\r\nAutotvm time: 0.102600\r\nEmpty time: 0.104760\r\nActual time: 0.514933\r\n\r\n0.5149327384491014\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418118798/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418123520","html_url":"https://github.com/apache/tvm/issues/1673#issuecomment-418123520","issue_url":"https://api.github.com/repos/apache/tvm/issues/1673","id":418123520,"node_id":"MDEyOklzc3VlQ29tbWVudDQxODEyMzUyMA==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-09-03T13:58:39Z","updated_at":"2018-09-03T14:13:35Z","author_association":"MEMBER","body":"A quick question, do you guys want to strictly enforce homo type of a list, or allow some generics. For example, will all tensors inside a list be of the same shape?\r\n\r\nUpdate: seems like a silly question...","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/418123520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]