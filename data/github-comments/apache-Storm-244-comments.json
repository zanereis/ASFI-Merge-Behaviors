[{"url":"https://api.github.com/repos/apache/storm/issues/comments/236167329","html_url":"https://github.com/apache/storm/pull/1445#issuecomment-236167329","issue_url":"https://api.github.com/repos/apache/storm/issues/1445","id":236167329,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjE2NzMyOQ==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-29T12:26:26Z","updated_at":"2016-07-29T12:26:26Z","author_association":"NONE","body":"@HeartSaVioR thanks for the review, addressed, please help review again.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236167329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654883","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654883","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654883,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-29T12:26:28Z","updated_at":"2025-01-24T14:24:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445</a></p>\n\n<p>    @HeartSaVioR thanks for the review, addressed, please help review again.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654883/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941937","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941937","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941937,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5Mzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-29T21:47:45Z","updated_at":"2025-01-24T16:35:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595#discussion_r72865762\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595#discussion_r72865762</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/metric/SystemBolt.java &#8212;<br/>\n    @@ -156,7 +219,103 @@ private void registerMetrics(TopologyContext context, Map<String, String> metric</p>\n\n<p> @Override<br/>\n public void execute(Tuple input) {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>throw new RuntimeException(\"Non-system tuples should never be sent to __system bolt.\");<br/>\n    +IMetricsConsumer.TaskInfo taskInfo = (IMetricsConsumer.TaskInfo) input.getValue(0);<br/>\n    +Collection<IMetricsConsumer.DataPoint> dataPoints = (Collection) input.getValue(1);<br/>\n    +Collection<IMetricsConsumer.DataPoint> expandedDataPoints = expander.expandDataPoints(dataPoints);<br/>\n    +<br/>\n    +if (aggregateMode) \n{\n    +    handleMetricTupleInAggregateMode(taskInfo, expandedDataPoints);\n    +}\n<p> else </p>\n{\n    +    collector.emit(Constants.METRICS_AGGREGATE_STREAM_ID, new Values(taskInfo, expandedDataPoints));\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private void handleMetricTupleInAggregateMode(IMetricsConsumer.TaskInfo taskInfo, Collection<IMetricsConsumer.DataPoint> expandedDataPoints) {<br/>\n    +Map<Integer, TaskInfoToDataPointsPair> taskToMetricTupleMap = intervalToTaskToMetricTupleMap.get(taskInfo.updateIntervalSecs);<br/>\n    +if (taskToMetricTupleMap == null) </p>\n{\n    +    taskToMetricTupleMap = new HashMap<>();\n    +    intervalToTaskToMetricTupleMap.put(taskInfo.updateIntervalSecs, taskToMetricTupleMap);\n    +}\n<p>    +<br/>\n    +taskToMetricTupleMap.put(taskInfo.srcTaskId, new TaskInfoToDataPointsPair(taskInfo, expandedDataPoints));</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    It is intended behavior. If the data point for same task on same interval is received and it overwrites the old value, it means old value is not aggregated in time. If we want to keep also the old value then it's more confusing that what values we want to aggregate together. </p>\n\n<p>    This is due to design issue on current metrics feature (late metrics) and if it occurs, metric value would be flawed anyway (I mean value is not measured for given interval) so we can't take good care of them. Fixing this issue should be a one of the requirements for new metrics feature.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941937/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941938","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941938","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941938,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5Mzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-29T21:48:54Z","updated_at":"2025-01-24T16:35:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595#discussion_r72865866\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595#discussion_r72865866</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/metric/SystemBolt.java &#8212;<br/>\n    @@ -156,7 +219,103 @@ private void registerMetrics(TopologyContext context, Map<String, String> metric</p>\n\n<p> @Override<br/>\n public void execute(Tuple input) {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>throw new RuntimeException(\"Non-system tuples should never be sent to __system bolt.\");\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Makes sense. I'll address this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941938/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941943","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941943","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941943,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-29T21:53:39Z","updated_at":"2025-01-24T16:35:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595#discussion_r72866374\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595#discussion_r72866374</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -436,7 +414,9 @@ public static void addMetricComponents(Map conf, StormTopology topology) {<br/>\n public static void addSystemComponents(Map conf, StormTopology topology) {<br/>\n     Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n     outputStreams.put(Constants.SYSTEM_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"rate_secs\")));<br/>\n    +outputStreams.put(Constants.METRICS_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"task-info\", \"data-points\")));<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes we send the metrics tick tuple to each task with source stream to that, so it's needed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941948","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941948","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941948,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5NDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-29T21:57:24Z","updated_at":"2025-01-24T16:35:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595#discussion_r72866761\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595#discussion_r72866761</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -436,7 +414,9 @@ public static void addMetricComponents(Map conf, StormTopology topology) {<br/>\n public static void addSystemComponents(Map conf, StormTopology topology) {<br/>\n     Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n     outputStreams.put(Constants.SYSTEM_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"rate_secs\")));<br/>\n    +outputStreams.put(Constants.METRICS_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"task-info\", \"data-points\")));<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Oh sorry I've confused. We send the metrics tuple from each task with fake source stream which is `SYSTEM_TASK_ID METRICS_STREAM_ID`, so it's needed. Please see the change of `metric-tick`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941948/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236309009","html_url":"https://github.com/apache/storm/pull/1595#issuecomment-236309009","issue_url":"https://api.github.com/repos/apache/storm/issues/1595","id":236309009,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjMwOTAwOQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-29T22:24:55Z","updated_at":"2016-07-29T23:12:02Z","author_association":"CONTRIBUTOR","body":"@abhishekagarwal87 \nFirst, I think new type of metrics consumer should refer the new metrics feature which addresses our concerns on current metrics. Aggregation is just a one of them so I don't want to introduce new type of metrics consumer without consideration of other things. It doesn't mean I started working for the new metrics feature, it's just like a hotfix for current metrics feature.\n\nSecond, worker+component combination is what this PR is trying to achieve. `convertMetricsTupleMapKeyedByTaskInfo` is for that. You can see that I only change the task id and timestamp in TaskInfo, and use TaskInfo to aggregate the values, which means metrics from different components are not aggregated to same list.\nI also don't think aggregated metric value is useful if they are aggregated from various components.\n\nThird, yes I'm aware of it, and that's why I introduce `eviction` of the metric points.\nBtw, in that case, metric value would be flawed anyway. It is already out of control so we should focus how to not making this situation instead of how to correct the value.\nAnd triggering (sending metrics tick tuple to tasks) can't guarantee this.\n\nAs we were talking about metrics from user@ and dev@ list, there're a lot of things to correct from current metrics feature. Things are coupled each other so this is also not easy to fix them one by one. Let's move out to the new metrics feature rather than saying them with current metrics.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236309009/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941952","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941952","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941952,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5NTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-29T22:24:57Z","updated_at":"2025-01-24T16:35:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595</a></p>\n\n<p>    @abhishekagarwal87 <br/>\n    1. I think new type of metrics consumer should refer the new metrics feature which addresses our concerns on current metrics. Aggregation is just a one of them so I don't want to introduce new type of metrics consumer without consideration of other things. It doesn't mean I started working for the new metrics feature, just like a hotfix for current metrics feature.</p>\n\n<p>    2. Worker+component combination is what this PR is trying to achieve. `convertMetricsTupleMapKeyedByTaskInfo` is for that. You can see that I only change the task id and timestamp in TaskInfo, and use TaskInfo to aggregate the values, which means metrics from different components are not aggregated to same list.<br/>\n    I also don't think aggregated metric value is useful if they are aggregated from various components.</p>\n\n<p>    3. Yes I'm aware of it, and that's why I introduce `eviction` of the metric points.<br/>\n    Btw, in that care, metric value would be flawed anyway. It is already out of control so we should focus how to not making this situation instead of how to correct the value.<br/>\n    And triggering (sending metrics tick tuple to tasks) can't guarantee this.</p>\n\n<p>    As we were talking about metrics from user@ and dev@ list, there're a lot of things to correct from current metrics feature. Things are coupled each other so this is also not easy to fix them one by one. Let's move out to the new metrics feature rather than saying them with current metrics.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941952/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236398478","html_url":"https://github.com/apache/storm/pull/1591#issuecomment-236398478","issue_url":"https://api.github.com/repos/apache/storm/issues/1591","id":236398478,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjM5ODQ3OA==","user":{"login":"ooasis","id":10720176,"node_id":"MDQ6VXNlcjEwNzIwMTc2","avatar_url":"https://avatars.githubusercontent.com/u/10720176?v=4","gravatar_id":"","url":"https://api.github.com/users/ooasis","html_url":"https://github.com/ooasis","followers_url":"https://api.github.com/users/ooasis/followers","following_url":"https://api.github.com/users/ooasis/following{/other_user}","gists_url":"https://api.github.com/users/ooasis/gists{/gist_id}","starred_url":"https://api.github.com/users/ooasis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ooasis/subscriptions","organizations_url":"https://api.github.com/users/ooasis/orgs","repos_url":"https://api.github.com/users/ooasis/repos","events_url":"https://api.github.com/users/ooasis/events{/privacy}","received_events_url":"https://api.github.com/users/ooasis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T00:19:45Z","updated_at":"2016-07-31T00:19:45Z","author_association":"NONE","body":"Performance test results are attached here.  \n[perf_compare_netty_3vs4_1.x-branch.zip](https://github.com/apache/storm/files/392165/perf_compare_netty_3vs4_1.x-branch.zip)\n\nBaseline: current head of 1.x-branch (e55684b164fe99823a4ae3562b62867a26aaba97)\nNetty4:   57fbccc7e0d710ccaf04a5a828f0ff4cf29ec855\n\nIn addition to default configuration, \nio.netty.noPreferDirect=false\nio.netty.allocator.type=pooled\n\nfollowing configurations are also tested for netty 4.x\n\n-unpool\nio.netty.allocator.type=unpooled. Ask Netty to not use pooled allocation for buffer\n\n-nodirect\nio.netty.noPreferDirect=true.  Ask Netty to not use off-heap buffer allocation\n\n-unpool-nodirect\nio.netty.noPreferDirect=true\nio.netty.allocator.type=unpooled\n\nDue to the capacity of my laptop, I tested following loads: 2k, 5k, 10k.  At 10k, the CPU usage reaches above 85% and failures started to appear at startup. \n\nThe performance data seems to suggest\n- no big difference is observed comparing before/after netty upgrades\n  I suspect only a small percentage of traffic will cross worker instances (jvm) so Netty does not play a big role in performance measured\n- netty 4.x consumes a little more CPU and memory\n  The small memory increment may be simply b/c netty 4.x pulled in more classes.\n- netty 4.x has lower CPU consumption on GC\n  This is especially visible with the default configuration where off-heap buffer allocation is used.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236398478/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598590","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598590","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598590,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg1OTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T00:19:48Z","updated_at":"2025-01-24T14:00:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hsun-cnnxty commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1591\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1591</a></p>\n\n<p>    Performance test results are attached here.  <br/>\n    <span class=\"error\">&#91;perf_compare_netty_3vs4_1.x-branch.zip&#93;</span>(<a href=\"https://github.com/apache/storm/files/392165/perf_compare_netty_3vs4_1.x-branch.zip\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/files/392165/perf_compare_netty_3vs4_1.x-branch.zip</a>)</p>\n\n<p>    Baseline: current head of 1.x-branch (e55684b164fe99823a4ae3562b62867a26aaba97)<br/>\n    Netty4:   57fbccc7e0d710ccaf04a5a828f0ff4cf29ec855</p>\n\n<p>    In addition to default configuration, <br/>\n    io.netty.noPreferDirect=false<br/>\n    io.netty.allocator.type=pooled</p>\n\n<p>    following configurations are also tested for netty 4.x</p>\n\n<p>    -unpool<br/>\n    io.netty.allocator.type=unpooled. Ask Netty to not use pooled allocation for buffer</p>\n\n<p>    -nodirect<br/>\n    io.netty.noPreferDirect=true.  Ask Netty to not use off-heap buffer allocation</p>\n\n<p>    -unpool-nodirect<br/>\n    io.netty.noPreferDirect=true<br/>\n    io.netty.allocator.type=unpooled</p>\n\n<p>    Due to the capacity of my laptop, I tested following loads: 2k, 5k, 10k.  At 10k, the CPU usage reaches above 85% and failures started to appear at startup. </p>\n\n<p>    The performance data seems to suggest</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>no big difference is observed comparing before/after netty upgrades<br/>\n    I suspect only a small percentage of traffic will cross worker instances (jvm) so Netty does not play a big role in performance measured</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>netty 4.x consumes a little more CPU and memory<br/>\n    The small memory increment may be simply b/c netty 4.x pulled in more classes.</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>netty 4.x has lower CPU consumption on GC<br/>\n    This is especially visible with the default configuration where off-heap buffer allocation is used.</li>\n</ul>\n\n\n\n\n\n\n\n\n\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598590/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236398606","html_url":"https://github.com/apache/storm/pull/728#issuecomment-236398606","issue_url":"https://api.github.com/repos/apache/storm/issues/728","id":236398606,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjM5ODYwNg==","user":{"login":"ooasis","id":10720176,"node_id":"MDQ6VXNlcjEwNzIwMTc2","avatar_url":"https://avatars.githubusercontent.com/u/10720176?v=4","gravatar_id":"","url":"https://api.github.com/users/ooasis","html_url":"https://github.com/ooasis","followers_url":"https://api.github.com/users/ooasis/followers","following_url":"https://api.github.com/users/ooasis/following{/other_user}","gists_url":"https://api.github.com/users/ooasis/gists{/gist_id}","starred_url":"https://api.github.com/users/ooasis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ooasis/subscriptions","organizations_url":"https://api.github.com/users/ooasis/orgs","repos_url":"https://api.github.com/users/ooasis/repos","events_url":"https://api.github.com/users/ooasis/events{/privacy}","received_events_url":"https://api.github.com/users/ooasis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T00:22:27Z","updated_at":"2016-07-31T00:22:27Z","author_association":"NONE","body":"@HeartSaVioR @harshach \n\nI posted performance test results on  #1591.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236398606/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598595","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598595","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598595,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg1OTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T00:22:29Z","updated_at":"2025-01-24T14:00:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hsun-cnnxty commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/728\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/728</a></p>\n\n<p>    @HeartSaVioR @harshach </p>\n\n<p>    I posted performance test results on  #1591.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598595/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236398800","html_url":"https://github.com/apache/storm/pull/1591#issuecomment-236398800","issue_url":"https://api.github.com/repos/apache/storm/issues/1591","id":236398800,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjM5ODgwMA==","user":{"login":"ooasis","id":10720176,"node_id":"MDQ6VXNlcjEwNzIwMTc2","avatar_url":"https://avatars.githubusercontent.com/u/10720176?v=4","gravatar_id":"","url":"https://api.github.com/users/ooasis","html_url":"https://github.com/ooasis","followers_url":"https://api.github.com/users/ooasis/followers","following_url":"https://api.github.com/users/ooasis/following{/other_user}","gists_url":"https://api.github.com/users/ooasis/gists{/gist_id}","starred_url":"https://api.github.com/users/ooasis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ooasis/subscriptions","organizations_url":"https://api.github.com/users/ooasis/orgs","repos_url":"https://api.github.com/users/ooasis/repos","events_url":"https://api.github.com/users/ooasis/events{/privacy}","received_events_url":"https://api.github.com/users/ooasis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T00:26:49Z","updated_at":"2016-07-31T00:26:49Z","author_association":"NONE","body":"Seems the Travis CI build will fail at random places which are not related to this PR.\n\nFor example the last build failed due to\n\n`[ERROR] Failed to execute goal org.apache.maven.plugins:maven-remote-resources-plugin:1.2.1:process (default) on project flux-examples: Error resolving project artifact: Could not transfer artifact io.confluent:kafka-schema-registry-client:pom:1.0 from/to sonatype-apache (https://repository.apache.org/releases/): Connect to repository.apache.org:443 [repository.apache.org/207.244.88.143] failed: Connection timed out for project io.confluent:kafka-schema-registry-client:jar:1.0 -> [Help 1]\n`\n\nAny way to manually trigger a new CI build w/o code change?\n\n-thanks\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236398800/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598598","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598598","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598598,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg1OTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T00:26:51Z","updated_at":"2025-01-24T14:00:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hsun-cnnxty commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1591\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1591</a></p>\n\n<p>    Seems the Travis CI build will fail at random places which are not related to this PR.</p>\n\n<p>    For example the last build failed due to</p>\n\n<p>    `<span class=\"error\">&#91;ERROR&#93;</span> Failed to execute goal org.apache.maven.plugins:maven-remote-resources-plugin:1.2.1:process (default) on project flux-examples: Error resolving project artifact: Could not transfer artifact io.confluent:kafka-schema-registry-client:pom:1.0 from/to sonatype-apache (<a href=\"https://repository.apache.org/releases/):\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://repository.apache.org/releases/):</a> Connect to repository.apache.org:443 <span class=\"error\">&#91;repository.apache.org/207.244.88.143&#93;</span> failed: Connection timed out for project io.confluent:kafka-schema-registry-client:jar:1.0 -> <span class=\"error\">&#91;Help 1&#93;</span><br/>\n    `</p>\n\n<p>    Any way to manually trigger a new CI build w/o code change?</p>\n\n<p>    -thanks</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598598/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612695387","html_url":"https://github.com/apache/storm/issues/5270#issuecomment-2612695387","issue_url":"https://api.github.com/repos/apache/storm/issues/5270","id":2612695387,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTUzODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T02:47:40Z","updated_at":"2025-01-24T14:42:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=wheat9\">wheat9</a>:</i>\n<p>The core jar essentially compiles the SQL statements into topology.</p>\n\n<p>The topology should only depend on the storm-sql-runtime jar and the application jars (e.g., connectors for kafka). Please feel free to fix it if this is not the case.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612695387/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657575","html_url":"https://github.com/apache/storm/issues/5121#issuecomment-2612657575","issue_url":"https://api.github.com/repos/apache/storm/issues/5121","id":2612657575,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTc1NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T06:08:35Z","updated_at":"2025-01-24T14:25:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1597#discussion_r72898640\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1597#discussion_r72898640</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/command/GetErrors.java &#8212;<br/>\n    @@ -0,0 +1,80 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.command;<br/>\n    +<br/>\n    +import org.apache.storm.generated.ErrorInfo;<br/>\n    +import org.apache.storm.generated.GetInfoOptions;<br/>\n    +import org.apache.storm.generated.Nimbus;<br/>\n    +import org.apache.storm.generated.NumErrorsChoice;<br/>\n    +import org.apache.storm.generated.TopologyInfo;<br/>\n    +import org.apache.storm.utils.NimbusClient;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class GetErrors {<br/>\n    +    public static void main(String[] args) throws Exception {<br/>\n    +if (args.length == 0) {<br/>\n    +    throw new IllegalArgumentException(\"You should provide topology name.\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes it seems better. I'll address it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657575/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236413891","html_url":"https://github.com/apache/storm/pull/1597#issuecomment-236413891","issue_url":"https://api.github.com/repos/apache/storm/issues/1597","id":236413891,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQxMzg5MQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T06:24:08Z","updated_at":"2016-07-31T06:24:08Z","author_association":"CONTRIBUTOR","body":"@abhishekagarwal87 @satishd \nThanks for the review. I addressed all of comments.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236413891/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657579","html_url":"https://github.com/apache/storm/issues/5121#issuecomment-2612657579","issue_url":"https://api.github.com/repos/apache/storm/issues/5121","id":2612657579,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTc1Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T06:24:11Z","updated_at":"2025-01-24T14:25:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1597\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1597</a></p>\n\n<p>    @abhishekagarwal87 @satishd <br/>\n    Thanks for the review. I addressed all of comments.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657579/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236417727","html_url":"https://github.com/apache/storm/pull/1595#issuecomment-236417727","issue_url":"https://api.github.com/repos/apache/storm/issues/1595","id":236417727,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQxNzcyNw==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:23:21Z","updated_at":"2016-07-31T08:23:21Z","author_association":"CONTRIBUTOR","body":"@ptgoetz @harshach @abhishekagarwal87 \nI just had the limitations of current metrics feature only in my mind, but it would be better to write it down and share to persuade the need for new metrics feature.\n\nI didn't grant the wiki access so I just use google doc. Please let me know if we want to have this in Apache infra. I can move this out to wiki, or just post to dev@ mailing list.\n\nhttps://docs.google.com/document/d/11H3STXr2QTnfOqisgOnvNt8TjXS_cSqb86VM6vdAo8s/edit?usp=sharing\n\n@unsleepy22 AFAIK you worked on the change of JStorm metrics. Could you check the doc and confirm that JStorm metrics feature addressed the limitations of Storm metrics feature?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236417727/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941953","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941953","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941953,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:23:23Z","updated_at":"2025-01-24T16:35:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595</a></p>\n\n<p>    @ptgoetz @harshach @abhishekagarwal87 <br/>\n    I just had the limitations of current metrics feature only in my mind, but it would be better to write it down and share to persuade the need for new metrics feature.</p>\n\n<p>    I didn't grant the wiki access so I just use google doc. Please let me know if we want to have this in Apache infra. I can move this out to wiki, or just post to dev@ mailing list.</p>\n\n<p>    <a href=\"https://docs.google.com/document/d/11H3STXr2QTnfOqisgOnvNt8TjXS_cSqb86VM6vdAo8s/edit?usp=sharing\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://docs.google.com/document/d/11H3STXr2QTnfOqisgOnvNt8TjXS_cSqb86VM6vdAo8s/edit?usp=sharing</a></p>\n\n<p>    @unsleepy22 AFAIK you worked on the change of JStorm metrics. Could you check the doc and confirm that JStorm metrics feature addressed the limitations of Storm metrics feature?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941953/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236418257","html_url":"https://github.com/apache/storm/pull/1591#issuecomment-236418257","issue_url":"https://api.github.com/repos/apache/storm/issues/1591","id":236418257,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQxODI1Nw==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:38:26Z","updated_at":"2016-07-31T08:38:26Z","author_association":"CONTRIBUTOR","body":"You can close and reopen this PR to retrigger. Btw, apache repository seems to be unstable recent days. I saw other build failures due to repository connectivity issue.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236418257/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598600","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598600","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598600,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg2MDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:38:29Z","updated_at":"2025-01-24T14:00:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1591\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1591</a></p>\n\n<p>    You can close and reopen this PR to retrigger. Btw, apache repository seems to be unstable recent days. I saw other build failures due to repository connectivity issue.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598600/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236418492","html_url":"https://github.com/apache/storm/pull/1598#issuecomment-236418492","issue_url":"https://api.github.com/repos/apache/storm/issues/1598","id":236418492,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQxODQ5Mg==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:44:26Z","updated_at":"2016-07-31T08:44:26Z","author_association":"CONTRIBUTOR","body":"Thanks @satishd @harshach for reviewing. Addressed or commented review comments.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236418492/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942517","html_url":"https://github.com/apache/storm/issues/5792#issuecomment-2612942517","issue_url":"https://api.github.com/repos/apache/storm/issues/5792","id":2612942517,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDI1MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:44:30Z","updated_at":"2025-01-24T16:36:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1598\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1598</a></p>\n\n<p>    Thanks @satishd @harshach for reviewing. Addressed or commented review comments.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942517/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942323","html_url":"https://github.com/apache/storm/issues/5791#issuecomment-2612942323","issue_url":"https://api.github.com/repos/apache/storm/issues/5791","id":2612942323,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDIzMjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:50:07Z","updated_at":"2025-01-24T16:36:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1599\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1599</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942326","html_url":"https://github.com/apache/storm/issues/5791#issuecomment-2612942326","issue_url":"https://api.github.com/repos/apache/storm/issues/5791","id":2612942326,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDIzMjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:50:42Z","updated_at":"2025-01-24T16:36:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Merged into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942326/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654894","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654894","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654894,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4OTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:57:43Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72900809\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72900809</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/Utils.java &#8212;<br/>\n    @@ -2364,4 +2374,23 @@ public static long bitXor(Long a, Long b) </p>\n{\n     return rtn;\n }\n\n<p>    +    /**<br/>\n    +     * converts a clojure PersistentMap to java HashMap<br/>\n    +     */<br/>\n    +    public static Map<String, Object> convertMap(Map map) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK makes sense.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654894/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236419110","html_url":"https://github.com/apache/storm/pull/1445#issuecomment-236419110","issue_url":"https://api.github.com/repos/apache/storm/issues/1445","id":236419110,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQxOTExMA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:58:49Z","updated_at":"2016-08-02T00:57:50Z","author_association":"CONTRIBUTOR","body":"@unsleepy22 Sure. I'll leave another comment when I finish review for the first pass.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236419110/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654899","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654899","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654899,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ4OTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T08:58:50Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445</a></p>\n\n<p>    @unsleepy22 Sure. I'll level another comment when I finish review for the first pass.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654899/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654909","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654909","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654909,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5MDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T09:24:08Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72901161\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72901161</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Task.java &#8212;<br/>\n    @@ -179,23 +180,22 @@ public BuiltinMetrics getBuiltInMetrics() {<br/>\n private TopologyContext mkTopologyContext(StormTopology topology) throws IOException {<br/>\n     Map conf = (Map) workerData.get(\"conf\");<br/>\n     return new TopologyContext(</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>topology,</li>\n\t<li>(Map) workerData.get(\"storm-conf\"),</li>\n\t<li>(Map<Integer, String>) workerData.get(\"task->component\"),</li>\n\t<li>(Map<String, List<Integer>>) workerData.get(\"component->sorted-tasks\"),</li>\n\t<li>(Map<String, Map<String, Fields>>) workerData.get(\"component->stream->fields\"),</li>\n\t<li>(String) workerData.get(\"storm-id\"),</li>\n\t<li>ConfigUtils.supervisorStormResourcesPath(ConfigUtils.supervisorStormDistRoot(conf, (String) workerData.get(\"storm-id\"))),</li>\n\t<li>ConfigUtils.workerPidsRoot(conf, (String) workerData.get(\"worker-id\")),</li>\n\t<li>taskId,</li>\n\t<li>(Integer) workerData.get(\"port\"),</li>\n\t<li>(List<Integer>) workerData.get(\"task-ids\"),</li>\n\t<li>(Map<String, Object>) workerData.get(\"default-shared-resources\"),</li>\n\t<li>(Map<String, Object>) workerData.get(\"user-shared-resources\"),</li>\n\t<li>(Map<String, Object>) executorData.get(\"shared-executor-data\"),</li>\n\t<li>(Map<Integer, Map<Integer, Map<String, IMetric>>>) executorData.get(\"interval->task->metric-registry\"),</li>\n\t<li>(clojure.lang.Atom) executorData.get(\"open-or-prepare-was-called?\")</li>\n\t<li>);<br/>\n    +topology,<br/>\n    +(Map) workerData.get(\"storm-conf\"),\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    It seems not addressed to here. (at least github diff shows this unmodified)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654909/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654913","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654913","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654913,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5MTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T09:32:00Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72901269\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72901269</a></p>\n\n<p>    &#8212; Diff: storm-core/test/clj/integration/org/apache/storm/integration_test.clj &#8212;<br/>\n    @@ -403,17 +403,18 @@<br/>\n     (def bolt-prepared? (atom false))<br/>\n     (defbolt prepare-tracked-bolt [] {:prepare true}<br/>\n       <span class=\"error\">&#91;conf context collector&#93;</span>  </p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(reset! bolt-prepared? true)<br/>\n       (bolt<br/>\n(execute <span class=\"error\">&#91;tuple&#93;</span><br/>\n    +    (reset! bolt-prepared? true)\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Could you elaborate why this and below spout change is necessary?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612930633","html_url":"https://github.com/apache/storm/issues/5777#issuecomment-2612930633","issue_url":"https://api.github.com/repos/apache/storm/issues/5777","id":2612930633,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MzA2MzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:16:06Z","updated_at":"2025-01-24T16:30:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1593\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1593</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612930633/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612930635","html_url":"https://github.com/apache/storm/issues/5777#issuecomment-2612930635","issue_url":"https://api.github.com/repos/apache/storm/issues/5777","id":2612930635,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MzA2MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:17:52Z","updated_at":"2025-01-24T16:30:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellina\" class=\"user-hover\" rel=\"abellina\">Alessandro Bellina</a>, I merged into master, 1.x, 1.0.x branches.</p>\n\n<p>NOTE: There're merge conflicts which is hard to continue. So I apply changes on 1.x and 1.0.x manually.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612930635/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878802","html_url":"https://github.com/apache/storm/issues/5429#issuecomment-2612878802","issue_url":"https://api.github.com/repos/apache/storm/issues/5429","id":2612878802,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg4MDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:40:08Z","updated_at":"2025-01-24T16:05:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1522\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1522</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878807","html_url":"https://github.com/apache/storm/issues/5429#issuecomment-2612878807","issue_url":"https://api.github.com/repos/apache/storm/issues/5429","id":2612878807,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg4MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:41:46Z","updated_at":"2025-01-24T16:05:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lujinhong\" class=\"user-hover\" rel=\"lujinhong\">lujinhong</a>, I merged into master, 1.x, 1.0.x branches.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878807/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236434152","html_url":"https://github.com/apache/storm/pull/1555#issuecomment-236434152","issue_url":"https://api.github.com/repos/apache/storm/issues/1555","id":236434152,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQzNDE1Mg==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:50:31Z","updated_at":"2016-07-31T14:50:31Z","author_association":"CONTRIBUTOR","body":"Seems like it's duplicated with STORM-1726, and PR is submitted for that issue. \nCould you close this and also JIRA issue?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236434152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612899358","html_url":"https://github.com/apache/storm/issues/5561#issuecomment-2612899358","issue_url":"https://api.github.com/repos/apache/storm/issues/5561","id":2612899358,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4OTkzNTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:50:33Z","updated_at":"2025-01-24T16:14:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1555\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1555</a></p>\n\n<p>    Seems like it's duplicated with <a href=\"https://issues.apache.org/jira/browse/STORM-1726\" title=\"use Put#addColumn to replace the deprecated Put#add\" class=\"issue-link\" data-issue-key=\"STORM-1726\"><del>STORM-1726</del></a>, and PR is submitted for that issue. <br/>\n    Could you close this and also JIRA issue?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612899358/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236434374","html_url":"https://github.com/apache/storm/pull/1555#issuecomment-236434374","issue_url":"https://api.github.com/repos/apache/storm/issues/1555","id":236434374,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQzNDM3NA==","user":{"login":"darionyaphet","id":4414314,"node_id":"MDQ6VXNlcjQ0MTQzMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/4414314?v=4","gravatar_id":"","url":"https://api.github.com/users/darionyaphet","html_url":"https://github.com/darionyaphet","followers_url":"https://api.github.com/users/darionyaphet/followers","following_url":"https://api.github.com/users/darionyaphet/following{/other_user}","gists_url":"https://api.github.com/users/darionyaphet/gists{/gist_id}","starred_url":"https://api.github.com/users/darionyaphet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darionyaphet/subscriptions","organizations_url":"https://api.github.com/users/darionyaphet/orgs","repos_url":"https://api.github.com/users/darionyaphet/repos","events_url":"https://api.github.com/users/darionyaphet/events{/privacy}","received_events_url":"https://api.github.com/users/darionyaphet/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:55:25Z","updated_at":"2016-07-31T14:55:25Z","author_association":"CONTRIBUTOR","body":"Yes It's duplicated with `STORM-1726` and I close this one \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236434374/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612899365","html_url":"https://github.com/apache/storm/issues/5561#issuecomment-2612899365","issue_url":"https://api.github.com/repos/apache/storm/issues/5561","id":2612899365,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4OTkzNjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:55:28Z","updated_at":"2025-01-24T16:14:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user darionyaphet commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1555\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1555</a></p>\n\n<p>    Yes It's duplicated with `<a href=\"https://issues.apache.org/jira/browse/STORM-1726\" title=\"use Put#addColumn to replace the deprecated Put#add\" class=\"issue-link\" data-issue-key=\"STORM-1726\"><del>STORM-1726</del></a>` and I close this one </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612899365/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925752","html_url":"https://github.com/apache/storm/issues/5745#issuecomment-2612925752","issue_url":"https://api.github.com/repos/apache/storm/issues/5745","id":2612925752,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjU3NTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T14:55:28Z","updated_at":"2025-01-24T16:27:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user darionyaphet closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1555\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1555</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612925752/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236434863","html_url":"https://github.com/apache/storm/pull/1395#issuecomment-236434863","issue_url":"https://api.github.com/repos/apache/storm/issues/1395","id":236434863,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQzNDg2Mw==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T15:04:00Z","updated_at":"2016-07-31T15:04:00Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236434863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236435890","html_url":"https://github.com/apache/storm/pull/1597#issuecomment-236435890","issue_url":"https://api.github.com/repos/apache/storm/issues/1597","id":236435890,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQzNTg5MA==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T15:22:07Z","updated_at":"2016-07-31T15:22:07Z","author_association":"MEMBER","body":"+1 LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236435890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657581","html_url":"https://github.com/apache/storm/issues/5121#issuecomment-2612657581","issue_url":"https://api.github.com/repos/apache/storm/issues/5121","id":2612657581,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTc1ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T15:22:09Z","updated_at":"2025-01-24T14:25:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1597\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1597</a></p>\n\n<p>    +1 LGTM</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657581/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236435948","html_url":"https://github.com/apache/storm/pull/1598#issuecomment-236435948","issue_url":"https://api.github.com/repos/apache/storm/issues/1598","id":236435948,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQzNTk0OA==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T15:23:03Z","updated_at":"2016-07-31T15:23:03Z","author_association":"MEMBER","body":"+1 LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236435948/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942519","html_url":"https://github.com/apache/storm/issues/5792#issuecomment-2612942519","issue_url":"https://api.github.com/repos/apache/storm/issues/5792","id":2612942519,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDI1MTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T15:23:05Z","updated_at":"2025-01-24T16:36:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1598\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1598</a></p>\n\n<p>    +1 LGTM</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942519/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612930486","html_url":"https://github.com/apache/storm/issues/5776#issuecomment-2612930486","issue_url":"https://api.github.com/repos/apache/storm/issues/5776","id":2612930486,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MzA0ODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T15:38:26Z","updated_at":"2025-01-24T16:30:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellina\">abellina</a>:</i>\n<p>I added a screenshot of the new supervisor page with the worker/component table. Also added one for the topology page counterpart.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612930486/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942524","html_url":"https://github.com/apache/storm/issues/5792#issuecomment-2612942524","issue_url":"https://api.github.com/repos/apache/storm/issues/5792","id":2612942524,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDI1MjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T22:31:08Z","updated_at":"2025-01-24T16:36:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1598\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1598</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942524/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942529","html_url":"https://github.com/apache/storm/issues/5792#issuecomment-2612942529","issue_url":"https://api.github.com/repos/apache/storm/issues/5792","id":2612942529,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDI1Mjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T22:32:01Z","updated_at":"2025-01-24T16:36:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Merged into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942529/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657584","html_url":"https://github.com/apache/storm/issues/5121#issuecomment-2612657584","issue_url":"https://api.github.com/repos/apache/storm/issues/5121","id":2612657584,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTc1ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T22:33:19Z","updated_at":"2025-01-24T14:25:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1597\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1597</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657584/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657592","html_url":"https://github.com/apache/storm/issues/5121#issuecomment-2612657592","issue_url":"https://api.github.com/repos/apache/storm/issues/5121","id":2612657592,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTc1OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T22:42:48Z","updated_at":"2025-01-24T14:25:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Merged into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657592/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612659031","html_url":"https://github.com/apache/storm/issues/5132#issuecomment-2612659031","issue_url":"https://api.github.com/repos/apache/storm/issues/5132","id":2612659031,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTkwMzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-07-31T23:00:16Z","updated_at":"2025-01-24T14:26:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>We're removing multilang test so while it can be a new task, it's not a part of port. Closing as Invalid.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612659031/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612695393","html_url":"https://github.com/apache/storm/issues/5270#issuecomment-2612695393","issue_url":"https://api.github.com/repos/apache/storm/issues/5270","id":2612695393,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTUzOTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T00:27:44Z","updated_at":"2025-01-24T14:42:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Thanks for clarifying. Do you have something in mind to resolve this issue? <br/>\nI have general approach in mind but it would be good if you share your idea around this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612695393/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654918","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654918","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654918,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:32:10Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72920746\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72920746</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Task.java &#8212;<br/>\n    @@ -179,23 +180,22 @@ public BuiltinMetrics getBuiltInMetrics() {<br/>\n private TopologyContext mkTopologyContext(StormTopology topology) throws IOException {<br/>\n     Map conf = (Map) workerData.get(\"conf\");<br/>\n     return new TopologyContext(</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>topology,</li>\n\t<li>(Map) workerData.get(\"storm-conf\"),</li>\n\t<li>(Map<Integer, String>) workerData.get(\"task->component\"),</li>\n\t<li>(Map<String, List<Integer>>) workerData.get(\"component->sorted-tasks\"),</li>\n\t<li>(Map<String, Map<String, Fields>>) workerData.get(\"component->stream->fields\"),</li>\n\t<li>(String) workerData.get(\"storm-id\"),</li>\n\t<li>ConfigUtils.supervisorStormResourcesPath(ConfigUtils.supervisorStormDistRoot(conf, (String) workerData.get(\"storm-id\"))),</li>\n\t<li>ConfigUtils.workerPidsRoot(conf, (String) workerData.get(\"worker-id\")),</li>\n\t<li>taskId,</li>\n\t<li>(Integer) workerData.get(\"port\"),</li>\n\t<li>(List<Integer>) workerData.get(\"task-ids\"),</li>\n\t<li>(Map<String, Object>) workerData.get(\"default-shared-resources\"),</li>\n\t<li>(Map<String, Object>) workerData.get(\"user-shared-resources\"),</li>\n\t<li>(Map<String, Object>) executorData.get(\"shared-executor-data\"),</li>\n\t<li>(Map<Integer, Map<Integer, Map<String, IMetric>>>) executorData.get(\"interval->task->metric-registry\"),</li>\n\t<li>(clojure.lang.Atom) executorData.get(\"open-or-prepare-was-called?\")</li>\n\t<li>);<br/>\n    +topology,<br/>\n    +(Map) workerData.get(\"storm-conf\"),\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Oh, changed in StormCommon, but missed here. Will address.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907900","html_url":"https://github.com/apache/storm/issues/5622#issuecomment-2612907900","issue_url":"https://api.github.com/repos/apache/storm/issues/5622","id":2612907900,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDc5MDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:50:35Z","updated_at":"2025-01-24T16:18:54Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1586#discussion_r72921486\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1586#discussion_r72921486</a></p>\n\n<p>    &#8212; Diff: external/storm-kinesis/src/main/java/org/apache/storm/kinesis/spout/KinesisRecordsManager.java &#8212;<br/>\n    @@ -0,0 +1,566 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.kinesis.spout;<br/>\n    +<br/>\n    +import com.amazonaws.regions.Region;<br/>\n    +import com.amazonaws.services.kinesis.AmazonKinesisClient;<br/>\n    +import com.amazonaws.services.kinesis.model.DescribeStreamRequest;<br/>\n    +import com.amazonaws.services.kinesis.model.DescribeStreamResult;<br/>\n    +import com.amazonaws.services.kinesis.model.ExpiredIteratorException;<br/>\n    +import com.amazonaws.services.kinesis.model.GetRecordsRequest;<br/>\n    +import com.amazonaws.services.kinesis.model.GetRecordsResult;<br/>\n    +import com.amazonaws.services.kinesis.model.GetShardIteratorRequest;<br/>\n    +import com.amazonaws.services.kinesis.model.GetShardIteratorResult;<br/>\n    +import com.amazonaws.services.kinesis.model.ProvisionedThroughputExceededException;<br/>\n    +import com.amazonaws.services.kinesis.model.Record;<br/>\n    +import com.amazonaws.services.kinesis.model.Shard;<br/>\n    +import com.amazonaws.services.kinesis.model.ShardIteratorType;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.CuratorFrameworkFactory;<br/>\n    +import org.apache.curator.retry.RetryNTimes;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.math.BigInteger;<br/>\n    +import java.nio.charset.Charset;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Date;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Iterator;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.TreeSet;<br/>\n    +<br/>\n    +class KinesisRecordsManager {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(KinesisRecordsManager.class);<br/>\n    +    // zk interaction object<br/>\n    +    private transient CuratorFramework curatorFramework;<br/>\n    +    // Kinesis Spout Config object<br/>\n    +    private transient final Config config;<br/>\n    +    // Queue of records per shard fetched from kinesis and are waiting to be emitted<br/>\n    +    private transient Map<String, LinkedList<Record>> toEmitPerShard = new HashMap<>();<br/>\n    +    // Map of records  that were fetched from kinesis as a result of failure and are waiting to be emitted<br/>\n    +    private transient Map<KinesisMessageId, Record> failedandFetchedRecords = new HashMap<>();<br/>\n    +    // Sequence numbers per shard that have been emitted. LinkedHashSet as we need to remove on ack or fail. At the same time order is needed to figure out the<br/>\n    +    // sequence number to commit. Logic explained in commit<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> emittedPerShard = new HashMap<>();<br/>\n    +    // sorted acked sequence numbers - needed to figure out what sequence number can be committed<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> ackedPerShard = new HashMap<>();<br/>\n    +    // sorted failed sequence numbers - needed to figure out what sequence number can be committed<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> failedPerShard = new HashMap<>();<br/>\n    +    // shard iterator corresponding to position in shard for new messages<br/>\n    +    private transient Map<String, String> shardIteratorPerShard = new HashMap<>();<br/>\n    +    // last fetched sequence number corresponding to position in shard<br/>\n    +    private transient Map<String, String> fetchedSequenceNumberPerShard = new HashMap<>();<br/>\n    +    // shard iterator corresponding to position in shard for failed messages<br/>\n    +    private transient Map<KinesisMessageId, String> shardIteratorPerFailedMessage = new HashMap<>();<br/>\n    +    // timestamp to decide when to commit to zk again<br/>\n    +    private transient long lastCommitTime;<br/>\n    +    // boolean to track deactivated state<br/>\n    +    private transient boolean deactivated;<br/>\n    +    private transient AmazonKinesisClient kinesisClient;<br/>\n    +<br/>\n    +    KinesisRecordsManager (Config config) </p>\n{\n    +this.config = config;\n    +    }\n<p>    +<br/>\n    +    void initialize (int myTaskIndex, int totalTasks) {<br/>\n    +deactivated = false;<br/>\n    +lastCommitTime = System.currentTimeMillis();<br/>\n    +initializeKinesisClient();<br/>\n    +initializeCurator();<br/>\n    +List<Shard> shards = this.getShards();<br/>\n    +LOG.info(\"myTaskIndex is \" + myTaskIndex);<br/>\n    +LOG.info(\"totalTasks is \" + totalTasks);<br/>\n    +int i = myTaskIndex;<br/>\n    +while (i < shards.size()) </p>\n{\n    +    LOG.info(\"Shard id \" + shards.get(i).getShardId() + \" assigned to task \" + myTaskIndex);\n    +    toEmitPerShard.put(shards.get(i).getShardId(), new LinkedList<Record>());\n    +    i += totalTasks;\n    +}\n<p>    +initializeFetchedSequenceNumbers();<br/>\n    +refreshShardIteratorsForNewRecords();<br/>\n    +    }<br/>\n    +<br/>\n    +    void next (SpoutOutputCollector collector) {<br/>\n    +if (shouldCommit()) </p>\n{\n    +    commit();\n    +}\n<p>    +KinesisMessageId failedMessageId = config.getFailedMessageRetryHandler().getNextFailedMessageToRetry();<br/>\n    +if (failedMessageId  != null) {<br/>\n    +    // if the retry service returns a message that is not in failed set then ignore it. should never happen<br/>\n    +    BigInteger failedSequenceNumber = new BigInteger(failedMessageId.getSequenceNumber());<br/>\n    +    if (failedPerShard.containsKey(failedMessageId.getShardId()) && failedPerShard.get(failedMessageId.getShardId()).contains(failedSequenceNumber)) {<br/>\n    +if (!failedandFetchedRecords.containsKey(failedMessageId)) </p>\n{\n    +    fetchFailedRecords(failedMessageId);\n    +}\n<p>    +if (emitFailedRecord(collector, failedMessageId)) </p>\n{\n    +    failedPerShard.get(failedMessageId.getShardId()).remove(failedSequenceNumber);\n    +    config.getFailedMessageRetryHandler().failedMessageEmitted(failedMessageId);\n    +    return;\n    +}\n<p> else </p>\n{\n    +    LOG.debug(\"failedMessageEmitted not called on retrier for \" + failedMessageId + \". This can happen a few times but should not happen \" +\n    +    \"infinitely\");\n    +}\n<p>    +    } else </p>\n{\n    +LOG.debug(\"failedPerShard does not contain \" + failedMessageId + \". This should never happen.\");\n    +    }\n<p>    +}<br/>\n    +LOG.debug(\"No failed record to emit for now. Hence will try to emit new records\");<br/>\n    +// if maximum uncommitted records count has reached, so dont emit any new records and return<br/>\n    +if (!(getUncommittedRecordsCount() < config.getMaxUncommittedRecords())) </p>\n{\n    +    LOG.debug(\"maximum uncommitted records count has reached. so not emitting any new records and returning\");\n    +    return;\n    +}\n<p>    +// early return as no shard is assigned - probably because number of executors > number of shards<br/>\n    +if (toEmitPerShard.isEmpty()) </p>\n{\n    +    LOG.debug(\"No shard is assigned to this task. Hence not emitting any tuple.\");\n    +    return;\n    +}\n<p>    +<br/>\n    +if (shouldFetchNewRecords()) </p>\n{\n    +    fetchNewRecords();\n    +}\n<p>    +emitNewRecord(collector);<br/>\n    +    }<br/>\n    +<br/>\n    +    void ack (KinesisMessageId kinesisMessageId) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @priyank5485 looks like this method is going through a switch statement of sort, i.e its checking bunch if conditions and doing actions on that part. It will be great if you can add why you are doing it. For the future reference it will be important as this part is most important on when to ack a message.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907900/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907907","html_url":"https://github.com/apache/storm/issues/5622#issuecomment-2612907907","issue_url":"https://api.github.com/repos/apache/storm/issues/5622","id":2612907907,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDc5MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:51:21Z","updated_at":"2025-01-24T16:18:54Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1586#discussion_r72921532\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1586#discussion_r72921532</a></p>\n\n<p>    &#8212; Diff: external/storm-kinesis/src/main/java/org/apache/storm/kinesis/spout/KinesisRecordsManager.java &#8212;<br/>\n    @@ -0,0 +1,566 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.kinesis.spout;<br/>\n    +<br/>\n    +import com.amazonaws.regions.Region;<br/>\n    +import com.amazonaws.services.kinesis.AmazonKinesisClient;<br/>\n    +import com.amazonaws.services.kinesis.model.DescribeStreamRequest;<br/>\n    +import com.amazonaws.services.kinesis.model.DescribeStreamResult;<br/>\n    +import com.amazonaws.services.kinesis.model.ExpiredIteratorException;<br/>\n    +import com.amazonaws.services.kinesis.model.GetRecordsRequest;<br/>\n    +import com.amazonaws.services.kinesis.model.GetRecordsResult;<br/>\n    +import com.amazonaws.services.kinesis.model.GetShardIteratorRequest;<br/>\n    +import com.amazonaws.services.kinesis.model.GetShardIteratorResult;<br/>\n    +import com.amazonaws.services.kinesis.model.ProvisionedThroughputExceededException;<br/>\n    +import com.amazonaws.services.kinesis.model.Record;<br/>\n    +import com.amazonaws.services.kinesis.model.Shard;<br/>\n    +import com.amazonaws.services.kinesis.model.ShardIteratorType;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.CuratorFrameworkFactory;<br/>\n    +import org.apache.curator.retry.RetryNTimes;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.math.BigInteger;<br/>\n    +import java.nio.charset.Charset;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Date;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Iterator;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.TreeSet;<br/>\n    +<br/>\n    +class KinesisRecordsManager {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(KinesisRecordsManager.class);<br/>\n    +    // zk interaction object<br/>\n    +    private transient CuratorFramework curatorFramework;<br/>\n    +    // Kinesis Spout Config object<br/>\n    +    private transient final Config config;<br/>\n    +    // Queue of records per shard fetched from kinesis and are waiting to be emitted<br/>\n    +    private transient Map<String, LinkedList<Record>> toEmitPerShard = new HashMap<>();<br/>\n    +    // Map of records  that were fetched from kinesis as a result of failure and are waiting to be emitted<br/>\n    +    private transient Map<KinesisMessageId, Record> failedandFetchedRecords = new HashMap<>();<br/>\n    +    // Sequence numbers per shard that have been emitted. LinkedHashSet as we need to remove on ack or fail. At the same time order is needed to figure out the<br/>\n    +    // sequence number to commit. Logic explained in commit<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> emittedPerShard = new HashMap<>();<br/>\n    +    // sorted acked sequence numbers - needed to figure out what sequence number can be committed<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> ackedPerShard = new HashMap<>();<br/>\n    +    // sorted failed sequence numbers - needed to figure out what sequence number can be committed<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> failedPerShard = new HashMap<>();<br/>\n    +    // shard iterator corresponding to position in shard for new messages<br/>\n    +    private transient Map<String, String> shardIteratorPerShard = new HashMap<>();<br/>\n    +    // last fetched sequence number corresponding to position in shard<br/>\n    +    private transient Map<String, String> fetchedSequenceNumberPerShard = new HashMap<>();<br/>\n    +    // shard iterator corresponding to position in shard for failed messages<br/>\n    +    private transient Map<KinesisMessageId, String> shardIteratorPerFailedMessage = new HashMap<>();<br/>\n    +    // timestamp to decide when to commit to zk again<br/>\n    +    private transient long lastCommitTime;<br/>\n    +    // boolean to track deactivated state<br/>\n    +    private transient boolean deactivated;<br/>\n    +    private transient AmazonKinesisClient kinesisClient;<br/>\n    +<br/>\n    +    KinesisRecordsManager (Config config) </p>\n{\n    +this.config = config;\n    +    }\n<p>    +<br/>\n    +    void initialize (int myTaskIndex, int totalTasks) {<br/>\n    +deactivated = false;<br/>\n    +lastCommitTime = System.currentTimeMillis();<br/>\n    +initializeKinesisClient();<br/>\n    +initializeCurator();<br/>\n    +List<Shard> shards = this.getShards();<br/>\n    +LOG.info(\"myTaskIndex is \" + myTaskIndex);<br/>\n    +LOG.info(\"totalTasks is \" + totalTasks);<br/>\n    +int i = myTaskIndex;<br/>\n    +while (i < shards.size()) </p>\n{\n    +    LOG.info(\"Shard id \" + shards.get(i).getShardId() + \" assigned to task \" + myTaskIndex);\n    +    toEmitPerShard.put(shards.get(i).getShardId(), new LinkedList<Record>());\n    +    i += totalTasks;\n    +}\n<p>    +initializeFetchedSequenceNumbers();<br/>\n    +refreshShardIteratorsForNewRecords();<br/>\n    +    }<br/>\n    +<br/>\n    +    void next (SpoutOutputCollector collector) {<br/>\n    +if (shouldCommit()) </p>\n{\n    +    commit();\n    +}<br/>\n    +KinesisMessageId failedMessageId = config.getFailedMessageRetryHandler().getNextFailedMessageToRetry();<br/>\n    +if (failedMessageId  != null) {<br/>\n    +    // if the retry service returns a message that is not in failed set then ignore it. should never happen<br/>\n    +    BigInteger failedSequenceNumber = new BigInteger(failedMessageId.getSequenceNumber());<br/>\n    +    if (failedPerShard.containsKey(failedMessageId.getShardId()) && failedPerShard.get(failedMessageId.getShardId()).contains(failedSequenceNumber)) {<br/>\n    +if (!failedandFetchedRecords.containsKey(failedMessageId)) {\n    +    fetchFailedRecords(failedMessageId);\n    +}<br/>\n    +if (emitFailedRecord(collector, failedMessageId)) {\n    +    failedPerShard.get(failedMessageId.getShardId()).remove(failedSequenceNumber);\n    +    config.getFailedMessageRetryHandler().failedMessageEmitted(failedMessageId);\n    +    return;\n    +} else {\n    +    LOG.debug(\"failedMessageEmitted not called on retrier for \" + failedMessageId + \". This can happen a few times but should not happen \" +\n    +    \"infinitely\");\n    +}<br/>\n    +    } else {\n    +LOG.debug(\"failedPerShard does not contain \" + failedMessageId + \". This should never happen.\");\n    +    }<br/>\n    +}<br/>\n    +LOG.debug(\"No failed record to emit for now. Hence will try to emit new records\");<br/>\n    +// if maximum uncommitted records count has reached, so dont emit any new records and return<br/>\n    +if (!(getUncommittedRecordsCount() < config.getMaxUncommittedRecords())) {\n    +    LOG.debug(\"maximum uncommitted records count has reached. so not emitting any new records and returning\");\n    +    return;\n    +}<br/>\n    +// early return as no shard is assigned - probably because number of executors > number of shards<br/>\n    +if (toEmitPerShard.isEmpty()) {\n    +    LOG.debug(\"No shard is assigned to this task. Hence not emitting any tuple.\");\n    +    return;\n    +}<br/>\n    +<br/>\n    +if (shouldFetchNewRecords()) {\n    +    fetchNewRecords();\n    +}<br/>\n    +emitNewRecord(collector);<br/>\n    +    }<br/>\n    +<br/>\n    +    void ack (KinesisMessageId kinesisMessageId) {<br/>\n    +// for an acked message add it to acked set and remove it from emitted and failed<br/>\n    +String shardId = kinesisMessageId.getShardId();<br/>\n    +BigInteger sequenceNumber = new BigInteger(kinesisMessageId.getSequenceNumber());<br/>\n    +LOG.debug(\"Ack received for shardId: \" + shardId + \" sequenceNumber: \" + sequenceNumber);<br/>\n    +if (!ackedPerShard.containsKey(shardId)) {\n    +    ackedPerShard.put(shardId, new TreeSet<BigInteger>());\n    +}<br/>\n    +ackedPerShard.get(shardId).add(sequenceNumber);<br/>\n    +if (emittedPerShard.containsKey(shardId)) {\n    +    TreeSet<BigInteger> emitted = emittedPerShard.get(shardId);\n    +    emitted.remove(sequenceNumber);\n    +}<br/>\n    +if (failedPerShard.containsKey(shardId)) {\n    +    failedPerShard.get(shardId).remove(sequenceNumber);\n    +}<br/>\n    +if (failedandFetchedRecords.containsKey(kinesisMessageId)) {\n    +    config.getFailedMessageRetryHandler().acked(kinesisMessageId);\n    +    failedandFetchedRecords.remove(kinesisMessageId);\n    +}<br/>\n    +// keep committing when topology is deactivated since ack and fail keep getting called on deactivated topology<br/>\n    +if (deactivated) {    +    commit();    +}\n<p>    +    }<br/>\n    +<br/>\n    +    void fail (KinesisMessageId kinesisMessageId) {<br/>\n    +String shardId = kinesisMessageId.getShardId();<br/>\n    +BigInteger sequenceNumber = new BigInteger(kinesisMessageId.getSequenceNumber());<br/>\n    +LOG.debug(\"Fail received for shardId: \" + shardId + \" sequenceNumber: \" + sequenceNumber);<br/>\n    +// for a failed message add it to failed set if it will be retried, otherwise ack it; remove from emitted either way<br/>\n    +if (config.getFailedMessageRetryHandler().failed(kinesisMessageId)) {<br/>\n    +    if (!failedPerShard.containsKey(shardId)) </p>\n{\n    +failedPerShard.put(shardId, new TreeSet<BigInteger>());\n    +    }\n<p>    +    failedPerShard.get(shardId).add(sequenceNumber);<br/>\n    +    TreeSet<BigInteger> emitted = emittedPerShard.get(shardId);<br/>\n    +    emitted.remove(sequenceNumber);<br/>\n    +} else </p>\n{\n    +    ack(kinesisMessageId);\n    +}\n<p>    +// keep committing when topology is deactivated since ack and fail keep getting called on deactivated topology<br/>\n    +if (deactivated) </p>\n{\n    +    commit();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    void commit () {<br/>\n    +// Logic for deciding what sequence number to ack is find the highest sequence number from acked called X such that there is no sequence number Y in<br/>\n    +// emitted or failed that satisfies X > Y. For e.g. is acked is 1,3,5. Emitted is 2,4,6 then we can only commit 1 and not 3 because 2 is still pending<br/>\n    +for (String shardId: toEmitPerShard.keySet()) {<br/>\n    +    if (ackedPerShard.containsKey(shardId)) {<br/>\n    +BigInteger commitSequenceNumberBound = null;<br/>\n    +if (failedPerShard.containsKey(shardId) && !failedPerShard.get(shardId).isEmpty()) </p>\n{\n    +    commitSequenceNumberBound = failedPerShard.get(shardId).first();\n    +}\n<p>    +if (emittedPerShard.containsKey(shardId) && !emittedPerShard.get(shardId).isEmpty()) {<br/>\n    +    BigInteger smallestEmittedSequenceNumber = emittedPerShard.get(shardId).first();<br/>\n    +    if (commitSequenceNumberBound == null || (commitSequenceNumberBound.compareTo(smallestEmittedSequenceNumber) == 1)) </p>\n{\n    +commitSequenceNumberBound = smallestEmittedSequenceNumber;\n    +    }\n<p>    +}<br/>\n    +Iterator<BigInteger> ackedSequenceNumbers = ackedPerShard.get(shardId).iterator();<br/>\n    +BigInteger ackedSequenceNumberToCommit = null;<br/>\n    +while (ackedSequenceNumbers.hasNext()) {<br/>\n    +    BigInteger ackedSequenceNumber = ackedSequenceNumbers.next();<br/>\n    +    if (commitSequenceNumberBound == null || (commitSequenceNumberBound.compareTo(ackedSequenceNumber) == 1)) </p>\n{\n    +ackedSequenceNumberToCommit = ackedSequenceNumber;\n    +ackedSequenceNumbers.remove();\n    +    }\n<p> else </p>\n{\n    +break;\n    +    }\n<p>    +}<br/>\n    +if (ackedSequenceNumberToCommit != null) </p>\n{\n    +    Map<Object, Object> state = new HashMap<>();\n    +    state.put(\"committedSequenceNumber\", ackedSequenceNumberToCommit.toString());\n    +    LOG.debug(\"Committing sequence number \" + ackedSequenceNumberToCommit.toString() + \" for shardId \" + shardId);\n    +    String path = getZkPath(shardId);\n    +    commitState(path, state);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +lastCommitTime = System.currentTimeMillis();<br/>\n    +    }<br/>\n    +<br/>\n    +    void activate () </p>\n{\n    +LOG.info(\"Activate called\");\n    +deactivated = false;\n    +initializeKinesisClient();\n    +    }\n<p>    +<br/>\n    +    void deactivate () </p>\n{\n    +LOG.info(\"Deactivate called\");\n    +deactivated = true;\n    +commit();\n    +shutdownKinesisClient();\n    +    }\n<p>    +<br/>\n    +    void close () </p>\n{\n    +commit();\n    +shutdownKinesisClient();\n    +shutdownCurator();\n    +    }\n<p>    +<br/>\n    +    private String getZkPath (String shardId) {<br/>\n    +String path = \"\";<br/>\n    +if (!config.getZkInfo().getZkNode().startsWith(\"/\")) </p>\n{\n    +    path += \"/\";\n    +}<br/>\n    +path += config.getZkInfo().getZkNode();<br/>\n    +if (!config.getZkInfo().getZkNode().endsWith(\"/\")) {    +    path += \"/\";    +}\n<p>    +path += (config.getStreamName() + \"/\" + shardId);<br/>\n    +return path;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void commitState (String path, Map<Object, Object> state) {<br/>\n    +byte[] bytes = JSONValue.toJSONString(state).getBytes(Charset.forName(\"UTF-8\"));<br/>\n    +try {<br/>\n    +    if (curatorFramework.checkExists().forPath(path) == null) </p>\n{\n    +curatorFramework.create()\n    +.creatingParentsIfNeeded()\n    +.withMode(CreateMode.PERSISTENT)\n    +.forPath(path, bytes);\n    +    }\n<p> else </p>\n{\n    +curatorFramework.setData().forPath(path, bytes);\n    +    }\n<p>    +} catch (Exception e) </p>\n{\n    +    throw new RuntimeException(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private Map<Object, Object> readState (String path) {<br/>\n    +try {<br/>\n    +    Map<Object, Object> state = null;<br/>\n    +    byte[] b = null;<br/>\n    +    if (curatorFramework.checkExists().forPath(path) != null) {\n    +b = curatorFramework.getData().forPath(path);\n    +    }<br/>\n    +    if (b != null) {\n    +state = (Map<Object, Object>) JSONValue.parse(new String(b, \"UTF-8\"));\n    +    }<br/>\n    +    return state;<br/>\n    +} catch (Exception e) {    +    throw new RuntimeException(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // fetch records from kinesis starting at sequence number for message passed as argument. Any other messages fetched and are in the failed queue will also<br/>\n    +    // be kept in memory to avoid going to kinesis again for retry<br/>\n    +    private void fetchFailedRecords (KinesisMessageId kinesisMessageId) {<br/>\n    +// if shard iterator not present for this message, get it<br/>\n    +if (!shardIteratorPerFailedMessage.containsKey(kinesisMessageId)) </p>\n{\n    +    refreshShardIteratorForFailedRecord(kinesisMessageId);\n    +}\n<p>    +String shardIterator = shardIteratorPerFailedMessage.get(kinesisMessageId);<br/>\n    +LOG.debug(\"Fetching failed records for shard id :\" + kinesisMessageId.getShardId() + \" at sequence number \" + kinesisMessageId.getSequenceNumber() +<br/>\n    +\" using shardIterator \" + shardIterator);<br/>\n    +try {<br/>\n    +    GetRecordsResult getRecordsResult = fetchRecords(shardIterator);<br/>\n    +    if (getRecordsResult != null) {<br/>\n    +List<Record> records = getRecordsResult.getRecords();<br/>\n    +LOG.debug(\"Records size from fetchFailedRecords is \" + records.size());<br/>\n    +// update the shard iterator to next one in case this fetch does not give the message.<br/>\n    +shardIteratorPerFailedMessage.put(kinesisMessageId, getRecordsResult.getNextShardIterator());<br/>\n    +if (records.size() == 0) </p>\n{\n    +    LOG.debug(\"No records returned from kinesis. Hence sleeping for 1 second\");\n    +    Thread.sleep(1000);\n    +}\n<p> else {<br/>\n    +    // add all fetched records to the set of failed records if they are present in failed set<br/>\n    +    for (Record record: records) {<br/>\n    +KinesisMessageId current = new KinesisMessageId(kinesisMessageId.getStreamName(), kinesisMessageId.getShardId(), record.getSequenceNumber());<br/>\n    +if (failedPerShard.get(kinesisMessageId.getShardId()).contains(new BigInteger(current.getSequenceNumber()))) </p>\n{\n    +    failedandFetchedRecords.put(current, record);\n    +    shardIteratorPerFailedMessage.remove(current);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +} catch (InterruptedException ie) </p>\n{\n    +    LOG.debug(\"Thread interrupted while sleeping\", ie);\n    +}\n<p> catch (ExpiredIteratorException ex) </p>\n{\n    +    LOG.debug(\"shardIterator for failedRecord \" + kinesisMessageId + \" has expired. Refreshing shardIterator\");\n    +    refreshShardIteratorForFailedRecord(kinesisMessageId);\n    +}\n<p> catch (ProvisionedThroughputExceededException pe) {<br/>\n    +    try </p>\n{\n    +LOG.debug(\"ProvisionedThroughputExceededException occured. Check your limits. Sleeping for 1 second.\", pe);\n    +Thread.sleep(1000);\n    +    }\n<p> catch (InterruptedException e) </p>\n{\n    +LOG.debug(\"Thread interrupted exception\", e);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void fetchNewRecords () {<br/>\n    +for (Map.Entry<String, LinkedList<Record>> entry : toEmitPerShard.entrySet()) {<br/>\n    +    String shardId = entry.getKey();<br/>\n    +    try {<br/>\n    +String shardIterator = shardIteratorPerShard.get(shardId);<br/>\n    +LOG.debug(\"Fetching new records for shard id :\" + shardId + \" using shardIterator \" + shardIterator + \" after sequence number \" +<br/>\n    +fetchedSequenceNumberPerShard.get(shardId));<br/>\n    +GetRecordsResult getRecordsResult = fetchRecords(shardIterator);<br/>\n    +if (getRecordsResult != null) {<br/>\n    +    List<Record> records = getRecordsResult.getRecords();<br/>\n    +    LOG.debug(\"Records size from fetchNewRecords is \" + records.size());<br/>\n    +    // update the shard iterator to next one in case this fetch does not give the message.<br/>\n    +    shardIteratorPerShard.put(shardId, getRecordsResult.getNextShardIterator());<br/>\n    +    if (records.size() == 0) </p>\n{\n    +LOG.debug(\"No records returned from kinesis. Hence sleeping for 1 second\");\n    +Thread.sleep(1000);\n    +    }\n<p> else </p>\n{\n    +entry.getValue().addAll(records);\n    +fetchedSequenceNumberPerShard.put(shardId, records.get(records.size() - 1).getSequenceNumber());\n    +    }\n<p>    +}<br/>\n    +    } catch (InterruptedException ie) </p>\n{\n    +LOG.debug(\"Thread interrupted while sleeping\", ie);\n    +    }\n<p> catch (ExpiredIteratorException ex) </p>\n{\n    +LOG.debug(\"shardIterator for shardId \" + shardId + \" has expired. Refreshing shardIterator\");\n    +refreshShardIteratorForNewRecords(shardId);\n    +    }\n<p> catch (ProvisionedThroughputExceededException pe) {<br/>\n    +try </p>\n{\n    +    LOG.debug(\"ProvisionedThroughputExceededException occured. Check your limits. Sleeping for 1 second.\", pe);\n    +    Thread.sleep(1000);\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.debug(\"Thread interrupted exception\", e);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private GetRecordsResult fetchRecords (String shardIterator) </p>\n{\n    +List<Record> records = new ArrayList<>();\n    +GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n    +getRecordsRequest.setShardIterator(shardIterator);\n    +getRecordsRequest.setLimit(config.getKinesisConnectionInfo().getRecordsLimit());\n    +GetRecordsResult getRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n    +return getRecordsResult;\n    +    }\n<p>    +<br/>\n    +    private List<Shard> getShards () {<br/>\n    +DescribeStreamRequest describeStreamRequest = new DescribeStreamRequest();<br/>\n    +describeStreamRequest.setStreamName(config.getStreamName());<br/>\n    +List<Shard> shards = new ArrayList<>();<br/>\n    +String exclusiveStartShardId = null;<br/>\n    +do {<br/>\n    +    describeStreamRequest.setExclusiveStartShardId(exclusiveStartShardId);<br/>\n    +    DescribeStreamResult describeStreamResult = kinesisClient.describeStream(describeStreamRequest);<br/>\n    +    shards.addAll(describeStreamResult.getStreamDescription().getShards());<br/>\n    +    if (describeStreamResult.getStreamDescription().getHasMoreShards() && shards.size() > 0) </p>\n{\n    +exclusiveStartShardId = shards.get(shards.size() - 1).getShardId();\n    +    }\n<p> else </p>\n{\n    +exclusiveStartShardId = null;\n    +    }\n<p>    +} while ( exclusiveStartShardId != null );<br/>\n    +LOG.info(\"Number of shards for stream \" + config.getStreamName() + \" are \" + shards.size());<br/>\n    +return shards;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void emitNewRecord (SpoutOutputCollector collector) {<br/>\n    +for (Map.Entry<String, LinkedList<Record>> entry: toEmitPerShard.entrySet()) {<br/>\n    +    String shardId = entry.getKey();<br/>\n    +    LinkedList<Record> listOfRecords = entry.getValue();<br/>\n    +    Record record;<br/>\n    +    while ((record = listOfRecords.pollFirst()) != null) {<br/>\n    +KinesisMessageId kinesisMessageId = new KinesisMessageId(config.getStreamName(), shardId, record.getSequenceNumber());<br/>\n    +if (emitRecord(collector, record, kinesisMessageId)) </p>\n{\n    +   return;\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private boolean emitFailedRecord (SpoutOutputCollector collector, KinesisMessageId kinesisMessageId) {<br/>\n    +if (!failedandFetchedRecords.containsKey(kinesisMessageId)) </p>\n{\n    +    return false;\n    +}\n<p>    +return emitRecord(collector, failedandFetchedRecords.get(kinesisMessageId), kinesisMessageId);<br/>\n    +    }<br/>\n    +<br/>\n    +    private boolean emitRecord (SpoutOutputCollector collector, Record record, KinesisMessageId kinesisMessageId) {<br/>\n    +boolean result = false;<br/>\n    +List<Object> tuple = config.getRecordToTupleMapper().getTuple(record);<br/>\n    +// if a record is returned put the sequence number in the emittedPerShard to tie back with ack or fail<br/>\n    +if (tuple != null && tuple.size() > 0) {<br/>\n    +    collector.emit(tuple, kinesisMessageId);<br/>\n    +    if (!emittedPerShard.containsKey(kinesisMessageId.getShardId())) </p>\n{\n    +emittedPerShard.put(kinesisMessageId.getShardId(), new TreeSet<BigInteger>());\n    +    }\n<p>    +    emittedPerShard.get(kinesisMessageId.getShardId()).add(new BigInteger(record.getSequenceNumber()));<br/>\n    +    result = true;<br/>\n    +} else </p>\n{\n    +    // ack to not process the record again on restart and move on to next message\n    +    LOG.debug(\"Record \" + record + \" did not return a tuple to emit. Hence acking it\");\n    +    ack(kinesisMessageId);\n    +}\n<p>    +return result;<br/>\n    +    }<br/>\n    +<br/>\n    +    private boolean shouldCommit () </p>\n{\n    +return (System.currentTimeMillis() - lastCommitTime >= config.getZkInfo().getCommitIntervalMs());\n    +    }\n<p>    +<br/>\n    +    private void initializeFetchedSequenceNumbers () {<br/>\n    +for (String shardId : toEmitPerShard.keySet()) {<br/>\n    +    Map<Object, Object> state = readState(getZkPath(shardId));<br/>\n    +    // if state found for this shard in zk, then set the sequence number in fetchedSequenceNumber<br/>\n    +    if (state != null) {<br/>\n    +Object committedSequenceNumber = state.get(\"committedSequenceNumber\");<br/>\n    +LOG.info(\"State read is committedSequenceNumber: \" + committedSequenceNumber + \" shardId:\" + shardId);<br/>\n    +if (committedSequenceNumber != null) </p>\n{\n    +    fetchedSequenceNumberPerShard.put(shardId, (String) committedSequenceNumber);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void refreshShardIteratorsForNewRecords () {<br/>\n    +for (String shardId: toEmitPerShard.keySet()) </p>\n{\n    +    refreshShardIteratorForNewRecords(shardId);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private void refreshShardIteratorForNewRecords (String shardId) {<br/>\n    +String shardIterator = null;<br/>\n    +String lastFetchedSequenceNumber = fetchedSequenceNumberPerShard.get(shardId);<br/>\n    +ShardIteratorType shardIteratorType = (lastFetchedSequenceNumber == null ? config.getShardIteratorType() : ShardIteratorType<br/>\n    +.AFTER_SEQUENCE_NUMBER);<br/>\n    +// Set the shard iterator for last fetched sequence number to start from correct position in shard<br/>\n    +shardIterator = this.getShardIterator(shardId, shardIteratorType, lastFetchedSequenceNumber, config.getTimestamp());<br/>\n    +if (shardIterator != null && !shardIterator.isEmpty()) </p>\n{\n    +    LOG.debug(\"Refreshing shard iterator for new records for shardId \" + shardId + \" with shardIterator \" + shardIterator);\n    +    shardIteratorPerShard.put(shardId, shardIterator);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private void refreshShardIteratorForFailedRecord (KinesisMessageId kinesisMessageId) {<br/>\n    +String shardIterator = null;<br/>\n    +// Set the shard iterator for last fetched sequence number to start from correct position in shard<br/>\n    +shardIterator = this.getShardIterator(kinesisMessageId.getShardId(), ShardIteratorType.AT_SEQUENCE_NUMBER, kinesisMessageId.getSequenceNumber(), null);<br/>\n    +if (shardIterator != null && !shardIterator.isEmpty()) </p>\n{\n    +    LOG.debug(\"Refreshing shard iterator for failed records for message \" + kinesisMessageId + \" with shardIterator \" + shardIterator);\n    +    shardIteratorPerFailedMessage.put(kinesisMessageId, shardIterator);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private String getShardIterator (String shardId, ShardIteratorType shardIteratorType, String sequenceNumber, Date timestamp) {<br/>\n    +String shardIterator = \"\";<br/>\n    +try {<br/>\n    +    GetShardIteratorRequest getShardIteratorRequest = new GetShardIteratorRequest();<br/>\n    +    getShardIteratorRequest.setStreamName(config.getStreamName());<br/>\n    +    getShardIteratorRequest.setShardId(shardId);<br/>\n    +    getShardIteratorRequest.setShardIteratorType(shardIteratorType);<br/>\n    +    if (shardIteratorType.equals(ShardIteratorType.AFTER_SEQUENCE_NUMBER) || shardIteratorType.equals(ShardIteratorType.AT_SEQUENCE_NUMBER)) </p>\n{\n    +getShardIteratorRequest.setStartingSequenceNumber(sequenceNumber);\n    +    }\n<p> else if (shardIteratorType.equals(ShardIteratorType.AT_TIMESTAMP)) </p>\n{\n    +getShardIteratorRequest.setTimestamp(timestamp);\n    +    }\n<p>    +    GetShardIteratorResult getShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);<br/>\n    +    if (getShardIteratorResult != null) </p>\n{\n    +shardIterator = getShardIteratorResult.getShardIterator();\n    +    }\n<p>    +} catch (Exception e) </p>\n{\n    +    LOG.debug(\"Exception occured while getting shardIterator for shard \" + shardId + \" shardIteratorType \" + shardIteratorType + \" sequence number \" +\n    +    sequenceNumber + \" timestamp \" + timestamp, e);\n    +}\n<p>    +LOG.debug(\"Returning shardIterator \" + shardIterator + \" for shardId \" + shardId + \" shardIteratorType \" + shardIteratorType + \" sequenceNumber \" +<br/>\n    +sequenceNumber + \" timestamp\" + timestamp);<br/>\n    +return shardIterator;<br/>\n    +    }<br/>\n    +<br/>\n    +    private Long getUncommittedRecordsCount () {<br/>\n    +Long result = 0L;<br/>\n    +for (Map.Entry<String, TreeSet<BigInteger>> emitted: emittedPerShard.entrySet()) </p>\n{\n    +    result += emitted.getValue().size();\n    +}\n<p>    +for (Map.Entry<String, TreeSet<BigInteger>> acked: ackedPerShard.entrySet()) </p>\n{\n    +    result += acked.getValue().size();\n    +}\n<p>    +for (Map.Entry<String, TreeSet<BigInteger>> failed: failedPerShard.entrySet()) </p>\n{\n    +    result += failed.getValue().size();\n    +}\n<p>    +LOG.debug(\"Returning uncommittedRecordsCount as \" + result);<br/>\n    +return result;<br/>\n    +    }<br/>\n    +<br/>\n    +    private boolean shouldFetchNewRecords () {<br/>\n    +// check to see if any shard has already fetched records waiting to be emitted, in which case dont fetch more<br/>\n    +boolean fetchRecords = true;<br/>\n    +for (Map.Entry<String, LinkedList<Record>> entry: toEmitPerShard.entrySet()) {<br/>\n    +    if (!entry.getValue().isEmpty()) </p>\n{\n    +fetchRecords = false;\n    +break;\n    +    }\n<p>    +}<br/>\n    +return fetchRecords;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initializeCurator () </p>\n{\n    +ZkInfo zkInfo = config.getZkInfo();\n    +curatorFramework = CuratorFrameworkFactory.newClient(zkInfo.getZkUrl(), zkInfo.getSessionTimeoutMs(), zkInfo.getConnectionTimeoutMs(), new\n    +RetryNTimes(zkInfo.getRetryAttempts(), zkInfo.getRetryIntervalMs()));\n    +curatorFramework.start();\n    +    }\n<p>    +<br/>\n    +    private void initializeKinesisClient () </p>\n{\n    +kinesisClient = new AmazonKinesisClient(config.getKinesisConnectionInfo().getCredentialsProvider(), config.getKinesisConnectionInfo().getClientConfiguration());\n    +kinesisClient.setRegion(Region.getRegion(config.getKinesisConnectionInfo().getRegion()));\n    +    }\n<p>    +<br/>\n    +    private void shutdownCurator () </p>\n{\n    +curatorFramework.close();\n    +    }\n<p>    +<br/>\n    +    private void shutdownKinesisClient () </p>\n{\n    +kinesisClient.shutdown();\n    +    }\n<p>    +<br/>\n    +}<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @priyank5485 do you think its possible to move some of these methods into its Utils file or some sorts. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907907/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236483838","html_url":"https://github.com/apache/storm/pull/1586#issuecomment-236483838","issue_url":"https://api.github.com/repos/apache/storm/issues/1586","id":236483838,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQ4MzgzOA==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:51:45Z","updated_at":"2016-08-01T03:51:45Z","author_association":"CONTRIBUTOR","body":"@priyank5485 left couple of comments\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236483838/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907910","html_url":"https://github.com/apache/storm/issues/5622#issuecomment-2612907910","issue_url":"https://api.github.com/repos/apache/storm/issues/5622","id":2612907910,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDc5MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:51:47Z","updated_at":"2025-01-24T16:18:54Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1586\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1586</a></p>\n\n<p>    @priyank5485 left couple of comments</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907910/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236484192","html_url":"https://github.com/apache/storm/pull/1595#issuecomment-236484192","issue_url":"https://api.github.com/repos/apache/storm/issues/1595","id":236484192,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQ4NDE5Mg==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:55:42Z","updated_at":"2016-08-01T03:55:42Z","author_association":"CONTRIBUTOR","body":"@HeartSaVioR It will be good to have confluent wiki setup like other projects in apache do. We can have proposal setup there and go through the process of discussion in mailing list. I would start on user list so that we can hear from any existing or future user opinions as well.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236484192/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941955","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941955","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941955,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:55:43Z","updated_at":"2025-01-24T16:35:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595</a></p>\n\n<p>    @HeartSaVioR It will be good to have confluent wiki setup like other projects in apache do. We can have proposal setup there and go through the process of discussion in mailing list. I would start on user list so that we can hear from any existing or future user opinions as well.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941955/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236484239","html_url":"https://github.com/apache/storm/pull/1590#issuecomment-236484239","issue_url":"https://api.github.com/repos/apache/storm/issues/1590","id":236484239,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQ4NDIzOQ==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:56:16Z","updated_at":"2016-08-01T03:56:16Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236484239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941409","html_url":"https://github.com/apache/storm/issues/5785#issuecomment-2612941409","issue_url":"https://api.github.com/repos/apache/storm/issues/5785","id":2612941409,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE0MDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T03:56:17Z","updated_at":"2025-01-24T16:35:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1590\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1590</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941409/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654922","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654922","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654922,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5MjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T04:21:01Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72922608\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72922608</a></p>\n\n<p>    &#8212; Diff: storm-core/test/clj/integration/org/apache/storm/integration_test.clj &#8212;<br/>\n    @@ -403,17 +403,18 @@<br/>\n     (def bolt-prepared? (atom false))<br/>\n     (defbolt prepare-tracked-bolt [] {:prepare true}<br/>\n       <span class=\"error\">&#91;conf context collector&#93;</span>  </p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(reset! bolt-prepared? true)<br/>\n       (bolt<br/>\n(execute <span class=\"error\">&#91;tuple&#93;</span><br/>\n    +    (reset! bolt-prepared? true)\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    The basic idea was that, in the original code, `spout-opened?` or `bolt-prepared?` are set to true in executor initialization phase, while after porting to java, this behavior is deferred to `execute/nextTuple`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236486573","html_url":"https://github.com/apache/storm/pull/1445#issuecomment-236486573","issue_url":"https://api.github.com/repos/apache/storm/issues/1445","id":236486573,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQ4NjU3Mw==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T04:25:10Z","updated_at":"2016-08-01T04:25:10Z","author_association":"NONE","body":"@HeartSaVioR your comments are addressed.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236486573/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654928","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654928","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654928,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T04:25:12Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445</a></p>\n\n<p>    @HeartSaVioR your comments are addressed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654928/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941415","html_url":"https://github.com/apache/storm/issues/5785#issuecomment-2612941415","issue_url":"https://api.github.com/repos/apache/storm/issues/5785","id":2612941415,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE0MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T04:32:09Z","updated_at":"2025-01-24T16:35:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1590#discussion_r72922977\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1590#discussion_r72922977</a></p>\n\n<p>    &#8212; Diff: external/storm-kafka/src/jvm/org/apache/storm/kafka/bolt/KafkaBolt.java &#8212;<br/>\n    @@ -98,7 +98,11 @@ public void prepare(Map stormConf, TopologyContext context, OutputCollector coll</p>\n\n<p>     //for backward compatibility.<br/>\n     if(topicSelector == null) {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>this.topicSelector = new DefaultTopicSelector((String) stormConf.get(TOPIC));<br/>\n    +    if(stormConf.containsKey(TOPIC)) \n{\n    +this.topicSelector = new DefaultTopicSelector((String) stormConf.get(TOPIC));\n    +    }\n<p> else {<br/>\n    +throw new IllegalArgumentException(\"topic select should be specified\");</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    @darionyaphet You may want to have exception's message like below.<br/>\n    `'topic' should be specified in bolt's configuration`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236488502","html_url":"https://github.com/apache/storm/pull/1595#issuecomment-236488502","issue_url":"https://api.github.com/repos/apache/storm/issues/1595","id":236488502,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQ4ODUwMg==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T04:45:29Z","updated_at":"2016-08-01T04:45:39Z","author_association":"CONTRIBUTOR","body":"@harshach \nThe wish-list contains ideas/opinions in discussions on user@ and also dev@. \n\nhttp://mail-archives.apache.org/mod_mbox/storm-user/201604.mbox/%3CCAF5108iwhGgae7Z2AKgMVNP4PWwV52GVc7Ex5h2oQ7fAAPX2PA%40mail.gmail.com%3E\n\nI've initiated discussions several times for this, so I'm sure what @abhishekagarwal87 sorted out is enough set of wish-list for new metrics feature.\n\nBtw, we didn't use wiki for such purpose, so it might be better to talk about the format, the process, and so on. If we just want to have a page without specific format, I'll move this to wiki page once I get write access to wiki.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236488502/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941960","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941960","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941960,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T04:45:31Z","updated_at":"2025-01-24T16:35:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595</a></p>\n\n<p>    @harshach <br/>\n    The wish-list contains ideas/opinions in discussions on user@ and also dev@. </p>\n\n<p>    <a href=\"http://mail-archives.apache.org/mod_mbox/storm-user/201604.mbox/%3CCAF5108iwhGgae7Z2AKgMVNP4PWwV52GVc7Ex5h2oQ7fAAPX2PA%40mail.gmail.com%3E\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://mail-archives.apache.org/mod_mbox/storm-user/201604.mbox/%3CCAF5108iwhGgae7Z2AKgMVNP4PWwV52GVc7Ex5h2oQ7fAAPX2PA%40mail.gmail.com%3E</a></p>\n\n<p>    I've initiated discussions several times for this, so I'm sure what @abhishekagarwal87 sorted out is enough set of wish-list for new metrics feature.</p>\n\n<p>    Btw, we didn't use wiki for such purpose, so it might be better to talk about the format, the process, and so on. If we just want to have a page without specific format, I'll move this to wiki page once I granted write access to wiki.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941960/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654933","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654933","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654933,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5MzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T04:58:41Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72924227\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72924227</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,575 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    +    protected String hostname;<br/>\n    +<br/>\n    +    protected Executor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +this.workerData = workerData;<br/>\n    +this.executorId = executorId;<br/>\n    +this.workerTopologyContext = StormCommon.makeWorkerContext(workerData);<br/>\n    +this.taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +this.componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +this.openOrPrepareWasCalled = new AtomicBoolean(false);<br/>\n    +this.stormConf = normalizedComponentConf((Map) workerData.get(Constants.STORM_CONF), workerTopologyContext, componentId);<br/>\n    +this.receiveQueue = (DisruptorQueue) (((Map) workerData.get(Constants.EXECUTOR_RECEIVE_QUEUE_MAP)).get(executorId));<br/>\n    +this.stormId = (String) workerData.get(Constants.STORM_ID);<br/>\n    +this.conf = (Map) workerData.get(Constants.CONF);<br/>\n    +this.sharedExecutorData = new HashMap();<br/>\n    +this.stormActive = (AtomicBoolean) workerData.get(Constants.STORM_ACTIVE_ATOM);<br/>\n    +this.stormComponentDebug = (AtomicReference<Map<String, DebugOptions>>) workerData.get(Constants.COMPONENT_TO_DEBUG_ATOM);<br/>\n    +<br/>\n    +this.transferQueue = mkExecutorBatchQueue(stormConf, executorId);<br/>\n    +this.transferFn = (IFn) workerData.get(Constants.TRANSFER_FN);<br/>\n    +this.executorTransfer = new ExecutorTransfer(workerTopologyContext, transferQueue, stormConf, transferFn);<br/>\n    +<br/>\n    +this.suicideFn = (Runnable) workerData.get(Constants.SUICIDE_FN);<br/>\n    +try {<br/>\n    +    this.stormClusterState = ClusterUtils.mkStormClusterState(workerData.get(\"state-store\"), Utils.getWorkerACL(stormConf),<br/>\n    +    new ClusterStateContext(DaemonType.SUPERVISOR));<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    DaemonType.SUPERVISOR -> DaemonType.WORKER</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654933/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654940","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654940","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654940,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T06:49:06Z","updated_at":"2025-01-24T14:24:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72930327\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72930327</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutOutputCollectorImpl.java &#8212;<br/>\n    @@ -0,0 +1,147 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutOutputCollector;<br/>\n    +import org.apache.storm.tuple.MessageId;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Random;<br/>\n    +<br/>\n    +public class SpoutOutputCollectorImpl implements ISpoutOutputCollector {<br/>\n    +<br/>\n    +    private final SpoutExecutor executor;<br/>\n    +    private final Task taskData;<br/>\n    +    private final int taskId;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private final Random random;<br/>\n    +    private final Boolean isEventLoggers;<br/>\n    +    private final Boolean isDebug;<br/>\n    +    private final RotatingMap<Long, TupleInfo> pending;<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unused\")<br/>\n    +    public SpoutOutputCollectorImpl(ISpout spout, SpoutExecutor executor, Task taskData, int taskId,<br/>\n    +    MutableLong emittedCount, boolean hasAckers, Random random,<br/>\n    +    Boolean isEventLoggers, Boolean isDebug, RotatingMap<Long, TupleInfo> pending) </p>\n{\n    +this.executor = executor;\n    +this.taskData = taskData;\n    +this.taskId = taskId;\n    +this.emittedCount = emittedCount;\n    +this.hasAckers = hasAckers;\n    +this.random = random;\n    +this.isEventLoggers = isEventLoggers;\n    +this.isDebug = isDebug;\n    +this.pending = pending;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<Integer> emit(String streamId, List<Object> tuple, Object messageId) </p>\n{\n    +return sendSpoutMsg(streamId, tuple, messageId, null);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void emitDirect(int taskId, String streamId, List<Object> tuple, Object messageId) </p>\n{\n    +sendSpoutMsg(streamId, tuple, messageId, taskId);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public long getPendingCount() </p>\n{\n    +return pending.size();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void reportError(Throwable error) </p>\n{\n    +executor.getReportError().report(error);\n    +    }\n<p>    +<br/>\n    +    private List<Integer> sendSpoutMsg(String stream, List<Object> values, Object messageId, Integer outTaskId) {<br/>\n    +emittedCount.increment();<br/>\n    +<br/>\n    +List<Integer> outTasks;<br/>\n    +if (outTaskId != null) </p>\n{\n    +    outTasks = taskData.getOutgoingTasks(outTaskId, stream, values);\n    +}\n<p> else </p>\n{\n    +    outTasks = taskData.getOutgoingTasks(stream, values);\n    +}\n<p>    +<br/>\n    +List<Long> ackSeq = new ArrayList<>();<br/>\n    +boolean needAck = (messageId != null) && hasAckers;<br/>\n    +<br/>\n    +long rootId = MessageId.generateId(random);<br/>\n    +for (Integer t : outTasks) {<br/>\n    +    MessageId msgId;<br/>\n    +    if (needAck) </p>\n{\n    +long as = MessageId.generateId(random);\n    +msgId = MessageId.makeRootId(rootId, as);\n    +ackSeq.add(as);\n    +    }\n<p> else </p>\n{\n    +msgId = MessageId.makeUnanchored();\n    +    }\n<p>    +<br/>\n    +    TupleImpl tuple = new TupleImpl(executor.getWorkerTopologyContext(), values, this.taskId, stream, msgId);<br/>\n    +    executor.getExecutorTransfer().transfer(t, tuple);<br/>\n    +}<br/>\n    +if (isEventLoggers) </p>\n{\n    +    executor.sendToEventLogger(executor, taskData, values, executor.getComponentId(), messageId, random);\n    +}\n<p>    +<br/>\n    +boolean sample = false;<br/>\n    +try </p>\n{\n    +    sample = executor.getSampler().call();\n    +}\n<p> catch (Exception ignored) </p>\n{\n    +}\n<p>    +if (needAck) {<br/>\n    +    TupleInfo info = new TupleInfo();<br/>\n    +    info.setTaskId(this.taskId);<br/>\n    +    info.setStream(stream);<br/>\n    +    info.setMessageId(messageId);<br/>\n    +    if (isDebug) </p>\n{\n    +info.setValues(values);\n    +    }\n<p>    +    if (sample) </p>\n{\n    +info.setTimestamp(System.currentTimeMillis());\n    +    }\n<p>    +<br/>\n    +    pending.put(rootId, info);<br/>\n    +    List<Object> ackInitTuple = new Values(rootId, Utils.bitXorVals(ackSeq), this.taskId);<br/>\n    +    executor.sendUnanchored(taskData, Acker.ACKER_INIT_STREAM_ID, ackInitTuple, executor.getExecutorTransfer());<br/>\n    +} else if (messageId != null) </p>\n{\n    +    TupleInfo info = new TupleInfo();\n    +    info.setStream(stream);\n    +    info.setValues(values);\n    +    info.setMessageId(messageId);\n    +    info.setTimestamp(0);\n    +    Long timeDelta = sample ? 0L : null;\n    +    info.setId(\"0:\");\n    +    executor.ackSpoutMsg(executor, taskData, timeDelta, info);\n    +}\n<p>    +<br/>\n    +return outTasks;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Does it ensure that at least empty list is returned?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654947","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654947","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654947,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T07:06:29Z","updated_at":"2025-01-24T14:24:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72931639\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72931639</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,575 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    +    protected String hostname;<br/>\n    +<br/>\n    +    protected Executor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +this.workerData = workerData;<br/>\n    +this.executorId = executorId;<br/>\n    +this.workerTopologyContext = StormCommon.makeWorkerContext(workerData);<br/>\n    +this.taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +this.componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +this.openOrPrepareWasCalled = new AtomicBoolean(false);<br/>\n    +this.stormConf = normalizedComponentConf((Map) workerData.get(Constants.STORM_CONF), workerTopologyContext, componentId);<br/>\n    +this.receiveQueue = (DisruptorQueue) (((Map) workerData.get(Constants.EXECUTOR_RECEIVE_QUEUE_MAP)).get(executorId));<br/>\n    +this.stormId = (String) workerData.get(Constants.STORM_ID);<br/>\n    +this.conf = (Map) workerData.get(Constants.CONF);<br/>\n    +this.sharedExecutorData = new HashMap();<br/>\n    +this.stormActive = (AtomicBoolean) workerData.get(Constants.STORM_ACTIVE_ATOM);<br/>\n    +this.stormComponentDebug = (AtomicReference<Map<String, DebugOptions>>) workerData.get(Constants.COMPONENT_TO_DEBUG_ATOM);<br/>\n    +<br/>\n    +this.transferQueue = mkExecutorBatchQueue(stormConf, executorId);<br/>\n    +this.transferFn = (IFn) workerData.get(Constants.TRANSFER_FN);<br/>\n    +this.executorTransfer = new ExecutorTransfer(workerTopologyContext, transferQueue, stormConf, transferFn);<br/>\n    +<br/>\n    +this.suicideFn = (Runnable) workerData.get(Constants.SUICIDE_FN);<br/>\n    +try </p>\n{\n    +    this.stormClusterState = ClusterUtils.mkStormClusterState(workerData.get(\"state-store\"), Utils.getWorkerACL(stormConf),\n    +    new ClusterStateContext(DaemonType.SUPERVISOR));\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    this.type = StatsUtil.SPOUT;\n    +    this.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else if (bolts.containsKey(componentId)) {\n    +    this.type = StatsUtil.BOLT;\n    +    this.stats = new BoltExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else {\n    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);\n    +}<br/>\n    +<br/>\n    +this.intervalToTaskToMetricToRegistry = new HashMap<>();<br/>\n    +this.taskToComponent = (Map<Integer, String>) workerData.get(Constants.TASK_TO_COMPONENT);<br/>\n    +this.streamToComponentToGrouper = outboundComponents(workerTopologyContext, componentId, stormConf);<br/>\n    +this.reportError = new ReportError(stormConf, stormClusterState, stormId, componentId, workerTopologyContext);<br/>\n    +this.reportErrorDie = new ReportErrorAndDie(reportError, suicideFn);<br/>\n    +this.sampler = ConfigUtils.mkStatsSampler(stormConf);<br/>\n    +this.backpressure = new AtomicBoolean(false);<br/>\n    +this.throttleOn = (AtomicBoolean) workerData.get(Constants.THROTTLE_ON);<br/>\n    +this.isDebug = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_DEBUG), false);<br/>\n    +this.rand = new Random(Utils.secureRandomLong());<br/>\n    +this.credentials = credentials;<br/>\n    +this.isEventLoggers = StormCommon.hasEventLoggers(stormConf);<br/>\n    +<br/>\n    +try {\n    +    this.hostname = Utils.hostname(stormConf);\n    +} catch (UnknownHostException ignored) {\n    +    this.hostname = \"\";\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Executor mkExecutor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +Executor executor;<br/>\n    +<br/>\n    +Map<String, Object> convertedWorkerData = Utils.convertClojureMapToJavaMap(workerData);<br/>\n    +WorkerTopologyContext workerTopologyContext = StormCommon.makeWorkerContext(convertedWorkerData);<br/>\n    +List<Integer> taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +String componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +<br/>\n    +String type = getExecutorType(workerTopologyContext, componentId);<br/>\n    +if (StatsUtil.SPOUT.equals(type)) {\n    +    executor = new SpoutExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +} else {\n    +    executor = new BoltExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new BoltExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +}<br/>\n    +<br/>\n    +Map<Integer, Task> idToTask = new HashMap<>();<br/>\n    +for (Integer taskId : taskIds) {<br/>\n    +    try {\n    +Task task = new Task(executor, taskId);\n    +executor.sendUnanchored(\n    +task, StormCommon.SYSTEM_STREAM_ID, new Values(\"startup\"), executor.getExecutorTransfer());\n    +idToTask.put(taskId, task);\n    +    } catch (IOException ex) {\n    +throw Utils.wrapInRuntime(ex);\n    +    }<br/>\n    +}<br/>\n    +executor.init(idToTask);<br/>\n    +<br/>\n    +return executor;<br/>\n    +    }<br/>\n    +<br/>\n    +    private static String getExecutorType(WorkerTopologyContext workerTopologyContext, String componentId) {<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    return StatsUtil.SPOUT;\n    +} else if (bolts.containsKey(componentId)) {\n    +    return StatsUtil.BOLT;\n    +} else {    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * separated from mkExecutor in order to replace executor transfer in executor data for testing<br/>\n    +     */<br/>\n    +    public ExecutorShutdown execute() throws Exception {\n    +LOG.info(\"Loading executor tasks \" + componentId + \":\" + executorId);\n    +\n    +registerBackpressure();\n    +Utils.SmartThread systemThreads =\n    +Utils.asyncLoop(executorTransfer, executorTransfer.getName(), reportErrorDie);\n    +\n    +String handlerName = componentId + \"-executor\" + executorId;\n    +Utils.SmartThread handlers =\n    +Utils.asyncLoop(this, false, reportErrorDie, Thread.NORM_PRIORITY, false, true, handlerName);\n    +setupTicks(StatsUtil.SPOUT.equals(type));\n    +LOG.info(\"Finished loading executor \" + componentId + \":\" + executorId);\n    +return new ExecutorShutdown(this, Lists.newArrayList(systemThreads, handlers), idToTask);\n    +    }<br/>\n    +<br/>\n    +    public abstract void tupleActionFn(int taskId, TupleImpl tuple) throws Exception;<br/>\n    +<br/>\n    +    public abstract void init(Map<Integer, Task> idToTask);<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    @Override<br/>\n    +    public void onEvent(Object event, long seq, boolean endOfBatch) throws Exception {<br/>\n    +ArrayList<AddressedTuple> addressedTuples = (ArrayList<AddressedTuple>) event;<br/>\n    +for (AddressedTuple addressedTuple : addressedTuples) {<br/>\n    +    TupleImpl tuple = (TupleImpl) addressedTuple.getTuple();<br/>\n    +    int taskId = addressedTuple.getDest();<br/>\n    +    if (isDebug) {<br/>\n    +LOG.info(\"Processing received message FOR {} TUPLE: {}\", taskId, tuple);<br/>\n    +    }<br/>\n    +    if (taskId != AddressedTuple.BROADCAST_DEST) {\n    +tupleActionFn(taskId, tuple);\n    +    } else {<br/>\n    +for (Integer t : taskIds) {\n    +    tupleActionFn(t, tuple);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void metricsTick(Task taskData, TupleImpl tuple) {<br/>\n    +try {<br/>\n    +    Integer interval = tuple.getInteger(0);<br/>\n    +    int taskId = taskData.getTaskId();<br/>\n    +    Map<Integer, Map<String, IMetric>> taskToMetricToRegistry = intervalToTaskToMetricToRegistry.get(interval);<br/>\n    +    Map<String, IMetric> nameToRegistry = null;<br/>\n    +    if (taskToMetricToRegistry != null) {\n    +nameToRegistry = taskToMetricToRegistry.get(taskId);\n    +    }<br/>\n    +    if (nameToRegistry != null) {<br/>\n    +IMetricsConsumer.TaskInfo taskInfo = new IMetricsConsumer.TaskInfo(<br/>\n    +hostname, workerTopologyContext.getThisWorkerPort(),<br/>\n    +componentId, taskId, Time.currentTimeSecs(), interval);<br/>\n    +List<IMetricsConsumer.DataPoint> dataPoints = new ArrayList<>();<br/>\n    +for (Map.Entry<String, IMetric> entry : nameToRegistry.entrySet()) {<br/>\n    +    IMetric metric = entry.getValue();<br/>\n    +    Object value = metric.getValueAndReset();<br/>\n    +    if (value != null) {\n    +IMetricsConsumer.DataPoint dataPoint = new IMetricsConsumer.DataPoint(entry.getKey(), value);\n    +dataPoints.add(dataPoint);\n    +    }<br/>\n    +}<br/>\n    +if (!dataPoints.isEmpty()) {\n    +    sendUnanchored(taskData, Constants.METRICS_STREAM_ID,\n    +    new Values(taskInfo, dataPoints), executorTransfer);\n    +}<br/>\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void setupMetrics() {<br/>\n    +for (final Integer interval : intervalToTaskToMetricToRegistry.keySet()) {<br/>\n    +    StormTimer timerTask = (StormTimer) workerData.get(Constants.USER_TIMER);<br/>\n    +    timerTask.scheduleRecurring(interval, interval, new Runnable() {<br/>\n    +@Override<br/>\n    +public void run() </p>\n{\n    +    TupleImpl tuple = new TupleImpl(workerTopologyContext, new Values(interval),\n    +    (int) Constants.SYSTEM_TASK_ID, Constants.METRICS_TICK_STREAM_ID);\n    +    List<AddressedTuple> metricsTickTuple =\n    +    Lists.newArrayList(new AddressedTuple(AddressedTuple.BROADCAST_DEST, tuple));\n    +    receiveQueue.publish(metricsTickTuple);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) {<br/>\n    +Tuple tuple = task.getTuple(stream, values);<br/>\n    +List<Integer> tasks = task.getOutgoingTasks(stream, values);<br/>\n    +for (Integer t : tasks) </p>\n{\n    +    transfer.transfer(t, tuple);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Send sampled data to the eventlogger if the global or component level debug flag is set (via nimbus api).<br/>\n    +     */<br/>\n    +    public void sendToEventLogger(Executor executor, Task taskData, List values,<br/>\n    +  String componentId, Object messageId, Random random) {<br/>\n    +Map<String, DebugOptions> componentDebug = executor.getStormComponentDebug().get();<br/>\n    +DebugOptions debugOptions = componentDebug.get(componentId);<br/>\n    +if (debugOptions == null) </p>\n{\n    +    debugOptions = componentDebug.get(executor.getStormId());\n    +}\n<p>    +double spct = ((debugOptions != null) && (debugOptions.is_enable())) ? debugOptions.get_samplingpct() : 0;<br/>\n    +if (spct > 0 && (random.nextDouble() * 100) < spct) </p>\n{\n    +    sendUnanchored(taskData, StormCommon.EVENTLOGGER_STREAM_ID,\n    +    new Values(componentId, messageId, System.currentTimeMillis(), values),\n    +    executor.getExecutorTransfer());\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private void registerBackpressure() {<br/>\n    +receiveQueue.registerBackpressureCallback(new DisruptorBackpressureCallback() {<br/>\n    +    @Override<br/>\n    +    public void highWaterMark() throws Exception {<br/>\n    +if (!backpressure.get()) </p>\n{\n    +    backpressure.set(true);\n    +    LOG.debug(\"executor \" + executorId + \" is congested, set backpressure flag true\");\n    +    WorkerBackpressureThread.notifyBackpressureChecker(workerData.get(\"backpressure-trigger\"));\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void lowWaterMark() throws Exception {<br/>\n    +if (backpressure.get()) </p>\n{\n    +    backpressure.set(false);\n    +    LOG.debug(\"executor \" + executorId + \" is not-congested, set backpressure flag false\");\n    +    WorkerBackpressureThread.notifyBackpressureChecker(workerData.get(\"backpressure-trigger\"));\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +receiveQueue.setHighWaterMark(Utils.getDouble(stormConf.get(Config.BACKPRESSURE_DISRUPTOR_HIGH_WATERMARK)));<br/>\n    +receiveQueue.setLowWaterMark(Utils.getDouble(stormConf.get(Config.BACKPRESSURE_DISRUPTOR_LOW_WATERMARK)));<br/>\n    +receiveQueue.setEnableBackpressure(Utils.getBoolean(stormConf.get(Config.TOPOLOGY_BACKPRESSURE_ENABLE), false));<br/>\n    +    }<br/>\n    +<br/>\n    +    protected void setupTicks(boolean isSpout) {<br/>\n    +final Integer tickTimeSecs = Utils.getInt(stormConf.get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS), null);<br/>\n    +boolean enableMessageTimeout = (Boolean) stormConf.get(Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS);<br/>\n    +if (tickTimeSecs != null) {<br/>\n    +    if (Utils.isSystemId(componentId) || (!enableMessageTimeout && isSpout)) </p>\n{\n    +LOG.info(\"Timeouts disabled for executor \" + componentId + \":\" + executorId);\n    +    }\n<p> else {<br/>\n    +StormTimer timerTask = (StormTimer) workerData.get(Constants.USER_TIMER);<br/>\n    +timerTask.scheduleRecurring(tickTimeSecs, tickTimeSecs, new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +TupleImpl tuple = new TupleImpl(workerTopologyContext, new Values(tickTimeSecs),<br/>\n    +(int) Constants.SYSTEM_TASK_ID, Constants.SYSTEM_TICK_STREAM_ID);<br/>\n    +List<AddressedTuple> metricTickTuple =<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    metricTickTuple -> tickTuple</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654953","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654953","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654953,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T07:23:58Z","updated_at":"2025-01-24T14:24:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72933087\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72933087</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.ICredentialsListener;<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.daemon.metrics.BuiltinMetricsUtil;<br/>\n    +import org.apache.storm.daemon.metrics.SpoutThrottlingMetrics;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutAckInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutFailInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutWaitStrategy;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class SpoutExecutor extends Executor {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(SpoutExecutor.class);<br/>\n    +<br/>\n    +    private final ISpoutWaitStrategy spoutWaitStrategy;<br/>\n    +    private Integer maxSpoutPending;<br/>\n    +    private final AtomicBoolean lastActive;<br/>\n    +    private List<ISpout> spouts;<br/>\n    +    private List<SpoutOutputCollector> outputCollectors;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final MutableLong emptyEmitStreak;<br/>\n    +    private final SpoutThrottlingMetrics spoutThrottlingMetrics;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private RotatingMap<Long, TupleInfo> pending;<br/>\n    +    private final boolean backPressureEnabled;<br/>\n    +<br/>\n    +    public SpoutExecutor(final Map workerData, final List<Long> executorId, Map<String, String> credentials) </p>\n{\n    +super(workerData, executorId, credentials);\n    +this.spoutWaitStrategy = Utils.newInstance((String) stormConf.get(Config.TOPOLOGY_SPOUT_WAIT_STRATEGY));\n    +this.spoutWaitStrategy.prepare(stormConf);\n    +\n    +this.backPressureEnabled = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_BACKPRESSURE_ENABLE), false);\n    +\n    +this.lastActive = new AtomicBoolean(false);\n    +this.hasAckers = StormCommon.hasAckers(stormConf);\n    +this.emittedCount = new MutableLong(0);\n    +this.emptyEmitStreak = new MutableLong(0);\n    +this.spoutThrottlingMetrics = new SpoutThrottlingMetrics();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void init(final Map<Integer, Task> idToTask) {<br/>\n    +LOG.info(\"Opening spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +this.idToTask = idToTask;<br/>\n    +this.maxSpoutPending = Utils.getInt(stormConf.get(Config.TOPOLOGY_MAX_SPOUT_PENDING), 0) * idToTask.size();<br/>\n    +this.spouts = new ArrayList<>();<br/>\n    +for (Task task : idToTask.values()) </p>\n{\n    +    this.spouts.add((ISpout) task.getTaskObject());\n    +}\n<p>    +this.pending = new RotatingMap<>(2, new RotatingMap.ExpiredCallback<Long, TupleInfo>() {<br/>\n    +    @Override<br/>\n    +    public void expire(Long key, TupleInfo tupleInfo) {<br/>\n    +Long timeDelta = null;<br/>\n    +if (tupleInfo.getTimestamp() != 0) </p>\n{\n    +    timeDelta = Time.deltaMs(tupleInfo.getTimestamp());\n    +}\n<p>    +failSpoutMsg(SpoutExecutor.this, idToTask.get(tupleInfo.getTaskId()), timeDelta, tupleInfo, \"TIMEOUT\");<br/>\n    +    }<br/>\n    +});<br/>\n    +<br/>\n    +this.spoutThrottlingMetrics.registerAll(stormConf, idToTask.values().iterator().next().getUserContext());<br/>\n    +this.outputCollectors = new ArrayList<>();<br/>\n    +for (Map.Entry<Integer, Task> entry : idToTask.entrySet()) {<br/>\n    +    Task taskData = entry.getValue();<br/>\n    +    ISpout spoutObject = (ISpout) taskData.getTaskObject();<br/>\n    +    SpoutOutputCollectorImpl spoutOutputCollector = new SpoutOutputCollectorImpl(<br/>\n    +    spoutObject, this, taskData, entry.getKey(), emittedCount,<br/>\n    +    hasAckers, rand, isEventLoggers, isDebug, pending);<br/>\n    +    SpoutOutputCollector outputCollector = new SpoutOutputCollector(spoutOutputCollector);<br/>\n    +    this.outputCollectors.add(outputCollector);<br/>\n    +<br/>\n    +    taskData.getBuiltInMetrics().registerAll(stormConf, taskData.getUserContext());<br/>\n    +    Map<String, DisruptorQueue> map = ImmutableMap.of(\"sendqueue\", transferQueue, \"receive\", receiveQueue);<br/>\n    +    BuiltinMetricsUtil.registerQueueMetrics(map, stormConf, taskData.getUserContext());<br/>\n    +<br/>\n    +    if (spoutObject instanceof ICredentialsListener) </p>\n{\n    +((ICredentialsListener) spoutObject).setCredentials(credentials);\n    +    }\n<p>    +    spoutObject.open(stormConf, taskData.getUserContext(), outputCollector);<br/>\n    +}<br/>\n    +openOrPrepareWasCalled.set(true);<br/>\n    +LOG.info(\"Opened spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +setupMetrics();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +while (!stormActive.get()) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    AFAIK, this statement should block calling init(), means only use once for starting up. This can lead infinite loop instead of handling `deactivate`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654953/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654961","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654961","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654961,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T07:29:18Z","updated_at":"2025-01-24T14:24:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72933619\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72933619</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,575 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    If it's same as hasEventLoggers, it would be better to keep it as it is since it represents the meaning more clearly.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654961/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654965","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654965","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654965,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T07:33:24Z","updated_at":"2025-01-24T14:24:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72934070\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72934070</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/bolt/BoltExecutor.java &#8212;<br/>\n    @@ -0,0 +1,133 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.bolt;<br/>\n    +<br/>\n    +import clojure.lang.Atom;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import java.util.List;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.ICredentialsListener;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.daemon.metrics.BuiltinMetricsUtil;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.hooks.info.BoltExecuteInfo;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.task.IOutputCollector;<br/>\n    +import org.apache.storm.task.OutputCollector;<br/>\n    +import org.apache.storm.task.TopologyContext;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public class BoltExecutor extends Executor {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(BoltExecutor.class);<br/>\n    +<br/>\n    +    private final Callable<Boolean> executeSampler;<br/>\n    +<br/>\n    +    public BoltExecutor(Map workerData, List<Long> executorId, Map<String, String> credentials) </p>\n{\n    +super(workerData, executorId, credentials);\n    +this.executeSampler = ConfigUtils.mkStatsSampler(stormConf);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void init(Map<Integer, Task> idToTask) {<br/>\n    +this.idToTask = idToTask;<br/>\n    +LOG.info(\"Preparing bolt {}:{}\", componentId, idToTask.keySet());<br/>\n    +for (Map.Entry<Integer, Task> entry : idToTask.entrySet()) {<br/>\n    +    Task taskData = entry.getValue();<br/>\n    +    IBolt boltObject = (IBolt) taskData.getTaskObject();<br/>\n    +    TopologyContext userContext = taskData.getUserContext();<br/>\n    +    taskData.getBuiltInMetrics().registerAll(stormConf, userContext);<br/>\n    +    if (boltObject instanceof ICredentialsListener) </p>\n{\n    +((ICredentialsListener) boltObject).setCredentials(credentials);\n    +    }\n<p>    +    if (Constants.SYSTEM_COMPONENT_ID.equals(componentId)) </p>\n{\n    +Map<String, DisruptorQueue> map = ImmutableMap.of(\"sendqueue\", transferQueue, \"receive\", receiveQueue,\n    +\"transfer\", (DisruptorQueue) workerData.get(\"transfer-queue\"));\n    +BuiltinMetricsUtil.registerQueueMetrics(map, stormConf, userContext);\n    +\n    +Map cachedNodePortToSocket = (Map) ((Atom) workerData.get(\"cached-node+port->socket\")).deref();\n    +BuiltinMetricsUtil.registerIconnectionClientMetrics(cachedNodePortToSocket, stormConf, userContext);\n    +BuiltinMetricsUtil.registerIconnectionServerMetric(workerData.get(\"receiver\"), stormConf, userContext);\n    +    }\n<p> else </p>\n{\n    +Map<String, DisruptorQueue> map = ImmutableMap.of(\"sendqueue\", transferQueue, \"receive\", receiveQueue);\n    +BuiltinMetricsUtil.registerQueueMetrics(map, stormConf, userContext);\n    +    }\n<p>    +<br/>\n    +    IOutputCollector outputCollector = new BoltOutputCollectorImpl(this, taskData, entry.getKey(), rand, isEventLoggers, isDebug);<br/>\n    +    boltObject.prepare(stormConf, userContext, new OutputCollector(outputCollector));<br/>\n    +}<br/>\n    +openOrPrepareWasCalled.set(true);<br/>\n    +LOG.info(\"Prepared bolt {}:{}\", componentId, idToTask.keySet());<br/>\n    +setupMetrics();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +while (!stormActive.get()) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Same. This should block init() only once instead of each loop.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654965/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654970","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654970","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654970,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5NzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T11:15:08Z","updated_at":"2025-01-24T14:24:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72961410\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72961410</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,575 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    ok, will address</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654970/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654972","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654972","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654972,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T11:17:24Z","updated_at":"2025-01-24T14:24:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72961638\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72961638</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.ICredentialsListener;<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.daemon.metrics.BuiltinMetricsUtil;<br/>\n    +import org.apache.storm.daemon.metrics.SpoutThrottlingMetrics;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutAckInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutFailInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutWaitStrategy;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class SpoutExecutor extends Executor {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(SpoutExecutor.class);<br/>\n    +<br/>\n    +    private final ISpoutWaitStrategy spoutWaitStrategy;<br/>\n    +    private Integer maxSpoutPending;<br/>\n    +    private final AtomicBoolean lastActive;<br/>\n    +    private List<ISpout> spouts;<br/>\n    +    private List<SpoutOutputCollector> outputCollectors;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final MutableLong emptyEmitStreak;<br/>\n    +    private final SpoutThrottlingMetrics spoutThrottlingMetrics;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private RotatingMap<Long, TupleInfo> pending;<br/>\n    +    private final boolean backPressureEnabled;<br/>\n    +<br/>\n    +    public SpoutExecutor(final Map workerData, final List<Long> executorId, Map<String, String> credentials) </p>\n{\n    +super(workerData, executorId, credentials);\n    +this.spoutWaitStrategy = Utils.newInstance((String) stormConf.get(Config.TOPOLOGY_SPOUT_WAIT_STRATEGY));\n    +this.spoutWaitStrategy.prepare(stormConf);\n    +\n    +this.backPressureEnabled = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_BACKPRESSURE_ENABLE), false);\n    +\n    +this.lastActive = new AtomicBoolean(false);\n    +this.hasAckers = StormCommon.hasAckers(stormConf);\n    +this.emittedCount = new MutableLong(0);\n    +this.emptyEmitStreak = new MutableLong(0);\n    +this.spoutThrottlingMetrics = new SpoutThrottlingMetrics();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void init(final Map<Integer, Task> idToTask) {<br/>\n    +LOG.info(\"Opening spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +this.idToTask = idToTask;<br/>\n    +this.maxSpoutPending = Utils.getInt(stormConf.get(Config.TOPOLOGY_MAX_SPOUT_PENDING), 0) * idToTask.size();<br/>\n    +this.spouts = new ArrayList<>();<br/>\n    +for (Task task : idToTask.values()) </p>\n{\n    +    this.spouts.add((ISpout) task.getTaskObject());\n    +}\n<p>    +this.pending = new RotatingMap<>(2, new RotatingMap.ExpiredCallback<Long, TupleInfo>() {<br/>\n    +    @Override<br/>\n    +    public void expire(Long key, TupleInfo tupleInfo) {<br/>\n    +Long timeDelta = null;<br/>\n    +if (tupleInfo.getTimestamp() != 0) </p>\n{\n    +    timeDelta = Time.deltaMs(tupleInfo.getTimestamp());\n    +}\n<p>    +failSpoutMsg(SpoutExecutor.this, idToTask.get(tupleInfo.getTaskId()), timeDelta, tupleInfo, \"TIMEOUT\");<br/>\n    +    }<br/>\n    +});<br/>\n    +<br/>\n    +this.spoutThrottlingMetrics.registerAll(stormConf, idToTask.values().iterator().next().getUserContext());<br/>\n    +this.outputCollectors = new ArrayList<>();<br/>\n    +for (Map.Entry<Integer, Task> entry : idToTask.entrySet()) {<br/>\n    +    Task taskData = entry.getValue();<br/>\n    +    ISpout spoutObject = (ISpout) taskData.getTaskObject();<br/>\n    +    SpoutOutputCollectorImpl spoutOutputCollector = new SpoutOutputCollectorImpl(<br/>\n    +    spoutObject, this, taskData, entry.getKey(), emittedCount,<br/>\n    +    hasAckers, rand, isEventLoggers, isDebug, pending);<br/>\n    +    SpoutOutputCollector outputCollector = new SpoutOutputCollector(spoutOutputCollector);<br/>\n    +    this.outputCollectors.add(outputCollector);<br/>\n    +<br/>\n    +    taskData.getBuiltInMetrics().registerAll(stormConf, taskData.getUserContext());<br/>\n    +    Map<String, DisruptorQueue> map = ImmutableMap.of(\"sendqueue\", transferQueue, \"receive\", receiveQueue);<br/>\n    +    BuiltinMetricsUtil.registerQueueMetrics(map, stormConf, taskData.getUserContext());<br/>\n    +<br/>\n    +    if (spoutObject instanceof ICredentialsListener) </p>\n{\n    +((ICredentialsListener) spoutObject).setCredentials(credentials);\n    +    }\n<p>    +    spoutObject.open(stormConf, taskData.getUserContext(), outputCollector);<br/>\n    +}<br/>\n    +openOrPrepareWasCalled.set(true);<br/>\n    +LOG.info(\"Opened spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +setupMetrics();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +while (!stormActive.get()) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    do you mean this should be moving into `init` instead of in `call` method?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654972/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942686","html_url":"https://github.com/apache/storm/issues/5793#issuecomment-2612942686","issue_url":"https://api.github.com/repos/apache/storm/issues/5793","id":2612942686,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDI2ODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T13:57:01Z","updated_at":"2025-01-24T16:36:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eawilliams\">eawilliams</a>:</i>\n<p>Accidentally added this in the wrong JIRA project... Sorry!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942686/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654977","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654977","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654977,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5Nzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T14:11:34Z","updated_at":"2025-01-24T14:24:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72983906\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72983906</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.ICredentialsListener;<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.daemon.metrics.BuiltinMetricsUtil;<br/>\n    +import org.apache.storm.daemon.metrics.SpoutThrottlingMetrics;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutAckInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutFailInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutWaitStrategy;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class SpoutExecutor extends Executor {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(SpoutExecutor.class);<br/>\n    +<br/>\n    +    private final ISpoutWaitStrategy spoutWaitStrategy;<br/>\n    +    private Integer maxSpoutPending;<br/>\n    +    private final AtomicBoolean lastActive;<br/>\n    +    private List<ISpout> spouts;<br/>\n    +    private List<SpoutOutputCollector> outputCollectors;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final MutableLong emptyEmitStreak;<br/>\n    +    private final SpoutThrottlingMetrics spoutThrottlingMetrics;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private RotatingMap<Long, TupleInfo> pending;<br/>\n    +    private final boolean backPressureEnabled;<br/>\n    +<br/>\n    +    public SpoutExecutor(final Map workerData, final List<Long> executorId, Map<String, String> credentials) </p>\n{\n    +super(workerData, executorId, credentials);\n    +this.spoutWaitStrategy = Utils.newInstance((String) stormConf.get(Config.TOPOLOGY_SPOUT_WAIT_STRATEGY));\n    +this.spoutWaitStrategy.prepare(stormConf);\n    +\n    +this.backPressureEnabled = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_BACKPRESSURE_ENABLE), false);\n    +\n    +this.lastActive = new AtomicBoolean(false);\n    +this.hasAckers = StormCommon.hasAckers(stormConf);\n    +this.emittedCount = new MutableLong(0);\n    +this.emptyEmitStreak = new MutableLong(0);\n    +this.spoutThrottlingMetrics = new SpoutThrottlingMetrics();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void init(final Map<Integer, Task> idToTask) {<br/>\n    +LOG.info(\"Opening spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +this.idToTask = idToTask;<br/>\n    +this.maxSpoutPending = Utils.getInt(stormConf.get(Config.TOPOLOGY_MAX_SPOUT_PENDING), 0) * idToTask.size();<br/>\n    +this.spouts = new ArrayList<>();<br/>\n    +for (Task task : idToTask.values()) </p>\n{\n    +    this.spouts.add((ISpout) task.getTaskObject());\n    +}\n<p>    +this.pending = new RotatingMap<>(2, new RotatingMap.ExpiredCallback<Long, TupleInfo>() {<br/>\n    +    @Override<br/>\n    +    public void expire(Long key, TupleInfo tupleInfo) {<br/>\n    +Long timeDelta = null;<br/>\n    +if (tupleInfo.getTimestamp() != 0) </p>\n{\n    +    timeDelta = Time.deltaMs(tupleInfo.getTimestamp());\n    +}\n<p>    +failSpoutMsg(SpoutExecutor.this, idToTask.get(tupleInfo.getTaskId()), timeDelta, tupleInfo, \"TIMEOUT\");<br/>\n    +    }<br/>\n    +});<br/>\n    +<br/>\n    +this.spoutThrottlingMetrics.registerAll(stormConf, idToTask.values().iterator().next().getUserContext());<br/>\n    +this.outputCollectors = new ArrayList<>();<br/>\n    +for (Map.Entry<Integer, Task> entry : idToTask.entrySet()) {<br/>\n    +    Task taskData = entry.getValue();<br/>\n    +    ISpout spoutObject = (ISpout) taskData.getTaskObject();<br/>\n    +    SpoutOutputCollectorImpl spoutOutputCollector = new SpoutOutputCollectorImpl(<br/>\n    +    spoutObject, this, taskData, entry.getKey(), emittedCount,<br/>\n    +    hasAckers, rand, isEventLoggers, isDebug, pending);<br/>\n    +    SpoutOutputCollector outputCollector = new SpoutOutputCollector(spoutOutputCollector);<br/>\n    +    this.outputCollectors.add(outputCollector);<br/>\n    +<br/>\n    +    taskData.getBuiltInMetrics().registerAll(stormConf, taskData.getUserContext());<br/>\n    +    Map<String, DisruptorQueue> map = ImmutableMap.of(\"sendqueue\", transferQueue, \"receive\", receiveQueue);<br/>\n    +    BuiltinMetricsUtil.registerQueueMetrics(map, stormConf, taskData.getUserContext());<br/>\n    +<br/>\n    +    if (spoutObject instanceof ICredentialsListener) </p>\n{\n    +((ICredentialsListener) spoutObject).setCredentials(credentials);\n    +    }\n<p>    +    spoutObject.open(stormConf, taskData.getUserContext(), outputCollector);<br/>\n    +}<br/>\n    +openOrPrepareWasCalled.set(true);<br/>\n    +LOG.info(\"Opened spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +setupMetrics();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +while (!stormActive.get()) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes I confused how to translate `spout-transfer-fn` and `bolt-transfer-fn`, but I see now. This logic is not in inner fn, so it should be the first line of init(). Same thing on Bolt.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654977/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654983","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654983","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654983,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T14:30:33Z","updated_at":"2025-01-24T14:24:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72987136\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72987136</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/bolt/BoltOutputCollectorImpl.java &#8212;<br/>\n    @@ -0,0 +1,168 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.bolt;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.Set;<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.hooks.info.BoltAckInfo;<br/>\n    +import org.apache.storm.hooks.info.BoltFailInfo;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.task.IOutputCollector;<br/>\n    +import org.apache.storm.tuple.MessageId;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class BoltOutputCollectorImpl implements IOutputCollector {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(BoltOutputCollectorImpl.class);<br/>\n    +<br/>\n    +    private final BoltExecutor executor;<br/>\n    +    private final Task taskData;<br/>\n    +    private final int taskId;<br/>\n    +    private final Random random;<br/>\n    +    private final boolean isEventLoggers;<br/>\n    +    private final boolean isDebug;<br/>\n    +<br/>\n    +    public BoltOutputCollectorImpl(BoltExecutor executor, Task taskData, int taskId, Random random,<br/>\n    +   boolean isEventLoggers, boolean isDebug) </p>\n{\n    +this.executor = executor;\n    +this.taskData = taskData;\n    +this.taskId = taskId;\n    +this.random = random;\n    +this.isEventLoggers = isEventLoggers;\n    +this.isDebug = isDebug;\n    +    }\n<p>    +<br/>\n    +    public List<Integer> emit(String streamId, Collection<Tuple> anchors, List<Object> tuple) </p>\n{\n    +return boltEmit(streamId, anchors, tuple, null);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void emitDirect(int taskId, String streamId, Collection<Tuple> anchors, List<Object> tuple) </p>\n{\n    +boltEmit(streamId, anchors, tuple, taskId);\n    +    }\n<p>    +<br/>\n    +    private List<Integer> boltEmit(String streamId, Collection<Tuple> anchors, List<Object> values, Integer targetTaskId) {<br/>\n    +List<Integer> outTasks;<br/>\n    +if (targetTaskId != null) </p>\n{\n    +    outTasks = taskData.getOutgoingTasks(targetTaskId, streamId, values);\n    +}\n<p> else </p>\n{\n    +    outTasks = taskData.getOutgoingTasks(streamId, values);\n    +}\n<p>    +<br/>\n    +for (Integer t : outTasks) {<br/>\n    +    Map<Long, Long> anchorsToIds = new HashMap<>();<br/>\n    +    if (anchors != null) {<br/>\n    +for (Tuple a : anchors) {<br/>\n    +    long edgeId = MessageId.generateId(random);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    ```<br/>\n    (let <span class=\"error\">&#91;root-ids (-> a .getMessageId .getAnchorsToIds .keySet)&#93;</span></p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(when (pos? (count root-ids))</li>\n\t<li>(let <span class=\"error\">&#91;edge-id (MessageId/generateId rand)&#93;</span></li>\n\t<li>(.updateAckVal a edge-id)</li>\n\t<li>(fast-list-iter <span class=\"error\">&#91;root-id root-ids&#93;</span></li>\n\t<li>(put-xor! anchors-to-ids root-id edge-id))))))<br/>\n    ```</li>\n</ul>\n\n\n<p>    if root-ids.size() is 0, ported code behaves differ. It should check size first, and skip all if size is 0.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654983/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654987","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654987","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654987,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T14:33:20Z","updated_at":"2025-01-24T14:24:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r72987752\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r72987752</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/bolt/BoltOutputCollectorImpl.java &#8212;<br/>\n    @@ -0,0 +1,168 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.bolt;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.Set;<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.hooks.info.BoltAckInfo;<br/>\n    +import org.apache.storm.hooks.info.BoltFailInfo;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.task.IOutputCollector;<br/>\n    +import org.apache.storm.tuple.MessageId;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class BoltOutputCollectorImpl implements IOutputCollector {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(BoltOutputCollectorImpl.class);<br/>\n    +<br/>\n    +    private final BoltExecutor executor;<br/>\n    +    private final Task taskData;<br/>\n    +    private final int taskId;<br/>\n    +    private final Random random;<br/>\n    +    private final boolean isEventLoggers;<br/>\n    +    private final boolean isDebug;<br/>\n    +<br/>\n    +    public BoltOutputCollectorImpl(BoltExecutor executor, Task taskData, int taskId, Random random,<br/>\n    +   boolean isEventLoggers, boolean isDebug) </p>\n{\n    +this.executor = executor;\n    +this.taskData = taskData;\n    +this.taskId = taskId;\n    +this.random = random;\n    +this.isEventLoggers = isEventLoggers;\n    +this.isDebug = isDebug;\n    +    }\n<p>    +<br/>\n    +    public List<Integer> emit(String streamId, Collection<Tuple> anchors, List<Object> tuple) </p>\n{\n    +return boltEmit(streamId, anchors, tuple, null);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void emitDirect(int taskId, String streamId, Collection<Tuple> anchors, List<Object> tuple) </p>\n{\n    +boltEmit(streamId, anchors, tuple, taskId);\n    +    }\n<p>    +<br/>\n    +    private List<Integer> boltEmit(String streamId, Collection<Tuple> anchors, List<Object> values, Integer targetTaskId) {<br/>\n    +List<Integer> outTasks;<br/>\n    +if (targetTaskId != null) </p>\n{\n    +    outTasks = taskData.getOutgoingTasks(targetTaskId, streamId, values);\n    +}\n<p> else </p>\n{\n    +    outTasks = taskData.getOutgoingTasks(streamId, values);\n    +}\n<p>    +<br/>\n    +for (Integer t : outTasks) {<br/>\n    +    Map<Long, Long> anchorsToIds = new HashMap<>();<br/>\n    +    if (anchors != null) {<br/>\n    +for (Tuple a : anchors) {<br/>\n    +    long edgeId = MessageId.generateId(random);<br/>\n    +    ((TupleImpl) a).updateAckVal(edgeId);<br/>\n    +    for (Long root_id : a.getMessageId().getAnchorsToIds().keySet()) </p>\n{\n    +putXor(anchorsToIds, root_id, edgeId);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    MessageId msgId = MessageId.makeId(anchorsToIds);<br/>\n    +    TupleImpl tupleExt = new TupleImpl(executor.getWorkerTopologyContext(), values, taskId, streamId, msgId);<br/>\n    +    executor.getExecutorTransfer().transfer(t, tupleExt);<br/>\n    +}<br/>\n    +if (isEventLoggers) </p>\n{\n    +    executor.sendToEventLogger(executor, taskData, values, executor.getComponentId(), null, random);\n    +}\n<p>    +return outTasks;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    `(or out-tasks [])` seems to guarantee at least empty list. Does this guarantee the same?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654987/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236604920","html_url":"https://github.com/apache/storm/pull/1445#issuecomment-236604920","issue_url":"https://api.github.com/repos/apache/storm/issues/1445","id":236604920,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjYwNDkyMA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T14:55:10Z","updated_at":"2016-08-01T14:55:10Z","author_association":"CONTRIBUTOR","body":"I've done reviewing with first pass. Great work.\nThis is rather huge diff so the more reviewers the better reviewing. Please go on reviewing everybody.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236604920/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654993","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654993","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654993,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5OTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T14:55:11Z","updated_at":"2025-01-24T14:24:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445</a></p>\n\n<p>    I've done reviewing with first pass. Great work.<br/>\n    This is rather huge diff so the more reviewers the better reviewing. Please go on reviewing everybody.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654993/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236679826","html_url":"https://github.com/apache/storm/pull/1586#issuecomment-236679826","issue_url":"https://api.github.com/repos/apache/storm/issues/1586","id":236679826,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjY3OTgyNg==","user":{"login":"priyank5485","id":5192436,"node_id":"MDQ6VXNlcjUxOTI0MzY=","avatar_url":"https://avatars.githubusercontent.com/u/5192436?v=4","gravatar_id":"","url":"https://api.github.com/users/priyank5485","html_url":"https://github.com/priyank5485","followers_url":"https://api.github.com/users/priyank5485/followers","following_url":"https://api.github.com/users/priyank5485/following{/other_user}","gists_url":"https://api.github.com/users/priyank5485/gists{/gist_id}","starred_url":"https://api.github.com/users/priyank5485/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/priyank5485/subscriptions","organizations_url":"https://api.github.com/users/priyank5485/orgs","repos_url":"https://api.github.com/users/priyank5485/repos","events_url":"https://api.github.com/users/priyank5485/events{/privacy}","received_events_url":"https://api.github.com/users/priyank5485/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T19:21:26Z","updated_at":"2016-08-01T19:21:26Z","author_association":"CONTRIBUTOR","body":"@harshach I added some more comments in ack method and commit method for acking logic. I also moved code interacting with zk and kinesis in to its own class to make KinesisRecordsManager smaller. Please review when you get a chance\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236679826/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907914","html_url":"https://github.com/apache/storm/issues/5622#issuecomment-2612907914","issue_url":"https://api.github.com/repos/apache/storm/issues/5622","id":2612907914,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDc5MTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T19:21:28Z","updated_at":"2025-01-24T16:18:54Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user priyank5485 commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1586\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1586</a></p>\n\n<p>    @harshach I added some more comments in ack method and commit method for acking logic. I also moved code interacting with zk and kinesis in to its own class to make KinesisRecordsManager smaller. Please review when you get a chance</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907914/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907921","html_url":"https://github.com/apache/storm/issues/5622#issuecomment-2612907921","issue_url":"https://api.github.com/repos/apache/storm/issues/5622","id":2612907921,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDc5MjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T20:05:02Z","updated_at":"2025-01-24T16:18:54Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1586#discussion_r73043179\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1586#discussion_r73043179</a></p>\n\n<p>    &#8212; Diff: external/storm-kinesis/src/main/java/org/apache/storm/kinesis/spout/KinesisRecordsManager.java &#8212;<br/>\n    @@ -0,0 +1,449 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.kinesis.spout;<br/>\n    +<br/>\n    +import com.amazonaws.services.kinesis.model.ExpiredIteratorException;<br/>\n    +import com.amazonaws.services.kinesis.model.GetRecordsResult;<br/>\n    +import com.amazonaws.services.kinesis.model.ProvisionedThroughputExceededException;<br/>\n    +import com.amazonaws.services.kinesis.model.Record;<br/>\n    +import com.amazonaws.services.kinesis.model.Shard;<br/>\n    +import com.amazonaws.services.kinesis.model.ShardIteratorType;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.math.BigInteger;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Iterator;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.TreeSet;<br/>\n    +<br/>\n    +class KinesisRecordsManager {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(KinesisRecordsManager.class);<br/>\n    +    // object handling zk interaction<br/>\n    +    private transient ZKConnection zkConnection;<br/>\n    +    // object handling interaction with kinesis<br/>\n    +    private transient KinesisConnection kinesisConnection;<br/>\n    +    // Kinesis Spout KinesisConfig object<br/>\n    +    private transient final KinesisConfig kinesisConfig;<br/>\n    +    // Queue of records per shard fetched from kinesis and are waiting to be emitted<br/>\n    +    private transient Map<String, LinkedList<Record>> toEmitPerShard = new HashMap<>();<br/>\n    +    // Map of records  that were fetched from kinesis as a result of failure and are waiting to be emitted<br/>\n    +    private transient Map<KinesisMessageId, Record> failedandFetchedRecords = new HashMap<>();<br/>\n    +    // Sequence numbers per shard that have been emitted. LinkedHashSet as we need to remove on ack or fail. At the same time order is needed to figure out the<br/>\n    +    // sequence number to commit. Logic explained in commit<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> emittedPerShard = new HashMap<>();<br/>\n    +    // sorted acked sequence numbers - needed to figure out what sequence number can be committed<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> ackedPerShard = new HashMap<>();<br/>\n    +    // sorted failed sequence numbers - needed to figure out what sequence number can be committed<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> failedPerShard = new HashMap<>();<br/>\n    +    // shard iterator corresponding to position in shard for new messages<br/>\n    +    private transient Map<String, String> shardIteratorPerShard = new HashMap<>();<br/>\n    +    // last fetched sequence number corresponding to position in shard<br/>\n    +    private transient Map<String, String> fetchedSequenceNumberPerShard = new HashMap<>();<br/>\n    +    // shard iterator corresponding to position in shard for failed messages<br/>\n    +    private transient Map<KinesisMessageId, String> shardIteratorPerFailedMessage = new HashMap<>();<br/>\n    +    // timestamp to decide when to commit to zk again<br/>\n    +    private transient long lastCommitTime;<br/>\n    +    // boolean to track deactivated state<br/>\n    +    private transient boolean deactivated;<br/>\n    +<br/>\n    +    KinesisRecordsManager (KinesisConfig kinesisConfig) </p>\n{\n    +this.kinesisConfig = kinesisConfig;\n    +this.zkConnection = new ZKConnection(kinesisConfig.getZkInfo());\n    +this.kinesisConnection = new KinesisConnection(kinesisConfig.getKinesisConnectionInfo());\n    +    }\n<p>    +<br/>\n    +    void initialize (int myTaskIndex, int totalTasks) {<br/>\n    +deactivated = false;<br/>\n    +lastCommitTime = System.currentTimeMillis();<br/>\n    +kinesisConnection.initialize();<br/>\n    +zkConnection.initialize();<br/>\n    +List<Shard> shards = kinesisConnection.getShardsForStream(kinesisConfig.getStreamName());<br/>\n    +LOG.info(\"myTaskIndex is \" + myTaskIndex);<br/>\n    +LOG.info(\"totalTasks is \" + totalTasks);<br/>\n    +int i = myTaskIndex;<br/>\n    +while (i < shards.size()) </p>\n{\n    +    LOG.info(\"Shard id \" + shards.get(i).getShardId() + \" assigned to task \" + myTaskIndex);\n    +    toEmitPerShard.put(shards.get(i).getShardId(), new LinkedList<Record>());\n    +    i += totalTasks;\n    +}\n<p>    +initializeFetchedSequenceNumbers();<br/>\n    +refreshShardIteratorsForNewRecords();<br/>\n    +    }<br/>\n    +<br/>\n    +    void next (SpoutOutputCollector collector) {<br/>\n    +if (shouldCommit()) </p>\n{\n    +    commit();\n    +}<br/>\n    +KinesisMessageId failedMessageId = kinesisConfig.getFailedMessageRetryHandler().getNextFailedMessageToRetry();<br/>\n    +if (failedMessageId  != null) {<br/>\n    +    // if the retry service returns a message that is not in failed set then ignore it. should never happen<br/>\n    +    BigInteger failedSequenceNumber = new BigInteger(failedMessageId.getSequenceNumber());<br/>\n    +    if (failedPerShard.containsKey(failedMessageId.getShardId()) && failedPerShard.get(failedMessageId.getShardId()).contains(failedSequenceNumber)) {<br/>\n    +if (!failedandFetchedRecords.containsKey(failedMessageId)) {\n    +    fetchFailedRecords(failedMessageId);\n    +}<br/>\n    +if (emitFailedRecord(collector, failedMessageId)) {\n    +    failedPerShard.get(failedMessageId.getShardId()).remove(failedSequenceNumber);\n    +    kinesisConfig.getFailedMessageRetryHandler().failedMessageEmitted(failedMessageId);\n    +    return;\n    +} else {\n    +    LOG.warn(\"failedMessageEmitted not called on retrier for \" + failedMessageId + \". This can happen a few times but should not happen \" +\n    +    \"infinitely\");\n    +}<br/>\n    +    } else {\n    +LOG.warn(\"failedPerShard does not contain \" + failedMessageId + \". This should never happen.\");\n    +    }<br/>\n    +}<br/>\n    +LOG.debug(\"No failed record to emit for now. Hence will try to emit new records\");<br/>\n    +// if maximum uncommitted records count has reached, so dont emit any new records and return<br/>\n    +if (!(getUncommittedRecordsCount() < kinesisConfig.getMaxUncommittedRecords())) {\n    +    LOG.warn(\"maximum uncommitted records count has reached. so not emitting any new records and returning\");\n    +    return;\n    +}<br/>\n    +// early return as no shard is assigned - probably because number of executors > number of shards<br/>\n    +if (toEmitPerShard.isEmpty()) {\n    +    LOG.warn(\"No shard is assigned to this task. Hence not emitting any tuple.\");\n    +    return;\n    +}<br/>\n    +<br/>\n    +if (shouldFetchNewRecords()) {\n    +    fetchNewRecords();\n    +}<br/>\n    +emitNewRecord(collector);<br/>\n    +    }<br/>\n    +<br/>\n    +    void ack (KinesisMessageId kinesisMessageId) {<br/>\n    +// for an acked message add it to acked set and remove it from emitted and failed<br/>\n    +String shardId = kinesisMessageId.getShardId();<br/>\n    +BigInteger sequenceNumber = new BigInteger(kinesisMessageId.getSequenceNumber());<br/>\n    +LOG.debug(\"Ack received for shardId: \" + shardId + \" sequenceNumber: \" + sequenceNumber);<br/>\n    +// if an ack is received for a message then add it to the ackedPerShard TreeSet. TreeSet because while committing we need to figure out what is the<br/>\n    +// highest sequence number that can be committed for this shard<br/>\n    +if (!ackedPerShard.containsKey(shardId)) {\n    +    ackedPerShard.put(shardId, new TreeSet<BigInteger>());\n    +}<br/>\n    +ackedPerShard.get(shardId).add(sequenceNumber);<br/>\n    +// if the acked message was in emittedPerShard that means we need to remove it from the emittedPerShard(which keeps track of in flight tuples)<br/>\n    +if (emittedPerShard.containsKey(shardId)) {\n    +    TreeSet<BigInteger> emitted = emittedPerShard.get(shardId);\n    +    emitted.remove(sequenceNumber);\n    +}<br/>\n    +// an acked message should not be in failed since if it fails and gets re-emitted it moves to emittedPerShard from failedPerShard. Defensive coding.<br/>\n    +// Remove it from failedPerShard anyway<br/>\n    +if (failedPerShard.containsKey(shardId)) {\n    +    failedPerShard.get(shardId).remove(sequenceNumber);\n    +}<br/>\n    +// if an ack is for a message that failed once at least and was re-emitted then the record itself will be in failedAndFetchedRecords. We use that to<br/>\n    +// determine if the FailedMessageRetryHandler needs to be told about it and then remove the record itself to clean up memory<br/>\n    +if (failedandFetchedRecords.containsKey(kinesisMessageId)) {\n    +    kinesisConfig.getFailedMessageRetryHandler().acked(kinesisMessageId);\n    +    failedandFetchedRecords.remove(kinesisMessageId);\n    +}<br/>\n    +// keep committing when topology is deactivated since ack and fail keep getting called on deactivated topology<br/>\n    +if (deactivated) {    +    commit();    +}\n<p>    +    }<br/>\n    +<br/>\n    +    void fail (KinesisMessageId kinesisMessageId) {<br/>\n    +String shardId = kinesisMessageId.getShardId();<br/>\n    +BigInteger sequenceNumber = new BigInteger(kinesisMessageId.getSequenceNumber());<br/>\n    +LOG.debug(\"Fail received for shardId: \" + shardId + \" sequenceNumber: \" + sequenceNumber);<br/>\n    +// for a failed message add it to failed set if it will be retried, otherwise ack it; remove from emitted either way<br/>\n    +if (kinesisConfig.getFailedMessageRetryHandler().failed(kinesisMessageId)) {<br/>\n    +    if (!failedPerShard.containsKey(shardId)) </p>\n{\n    +failedPerShard.put(shardId, new TreeSet<BigInteger>());\n    +    }\n<p>    +    failedPerShard.get(shardId).add(sequenceNumber);<br/>\n    +    TreeSet<BigInteger> emitted = emittedPerShard.get(shardId);<br/>\n    +    emitted.remove(sequenceNumber);<br/>\n    +} else </p>\n{\n    +    ack(kinesisMessageId);\n    +}\n<p>    +// keep committing when topology is deactivated since ack and fail keep getting called on deactivated topology<br/>\n    +if (deactivated) </p>\n{\n    +    commit();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    void commit () {<br/>\n    +// We have three mutually disjoint treesets per shard at any given time to keep track of what sequence number can be committed to zookeeper.<br/>\n    +// emittedPerShard, ackedPerShard and failedPerShard. Any record starts by entering emittedPerShard. On ack it moves from emittedPerShard to<br/>\n    +// ackedPerShard and on fail if retry service tells us to retry then it moves from emittedPerShard to failedPerShard. The failed records will move from<br/>\n    +// failedPerShard to emittedPerShard when the failed record is emitted again as a retry.<br/>\n    +// Logic for deciding what sequence number to commit is find the highest sequence number from ackedPerShard called X such that there is no sequence<br/>\n    +// number Y in emittedPerShard or failedPerShard that satisfies X > Y. For e.g. if ackedPerShard is 1,4,5, emittedPerShard is 2,6 and<br/>\n    +// failedPerShard is 3,7 then we can only commit 1 and not 4 because 2 is still pending and 3 has failed<br/>\n    +for (String shardId: toEmitPerShard.keySet()) {<br/>\n    +    if (ackedPerShard.containsKey(shardId)) {<br/>\n    +BigInteger commitSequenceNumberBound = null;<br/>\n    +if (failedPerShard.containsKey(shardId) && !failedPerShard.get(shardId).isEmpty()) </p>\n{\n    +    commitSequenceNumberBound = failedPerShard.get(shardId).first();\n    +}\n<p>    +if (emittedPerShard.containsKey(shardId) && !emittedPerShard.get(shardId).isEmpty()) {<br/>\n    +    BigInteger smallestEmittedSequenceNumber = emittedPerShard.get(shardId).first();<br/>\n    +    if (commitSequenceNumberBound == null || (commitSequenceNumberBound.compareTo(smallestEmittedSequenceNumber) == 1)) </p>\n{\n    +commitSequenceNumberBound = smallestEmittedSequenceNumber;\n    +    }\n<p>    +}<br/>\n    +Iterator<BigInteger> ackedSequenceNumbers = ackedPerShard.get(shardId).iterator();<br/>\n    +BigInteger ackedSequenceNumberToCommit = null;<br/>\n    +while (ackedSequenceNumbers.hasNext()) {<br/>\n    +    BigInteger ackedSequenceNumber = ackedSequenceNumbers.next();<br/>\n    +    if (commitSequenceNumberBound == null || (commitSequenceNumberBound.compareTo(ackedSequenceNumber) == 1)) </p>\n{\n    +ackedSequenceNumberToCommit = ackedSequenceNumber;\n    +ackedSequenceNumbers.remove();\n    +    }\n<p> else </p>\n{\n    +break;\n    +    }\n<p>    +}<br/>\n    +if (ackedSequenceNumberToCommit != null) </p>\n{\n    +    Map<Object, Object> state = new HashMap<>();\n    +    state.put(\"committedSequenceNumber\", ackedSequenceNumberToCommit.toString());\n    +    LOG.debug(\"Committing sequence number \" + ackedSequenceNumberToCommit.toString() + \" for shardId \" + shardId);\n    +    zkConnection.commitState(kinesisConfig.getStreamName(), shardId, state);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +lastCommitTime = System.currentTimeMillis();<br/>\n    +    }<br/>\n    +<br/>\n    +    void activate () </p>\n{\n    +LOG.info(\"Activate called\");\n    +deactivated = false;\n    +kinesisConnection.initialize();\n    +    }\n<p>    +<br/>\n    +    void deactivate () </p>\n{\n    +LOG.info(\"Deactivate called\");\n    +deactivated = true;\n    +commit();\n    +kinesisConnection.shutdown();\n    +    }\n<p>    +<br/>\n    +    void close () </p>\n{\n    +commit();\n    +kinesisConnection.shutdown();\n    +zkConnection.shutdown();\n    +    }\n<p>    +<br/>\n    +    // fetch records from kinesis starting at sequence number for message passed as argument. Any other messages fetched and are in the failed queue will also<br/>\n    +    // be kept in memory to avoid going to kinesis again for retry<br/>\n    +    private void fetchFailedRecords (KinesisMessageId kinesisMessageId) {<br/>\n    +// if shard iterator not present for this message, get it<br/>\n    +if (!shardIteratorPerFailedMessage.containsKey(kinesisMessageId)) </p>\n{\n    +    refreshShardIteratorForFailedRecord(kinesisMessageId);\n    +}\n<p>    +String shardIterator = shardIteratorPerFailedMessage.get(kinesisMessageId);<br/>\n    +LOG.debug(\"Fetching failed records for shard id :\" + kinesisMessageId.getShardId() + \" at sequence number \" + kinesisMessageId.getSequenceNumber() +<br/>\n    +\" using shardIterator \" + shardIterator);<br/>\n    +try {<br/>\n    +    GetRecordsResult getRecordsResult = kinesisConnection.fetchRecords(shardIterator);<br/>\n    +    if (getRecordsResult != null) {<br/>\n    +List<Record> records = getRecordsResult.getRecords();<br/>\n    +LOG.debug(\"Records size from fetchFailedRecords is \" + records.size());<br/>\n    +// update the shard iterator to next one in case this fetch does not give the message.<br/>\n    +shardIteratorPerFailedMessage.put(kinesisMessageId, getRecordsResult.getNextShardIterator());<br/>\n    +if (records.size() == 0) {<br/>\n    +    LOG.warn(\"No records returned from kinesis. Hence sleeping for 1 second\");<br/>\n    +    Thread.sleep(1000);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Sorry missed these earlier. Any reason for it to sleep exactly one sec or should it be configurable.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907921/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236707427","html_url":"https://github.com/apache/storm/pull/1586#issuecomment-236707427","issue_url":"https://api.github.com/repos/apache/storm/issues/1586","id":236707427,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjcwNzQyNw==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T21:05:02Z","updated_at":"2016-08-01T21:05:02Z","author_association":"CONTRIBUTOR","body":"+1. Build failures not related to the patch.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236707427/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907922","html_url":"https://github.com/apache/storm/issues/5622#issuecomment-2612907922","issue_url":"https://api.github.com/repos/apache/storm/issues/5622","id":2612907922,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDc5MjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T21:05:03Z","updated_at":"2025-01-24T16:18:54Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1586\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1586</a></p>\n\n<p>    +1. Build failures not related to the patch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907927","html_url":"https://github.com/apache/storm/issues/5622#issuecomment-2612907927","issue_url":"https://api.github.com/repos/apache/storm/issues/5622","id":2612907927,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MDc5Mjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-01T21:22:47Z","updated_at":"2025-01-24T16:18:54Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user priyank5485 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1586#discussion_r73055551\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1586#discussion_r73055551</a></p>\n\n<p>    &#8212; Diff: external/storm-kinesis/src/main/java/org/apache/storm/kinesis/spout/KinesisRecordsManager.java &#8212;<br/>\n    @@ -0,0 +1,449 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.kinesis.spout;<br/>\n    +<br/>\n    +import com.amazonaws.services.kinesis.model.ExpiredIteratorException;<br/>\n    +import com.amazonaws.services.kinesis.model.GetRecordsResult;<br/>\n    +import com.amazonaws.services.kinesis.model.ProvisionedThroughputExceededException;<br/>\n    +import com.amazonaws.services.kinesis.model.Record;<br/>\n    +import com.amazonaws.services.kinesis.model.Shard;<br/>\n    +import com.amazonaws.services.kinesis.model.ShardIteratorType;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.math.BigInteger;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Iterator;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.TreeSet;<br/>\n    +<br/>\n    +class KinesisRecordsManager {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(KinesisRecordsManager.class);<br/>\n    +    // object handling zk interaction<br/>\n    +    private transient ZKConnection zkConnection;<br/>\n    +    // object handling interaction with kinesis<br/>\n    +    private transient KinesisConnection kinesisConnection;<br/>\n    +    // Kinesis Spout KinesisConfig object<br/>\n    +    private transient final KinesisConfig kinesisConfig;<br/>\n    +    // Queue of records per shard fetched from kinesis and are waiting to be emitted<br/>\n    +    private transient Map<String, LinkedList<Record>> toEmitPerShard = new HashMap<>();<br/>\n    +    // Map of records  that were fetched from kinesis as a result of failure and are waiting to be emitted<br/>\n    +    private transient Map<KinesisMessageId, Record> failedandFetchedRecords = new HashMap<>();<br/>\n    +    // Sequence numbers per shard that have been emitted. LinkedHashSet as we need to remove on ack or fail. At the same time order is needed to figure out the<br/>\n    +    // sequence number to commit. Logic explained in commit<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> emittedPerShard = new HashMap<>();<br/>\n    +    // sorted acked sequence numbers - needed to figure out what sequence number can be committed<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> ackedPerShard = new HashMap<>();<br/>\n    +    // sorted failed sequence numbers - needed to figure out what sequence number can be committed<br/>\n    +    private transient Map<String, TreeSet<BigInteger>> failedPerShard = new HashMap<>();<br/>\n    +    // shard iterator corresponding to position in shard for new messages<br/>\n    +    private transient Map<String, String> shardIteratorPerShard = new HashMap<>();<br/>\n    +    // last fetched sequence number corresponding to position in shard<br/>\n    +    private transient Map<String, String> fetchedSequenceNumberPerShard = new HashMap<>();<br/>\n    +    // shard iterator corresponding to position in shard for failed messages<br/>\n    +    private transient Map<KinesisMessageId, String> shardIteratorPerFailedMessage = new HashMap<>();<br/>\n    +    // timestamp to decide when to commit to zk again<br/>\n    +    private transient long lastCommitTime;<br/>\n    +    // boolean to track deactivated state<br/>\n    +    private transient boolean deactivated;<br/>\n    +<br/>\n    +    KinesisRecordsManager (KinesisConfig kinesisConfig) </p>\n{\n    +this.kinesisConfig = kinesisConfig;\n    +this.zkConnection = new ZKConnection(kinesisConfig.getZkInfo());\n    +this.kinesisConnection = new KinesisConnection(kinesisConfig.getKinesisConnectionInfo());\n    +    }\n<p>    +<br/>\n    +    void initialize (int myTaskIndex, int totalTasks) {<br/>\n    +deactivated = false;<br/>\n    +lastCommitTime = System.currentTimeMillis();<br/>\n    +kinesisConnection.initialize();<br/>\n    +zkConnection.initialize();<br/>\n    +List<Shard> shards = kinesisConnection.getShardsForStream(kinesisConfig.getStreamName());<br/>\n    +LOG.info(\"myTaskIndex is \" + myTaskIndex);<br/>\n    +LOG.info(\"totalTasks is \" + totalTasks);<br/>\n    +int i = myTaskIndex;<br/>\n    +while (i < shards.size()) </p>\n{\n    +    LOG.info(\"Shard id \" + shards.get(i).getShardId() + \" assigned to task \" + myTaskIndex);\n    +    toEmitPerShard.put(shards.get(i).getShardId(), new LinkedList<Record>());\n    +    i += totalTasks;\n    +}\n<p>    +initializeFetchedSequenceNumbers();<br/>\n    +refreshShardIteratorsForNewRecords();<br/>\n    +    }<br/>\n    +<br/>\n    +    void next (SpoutOutputCollector collector) {<br/>\n    +if (shouldCommit()) </p>\n{\n    +    commit();\n    +}<br/>\n    +KinesisMessageId failedMessageId = kinesisConfig.getFailedMessageRetryHandler().getNextFailedMessageToRetry();<br/>\n    +if (failedMessageId  != null) {<br/>\n    +    // if the retry service returns a message that is not in failed set then ignore it. should never happen<br/>\n    +    BigInteger failedSequenceNumber = new BigInteger(failedMessageId.getSequenceNumber());<br/>\n    +    if (failedPerShard.containsKey(failedMessageId.getShardId()) && failedPerShard.get(failedMessageId.getShardId()).contains(failedSequenceNumber)) {<br/>\n    +if (!failedandFetchedRecords.containsKey(failedMessageId)) {\n    +    fetchFailedRecords(failedMessageId);\n    +}<br/>\n    +if (emitFailedRecord(collector, failedMessageId)) {\n    +    failedPerShard.get(failedMessageId.getShardId()).remove(failedSequenceNumber);\n    +    kinesisConfig.getFailedMessageRetryHandler().failedMessageEmitted(failedMessageId);\n    +    return;\n    +} else {\n    +    LOG.warn(\"failedMessageEmitted not called on retrier for \" + failedMessageId + \". This can happen a few times but should not happen \" +\n    +    \"infinitely\");\n    +}<br/>\n    +    } else {\n    +LOG.warn(\"failedPerShard does not contain \" + failedMessageId + \". This should never happen.\");\n    +    }<br/>\n    +}<br/>\n    +LOG.debug(\"No failed record to emit for now. Hence will try to emit new records\");<br/>\n    +// if maximum uncommitted records count has reached, so dont emit any new records and return<br/>\n    +if (!(getUncommittedRecordsCount() < kinesisConfig.getMaxUncommittedRecords())) {\n    +    LOG.warn(\"maximum uncommitted records count has reached. so not emitting any new records and returning\");\n    +    return;\n    +}<br/>\n    +// early return as no shard is assigned - probably because number of executors > number of shards<br/>\n    +if (toEmitPerShard.isEmpty()) {\n    +    LOG.warn(\"No shard is assigned to this task. Hence not emitting any tuple.\");\n    +    return;\n    +}<br/>\n    +<br/>\n    +if (shouldFetchNewRecords()) {\n    +    fetchNewRecords();\n    +}<br/>\n    +emitNewRecord(collector);<br/>\n    +    }<br/>\n    +<br/>\n    +    void ack (KinesisMessageId kinesisMessageId) {<br/>\n    +// for an acked message add it to acked set and remove it from emitted and failed<br/>\n    +String shardId = kinesisMessageId.getShardId();<br/>\n    +BigInteger sequenceNumber = new BigInteger(kinesisMessageId.getSequenceNumber());<br/>\n    +LOG.debug(\"Ack received for shardId: \" + shardId + \" sequenceNumber: \" + sequenceNumber);<br/>\n    +// if an ack is received for a message then add it to the ackedPerShard TreeSet. TreeSet because while committing we need to figure out what is the<br/>\n    +// highest sequence number that can be committed for this shard<br/>\n    +if (!ackedPerShard.containsKey(shardId)) {\n    +    ackedPerShard.put(shardId, new TreeSet<BigInteger>());\n    +}<br/>\n    +ackedPerShard.get(shardId).add(sequenceNumber);<br/>\n    +// if the acked message was in emittedPerShard that means we need to remove it from the emittedPerShard(which keeps track of in flight tuples)<br/>\n    +if (emittedPerShard.containsKey(shardId)) {\n    +    TreeSet<BigInteger> emitted = emittedPerShard.get(shardId);\n    +    emitted.remove(sequenceNumber);\n    +}<br/>\n    +// an acked message should not be in failed since if it fails and gets re-emitted it moves to emittedPerShard from failedPerShard. Defensive coding.<br/>\n    +// Remove it from failedPerShard anyway<br/>\n    +if (failedPerShard.containsKey(shardId)) {\n    +    failedPerShard.get(shardId).remove(sequenceNumber);\n    +}<br/>\n    +// if an ack is for a message that failed once at least and was re-emitted then the record itself will be in failedAndFetchedRecords. We use that to<br/>\n    +// determine if the FailedMessageRetryHandler needs to be told about it and then remove the record itself to clean up memory<br/>\n    +if (failedandFetchedRecords.containsKey(kinesisMessageId)) {\n    +    kinesisConfig.getFailedMessageRetryHandler().acked(kinesisMessageId);\n    +    failedandFetchedRecords.remove(kinesisMessageId);\n    +}<br/>\n    +// keep committing when topology is deactivated since ack and fail keep getting called on deactivated topology<br/>\n    +if (deactivated) {    +    commit();    +}\n<p>    +    }<br/>\n    +<br/>\n    +    void fail (KinesisMessageId kinesisMessageId) {<br/>\n    +String shardId = kinesisMessageId.getShardId();<br/>\n    +BigInteger sequenceNumber = new BigInteger(kinesisMessageId.getSequenceNumber());<br/>\n    +LOG.debug(\"Fail received for shardId: \" + shardId + \" sequenceNumber: \" + sequenceNumber);<br/>\n    +// for a failed message add it to failed set if it will be retried, otherwise ack it; remove from emitted either way<br/>\n    +if (kinesisConfig.getFailedMessageRetryHandler().failed(kinesisMessageId)) {<br/>\n    +    if (!failedPerShard.containsKey(shardId)) </p>\n{\n    +failedPerShard.put(shardId, new TreeSet<BigInteger>());\n    +    }\n<p>    +    failedPerShard.get(shardId).add(sequenceNumber);<br/>\n    +    TreeSet<BigInteger> emitted = emittedPerShard.get(shardId);<br/>\n    +    emitted.remove(sequenceNumber);<br/>\n    +} else </p>\n{\n    +    ack(kinesisMessageId);\n    +}\n<p>    +// keep committing when topology is deactivated since ack and fail keep getting called on deactivated topology<br/>\n    +if (deactivated) </p>\n{\n    +    commit();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    void commit () {<br/>\n    +// We have three mutually disjoint treesets per shard at any given time to keep track of what sequence number can be committed to zookeeper.<br/>\n    +// emittedPerShard, ackedPerShard and failedPerShard. Any record starts by entering emittedPerShard. On ack it moves from emittedPerShard to<br/>\n    +// ackedPerShard and on fail if retry service tells us to retry then it moves from emittedPerShard to failedPerShard. The failed records will move from<br/>\n    +// failedPerShard to emittedPerShard when the failed record is emitted again as a retry.<br/>\n    +// Logic for deciding what sequence number to commit is find the highest sequence number from ackedPerShard called X such that there is no sequence<br/>\n    +// number Y in emittedPerShard or failedPerShard that satisfies X > Y. For e.g. if ackedPerShard is 1,4,5, emittedPerShard is 2,6 and<br/>\n    +// failedPerShard is 3,7 then we can only commit 1 and not 4 because 2 is still pending and 3 has failed<br/>\n    +for (String shardId: toEmitPerShard.keySet()) {<br/>\n    +    if (ackedPerShard.containsKey(shardId)) {<br/>\n    +BigInteger commitSequenceNumberBound = null;<br/>\n    +if (failedPerShard.containsKey(shardId) && !failedPerShard.get(shardId).isEmpty()) </p>\n{\n    +    commitSequenceNumberBound = failedPerShard.get(shardId).first();\n    +}\n<p>    +if (emittedPerShard.containsKey(shardId) && !emittedPerShard.get(shardId).isEmpty()) {<br/>\n    +    BigInteger smallestEmittedSequenceNumber = emittedPerShard.get(shardId).first();<br/>\n    +    if (commitSequenceNumberBound == null || (commitSequenceNumberBound.compareTo(smallestEmittedSequenceNumber) == 1)) </p>\n{\n    +commitSequenceNumberBound = smallestEmittedSequenceNumber;\n    +    }\n<p>    +}<br/>\n    +Iterator<BigInteger> ackedSequenceNumbers = ackedPerShard.get(shardId).iterator();<br/>\n    +BigInteger ackedSequenceNumberToCommit = null;<br/>\n    +while (ackedSequenceNumbers.hasNext()) {<br/>\n    +    BigInteger ackedSequenceNumber = ackedSequenceNumbers.next();<br/>\n    +    if (commitSequenceNumberBound == null || (commitSequenceNumberBound.compareTo(ackedSequenceNumber) == 1)) </p>\n{\n    +ackedSequenceNumberToCommit = ackedSequenceNumber;\n    +ackedSequenceNumbers.remove();\n    +    }\n<p> else </p>\n{\n    +break;\n    +    }\n<p>    +}<br/>\n    +if (ackedSequenceNumberToCommit != null) </p>\n{\n    +    Map<Object, Object> state = new HashMap<>();\n    +    state.put(\"committedSequenceNumber\", ackedSequenceNumberToCommit.toString());\n    +    LOG.debug(\"Committing sequence number \" + ackedSequenceNumberToCommit.toString() + \" for shardId \" + shardId);\n    +    zkConnection.commitState(kinesisConfig.getStreamName(), shardId, state);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +lastCommitTime = System.currentTimeMillis();<br/>\n    +    }<br/>\n    +<br/>\n    +    void activate () </p>\n{\n    +LOG.info(\"Activate called\");\n    +deactivated = false;\n    +kinesisConnection.initialize();\n    +    }\n<p>    +<br/>\n    +    void deactivate () </p>\n{\n    +LOG.info(\"Deactivate called\");\n    +deactivated = true;\n    +commit();\n    +kinesisConnection.shutdown();\n    +    }\n<p>    +<br/>\n    +    void close () </p>\n{\n    +commit();\n    +kinesisConnection.shutdown();\n    +zkConnection.shutdown();\n    +    }\n<p>    +<br/>\n    +    // fetch records from kinesis starting at sequence number for message passed as argument. Any other messages fetched and are in the failed queue will also<br/>\n    +    // be kept in memory to avoid going to kinesis again for retry<br/>\n    +    private void fetchFailedRecords (KinesisMessageId kinesisMessageId) {<br/>\n    +// if shard iterator not present for this message, get it<br/>\n    +if (!shardIteratorPerFailedMessage.containsKey(kinesisMessageId)) </p>\n{\n    +    refreshShardIteratorForFailedRecord(kinesisMessageId);\n    +}\n<p>    +String shardIterator = shardIteratorPerFailedMessage.get(kinesisMessageId);<br/>\n    +LOG.debug(\"Fetching failed records for shard id :\" + kinesisMessageId.getShardId() + \" at sequence number \" + kinesisMessageId.getSequenceNumber() +<br/>\n    +\" using shardIterator \" + shardIterator);<br/>\n    +try {<br/>\n    +    GetRecordsResult getRecordsResult = kinesisConnection.fetchRecords(shardIterator);<br/>\n    +    if (getRecordsResult != null) {<br/>\n    +List<Record> records = getRecordsResult.getRecords();<br/>\n    +LOG.debug(\"Records size from fetchFailedRecords is \" + records.size());<br/>\n    +// update the shard iterator to next one in case this fetch does not give the message.<br/>\n    +shardIteratorPerFailedMessage.put(kinesisMessageId, getRecordsResult.getNextShardIterator());<br/>\n    +if (records.size() == 0) {<br/>\n    +    LOG.warn(\"No records returned from kinesis. Hence sleeping for 1 second\");<br/>\n    +    Thread.sleep(1000);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I would prefer this to be not configurable. Reason is kinesis api somewhere mentioned in their documentation that if you dont receive any records it is good to sleep for a second. Reason is that they some limits for GetRecords request per second and it will throw an exception if that limit is reached or violated. Although I am catching that exception I wanted to avoid that. Making it configurable and go beyond 1 second can slow down the spout in some cases as well. For example, sometimes it takes multiple requests to get to the portion of the shard where the message at a sequence number you want to read is present. In that case it does not make sense to backoff in an exponential fashion. You just want to make sure you get there sooner without violating the limit.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612907927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654998","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612654998","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612654998,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQ5OTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T00:26:15Z","updated_at":"2025-01-24T14:24:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r73077004\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r73077004</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.ICredentialsListener;<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.daemon.metrics.BuiltinMetricsUtil;<br/>\n    +import org.apache.storm.daemon.metrics.SpoutThrottlingMetrics;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutAckInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutFailInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutWaitStrategy;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class SpoutExecutor extends Executor {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(SpoutExecutor.class);<br/>\n    +<br/>\n    +    private final ISpoutWaitStrategy spoutWaitStrategy;<br/>\n    +    private Integer maxSpoutPending;<br/>\n    +    private final AtomicBoolean lastActive;<br/>\n    +    private List<ISpout> spouts;<br/>\n    +    private List<SpoutOutputCollector> outputCollectors;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final MutableLong emptyEmitStreak;<br/>\n    +    private final SpoutThrottlingMetrics spoutThrottlingMetrics;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private RotatingMap<Long, TupleInfo> pending;<br/>\n    +    private final boolean backPressureEnabled;<br/>\n    +<br/>\n    +    public SpoutExecutor(final Map workerData, final List<Long> executorId, Map<String, String> credentials) </p>\n{\n    +super(workerData, executorId, credentials);\n    +this.spoutWaitStrategy = Utils.newInstance((String) stormConf.get(Config.TOPOLOGY_SPOUT_WAIT_STRATEGY));\n    +this.spoutWaitStrategy.prepare(stormConf);\n    +\n    +this.backPressureEnabled = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_BACKPRESSURE_ENABLE), false);\n    +\n    +this.lastActive = new AtomicBoolean(false);\n    +this.hasAckers = StormCommon.hasAckers(stormConf);\n    +this.emittedCount = new MutableLong(0);\n    +this.emptyEmitStreak = new MutableLong(0);\n    +this.spoutThrottlingMetrics = new SpoutThrottlingMetrics();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void init(final Map<Integer, Task> idToTask) {<br/>\n    +LOG.info(\"Opening spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +this.idToTask = idToTask;<br/>\n    +this.maxSpoutPending = Utils.getInt(stormConf.get(Config.TOPOLOGY_MAX_SPOUT_PENDING), 0) * idToTask.size();<br/>\n    +this.spouts = new ArrayList<>();<br/>\n    +for (Task task : idToTask.values()) </p>\n{\n    +    this.spouts.add((ISpout) task.getTaskObject());\n    +}\n<p>    +this.pending = new RotatingMap<>(2, new RotatingMap.ExpiredCallback<Long, TupleInfo>() {<br/>\n    +    @Override<br/>\n    +    public void expire(Long key, TupleInfo tupleInfo) {<br/>\n    +Long timeDelta = null;<br/>\n    +if (tupleInfo.getTimestamp() != 0) </p>\n{\n    +    timeDelta = Time.deltaMs(tupleInfo.getTimestamp());\n    +}\n<p>    +failSpoutMsg(SpoutExecutor.this, idToTask.get(tupleInfo.getTaskId()), timeDelta, tupleInfo, \"TIMEOUT\");<br/>\n    +    }<br/>\n    +});<br/>\n    +<br/>\n    +this.spoutThrottlingMetrics.registerAll(stormConf, idToTask.values().iterator().next().getUserContext());<br/>\n    +this.outputCollectors = new ArrayList<>();<br/>\n    +for (Map.Entry<Integer, Task> entry : idToTask.entrySet()) {<br/>\n    +    Task taskData = entry.getValue();<br/>\n    +    ISpout spoutObject = (ISpout) taskData.getTaskObject();<br/>\n    +    SpoutOutputCollectorImpl spoutOutputCollector = new SpoutOutputCollectorImpl(<br/>\n    +    spoutObject, this, taskData, entry.getKey(), emittedCount,<br/>\n    +    hasAckers, rand, isEventLoggers, isDebug, pending);<br/>\n    +    SpoutOutputCollector outputCollector = new SpoutOutputCollector(spoutOutputCollector);<br/>\n    +    this.outputCollectors.add(outputCollector);<br/>\n    +<br/>\n    +    taskData.getBuiltInMetrics().registerAll(stormConf, taskData.getUserContext());<br/>\n    +    Map<String, DisruptorQueue> map = ImmutableMap.of(\"sendqueue\", transferQueue, \"receive\", receiveQueue);<br/>\n    +    BuiltinMetricsUtil.registerQueueMetrics(map, stormConf, taskData.getUserContext());<br/>\n    +<br/>\n    +    if (spoutObject instanceof ICredentialsListener) </p>\n{\n    +((ICredentialsListener) spoutObject).setCredentials(credentials);\n    +    }\n<p>    +    spoutObject.open(stormConf, taskData.getUserContext(), outputCollector);<br/>\n    +}<br/>\n    +openOrPrepareWasCalled.set(true);<br/>\n    +LOG.info(\"Opened spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +setupMetrics();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +while (!stormActive.get()) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    After looking at current (before-ported) code again, init() equivalent code was called from async loop, which seems to be different from ported code.<br/>\n    In order to do the same, init() shouldn't be called from outside of asyncLoop, and run() should call init() (with moving first check for stormActive to init()) and return Callable which contains current run(), and isFactory should be true for calling asyncLoop().</p>\n\n<p>    Please refer <a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L515\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L515</a> and <a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L587\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L587</a> and <a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L636\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L636</a></p>\n\n<p>    Same things applied to Bolt. <a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L710\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L710</a> and <a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L814\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L814</a> and <a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L824\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/daemon/executor.clj#L824</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654998/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612655000","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612655000","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612655000,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTUwMDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T02:27:48Z","updated_at":"2025-01-24T14:24:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r73085409\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r73085409</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.ICredentialsListener;<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.daemon.metrics.BuiltinMetricsUtil;<br/>\n    +import org.apache.storm.daemon.metrics.SpoutThrottlingMetrics;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutAckInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutFailInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutWaitStrategy;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class SpoutExecutor extends Executor {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(SpoutExecutor.class);<br/>\n    +<br/>\n    +    private final ISpoutWaitStrategy spoutWaitStrategy;<br/>\n    +    private Integer maxSpoutPending;<br/>\n    +    private final AtomicBoolean lastActive;<br/>\n    +    private List<ISpout> spouts;<br/>\n    +    private List<SpoutOutputCollector> outputCollectors;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final MutableLong emptyEmitStreak;<br/>\n    +    private final SpoutThrottlingMetrics spoutThrottlingMetrics;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private RotatingMap<Long, TupleInfo> pending;<br/>\n    +    private final boolean backPressureEnabled;<br/>\n    +<br/>\n    +    public SpoutExecutor(final Map workerData, final List<Long> executorId, Map<String, String> credentials) </p>\n{\n    +super(workerData, executorId, credentials);\n    +this.spoutWaitStrategy = Utils.newInstance((String) stormConf.get(Config.TOPOLOGY_SPOUT_WAIT_STRATEGY));\n    +this.spoutWaitStrategy.prepare(stormConf);\n    +\n    +this.backPressureEnabled = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_BACKPRESSURE_ENABLE), false);\n    +\n    +this.lastActive = new AtomicBoolean(false);\n    +this.hasAckers = StormCommon.hasAckers(stormConf);\n    +this.emittedCount = new MutableLong(0);\n    +this.emptyEmitStreak = new MutableLong(0);\n    +this.spoutThrottlingMetrics = new SpoutThrottlingMetrics();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void init(final Map<Integer, Task> idToTask) {<br/>\n    +LOG.info(\"Opening spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +this.idToTask = idToTask;<br/>\n    +this.maxSpoutPending = Utils.getInt(stormConf.get(Config.TOPOLOGY_MAX_SPOUT_PENDING), 0) * idToTask.size();<br/>\n    +this.spouts = new ArrayList<>();<br/>\n    +for (Task task : idToTask.values()) </p>\n{\n    +    this.spouts.add((ISpout) task.getTaskObject());\n    +}\n<p>    +this.pending = new RotatingMap<>(2, new RotatingMap.ExpiredCallback<Long, TupleInfo>() {<br/>\n    +    @Override<br/>\n    +    public void expire(Long key, TupleInfo tupleInfo) {<br/>\n    +Long timeDelta = null;<br/>\n    +if (tupleInfo.getTimestamp() != 0) </p>\n{\n    +    timeDelta = Time.deltaMs(tupleInfo.getTimestamp());\n    +}\n<p>    +failSpoutMsg(SpoutExecutor.this, idToTask.get(tupleInfo.getTaskId()), timeDelta, tupleInfo, \"TIMEOUT\");<br/>\n    +    }<br/>\n    +});<br/>\n    +<br/>\n    +this.spoutThrottlingMetrics.registerAll(stormConf, idToTask.values().iterator().next().getUserContext());<br/>\n    +this.outputCollectors = new ArrayList<>();<br/>\n    +for (Map.Entry<Integer, Task> entry : idToTask.entrySet()) {<br/>\n    +    Task taskData = entry.getValue();<br/>\n    +    ISpout spoutObject = (ISpout) taskData.getTaskObject();<br/>\n    +    SpoutOutputCollectorImpl spoutOutputCollector = new SpoutOutputCollectorImpl(<br/>\n    +    spoutObject, this, taskData, entry.getKey(), emittedCount,<br/>\n    +    hasAckers, rand, isEventLoggers, isDebug, pending);<br/>\n    +    SpoutOutputCollector outputCollector = new SpoutOutputCollector(spoutOutputCollector);<br/>\n    +    this.outputCollectors.add(outputCollector);<br/>\n    +<br/>\n    +    taskData.getBuiltInMetrics().registerAll(stormConf, taskData.getUserContext());<br/>\n    +    Map<String, DisruptorQueue> map = ImmutableMap.of(\"sendqueue\", transferQueue, \"receive\", receiveQueue);<br/>\n    +    BuiltinMetricsUtil.registerQueueMetrics(map, stormConf, taskData.getUserContext());<br/>\n    +<br/>\n    +    if (spoutObject instanceof ICredentialsListener) </p>\n{\n    +((ICredentialsListener) spoutObject).setCredentials(credentials);\n    +    }\n<p>    +    spoutObject.open(stormConf, taskData.getUserContext(), outputCollector);<br/>\n    +}<br/>\n    +openOrPrepareWasCalled.set(true);<br/>\n    +LOG.info(\"Opened spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +setupMetrics();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +while (!stormActive.get()) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I'm not sure if I understand correctly, you mean we should have a flag like `inited`, and call init inside of asyncLoop once and set the `inited` to true, then start the loop to consume disruptor queue?<br/>\n    But calling init inside the loop once doesn't differ much from calling it outside.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612655000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612655007","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612655007","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612655007,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTUwMDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T02:56:51Z","updated_at":"2025-01-24T14:24:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r73087127\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r73087127</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor.spout;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.ICredentialsListener;<br/>\n    +import org.apache.storm.daemon.Acker;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.daemon.metrics.BuiltinMetricsUtil;<br/>\n    +import org.apache.storm.daemon.metrics.SpoutThrottlingMetrics;<br/>\n    +import org.apache.storm.executor.Executor;<br/>\n    +import org.apache.storm.executor.TupleInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutAckInfo;<br/>\n    +import org.apache.storm.hooks.info.SpoutFailInfo;<br/>\n    +import org.apache.storm.spout.ISpout;<br/>\n    +import org.apache.storm.spout.ISpoutWaitStrategy;<br/>\n    +import org.apache.storm.spout.SpoutOutputCollector;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.MutableLong;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class SpoutExecutor extends Executor {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(SpoutExecutor.class);<br/>\n    +<br/>\n    +    private final ISpoutWaitStrategy spoutWaitStrategy;<br/>\n    +    private Integer maxSpoutPending;<br/>\n    +    private final AtomicBoolean lastActive;<br/>\n    +    private List<ISpout> spouts;<br/>\n    +    private List<SpoutOutputCollector> outputCollectors;<br/>\n    +    private final MutableLong emittedCount;<br/>\n    +    private final MutableLong emptyEmitStreak;<br/>\n    +    private final SpoutThrottlingMetrics spoutThrottlingMetrics;<br/>\n    +    private final boolean hasAckers;<br/>\n    +    private RotatingMap<Long, TupleInfo> pending;<br/>\n    +    private final boolean backPressureEnabled;<br/>\n    +<br/>\n    +    public SpoutExecutor(final Map workerData, final List<Long> executorId, Map<String, String> credentials) </p>\n{\n    +super(workerData, executorId, credentials);\n    +this.spoutWaitStrategy = Utils.newInstance((String) stormConf.get(Config.TOPOLOGY_SPOUT_WAIT_STRATEGY));\n    +this.spoutWaitStrategy.prepare(stormConf);\n    +\n    +this.backPressureEnabled = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_BACKPRESSURE_ENABLE), false);\n    +\n    +this.lastActive = new AtomicBoolean(false);\n    +this.hasAckers = StormCommon.hasAckers(stormConf);\n    +this.emittedCount = new MutableLong(0);\n    +this.emptyEmitStreak = new MutableLong(0);\n    +this.spoutThrottlingMetrics = new SpoutThrottlingMetrics();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void init(final Map<Integer, Task> idToTask) {<br/>\n    +LOG.info(\"Opening spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +this.idToTask = idToTask;<br/>\n    +this.maxSpoutPending = Utils.getInt(stormConf.get(Config.TOPOLOGY_MAX_SPOUT_PENDING), 0) * idToTask.size();<br/>\n    +this.spouts = new ArrayList<>();<br/>\n    +for (Task task : idToTask.values()) </p>\n{\n    +    this.spouts.add((ISpout) task.getTaskObject());\n    +}\n<p>    +this.pending = new RotatingMap<>(2, new RotatingMap.ExpiredCallback<Long, TupleInfo>() {<br/>\n    +    @Override<br/>\n    +    public void expire(Long key, TupleInfo tupleInfo) {<br/>\n    +Long timeDelta = null;<br/>\n    +if (tupleInfo.getTimestamp() != 0) </p>\n{\n    +    timeDelta = Time.deltaMs(tupleInfo.getTimestamp());\n    +}\n<p>    +failSpoutMsg(SpoutExecutor.this, idToTask.get(tupleInfo.getTaskId()), timeDelta, tupleInfo, \"TIMEOUT\");<br/>\n    +    }<br/>\n    +});<br/>\n    +<br/>\n    +this.spoutThrottlingMetrics.registerAll(stormConf, idToTask.values().iterator().next().getUserContext());<br/>\n    +this.outputCollectors = new ArrayList<>();<br/>\n    +for (Map.Entry<Integer, Task> entry : idToTask.entrySet()) {<br/>\n    +    Task taskData = entry.getValue();<br/>\n    +    ISpout spoutObject = (ISpout) taskData.getTaskObject();<br/>\n    +    SpoutOutputCollectorImpl spoutOutputCollector = new SpoutOutputCollectorImpl(<br/>\n    +    spoutObject, this, taskData, entry.getKey(), emittedCount,<br/>\n    +    hasAckers, rand, isEventLoggers, isDebug, pending);<br/>\n    +    SpoutOutputCollector outputCollector = new SpoutOutputCollector(spoutOutputCollector);<br/>\n    +    this.outputCollectors.add(outputCollector);<br/>\n    +<br/>\n    +    taskData.getBuiltInMetrics().registerAll(stormConf, taskData.getUserContext());<br/>\n    +    Map<String, DisruptorQueue> map = ImmutableMap.of(\"sendqueue\", transferQueue, \"receive\", receiveQueue);<br/>\n    +    BuiltinMetricsUtil.registerQueueMetrics(map, stormConf, taskData.getUserContext());<br/>\n    +<br/>\n    +    if (spoutObject instanceof ICredentialsListener) </p>\n{\n    +((ICredentialsListener) spoutObject).setCredentials(credentials);\n    +    }\n<p>    +    spoutObject.open(stormConf, taskData.getUserContext(), outputCollector);<br/>\n    +}<br/>\n    +openOrPrepareWasCalled.set(true);<br/>\n    +LOG.info(\"Opened spout {}:{}\", componentId, idToTask.keySet());<br/>\n    +setupMetrics();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +while (!stormActive.get()) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think you're already aware the usage of Utils.asyncLoop, but let's revisit this once more.</p>\n\n<p>    <a href=\"https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/utils/Utils.java#L2208\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/utils/Utils.java#L2208</a></p>\n\n<p>    If we pass Callable with isFactory to true, it executes Callable \"once\" which should return another Callable. Then asyncLoop will execute returned Callable for later iterations.</p>\n\n<p>    So if we want to port as it is, init() should be moved to run(), and run() should return another Callable whose run()  contains the logic which current run() has. And pass `true` for `isFactory` in asyncLoop.</p>\n\n<p>    I think you ported wrapping logic to init() and inner fn to run() which seems similar to current but the difference is that instead of waiting for active in async loop, it waits for active in mkExecutor which is not we expected.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612655007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236785712","html_url":"https://github.com/apache/storm/pull/1595#issuecomment-236785712","issue_url":"https://api.github.com/repos/apache/storm/issues/1595","id":236785712,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjc4NTcxMg==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T03:33:13Z","updated_at":"2016-08-02T03:33:13Z","author_association":"CONTRIBUTOR","body":"OK. I break down my doc to two pieces and posted to wiki page.\n- https://cwiki.apache.org/confluence/display/STORM/Limitations+of+current+metrics+feature\n- https://cwiki.apache.org/confluence/display/STORM/Wishlist+for+new+metrics+feature\n\nSince I'm not working on new metrics feature, I didn't put them into proposal / design doc category. I think we will adopt or address many places including metrics while evaluating JStorm features from Phase 2, so would like to wait for that.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236785712/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941967","html_url":"https://github.com/apache/storm/issues/5788#issuecomment-2612941967","issue_url":"https://api.github.com/repos/apache/storm/issues/5788","id":2612941967,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDE5Njc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T03:33:15Z","updated_at":"2025-01-24T16:35:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1595\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1595</a></p>\n\n<p>    OK. I break down my doc to two pieces and posted to wiki page.</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li><a href=\"https://cwiki.apache.org/confluence/display/STORM/Limitations+of+current+metrics+feature\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://cwiki.apache.org/confluence/display/STORM/Limitations+of+current+metrics+feature</a></li>\n\t<li><a href=\"https://cwiki.apache.org/confluence/display/STORM/Wishlist+for+new+metrics+feature\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://cwiki.apache.org/confluence/display/STORM/Wishlist+for+new+metrics+feature</a></li>\n</ul>\n\n\n<p>    Since I'm not working on new metrics feature, I didn't put them into proposal / design doc category. I think we will adopt or address many places including metrics while evaluating JStorm features from Phase 2, so would like to wait for that.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612941967/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942812","html_url":"https://github.com/apache/storm/issues/5794#issuecomment-2612942812","issue_url":"https://api.github.com/repos/apache/storm/issues/5794","id":2612942812,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDI4MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T07:43:16Z","updated_at":"2025-01-24T16:36:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user vesense opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1603\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1603</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-2012\" title=\"Upgrade Kafka to 0.8.2.2\" class=\"issue-link\" data-issue-key=\"STORM-2012\"><del>STORM-2012</del></a>: Upgrade Kafka to 0.8.2.2</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-2012\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-2012</a></p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/vesense/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/vesense/storm</a> patch-26</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1603.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1603.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1603</p>\n\n<hr />\n<p>commit 3fb327a87c1c3060f96bd8b262e8526d8c1f3848<br/>\nAuthor: Xin Wang <best.wangxin@163.com><br/>\nDate:   2016-08-02T07:42:42Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-2012\" title=\"Upgrade Kafka to 0.8.2.2\" class=\"issue-link\" data-issue-key=\"STORM-2012\"><del>STORM-2012</del></a>: Upgrade Kafka to 0.8.2.2</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942812/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598606","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598606","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598606,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg2MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T10:16:27Z","updated_at":"2025-01-24T14:00:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1591#discussion_r73129527\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1591#discussion_r73129527</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/KerberosSaslClientHandler.java &#8212;<br/>\n    @@ -46,56 +44,48 @@ public KerberosSaslClientHandler(ISaslClient client, Map storm_conf, String jaas<br/>\n }</p>\n\n<p> @Override</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>public void channelConnected(ChannelHandlerContext ctx,</li>\n\t<li>ChannelStateEvent event) {<br/>\n    +    public void channelActive(ChannelHandlerContext ctx) throws Exception {<br/>\n     // register the newly established channel</li>\n\t<li>Channel channel = ctx.getChannel();</li>\n\t<li>client.channelConnected(channel);<br/>\n    +Channel channel = ctx.channel();<br/>\n    +client.channelReady();</li>\n</ul>\n\n\n<p>     LOG.info(\"Connection established from {} to {}\",</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>channel.getLocalAddress(), channel.getRemoteAddress());<br/>\n    + channel.localAddress(), channel.remoteAddress());</li>\n</ul>\n\n\n<p>     try {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>KerberosSaslNettyClient saslNettyClient = KerberosSaslNettyClientState.getKerberosSaslNettyClient</li>\n\t<li>.get(channel);<br/>\n    +    KerberosSaslNettyClient saslNettyClient = channel.attr(KerberosSaslNettyClientState.KERBEROS_SASL_NETTY_CLIENT).get();</li>\n</ul>\n\n\n<p> if (saslNettyClient == null) {<br/>\n     LOG.debug(\"Creating saslNettyClient now for channel: {}\",<br/>\n       channel);<br/>\n     saslNettyClient = new KerberosSaslNettyClient(storm_conf, jaas_section);</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>KerberosSaslNettyClientState.getKerberosSaslNettyClient.set(channel,</li>\n\t<li>saslNettyClient);<br/>\n    +channel.attr(KerberosSaslNettyClientState.KERBEROS_SASL_NETTY_CLIENT).set(saslNettyClient);<br/>\n }<br/>\n LOG.debug(\"Going to initiate Kerberos negotiations.\");<br/>\n byte[] initialChallenge = saslNettyClient.saslResponse(new SaslMessageToken(new byte<span class=\"error\">&#91;0&#93;</span>));<br/>\n LOG.debug(\"Sending initial challenge: {}\", initialChallenge);</li>\n\t<li>channel.write(new SaslMessageToken(initialChallenge));<br/>\n    +    channel.writeAndFlush(new SaslMessageToken(initialChallenge));\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Why is it changed to use `writeAndFlush`? </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598606/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236864725","html_url":"https://github.com/apache/storm/pull/1591#issuecomment-236864725","issue_url":"https://api.github.com/repos/apache/storm/issues/1591","id":236864725,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjg2NDcyNQ==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T10:23:13Z","updated_at":"2016-08-02T10:23:13Z","author_association":"MEMBER","body":"@hsun-cnnxty `Channel#write` is modified to `Channel#writeAndFlush` at multiple places. Does not that flush to the underlying stream without buffering and flush it when buffers are full?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236864725/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598608","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598608","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598608,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg2MDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T10:23:15Z","updated_at":"2025-01-24T14:00:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1591\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1591</a></p>\n\n<p>    @hsun-cnnxty `Channel#write` is modified to `Channel#writeAndFlush` at multiple places. Does not that flush to the underlying stream without buffering and flush it when buffers are full?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598608/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874109","html_url":"https://github.com/apache/storm/issues/5395#issuecomment-2612874109","issue_url":"https://api.github.com/repos/apache/storm/issues/5395","id":2612874109,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzQxMDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T11:51:07Z","updated_at":"2025-01-24T16:03:00Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yunfanfighting@foxmail.com\">yunfanfighting@foxmail.com</a>:</i>\n<p>I meet same problem in 0.9.6. Can you tell me, how you slove the problem in that version?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/236909895","html_url":"https://github.com/apache/storm/pull/1603#issuecomment-236909895","issue_url":"https://api.github.com/repos/apache/storm/issues/1603","id":236909895,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjkwOTg5NQ==","user":{"login":"darionyaphet","id":4414314,"node_id":"MDQ6VXNlcjQ0MTQzMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/4414314?v=4","gravatar_id":"","url":"https://api.github.com/users/darionyaphet","html_url":"https://github.com/darionyaphet","followers_url":"https://api.github.com/users/darionyaphet/followers","following_url":"https://api.github.com/users/darionyaphet/following{/other_user}","gists_url":"https://api.github.com/users/darionyaphet/gists{/gist_id}","starred_url":"https://api.github.com/users/darionyaphet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darionyaphet/subscriptions","organizations_url":"https://api.github.com/users/darionyaphet/orgs","repos_url":"https://api.github.com/users/darionyaphet/repos","events_url":"https://api.github.com/users/darionyaphet/events{/privacy}","received_events_url":"https://api.github.com/users/darionyaphet/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T13:50:05Z","updated_at":"2016-08-02T13:50:05Z","author_association":"CONTRIBUTOR","body":"@vesense  could you describe what is update with `Kafka 0.8.2.2` ? thanks \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/236909895/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942819","html_url":"https://github.com/apache/storm/issues/5794#issuecomment-2612942819","issue_url":"https://api.github.com/repos/apache/storm/issues/5794","id":2612942819,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5NDI4MTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T13:50:07Z","updated_at":"2025-01-24T16:36:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user darionyaphet commented on the issue:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1603\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1603</a></p>\n\n<p>    @vesense  could you describe what is update with `Kafka 0.8.2.2` ? thanks </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612942819/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612655010","html_url":"https://github.com/apache/storm/issues/5114#issuecomment-2612655010","issue_url":"https://api.github.com/repos/apache/storm/issues/5114","id":2612655010,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTUwMTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-08-02T15:12:48Z","updated_at":"2025-01-24T14:24:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1445#discussion_r73174615\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1445#discussion_r73174615</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/executor/Executor.java &#8212;<br/>\n    @@ -0,0 +1,575 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.executor;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import com.google.common.annotations.VisibleForTesting;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import com.lmax.disruptor.EventHandler;<br/>\n    +import com.lmax.disruptor.dsl.ProducerType;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.UnknownHostException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.StormTimer;<br/>\n    +import org.apache.storm.cluster.ClusterStateContext;<br/>\n    +import org.apache.storm.cluster.ClusterUtils;<br/>\n    +import org.apache.storm.cluster.DaemonType;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.GrouperFactory;<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +import org.apache.storm.daemon.Task;<br/>\n    +import org.apache.storm.executor.bolt.BoltExecutor;<br/>\n    +import org.apache.storm.executor.error.IReportError;<br/>\n    +import org.apache.storm.executor.error.ReportError;<br/>\n    +import org.apache.storm.executor.error.ReportErrorAndDie;<br/>\n    +import org.apache.storm.executor.spout.SpoutExecutor;<br/>\n    +import org.apache.storm.generated.Bolt;<br/>\n    +import org.apache.storm.generated.DebugOptions;<br/>\n    +import org.apache.storm.generated.Grouping;<br/>\n    +import org.apache.storm.generated.SpoutSpec;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.storm.grouping.LoadAwareCustomStreamGrouping;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.api.IMetricsConsumer;<br/>\n    +import org.apache.storm.stats.BoltExecutorStats;<br/>\n    +import org.apache.storm.stats.CommonStats;<br/>\n    +import org.apache.storm.stats.SpoutExecutorStats;<br/>\n    +import org.apache.storm.stats.StatsUtil;<br/>\n    +import org.apache.storm.task.WorkerTopologyContext;<br/>\n    +import org.apache.storm.tuple.AddressedTuple;<br/>\n    +import org.apache.storm.tuple.Fields;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.TupleImpl;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.DisruptorBackpressureCallback;<br/>\n    +import org.apache.storm.utils.DisruptorQueue;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.WorkerBackpressureThread;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +<br/>\n    +public abstract class Executor implements Callable, EventHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Executor.class);<br/>\n    +<br/>\n    +    protected final Map workerData;<br/>\n    +    protected final WorkerTopologyContext workerTopologyContext;<br/>\n    +    protected final List<Long> executorId;<br/>\n    +    protected final List<Integer> taskIds;<br/>\n    +    protected final String componentId;<br/>\n    +    protected final AtomicBoolean openOrPrepareWasCalled;<br/>\n    +    protected final Map stormConf;<br/>\n    +    protected final Map conf;<br/>\n    +    protected final String stormId;<br/>\n    +    protected final HashMap sharedExecutorData;<br/>\n    +    protected final AtomicBoolean stormActive;<br/>\n    +    protected final AtomicReference<Map<String, DebugOptions>> stormComponentDebug;<br/>\n    +    protected final Runnable suicideFn;<br/>\n    +    protected final IStormClusterState stormClusterState;<br/>\n    +    protected final Map<Integer, String> taskToComponent;<br/>\n    +    protected CommonStats stats;<br/>\n    +    protected final Map<Integer, Map<Integer, Map<String, IMetric>>> intervalToTaskToMetricToRegistry;<br/>\n    +    protected final Map<String, Map<String, LoadAwareCustomStreamGrouping>> streamToComponentToGrouper;<br/>\n    +    protected final ReportErrorAndDie reportErrorDie;<br/>\n    +    protected final Callable<Boolean> sampler;<br/>\n    +    protected final AtomicBoolean backpressure;<br/>\n    +    protected ExecutorTransfer executorTransfer;<br/>\n    +    protected final String type;<br/>\n    +    protected final AtomicBoolean throttleOn;<br/>\n    +    protected IFn transferFn;<br/>\n    +<br/>\n    +    protected final IReportError reportError;<br/>\n    +    protected final Random rand;<br/>\n    +    protected final DisruptorQueue transferQueue;<br/>\n    +    protected final DisruptorQueue receiveQueue;<br/>\n    +    protected Map<Integer, Task> idToTask;<br/>\n    +    protected final Map<String, String> credentials;<br/>\n    +    protected final Boolean isDebug;<br/>\n    +    protected final Boolean isEventLoggers;<br/>\n    +    protected String hostname;<br/>\n    +<br/>\n    +    protected Executor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +this.workerData = workerData;<br/>\n    +this.executorId = executorId;<br/>\n    +this.workerTopologyContext = StormCommon.makeWorkerContext(workerData);<br/>\n    +this.taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +this.componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +this.openOrPrepareWasCalled = new AtomicBoolean(false);<br/>\n    +this.stormConf = normalizedComponentConf((Map) workerData.get(Constants.STORM_CONF), workerTopologyContext, componentId);<br/>\n    +this.receiveQueue = (DisruptorQueue) (((Map) workerData.get(Constants.EXECUTOR_RECEIVE_QUEUE_MAP)).get(executorId));<br/>\n    +this.stormId = (String) workerData.get(Constants.STORM_ID);<br/>\n    +this.conf = (Map) workerData.get(Constants.CONF);<br/>\n    +this.sharedExecutorData = new HashMap();<br/>\n    +this.stormActive = (AtomicBoolean) workerData.get(Constants.STORM_ACTIVE_ATOM);<br/>\n    +this.stormComponentDebug = (AtomicReference<Map<String, DebugOptions>>) workerData.get(Constants.COMPONENT_TO_DEBUG_ATOM);<br/>\n    +<br/>\n    +this.transferQueue = mkExecutorBatchQueue(stormConf, executorId);<br/>\n    +this.transferFn = (IFn) workerData.get(Constants.TRANSFER_FN);<br/>\n    +this.executorTransfer = new ExecutorTransfer(workerTopologyContext, transferQueue, stormConf, transferFn);<br/>\n    +<br/>\n    +this.suicideFn = (Runnable) workerData.get(Constants.SUICIDE_FN);<br/>\n    +try </p>\n{\n    +    this.stormClusterState = ClusterUtils.mkStormClusterState(workerData.get(\"state-store\"), Utils.getWorkerACL(stormConf),\n    +    new ClusterStateContext(DaemonType.SUPERVISOR));\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    this.type = StatsUtil.SPOUT;\n    +    this.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else if (bolts.containsKey(componentId)) {\n    +    this.type = StatsUtil.BOLT;\n    +    this.stats = new BoltExecutorStats(ConfigUtils.samplingRate(stormConf));\n    +} else {\n    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);\n    +}<br/>\n    +<br/>\n    +this.intervalToTaskToMetricToRegistry = new HashMap<>();<br/>\n    +this.taskToComponent = (Map<Integer, String>) workerData.get(Constants.TASK_TO_COMPONENT);<br/>\n    +this.streamToComponentToGrouper = outboundComponents(workerTopologyContext, componentId, stormConf);<br/>\n    +this.reportError = new ReportError(stormConf, stormClusterState, stormId, componentId, workerTopologyContext);<br/>\n    +this.reportErrorDie = new ReportErrorAndDie(reportError, suicideFn);<br/>\n    +this.sampler = ConfigUtils.mkStatsSampler(stormConf);<br/>\n    +this.backpressure = new AtomicBoolean(false);<br/>\n    +this.throttleOn = (AtomicBoolean) workerData.get(Constants.THROTTLE_ON);<br/>\n    +this.isDebug = Utils.getBoolean(stormConf.get(Config.TOPOLOGY_DEBUG), false);<br/>\n    +this.rand = new Random(Utils.secureRandomLong());<br/>\n    +this.credentials = credentials;<br/>\n    +this.isEventLoggers = StormCommon.hasEventLoggers(stormConf);<br/>\n    +<br/>\n    +try {\n    +    this.hostname = Utils.hostname(stormConf);\n    +} catch (UnknownHostException ignored) {\n    +    this.hostname = \"\";\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Executor mkExecutor(Map workerData, List<Long> executorId, Map<String, String> credentials) {<br/>\n    +Executor executor;<br/>\n    +<br/>\n    +Map<String, Object> convertedWorkerData = Utils.convertClojureMapToJavaMap(workerData);<br/>\n    +WorkerTopologyContext workerTopologyContext = StormCommon.makeWorkerContext(convertedWorkerData);<br/>\n    +List<Integer> taskIds = StormCommon.executorIdToTasks(executorId);<br/>\n    +String componentId = workerTopologyContext.getComponentId(taskIds.get(0));<br/>\n    +<br/>\n    +String type = getExecutorType(workerTopologyContext, componentId);<br/>\n    +if (StatsUtil.SPOUT.equals(type)) {\n    +    executor = new SpoutExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new SpoutExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +} else {\n    +    executor = new BoltExecutor(convertedWorkerData, executorId, credentials);\n    +    executor.stats = new BoltExecutorStats(ConfigUtils.samplingRate(executor.getStormConf()));\n    +}<br/>\n    +<br/>\n    +Map<Integer, Task> idToTask = new HashMap<>();<br/>\n    +for (Integer taskId : taskIds) {<br/>\n    +    try {\n    +Task task = new Task(executor, taskId);\n    +executor.sendUnanchored(\n    +task, StormCommon.SYSTEM_STREAM_ID, new Values(\"startup\"), executor.getExecutorTransfer());\n    +idToTask.put(taskId, task);\n    +    } catch (IOException ex) {\n    +throw Utils.wrapInRuntime(ex);\n    +    }<br/>\n    +}<br/>\n    +executor.init(idToTask);<br/>\n    +<br/>\n    +return executor;<br/>\n    +    }<br/>\n    +<br/>\n    +    private static String getExecutorType(WorkerTopologyContext workerTopologyContext, String componentId) {<br/>\n    +StormTopology topology = workerTopologyContext.getRawTopology();<br/>\n    +Map<String, SpoutSpec> spouts = topology.get_spouts();<br/>\n    +Map<String, Bolt> bolts = topology.get_bolts();<br/>\n    +if (spouts.containsKey(componentId)) {\n    +    return StatsUtil.SPOUT;\n    +} else if (bolts.containsKey(componentId)) {\n    +    return StatsUtil.BOLT;\n    +} else {    +    throw new RuntimeException(\"Could not find \" + componentId + \" in \" + topology);    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * separated from mkExecutor in order to replace executor transfer in executor data for testing<br/>\n    +     */<br/>\n    +    public ExecutorShutdown execute() throws Exception {\n    +LOG.info(\"Loading executor tasks \" + componentId + \":\" + executorId);\n    +\n    +registerBackpressure();\n    +Utils.SmartThread systemThreads =\n    +Utils.asyncLoop(executorTransfer, executorTransfer.getName(), reportErrorDie);\n    +\n    +String handlerName = componentId + \"-executor\" + executorId;\n    +Utils.SmartThread handlers =\n    +Utils.asyncLoop(this, false, reportErrorDie, Thread.NORM_PRIORITY, false, true, handlerName);\n    +setupTicks(StatsUtil.SPOUT.equals(type));\n    +LOG.info(\"Finished loading executor \" + componentId + \":\" + executorId);\n    +return new ExecutorShutdown(this, Lists.newArrayList(systemThreads, handlers), idToTask);\n    +    }<br/>\n    +<br/>\n    +    public abstract void tupleActionFn(int taskId, TupleImpl tuple) throws Exception;<br/>\n    +<br/>\n    +    public abstract void init(Map<Integer, Task> idToTask);<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    @Override<br/>\n    +    public void onEvent(Object event, long seq, boolean endOfBatch) throws Exception {<br/>\n    +ArrayList<AddressedTuple> addressedTuples = (ArrayList<AddressedTuple>) event;<br/>\n    +for (AddressedTuple addressedTuple : addressedTuples) {<br/>\n    +    TupleImpl tuple = (TupleImpl) addressedTuple.getTuple();<br/>\n    +    int taskId = addressedTuple.getDest();<br/>\n    +    if (isDebug) {<br/>\n    +LOG.info(\"Processing received message FOR {} TUPLE: {}\", taskId, tuple);<br/>\n    +    }<br/>\n    +    if (taskId != AddressedTuple.BROADCAST_DEST) {\n    +tupleActionFn(taskId, tuple);\n    +    } else {<br/>\n    +for (Integer t : taskIds) {\n    +    tupleActionFn(t, tuple);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void metricsTick(Task taskData, TupleImpl tuple) {<br/>\n    +try {<br/>\n    +    Integer interval = tuple.getInteger(0);<br/>\n    +    int taskId = taskData.getTaskId();<br/>\n    +    Map<Integer, Map<String, IMetric>> taskToMetricToRegistry = intervalToTaskToMetricToRegistry.get(interval);<br/>\n    +    Map<String, IMetric> nameToRegistry = null;<br/>\n    +    if (taskToMetricToRegistry != null) {\n    +nameToRegistry = taskToMetricToRegistry.get(taskId);\n    +    }<br/>\n    +    if (nameToRegistry != null) {<br/>\n    +IMetricsConsumer.TaskInfo taskInfo = new IMetricsConsumer.TaskInfo(<br/>\n    +hostname, workerTopologyContext.getThisWorkerPort(),<br/>\n    +componentId, taskId, Time.currentTimeSecs(), interval);<br/>\n    +List<IMetricsConsumer.DataPoint> dataPoints = new ArrayList<>();<br/>\n    +for (Map.Entry<String, IMetric> entry : nameToRegistry.entrySet()) {<br/>\n    +    IMetric metric = entry.getValue();<br/>\n    +    Object value = metric.getValueAndReset();<br/>\n    +    if (value != null) {\n    +IMetricsConsumer.DataPoint dataPoint = new IMetricsConsumer.DataPoint(entry.getKey(), value);\n    +dataPoints.add(dataPoint);\n    +    }<br/>\n    +}<br/>\n    +if (!dataPoints.isEmpty()) {\n    +    sendUnanchored(taskData, Constants.METRICS_STREAM_ID,\n    +    new Values(taskInfo, dataPoints), executorTransfer);\n    +}<br/>\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void setupMetrics() {<br/>\n    +for (final Integer interval : intervalToTaskToMetricToRegistry.keySet()) {<br/>\n    +    StormTimer timerTask = (StormTimer) workerData.get(Constants.USER_TIMER);<br/>\n    +    timerTask.scheduleRecurring(interval, interval, new Runnable() {<br/>\n    +@Override<br/>\n    +public void run() </p>\n{\n    +    TupleImpl tuple = new TupleImpl(workerTopologyContext, new Values(interval),\n    +    (int) Constants.SYSTEM_TASK_ID, Constants.METRICS_TICK_STREAM_ID);\n    +    List<AddressedTuple> metricsTickTuple =\n    +    Lists.newArrayList(new AddressedTuple(AddressedTuple.BROADCAST_DEST, tuple));\n    +    receiveQueue.publish(metricsTickTuple);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public void sendUnanchored(Task task, String stream, List<Object> values, ExecutorTransfer transfer) {<br/>\n    +Tuple tuple = task.getTuple(stream, values);<br/>\n    +List<Integer> tasks = task.getOutgoingTasks(stream, values);<br/>\n    +for (Integer t : tasks) </p>\n{\n    +    transfer.transfer(t, tuple);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Send sampled data to the eventlogger if the global or component level debug flag is set (via nimbus api).<br/>\n    +     */<br/>\n    +    public void sendToEventLogger(Executor executor, Task taskData, List values,<br/>\n    +  String componentId, Object messageId, Random random) {<br/>\n    +Map<String, DebugOptions> componentDebug = executor.getStormComponentDebug().get();<br/>\n    +DebugOptions debugOptions = componentDebug.get(componentId);<br/>\n    +if (debugOptions == null) </p>\n{\n    +    debugOptions = componentDebug.get(executor.getStormId());\n    +}\n<p>    +double spct = ((debugOptions != null) && (debugOptions.is_enable())) ? debugOptions.get_samplingpct() : 0;<br/>\n    +if (spct > 0 && (random.nextDouble() * 100) < spct) </p>\n{\n    +    sendUnanchored(taskData, StormCommon.EVENTLOGGER_STREAM_ID,\n    +    new Values(componentId, messageId, System.currentTimeMillis(), values),\n    +    executor.getExecutorTransfer());\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private void registerBackpressure() {<br/>\n    +receiveQueue.registerBackpressureCallback(new DisruptorBackpressureCallback() {<br/>\n    +    @Override<br/>\n    +    public void highWaterMark() throws Exception {<br/>\n    +if (!backpressure.get()) </p>\n{\n    +    backpressure.set(true);\n    +    LOG.debug(\"executor \" + executorId + \" is congested, set backpressure flag true\");\n    +    WorkerBackpressureThread.notifyBackpressureChecker(workerData.get(\"backpressure-trigger\"));\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void lowWaterMark() throws Exception {<br/>\n    +if (backpressure.get()) </p>\n{\n    +    backpressure.set(false);\n    +    LOG.debug(\"executor \" + executorId + \" is not-congested, set backpressure flag false\");\n    +    WorkerBackpressureThread.notifyBackpressureChecker(workerData.get(\"backpressure-trigger\"));\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +receiveQueue.setHighWaterMark(Utils.getDouble(stormConf.get(Config.BACKPRESSURE_DISRUPTOR_HIGH_WATERMARK)));<br/>\n    +receiveQueue.setLowWaterMark(Utils.getDouble(stormConf.get(Config.BACKPRESSURE_DISRUPTOR_LOW_WATERMARK)));<br/>\n    +receiveQueue.setEnableBackpressure(Utils.getBoolean(stormConf.get(Config.TOPOLOGY_BACKPRESSURE_ENABLE), false));<br/>\n    +    }<br/>\n    +<br/>\n    +    protected void setupTicks(boolean isSpout) {<br/>\n    +final Integer tickTimeSecs = Utils.getInt(stormConf.get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS), null);<br/>\n    +boolean enableMessageTimeout = (Boolean) stormConf.get(Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS);<br/>\n    +if (tickTimeSecs != null) {<br/>\n    +    if (Utils.isSystemId(componentId) || (!enableMessageTimeout && isSpout)) </p>\n{\n    +LOG.info(\"Timeouts disabled for executor \" + componentId + \":\" + executorId);\n    +    }\n<p> else {<br/>\n    +StormTimer timerTask = (StormTimer) workerData.get(Constants.USER_TIMER);<br/>\n    +timerTask.scheduleRecurring(tickTimeSecs, tickTimeSecs, new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +TupleImpl tuple = new TupleImpl(workerTopologyContext, new Values(tickTimeSecs),<br/>\n    +(int) Constants.SYSTEM_TASK_ID, Constants.SYSTEM_TICK_STREAM_ID);<br/>\n    +List<AddressedTuple> metricTickTuple =<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    ok, will address</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612655010/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]