[{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696868907","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-696868907","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":696868907,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Njg2ODkwNw==","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-22T17:32:58Z","updated_at":"2020-09-22T17:32:58Z","author_association":"CONTRIBUTOR","body":"if we don't gain any performance, I prefer to stick with readability, \r\n\r\nso acceptable by me is == null -> is null\r\na is MyClass mc (assuming performance are the same)\r\n\r\nkeep != null, when c# 9.0 is out, we'll replace all with is not null\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696868907/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696870071","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-696870071","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":696870071,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Njg3MDA3MQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-22T17:35:07Z","updated_at":"2020-09-22T17:35:07Z","author_association":"CONTRIBUTOR","body":"> keep != null, when c# 9.0 is out, we'll replace all with is not null\r\n\r\nAgreed","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696870071/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696880214","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-696880214","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":696880214,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Njg4MDIxNA==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-22T17:52:05Z","updated_at":"2020-09-22T17:54:59Z","author_association":"CONTRIBUTOR","body":"Been trying to put some benchmarks together, can't quite get the Allocations into the report, but so far there seems to be no reasons to avoid pattern matching...\r\n\r\nAlso, this doesn't quite hit all the cases (e.g. where there are null checks before the conversions etc.) so will work a bit further to see if I can get that in and have the report still be digestable.\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18362.1082 (1903/May2019Update/19H1)\r\nIntel Core i9-7900X CPU 3.30GHz (Kaby Lake), 1 CPU, 20 logical and 10 physical cores\r\n.NET Core SDK=3.1.301\r\n  [Host]        : .NET Core 3.1.5 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.27001), X64 RyuJIT\r\n  .NET 4.8      : .NET Framework 4.8 (4.8.4220.0), X64 RyuJIT\r\n  .NET Core 3.1 : .NET Core 3.1.5 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.27001), X64 RyuJIT\r\n\r\n\r\n```\r\n|                         Method |           Job |       Runtime |     Mean |     Error |    StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------------------- |-------------- |-------------- |---------:|----------:|----------:|------:|------:|------:|----------:|\r\n|    AsOperatorNullCheckMatching |      .NET 4.8 |      .NET 4.8 | 1.748 ns | 0.0368 ns | 0.0344 ns |     - |     - |     - |         - |\r\n| AsOperatorNullCheckNonMatching |      .NET 4.8 |      .NET 4.8 | 2.094 ns | 0.0708 ns | 0.0757 ns |     - |     - |     - |         - |\r\n|              IsPatternMatching |      .NET 4.8 |      .NET 4.8 | 1.812 ns | 0.0577 ns | 0.0539 ns |     - |     - |     - |         - |\r\n|           IsPatternNonMatching |      .NET 4.8 |      .NET 4.8 | 2.105 ns | 0.0321 ns | 0.0284 ns |     - |     - |     - |         - |\r\n|             IsThenCastMatching |      .NET 4.8 |      .NET 4.8 | 2.117 ns | 0.0706 ns | 0.0660 ns |     - |     - |     - |         - |\r\n|          IsThenCastNonMatching |      .NET 4.8 |      .NET 4.8 | 2.512 ns | 0.0760 ns | 0.0781 ns |     - |     - |     - |         - |\r\n|    AsOperatorNullCheckMatching | .NET Core 3.1 | .NET Core 3.1 | 1.478 ns | 0.0297 ns | 0.0263 ns |     - |     - |     - |         - |\r\n| AsOperatorNullCheckNonMatching | .NET Core 3.1 | .NET Core 3.1 | 1.843 ns | 0.0431 ns | 0.0382 ns |     - |     - |     - |         - |\r\n|              IsPatternMatching | .NET Core 3.1 | .NET Core 3.1 | 1.543 ns | 0.0448 ns | 0.0419 ns |     - |     - |     - |         - |\r\n|           IsPatternNonMatching | .NET Core 3.1 | .NET Core 3.1 | 1.890 ns | 0.0531 ns | 0.0443 ns |     - |     - |     - |         - |\r\n|             IsThenCastMatching | .NET Core 3.1 | .NET Core 3.1 | 1.898 ns | 0.0603 ns | 0.0884 ns |     - |     - |     - |         - |\r\n|          IsThenCastNonMatching | .NET Core 3.1 | .NET Core 3.1 | 2.294 ns | 0.0525 ns | 0.0438 ns |     - |     - |     - |         - |\r\n\r\n----\r\n\r\n```csharp\r\n    [MemoryDiagnoser]\r\n    [SimpleJob(RuntimeMoniker.Net48)]\r\n    [SimpleJob(RuntimeMoniker.NetCoreApp31)]\r\n    public class PatternMatching\r\n    {\r\n        private object item = new ArrayList();\r\n        private object nullitem = null;\r\n\r\n        [Benchmark]\r\n        public int AsOperatorNullCheckMatching()\r\n        {\r\n            var array = item as ArrayList;\r\n            if (array != null) return array.Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int AsOperatorNullCheckNonMatching()\r\n        {\r\n            var table = item as Hashtable;\r\n            if (table != null) return table.Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int IsPatternMatching()\r\n        {\r\n            if (item is ArrayList table) return table.Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int IsPatternNonMatching()\r\n        {\r\n            if (item is Hashtable table) return table.Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int IsThenCastMatching()\r\n        {\r\n            if (item is ArrayList) return ((ArrayList)item).Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int IsThenCastNonMatching()\r\n        {\r\n            if (item is Hashtable) return ((Hashtable)item as Hashtable).Count;\r\n            return 0;\r\n        }\r\n    }\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696880214/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696897183","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-696897183","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":696897183,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Njg5NzE4Mw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-22T18:21:46Z","updated_at":"2020-09-22T18:21:46Z","author_association":"CONTRIBUTOR","body":"Adding a null check before the pattern matching takes place:\r\n\r\n----\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18362.1082 (1903/May2019Update/19H1)\r\nIntel Core i9-7900X CPU 3.30GHz (Kaby Lake), 1 CPU, 20 logical and 10 physical cores\r\n.NET Core SDK=3.1.402\r\n  [Host]        : .NET Core 3.1.8 (CoreCLR 4.700.20.41105, CoreFX 4.700.20.41903), X64 RyuJIT\r\n  .NET 4.8      : .NET Framework 4.8 (4.8.4220.0), X64 RyuJIT\r\n  .NET Core 3.1 : .NET Core 3.1.8 (CoreCLR 4.700.20.41105, CoreFX 4.700.20.41903), X64 RyuJIT\r\n\r\n\r\n```\r\n|                      Method |           Job |       Runtime |      Mean |     Error |    StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|---------------------------- |-------------- |-------------- |----------:|----------:|----------:|------:|------:|------:|----------:|\r\n|           IsPatternMatching |      .NET 4.8 |      .NET 4.8 | 1.8286 ns | 0.0508 ns | 0.0451 ns |     - |     - |     - |         - |\r\n|    NotNullIsPatternMatching |      .NET 4.8 |      .NET 4.8 | 1.7808 ns | 0.0520 ns | 0.0486 ns |     - |     - |     - |         - |\r\n|       NullIsPatternMatching |      .NET 4.8 |      .NET 4.8 | 0.2407 ns | 0.0251 ns | 0.0235 ns |     - |     - |     - |         - |\r\n|        IsPatternNonMatching |      .NET 4.8 |      .NET 4.8 | 2.0952 ns | 0.0367 ns | 0.0306 ns |     - |     - |     - |         - |\r\n| NotNullIsPatternNonMatching |      .NET 4.8 |      .NET 4.8 | 2.1074 ns | 0.0341 ns | 0.0302 ns |     - |     - |     - |         - |\r\n|    NullIsPatternNonMatching |      .NET 4.8 |      .NET 4.8 | 0.2694 ns | 0.0063 ns | 0.0056 ns |     - |     - |     - |         - |\r\n|           IsPatternMatching | .NET Core 3.1 | .NET Core 3.1 | 1.3430 ns | 0.0292 ns | 0.0273 ns |     - |     - |     - |         - |\r\n|    NotNullIsPatternMatching | .NET Core 3.1 | .NET Core 3.1 | 1.5368 ns | 0.0275 ns | 0.0257 ns |     - |     - |     - |         - |\r\n|       NullIsPatternMatching | .NET Core 3.1 | .NET Core 3.1 | 0.2990 ns | 0.0214 ns | 0.0190 ns |     - |     - |     - |         - |\r\n|        IsPatternNonMatching | .NET Core 3.1 | .NET Core 3.1 | 1.9393 ns | 0.0542 ns | 0.0507 ns |     - |     - |     - |         - |\r\n| NotNullIsPatternNonMatching | .NET Core 3.1 | .NET Core 3.1 | 1.8874 ns | 0.0295 ns | 0.0261 ns |     - |     - |     - |         - |\r\n|    NullIsPatternNonMatching | .NET Core 3.1 | .NET Core 3.1 | 0.2634 ns | 0.0258 ns | 0.0242 ns |     - |     - |     - |         - |\r\n\r\n----\r\n\r\n```csharp\r\n        [Benchmark]\r\n        public int IsPatternMatching()\r\n        {\r\n            if (item is ArrayList table) return table.Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int NotNullIsPatternMatching()\r\n        {\r\n            if (item != null && item is ArrayList table) return table.Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int NullIsPatternMatching()\r\n        {\r\n            if (nullitem != null && nullitem is ArrayList table) return table.Count;\r\n            return 0;\r\n        }\r\n\r\n\r\n        [Benchmark]\r\n        public int IsPatternNonMatching()\r\n        {\r\n            if (item is Hashtable table) return table.Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int NotNullIsPatternNonMatching()\r\n        {\r\n            if (item != null && item is Hashtable table) return table.Count;\r\n            return 0;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int NullIsPatternNonMatching()\r\n        {\r\n            if (nullitem != null && nullitem is Hashtable table) return table.Count;\r\n            return 0;\r\n        }\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696897183/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696942135","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-696942135","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":696942135,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Njk0MjEzNQ==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-22T19:48:32Z","updated_at":"2020-09-22T19:48:32Z","author_association":"CONTRIBUTOR","body":"@jeme interesting benchmark - if I'm reading right, seems like the only difference is in case there are a lot of nulls being passed\r\n\r\n| Method | Job | Runtime | Mean | Error | StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n| ------------- |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\r\n| IsPatternMatching | .NET Core 3.1 | .NET Core 3.1 | 1.3430 ns | 0.0292 ns | 0.0273 ns | - | - | - | -| \r\n| NotNullIsPatternMatching | .NET Core 3.1 | .NET Core 3.1 | 1.5368 ns | 0.0275 ns | 0.0257 ns | - | - | - | -| \r\n| NullIsPatternMatching | .NET Core 3.1 | .NET Core 3.1 | 0.2990 ns | 0.0214 ns | 0.0190 ns | - | - | - | -| \r\n| NullIsPatternNonMatching | .NET Core 3.1 | .NET Core 3.1 | 0.2634 ns | 0.0258 ns | 0.0242 ns | - | - | - | -|\r\n\r\n\r\nThink you missed only one test:\r\n\r\n```csharp\r\n        [Benchmark]\r\n        public int IsPatternMatchingButNull()\r\n        {\r\n            if (nullitem is ArrayList table) return table.Count;\r\n            return 0;\r\n        }\r\n```\r\n\r\nI've added back the `!(a is null) && a is Class c` checks for now: https://github.com/apache/lucenenet/pull/345/commits/d08b443d14d751241b2951b18bd4a0f9a918b92a\r\n\r\nbut I think it's worth cleaning up most of them back to just the pattern matching, as I doubt there is going to be any impact on 99% of the cases...\r\n\r\nI'll try tomorrow to setup testing on our Azure DevOps to be sure I'm not breaking anything with these changes.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/696942135/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697119925","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-697119925","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":697119925,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzExOTkyNQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T03:59:21Z","updated_at":"2020-09-23T03:59:21Z","author_association":"CONTRIBUTOR","body":"@jeme \r\n\r\nThanks Jens. Looks like a `null` check has a significant impact if many cases are `null`. However, the cases I was worried about look more like:\r\n\r\n```c#\r\n\r\nobject something = cache.Value;\r\nif (something is Value1Type)\r\n{\r\n      Value1Type value1 = (Value1Type)something; // <- Allocation happens here (conditionally)\r\n      // do something with value1 and return\r\n      return value1.Get();\r\n}\r\nelse if (something is Value2Type)\r\n{\r\n      Value2Type value2 = (Value2Type)something; // <- Allocation happens here (conditionally)\r\n      // do something with value2 and return\r\n      return value2.Get();\r\n}\r\nreturn new ARealValue(something);\r\n```\r\n\r\nIf a large number of cases are `Value2Type` (or even neither `Value1Type` or `Value2Type`) what I am wondering is do we waste memory allocation on `Value1Type` if it uses pattern matching (`if (something is Value1Type value1)`)?\r\n\r\n```c#\r\n\r\nobject something = cache.Value;\r\nif (something is Value1Type value1) // <- Allocation happens here (always)\r\n{\r\n      // do something with value1 and return\r\n      return value1.Get();\r\n}\r\nelse if (something is Value2Type value2) // <- Allocation happens here (always when first if condition fails)\r\n{\r\n      // do something with value2 and return\r\n      return value2.Get();\r\n}\r\n// If we are here, we are throwing out 2 unnecessary memory allocations\r\nreturn new ARealValue(something);\r\n```\r\n\r\nIt seems like we are declaring `Value1Type value1 = default` and then throwing its value out when the `if` condition fails, but perhaps the IL is compensating and converting it back to the above behind the scenes...? I suspect not because the `value1` variable can be used outside of the `if` block even if the condition fails.\r\n\r\nThis would be especially important in `Equals()` methods where we want to shunt to `false` as quickly as possible with as few allocations as possible.\r\n\r\nIt looks like you have covered that case in your benchmarks above, but the important metric to consider is the memory allocated rather than the execution time, as memory allocations will cause GC to happen more frequently, which may negate any gain in raw performance. `null` reference type memory allocations [are either 4 or 8 bytes](https://stackoverflow.com/questions/3801878/how-much-memory-does-null-pointer-use) of extra RAM, so they will contribute to the total amount of memory pressure even if they are never assigned a real value.\r\n\r\nI have run a benchmark, and even after cranking it up to 1 billion iterations, it seems that either this is not a significant thing to worry about or BenchmarkDotNet does not consider `null` reference type allocations when it measures the results.\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1016 (1909/November2018Update/19H2)\r\nIntel Core i7-8850H CPU 2.60GHz (Coffee Lake), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.1.301\r\n  [Host]     : .NET Core 3.1.5 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.27001), X64 RyuJIT\r\n  DefaultJob : .NET Core 3.1.5 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.27001), X64 RyuJIT\r\n\r\n\r\n```\r\n\r\n|                                Method |     Mean |     Error |    StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------------------------------- |---------:|----------:|----------:|------:|------:|------:|----------:|\r\n|   PatternMatching_Class1Set_Class2Set | 5.935 ms | 0.1155 ms | 0.1581 ms |     - |     - |     - |         - |\r\n|  PatternMatching_Class1Null_Class2Set | 6.005 ms | 0.1184 ms | 0.1945 ms |     - |     - |     - |         - |\r\n| PatternMatching_Class1Null_Class2Null | 5.903 ms | 0.1120 ms | 0.1333 ms |     - |     - |     - |         - |\r\n|       NonMatching_Class1Set_Class2Set | 5.915 ms | 0.1148 ms | 0.1410 ms |     - |     - |     - |         - |\r\n|      NonMatching_Class1Null_Class2Set | 5.874 ms | 0.1168 ms | 0.1637 ms |     - |     - |     - |         - |\r\n|     NonMatching_Class1Null_Class2Null | 5.897 ms | 0.1133 ms | 0.1391 ms |     - |     - |     - |         - |\r\n\r\n```c#\r\n    public class Class1 { }\r\n    public class Class2 { }\r\n\r\n\r\n    [MemoryDiagnoser]\r\n    public class AllocationBenchmarks\r\n    {\r\n        public static readonly Class1 class1Null = null;\r\n        public static readonly Class1 class1Set = new Class1();\r\n        public static readonly Class2 class2Null = null;\r\n        public static readonly Class2 class2Set = new Class2();\r\n        public const int Iterations = 1000000000;\r\n\r\n\r\n        [Benchmark]\r\n        public void PatternMatching_Class1Set_Class2Set()\r\n        {\r\n            for (int i = 0; i < Iterations; i++)\r\n                PatternMatching(class1Set, class2Set);\r\n        }\r\n\r\n        [Benchmark]\r\n        public void PatternMatching_Class1Null_Class2Set()\r\n        {\r\n            for (int i = 0; i < Iterations; i++)\r\n                PatternMatching(class1Null, class2Set);\r\n        }\r\n\r\n        [Benchmark]\r\n        public void PatternMatching_Class1Null_Class2Null()\r\n        {\r\n            for (int i = 0; i < Iterations; i++)\r\n                PatternMatching(class1Null, class2Null);\r\n        }\r\n\r\n\r\n        [Benchmark]\r\n        public void NonMatching_Class1Set_Class2Set()\r\n        {\r\n            for (int i = 0; i < Iterations; i++)\r\n                NonMatching(class1Set, class2Set);\r\n        }\r\n\r\n        [Benchmark]\r\n        public void NonMatching_Class1Null_Class2Set()\r\n        {\r\n            for (int i = 0; i < Iterations; i++)\r\n                NonMatching(class1Null, class2Set);\r\n        }\r\n\r\n        [Benchmark]\r\n        public void NonMatching_Class1Null_Class2Null()\r\n        {\r\n            for (int i = 0; i < Iterations; i++)\r\n                PatternMatching(class1Null, class2Null);\r\n        }\r\n\r\n\r\n        public static void PatternMatching(Class1 class1, Class2 class2)\r\n        {\r\n            if (class1 is Class1 c1)\r\n            {\r\n\r\n            }\r\n            else if (class2 is Class2 c2)\r\n            {\r\n\r\n            }\r\n        }\r\n\r\n        public static void NonMatching(Class1 class1, Class2 class2)\r\n        {\r\n            if (class1 is Class1)\r\n            {\r\n                Class1 c1 = (Class1)class1;\r\n            }\r\n            else if (class2 is Class2)\r\n            {\r\n                Class2 c2 = (Class2)class2;\r\n            }\r\n        }\r\n    }\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697119925/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697148885","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697148885","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697148885,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzE0ODg4NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T05:51:39Z","updated_at":"2020-09-23T05:51:39Z","author_association":"CONTRIBUTOR","body":"I am open to discussing alternatives to `Lucene.Net.Diagnostics.Debugging.Assert`. However, this feature was added after much consideration about how to actually test Lucene.NET. The main issue is that up until 4.8.0-beta00012, we were skipping test conditions that were driven by asserts, and we discovered 3 new test failures (one of which is still failing) that were missed because we were not running all of the test conditions.\r\n\r\n1. In Java asserts can be enabled in the release.\r\n2. The test framework (a component that is available to end users) depends on asserts being enabled in order to run all test conditions.\r\n3. The test framework also catches the `AssertionException` that is thrown by `Debugging.Assert()` in order to ignore it in certain cases.\r\n4. It is not possible for us to determine based on the source code which asserts were meant only for debugging and which were meant to be used as test conditions (assuming a distinction was made in the first place).\r\n5. Since the asserts are interspersed with other conditional lines of code, it is not always possible to replicate the behavior by creating fakes that subclass the class under test. Even in places where it is possible, this is a major shift in design from Lucene.\r\n6. Several test features inside of the the classes are enabled only when asserts are enabled (for example, they collect data inside of the production class, but only when asserts are enabled). This makes them impossible to use with `System.Diagnostics.Debugging.Assert()` because those are compiled out of the release. Note that we have now removed some code that was creating unused allocations from running in Release mode by adding this feature.\r\n7. There are [tests that *only* fail with optimizations enabled](https://github.com/apache/lucenenet/issues/269) on .NET Framework/x86. Running tests only in Debug mode just so we can fire asserts (which are in fact test conditions) is not an option.\r\n8. There are several `Debugging.Assert()` cases where the second argument (the description) throws an exception while being built when the test condition is `true`, so we need to skip building the string unless the condition is `false`. Changing to use a `Func<string>` has made the tests run faster because we are not continually building and throwing away strings during testing.\r\n\r\nIf there are any alternatives, we should also consider how much work they are to implement and how difficult they would be to keep in sync with Lucene's asserts.\r\n\r\nI don't particularly care for Lucene's test design being partially implemented inside the released code and realize it does come at a performance cost in production, but I didn't see any viable alternatives where we (and end users) could turn on asserts in Release mode. The impact was minimized as much as possible by using a field instead of a property and by using `if (Debugging.AssertsEnabled)` in blocks of multiple asserts. When running benchmarks, the `if` blocks had a major impact on performance (even though they are technically duplicates of the logic inside of `Debugging.Assert()`).\r\n\r\n```c#\r\n        private DocumentsWriterPerThread InternalTryCheckOutForFlush(ThreadState perThread)\r\n        {\r\n            if (Debugging.AssertsEnabled)\r\n            {\r\n                // LUCENENET specific - Since we need to mimic the unfair behavior of ReentrantLock, we need to ensure that all threads that enter here hold the lock.\r\n                Debugging.Assert(perThread.IsHeldByCurrentThread);\r\n                Debugging.Assert(Monitor.IsEntered(this));\r\n                Debugging.Assert(perThread.flushPending);\r\n            }\r\n            try\r\n            {\r\n                // LUCENENET specific - We removed the call to perThread.TryLock() and the try-finally below as they are no longer needed.\r\n\r\n                // We are pending so all memory is already moved to flushBytes\r\n                if (perThread.IsInitialized)\r\n                {\r\n                    if (Debugging.AssertsEnabled) Debugging.Assert(perThread.IsHeldByCurrentThread);\r\n                    DocumentsWriterPerThread dwpt;\r\n                    long bytes = perThread.bytesUsed; // do that before\r\n                    // replace!\r\n                    dwpt = perThreadPool.Reset(perThread, closed);\r\n                    if (Debugging.AssertsEnabled) Debugging.Assert(!flushingWriters.ContainsKey(dwpt), \"DWPT is already flushing\");\r\n                    // Record the flushing DWPT to reduce flushBytes in doAfterFlush\r\n                    flushingWriters[dwpt] = bytes;\r\n                    numPending--; // write access synced\r\n                    return dwpt;\r\n                }\r\n                return null;\r\n            }\r\n            finally\r\n            {\r\n                UpdateStallState();\r\n            }\r\n        }\r\n```\r\n\r\nThis design choice was made primarily because it keeps close parity with Lucene's source code and design choices. When it comes down to the choice between better performance and ability to detect bugs, we went with ability to detect bugs since we cannot have both without a major redesign.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697148885/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697149771","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697149771","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697149771,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzE0OTc3MQ==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T05:54:34Z","updated_at":"2020-09-23T05:54:34Z","author_association":"CONTRIBUTOR","body":"Couldn't we just add a conditional compilation flag for when compiling the tests projects? Instead of a  `#if DEBUG` it could be `#if TESTING` and otherwise the flag just defaults to false always...","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697149771/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697161956","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697161956","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697161956,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzE2MTk1Ng==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T06:29:54Z","updated_at":"2020-09-23T06:29:54Z","author_association":"CONTRIBUTOR","body":"> Couldn't we just add a conditional compilation flag for when compiling the tests projects? Instead of a #if DEBUG it could be #if TESTING and otherwise the flag just defaults to false always...\r\n\r\nEnd users who need to test their extensions in the compiled release will need to enable the asserts. The [test framework requires asserts to be enabled](https://github.com/apache/lucenenet/blob/de5251c848b79223d394778cbb17ffc1388877ba/src/Lucene.Net.TestFramework/Support/Util/LuceneTestFrameworkInitializer.cs#L228) in order to run all of the conditions and throw all of the expected exceptions.\r\n\r\nIn addition, the [`CheckIndex` feature is \"more thorough\" with asserts enabled](https://github.com/apache/lucene-solr/blob/8fdf89690404c0e65784b2c5477552b9dec58591/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java#L1940).\r\n\r\nThe main issue is the Lucene designers made no distinction between the `NUnit` asserts and `Debug.Assert()`. The latter were designed to be able to be turned on in production by end users as well as during testing.\r\n\r\nNot to mention, what are we actually testing if we rebuild after we test, and how do we know the final build does what is expected?\r\n\r\nYour results might actually be skewed because you are seeing the initial impact of loading up the `SystemProperties`. Keep in mind, that is only loaded once per application startup and stored in a static field and then only has a minimal impact during running. It is crucial that it is loaded up before the first time it is read (and it is using `LazyInitializer` already to ensure only 1 thread has the impact).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697161956/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697165228","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-697165228","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":697165228,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzE2NTIyOA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T06:38:20Z","updated_at":"2020-09-23T06:38:20Z","author_association":"CONTRIBUTOR","body":"I tried [running the tests](https://dev.azure.com/shad0962/Experiments/_build/results?buildId=949&view=results), but in the current incarnation, this doesn't build. It is failing to [set the `Debugging.AssertsEnabled` to `true`](https://github.com/apache/lucenenet/blob/de5251c848b79223d394778cbb17ffc1388877ba/src/Lucene.Net.TestFramework/Support/Util/LuceneTestFrameworkInitializer.cs#L228) when running the test framework.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697165228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697205395","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697205395","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697205395,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzIwNTM5NQ==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T08:07:33Z","updated_at":"2020-09-23T08:07:33Z","author_association":"CONTRIBUTOR","body":"Think I found a better solution for this case that keeps the current assert logic, but removes it from tight loops: https://github.com/apache/lucenenet/pull/347\r\n\r\nI've wrapped Debugging.AssertsEnabled around a lazy - but I'm not sure if there is any other way of setting it after lucene is loaded. I could only find this one in CheckIndex:\r\n\r\n```csharp\r\n// LUCENENET specific - rather than having the user specify whether to enable asserts, we always run with them enabled.\r\nDebugging.AssertsEnabled = true;\r\n```\r\nI've the impression that only EnvironmentVariablesConfigurationProvider implements IConfigurationProvider, and thus it would only be read once from the current environment variables.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697205395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697205762","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-697205762","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":697205762,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzIwNTc2Mg==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T08:08:23Z","updated_at":"2020-09-23T08:08:23Z","author_association":"CONTRIBUTOR","body":"I'll close this PR and send separate ones for != null and == null to keep things more manageable","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697205762/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697211205","html_url":"https://github.com/apache/lucenenet/pull/347#issuecomment-697211205","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/347","id":697211205,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzIxMTIwNQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T08:19:24Z","updated_at":"2020-09-23T08:19:56Z","author_association":"CONTRIBUTOR","body":"Great. This looks like something that could really reduce the impact of `Debugging.Assert()`. Although, it would be great to see some benchmarks to understand the impact of this change.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697211205/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697219417","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697219417","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697219417,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzIxOTQxNw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T08:35:21Z","updated_at":"2020-09-23T08:35:21Z","author_association":"CONTRIBUTOR","body":"> I've wrapped Debugging.AssertsEnabled around a lazy - but I'm not sure if there is any other way of setting it after lucene is loaded. I could only find this one in CheckIndex:\r\n\r\nCheckIndex is wrapped into a dotnet tool, `lucene-cli`. So, it is actually run as a separate process.\r\n\r\n> I've the impression that only EnvironmentVariablesConfigurationProvider implements IConfigurationProvider, and thus it would only be read once from the current environment variables.\r\n\r\nThat is the default setting when running `Lucene.Net.dll` out of the box. The user has the ability to inject their own configuration settings through `IConfigurationFactory`. The test framework and `lucene-cli` are set up to inject their own configuration when run, which read from JSON files (this isn't documented yet, see #307).\r\n\r\nThis differs a bit from the state of things in .NET - in Java, the property values can actually be read inside of the application. We did the next best thing, which was to use .NET configuration providers to read the settings from outside of the application. There aren't a lot of settings that are actually meaningful in Lucene.NET, but enabling asserts is one of the biggest ones. Of course, by default the setting is missing in the provider and after it loads and realizes it is missing, it uses the second parameter as the default setting.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697219417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697231411","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697231411","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697231411,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzIzMTQxMQ==","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T08:58:10Z","updated_at":"2020-09-23T08:58:10Z","author_association":"CONTRIBUTOR","body":"I understand its complicated, truly I am.\r\n\r\nbut why should we stick to the java bad pattern implementation?\r\nwho cares, seriously. \r\n\r\nwe all want highly performant search library, and for production use, I really don't want/need overhead debug assertions.\r\n\r\n10% performance penalty isn't wroth to be java compliance \r\n\r\nin this case I strongly feels that move this to #IF TESTING is better option, \r\nyou still have the whole functionality, you can run all the tests in release/debug and get the same behavior.\r\n\r\nfor production use, we'll compile this without and get the best from both worlds.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697231411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697247191","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697247191","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697247191,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzI0NzE5MQ==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T09:27:59Z","updated_at":"2020-09-23T09:27:59Z","author_association":"CONTRIBUTOR","body":"@eladmarg i think in this case specific we could attack the few places that were calling this in a loop and just get rid of the overhead.\r\n\r\n@NightOwl888 from what I understand, in any case using IConfigurationFactory with custom providers, that would be set once at the start of the program, and not changed afterwards right? From a quick glance, it doesn't seem that Properties support live-reload of configuration in any case. So if it's cached on the Lazy<bool> or within the more complex System.Properties code, it is cached - which should make [this PR](https://github.com/apache/lucenenet/pull/347) a non-breaking change...\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697247191/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697248229","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697248229","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697248229,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzI0ODIyOQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T09:29:58Z","updated_at":"2020-09-23T14:32:54Z","author_association":"CONTRIBUTOR","body":"> 10% performance penalty isn't wroth to be java compliance\r\n\r\nWhere do you see a 10% performance penalty?\r\n\r\nRunning a basic search using the SearchFiles demo project as a template (see #310) shows virtually no impact in search speed and about a 1.5% increase in RAM usage.\r\n\r\nOn the other hand, the IndexFiles benchmark has about a 4% decrease in performance and a 23% increase in RAM consumption.\r\n\r\nRun your own benchmarks on 4.8.0-beta00012 vs 4.8.0-beta00011, I am interested to see if you are getting different results.\r\n\r\nThe problem here is that there seems to be a lot of focus on the *initial request* that loads the `IConfiguration`, which is a single hit that happens once at startup. It is expensive, but it doesn't happen during normal operation, you only notice it if you are continually stopping and restarting the AppDomain.\r\n\r\n> in this case I strongly feels that move this to #IF TESTING is better option,\r\nyou still have the whole functionality, you can run all the tests in release/debug and get the same behavior.\r\n\r\nWe just migrated from what is effectively that approach (using `System.Diagnostics.Debug.Assert()`). Too many shortcomings to make it work effectively, and we were getting false positives as a result. Not to mention, there are some test features that need to be *hard coded* to run in production in order to make the tests work that aren't necessary in production. At least with this feature, we can now turn them off.\r\n\r\n> but why should we stick to the java bad pattern implementation?\r\n\r\nI will tell you exactly why - unless we run all of the test conditions (and make no mistake about it, the asserts are intended to be *test conditions*), we have no way of realistically determining if the application is functioning correctly as it was designed.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697248229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697257440","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697257440","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697257440,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzI1NzQ0MA==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T09:48:12Z","updated_at":"2020-09-23T09:48:12Z","author_association":"CONTRIBUTOR","body":"\r\nTried on a very simple benchmark - running on a laptop so don't expect perfect results... In any case I think the gain is obviouos :)\r\n\r\n```csharp\r\n    [SimpleJob(RuntimeMoniker.NetCoreApp31)]\r\n    public class DebuggingFlags\r\n    {\r\n        private static Dictionary<string, string> _flags = new Dictionary<string, string>() { [\"assert\"] = \"false\" };\r\n\r\n        private HashSet<int> _set = new HashSet<int>();\r\n\r\n        [Params(1000, 10000, 100_000)]\r\n        public int N;\r\n\r\n        [Benchmark]\r\n        public void Loop()\r\n        {\r\n            for (int i = 0; i < N; i++)\r\n            {\r\n                Set(i);\r\n            }\r\n        }\r\n\r\n        [Benchmark]\r\n        public void CachedLoop()\r\n        {\r\n            bool flag = AssertsEnabled;\r\n            for (int i = 0; i < N; i++)\r\n            {\r\n                SetPassingFlag(i, flag);\r\n            }\r\n        }\r\n\r\n        internal static bool AssertsEnabled\r\n        {\r\n            get\r\n            {\r\n                return _flags.TryGetValue(\"assert\", out var flag) ? bool.Parse(flag) : false;\r\n            }\r\n        }\r\n\r\n        private void Set(int index)\r\n        {\r\n            SetPassingFlag(index, AssertsEnabled);\r\n        }\r\n\r\n        private void SetPassingFlag(int index, bool flag)\r\n        {\r\n            if (flag) Assert(index > 0 && index < N);\r\n\r\n            _set.Add(index);\r\n        }\r\n\r\n        private static void Assert(bool condition)\r\n        {\r\n            if (condition) throw new Exception(\"Failed assertion\");\r\n        }\r\n    }\r\n```\r\n\r\n|     Method |           Job |       Runtime |      N |         Mean |       Error |      StdDev | Ratio | RatioSD |\r\n|----------- |-------------- |-------------- |------- |-------------:|------------:|------------:|------:|--------:|\r\n|       Loop | .NET Core 3.1 | .NET Core 3.1 |   1000 |    55.457 us |   0.7818 us |   0.6528 us |     ? |       ? |\r\n| CachedLoop | .NET Core 3.1 | .NET Core 3.1 |   1000 |     8.953 us |   0.1000 us |   0.0835 us |     ? |       ? |\r\n|       Loop | .NET Core 3.1 | .NET Core 3.1 |  10000 |   556.303 us |   7.2915 us |   6.0887 us |     ? |       ? |\r\n| CachedLoop | .NET Core 3.1 | .NET Core 3.1 |  10000 |    89.656 us |   1.1263 us |   1.8819 us |     ? |       ? |\r\n|       Loop | .NET Core 3.1 | .NET Core 3.1 | 100000 | 6,341.585 us | 207.3166 us | 581.3379 us |     ? |       ? |\r\n| CachedLoop | .NET Core 3.1 | .NET Core 3.1 | 100000 | 1,029.926 us |  28.9745 us |  81.7231 us |     ? |       ? |\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697257440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697271256","html_url":"https://github.com/apache/lucenenet/pull/347#issuecomment-697271256","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/347","id":697271256,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzI3MTI1Ng==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T10:16:27Z","updated_at":"2020-09-23T10:17:13Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 did some initial benchmarks on a similar code here: https://github.com/apache/lucenenet/issues/346#issuecomment-697257440\r\n\r\nNot using the lucene Debugging directly because it's internal on the nuget package, but i think it's essentially similar","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697271256/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697351627","html_url":"https://github.com/apache/lucenenet/issues/350#issuecomment-697351627","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/350","id":697351627,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzM1MTYyNw==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T13:05:57Z","updated_at":"2020-09-23T13:05:57Z","author_association":"CONTRIBUTOR","body":"It seems like there are only 3 classes that derive from `ScoreDoc`: `OneGroup`, `FieldDoc`, `FieldValueHitQueue.Entry`\r\n\r\nOne possible way to go about this (as we can't use generics, and using an interface on the struct will result in boxing anyway), would be to add two fields to ScoreDoc, one to hold the expected content type, and the other to hold the content:\r\n\r\n````csharp\r\npublic struct ScoreDoc\r\n{\r\n    private byte _contentType;\r\n    private object _content;\r\n\r\n    public float Score { get; }\r\n    public int Doc { get; }\r\n    public int ShardIndex { get; } \r\n\r\n    public bool IsNull() => _contentType == 0;\r\n    public bool IsNotNull() => _contentType != 0;\r\n    public bool IsFieldDoc() => _contentType == _fieldDocType;\r\n    public bool IsEntry() => _contentType == _entryType || _contentType == _oneGroupType; // OneGroupContent derives from Entry\r\n    public bool IsOneGroup() => _contentType == _oneGroupType ;\r\n\r\n    private const byte _scoreDocType = 1;\r\n    private const byte _fieldDocType = 2;\r\n    private const byte _entryType = 3;\r\n    private const byte _oneGroupType = 4;\r\n\r\n    public FieldDocContent AsFieldDoc() \r\n    {\r\n        if(IsFieldDoc()) return (FieldDocContent)_content;\r\n        throw new Exception(\"Invalid type\");\r\n   }\r\n\r\n    public EntryContent AsEntry() \r\n    {\r\n        if(IsEntry()) return (EntryContent )_content;\r\n        throw new Exception(\"Invalid type\");\r\n   }\r\n\r\n    public OneGroupContent AsOneGroup() \r\n    {\r\n        if(IsOneGroup()) return (OneGroupContent )_content;\r\n        throw new Exception(\"Invalid type\");\r\n   }\r\n}\r\n````\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697351627/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697372724","html_url":"https://github.com/apache/lucenenet/pull/345#issuecomment-697372724","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/345","id":697372724,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzM3MjcyNA==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T13:40:46Z","updated_at":"2020-09-23T13:42:06Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 While it does end up initializing a local variable, in this case it will be a allocation on the stack though, and as far as i understand, this virtually has no cost associated with it when you wan 't to reclaim it.\r\n\r\nIt's my understanding that when you enter a method, a stack frame is allocated and all you do when you exit the method again is rewind your stack pointer to where it was when you entered. So it's only the allocation it self that has a cost, not the collection of it.\r\n\r\n(This is perhaps a bit simplified but I think it brings the understanding across)\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697372724/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697429988","html_url":"https://github.com/apache/lucenenet/issues/350#issuecomment-697429988","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/350","id":697429988,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzQyOTk4OA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T14:18:56Z","updated_at":"2020-09-23T14:18:56Z","author_association":"CONTRIBUTOR","body":"Given the fact that Lucene relies on inheritance in this case to extend a data container with additional fields, it feels like we are trying to force a struct into the design. Specifically, we are breaking the is-a relationship in the inheritance model for all of the subclasses, which would make it more difficult to use (assuming that it doesn't need to be cast often by users, in that case we may actually be helping).\r\n\r\nThe usage of this class is such that it acts as a data delivery mechanism, similar to the tables in Entity Framework, which are classes.\r\n\r\nAs such, IMO this probably isn't a good candidate for a struct.\r\n\r\nI am curious to hear other opinions on this case, though. Especially from users. This does seem to have potential to make a big performance impact.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697429988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697484139","html_url":"https://github.com/apache/lucenenet/issues/350#issuecomment-697484139","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/350","id":697484139,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzQ4NDEzOQ==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T14:51:55Z","updated_at":"2020-09-23T14:52:28Z","author_association":"CONTRIBUTOR","body":"Guess that's exactly the cost of doing so - but i've the impression there are already a lot of places on the Lucene source code that rely on the similar pattern, instead of using generics + interfaces to enforce this at compile time:\r\n\r\n```csharp\r\nif(!(obj is Class)) throw new Exception(\"Expected type X\");\r\n```\r\n\r\nThis could be one case where the switch is worth, as currently Lucene allocates one ScoreDoc object for every search hit that needs to be scored, per search... But obviously better to test first :)\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697484139/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697715665","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697715665","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697715665,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzcxNTY2NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T17:09:55Z","updated_at":"2020-09-23T17:09:55Z","author_association":"CONTRIBUTOR","body":"I have spotted and corrected an error in the benchmark.\r\n\r\nIt looks like the following line:\r\n\r\n```c#\r\npublic static bool AssertsEnabled = SystemProperties.GetPropertyAsBoolean(\"assert\", false);\r\n```\r\n\r\nwas interpreted  as...\r\n\r\n```c#\r\npublic static bool AssertsEnabled => SystemProperties.GetPropertyAsBoolean(\"assert\", false);\r\n```\r\n\r\nSubtle, but critical. With that change, the difference is far less than the margin of error.\r\n\r\n```c#\r\n    [SimpleJob(RuntimeMoniker.NetCoreApp31)]\r\n    [MemoryDiagnoser]\r\n    public class DebuggingFlags\r\n    {\r\n        private static Dictionary<string, string> _flags = new Dictionary<string, string>() { [\"assert\"] = \"false\" };\r\n\r\n        private HashSet<int> _set = new HashSet<int>();\r\n\r\n        [Params(1000, 10000, 100_000)]\r\n        public int N;\r\n\r\n        [Benchmark]\r\n        public void Loop()\r\n        {\r\n            for (int i = 0; i < N; i++)\r\n            {\r\n                Set(i);\r\n            }\r\n        }\r\n\r\n        [Benchmark]\r\n        public void CachedLoop()\r\n        {\r\n            bool flag = AssertsEnabled;\r\n            for (int i = 0; i < N; i++)\r\n            {\r\n                SetPassingFlag(i, flag);\r\n            }\r\n        }\r\n\r\n        internal static bool AssertsEnabled = _flags.TryGetValue(\"assert\", out var flag) ? bool.Parse(flag) : false;\r\n\r\n        private void Set(int index)\r\n        {\r\n            SetPassingFlag(index, AssertsEnabled);\r\n        }\r\n\r\n        private void SetPassingFlag(int index, bool flag)\r\n        {\r\n            if (flag) Assert(index > 0 && index < N);\r\n\r\n            _set.Add(index);\r\n        }\r\n\r\n        private static void Assert(bool condition)\r\n        {\r\n            if (condition) throw new Exception(\"Failed assertion\");\r\n        }\r\n    }\r\n```\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1016 (1909/November2018Update/19H2)\r\nIntel Core i7-8850H CPU 2.60GHz (Coffee Lake), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.1.301\r\n  [Host]        : .NET Core 3.1.5 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.27001), X64 RyuJIT\r\n  .NET Core 3.1 : .NET Core 3.1.5 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.27001), X64 RyuJIT\r\n\r\nJob=.NET Core 3.1  Runtime=.NET Core 3.1  \r\n\r\n```\r\n|     Method |      N |        Mean |     Error |    StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|----------- |------- |------------:|----------:|----------:|------:|------:|------:|----------:|\r\n|       **Loop** |   **1000** |    **13.55 μs** |  **0.152 μs** |  **0.127 μs** |     **-** |     **-** |     **-** |         **-** |\r\n| CachedLoop |   1000 |    13.55 μs |  0.217 μs |  0.203 μs |     - |     - |     - |         - |\r\n|       **Loop** |  **10000** |   **137.09 μs** |  **2.668 μs** |  **3.911 μs** |     **-** |     **-** |     **-** |         **-** |\r\n| CachedLoop |  10000 |   136.20 μs |  2.403 μs |  2.248 μs |     - |     - |     - |         - |\r\n|       **Loop** | **100000** | **1,367.65 μs** | **27.162 μs** | **40.655 μs** |     **-** |     **-** |     **-** |         **-** |\r\n| CachedLoop | 100000 | 1,365.65 μs | 22.746 μs | 27.934 μs |     - |     - |     - |         - |\r\n\r\nI guess another issue is that the dictionary doesn't contain an `\"assert\"` element by default, so the `bool.Parse()` should also be taken out of the equation. But since that all happens the first time the class is accessed by anything, it really makes no difference to the benchmark. The only difference is that in Lucene.NET, the first call to load the dictionary based on environment variables is a bit more expensive than just having a static dictionary.\r\n\r\nI will try running benchmarks on #347 tomorrow and report the results.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697715665/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697716987","html_url":"https://github.com/apache/lucenenet/issues/350#issuecomment-697716987","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/350","id":697716987,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzcxNjk4Nw==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T17:10:39Z","updated_at":"2020-09-23T17:10:39Z","author_association":"CONTRIBUTOR","body":"Interesting - because we use our own ResultsCollector, this is actually not relevant for our usage of Lucene.NET at all - so I'll leave it as is, as there is a path to optimize it already by not using the official TopDocs results collector","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697716987/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697744787","html_url":"https://github.com/apache/lucenenet/pull/352#issuecomment-697744787","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/352","id":697744787,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Nzc0NDc4Nw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T17:27:12Z","updated_at":"2020-09-23T17:27:12Z","author_association":"CONTRIBUTOR","body":"Thanks for the PR. I noticed this earlier, but you beat me to it!\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697744787/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697750655","html_url":"https://github.com/apache/lucenenet/pull/352#issuecomment-697750655","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/352","id":697750655,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Nzc1MDY1NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T17:30:38Z","updated_at":"2020-09-23T17:30:38Z","author_association":"CONTRIBUTOR","body":"This doesn't actually update the site, only the source for it. Unless you beat me to it again, I will build the site tomorrow. \r\n\r\n[Build instructions are available here](https://lucenenet.apache.org/contributing/documentation.html#website).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697750655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697824257","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-697824257","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":697824257,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzgyNDI1Nw==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T18:15:39Z","updated_at":"2020-09-23T18:15:39Z","author_association":"CONTRIBUTOR","body":"True, I must have totally misread that line. I had the impression it was\nalways calling the System Properties method. Then the cost that was showing\nin the profiler must have been only due to the field access outside of the\ninner method, not from the actual getter, so we can remove the change to\nthe Debugging file\n\nOn Wed, Sep 23, 2020, 7:10 PM Shad Storhaug <notifications@github.com>\nwrote:\n\n> I have spotted and corrected an error in the benchmark.\n>\n> It looks like the following line:\n>\n> public static bool AssertsEnabled = SystemProperties.GetPropertyAsBoolean(\"assert\", false);\n>\n> was interpreted as...\n>\n> public static bool AssertsEnabled => SystemProperties.GetPropertyAsBoolean(\"assert\", false);\n>\n> Subtle, but critical. With that change, the difference is far less than\n> the margin of error.\n>\n>     [SimpleJob(RuntimeMoniker.NetCoreApp31)]\n>\n>     [MemoryDiagnoser]\n>\n>     public class DebuggingFlags\n>\n>     {\n>\n>         private static Dictionary<string, string> _flags = new Dictionary<string, string>() { [\"assert\"] = \"false\" };\n>\n>\n>\n>         private HashSet<int> _set = new HashSet<int>();\n>\n>\n>\n>         [Params(1000, 10000, 100_000)]\n>\n>         public int N;\n>\n>\n>\n>         [Benchmark]\n>\n>         public void Loop()\n>\n>         {\n>\n>             for (int i = 0; i < N; i++)\n>\n>             {\n>\n>                 Set(i);\n>\n>             }\n>\n>         }\n>\n>\n>\n>         [Benchmark]\n>\n>         public void CachedLoop()\n>\n>         {\n>\n>             bool flag = AssertsEnabled;\n>\n>             for (int i = 0; i < N; i++)\n>\n>             {\n>\n>                 SetPassingFlag(i, flag);\n>\n>             }\n>\n>         }\n>\n>\n>\n>         internal static bool AssertsEnabled = _flags.TryGetValue(\"assert\", out var flag) ? bool.Parse(flag) : false;\n>\n>\n>\n>         private void Set(int index)\n>\n>         {\n>\n>             SetPassingFlag(index, AssertsEnabled);\n>\n>         }\n>\n>\n>\n>         private void SetPassingFlag(int index, bool flag)\n>\n>         {\n>\n>             if (flag) Assert(index > 0 && index < N);\n>\n>\n>\n>             _set.Add(index);\n>\n>         }\n>\n>\n>\n>         private static void Assert(bool condition)\n>\n>         {\n>\n>             if (condition) throw new Exception(\"Failed assertion\");\n>\n>         }\n>\n>     }\n>\n> BenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1016 (1909/November2018Update/19H2)\n>\n> Intel Core i7-8850H CPU 2.60GHz (Coffee Lake), 1 CPU, 12 logical and 6 physical cores\n>\n> .NET Core SDK=3.1.301\n>\n>   [Host]        : .NET Core 3.1.5 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.27001), X64 RyuJIT\n>\n>   .NET Core 3.1 : .NET Core 3.1.5 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.27001), X64 RyuJIT\n>\n>\n> Job=.NET Core 3.1  Runtime=.NET Core 3.1\n>\n>\n> Method N Mean Error StdDev Gen 0 Gen 1 Gen 2 Allocated\n> *Loop* *1000* *13.55 μs* *0.152 μs* *0.127 μs* *-* *-* *-* *-*\n> CachedLoop 1000 13.55 μs 0.217 μs 0.203 μs - - - -\n> *Loop* *10000* *137.09 μs* *2.668 μs* *3.911 μs* *-* *-* *-* *-*\n> CachedLoop 10000 136.20 μs 2.403 μs 2.248 μs - - - -\n> *Loop* *100000* *1,367.65 μs* *27.162 μs* *40.655 μs* *-* *-* *-* *-*\n> CachedLoop 100000 1,365.65 μs 22.746 μs 27.934 μs - - - -\n>\n> I guess another issue is that the dictionary doesn't contain an \"assert\"\n> element by default, so the bool.Parse() should also be taken out of the\n> equation. But since that all happens the first time the class is accessed\n> by anything, it really makes no difference to the benchmark. The only\n> difference is that in Lucene.NET, the first call to load the dictionary\n> based on environment variables is a bit more expensive than just having a\n> static dictionary.\n>\n> I will try running benchmarks on #347\n> <https://github.com/apache/lucenenet/pull/347> tomorrow and report the\n> results.\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/apache/lucenenet/issues/346#issuecomment-697715665>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ACDCOAYMDNZM2ZXOE6GEFS3SHITXHANCNFSM4RV2BDBA>\n> .\n>\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697824257/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697834940","html_url":"https://github.com/apache/lucenenet/pull/352#issuecomment-697834940","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/352","id":697834940,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzgzNDk0MA==","user":{"login":"AntonyCorbett","id":24551146,"node_id":"MDQ6VXNlcjI0NTUxMTQ2","avatar_url":"https://avatars.githubusercontent.com/u/24551146?v=4","gravatar_id":"","url":"https://api.github.com/users/AntonyCorbett","html_url":"https://github.com/AntonyCorbett","followers_url":"https://api.github.com/users/AntonyCorbett/followers","following_url":"https://api.github.com/users/AntonyCorbett/following{/other_user}","gists_url":"https://api.github.com/users/AntonyCorbett/gists{/gist_id}","starred_url":"https://api.github.com/users/AntonyCorbett/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AntonyCorbett/subscriptions","organizations_url":"https://api.github.com/users/AntonyCorbett/orgs","repos_url":"https://api.github.com/users/AntonyCorbett/repos","events_url":"https://api.github.com/users/AntonyCorbett/events{/privacy}","received_events_url":"https://api.github.com/users/AntonyCorbett/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-23T18:22:13Z","updated_at":"2020-09-23T18:22:13Z","author_association":"CONTRIBUTOR","body":"Thanks. No I hadn't attempted to build the site as I'm not familiar with the project. Thanks for looking after this.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/697834940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698108699","html_url":"https://github.com/apache/lucenenet/issues/353#issuecomment-698108699","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/353","id":698108699,"node_id":"MDEyOklzc3VlQ29tbWVudDY5ODEwODY5OQ==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-24T04:44:29Z","updated_at":"2020-09-24T04:44:29Z","author_association":"CONTRIBUTOR","body":"Enhancements like this are not really \"mandatory\" for a 4.8 release are they?...\r\n\r\nIf so, wouldn't it be better to put them to a 4.8.1 milestone? (I know there is a 4.8.1 java version as well, but perhaps the aim could include whatever that has in such case, alternatively it could be a 4.8.0+Optional milestone to indicate that if it makes it before the 4.8 that's fine, and if it doesn't then that's fine to.).\r\n\r\nIt's just to put more focus on closing the 4.8 release, (it would be to give a more clear picture of how far we are from that release)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698108699/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698111055","html_url":"https://github.com/apache/lucenenet/issues/353#issuecomment-698111055","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/353","id":698111055,"node_id":"MDEyOklzc3VlQ29tbWVudDY5ODExMTA1NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-24T04:53:04Z","updated_at":"2020-09-24T04:53:04Z","author_association":"CONTRIBUTOR","body":"@jeme - Good point. The types involved are all internal, so this can technically be done at any point. I have changed the milestone to Future.\r\n\r\nAlso, after chewing on this a bit more, I don't think there is as much benefit as I thought. The classes might not be eliminated due to the fact we need the state passed into each thread. The best we can probably do is to change this from\r\n\r\n```c#\r\nrunner.Submit(new SearcherCallableNoSort(@lock, this, m_leafSlices[i], weight, after, nDocs, hq));\r\n```\r\n\r\nto\r\n\r\n```c#\r\nrunner.Submit(new SearcherCallableNoSort(@lock, this, m_leafSlices[i], weight, after, nDocs, hq).Call);\r\n```\r\n\r\nby changing the parameter of `Submit()` to a `Func<T>`. Although, there may be a cleaner option with `ParameterizedThreadStart`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698111055/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698126843","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-698126843","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":698126843,"node_id":"MDEyOklzc3VlQ29tbWVudDY5ODEyNjg0Mw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-24T05:47:16Z","updated_at":"2020-09-24T05:47:16Z","author_association":"CONTRIBUTOR","body":"While it might not be possible to determine which asserts were specifically meant for the features we need to enable for end users to use all of Lucene.NET's features, there are certain asserts that we can definitely rule out as having **no benefit** to end users.\r\n\r\nIn those cases, we can reduce the impact of this feature by going back to compiling out of the release by using `System.Diagnostics.Debug.Assert()`. It just requires a bit more effort than find & replace offered. All of the asserts in the example I provided before can be reverted provided we ramp up our testing to include a nightly build that runs tests in debug mode as well as release mode.\r\n\r\n```c#\r\n        private DocumentsWriterPerThread InternalTryCheckOutForFlush(ThreadState perThread)\r\n        {\r\n            if (Debugging.AssertsEnabled)\r\n            {\r\n                // LUCENENET specific - Since we need to mimic the unfair behavior of ReentrantLock, we need to ensure that all threads that enter here hold the lock.\r\n                Debugging.Assert(perThread.IsHeldByCurrentThread);\r\n                Debugging.Assert(Monitor.IsEntered(this));\r\n                Debugging.Assert(perThread.flushPending);\r\n            }\r\n            try\r\n            {\r\n                // LUCENENET specific - We removed the call to perThread.TryLock() and the try-finally below as they are no longer needed.\r\n\r\n                // We are pending so all memory is already moved to flushBytes\r\n                if (perThread.IsInitialized)\r\n                {\r\n                    if (Debugging.AssertsEnabled) Debugging.Assert(perThread.IsHeldByCurrentThread);\r\n                    DocumentsWriterPerThread dwpt;\r\n                    long bytes = perThread.bytesUsed; // do that before\r\n                    // replace!\r\n                    dwpt = perThreadPool.Reset(perThread, closed);\r\n                    if (Debugging.AssertsEnabled) Debugging.Assert(!flushingWriters.ContainsKey(dwpt), \"DWPT is already flushing\");\r\n                    // Record the flushing DWPT to reduce flushBytes in doAfterFlush\r\n                    flushingWriters[dwpt] = bytes;\r\n                    numPending--; // write access synced\r\n                    return dwpt;\r\n                }\r\n                return null;\r\n            }\r\n            finally\r\n            {\r\n                UpdateStallState();\r\n            }\r\n        }\r\n```\r\n\r\nIn these cases, the end user has no control over the conditions that are being checked - they are internal state of `IndexWriter` (and related classes). However, in cases where a value is being checked that is being provided by the outside world, we will need the feature to turn on asserts to ensure `CheckIndex` and the test framework checks what it should for end users.\r\n\r\nThe same can probably be said about many more of the asserts. We should start with `IndexWriter` and its related classes, since the biggest performance impact is there according to the benchmarks.\r\n\r\nI am working on getting a nightly build set up so we can move the burden of testing edge cases and invariants such as these out of the normal workflow. While all of the features in both the test framework and the Azure Pipelines templates are already implemented for nightly builds, some of the tests were designed with longer runs than the 1 hour limit of Azure DevOps in mind, so adjustments to the nightly test limits need to be made to keep it from timing out.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698126843/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698747477","html_url":"https://github.com/apache/lucenenet/pull/349#issuecomment-698747477","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/349","id":698747477,"node_id":"MDEyOklzc3VlQ29tbWVudDY5ODc0NzQ3Nw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-25T06:27:47Z","updated_at":"2020-09-25T06:27:47Z","author_association":"CONTRIBUTOR","body":"Thanks for putting together this PR. We definitely need benchmarks in the master branch. However, what we ought to shoot for are benchmarks that can be run by developers, added to a nightly builds and release builds, and also plan for future expansion to benchmark individual components of individual assemblies. I like the precedent set forth in [NodaTime.Benchmarks](https://github.com/nodatime/nodatime/tree/master/src/NodaTime.Benchmarks).\r\n\r\nA few things to consider:\r\n\r\n1. Since we don't have separate directories for `src` and `tests`, the build scripts rely on naming conventions to determine which assemblies are test projects. Specifically, it relies on the convention `Lucene.Net.Tests.<name>`. We shouldn't use that convention here, as these will be handled differently in the build.\r\n2. We should have a top level directory for `benchmarks` (a sibling of `src`) so we can expand to include benchmarks on each separate assembly (including the test framework). This organization makes it possible to have `Directory.Build.props` and `Directory.Build.targets` files that apply specifically to benchmarks.\r\n3. Within the `benchmarks` folder, we should have a separate `.sln` file that includes all of the main assemblies and benchmarks, but not the tests.\r\n4. Some of the \"tests\" in Lucene are actually benchmarks as they only record the amount of time the operation takes but don't actually have any asserts that can fail. These are wasting time (about 5% of the total) during normal testing with little benefit. We should aim to remove these from the tests and refactor them as benchmarks that run nightly and during releases. Some examples:\r\n   - [TestWordDelimiterFilter::TestPerformance()](https://github.com/apache/lucenenet/blob/ece6bea0a3c98961a77d7060b5615fccefabe725/src/Lucene.Net.Tests.Analysis.Common/Analysis/Miscellaneous/TestWordDelimiterFilter.cs#L35-L49)\r\n   - [TestTeeSinkTokenFilter::Performance()](https://github.com/apache/lucenenet/blob/ece6bea0a3c98961a77d7060b5615fccefabe725/src/Lucene.Net.Tests.Analysis.Common/Analysis/Sinks/TestTeeSinkTokenFilter.cs#L178-L260)\r\n   - [CacheSubSequencePerformanceTest](https://github.com/apache/lucenenet/blob/ece6bea0a3c98961a77d7060b5615fccefabe725/src/Lucene.Net.Tests.Analysis.Phonetic/Language/Bm/CacheSubSequencePerformanceTest.cs)\r\n   - [PhoneticEnginePerformanceTest](https://github.com/apache/lucenenet/blob/ece6bea0a3c98961a77d7060b5615fccefabe725/src/Lucene.Net.Tests.Analysis.Phonetic/Language/Bm/PhoneticEnginePerformanceTest.cs)\r\n   - [TestTermdocPerf](https://github.com/apache/lucenenet/blob/ece6bea0a3c98961a77d7060b5615fccefabe725/src/Lucene.Net.Tests/Index/TestTermdocPerf.cs)\r\n\r\nOf course, a key part of getting this into the build is to set up the instrumentation so the benchmark results are easily available for viewing (ideally without having to download the artifacts). This was dirt simple in TeamCity by including an HTML file as a tab in the portal, but we haven't explored the options yet in Azure DevOps.\r\n\r\nWe are running into a realistic limit of number of projects Visual Studio can load in a reasonable timeframe, so ideally we would keep them in a separate `.sln`. This is the approach that Microsoft takes to manage large projects.\r\n\r\nYou don't need to include all of these changes in this PR, this is just to outline the plan. But could you please set a precedent by putting the benchmarks in a top level `benchmarks` directory and a `Lucene.Net.Benchmarks.sln` file to manage them?\r\n\r\n> If someone with experience with benchmarks in CI sees a flaw in this layout, please do provide your valuable input.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698747477/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698815793","html_url":"https://github.com/apache/lucenenet/pull/347#issuecomment-698815793","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/347","id":698815793,"node_id":"MDEyOklzc3VlQ29tbWVudDY5ODgxNTc5Mw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-25T09:05:54Z","updated_at":"2020-09-25T09:05:54Z","author_association":"CONTRIBUTOR","body":"Maybe a bit discouraging but in a simple benchmark, this doesn't seem to have any positive impact.\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1016 (1909/November2018Update/19H2)\r\nIntel Core i7-6700 CPU 3.40GHz (Skylake), 1 CPU, 8 logical and 4 physical cores\r\n  [Host]     : .NET Framework 4.8 (4.8.4200.0), X86 LegacyJIT\r\n  DefaultJob : .NET Framework 4.8 (4.8.4200.0), X86 LegacyJIT\r\n\r\n\r\n```\r\n|                     Method |       Mean |    Error |   StdDev |\r\n|--------------------------- |-----------:|---------:|---------:|\r\n|                 CacheValue |   320.7 ns |  6.34 ns |  7.30 ns |\r\n|              NonCacheValue |   318.5 ns |  4.74 ns |  4.20 ns |\r\n|    CacheValue_PassToMethod | 6,687.3 ns | 47.91 ns | 40.01 ns |\r\n| NonCacheValue_PassToMethod | 6,640.5 ns | 32.99 ns | 30.86 ns |\r\n\r\n----\r\n\r\n```csharp\r\n   public class Benchmark\r\n    {\r\n\r\n\r\n        [Benchmark]\r\n        public void CacheValue()\r\n        {\r\n            int counter = 0;\r\n            bool cached = ValueSource.Value;\r\n            for (int i = 0; i < 1000; i++)\r\n                if (cached)\r\n                    counter++;\r\n        }\r\n\r\n        [Benchmark]\r\n        public void NonCacheValue()\r\n        {\r\n            int counter = 0;\r\n            for (int i = 0; i < 1000; i++)\r\n                if (ValueSource.Value)\r\n                    counter++;\r\n        }\r\n\r\n        [Benchmark]\r\n        public void CacheValue_PassToMethod()\r\n        {\r\n            bool cached = ValueSource.Value;\r\n            for (int i = 0; i < 100; i++)\r\n                DooWork(cached);\r\n        }\r\n\r\n        [Benchmark]\r\n        public void NonCacheValue_PassToMethod()\r\n        {\r\n            for (int i = 0; i < 100; i++)\r\n                DooWork();\r\n        }\r\n\r\n        public void DooWork(bool workMore)\r\n        {\r\n            int counter = 0;\r\n            for (int i = 0; i < 100; i++)\r\n                if (workMore)\r\n                    counter++;\r\n        } \r\n        \r\n        public void DooWork()\r\n        {\r\n            int counter = 0;\r\n            for (int i = 0; i < 100; i++)\r\n                if (ValueSource.Value)\r\n                    counter++;\r\n        }\r\n    }\r\n```\r\n\r\nObviously benchmarks of the actual code could prove to have different results.\r\n\r\nCaching the boolean flag using a Lazy seems very reasonable.\r\n ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/698815793/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/699440826","html_url":"https://github.com/apache/lucenenet/pull/347#issuecomment-699440826","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/347","id":699440826,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTQ0MDgyNg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-26T06:42:05Z","updated_at":"2020-09-26T06:42:05Z","author_association":"CONTRIBUTOR","body":"@jeme \r\n\r\nBased on the [benchmarks you provided](https://github.com/apache/lucenenet/pull/347#issuecomment-698815793) (thank you), I would say it is pretty clear there isn't a benefit to copying the boolean value from the static field into each function.\r\n\r\n> Caching the boolean flag using a Lazy seems very reasonable.\r\n\r\nMaybe you missed the other benchmarks because they were placed in another thread https://github.com/apache/lucenenet/issues/346#issuecomment-697715665, but the value is being [cached as a static field](https://github.com/apache/lucenenet/blob/ece6bea0a3c98961a77d7060b5615fccefabe725/src/Lucene.Net/Support/Diagnostics/Debugging.cs#L37) already. `SystemProperties` is being lazy-loaded to allow for the user to inject their own `IConfigurationFactory` before it loads. From there, the value is read from the dictionary *once* and cached in a static field the first time `Debugging` is accessed.\r\n\r\nIs your recommendation to use `Lazy` also based on the incorrect assumption that `Debugging.AssertsEnabled` reads the value from the dictionary every time it is read, or is there actually some benefit to using `Lazy` in this instance?\r\n\r\n### Memory Consumption\r\n\r\nWhat is not clear to me is why adding this feature that is disabled in production produces a 23% bigger memory footprint while indexing than when the feature is compiled out using `Debug.Assert()`. \r\n\r\nIn most cases adding this feature is a wash because we are now able to turn off test features in production, but the amount of additional RAM is concerning. I suspect this has something to do with using `Func<string>` as the second parameter of `Debugging.Assert()` - something that was done to prevent strings from being unnecessarily built in cases where the condition parameter is `true`.\r\n\r\nThere are at least 3 things that could be tried to reduce or eliminate this extra hit:\r\n\r\n1. Use string interpolation rather than `+` to build the message string of `Debugging.Assert(bool, Func<string>)`.\r\n2. Change all calls to use the `Debugging.Assert(bool, string)` overload except in 2-3 cases that throw exceptions when the condition is `true`. This will slow down testing for sure, but may improve the situation in production by eliminating the `Func<string>`.\r\n2. Abandon the DRY principle and move the contents of `Debugging.Assert(bool, Func<string>)` inline into each method where it is called (thus eliminating the `Func<string>` variable).\r\n\r\nThoughts?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/699440826/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/699464048","html_url":"https://github.com/apache/lucenenet/pull/347#issuecomment-699464048","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/347","id":699464048,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTQ2NDA0OA==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-26T08:57:35Z","updated_at":"2020-09-26T08:58:50Z","author_association":"CONTRIBUTOR","body":"> Is your recommendation to use `Lazy` also based on the incorrect assumption that `Debugging.AssertsEnabled` reads the value from the dictionary every time it is read, or is there actually some benefit to using `Lazy` in this instance?\r\n\r\nIt was because I miss read the change as if it was a changed property. As such, I read it as a `=>` instead of a `=` - maybe a \"brain autocorrect\" because I would avoid public fields in all cases, so I expected it to be a Property before and now it became a cached Property. Seeing as it was a Field before, The change has little value i guess... I would change it to a property in that case though. So:\r\n\r\n```\r\npublic static bool AssertsEnabled { get; set; }= SystemProperties.GetPropertyAsBoolean(\"assert\", false);\r\n```\r\n\r\n> ### Memory Consumption\r\n> What is not clear to me is why adding this feature that is disabled in production produces a 23% bigger memory footprint while indexing than when the feature is compiled out using `Debug.Assert()`.\r\n> \r\n> In most cases adding this feature is a wash because we are now able to turn off test features in production, but the amount of additional RAM is concerning. I suspect this has something to do with using `Func<string>` as the second parameter of `Debugging.Assert()` - something that was done to prevent strings from being unnecessarily built in cases where the condition parameter is `true`.\r\n> \r\n> There are at least 3 things that could be tried to reduce or eliminate this extra hit:\r\n> \r\n> 1. Use string interpolation rather than `+` to build the message string of `Debugging.Assert(bool, Func<string>)`.\r\n> 2. Change all calls to use the `Debugging.Assert(bool, string)` overload except in 2-3 cases that throw exceptions when the condition is `true`. This will slow down testing for sure, but may improve the situation in production by eliminating the `Func<string>`.\r\n> 3. Abandon the DRY principle and move the contents of `Debugging.Assert(bool, Func<string>)` inline into each method where it is called (thus eliminating the `Func<string>` variable).\r\n> \r\n> Thoughts?\r\n\r\nImmediately I would think that there was a certain expense in using a Func for this as compared to alternatives, but that is really just speculations at this point. But I will see if I can find some time to go poke at it a bit...\r\n\r\nYou said you had access to JetBrains resharper though an Apache free use program, does that include dotMemory? It''s a fairly decent tool for doing memory profiling and it can certainly tell you which objects you have hanging around. It will also allow you to do a run with the flag on, safe a snapshot, then do a run without the flag and compare the two snapshots etc...\r\n\r\n(It will be most straight forward if you can make your testing into a executeable you can run from it)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/699464048/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/699979998","html_url":"https://github.com/apache/lucenenet/pull/347#issuecomment-699979998","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/347","id":699979998,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTk3OTk5OA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-28T12:38:37Z","updated_at":"2020-09-28T12:38:37Z","author_association":"CONTRIBUTOR","body":"> > Is your recommendation to use `Lazy` also based on the incorrect assumption that `Debugging.AssertsEnabled` reads the value from the dictionary every time it is read, or is there actually some benefit to using `Lazy` in this instance?\r\n\r\n> It was because I miss read the change as if it was a changed property. As such, I read it as a `=>` instead of a `=` - maybe a \"brain autocorrect\" because I would avoid public fields in all cases, so I expected it to be a Property before and now it became a cached Property. Seeing as it was a Field before, The change has little value i guess... I would change it to a property in that case though. So:\r\n\r\n> ```\r\n> public static bool AssertsEnabled { get; set; }= SystemProperties.GetPropertyAsBoolean(\"assert\", false);\r\n> ```\r\n\r\nActually, the field was by design to make it as cheap as possible to check the value, ensuring that the compiler has no chance to get the optimizations wrong. \r\n\r\nThe naming convention was such that it would not need to be changed if it were made into a public property someday.\r\n\r\n\r\n> You said you had access to JetBrains resharper though an Apache free use program, does that include dotMemory? It''s a fairly decent tool for doing memory profiling and it can certainly tell you which objects you have hanging around. It will also allow you to do a run with the flag on, safe a snapshot, then do a run without the flag and compare the two snapshots etc...\r\n\r\n> (It will be most straight forward if you can make your testing into a executeable you can run from it)\r\n\r\nThanks for the suggestion. I do have access to dotMemory, and I will give it a shot when I get a chance (unless you beat me to it).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/699979998/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/700340864","html_url":"https://github.com/apache/lucenenet/issues/354#issuecomment-700340864","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/354","id":700340864,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMDM0MDg2NA==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-28T23:46:53Z","updated_at":"2020-09-28T23:46:53Z","author_association":"CONTRIBUTOR","body":"If there's already a faster and more stable implementation with `ConcurrentMergeScheduler`, is there any reason to keep `TaskMergeScheduler`?  Or are you saying that there isn't currently a replacement for `TaskMergeScheduler`?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/700340864/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/700536654","html_url":"https://github.com/apache/lucenenet/issues/354#issuecomment-700536654","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/354","id":700536654,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMDUzNjY1NA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-29T08:27:21Z","updated_at":"2020-09-29T08:27:21Z","author_association":"CONTRIBUTOR","body":"> If there's already a faster and more stable implementation with ConcurrentMergeScheduler, is there any reason to keep TaskMergeScheduler? Or are you saying that there isn't currently a replacement for TaskMergeScheduler?\r\n\r\n- `ConcurrentMergeScheduler` is a direct port from Lucene. \r\n- `TaskMergeScheduler` was only required because `ConcurrentMergeScheduler` didn't compile on .NET Standard 1.x.\r\n\r\nThe only reason to consider keeping `TaskMergeScheduler` is the amount of time that has been invested in it already. That said, I don't plan to invest any more time on it myself, so if we don't have a party willing to make it production ready it will definitely be   excluded from the final release. IMO, there is no reason to hold up the release for a duplicate of something we already have.\r\n\r\nBut if someone were willing to step up and make `TaskMergeScheduler` reliable and more performant than `ConcurrentMergeScheduler`, it would not only be worth keeping but we could potentially have a new default setting.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/700536654/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/701225539","html_url":"https://github.com/apache/lucenenet/pull/347#issuecomment-701225539","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/347","id":701225539,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMTIyNTUzOQ==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-09-30T07:51:55Z","updated_at":"2020-09-30T10:09:15Z","author_association":"CONTRIBUTOR","body":"> Actually, the field was by design to make it as cheap as possible to check the value, ensuring that the compiler has no chance to get the optimizations wrong.\r\n\r\nI am fairly sure it will always be inlined in this case, so I don't think that is a concern.\r\n\r\n> Thanks for the suggestion. I do have access to dotMemory, and I will give it a shot when I get a chance (unless you beat me to it).\r\n\r\nSince I don't have a starting point, there is probably no chance I will beat you do it :D\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/701225539/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/702567422","html_url":"https://github.com/apache/lucenenet/pull/361#issuecomment-702567422","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/361","id":702567422,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMjU2NzQyMg==","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-02T07:11:17Z","updated_at":"2020-10-02T07:11:17Z","author_association":"CONTRIBUTOR","body":"Fine by me.\r\napproved.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/702567422/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/702835688","html_url":"https://github.com/apache/lucenenet/issues/256#issuecomment-702835688","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/256","id":702835688,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMjgzNTY4OA==","user":{"login":"shadowcaptain","id":20810209,"node_id":"MDQ6VXNlcjIwODEwMjA5","avatar_url":"https://avatars.githubusercontent.com/u/20810209?v=4","gravatar_id":"","url":"https://api.github.com/users/shadowcaptain","html_url":"https://github.com/shadowcaptain","followers_url":"https://api.github.com/users/shadowcaptain/followers","following_url":"https://api.github.com/users/shadowcaptain/following{/other_user}","gists_url":"https://api.github.com/users/shadowcaptain/gists{/gist_id}","starred_url":"https://api.github.com/users/shadowcaptain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shadowcaptain/subscriptions","organizations_url":"https://api.github.com/users/shadowcaptain/orgs","repos_url":"https://api.github.com/users/shadowcaptain/repos","events_url":"https://api.github.com/users/shadowcaptain/events{/privacy}","received_events_url":"https://api.github.com/users/shadowcaptain/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-02T16:38:07Z","updated_at":"2020-10-02T16:38:07Z","author_association":"CONTRIBUTOR","body":"The source code for the dotnetcore implementation is here https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/702835688/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/703179724","html_url":"https://github.com/apache/lucenenet/pull/361#issuecomment-703179724","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/361","id":703179724,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMzE3OTcyNA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-04T00:06:42Z","updated_at":"2020-10-04T00:06:42Z","author_association":"CONTRIBUTOR","body":"@shadowcaptain \r\n\r\nThanks for the PR. For future reference, please indicate where and why we have diverged from Lucene 4.8.0's API by leaving a comment prefixed with `// LUCENENET specific -`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/703179724/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/703180922","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-703180922","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":703180922,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMzE4MDkyMg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-04T00:24:26Z","updated_at":"2020-10-04T00:24:26Z","author_association":"CONTRIBUTOR","body":"@amartens181 \r\n\r\nWhile strictly speaking we are supposed to leave the limitations in place of 4.8.0, we are making some exceptions in places where usability is a factor, especially in cases where there is no reasonable way to use inheritance to fix the issue. In this case, I would approve the changes provided the tests all pass and there are no ill effects produced by adding the patch out of order.\r\n\r\nThat being said, we are trying to make as straight of a line as possible to the 4.8.0 release. As such, these \"extra\" changes are something we probably won't make the extra effort to do. However, we will include them if a PR is submitted by the community.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/703180922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704186131","html_url":"https://github.com/apache/lucenenet/issues/305#issuecomment-704186131","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/305","id":704186131,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNDE4NjEzMQ==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-06T10:45:06Z","updated_at":"2020-10-06T10:45:06Z","author_association":"CONTRIBUTOR","body":"Loading types in from non-referenced assemblies are fairly simple in .NET, if they reside in a different location (folder wise) one has to implement some assembly resolution handling, but I have done that many times in the past.\r\n\r\nIn only really gets complicated if we begin to talk about having the loaded assemblies isolated. This is often done to allow for loading and then unloading them again. However since this is a command line then that sounds irrelevant.\r\n\r\nBut I think the Issue lacks more context, this could be some examples or references to documentation of how the Java version works. As well as how do we envision this should work?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704186131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704197007","html_url":"https://github.com/apache/lucenenet/issues/305#issuecomment-704197007","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/305","id":704197007,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNDE5NzAwNw==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-06T11:09:20Z","updated_at":"2020-10-06T11:09:20Z","author_association":"CONTRIBUTOR","body":"For netcore this is really easy and you can unload them. In .NET Framework this is more difficult and you cannot unload them unless you create and destroy custom AppDomains at runtime which is possible but you cannot flow data between the domains unless you are using string serialization or remoting (all ugly). In netcore you just use AssemblyLoadContext, there are samples here https://github.com/dotnet/samples/tree/master/core/tutorials/Unloading (https://github.com/dotnet/samples/blob/master/core/tutorials/Unloading/Host/Program.cs) \r\n\r\nBut the way benchmarkdotnet works is underneath for the execution it dynamically creates a netcore project and compiles it with the references that you are telling it to, it then runs the benchmarks against the compiled .exe output. So by using benchmarkdotnet you are sort of already loading in external assemblies. It's been a while since I looked but you can control how benchmarkdotnet builds it's program. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704197007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704297788","html_url":"https://github.com/apache/lucenenet/issues/305#issuecomment-704297788","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/305","id":704297788,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNDI5Nzc4OA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-06T14:13:47Z","updated_at":"2020-10-06T14:13:47Z","author_association":"CONTRIBUTOR","body":"@jeme \r\n\r\nThanks, you were correct in that the original issue was lacking some context, and I have added more information to better explain the task.\r\n\r\nThe `Lucene.Net.Benchmark` project was designed to work either as a library that users can extend or as an executable that can just be run. The issue crops up in the latter case where we need some sort of a \"plug in\" architecture so the end user can supply their own assembly to run it against. Java has a native feature to do this, but .NET does not.\r\n\r\n@Shazwazza \r\n\r\nAlthough I think that we should look into leveraging BenchmarkDotNet for Lucene.Net.Benchmark at some point, the current incarnation is just a line-by-line port from Java. The Lucene.Net.Benchmark project uses a DSL to control the configuration of a benchmark, including strings that are meant for loading external types.\r\n\r\nSince the commands are essentially run-once I don't believe there will be any issues with \"unloading\" to worry about.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704297788/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704315848","html_url":"https://github.com/apache/lucenenet/issues/305#issuecomment-704315848","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/305","id":704315848,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNDMxNTg0OA==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-06T14:40:31Z","updated_at":"2020-10-06T14:40:31Z","author_association":"CONTRIBUTOR","body":"oh yes my bad, i was confused with the benchmarkdotnet project(s) that we have, this one is different.\r\n\r\n> Since the commands are essentially run-once I don't believe there will be any issues with \"unloading\" to worry about.\r\n\r\nIf its for netcore 3 then AssemblyLoadContext is still the way to do it whether you unload or not. This is a nice post about it https://codetherapist.com/blog/netcore3-plugin-system/ If it's not netcore 3 then you can use Assembly.Load(name) if you want it loaded correctly (with fusion) but then the assembly needs to be in your probing paths (i.e. /bin), else you can load with Assembly.LoadFrom(filename) or Assembly.Load(bytes) but if you do that, the assembly will not be loaded in the same context. This is all different depending on the platform you are running on. In Net Framework this is all super ugly and you need to know about the 3 load contexts: Default, Load-From, No Context, see https://docs.microsoft.com/en-us/dotnet/framework/deployment/best-practices-for-assembly-loading but basically dealing with anything but the Default is a pain and you will almost always need an AppDomain.AssemblyResolve event, but you might get success with LoadFrom\r\n\r\nnetcore has fixed all this nonsense :) so depends on what it needs to run on","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704315848/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704346962","html_url":"https://github.com/apache/lucenenet/issues/305#issuecomment-704346962","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/305","id":704346962,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNDM0Njk2Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-06T15:22:07Z","updated_at":"2020-10-06T15:22:07Z","author_association":"CONTRIBUTOR","body":"Actually, come to think of it, that brings up another potential gap that wasn't previously considered. The `lucene-cli` tool is targeted at .NET Core 3.1 only. This may be an issue if the end user needs to load .NET Framework assemblies into its context in order to benchmark the types within them.\r\n\r\nPotential solutions/workarounds:\r\n\r\n- Don't support .NET Framework in the CLI, require .NET Framework users to compile their DLL as .NET Standard in order to benchmark in .NET Core 3.1 or use the DLL and build their own wrapper CLI for .NET Framework\r\n- Create a separate version of the tool for .NET Framework (possibly even move the benchmark commands to a separate tool)\r\n\r\nI know that in early versions of .NET Core, it was possible to load .NET Framework assemblies with certain conditions/limitation, which could also potentially be explored.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704346962/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704629147","html_url":"https://github.com/apache/lucenenet/issues/305#issuecomment-704629147","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/305","id":704629147,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNDYyOTE0Nw==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-07T00:52:25Z","updated_at":"2020-10-07T00:52:25Z","author_association":"CONTRIBUTOR","body":"> Don't support .NET Framework in the CLI,\r\n\r\nThat would be my vote, I just don't see it worth spending  a whole lot of time for .NET Framework compatibility. If the main project supports it then I think that's enough IMO.\r\n\r\n> I know that in early versions of .NET Core, it was possible to load .NET Framework assemblies with certain conditions/limitation, which could also potentially be explored.\r\n\r\nYep we were exploiting that in our own builds and it sort of still works in netcore 3, however in netcore 3 official support for it has been entirely dropped. Like if you drop a dll into the /bin it will 'work' but i think it really depends on what's in the DLL.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704629147/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704682065","html_url":"https://github.com/apache/lucenenet/issues/364#issuecomment-704682065","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/364","id":704682065,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNDY4MjA2NQ==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-07T04:21:42Z","updated_at":"2020-10-07T04:21:42Z","author_association":"CONTRIBUTOR","body":"_On a side note - the docs building process will need to remain as windows only for now just because docfx 2 is a netframework project._","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/704682065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/705317879","html_url":"https://github.com/apache/lucenenet/pull/358#issuecomment-705317879","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/358","id":705317879,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNTMxNzg3OQ==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-08T04:13:23Z","updated_at":"2020-10-08T04:13:23Z","author_association":"CONTRIBUTOR","body":"cool, will get it live now","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/705317879/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/705320189","html_url":"https://github.com/apache/lucenenet/issues/354#issuecomment-705320189","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/354","id":705320189,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNTMyMDE4OQ==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-08T04:23:28Z","updated_at":"2020-10-08T04:23:28Z","author_association":"CONTRIBUTOR","body":"Sounds like a challenge! I'll tweet it out and see if there's any takers :)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/705320189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/705975452","html_url":"https://github.com/apache/lucenenet/issues/256#issuecomment-705975452","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/256","id":705975452,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNTk3NTQ1Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-09T05:26:19Z","updated_at":"2020-10-09T05:26:19Z","author_association":"CONTRIBUTOR","body":"@shadowcaptain \r\n\r\nThanks. [An attempt](https://github.com/NightOwl888/J2N/tree/feature/conditional-weak-table/src/J2N/Runtime/CompilerServices) has already been made on this. The blocker is the fact that it depends on [DependentHandle](https://github.com/NightOwl888/J2N/blob/feature/conditional-weak-table/src/J2N/Runtime/CompilerServices/DependentHandle.cs) which has native resources.\r\n\r\n`DependentHandle` calls native methods using `[MethodImpl(MethodImplOptions.InternalCall)]`.\r\n\r\n```c#\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static extern IntPtr nInitialize(object primary, object? secondary);\r\n\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static extern object? nGetPrimary(IntPtr dependentHandle);\r\n\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static extern object? nGetPrimaryAndSecondary(IntPtr dependentHandle, out object? secondary);\r\n\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static extern void nSetPrimary(IntPtr dependentHandle, object? primary);\r\n\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static extern void nSetSecondary(IntPtr dependentHandle, object? secondary);\r\n\r\n\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static extern void nFree(IntPtr dependentHandle);\r\n```\r\n\r\n It is not currently known how to translate that into a call that can be done from a 3rd party library such as J2N. Some important questions to answer:\r\n\r\n- Can we assume the native method exists for the current platform, since .NET Standard should \"just work\"?\r\n- Do we need to bundle the native resources in J2N to call them?\r\n- If we need to bundle native resources, do they work on all platforms or do we need separate builds for specific platforms?\r\n\r\nNote that `[MethodImpl(MethodImplOptions.InternalCall)]` doesn't exist on .NET Standard 1.x, but it is probably time to drop support for that target, anyway.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/705975452/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/706313938","html_url":"https://github.com/apache/lucenenet/issues/362#issuecomment-706313938","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/362","id":706313938,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNjMxMzkzOA==","user":{"login":"Semirk0","id":45509630,"node_id":"MDQ6VXNlcjQ1NTA5NjMw","avatar_url":"https://avatars.githubusercontent.com/u/45509630?v=4","gravatar_id":"","url":"https://api.github.com/users/Semirk0","html_url":"https://github.com/Semirk0","followers_url":"https://api.github.com/users/Semirk0/followers","following_url":"https://api.github.com/users/Semirk0/following{/other_user}","gists_url":"https://api.github.com/users/Semirk0/gists{/gist_id}","starred_url":"https://api.github.com/users/Semirk0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Semirk0/subscriptions","organizations_url":"https://api.github.com/users/Semirk0/orgs","repos_url":"https://api.github.com/users/Semirk0/repos","events_url":"https://api.github.com/users/Semirk0/events{/privacy}","received_events_url":"https://api.github.com/users/Semirk0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-09T17:38:29Z","updated_at":"2020-10-09T17:38:29Z","author_association":"CONTRIBUTOR","body":"Can I take a look at this?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/706313938/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/706318995","html_url":"https://github.com/apache/lucenenet/issues/362#issuecomment-706318995","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/362","id":706318995,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNjMxODk5NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-09T17:48:29Z","updated_at":"2020-10-09T17:48:29Z","author_association":"CONTRIBUTOR","body":"Sure. I have assigned the issue to you. Just submit a PR when the changes are complete, and we would be happy to accept it.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/706318995/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/707744146","html_url":"https://github.com/apache/lucenenet/issues/365#issuecomment-707744146","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/365","id":707744146,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzc0NDE0Ng==","user":{"login":"joneskj55","id":20748598,"node_id":"MDQ6VXNlcjIwNzQ4NTk4","avatar_url":"https://avatars.githubusercontent.com/u/20748598?v=4","gravatar_id":"","url":"https://api.github.com/users/joneskj55","html_url":"https://github.com/joneskj55","followers_url":"https://api.github.com/users/joneskj55/followers","following_url":"https://api.github.com/users/joneskj55/following{/other_user}","gists_url":"https://api.github.com/users/joneskj55/gists{/gist_id}","starred_url":"https://api.github.com/users/joneskj55/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joneskj55/subscriptions","organizations_url":"https://api.github.com/users/joneskj55/orgs","repos_url":"https://api.github.com/users/joneskj55/repos","events_url":"https://api.github.com/users/joneskj55/events{/privacy}","received_events_url":"https://api.github.com/users/joneskj55/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-13T13:37:35Z","updated_at":"2020-10-13T13:37:35Z","author_association":"CONTRIBUTOR","body":"I'd like to tackle this.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/707744146/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/708058355","html_url":"https://github.com/apache/lucenenet/issues/365#issuecomment-708058355","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/365","id":708058355,"node_id":"MDEyOklzc3VlQ29tbWVudDcwODA1ODM1NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-13T23:11:29Z","updated_at":"2020-10-13T23:11:29Z","author_association":"CONTRIBUTOR","body":"@joneskj55 - Great. I have assigned the issue to you.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/708058355/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/708676417","html_url":"https://github.com/apache/lucenenet/issues/296#issuecomment-708676417","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/296","id":708676417,"node_id":"MDEyOklzc3VlQ29tbWVudDcwODY3NjQxNw==","user":{"login":"willson556","id":239173,"node_id":"MDQ6VXNlcjIzOTE3Mw==","avatar_url":"https://avatars.githubusercontent.com/u/239173?v=4","gravatar_id":"","url":"https://api.github.com/users/willson556","html_url":"https://github.com/willson556","followers_url":"https://api.github.com/users/willson556/followers","following_url":"https://api.github.com/users/willson556/following{/other_user}","gists_url":"https://api.github.com/users/willson556/gists{/gist_id}","starred_url":"https://api.github.com/users/willson556/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willson556/subscriptions","organizations_url":"https://api.github.com/users/willson556/orgs","repos_url":"https://api.github.com/users/willson556/repos","events_url":"https://api.github.com/users/willson556/events{/privacy}","received_events_url":"https://api.github.com/users/willson556/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-14T21:42:52Z","updated_at":"2020-10-14T21:45:00Z","author_association":"NONE","body":"I am able to reliably reproduce with one of my datasets but I'm not sure if I could write a test to fail. I'm running on .NET Core/x64 with 4.8.0-beta00012.\r\n\r\nSimilar stack trace to everyone after OP:\r\n```\r\n   at Lucene.Net.Util.Automaton.UTF32ToUTF8.Convert(Automaton utf32) \r\n   at Lucene.Net.Util.Automaton.CompiledAutomaton..ctor(Automaton automaton, Nullable`1 finite, Boolean simplify) \r\n   at Lucene.Net.Search.FuzzyTermsEnum.InitAutomata(Int32 maxDistance) \r\n   at Lucene.Net.Search.FuzzyTermsEnum.GetAutomatonEnum(Int32 editDistance, BytesRef lastTerm) \r\n   at Lucene.Net.Search.FuzzyTermsEnum.MaxEditDistanceChanged(BytesRef lastTerm, Int32 maxEdits, Boolean init) \r\n   at Lucene.Net.Search.FuzzyTermsEnum..ctor(Terms terms, AttributeSource atts, Term term, Single minSimilarity, Int32 prefixLength, Boolean transpositions) \r\n   at Lucene.Net.Search.FuzzyQuery.GetTermsEnum(Terms terms, AttributeSource atts) \r\n   at Lucene.Net.Search.MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery query, Terms terms, AttributeSource atts) \r\n   at Lucene.Net.Search.TermCollectingRewrite`1.CollectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) \r\n   at Lucene.Net.Search.TopTermsRewrite`1.Rewrite(IndexReader reader, MultiTermQuery query) \r\n   at Lucene.Net.Search.MultiTermQuery.Rewrite(IndexReader reader) \r\n   at Lucene.Net.Search.BooleanQuery.Rewrite(IndexReader reader) \r\n   at Lucene.Net.Search.IndexSearcher.Rewrite(Query original) \r\n   at Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query query) \r\n   at Lucene.Net.Search.IndexSearcher.Search(Query query, Filter filter, Int32 n) \r\n   at Lucene.Net.Search.IndexSearcher.Search(Query query, Int32 n) \r\n```\r\nUsing this analyzer (I'm just starting to come up to speed with Lucene so I'm not sure the arrangement of filters actually makes any sense):\r\n```c#\r\npublic class NGramAnalyzer : Analyzer\r\n{\r\n    private readonly LuceneVersion version;\r\n    private readonly int minGram;\r\n    private readonly int maxGram;\r\n\r\n    public NGramAnalyzer(LuceneVersion version, int minGram = 2, int maxGram = 8)\r\n    {\r\n        this.version = version;\r\n        this.minGram = minGram;\r\n        this.maxGram = maxGram;\r\n    }\r\n\r\n    /// <inheritdoc />\r\n    protected override TextReader InitReader(string fieldName, TextReader reader)\r\n    {\r\n        var charMap = new NormalizeCharMap.Builder();\r\n        charMap.Add(\"_\", \" \");\r\n        return new MappingCharFilter(charMap.Build(), reader);\r\n    }\r\n\r\n    /// <inheritdoc />\r\n    protected override TokenStreamComponents CreateComponents(string fieldName, TextReader reader)\r\n    {\r\n        // Splits words at punctuation characters, removing punctuation.\r\n        // Splits words at hyphens, unless there's a number in the token...\r\n        // Recognizes email addresses and internet hostnames as one token.\r\n        var tokenizer = new StandardTokenizer(version, reader);\r\n\r\n        TokenStream filter = new StandardFilter(version, tokenizer);\r\n\r\n        // Normalizes token text to lower case.\r\n        filter = new LowerCaseFilter(version, filter);\r\n\r\n        // Removes stop words from a token stream.\r\n        filter = new StopFilter(version, filter, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\r\n\r\n        filter = new EnglishMinimalStemFilter(filter);\r\n\r\n        filter = new NGramTokenFilter(version, filter, minGram, maxGram);\r\n        return new TokenStreamComponents(tokenizer, filter);\r\n    }\r\n}\r\n```\r\n\r\nSetup is then:\r\n\r\n```c#\r\nvar indexStore = new RAMDirectory();\r\nvar indexConfig = new IndexWriterConfig(Version, Analyzer);\r\nindexWriter = new IndexWriter(indexStore, indexConfig);\r\ninitialIndexingTask = Task.Run(() =>\r\n                                              {\r\n                                                  var stopwatch = Stopwatch.StartNew();\r\n                                                  indexWriter.AddDocuments(collection.Select(GetAndSubscribeToDocument));\r\n                                                  indexWriter.Commit();\r\n                                                  Debug.WriteLine(@$\"{typeof(TDocument)} Indexing: {stopwatch.ElapsedMilliseconds}ms\");\r\n                                              });\r\n```\r\n\r\nSearching after initial indexing is complete is done with:\r\n\r\n```c#\r\nusing var reader = DirectoryReader.Open(indexWriter.Directory);\r\nvar searcher = new IndexSearcher(reader);\r\n\r\nQuery? parsedQuery;\r\ntry\r\n{\r\n    var queryParser = new MultiFieldQueryParser(Version, DefaultSearchFields, Analyzer);\r\n    var terms = new HashSet<Term>();\r\n    queryParser.Parse(query).Rewrite(reader).ExtractTerms(terms);\r\n\r\n    var boolQuery = new BooleanQuery();\r\n    terms.ForEach(t =>\r\n                    {\r\n                        boolQuery.Add(new FuzzyQuery(t), Occur.SHOULD);\r\n                        boolQuery.Add(new WildcardQuery(t), Occur.SHOULD);\r\n                    });\r\n\r\n    parsedQuery = boolQuery;\r\n}\r\ncatch (Exception)\r\n{\r\n    // TODO: User feedback\r\n    return new (TDocument doc, float score)[0];\r\n}\r\n\r\nvar hits = searcher.Search(parsedQuery, resultLimit);\r\n```\r\n\r\nI've archived off the dataset and code so that I can hopefully go back and gather more data to help troubleshoot. It's worth noting that in my current repro case, I have 4 separate instances of this (RAMDirectory, IndexWriter, and Reader+Searcher) all running at the same time (and with _nearly_ identical datasets). A quick look through the code up and down the stack trace didn't show me anything in Lucene that was obviously shared between those instances that could be the culprit.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/708676417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/708721094","html_url":"https://github.com/apache/lucenenet/issues/296#issuecomment-708721094","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/296","id":708721094,"node_id":"MDEyOklzc3VlQ29tbWVudDcwODcyMTA5NA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-14T23:55:47Z","updated_at":"2020-10-14T23:55:47Z","author_association":"CONTRIBUTOR","body":"@willson556 \r\n\r\nThanks for the info.\r\n\r\nIf a test is too much to ask, could you distill this down to a console app using the failing data set and put it in a repo to share?\r\n\r\nIf the data is sensitive, do note that both [Azure DevOps](https://azure.microsoft.com/en-us/services/devops/) and [BitBucket](https://bitbucket.org/) allow you to create free private repos that you can then share by invitation. Just use the email address in [my GitHub profile](https://github.com/NightOwl888).\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/708721094/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/709546507","html_url":"https://github.com/apache/lucenenet/issues/296#issuecomment-709546507","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/296","id":709546507,"node_id":"MDEyOklzc3VlQ29tbWVudDcwOTU0NjUwNw==","user":{"login":"willson556","id":239173,"node_id":"MDQ6VXNlcjIzOTE3Mw==","avatar_url":"https://avatars.githubusercontent.com/u/239173?v=4","gravatar_id":"","url":"https://api.github.com/users/willson556","html_url":"https://github.com/willson556","followers_url":"https://api.github.com/users/willson556/followers","following_url":"https://api.github.com/users/willson556/following{/other_user}","gists_url":"https://api.github.com/users/willson556/gists{/gist_id}","starred_url":"https://api.github.com/users/willson556/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willson556/subscriptions","organizations_url":"https://api.github.com/users/willson556/orgs","repos_url":"https://api.github.com/users/willson556/repos","events_url":"https://api.github.com/users/willson556/events{/privacy}","received_events_url":"https://api.github.com/users/willson556/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-15T19:34:54Z","updated_at":"2020-10-15T19:35:05Z","author_association":"NONE","body":"> If a test is too much to ask, could you distill this down to a console app using the failing data set and put it in a repo to share?\r\n\r\nYeah, I should be able to get that to you by the end of the week. Thanks for the prompt response!\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/709546507/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/709671340","html_url":"https://github.com/apache/lucenenet/issues/296#issuecomment-709671340","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/296","id":709671340,"node_id":"MDEyOklzc3VlQ29tbWVudDcwOTY3MTM0MA==","user":{"login":"willson556","id":239173,"node_id":"MDQ6VXNlcjIzOTE3Mw==","avatar_url":"https://avatars.githubusercontent.com/u/239173?v=4","gravatar_id":"","url":"https://api.github.com/users/willson556","html_url":"https://github.com/willson556","followers_url":"https://api.github.com/users/willson556/followers","following_url":"https://api.github.com/users/willson556/following{/other_user}","gists_url":"https://api.github.com/users/willson556/gists{/gist_id}","starred_url":"https://api.github.com/users/willson556/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willson556/subscriptions","organizations_url":"https://api.github.com/users/willson556/orgs","repos_url":"https://api.github.com/users/willson556/repos","events_url":"https://api.github.com/users/willson556/events{/privacy}","received_events_url":"https://api.github.com/users/willson556/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-16T01:13:11Z","updated_at":"2020-10-16T01:13:11Z","author_association":"NONE","body":"@NightOwl888 Repo is posted and I just invited you to it. The console app prompts you to enter a query. The suggested query provided in the prompt fails nearly every time for me.\r\n\r\nThanks again!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/709671340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711039054","html_url":"https://github.com/apache/lucenenet/pull/369#issuecomment-711039054","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/369","id":711039054,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTAzOTA1NA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-17T16:23:11Z","updated_at":"2020-10-17T16:23:11Z","author_association":"CONTRIBUTOR","body":"Thanks. The color scheme looks great.\r\n\r\n## Build\r\n\r\nWhen running the website build script, it is no longer processing all of the tags correctly so the home page looks like this:\r\n\r\n![image](https://user-images.githubusercontent.com/1538288/96346665-3f366d80-10c7-11eb-9f0a-310cbe63c7b1.png)\r\n\r\nDocFx doesn't process markdown files that contain plain HTML (`index.md`, `issue-tracker.md`, etc). I confirmed this by removing the `span` from `index.md`. However, that only fixes the home page. When the `span` is removed from other pages, the ribbon is no longer visible.\r\n\r\nI don't have a lot of experience with DocFx, but I believe that instead of putting the `span` tag in Markdown, you need to put it inside a partial file (for example,  `\\websites\\site\\lucenenet\\partials\\head.tmpl.partial` and `\\websites\\site\\lucenenet\\partials\\head.tmpl.partial`). I believe in this case you may need to generate an additional `.partial` file to put the HTML into the body of every page, rather than in the header. There is a [quick guide to customizing a docfx site](https://www.cazzulino.com/customize-docfx.html), or if you need more detailed info, I suggest looking at the [DocFx Manual](https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html).\r\n\r\n@Shazwazza - Can you provide some additional insights?\r\n\r\n## Layout\r\n\r\nOn the 2 largest resolution viewports, the ribbon overlaps the rightmost menu item when resizing the browser. Could we perhaps add some padding to the right side to keep all of the menu items from being hidden?\r\n\r\n![image](https://user-images.githubusercontent.com/1538288/96347735-dc94a000-10cd-11eb-94ff-f945348c774f.png)\r\n![image](https://user-images.githubusercontent.com/1538288/96347742-e6b69e80-10cd-11eb-8af8-c9244e0a0e44.png)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711039054/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711044655","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-711044655","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":711044655,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTA0NDY1NQ==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-17T16:49:51Z","updated_at":"2020-10-17T16:49:51Z","author_association":"CONTRIBUTOR","body":"@NightOwl888  I'm reviewing my previous benchmarks on our usage of Lucene today, and I think my initial conclusion on Debugging.AssertsEnabled being the cause of the \"slowness\" of FixedBitSet.Set / Get is actually incorrect.\r\n\r\nUsing dotMemory now to measure memory allocations, one can clearly see that there is a lambda capture being allocated on every call to the FixedBitSet.Set / Get methods.\r\n![image](https://user-images.githubusercontent.com/8791811/96348382-9d078d00-10a8-11eb-8f0c-afb7dfdc7ea5.png)\r\n\r\nThis can also be seen on [SharpLab](https://sharplab.io/#v2:D4AQTAjAsAUCDMACEEBsyyICIFMBGArgOZECWAdkYrAN6yIPJIrp4D2bANogIIDOfHACcALnwCi5AIZ5OOACYBueoxUMEyNMgAsvAcJEAKdl0QBjNuXmkRpSwBpkAVgA8AZRFCKRAHyIAtjgCUkQ4AOI45MJSImxCAJRqiHQwjGnUqYwAvrA5MLCwGuCIAGKkAB4KAEI2bjgitEkUIsLS3EI4UvKWnACeiJyWRADaALqIeDZ8ypkMza1S7Z3d5H2IzYjkBP41YjNp80JtiB1dPf0bW/4A6nHy00lJRbp1RhsU8jjlibPJSQcAM0QhlwhBI3gAdPxBKIJNJZAp4th8MQyJQofpRIYPl9ED4ALyIAAMiAAZKT1lZcS5NttdnxHIYkfi/AAiHHlfGsxAAakpn3KvMQrMcV3pXKFYqm8X26Tm5BEiAA7ncAHLbRCEjl4vyoRSIAD0BsQ1gAbohUNp/owNpNFVqqYKKUTyvAAfqjQE2PILVbfmlBpQJjZ/FI+ABrTWICAAGUQLhpdtlcrtfGGKqE8nV/nGwEJdtDEeTiCyqhgWSAA) if we look at the decompiled C# code:\r\n\r\n`````csharp\r\npublic class FixedBitSet\r\n{\r\n    [CompilerGenerated]\r\n    private sealed class <>c__DisplayClass3_0\r\n    {\r\n        public int index;\r\n\r\n        public FixedBitSet <>4__this;\r\n\r\n        internal string <Set>b__0()\r\n        {\r\n            return \"index=\" + index + \", numBits=\" + <>4__this.numBits;\r\n        }\r\n    }\r\n\r\n    internal readonly long[] bits;\r\n\r\n    internal readonly int numBits;\r\n\r\n    internal readonly int numWords;\r\n\r\n    public void Set(int index)\r\n    {\r\n        <>c__DisplayClass3_0 <>c__DisplayClass3_ = new <>c__DisplayClass3_0();    <------ unnecessary allocation, probably due to the capture of numBits\r\n        <>c__DisplayClass3_.index = index;\r\n        <>c__DisplayClass3_.<>4__this = this;\r\n        if (Debugging.AssertsEnabled)\r\n        {\r\n            Debugging.Assert(<>c__DisplayClass3_.index >= 0 && <>c__DisplayClass3_.index < numBits, new Func<string>(<>c__DisplayClass3_.<Set>b__0));\r\n        }\r\n        int num = <>c__DisplayClass3_.index >> 6;\r\n        int num2 = <>c__DisplayClass3_.index & 0x3F;\r\n        long num3 = 1L << num2;\r\n        bits[num] |= num3;\r\n    }\r\n}\r\n`````\r\n\r\n\r\n@NightOwl888 I'll push a pull request with only the fix for this asap\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711044655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711047250","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-711047250","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":711047250,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTA0NzI1MA==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-17T17:01:08Z","updated_at":"2020-10-17T17:01:08Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 : here is the proposed change for this case: https://github.com/apache/lucenenet/pull/372\r\n\r\nWould it be fine to just remove this overload of Debugging.Assert completely?\r\nI've the impression this is probably happening in many other places in the codebase. \r\nOn a quick glance, there are > 300 usages of this method, and I think it is only truly save the allocation of a string when running with Debugging.Assert = true.\r\n\r\n![image](https://user-images.githubusercontent.com/8791811/96348670-ca553a80-10aa-11eb-963e-1ab6f685214e.png)\r\n\r\nWe could also change to use something similar to how [ZLogger](https://github.com/Cysharp/ZLogger) implemented the zero allocation methods, by just having a couple of different overloads of Debugging.Assert with generic parameter types, and a call to string.Format()\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711047250/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711055952","html_url":"https://github.com/apache/lucenenet/issues/261#issuecomment-711055952","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/261","id":711055952,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTA1NTk1Mg==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-17T17:46:56Z","updated_at":"2020-10-17T17:46:56Z","author_association":"CONTRIBUTOR","body":"Two changes from what I noticed while benchmarking Lucene: #370 and #372 \r\nWorking now on a better replace for Debugging.Assert that does not depend a delegate here: #373","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711055952/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711056423","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-711056423","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":711056423,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTA1NjQyMw==","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-17T17:50:32Z","updated_at":"2020-10-17T17:50:32Z","author_association":"CONTRIBUTOR","body":"looks good, this will save allocations.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711056423/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711056610","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-711056610","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":711056610,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTA1NjYxMA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-17T17:51:50Z","updated_at":"2020-10-17T17:51:50Z","author_association":"CONTRIBUTOR","body":"> I think it is only truly save the allocation of a string when running with Debugging.Assert = true.\r\n\r\nCorrect. But if the application is running correctly, building the string will never occur. The string should only be built when there is an error. Building the string on every call and then discarding it slows down the tests.\r\n\r\n> Would it be fine to just remove this overload of Debugging.Assert completely?\r\n\r\nWell, no because there are 2-3 cases where exceptions will be thrown when trying to build the string in the `true` case. I am not sure if the comments that indicate which calls to `Debugging.Assert` fail randomly still exist, so you might have to go back before #326 in the commit history to find them. However, I don't object to changing the ones that don't throw exceptions when building the string to doing it inline. \r\n\r\nI would prefer a better solution if there is one - in Java, the string is only built in the case there is a failure, and it would be best to duplicate that so we don't have to deal with these failure cases. However, in cases where performance is being significantly affected in production, we can call the overload without the lambda.\r\n\r\nFrankly, I think the most performant solution would be just to eliminate the call to `Debugging.Assert` and put the code inline.\r\n\r\n```c#\r\n// Before\r\nif (Debugging.AssertsEnabled) Debugging.Assert(outputLen > 0, () => \"output contains empty string: \" + scratchChars);\r\n\r\n// After\r\nif (Debugging.AssertsEnabled && !(outputLen > 0)) throw new AssertionException($\"output contains empty string: {scratchChars}\");\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711056610/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711057235","html_url":"https://github.com/apache/lucenenet/pull/369#issuecomment-711057235","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/369","id":711057235,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTA1NzIzNQ==","user":{"login":"joneskj55","id":20748598,"node_id":"MDQ6VXNlcjIwNzQ4NTk4","avatar_url":"https://avatars.githubusercontent.com/u/20748598?v=4","gravatar_id":"","url":"https://api.github.com/users/joneskj55","html_url":"https://github.com/joneskj55","followers_url":"https://api.github.com/users/joneskj55/followers","following_url":"https://api.github.com/users/joneskj55/following{/other_user}","gists_url":"https://api.github.com/users/joneskj55/gists{/gist_id}","starred_url":"https://api.github.com/users/joneskj55/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joneskj55/subscriptions","organizations_url":"https://api.github.com/users/joneskj55/orgs","repos_url":"https://api.github.com/users/joneskj55/repos","events_url":"https://api.github.com/users/joneskj55/events{/privacy}","received_events_url":"https://api.github.com/users/joneskj55/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-17T17:56:03Z","updated_at":"2020-10-17T17:56:03Z","author_association":"CONTRIBUTOR","body":"Ok thanks! I am able to build now so I can actually see my changes. I'll get this fixed and add another commit.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711057235/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711058887","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-711058887","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":711058887,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTA1ODg4Nw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-17T18:07:17Z","updated_at":"2020-10-17T18:07:17Z","author_association":"CONTRIBUTOR","body":"This looks like a pretty good way to accomplish the best performance both in production and in tests.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711058887/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711128543","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-711128543","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":711128543,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTEyODU0Mw==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-18T07:24:59Z","updated_at":"2020-10-18T07:24:59Z","author_association":"CONTRIBUTOR","body":"Think the only problem with that is that the JIT usually won't inline methods with a throw expression.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711128543/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711131915","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-711131915","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":711131915,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTEzMTkxNQ==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-18T08:01:20Z","updated_at":"2020-10-18T08:01:20Z","author_association":"CONTRIBUTOR","body":"But good point about exceptions when building the string. I'll try to only do the simple cases in a first pass (i.e. printing int values, etc) and leave the callback approach for the others for now","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711131915/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711132102","html_url":"https://github.com/apache/lucenenet/issues/370#issuecomment-711132102","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/370","id":711132102,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTEzMjEwMg==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-18T08:03:10Z","updated_at":"2020-10-18T08:03:10Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 pushed the PR yesterday, #371, let me know if ok or should change something","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711132102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711144397","html_url":"https://github.com/apache/lucenenet/issues/346#issuecomment-711144397","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/346","id":711144397,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMTE0NDM5Nw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-18T09:58:23Z","updated_at":"2020-10-18T09:59:58Z","author_association":"CONTRIBUTOR","body":"Just to throw a sort of Nuclear option into the mix (And perhaps for some, a bit of a scary option as well), It would to some degree be possible to utilize AOP to actually inject code directly into the existing code at runtime. It has a small performance penalty (But I have not tested it in comparison to the design there is already in place, only made a Clean vs. AOP'ed method test), but for at least some of the examples here it would not be noticeable.\r\n\r\nIt is a bit of a challenge for methods where the use of \"Debugging\" does not happen right at the beginning or the end, something that certainly has multiple solutions, but finding one where we can safely say it's \"not just there\" for testing could be difficult in some cases.\r\n\r\nIf we take a really simple example with harmony:\r\n----\r\n```\r\n    public class TargetClass\r\n    {\r\n        public void TargetMethod()\r\n        {\r\n            long i = 1;\r\n            while (i < int.MaxValue)\r\n                i += i;\r\n        }\r\n    }\r\n\r\n    [HarmonyPatch(typeof(TargetClass))]\r\n    [HarmonyPatch(nameof(TargetClass.TargetMethod))]\r\n    public class Patch\r\n    {\r\n        public static void Prefix()\r\n        {\r\n            // Noop, just the cost of attaching it is tested.\r\n        }\r\n    }\r\n```\r\n----\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18362.1082 (1903/May2019Update/19H1)\r\nIntel Core i9-7900X CPU 3.30GHz (Kaby Lake), 1 CPU, 20 logical and 10 physical cores\r\n.NET Core SDK=5.0.100-rc.1.20452.10\r\n  [Host]     : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  DefaultJob : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n\r\n\r\n```\r\n|    Method |      Mean |     Error |    StdDev |\r\n|---------- |----------:|----------:|----------:|\r\n| BeforeAOP |  9.595 ns | 0.0639 ns | 0.0598 ns |\r\n|  AfterAOP | 10.533 ns | 0.1100 ns | 0.1029 ns |\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/711144397/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712011151","html_url":"https://github.com/apache/lucenenet/pull/374#issuecomment-712011151","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/374","id":712011151,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjAxMTE1MQ==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T10:33:02Z","updated_at":"2020-10-19T10:33:02Z","author_association":"CONTRIBUTOR","body":"Hi @joneskj55 thanks for the effort so far!\r\n\r\nWe'll want to put the `<span>` within the docfx html template files instead of coded into the .md files so that its just in a single place.  DocFx has a template engine that overrides the default implementation. In the case of this website we don't have an override html page for the normal pages so we'll have to create one. You can export the built in template system to see all of the files used by doing this: https://dotnet.github.io/docfx/tutorial/walkthrough/advanced_walkthrough.html#export-the-default-template. \r\n\r\nI think the template file used to render all of the standard pages is `conceptual.html.primary.tmpl` so you can copy that file in from the exported templates into the `/websites/site/lucenetemplate` and this will 'override' the default implementation. From there you can customize the html however you want so you won't have to copy the `<span>` tag to each .md page (which should only contain markdown) and just have this in one single spot.\r\n\r\nLet me know if you have any questions, thanks!\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712011151/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712101833","html_url":"https://github.com/apache/lucenenet/pull/374#issuecomment-712101833","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/374","id":712101833,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjEwMTgzMw==","user":{"login":"joneskj55","id":20748598,"node_id":"MDQ6VXNlcjIwNzQ4NTk4","avatar_url":"https://avatars.githubusercontent.com/u/20748598?v=4","gravatar_id":"","url":"https://api.github.com/users/joneskj55","html_url":"https://github.com/joneskj55","followers_url":"https://api.github.com/users/joneskj55/followers","following_url":"https://api.github.com/users/joneskj55/following{/other_user}","gists_url":"https://api.github.com/users/joneskj55/gists{/gist_id}","starred_url":"https://api.github.com/users/joneskj55/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joneskj55/subscriptions","organizations_url":"https://api.github.com/users/joneskj55/orgs","repos_url":"https://api.github.com/users/joneskj55/repos","events_url":"https://api.github.com/users/joneskj55/events{/privacy}","received_events_url":"https://api.github.com/users/joneskj55/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T11:46:52Z","updated_at":"2020-10-19T11:46:52Z","author_association":"CONTRIBUTOR","body":"@Shazwazza will do, thanks! ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712101833/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712167372","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-712167372","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":712167372,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjE2NzM3Mg==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T13:45:53Z","updated_at":"2020-10-19T13:45:53Z","author_association":"CONTRIBUTOR","body":"@eladmarg @NightOwl888 think I'm done with the changes, for reviewing, worth checking just the final diff against master as I did some cleanup to make the final diff smaller.\r\nThere should be no logic changes now, and this should work also in the case where generating the message would throw if the assert is false.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712167372/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712233022","html_url":"https://github.com/apache/lucenenet/issues/375#issuecomment-712233022","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/375","id":712233022,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjIzMzAyMg==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T15:10:08Z","updated_at":"2020-10-19T15:10:08Z","author_association":"CONTRIBUTOR","body":"From a quick glance, this seems to be only happening for the IndexOptions enum:\r\n\r\n![image](https://user-images.githubusercontent.com/8791811/96469797-e7fedd00-122d-11eb-893e-d2eb4811a33f.png)\r\n\r\n![Uploading image.png…]()\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712233022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712308763","html_url":"https://github.com/apache/lucenenet/pull/376#issuecomment-712308763","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/376","id":712308763,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjMwODc2Mw==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T17:14:33Z","updated_at":"2020-10-19T17:14:33Z","author_association":"CONTRIBUTOR","body":"Fix for #375 ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712308763/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712395372","html_url":"https://github.com/apache/lucenenet/pull/376#issuecomment-712395372","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/376","id":712395372,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjM5NTM3Mg==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T19:33:25Z","updated_at":"2020-10-19T19:33:25Z","author_association":"CONTRIBUTOR","body":"That makes the find & replace a bit more challenging :)\r\nBut will do the changes and get back to you tomorrow with an updated version!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712395372/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712395768","html_url":"https://github.com/apache/lucenenet/pull/376#issuecomment-712395768","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/376","id":712395768,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjM5NTc2OA==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T19:34:17Z","updated_at":"2020-10-19T19:34:17Z","author_association":"CONTRIBUTOR","body":"By the way, just went for the odd name because adding an extension method with the name of the existing enum.CompareTo didn't change anything, the boxing version of the method was still being called...","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712395768/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712397690","html_url":"https://github.com/apache/lucenenet/pull/347#issuecomment-712397690","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/347","id":712397690,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjM5NzY5MA==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T19:38:14Z","updated_at":"2020-10-19T19:38:14Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I think we can close this PR if you merge the other #372 PR that fixes the actual issue that was observed here, that was due to the capturing of a class variable in the lambda...","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712397690/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712398732","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-712398732","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":712398732,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjM5ODczMg==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-19T19:40:27Z","updated_at":"2020-10-19T19:40:27Z","author_association":"CONTRIBUTOR","body":"This closes #346 as well...","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/712398732/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/713533637","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-713533637","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":713533637,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMzUzMzYzNw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-21T12:29:12Z","updated_at":"2020-10-21T12:32:10Z","author_association":"CONTRIBUTOR","body":"I am trying to understand the design choices here, it seems somewhat messy (No offense).\r\n\r\nYou have implemented a \"ShouldAssert\", which internally checks the flag AssertsEnabled and then the boolean passed, yet in many places we see:\r\n```\r\nif(Debugging.AssertsEnabled && Debugging.ShouldAssert(*** Some Check ***)){}\r\n```\r\n\r\nWhich means we run the check against `Debugging.AssertsEnabled` twice... (while its cheap, it's still redundant)\r\nWas the intention not to have the Debugging.AssertsEnabled checked outside?...\r\nIf not, then I fail to see the reasoning behind the ShouldAssert method alltogether and I think it would be cleaner to:\r\n```\r\nif(Debugging.AssertsEnabled && *** Some Check ***) Debugging.Throw(\"message\")\r\n```\r\n\r\nAlso note that if if the aim here is to increase performance and reduce allocations, something indicates that string interpolation may be a better candidate than string format for this particular design. Obviously string format would have it's advantages if we were just to rewrite the design by @NightOwl888 from taking a lambda to take a string format and then args.\r\n\r\n----\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1082 (1909/November2018Update/19H2)\r\nIntel Core i7-6700 CPU 3.40GHz (Skylake), 1 CPU, 8 logical and 4 physical cores\r\n  [Host]     : .NET Framework 4.8 (4.8.4220.0), X86 LegacyJIT\r\n  DefaultJob : .NET Framework 4.8 (4.8.4220.0), X86 LegacyJIT\r\n```\r\n|              Method | Data |       Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------------- |----- |-----------:|---------:|---------:|-------:|------:|------:|----------:|\r\n|              Format |   42 | 1,813.3 ns | 31.65 ns | 41.16 ns | 0.3090 |     - |     - |    1298 B |\r\n|      FormatExplicit |   42 | 1,214.2 ns | 23.00 ns | 25.56 ns | 0.0858 |     - |     - |     361 B |\r\n|         Interpolate |   42 | 1,777.4 ns | 33.33 ns | 57.49 ns | 0.3090 |     - |     - |    1298 B |\r\n| InterpolateExplicit |   42 |   562.2 ns |  6.39 ns |  5.66 ns | 0.0429 |     - |     - |     180 B |\r\n|                          |        |               |                |              |              |             |        |     |\r\n|              Format | 1337 | 1,871.1 ns | 31.90 ns | 37.97 ns | 0.3090 |     - |     - |    1298 B |\r\n|      FormatExplicit | 1337 | 1,342.0 ns | 20.94 ns | 17.48 ns | 0.0858 |     - |     - |     361 B |\r\n|         Interpolate | 1337 | 1,894.2 ns | 36.20 ns | 43.09 ns | 0.3090 |     - |     - |    1298 B |\r\n| InterpolateExplicit | 1337 |   596.2 ns |  9.37 ns |  8.76 ns | 0.0429 |     - |     - |     180 B |","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/713533637/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/713609905","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-713609905","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":713609905,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMzYwOTkwNQ==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-21T14:16:18Z","updated_at":"2020-10-21T14:16:18Z","author_association":"CONTRIBUTOR","body":"Hi @jeme, no worries, I also found the final code a bit confusing. \r\n\r\nThe reason for the redundant check is that I didn't want to change the behavior from:\r\n\r\n**Check Flag** ----> **Check if Assert condition is true** ----> **Throw**\r\n\r\nTo:\r\n\r\n**Check if Assert condition is true** ----> **Check Flag** ----> **Throw**\r\n\r\nThis would happen if we only have the ShouldAssert call - even with the aggressive inlining option on the ShouldAssert method, the compiler will obviously not invert the checks as that could change the code behavior.\r\n\r\n`````csharp\r\nif(Debugging.ShouldAssert(*** Some Check ***)){}\r\n`````\r\n\r\nThus I added back the Debugging.AssertsEnabled check before the call to ShouldAssert to keep it consistent with the original code, and to avoid the extra checks due to the condition on every call even when Debugging.AssertsEnabled = false.\r\n`````csharp\r\nif(Debugging.AssertsEnabled && Debugging.ShouldAssert(*** Some Check ***)){}\r\n`````\r\nRegarding the interpolated string, true, with the new design where the check for the condition is outside of the code, that would work fine - I could change it to use the interpolated string again instead of the new string.Format design...\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/713609905/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/713649639","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-713649639","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":713649639,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMzY0OTYzOQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-21T15:13:21Z","updated_at":"2020-10-21T15:13:21Z","author_association":"CONTRIBUTOR","body":"This feature should be optimized for:\r\n\r\n1. Asserts are disabled\r\n2. Condition succeeds (equals `true`)\r\n\r\nAn exception will only occur in an application that both has asserts enabled and is misbehaving in some way.\r\n\r\nThis PR has changed a bit from the `Debugging.Assert` overloads I thought it might be a good solution:\r\n\r\n```c#\r\nAssert<T0>(bool condition, string messageFormat, T0 arg0);\r\nAssert<T0, T1>(bool condition, string messageFormat, T0 arg0, T1 arg1);\r\nAssert<T0, T1, T2>(bool condition, string messageFormat, T0 arg0, T1 arg1, T2 arg2);\r\n```\r\n\r\nThe above signatures would prevent the string from being constructed until after the condition is checked, which is what we need to avoid unnecessary string concatenation/formatting. We can live with boxing when formatting strings that include value type parameters in this scenario (using `string.Format`), since this will only occur in an application that is misbehaving (provided the condition is checked before any boxing occurs). It is an extreme edge case.\r\n\r\nFor the same reason, which string concatenation method that is used is irrelevant, as string concatenation will only occur in a misbehaving application. Ideally, the string concatenation will also only occur if the condition fails and should never happen when asserts are disabled.\r\n\r\nI have to agree that there doesn't seem to be much value in `ShouldAssert`. If the application is running correctly, `ShouldAssert` will always be `false`. If we are going to split it up, it would definitely be better to nix the `Assert` method and just add the condition to the if block [as I pointed out](https://github.com/apache/lucenenet/issues/346#issuecomment-711056610) in #346 and @jeme pointed out above.\r\n\r\n```c#\r\n// Before\r\nif (Debugging.AssertsEnabled) Debugging.Assert(outputLen > 0, () => \"output contains empty string: \" + scratchChars);\r\n\r\n// After\r\nif (Debugging.AssertsEnabled && !(outputLen > 0)) throw new AssertionException($\"output contains empty string: {scratchChars}\");\r\n```\r\n\r\nThis keeps the syntax relatable to both Java and .NET asserts:\r\n\r\n```\r\n// Java\r\nassert outputLen > 0 : \"output contains empty string: \" + scratchChars;\r\n\r\n// .NET\r\nDebug.Assert(outputLen > 0, $\"output contains empty string: {scratchChars}\");\r\n```\r\n\r\nSure, it is more verbose, but it is what is needed to make the feature as cheap as possible.\r\n\r\nFrom https://github.com/apache/lucenenet/issues/346#issuecomment-711128543:\r\n\r\n> Think the only problem with that is that the JIT usually won't inline methods with a throw expression.\r\n\r\nI suspect not. It would mean that any guard clause would cause a method not to be inlined. Consider:\r\n\r\n```c#\r\npublic void Foo(string p1)\r\n{\r\n    if (p1 is null)\r\n        throw new ArgumentNullException(nameof(p1));\r\n\r\n    // Implementation\r\n}\r\n```\r\n\r\nThis is really no different than:\r\n\r\n```c#\r\npublic void Foo(string p1)\r\n{\r\n    if (Debugging.AssertsEnabled && !p1.Contains(\"0\"))\r\n        throw new AssertionException();\r\n\r\n    // Implementation\r\n}\r\n```\r\n\r\nBoth of them check a condition, then throw an exception if the condition fails. In addition, the failure is expected to be an extreme edge case so any overhead of concatenating an error message doesn't occur normally.\r\n\r\nIn fact, about 10% of all of the asserts in Lucene could be converted to guard clauses in .NET. For end users, it would be more intuitive to make them guard clauses rather than asserts, but it would come at a runtime performance cost. The point is the asserts are designed to take the place of guard clauses when asserts are enabled, but unlike guard clauses asserts can be turned off in production to improve performance.\r\n\r\nI am still debating whether to go with asserts or guard clauses, but I am leaning toward making them guard clauses because .NET users don't normally expect to have to \"turn on\" these checks when debugging.\r\n\r\n> Which means we run the check against Debugging.AssertsEnabled twice... (while its cheap, it's still redundant)\r\n\r\nThe original design was to have a few `Debugging.Assert()` overloads that are self-contained, so they check internally whether asserts are enabled before checking the condition. However, there was a high production performance cost in doing it that way (presumably because of the unnecessary allocations of method parameters when asserts were disabled). Moving the `if` block outside of the method improved performance considerably. The check was also left inside of the method primarily to future-proof it if someone were to just call `Debugging.Assert()` without checking to see whether it is enabled first (after all, it was designed to be a drop-in replacement for [`Debug.Assert()`](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert?view=netcore-3.1)).\r\n\r\nHaving a second check is redundant, but the redundancy only occurs when asserts are enabled (during testing/debugging).\r\n\r\nThe redundancy was removed in places where there are blocks of 2 or more `Debugging.Assert()` calls - a single `if (Debugging.AssertsEnabled)` check is done for the entire block, which also optimizes for asserts being disabled.\r\n\r\n## Boolean Switch\r\n\r\nOne thing that was missed in the current implementation is the fact that .NET already has a built-in feature to turn something on/off from outside of the application for debugging purposes: [`BooleanSwitch`](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.booleanswitch?view=netcore-3.1).\r\n\r\n```c#\r\ninternal static BooleanSwitch asserts = new BooleanSwitch(\"assertsEnabled\", \"Enable Assertions\", \"false\");\r\n\r\npublic static void MyMethod(string location) {\r\n   //Insert code here to handle processing.\r\n   if(asserts.Enabled && !<condition>)\r\n      throw new AssertionException(\"Error happened at \" + location);\r\n}\r\n```\r\n\r\nTo utilize this, we need to ensure that it is disabled by default in the core library and enabled by default in the test framework and is correctly passed into the application in the Azure DevOps pipeline tests.\r\n\r\n> This doesn't have to be part of this PR - I am just pointing out that we might change `AssertsEnabled` later to integrate tighter with .NET.\r\n\r\n## Assert(false)\r\n\r\nNote that there are many places in Lucene that where the line\r\n\r\n```java\r\nthrow new AssertionError();\r\n```\r\nwas replaced with either:\r\n\r\n```c#\r\nDebugging.Assert(false);\r\n\r\n// or\r\n\r\nthrow new InvalidOperationException();\r\n```\r\n\r\nEssentially, these were both done to compensate for the fact that `System.Diagnostics.Debug.Assert()` (which we originally used) gets stripped out from the Release build and does not always throw an exception that can be caught. Do note that some of the tests differentiate between catching an `AssertionException` or an `InvalidOperationException` and do something different in each case. But in cases where we have `Debugging.Assert(false)` now, we can just replace the line with `throw new AssertionException()` - these generally just equate to execution paths that should be unreachable unless the application is misbehaving.\r\n\r\n> This doesn't have to be part of this PR - I am just pointing it out so there is a clear picture the direction this may take.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/713649639/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/714351524","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-714351524","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":714351524,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNDM1MTUyNA==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-22T09:11:23Z","updated_at":"2020-10-22T09:14:01Z","author_association":"CONTRIBUTOR","body":"> Hi @jeme, no worries, I also found the final code a bit confusing.\r\n> \r\n> The reason for the redundant check is that I didn't want to change the behavior from:\r\n> \r\n> **Check Flag** ----> **Check if Assert condition is true** ----> **Throw**\r\n> \r\n> To:\r\n> \r\n> **Check if Assert condition is true** ----> **Check Flag** ----> **Throw**\r\n> \r\n> This would happen if we only have the ShouldAssert call - even with the aggressive inlining option on the ShouldAssert method, the compiler will obviously not invert the checks as that could change the code behavior.\r\n> \r\n> ```cs\r\n> if(Debugging.ShouldAssert(*** Some Check ***)){}\r\n> ```\r\n> \r\n> Thus I added back the Debugging.AssertsEnabled check before the call to ShouldAssert to keep it consistent with the original code, and to avoid the extra checks due to the condition on every call even when Debugging.AssertsEnabled = false.\r\n\r\nBut we have to choose between Simplicity or Performance in this particular case... The attempt here looks like you went for simplicity first, but then in adding in the performance after that it completely nullified the simplicity attempt, and even made it much much worse.\r\n\r\nSo we have to choose...\r\n```\r\n// \"Simplicity\" (Well somewhat, the Debug.Assert(check, message) is probably the most simple design)...\r\nif(Debug.ShouldThrow(*** Check ***)) Debug.Throw(\"Message\");\r\nShouldThrow(bool check) => AssertsEnabled && check;\r\n```\r\nIf the \"Check\" is costly, this will hurt performance regardless of Asserts being enabled or not.\r\nWe do save allocation and computation of the resulting message.\r\nBut I don't think we will go for that.\r\n\r\nOr\r\n```\r\n// Performance\r\nif(Debug.AssertsEnabled && Debug.ShouldThrow(*** Check ***)) Debug.Throw(\"Message\");\r\nShouldThrow(bool check) => check;\r\n```\r\n\r\nIn the later you will quickly realize that we are essentially passing a boolean to a method just to return it, so the method becomes irrelevant all together and only adds noise, hence we can eliminate that to:\r\n```\r\n// Performance\r\nif(Debug.AssertsEnabled && *** Check ***) Debug.Throw(\"Message\");\r\n```\r\nThis saves the computation of the check (in normal mode, where asserts are disabled), if it's costly that matters, otherwise it is negligible.\r\nWe still save allocation and computation of the resulting message.\r\n\r\nObviously we can then as a final step simply inline the throw of the exception. I have no opinion on that here.\r\n\r\n----\r\n\r\nThe example overloads like @NightOwl888 presented:\r\n```\r\nAssert<T0>(bool condition, string messageFormat, T0 arg0);\r\nAssert<T0, T1>(bool condition, string messageFormat, T0 arg0, T1 arg1);\r\nAssert<T0, T1, T2>(bool condition, string messageFormat, T0 arg0, T1 arg1, T2 arg2);\r\n```\r\nShould avoid the extra allocations as well and is the option most in line with what is currently in place. This is also what is most in line with the built-in \"Debug.Assert\".\r\n\r\n----\r\n\r\nI would as much as anyone like to avoid all this mess all-together, but the only solution that would be somewhat \"Clean\" to the code I can think of is some heavy reliance of AOP and that is complicated to add.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/714351524/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/714433416","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-714433416","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":714433416,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNDQzMzQxNg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-22T11:37:26Z","updated_at":"2020-10-22T11:37:26Z","author_association":"CONTRIBUTOR","body":"> If the \"Check\" is costly, this will hurt performance \r\n\r\nI neglected to mention that in the original implementation, the `condition` parameter was a `Func<bool>` to ensure that it wasn't run in production. However, this proved to be too costly in terms of performance when asserts are disabled. The `if (Debugging.AssertsEnabled)` added and first parameter changed to `bool` at the same time, as they go hand-in-hand. Together they brought performance close to the original `Debug.Assert` being compiled out. The condition should *never* be checked when asserts are disabled, as that would incur unnecessary production overhead.\r\n\r\nOriginally, all of the `Assert` overloads that had a message string also used a `Func<string>` as the `message` parameter. This was also somewhat costly, so the additional overloads with a `string` were added and utilized in all cases where the message string had no concatenation. ~80% of the asserts do not call the overload with `Func<string>`.\r\n\r\nBoth of the above changes brought the performance pretty close to what it was when we used `Debug.Assert`.\r\n\r\nBut this is just more proof that not all of these asserts are equal. For example:\r\n\r\n- ~20% of the asserts use `Func<string>` as the second parameter, which could be converted as we have been discussing\r\n- ~10% of the asserts could be converted to guard clauses (which means they will be more expensive at runtime, but more intuitive to .NET users)\r\n- ~5% of the asserts cannot ever fail and could be changed back to `Debug.Assert` and compiled out of the release, provided we add tests for a `Debug` build to the [nightly build](https://dev.azure.com/lucene-net/Lucene.NET/_build?definitionId=4) (for example, places that are checking if the current object is locked where the outside world doesn't have any control over the lock)\r\n- ~5% of the asserts had been converted from simple `throw AssertionException()` statements to `Debug.Assert(false)` and now that `AssertionException` is part of `Lucene.Net.dll`, they can be converted back\r\n\r\nUnfortunately, going down this road is inevitably going to lead to many specializations of asserts, some of which diverge from the Lucene source, all in the name of performance.\r\n\r\n> I would as much as anyone like to avoid all this mess all-together, but the only solution that would be somewhat \"Clean\" to the code I can think of is some heavy reliance of AOP and that is complicated to add.\r\n\r\nWell, I was hoping to avoid it, too. Several years ago we assumed that `Debug.Assert` would do everything we needed. But after @Shazwazza pointed out that some of the tests were failing in debug mode because we were skipping asserts that were meant as test conditions, the realization that some of the production overhead could be removed by putting in a switch to keep certain \"test only\" methods from being executed, and the realization that both the test framework and the \"check index\" feature require asserts to be enabled in Release mode to run all of the test conditions, there doesn't seem to be much point in trying to avoid it.\r\n\r\nAOP could potentially save us from having to go down the road of specializing asserts in the name of performance. It might be costly, but when compared against trying to maintain a diverging set of asserts and `Assert` methods that require an `if` block outside of them in order to optimize performance, it might be worth it. Perhaps a small example is in order of AOP. Although, years ago when I checked there didn't appear to be any mainstream open source AOP libraries, which would kill that idea immediately if it is still the case.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/714433416/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/714720747","html_url":"https://github.com/apache/lucenenet/pull/374#issuecomment-714720747","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/374","id":714720747,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNDcyMDc0Nw==","user":{"login":"joneskj55","id":20748598,"node_id":"MDQ6VXNlcjIwNzQ4NTk4","avatar_url":"https://avatars.githubusercontent.com/u/20748598?v=4","gravatar_id":"","url":"https://api.github.com/users/joneskj55","html_url":"https://github.com/joneskj55","followers_url":"https://api.github.com/users/joneskj55/followers","following_url":"https://api.github.com/users/joneskj55/following{/other_user}","gists_url":"https://api.github.com/users/joneskj55/gists{/gist_id}","starred_url":"https://api.github.com/users/joneskj55/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joneskj55/subscriptions","organizations_url":"https://api.github.com/users/joneskj55/orgs","repos_url":"https://api.github.com/users/joneskj55/repos","events_url":"https://api.github.com/users/joneskj55/events{/privacy}","received_events_url":"https://api.github.com/users/joneskj55/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-22T19:44:40Z","updated_at":"2020-10-22T19:44:40Z","author_association":"CONTRIBUTOR","body":"Hi @Shazwazza I removed the `<span>` from all of the markdown files. I only needed to add the `<span>` to `index.html.tmpl` (which I did on the previous commit) and the `head.tmpl.partial` file. This took care of adding it to all pages so I didn't need to create a new docfx file. Please let me know if this works as a viable solution.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/714720747/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/714887806","html_url":"https://github.com/apache/lucenenet/pull/374#issuecomment-714887806","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/374","id":714887806,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNDg4NzgwNg==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-23T03:35:40Z","updated_at":"2020-10-23T03:35:40Z","author_association":"CONTRIBUTOR","body":"Great stuff, I'm just about to leave on holidays for 3 weeks but i will absolutely get back to this one I return. Thanks for the help so far and sorry for this delay.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/714887806/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/715072695","html_url":"https://github.com/apache/lucenenet/pull/369#issuecomment-715072695","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/369","id":715072695,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNTA3MjY5NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-23T07:32:29Z","updated_at":"2020-10-23T07:32:29Z","author_association":"CONTRIBUTOR","body":"Closing, as this was superseded by #374.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/715072695/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/715292534","html_url":"https://github.com/apache/lucenenet/pull/374#issuecomment-715292534","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/374","id":715292534,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNTI5MjUzNA==","user":{"login":"joneskj55","id":20748598,"node_id":"MDQ6VXNlcjIwNzQ4NTk4","avatar_url":"https://avatars.githubusercontent.com/u/20748598?v=4","gravatar_id":"","url":"https://api.github.com/users/joneskj55","html_url":"https://github.com/joneskj55","followers_url":"https://api.github.com/users/joneskj55/followers","following_url":"https://api.github.com/users/joneskj55/following{/other_user}","gists_url":"https://api.github.com/users/joneskj55/gists{/gist_id}","starred_url":"https://api.github.com/users/joneskj55/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joneskj55/subscriptions","organizations_url":"https://api.github.com/users/joneskj55/orgs","repos_url":"https://api.github.com/users/joneskj55/repos","events_url":"https://api.github.com/users/joneskj55/events{/privacy}","received_events_url":"https://api.github.com/users/joneskj55/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-23T11:46:17Z","updated_at":"2020-10-23T11:48:19Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Thanks! Sorry about that whitespace. I noticed that as well and thought it might be an issue. It's from an auto formatter extension that I have in VS Code. I'll make sure to disable it when doing any future work. Thanks again! I will look at getting this in the API docs as well.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/715292534/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/715306605","html_url":"https://github.com/apache/lucenenet/pull/374#issuecomment-715306605","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/374","id":715306605,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNTMwNjYwNQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-23T12:17:52Z","updated_at":"2020-10-23T13:06:46Z","author_association":"CONTRIBUTOR","body":"No worries.\r\n\r\nI finally discovered where we are really supposed to put the `<span>` tag - the DocFx default templates have already been exported to [/websites/apidocs/Templates/DefaultTemplateNoAssets/](https://github.com/apache/lucenenet/tree/1fcc714ea2f13e078ba0b32b13392729353e0754/websites/apidocs/Templates/DefaultTemplateNoAssets).\r\n\r\nThe `/layout/_master.tmpl` file (and its containing folder `layout`) should be copied into the DocFx folder(s). I will do this for the `site`, but for the `apidocs`, it should be copied to:\r\n\r\n- `/websites/apidocs/Templates/LuceneApiDocs/layout/_master.tmpl`\r\n- `/websites/apidocs/Templates/LuceneTemplate/layout/_master.tmpl`\r\n\r\nFrom there, you just need to edit those two `_master.tmpl` files to put the `<span>` just inside of the `<body>` tag.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/715306605/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/715327657","html_url":"https://github.com/apache/lucenenet/pull/374#issuecomment-715327657","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/374","id":715327657,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNTMyNzY1Nw==","user":{"login":"joneskj55","id":20748598,"node_id":"MDQ6VXNlcjIwNzQ4NTk4","avatar_url":"https://avatars.githubusercontent.com/u/20748598?v=4","gravatar_id":"","url":"https://api.github.com/users/joneskj55","html_url":"https://github.com/joneskj55","followers_url":"https://api.github.com/users/joneskj55/followers","following_url":"https://api.github.com/users/joneskj55/following{/other_user}","gists_url":"https://api.github.com/users/joneskj55/gists{/gist_id}","starred_url":"https://api.github.com/users/joneskj55/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joneskj55/subscriptions","organizations_url":"https://api.github.com/users/joneskj55/orgs","repos_url":"https://api.github.com/users/joneskj55/repos","events_url":"https://api.github.com/users/joneskj55/events{/privacy}","received_events_url":"https://api.github.com/users/joneskj55/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-23T13:03:53Z","updated_at":"2020-10-23T13:03:53Z","author_association":"CONTRIBUTOR","body":"Ok nice, I'll try to get that knocked out today.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/715327657/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716029083","html_url":"https://github.com/apache/lucenenet/pull/379#issuecomment-716029083","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/379","id":716029083,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNjAyOTA4Mw==","user":{"login":"joneskj55","id":20748598,"node_id":"MDQ6VXNlcjIwNzQ4NTk4","avatar_url":"https://avatars.githubusercontent.com/u/20748598?v=4","gravatar_id":"","url":"https://api.github.com/users/joneskj55","html_url":"https://github.com/joneskj55","followers_url":"https://api.github.com/users/joneskj55/followers","following_url":"https://api.github.com/users/joneskj55/following{/other_user}","gists_url":"https://api.github.com/users/joneskj55/gists{/gist_id}","starred_url":"https://api.github.com/users/joneskj55/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joneskj55/subscriptions","organizations_url":"https://api.github.com/users/joneskj55/orgs","repos_url":"https://api.github.com/users/joneskj55/repos","events_url":"https://api.github.com/users/joneskj55/events{/privacy}","received_events_url":"https://api.github.com/users/joneskj55/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-24T17:38:12Z","updated_at":"2020-10-24T17:38:12Z","author_association":"CONTRIBUTOR","body":"Awesome, thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716029083/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716401707","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-716401707","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":716401707,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNjQwMTcwNw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-26T08:45:02Z","updated_at":"2020-10-26T08:45:02Z","author_association":"CONTRIBUTOR","body":"> AOP could potentially save us from having to go down the road of specializing asserts in the name of performance. It might be costly, but when compared against trying to maintain a diverging set of asserts and `Assert` methods that require an `if` block outside of them in order to optimize performance, it might be worth it. Perhaps a small example is in order of AOP. Although, years ago when I checked there didn't appear to be any mainstream open source AOP libraries, which would kill that idea immediately if it is still the case.\r\n\r\nThere is some fairly mature AOP frameworks out there, however not all will be suitable for what we need here. E.g. I still think PostSharp, which is one of the bigger ones, is focused on Compile time AOP which makes it unsuitable here as we are looking for a Runtime.\r\n\r\nHarmony works at runtime so that could be a candidate, it's has apparently been mostly used to mod games, but that shouldn't matter. The bigger problem though is that the `Debugging.Assert` is not only used on Method entry in Lucene, which means we need to somehow get around this problem as we can't just inject code into the middle of a method (AFAIK, at least not with ease)...\r\n\r\nI was thinking that one approach for this could be to pull out the actual assert into it's own method in each class (A .NET specific method)... That would introduce a call to a \"NOOP\" by default at runtime, and that could then be replace. The consequence here though is that then we may not even need AOP at all to replace the logic as we can perhaps inject it instead... (But I want to perform some experiments to look into the performance cost of a \"NOOP\" in various scenarios vs the boolean check we have now..","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716401707/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716411038","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-716411038","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":716411038,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNjQxMTAzOA==","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-26T09:02:56Z","updated_at":"2020-10-26T09:02:56Z","author_association":"CONTRIBUTOR","body":"another option is to write custom Fody weaver but I'm not sure we should invest the efforts on this area to gain performance.\r\nwe have still many other areas that have bigger impact and we should focus there.\r\n\r\nfor instance, there are many places we can save allocations, better re-use of allocated objects using pools and managers.\r\nthere are also some places we can utilize span to avoid more allocations.\r\nand of course, we can aggressive inline static some methods.\r\n\r\nI would even say that in the cases the code isn't in use for testing/validation and only output, we can simply wrap it with conditional #IF TEST. (to remove it completely)\r\n\r\nI'm not sure its that necessary in all the places its used.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716411038/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716481463","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-716481463","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":716481463,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNjQ4MTQ2Mw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-26T11:15:28Z","updated_at":"2020-10-26T11:15:28Z","author_association":"CONTRIBUTOR","body":"> we have still many other areas that have bigger impact and we should focus there.\r\n\r\n> for instance, there are many places we can save allocations, better re-use of allocated objects using pools and managers.\r\n> there are also some places we can utilize span to avoid more allocations.\r\nand of course, we can aggressive inline static some methods.\r\n\r\nAgreed.\r\n\r\nBut to resolve this PR, I would say the least we should do is eliminate the `Func<string>` since it clearly has a negative impact on performance.\r\n\r\nThere are 2 acceptable ways to eliminate the `Func<string>` overloads of `Debugging.Assert` to complete this PR:\r\n\r\n1. **Preferred**: Revert the overloads to the format `Assert<T0, T1, T2>(bool condition, string messageFormat, T0 arg0, T1 arg1, T2 arg2)` and use `string.Format()` after the condition is checked\r\n2. Check the condition, format the message and throw the exception inline instead of calling `Debugging.Assert()`\r\n\r\nWe can then evaluate whether additional measures to improve performance of this feature are worth the effort. My guess is there will not be any additional measures required. This feature exists in Lucene and they were willing to accept its performance cost in the design as a tradeoff to properly run all of the test conditions when they are needed, including when end users run tests on their own components using the test framework or run `CheckIndex`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716481463/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716488461","html_url":"https://github.com/apache/lucenenet/pull/381#issuecomment-716488461","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/381","id":716488461,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNjQ4ODQ2MQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-26T11:29:58Z","updated_at":"2020-10-26T11:29:58Z","author_association":"CONTRIBUTOR","body":"Thanks for the PR.\r\n\r\nUnfortunately, this causes the performance of `TaskMergeScheduler` to become unacceptably slow.\r\n\r\n## Without Change\r\n\r\n![image](https://user-images.githubusercontent.com/1538288/97166810-6fad9400-17b8-11eb-9f03-9540d03d312b.png)\r\n\r\n\r\n## With Change\r\n\r\n![image](https://user-images.githubusercontent.com/1538288/97157309-81883a80-17aa-11eb-9b71-97210059b0aa.png)\r\n\r\nBlocking would seem to defeat the purpose of a concurrent merge scheduler. However, if you would like to take another stab at it, I will leave this PR open. See #354 for a description of what we are looking for.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716488461/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716493323","html_url":"https://github.com/apache/lucenenet/pull/373#issuecomment-716493323","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/373","id":716493323,"node_id":"MDEyOklzc3VlQ29tbWVudDcxNjQ5MzMyMw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-26T11:40:50Z","updated_at":"2020-10-26T11:40:50Z","author_association":"CONTRIBUTOR","body":"I would also go for option 1.\r\nBeing the one that is most in line with how the build in Debug.Asserts looks means it's what will be most familiar IMO.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/716493323/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]