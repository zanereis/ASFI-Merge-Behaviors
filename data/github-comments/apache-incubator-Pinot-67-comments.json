[{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658223930","html_url":"https://github.com/apache/pinot/pull/5672#issuecomment-658223930","issue_url":"https://api.github.com/repos/apache/pinot/issues/5672","id":658223930,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODIyMzkzMA==","user":{"login":"mayankshriv","id":12615885,"node_id":"MDQ6VXNlcjEyNjE1ODg1","avatar_url":"https://avatars.githubusercontent.com/u/12615885?v=4","gravatar_id":"","url":"https://api.github.com/users/mayankshriv","html_url":"https://github.com/mayankshriv","followers_url":"https://api.github.com/users/mayankshriv/followers","following_url":"https://api.github.com/users/mayankshriv/following{/other_user}","gists_url":"https://api.github.com/users/mayankshriv/gists{/gist_id}","starred_url":"https://api.github.com/users/mayankshriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayankshriv/subscriptions","organizations_url":"https://api.github.com/users/mayankshriv/orgs","repos_url":"https://api.github.com/users/mayankshriv/repos","events_url":"https://api.github.com/users/mayankshriv/events{/privacy}","received_events_url":"https://api.github.com/users/mayankshriv/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T14:47:39Z","updated_at":"2020-07-14T14:48:12Z","author_association":"CONTRIBUTOR","body":"> > Does the `LIMIT 0` query response just contains the projected columns or all columns from schema? If so, do we even need one segment there? We can simply refer to the schema for columns and data types?\r\n> \r\n> @mayankshriv `LIMIT 0` query might contain columns and transform functions. So we still need to keep one segment to construct the TransformOperator in order to get all column types. No actual data fetch is required for that single segment.\r\n\r\n@Jackie-Jiang Since we don't enforce schema to be same across segments, wouldn't it be better to have a Schema based operator (perhaps fall back to segment if schema not registered)?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658223930/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658316154","html_url":"https://github.com/apache/pinot/pull/5672#issuecomment-658316154","issue_url":"https://api.github.com/repos/apache/pinot/issues/5672","id":658316154,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODMxNjE1NA==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T17:39:30Z","updated_at":"2020-07-14T17:39:30Z","author_association":"CONTRIBUTOR","body":"> > > Does the `LIMIT 0` query response just contains the projected columns or all columns from schema? If so, do we even need one segment there? We can simply refer to the schema for columns and data types?\r\n> > \r\n> > \r\n> > @mayankshriv `LIMIT 0` query might contain columns and transform functions. So we still need to keep one segment to construct the TransformOperator in order to get all column types. No actual data fetch is required for that single segment.\r\n> \r\n> @Jackie-Jiang Since we don't enforce schema to be same across segments, wouldn't it be better to have a Schema based operator (perhaps fall back to segment if schema not registered)?\r\n\r\n@mayankshriv Ideally `LIMIT 0` query should be able to be solved on broker side (where the Schema based operator should be added), but that is out of the scope of this PR. Once we enforce schema, we can add that to avoid the routing overhead.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658316154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658333991","html_url":"https://github.com/apache/pinot/issues/5690#issuecomment-658333991","issue_url":"https://api.github.com/repos/apache/pinot/issues/5690","id":658333991,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODMzMzk5MQ==","user":{"login":"tmwangi","id":1154979,"node_id":"MDQ6VXNlcjExNTQ5Nzk=","avatar_url":"https://avatars.githubusercontent.com/u/1154979?v=4","gravatar_id":"","url":"https://api.github.com/users/tmwangi","html_url":"https://github.com/tmwangi","followers_url":"https://api.github.com/users/tmwangi/followers","following_url":"https://api.github.com/users/tmwangi/following{/other_user}","gists_url":"https://api.github.com/users/tmwangi/gists{/gist_id}","starred_url":"https://api.github.com/users/tmwangi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmwangi/subscriptions","organizations_url":"https://api.github.com/users/tmwangi/orgs","repos_url":"https://api.github.com/users/tmwangi/repos","events_url":"https://api.github.com/users/tmwangi/events{/privacy}","received_events_url":"https://api.github.com/users/tmwangi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T18:15:44Z","updated_at":"2020-07-14T18:15:44Z","author_association":"NONE","body":"Thanks @Jackie-Jiang ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658333991/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658369006","html_url":"https://github.com/apache/pinot/issues/5703#issuecomment-658369006","issue_url":"https://api.github.com/repos/apache/pinot/issues/5703","id":658369006,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODM2OTAwNg==","user":{"login":"KKcorps","id":5559703,"node_id":"MDQ6VXNlcjU1NTk3MDM=","avatar_url":"https://avatars.githubusercontent.com/u/5559703?v=4","gravatar_id":"","url":"https://api.github.com/users/KKcorps","html_url":"https://github.com/KKcorps","followers_url":"https://api.github.com/users/KKcorps/followers","following_url":"https://api.github.com/users/KKcorps/following{/other_user}","gists_url":"https://api.github.com/users/KKcorps/gists{/gist_id}","starred_url":"https://api.github.com/users/KKcorps/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KKcorps/subscriptions","organizations_url":"https://api.github.com/users/KKcorps/orgs","repos_url":"https://api.github.com/users/KKcorps/repos","events_url":"https://api.github.com/users/KKcorps/events{/privacy}","received_events_url":"https://api.github.com/users/KKcorps/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T19:27:36Z","updated_at":"2020-07-14T19:27:36Z","author_association":"CONTRIBUTOR","body":"Taking this up!","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658369006/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658384412","html_url":"https://github.com/apache/pinot/issues/5704#issuecomment-658384412","issue_url":"https://api.github.com/repos/apache/pinot/issues/5704","id":658384412,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODM4NDQxMg==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T20:01:52Z","updated_at":"2020-07-14T20:01:52Z","author_association":"CONTRIBUTOR","body":"cc @kishoreg @Jackie-Jiang @npawar ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658384412/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658385082","html_url":"https://github.com/apache/pinot/issues/5704#issuecomment-658385082","issue_url":"https://api.github.com/repos/apache/pinot/issues/5704","id":658385082,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODM4NTA4Mg==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T20:03:21Z","updated_at":"2020-07-14T20:03:21Z","author_association":"MEMBER","body":"it's probably better to add new short udf instead of overloading existing udf. Do you have examples from other SQL engines for these operations?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658385082/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658393469","html_url":"https://github.com/apache/pinot/issues/5704#issuecomment-658393469","issue_url":"https://api.github.com/repos/apache/pinot/issues/5704","id":658393469,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODM5MzQ2OQ==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T20:21:54Z","updated_at":"2020-07-14T20:21:54Z","author_association":"CONTRIBUTOR","body":"sql use functions like `year()`/`month()`/`week()` to extract year from a given date.\r\nRFE: https://prestodb.io/docs/current/functions/datetime.html\r\nSee: Extraction Function section.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658393469/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658423755","html_url":"https://github.com/apache/pinot/pull/5631#issuecomment-658423755","issue_url":"https://api.github.com/repos/apache/pinot/issues/5631","id":658423755,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODQyMzc1NQ==","user":{"login":"yupeng9","id":13425258,"node_id":"MDQ6VXNlcjEzNDI1MjU4","avatar_url":"https://avatars.githubusercontent.com/u/13425258?v=4","gravatar_id":"","url":"https://api.github.com/users/yupeng9","html_url":"https://github.com/yupeng9","followers_url":"https://api.github.com/users/yupeng9/followers","following_url":"https://api.github.com/users/yupeng9/following{/other_user}","gists_url":"https://api.github.com/users/yupeng9/gists{/gist_id}","starred_url":"https://api.github.com/users/yupeng9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yupeng9/subscriptions","organizations_url":"https://api.github.com/users/yupeng9/orgs","repos_url":"https://api.github.com/users/yupeng9/repos","events_url":"https://api.github.com/users/yupeng9/events{/privacy}","received_events_url":"https://api.github.com/users/yupeng9/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T21:30:21Z","updated_at":"2020-07-14T21:30:21Z","author_association":"CONTRIBUTOR","body":"@Jackie-Jiang Got the build pass, feel free to merge","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658423755/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658429465","html_url":"https://github.com/apache/pinot/pull/5631#issuecomment-658429465","issue_url":"https://api.github.com/repos/apache/pinot/issues/5631","id":658429465,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODQyOTQ2NQ==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T21:45:07Z","updated_at":"2020-07-14T21:45:07Z","author_association":"CONTRIBUTOR","body":"@yupeng9 @mcvsubbu Last question before merging: should we put 10M as the default, or 100K as described in the PR?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658429465/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658431790","html_url":"https://github.com/apache/pinot/pull/5631#issuecomment-658431790","issue_url":"https://api.github.com/repos/apache/pinot/issues/5631","id":658431790,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODQzMTc5MA==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T21:51:31Z","updated_at":"2020-07-14T21:51:31Z","author_association":"MEMBER","body":"my vote 100k, not many will reach that scale but in case they do, this should prevent an outage in case a pinot server misbehaves.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658431790/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658450457","html_url":"https://github.com/apache/pinot/pull/5631#issuecomment-658450457","issue_url":"https://api.github.com/repos/apache/pinot/issues/5631","id":658450457,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODQ1MDQ1Nw==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-14T22:48:19Z","updated_at":"2020-07-14T22:48:19Z","author_association":"CONTRIBUTOR","body":"The number depends on the capacity of zookeeper to handle transactions. What is to say that 100K is bad and 10K is good? Or that 10M is bad but 1M is not?\r\n\r\nWhy not leave it to whatever helix does by default (i.e. existing behavior) but add a documentation on what helix command sequence to run in order to set the value? (of course, in that case this PR is not needed at all).","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658450457/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658485856","html_url":"https://github.com/apache/pinot/pull/5631#issuecomment-658485856","issue_url":"https://api.github.com/repos/apache/pinot/issues/5631","id":658485856,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODQ4NTg1Ng==","user":{"login":"yupeng9","id":13425258,"node_id":"MDQ6VXNlcjEzNDI1MjU4","avatar_url":"https://avatars.githubusercontent.com/u/13425258?v=4","gravatar_id":"","url":"https://api.github.com/users/yupeng9","html_url":"https://github.com/yupeng9","followers_url":"https://api.github.com/users/yupeng9/followers","following_url":"https://api.github.com/users/yupeng9/following{/other_user}","gists_url":"https://api.github.com/users/yupeng9/gists{/gist_id}","starred_url":"https://api.github.com/users/yupeng9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yupeng9/subscriptions","organizations_url":"https://api.github.com/users/yupeng9/orgs","repos_url":"https://api.github.com/users/yupeng9/repos","events_url":"https://api.github.com/users/yupeng9/events{/privacy}","received_events_url":"https://api.github.com/users/yupeng9/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T01:00:45Z","updated_at":"2020-07-15T01:00:45Z","author_association":"CONTRIBUTOR","body":"> The number depends on the capacity of zookeeper to handle transactions. What is to say that 100K is bad and 10K is good? Or that 10M is bad but 1M is not?\r\n\r\nOne reason to use 100K is that `jute.maxbuffer` defaults to 1MB. So the purpose is to protect the controller/server with the out-of-the-box settings. If we had this config, we could have prevented an outage that brought the entire cluster down for hours.\r\n> \r\n> Why not leave it to whatever helix does by default (i.e. existing behavior) but add a documentation on what helix command sequence to run in order to set the value? (of course, in that case this PR is not needed at all).\r\n\r\nI believe an inbuilt configuration gives a better user experience, and reliability assurance.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658485856/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658486993","html_url":"https://github.com/apache/pinot/pull/5642#issuecomment-658486993","issue_url":"https://api.github.com/repos/apache/pinot/issues/5642","id":658486993,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODQ4Njk5Mw==","user":{"login":"npawar","id":19693933,"node_id":"MDQ6VXNlcjE5NjkzOTMz","avatar_url":"https://avatars.githubusercontent.com/u/19693933?v=4","gravatar_id":"","url":"https://api.github.com/users/npawar","html_url":"https://github.com/npawar","followers_url":"https://api.github.com/users/npawar/followers","following_url":"https://api.github.com/users/npawar/following{/other_user}","gists_url":"https://api.github.com/users/npawar/gists{/gist_id}","starred_url":"https://api.github.com/users/npawar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/npawar/subscriptions","organizations_url":"https://api.github.com/users/npawar/orgs","repos_url":"https://api.github.com/users/npawar/repos","events_url":"https://api.github.com/users/npawar/events{/privacy}","received_events_url":"https://api.github.com/users/npawar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T01:05:03Z","updated_at":"2020-07-15T01:05:03Z","author_association":"CONTRIBUTOR","body":"closing this. https://github.com/apache/incubator-pinot/pull/5706 has the dateTimeFieldSpec related changes.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658486993/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658564898","html_url":"https://github.com/apache/pinot/issues/5490#issuecomment-658564898","issue_url":"https://api.github.com/repos/apache/pinot/issues/5490","id":658564898,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODU2NDg5OA==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T06:05:42Z","updated_at":"2020-07-15T06:05:42Z","author_association":"MEMBER","body":"@Jackie-Jiang can you please share your thoughts on this?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658564898/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658818846","html_url":"https://github.com/apache/pinot/pull/5684#issuecomment-658818846","issue_url":"https://api.github.com/repos/apache/pinot/issues/5684","id":658818846,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODgxODg0Ng==","user":{"login":"shahsank3t","id":6761317,"node_id":"MDQ6VXNlcjY3NjEzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/6761317?v=4","gravatar_id":"","url":"https://api.github.com/users/shahsank3t","html_url":"https://github.com/shahsank3t","followers_url":"https://api.github.com/users/shahsank3t/followers","following_url":"https://api.github.com/users/shahsank3t/following{/other_user}","gists_url":"https://api.github.com/users/shahsank3t/gists{/gist_id}","starred_url":"https://api.github.com/users/shahsank3t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shahsank3t/subscriptions","organizations_url":"https://api.github.com/users/shahsank3t/orgs","repos_url":"https://api.github.com/users/shahsank3t/repos","events_url":"https://api.github.com/users/shahsank3t/events{/privacy}","received_events_url":"https://api.github.com/users/shahsank3t/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T14:56:52Z","updated_at":"2020-07-15T14:56:52Z","author_association":"CONTRIBUTOR","body":"> * For cluster manager, we should be able to drill down at table level as well (apart from the tenant).\r\n\r\n@kishoreg @mayankshriv - Addressed this suggestion and added the Tables details page. Yes, currently showing the JSON object and later on can add incremental updates to it.\r\n![screencapture-localhost-8080-2020-07-15-20_18_50](https://user-images.githubusercontent.com/6761317/87560584-3fdef280-c6d9-11ea-9f0f-43a5bf25275a.png)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658818846/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658860655","html_url":"https://github.com/apache/pinot/pull/5705#issuecomment-658860655","issue_url":"https://api.github.com/repos/apache/pinot/issues/5705","id":658860655,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODg2MDY1NQ==","user":{"login":"sajjad-moradi","id":8548220,"node_id":"MDQ6VXNlcjg1NDgyMjA=","avatar_url":"https://avatars.githubusercontent.com/u/8548220?v=4","gravatar_id":"","url":"https://api.github.com/users/sajjad-moradi","html_url":"https://github.com/sajjad-moradi","followers_url":"https://api.github.com/users/sajjad-moradi/followers","following_url":"https://api.github.com/users/sajjad-moradi/following{/other_user}","gists_url":"https://api.github.com/users/sajjad-moradi/gists{/gist_id}","starred_url":"https://api.github.com/users/sajjad-moradi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sajjad-moradi/subscriptions","organizations_url":"https://api.github.com/users/sajjad-moradi/orgs","repos_url":"https://api.github.com/users/sajjad-moradi/repos","events_url":"https://api.github.com/users/sajjad-moradi/events{/privacy}","received_events_url":"https://api.github.com/users/sajjad-moradi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T16:19:40Z","updated_at":"2020-07-15T16:19:40Z","author_association":"CONTRIBUTOR","body":"> An ECONNREFUSED situation (indicating that the remote server refused connection) means that the pinot-server process on the server is not running.\r\n> It will happen very quickly (the kernel will return the error), definitely much quicker than any response from other requests for other servers. So, when the broker gets notified of a connection request failure, it is likely the first response seen in the map of responses.\r\n> \r\n> If the pinot-server process has gone down, then it is likely the case that we have not gotten notification from Helix as yet (otherwise, we would have taken down the server from the routing table and would not be routing to that server).\r\n> \r\n> So, we are trying to address a window between the time the server went down, and the time we get notified by Helix.\r\n> \r\n> True, Helix can sometimes take longer time to notify (depending on zookeeper speed).\r\n> \r\n> It is good to note in the PR that this is the case we are addressing.\r\n\r\nThat's true. That's the issue that we faced and we want to prevent that, but please note that we're catching not only connection refused exception but all types of exceptions in `submitQuery()` and adding the exception stack trace to the returned broker response will help debugging for other issues as well.\r\n```java\r\n    for (Map.Entry<ServerRoutingInstance, InstanceRequest> entry : requestMap.entrySet()) {\r\n      ServerRoutingInstance serverRoutingInstance = entry.getKey();\r\n      try {\r\n        _serverChannels.sendRequest(serverRoutingInstance, entry.getValue());\r\n        asyncQueryResponse.markRequestSubmitted(serverRoutingInstance);\r\n      } catch (Exception e) {\r\n        LOGGER.error(\"Caught exception while sending request {} to server: {}, marking query failed\", requestId,\r\n            serverRoutingInstance, e);\r\n        _brokerMetrics.addMeteredTableValue(rawTableName, BrokerMeter.REQUEST_SEND_EXCEPTIONS, 1);\r\n        asyncQueryResponse.setBrokerRequestSendException(e);\r\n        asyncQueryResponse.markQueryFailed();\r\n        break;\r\n      }\r\n    }\r\n```","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658860655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658900020","html_url":"https://github.com/apache/pinot/pull/5706#issuecomment-658900020","issue_url":"https://api.github.com/repos/apache/pinot/issues/5706","id":658900020,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODkwMDAyMA==","user":{"login":"npawar","id":19693933,"node_id":"MDQ6VXNlcjE5NjkzOTMz","avatar_url":"https://avatars.githubusercontent.com/u/19693933?v=4","gravatar_id":"","url":"https://api.github.com/users/npawar","html_url":"https://github.com/npawar","followers_url":"https://api.github.com/users/npawar/followers","following_url":"https://api.github.com/users/npawar/following{/other_user}","gists_url":"https://api.github.com/users/npawar/gists{/gist_id}","starred_url":"https://api.github.com/users/npawar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/npawar/subscriptions","organizations_url":"https://api.github.com/users/npawar/orgs","repos_url":"https://api.github.com/users/npawar/repos","events_url":"https://api.github.com/users/npawar/events{/privacy}","received_events_url":"https://api.github.com/users/npawar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T17:28:37Z","updated_at":"2020-07-15T17:28:37Z","author_association":"CONTRIBUTOR","body":"> Recommend using exception to pass the failure message instead of passing in a logger for both simplicity and better control on the logging level\r\n\r\nThe Schema validation code already was using a logger, and I was just trying to work around that. I'm not sure why it was done this way in Schema in the first place. I can change it to exception based throughout the Schema validation code path","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658900020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658980081","html_url":"https://github.com/apache/pinot/issues/5691#issuecomment-658980081","issue_url":"https://api.github.com/repos/apache/pinot/issues/5691","id":658980081,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODk4MDA4MQ==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T20:04:28Z","updated_at":"2020-07-15T20:04:28Z","author_association":"CONTRIBUTOR","body":"#5708 ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658980081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658996765","html_url":"https://github.com/apache/pinot/pull/5667#issuecomment-658996765","issue_url":"https://api.github.com/repos/apache/pinot/issues/5667","id":658996765,"node_id":"MDEyOklzc3VlQ29tbWVudDY1ODk5Njc2NQ==","user":{"login":"siddharthteotia","id":2150694,"node_id":"MDQ6VXNlcjIxNTA2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2150694?v=4","gravatar_id":"","url":"https://api.github.com/users/siddharthteotia","html_url":"https://github.com/siddharthteotia","followers_url":"https://api.github.com/users/siddharthteotia/followers","following_url":"https://api.github.com/users/siddharthteotia/following{/other_user}","gists_url":"https://api.github.com/users/siddharthteotia/gists{/gist_id}","starred_url":"https://api.github.com/users/siddharthteotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siddharthteotia/subscriptions","organizations_url":"https://api.github.com/users/siddharthteotia/orgs","repos_url":"https://api.github.com/users/siddharthteotia/repos","events_url":"https://api.github.com/users/siddharthteotia/events{/privacy}","received_events_url":"https://api.github.com/users/siddharthteotia/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T20:38:00Z","updated_at":"2020-07-15T20:38:00Z","author_association":"CONTRIBUTOR","body":"@Jackie-Jiang, addressed the review comments.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/658996765/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659050165","html_url":"https://github.com/apache/pinot/pull/5706#issuecomment-659050165","issue_url":"https://api.github.com/repos/apache/pinot/issues/5706","id":659050165,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTA1MDE2NQ==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-15T22:37:03Z","updated_at":"2020-07-15T22:37:03Z","author_association":"CONTRIBUTOR","body":"> > Recommend using exception to pass the failure message instead of passing in a logger for both simplicity and better control on the logging level\r\n> \r\n> The Schema validation code already was using a logger, and I was just trying to work around that. I'm not sure why it was done this way in Schema in the first place. I can change it to exception based throughout the Schema validation code path\r\n\r\nYes, ideally we should also change Schema validation to exception based to prevent the unnecessary error log","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659050165/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659532251","html_url":"https://github.com/apache/pinot/issues/4854#issuecomment-659532251","issue_url":"https://api.github.com/repos/apache/pinot/issues/4854","id":659532251,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTUzMjI1MQ==","user":{"login":"saileshnankani","id":30644225,"node_id":"MDQ6VXNlcjMwNjQ0MjI1","avatar_url":"https://avatars.githubusercontent.com/u/30644225?v=4","gravatar_id":"","url":"https://api.github.com/users/saileshnankani","html_url":"https://github.com/saileshnankani","followers_url":"https://api.github.com/users/saileshnankani/followers","following_url":"https://api.github.com/users/saileshnankani/following{/other_user}","gists_url":"https://api.github.com/users/saileshnankani/gists{/gist_id}","starred_url":"https://api.github.com/users/saileshnankani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/saileshnankani/subscriptions","organizations_url":"https://api.github.com/users/saileshnankani/orgs","repos_url":"https://api.github.com/users/saileshnankani/repos","events_url":"https://api.github.com/users/saileshnankani/events{/privacy}","received_events_url":"https://api.github.com/users/saileshnankani/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-16T16:41:01Z","updated_at":"2020-07-16T16:41:01Z","author_association":"CONTRIBUTOR","body":"I'm working on it","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659532251/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659534618","html_url":"https://github.com/apache/pinot/issues/5559#issuecomment-659534618","issue_url":"https://api.github.com/repos/apache/pinot/issues/5559","id":659534618,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTUzNDYxOA==","user":{"login":"npawar","id":19693933,"node_id":"MDQ6VXNlcjE5NjkzOTMz","avatar_url":"https://avatars.githubusercontent.com/u/19693933?v=4","gravatar_id":"","url":"https://api.github.com/users/npawar","html_url":"https://github.com/npawar","followers_url":"https://api.github.com/users/npawar/followers","following_url":"https://api.github.com/users/npawar/following{/other_user}","gists_url":"https://api.github.com/users/npawar/gists{/gist_id}","starred_url":"https://api.github.com/users/npawar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/npawar/subscriptions","organizations_url":"https://api.github.com/users/npawar/orgs","repos_url":"https://api.github.com/users/npawar/repos","events_url":"https://api.github.com/users/npawar/events{/privacy}","received_events_url":"https://api.github.com/users/npawar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-16T16:45:18Z","updated_at":"2020-07-16T16:45:18Z","author_association":"CONTRIBUTOR","body":"@Sreemanth take a look at PinotHelixResourceManager#addTable. In that method, if you trace path for realtime, you will see the call to ensureRealtimeClusterIsSetUp. That call will setup the realtime table again. Please ping me if you have any questions","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659534618/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659587696","html_url":"https://github.com/apache/pinot/pull/5667#issuecomment-659587696","issue_url":"https://api.github.com/repos/apache/pinot/issues/5667","id":659587696,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTU4NzY5Ng==","user":{"login":"siddharthteotia","id":2150694,"node_id":"MDQ6VXNlcjIxNTA2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2150694?v=4","gravatar_id":"","url":"https://api.github.com/users/siddharthteotia","html_url":"https://github.com/siddharthteotia","followers_url":"https://api.github.com/users/siddharthteotia/followers","following_url":"https://api.github.com/users/siddharthteotia/following{/other_user}","gists_url":"https://api.github.com/users/siddharthteotia/gists{/gist_id}","starred_url":"https://api.github.com/users/siddharthteotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siddharthteotia/subscriptions","organizations_url":"https://api.github.com/users/siddharthteotia/orgs","repos_url":"https://api.github.com/users/siddharthteotia/repos","events_url":"https://api.github.com/users/siddharthteotia/events{/privacy}","received_events_url":"https://api.github.com/users/siddharthteotia/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-16T18:21:18Z","updated_at":"2020-07-16T18:21:18Z","author_association":"CONTRIBUTOR","body":"@Jackie-Jiang , I have cleaned up the code in default column handler. The integration test failure depends on a small fix in PR https://github.com/apache/incubator-pinot/pull/5710/. I need to rebase on that. Please take a look at both. Thanks.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659587696/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659596105","html_url":"https://github.com/apache/pinot/issues/5490#issuecomment-659596105","issue_url":"https://api.github.com/repos/apache/pinot/issues/5490","id":659596105,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTU5NjEwNQ==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-16T18:38:05Z","updated_at":"2020-07-16T18:38:05Z","author_association":"CONTRIBUTOR","body":"Here are some high level goals we want to achieve, feel free to leave comments: https://docs.google.com/document/d/1QweQObrwGrcMR47dKzg1ZQpQkj4udHttkNm5kcMVBQ8/edit?usp=sharing","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659596105/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659596321","html_url":"https://github.com/apache/pinot/pull/5706#issuecomment-659596321","issue_url":"https://api.github.com/repos/apache/pinot/issues/5706","id":659596321,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTU5NjMyMQ==","user":{"login":"npawar","id":19693933,"node_id":"MDQ6VXNlcjE5NjkzOTMz","avatar_url":"https://avatars.githubusercontent.com/u/19693933?v=4","gravatar_id":"","url":"https://api.github.com/users/npawar","html_url":"https://github.com/npawar","followers_url":"https://api.github.com/users/npawar/followers","following_url":"https://api.github.com/users/npawar/following{/other_user}","gists_url":"https://api.github.com/users/npawar/gists{/gist_id}","starred_url":"https://api.github.com/users/npawar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/npawar/subscriptions","organizations_url":"https://api.github.com/users/npawar/orgs","repos_url":"https://api.github.com/users/npawar/repos","events_url":"https://api.github.com/users/npawar/events{/privacy}","received_events_url":"https://api.github.com/users/npawar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-16T18:38:35Z","updated_at":"2020-07-16T18:38:35Z","author_association":"CONTRIBUTOR","body":"> > > Recommend using exception to pass the failure message instead of passing in a logger for both simplicity and better control on the logging level\r\n> > \r\n> > \r\n> > The Schema validation code already was using a logger, and I was just trying to work around that. I'm not sure why it was done this way in Schema in the first place. I can change it to exception based throughout the Schema validation code path\r\n> \r\n> Yes, ideally we should also change Schema validation to exception based to prevent the unnecessary error log\r\n\r\nChanged the PR to use exceptions instead of logger in all of schema validations. @Jackie-Jiang ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659596321/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659611328","html_url":"https://github.com/apache/pinot/pull/5710#issuecomment-659611328","issue_url":"https://api.github.com/repos/apache/pinot/issues/5710","id":659611328,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTYxMTMyOA==","user":{"login":"siddharthteotia","id":2150694,"node_id":"MDQ6VXNlcjIxNTA2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2150694?v=4","gravatar_id":"","url":"https://api.github.com/users/siddharthteotia","html_url":"https://github.com/siddharthteotia","followers_url":"https://api.github.com/users/siddharthteotia/followers","following_url":"https://api.github.com/users/siddharthteotia/following{/other_user}","gists_url":"https://api.github.com/users/siddharthteotia/gists{/gist_id}","starred_url":"https://api.github.com/users/siddharthteotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siddharthteotia/subscriptions","organizations_url":"https://api.github.com/users/siddharthteotia/orgs","repos_url":"https://api.github.com/users/siddharthteotia/repos","events_url":"https://api.github.com/users/siddharthteotia/events{/privacy}","received_events_url":"https://api.github.com/users/siddharthteotia/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-16T19:07:01Z","updated_at":"2020-07-16T19:07:01Z","author_association":"CONTRIBUTOR","body":"@Jackie-Jiang , addressed the review comments. ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659611328/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659734915","html_url":"https://github.com/apache/pinot/pull/5709#issuecomment-659734915","issue_url":"https://api.github.com/repos/apache/pinot/issues/5709","id":659734915,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTczNDkxNQ==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-16T23:35:37Z","updated_at":"2020-07-16T23:35:37Z","author_association":"CONTRIBUTOR","body":"@mayankshriv @siddharthteotia @mcvsubbu Addressed the comments, please take another look","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659734915/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659762915","html_url":"https://github.com/apache/pinot/pull/5709#issuecomment-659762915","issue_url":"https://api.github.com/repos/apache/pinot/issues/5709","id":659762915,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTc2MjkxNQ==","user":{"login":"siddharthteotia","id":2150694,"node_id":"MDQ6VXNlcjIxNTA2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2150694?v=4","gravatar_id":"","url":"https://api.github.com/users/siddharthteotia","html_url":"https://github.com/siddharthteotia","followers_url":"https://api.github.com/users/siddharthteotia/followers","following_url":"https://api.github.com/users/siddharthteotia/following{/other_user}","gists_url":"https://api.github.com/users/siddharthteotia/gists{/gist_id}","starred_url":"https://api.github.com/users/siddharthteotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siddharthteotia/subscriptions","organizations_url":"https://api.github.com/users/siddharthteotia/orgs","repos_url":"https://api.github.com/users/siddharthteotia/repos","events_url":"https://api.github.com/users/siddharthteotia/events{/privacy}","received_events_url":"https://api.github.com/users/siddharthteotia/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-17T00:56:22Z","updated_at":"2020-07-17T00:56:22Z","author_association":"CONTRIBUTOR","body":"So to be on the same page, we are doing the following:\r\n\r\n1. Until now, the segment load code generated ColumnMinMaxValue **only for dictionary encoded columns.** This was then persisted in PropertiesConfiguration and made available to ColumnMetatadata and used for pruning. The default min-max value generator mode was for TIME column until now and this PR changes it to ALL. May be we should have a mode like DIMENSIONS ?\r\n\r\n2. This PR adds the support for generating the min-max value for **both raw and dictionary encoded columns** during segment generation and persisting in SegmentMetadata. The generator mode used here is ALL?\r\n\r\n3. Now that going forward we will have min-max available in SegmentMetadata, we detect that in segment load code and return. \r\n\r\n@Jackie-Jiang , would be good to add/edit anything I may have missed. ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659762915/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659780203","html_url":"https://github.com/apache/pinot/pull/5709#issuecomment-659780203","issue_url":"https://api.github.com/repos/apache/pinot/issues/5709","id":659780203,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTc4MDIwMw==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-17T01:43:57Z","updated_at":"2020-07-17T01:43:57Z","author_association":"CONTRIBUTOR","body":"@siddharthteotia \r\n\r\n> 1. Until now, the segment load code generated ColumnMinMaxValue **only for dictionary encoded columns.** This was then persisted in PropertiesConfiguration and made available to ColumnMetatadata and used for pruning. The default min-max value generator mode was for TIME column until now and this PR changes it to ALL. May be we should have a mode like DIMENSIONS ?\r\n\r\nWe made it tier-based: TIME -> DIMENSION -> METRICS\r\nColumnMinMaxValueGenerator serves as a backup to add min/max value for existing segments. All new segments will have min/max value for all columns (both dictionary-encoded and raw).\r\n\r\n> 2. This PR adds the support for generating the min-max value for **both raw and dictionary encoded columns** during segment generation and persisting in SegmentMetadata. The generator mode used here is ALL?\r\n\r\nColumnMinMaxValueGeneratorMode only associates with ColumnMinMaxValueGenerator, which generates column min/max value while loading the segments. It does not apply to the segment creation.\r\n\r\n> 3. Now that going forward we will have min-max available in SegmentMetadata, we detect that in segment load code and return.\r\n\r\nYes. ColumnMinMaxValueGenerator generates column min/max value only when they are not available in the metadata.\r\n\r\n> However, not sure what is special about leading or trailing special character that PropertiesConfiguration can't handle. Would we have to continue to make the \"isValidPropertyValue\" code more robust?\r\n\r\nLeading and trailing whitespace will be trimmed by PropertiesConfiguration; list separator is preserved for the list. Other than that, there should be no rules for `isValidPropertyValue`. ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659780203/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659799835","html_url":"https://github.com/apache/pinot/pull/5654#issuecomment-659799835","issue_url":"https://api.github.com/repos/apache/pinot/issues/5654","id":659799835,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTc5OTgzNQ==","user":{"login":"yupeng9","id":13425258,"node_id":"MDQ6VXNlcjEzNDI1MjU4","avatar_url":"https://avatars.githubusercontent.com/u/13425258?v=4","gravatar_id":"","url":"https://api.github.com/users/yupeng9","html_url":"https://github.com/yupeng9","followers_url":"https://api.github.com/users/yupeng9/followers","following_url":"https://api.github.com/users/yupeng9/following{/other_user}","gists_url":"https://api.github.com/users/yupeng9/gists{/gist_id}","starred_url":"https://api.github.com/users/yupeng9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yupeng9/subscriptions","organizations_url":"https://api.github.com/users/yupeng9/orgs","repos_url":"https://api.github.com/users/yupeng9/repos","events_url":"https://api.github.com/users/yupeng9/events{/privacy}","received_events_url":"https://api.github.com/users/yupeng9/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-17T02:37:23Z","updated_at":"2020-07-17T02:37:23Z","author_association":"CONTRIBUTOR","body":"@Jackie-Jiang I changed the relationship functions to work only for the Geometry objects, to align with Presto's behavior. PTAL","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659799835/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659989863","html_url":"https://github.com/apache/pinot/issues/5666#issuecomment-659989863","issue_url":"https://api.github.com/repos/apache/pinot/issues/5666","id":659989863,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTk4OTg2Mw==","user":{"login":"siddharthteotia","id":2150694,"node_id":"MDQ6VXNlcjIxNTA2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2150694?v=4","gravatar_id":"","url":"https://api.github.com/users/siddharthteotia","html_url":"https://github.com/siddharthteotia","followers_url":"https://api.github.com/users/siddharthteotia/followers","following_url":"https://api.github.com/users/siddharthteotia/following{/other_user}","gists_url":"https://api.github.com/users/siddharthteotia/gists{/gist_id}","starred_url":"https://api.github.com/users/siddharthteotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siddharthteotia/subscriptions","organizations_url":"https://api.github.com/users/siddharthteotia/orgs","repos_url":"https://api.github.com/users/siddharthteotia/repos","events_url":"https://api.github.com/users/siddharthteotia/events{/privacy}","received_events_url":"https://api.github.com/users/siddharthteotia/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-17T09:23:06Z","updated_at":"2020-07-17T09:23:06Z","author_association":"CONTRIBUTOR","body":"@pradeepgv42 , I have merged the support for text index on dictionary encoded columns. Please give it a try and let me know if you face any issues. Thanks","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659989863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659990115","html_url":"https://github.com/apache/pinot/issues/5666#issuecomment-659990115","issue_url":"https://api.github.com/repos/apache/pinot/issues/5666","id":659990115,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTk5MDExNQ==","user":{"login":"siddharthteotia","id":2150694,"node_id":"MDQ6VXNlcjIxNTA2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2150694?v=4","gravatar_id":"","url":"https://api.github.com/users/siddharthteotia","html_url":"https://github.com/siddharthteotia","followers_url":"https://api.github.com/users/siddharthteotia/followers","following_url":"https://api.github.com/users/siddharthteotia/following{/other_user}","gists_url":"https://api.github.com/users/siddharthteotia/gists{/gist_id}","starred_url":"https://api.github.com/users/siddharthteotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/siddharthteotia/subscriptions","organizations_url":"https://api.github.com/users/siddharthteotia/orgs","repos_url":"https://api.github.com/users/siddharthteotia/repos","events_url":"https://api.github.com/users/siddharthteotia/events{/privacy}","received_events_url":"https://api.github.com/users/siddharthteotia/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-17T09:23:34Z","updated_at":"2020-07-17T09:23:34Z","author_association":"CONTRIBUTOR","body":"PR https://github.com/apache/incubator-pinot/pull/5667","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/659990115/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660224442","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-660224442","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":660224442,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MDIyNDQ0Mg==","user":{"login":"snleee","id":27253407,"node_id":"MDQ6VXNlcjI3MjUzNDA3","avatar_url":"https://avatars.githubusercontent.com/u/27253407?v=4","gravatar_id":"","url":"https://api.github.com/users/snleee","html_url":"https://github.com/snleee","followers_url":"https://api.github.com/users/snleee/followers","following_url":"https://api.github.com/users/snleee/following{/other_user}","gists_url":"https://api.github.com/users/snleee/gists{/gist_id}","starred_url":"https://api.github.com/users/snleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snleee/subscriptions","organizations_url":"https://api.github.com/users/snleee/orgs","repos_url":"https://api.github.com/users/snleee/repos","events_url":"https://api.github.com/users/snleee/events{/privacy}","received_events_url":"https://api.github.com/users/snleee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-17T16:59:16Z","updated_at":"2020-07-17T16:59:32Z","author_association":"CONTRIBUTOR","body":"To see the more explanation about the batch upload protocol:\r\nhttps://docs.google.com/document/d/1-AKCfXNXdoNjFIvJ87wjWwFM_38gS0NCwFrIYjYsqp8/edit#\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660224442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660376481","html_url":"https://github.com/apache/pinot/pull/5686#issuecomment-660376481","issue_url":"https://api.github.com/repos/apache/pinot/issues/5686","id":660376481,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MDM3NjQ4MQ==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-17T23:15:51Z","updated_at":"2020-07-17T23:15:51Z","author_association":"CONTRIBUTOR","body":"> The PR summary section does not capture that it is also doing a big refactor for Combine operators. Would be good to reflect that in the PR summary so as to make it easy for future navigation.\r\n\r\n@mayankshriv Good point. Added","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660376481/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660528171","html_url":"https://github.com/apache/pinot/issues/5666#issuecomment-660528171","issue_url":"https://api.github.com/repos/apache/pinot/issues/5666","id":660528171,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MDUyODE3MQ==","user":{"login":"pradeepgv42","id":66842697,"node_id":"MDQ6VXNlcjY2ODQyNjk3","avatar_url":"https://avatars.githubusercontent.com/u/66842697?v=4","gravatar_id":"","url":"https://api.github.com/users/pradeepgv42","html_url":"https://github.com/pradeepgv42","followers_url":"https://api.github.com/users/pradeepgv42/followers","following_url":"https://api.github.com/users/pradeepgv42/following{/other_user}","gists_url":"https://api.github.com/users/pradeepgv42/gists{/gist_id}","starred_url":"https://api.github.com/users/pradeepgv42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pradeepgv42/subscriptions","organizations_url":"https://api.github.com/users/pradeepgv42/orgs","repos_url":"https://api.github.com/users/pradeepgv42/repos","events_url":"https://api.github.com/users/pradeepgv42/events{/privacy}","received_events_url":"https://api.github.com/users/pradeepgv42/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-18T19:13:04Z","updated_at":"2020-07-18T19:13:04Z","author_association":"CONTRIBUTOR","body":"Thanks a lot, will give it a try and let you know","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660528171/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660538878","html_url":"https://github.com/apache/pinot/issues/5647#issuecomment-660538878","issue_url":"https://api.github.com/repos/apache/pinot/issues/5647","id":660538878,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MDUzODg3OA==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-18T20:36:27Z","updated_at":"2020-07-18T20:36:27Z","author_association":"CONTRIBUTOR","body":"Assuming there is only one Pinot schema, and we don't have to do any \"join\" across two streams, here is one approach I can  think of:\r\n- Change our software so that we are not dependent on table name being the first part of an LLC segment name. This may not be too hard, We may just need to send the table name in the segment completion protocol requests and responses\r\n- Consume each stream independently, naming the segments differently for each stream. So, we may have segment names for stream A (with say, 4 partitions) starting with the string \"StreamA\" and segments from stream 2 (with, say 7 partitions), starting with the string \"StreamB\".\r\n- Do the capacity calculation, ,etc. just like we do for two tables, each consuming one stream. Complete the segments independently for the two streams, but add the completed segments (and the consuming segments) to the same table. So, we may have 3 servers consuming StreamA and 5 servers consuming StreamB but that is ok.\r\n\r\nNow, I have no clue what to do if the two schemas are different and we need to join the streams.\r\n\r\n@npawar , @kishoreg I can write this up in a design doc if this acceptable as a feature ask. If you think join is a feature soon to come, then we need to step back and re-think the approach.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660538878/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660555138","html_url":"https://github.com/apache/pinot/pull/5714#issuecomment-660555138","issue_url":"https://api.github.com/repos/apache/pinot/issues/5714","id":660555138,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MDU1NTEzOA==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-18T23:06:17Z","updated_at":"2020-07-18T23:06:17Z","author_association":"CONTRIBUTOR","body":"> This will prevent people from updating the existing tables with dot in the table name\r\n\r\nTrue, moved the table name check inside table creation.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660555138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660620092","html_url":"https://github.com/apache/pinot/issues/5716#issuecomment-660620092","issue_url":"https://api.github.com/repos/apache/pinot/issues/5716","id":660620092,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MDYyMDA5Mg==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-19T10:07:04Z","updated_at":"2020-07-19T10:07:04Z","author_association":"CONTRIBUTOR","body":"cc @KKcorps , @kishoreg , @Jackie-Jiang ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660620092/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660620325","html_url":"https://github.com/apache/pinot/issues/5716#issuecomment-660620325","issue_url":"https://api.github.com/repos/apache/pinot/issues/5716","id":660620325,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MDYyMDMyNQ==","user":{"login":"KKcorps","id":5559703,"node_id":"MDQ6VXNlcjU1NTk3MDM=","avatar_url":"https://avatars.githubusercontent.com/u/5559703?v=4","gravatar_id":"","url":"https://api.github.com/users/KKcorps","html_url":"https://github.com/KKcorps","followers_url":"https://api.github.com/users/KKcorps/followers","following_url":"https://api.github.com/users/KKcorps/following{/other_user}","gists_url":"https://api.github.com/users/KKcorps/gists{/gist_id}","starred_url":"https://api.github.com/users/KKcorps/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KKcorps/subscriptions","organizations_url":"https://api.github.com/users/KKcorps/orgs","repos_url":"https://api.github.com/users/KKcorps/repos","events_url":"https://api.github.com/users/KKcorps/events{/privacy}","received_events_url":"https://api.github.com/users/KKcorps/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-19T10:09:19Z","updated_at":"2020-07-19T10:09:19Z","author_association":"CONTRIBUTOR","body":"This will also help in supporting integration with various UI tools which query using format - [table].[column] AS [alias]","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/660620325/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/661601146","html_url":"https://github.com/apache/pinot/issues/5721#issuecomment-661601146","issue_url":"https://api.github.com/repos/apache/pinot/issues/5721","id":661601146,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MTYwMTE0Ng==","user":{"login":"shahsank3t","id":6761317,"node_id":"MDQ6VXNlcjY3NjEzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/6761317?v=4","gravatar_id":"","url":"https://api.github.com/users/shahsank3t","html_url":"https://github.com/shahsank3t","followers_url":"https://api.github.com/users/shahsank3t/followers","following_url":"https://api.github.com/users/shahsank3t/following{/other_user}","gists_url":"https://api.github.com/users/shahsank3t/gists{/gist_id}","starred_url":"https://api.github.com/users/shahsank3t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shahsank3t/subscriptions","organizations_url":"https://api.github.com/users/shahsank3t/orgs","repos_url":"https://api.github.com/users/shahsank3t/repos","events_url":"https://api.github.com/users/shahsank3t/events{/privacy}","received_events_url":"https://api.github.com/users/shahsank3t/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T03:06:31Z","updated_at":"2020-07-21T03:06:31Z","author_association":"CONTRIBUTOR","body":"We already have breadcrumbs at the top bar so it's gonna be best to add a expand/collapse button on the sidebar. I'll work on it. ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/661601146/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/661603644","html_url":"https://github.com/apache/pinot/issues/5721#issuecomment-661603644","issue_url":"https://api.github.com/repos/apache/pinot/issues/5721","id":661603644,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MTYwMzY0NA==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T03:14:02Z","updated_at":"2020-07-21T03:14:02Z","author_association":"CONTRIBUTOR","body":"> We already have breadcrumbs at the top bar so it's gonna be best to add a expand/collapse button on the sidebar. I'll work on it.\r\n\r\nMany Thanks!","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/661603644/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/661665986","html_url":"https://github.com/apache/pinot/pull/5394#issuecomment-661665986","issue_url":"https://api.github.com/repos/apache/pinot/issues/5394","id":661665986,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MTY2NTk4Ng==","user":{"login":"jamesyfshao","id":1062786,"node_id":"MDQ6VXNlcjEwNjI3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/1062786?v=4","gravatar_id":"","url":"https://api.github.com/users/jamesyfshao","html_url":"https://github.com/jamesyfshao","followers_url":"https://api.github.com/users/jamesyfshao/followers","following_url":"https://api.github.com/users/jamesyfshao/following{/other_user}","gists_url":"https://api.github.com/users/jamesyfshao/gists{/gist_id}","starred_url":"https://api.github.com/users/jamesyfshao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jamesyfshao/subscriptions","organizations_url":"https://api.github.com/users/jamesyfshao/orgs","repos_url":"https://api.github.com/users/jamesyfshao/repos","events_url":"https://api.github.com/users/jamesyfshao/events{/privacy}","received_events_url":"https://api.github.com/users/jamesyfshao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T06:39:19Z","updated_at":"2020-07-21T06:39:19Z","author_association":"CONTRIBUTOR","body":"> @jamesyfshao can we take the discussion to the design doc? I had asked a few questions there, but they are not resolved yet. Please see my comments on the \"New Interface\" section.\r\n> \r\n> https://docs.google.com/document/d/1SFFir7ByxCff-aVYxQeTHpNhPXeP5q7P4g_6O2iNGgU/edit\r\n\r\nHi @mcvsubbu sorry for the late replies, a bit busy last week. I have addressed your comment in the design docs again. Please feel free to see if those comments need further clarification. \r\n\r\nSorry I didn't address them sooner mostly because I am trying to address the clarification issues in the code documentation instead of design docs. I have been spending a bit more efforts on making sure the method interface naming are clear and comments in the code are accurate because I feel it is always easier for future Pinot maintainer to understand the actual logic of codes by reading how it interacts with other components and comments in the codes vs finding a particular section that links in some external design docs. I also feel this feature is very new and expected to continue evolving within the foreseeable future. This means that designs of actual logics will continue to changes and comments in codes is most likely to be more up-to-date compared to a static design doc. These are my reasoning for trying to put more emphasis on the comments instead of listing all API interfaces in a design doc. ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/661665986/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/661797259","html_url":"https://github.com/apache/pinot/issues/5721#issuecomment-661797259","issue_url":"https://api.github.com/repos/apache/pinot/issues/5721","id":661797259,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MTc5NzI1OQ==","user":{"login":"shahsank3t","id":6761317,"node_id":"MDQ6VXNlcjY3NjEzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/6761317?v=4","gravatar_id":"","url":"https://api.github.com/users/shahsank3t","html_url":"https://github.com/shahsank3t","followers_url":"https://api.github.com/users/shahsank3t/followers","following_url":"https://api.github.com/users/shahsank3t/following{/other_user}","gists_url":"https://api.github.com/users/shahsank3t/gists{/gist_id}","starred_url":"https://api.github.com/users/shahsank3t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shahsank3t/subscriptions","organizations_url":"https://api.github.com/users/shahsank3t/orgs","repos_url":"https://api.github.com/users/shahsank3t/repos","events_url":"https://api.github.com/users/shahsank3t/events{/privacy}","received_events_url":"https://api.github.com/users/shahsank3t/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T11:22:51Z","updated_at":"2020-07-21T11:22:51Z","author_association":"CONTRIBUTOR","body":"@fx19880617 - Raised a PR https://github.com/apache/incubator-pinot/pull/5723 and also attached the images for the reference.\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/661797259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662000020","html_url":"https://github.com/apache/pinot/pull/5722#issuecomment-662000020","issue_url":"https://api.github.com/repos/apache/pinot/issues/5722","id":662000020,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjAwMDAyMA==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T17:29:37Z","updated_at":"2020-07-21T17:29:37Z","author_association":"CONTRIBUTOR","body":"> Does it make sense to move the map inside IndexContainer and provide methods to get/set forward index, etc.?\r\n\r\n@mcvsubbu We want to group all indexes together for each column, and fetch/update them all together to reduce the unnecessary map lookups","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662000020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662041528","html_url":"https://github.com/apache/pinot/pull/5724#issuecomment-662041528","issue_url":"https://api.github.com/repos/apache/pinot/issues/5724","id":662041528,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjA0MTUyOA==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T18:47:37Z","updated_at":"2020-07-21T18:47:37Z","author_association":"CONTRIBUTOR","body":"If I understand this right, we are disabling quota check on brokers dynamically. Assuming such dynamic enable/disable is a requirement, why not provide a (rest) API to do it? Why use helix messages?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662041528/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662066684","html_url":"https://github.com/apache/pinot/pull/5724#issuecomment-662066684","issue_url":"https://api.github.com/repos/apache/pinot/issues/5724","id":662066684,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjA2NjY4NA==","user":{"login":"jackjlli","id":35080149,"node_id":"MDQ6VXNlcjM1MDgwMTQ5","avatar_url":"https://avatars.githubusercontent.com/u/35080149?v=4","gravatar_id":"","url":"https://api.github.com/users/jackjlli","html_url":"https://github.com/jackjlli","followers_url":"https://api.github.com/users/jackjlli/followers","following_url":"https://api.github.com/users/jackjlli/following{/other_user}","gists_url":"https://api.github.com/users/jackjlli/gists{/gist_id}","starred_url":"https://api.github.com/users/jackjlli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jackjlli/subscriptions","organizations_url":"https://api.github.com/users/jackjlli/orgs","repos_url":"https://api.github.com/users/jackjlli/repos","events_url":"https://api.github.com/users/jackjlli/events{/privacy}","received_events_url":"https://api.github.com/users/jackjlli/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T19:39:07Z","updated_at":"2020-07-21T19:39:07Z","author_association":"MEMBER","body":"> If I understand this right, we are disabling quota check on brokers dynamically. Assuming such dynamic enable/disable is a requirement, why not provide a (rest) API to do it? Why use helix messages?\r\n\r\nThe reason why I put the API to pinot controller and send a Helix message to broker is that we've already been using this way to update query quotas to brokers (when table config is updated). \r\nPlus, all the logic of cluster management should all be in one place, which is in Pinot controller. ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662066684/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662113270","html_url":"https://github.com/apache/pinot/pull/5724#issuecomment-662113270","issue_url":"https://api.github.com/repos/apache/pinot/issues/5724","id":662113270,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjExMzI3MA==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T21:22:02Z","updated_at":"2020-07-21T21:22:02Z","author_association":"CONTRIBUTOR","body":"It will also be confusing if the broker restarts after receiving the message for any reason. It will stop checking for quotas, making debugging harder.\r\nWhy not use instance config to set/unset a flag to disable qps quotas?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662113270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662134507","html_url":"https://github.com/apache/pinot/pull/5724#issuecomment-662134507","issue_url":"https://api.github.com/repos/apache/pinot/issues/5724","id":662134507,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjEzNDUwNw==","user":{"login":"jackjlli","id":35080149,"node_id":"MDQ6VXNlcjM1MDgwMTQ5","avatar_url":"https://avatars.githubusercontent.com/u/35080149?v=4","gravatar_id":"","url":"https://api.github.com/users/jackjlli","html_url":"https://github.com/jackjlli","followers_url":"https://api.github.com/users/jackjlli/followers","following_url":"https://api.github.com/users/jackjlli/following{/other_user}","gists_url":"https://api.github.com/users/jackjlli/gists{/gist_id}","starred_url":"https://api.github.com/users/jackjlli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jackjlli/subscriptions","organizations_url":"https://api.github.com/users/jackjlli/orgs","repos_url":"https://api.github.com/users/jackjlli/repos","events_url":"https://api.github.com/users/jackjlli/events{/privacy}","received_events_url":"https://api.github.com/users/jackjlli/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T22:15:24Z","updated_at":"2020-07-21T22:15:35Z","author_association":"MEMBER","body":"> It will also be confusing if the broker restarts after receiving the message for any reason. It will stop checking for quotas, making debugging harder.\r\n> Why not use instance config to set/unset a flag to disable qps quotas?\r\n\r\nUpdated the PR so that the state gets persisted to broker's instance config.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662134507/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662145687","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662145687","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662145687,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjE0NTY4Nw==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T22:48:41Z","updated_at":"2020-07-21T22:48:41Z","author_association":"CONTRIBUTOR","body":"> I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> \r\n> This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n\r\n@mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662145687/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662155835","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662155835","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662155835,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjE1NTgzNQ==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T23:22:37Z","updated_at":"2020-07-21T23:22:37Z","author_association":"CONTRIBUTOR","body":"> > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> \r\n> @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n\r\nIf we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n\r\nBut then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want. \r\n\r\nthat way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662155835/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662161988","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662161988","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662161988,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjE2MTk4OA==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T23:45:10Z","updated_at":"2020-07-21T23:45:10Z","author_association":"CONTRIBUTOR","body":"> > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > \r\n> > \r\n> > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> \r\n> If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> \r\n> But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> \r\n> that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n\r\nThis API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662161988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662164187","html_url":"https://github.com/apache/pinot/pull/5724#issuecomment-662164187","issue_url":"https://api.github.com/repos/apache/pinot/issues/5724","id":662164187,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjE2NDE4Nw==","user":{"login":"jackjlli","id":35080149,"node_id":"MDQ6VXNlcjM1MDgwMTQ5","avatar_url":"https://avatars.githubusercontent.com/u/35080149?v=4","gravatar_id":"","url":"https://api.github.com/users/jackjlli","html_url":"https://github.com/jackjlli","followers_url":"https://api.github.com/users/jackjlli/followers","following_url":"https://api.github.com/users/jackjlli/following{/other_user}","gists_url":"https://api.github.com/users/jackjlli/gists{/gist_id}","starred_url":"https://api.github.com/users/jackjlli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jackjlli/subscriptions","organizations_url":"https://api.github.com/users/jackjlli/orgs","repos_url":"https://api.github.com/users/jackjlli/repos","events_url":"https://api.github.com/users/jackjlli/events{/privacy}","received_events_url":"https://api.github.com/users/jackjlli/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T23:53:39Z","updated_at":"2020-07-21T23:53:39Z","author_association":"MEMBER","body":"> Mostly minor comments.\r\n> Two things:\r\n> \r\n> 1. Should we consider accepting a broker tag name in the API to toggle rate limiting for all brokers in the tag? (as a general functionality, not specific to LinkedIn use case)\r\n> 2. Add a metric (guage) when the config is disabled, so that if it remains disabled for a long time, we can add an alert on it\r\n\r\nFor 1, I can't think of a scenario for that. But we can always add that later if necessary.\r\nFor 2, just added a broker gauge called `QUERY_RATE_LIMIT_DISABLED`.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662164187/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662164476","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662164476","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662164476,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjE2NDQ3Ng==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-21T23:54:49Z","updated_at":"2020-07-21T23:54:49Z","author_association":"MEMBER","body":"> > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > \r\n> > > \r\n> > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > \r\n> > \r\n> > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> \r\n> This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n\r\nIf thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662164476/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662186212","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662186212","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662186212,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjE4NjIxMg==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T01:16:28Z","updated_at":"2020-07-22T01:17:40Z","author_association":"CONTRIBUTOR","body":"> > > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > > \r\n> > > > \r\n> > > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > > \r\n> > > \r\n> > > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> > \r\n> > \r\n> > This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n> \r\n> If thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?\r\n\r\nThe `startBatchUpload` and `endBatchUpload` are the primitives we want to provide. I'm okay renaming them to something like `startReplacingSegments` and `endReplacingSegments`, but I don't want to make the primitives associate with any specific operation (taking an extra query param of \"operation\") because the behavior should be the same for all operations","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662186212/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662194364","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662194364","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662194364,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjE5NDM2NA==","user":{"login":"snleee","id":27253407,"node_id":"MDQ6VXNlcjI3MjUzNDA3","avatar_url":"https://avatars.githubusercontent.com/u/27253407?v=4","gravatar_id":"","url":"https://api.github.com/users/snleee","html_url":"https://github.com/snleee","followers_url":"https://api.github.com/users/snleee/followers","following_url":"https://api.github.com/users/snleee/following{/other_user}","gists_url":"https://api.github.com/users/snleee/gists{/gist_id}","starred_url":"https://api.github.com/users/snleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snleee/subscriptions","organizations_url":"https://api.github.com/users/snleee/orgs","repos_url":"https://api.github.com/users/snleee/repos","events_url":"https://api.github.com/users/snleee/events{/privacy}","received_events_url":"https://api.github.com/users/snleee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T01:47:07Z","updated_at":"2020-07-22T04:18:37Z","author_association":"CONTRIBUTOR","body":"\r\n\r\n> > > > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > > > \r\n> > > > > \r\n> > > > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > > > \r\n> > > > \r\n> > > > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > > > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > > > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> > > \r\n> > > \r\n> > > This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n> > \r\n> > \r\n> > If thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?\r\n> \r\n> The `startBatchUpload` and `endBatchUpload` are the primitives we want to provide. I'm okay renaming them to something like `startReplacingSegments` and `endReplacingSegments`, but I don't want to make the primitives associate with any specific operation (taking an extra query param of \"operation\") because the behavior should be the same for all operations\r\n\r\nI think that the confusion may come from the naming, `batchUpload`. There was a different design for batch upload protocol a while ago that was aiming to reduce the data inconsistency during the segment push (this design was about using batchId for upload, keep all segments under batchId, and update metadata at once in the end)\r\n\r\nThe current design is much simpler. This API is essentially a primitive that replaces m segments with n segments atomically. I like the `startReplaceSegments`/ `endReplaceSegments` suggestion because it directly indicates what the API is trying to do.\r\n\r\n@mcvsubbu I put some thoughts on this and it's likely that we won't change parameters for these APIs when we implement other operations (versioning/batch replacement/merge). Rather, those operations will use this replacement primitive API as a part of the step. In that sense, we don't need to associate higher level operation to the lower level primitive.\r\n\r\ne.g. \r\nSegment Merge -> minion will call these APIs when replacing old segments with merged segments.\r\nBatch Upload/Batch Replacement(backfill) -> Pinot build and push job will call these APIs to upload/backfill segments\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662194364/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662277669","html_url":"https://github.com/apache/pinot/pull/5686#issuecomment-662277669","issue_url":"https://api.github.com/repos/apache/pinot/issues/5686","id":662277669,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjI3NzY2OQ==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T06:53:22Z","updated_at":"2020-07-22T06:53:22Z","author_association":"MEMBER","body":"@mayankshriv can you review this again, lets get this in","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662277669/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662277924","html_url":"https://github.com/apache/pinot/pull/5624#issuecomment-662277924","issue_url":"https://api.github.com/repos/apache/pinot/issues/5624","id":662277924,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjI3NzkyNA==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T06:54:08Z","updated_at":"2020-07-22T06:54:08Z","author_association":"MEMBER","body":"@Sreemanth can you address the comments?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662277924/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662278643","html_url":"https://github.com/apache/pinot/pull/5083#issuecomment-662278643","issue_url":"https://api.github.com/repos/apache/pinot/issues/5083","id":662278643,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjI3ODY0Mw==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T06:56:03Z","updated_at":"2020-07-22T06:56:03Z","author_association":"MEMBER","body":"@siddharthteotia  lets rebase and merge","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662278643/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662279437","html_url":"https://github.com/apache/pinot/pull/4519#issuecomment-662279437","issue_url":"https://api.github.com/repos/apache/pinot/issues/4519","id":662279437,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjI3OTQzNw==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T06:58:08Z","updated_at":"2020-07-22T06:58:08Z","author_association":"MEMBER","body":"@xueyumusic is this still valid?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662279437/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662323338","html_url":"https://github.com/apache/pinot/pull/4519#issuecomment-662323338","issue_url":"https://api.github.com/repos/apache/pinot/issues/4519","id":662323338,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjMyMzMzOA==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T08:36:45Z","updated_at":"2020-07-22T08:36:45Z","author_association":"CONTRIBUTOR","body":"I think this is already implemented. ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662323338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662409205","html_url":"https://github.com/apache/pinot/issues/5552#issuecomment-662409205","issue_url":"https://api.github.com/repos/apache/pinot/issues/5552","id":662409205,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjQwOTIwNQ==","user":{"login":"cad","id":176892,"node_id":"MDQ6VXNlcjE3Njg5Mg==","avatar_url":"https://avatars.githubusercontent.com/u/176892?v=4","gravatar_id":"","url":"https://api.github.com/users/cad","html_url":"https://github.com/cad","followers_url":"https://api.github.com/users/cad/followers","following_url":"https://api.github.com/users/cad/following{/other_user}","gists_url":"https://api.github.com/users/cad/gists{/gist_id}","starred_url":"https://api.github.com/users/cad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cad/subscriptions","organizations_url":"https://api.github.com/users/cad/orgs","repos_url":"https://api.github.com/users/cad/repos","events_url":"https://api.github.com/users/cad/events{/privacy}","received_events_url":"https://api.github.com/users/cad/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T11:51:31Z","updated_at":"2020-07-22T11:51:31Z","author_association":"NONE","body":"What is the suggested solution to this problem at the moment?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662409205/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662466665","html_url":"https://github.com/apache/pinot/pull/5587#issuecomment-662466665","issue_url":"https://api.github.com/repos/apache/pinot/issues/5587","id":662466665,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjQ2NjY2NQ==","user":{"login":"snleee","id":27253407,"node_id":"MDQ6VXNlcjI3MjUzNDA3","avatar_url":"https://avatars.githubusercontent.com/u/27253407?v=4","gravatar_id":"","url":"https://api.github.com/users/snleee","html_url":"https://github.com/snleee","followers_url":"https://api.github.com/users/snleee/followers","following_url":"https://api.github.com/users/snleee/following{/other_user}","gists_url":"https://api.github.com/users/snleee/gists{/gist_id}","starred_url":"https://api.github.com/users/snleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snleee/subscriptions","organizations_url":"https://api.github.com/users/snleee/orgs","repos_url":"https://api.github.com/users/snleee/repos","events_url":"https://api.github.com/users/snleee/events{/privacy}","received_events_url":"https://api.github.com/users/snleee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T13:53:44Z","updated_at":"2020-07-22T13:53:44Z","author_association":"CONTRIBUTOR","body":"#2715","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662466665/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662470702","html_url":"https://github.com/apache/pinot/pull/5728#issuecomment-662470702","issue_url":"https://api.github.com/repos/apache/pinot/issues/5728","id":662470702,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjQ3MDcwMg==","user":{"login":"snleee","id":27253407,"node_id":"MDQ6VXNlcjI3MjUzNDA3","avatar_url":"https://avatars.githubusercontent.com/u/27253407?v=4","gravatar_id":"","url":"https://api.github.com/users/snleee","html_url":"https://github.com/snleee","followers_url":"https://api.github.com/users/snleee/followers","following_url":"https://api.github.com/users/snleee/following{/other_user}","gists_url":"https://api.github.com/users/snleee/gists{/gist_id}","starred_url":"https://api.github.com/users/snleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snleee/subscriptions","organizations_url":"https://api.github.com/users/snleee/orgs","repos_url":"https://api.github.com/users/snleee/repos","events_url":"https://api.github.com/users/snleee/events{/privacy}","received_events_url":"https://api.github.com/users/snleee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T14:00:58Z","updated_at":"2020-07-22T14:00:58Z","author_association":"CONTRIBUTOR","body":"Selection algorithm is explained at https://docs.google.com/document/d/1-AKCfXNXdoNjFIvJ87wjWwFM_38gS0NCwFrIYjYsqp8/edit#heading=h.jfv7jhocokm4","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662470702/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662529706","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662529706","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662529706,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjUyOTcwNg==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T15:45:10Z","updated_at":"2020-07-22T15:45:10Z","author_association":"CONTRIBUTOR","body":"> > > > > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > > > > \r\n> > > > > > \r\n> > > > > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > > > > \r\n> > > > > \r\n> > > > > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > > > > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > > > > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> > > > \r\n> > > > \r\n> > > > This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n> > > \r\n> > > \r\n> > > If thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?\r\n> > \r\n> > \r\n> > The `startBatchUpload` and `endBatchUpload` are the primitives we want to provide. I'm okay renaming them to something like `startReplacingSegments` and `endReplacingSegments`, but I don't want to make the primitives associate with any specific operation (taking an extra query param of \"operation\") because the behavior should be the same for all operations\r\n> \r\n> I think that the confusion may come from the naming, `batchUpload`. There was a different design for batch upload protocol a while ago that was aiming to reduce the data inconsistency during the segment push (this design was about using batchId for upload, keep all segments under batchId, and update metadata at once in the end)\r\n> \r\n> The current design is much simpler. This API is essentially a primitive that replaces m segments with n segments atomically. I like the `startReplaceSegments`/ `endReplaceSegments` suggestion because it directly indicates what the API is trying to do.\r\n> \r\n> @mcvsubbu I put some thoughts on this and it's likely that we won't change parameters for these APIs when we implement other operations (versioning/batch replacement/merge). Rather, those operations will use this replacement primitive API as a part of the step. In that sense, we don't need to associate higher level operation to the lower level primitive.\r\n> \r\n> e.g.\r\n> Segment Merge -> minion will call these APIs when replacing old segments with merged segments.\r\n> Batch Upload/Batch Replacement(backfill) -> Pinot build and push job will call these APIs to upload/backfill segments\r\n\r\nWhen you say \"likely\" that means we dont have a clear idea. The parameters may change in some way.\r\n\r\nIf you want to look at how complex coding gets when the same API is used for multiple operations, you don't have to look far. Just look at `/segments` It accommodates so many different options in the same API: refresh vs add, uri vs actual segment, encryption at source/sink , encryption scheme by source/tableschema ....\r\nNow imagine if you were to write code for the API and you knew what exactly the intention of the API invoker was right in the beginning. Would the code not be simpler?\r\nMy argument is simple. If you are using this for multiple operations, and the invoker knows which operation they are going to perform, let the invoker specify the operation. We then have the flexibility to keep the code simple, or support a generic code that handles all possible operations. as in : if (operation == merge) mergeSegments(); else if (operation == batchUpload()) batchUpload(); else throw IllegalOperation()","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662529706/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662551757","html_url":"https://github.com/apache/pinot/pull/5727#issuecomment-662551757","issue_url":"https://api.github.com/repos/apache/pinot/issues/5727","id":662551757,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjU1MTc1Nw==","user":{"login":"suvodeep-pyne","id":2577714,"node_id":"MDQ6VXNlcjI1Nzc3MTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2577714?v=4","gravatar_id":"","url":"https://api.github.com/users/suvodeep-pyne","html_url":"https://github.com/suvodeep-pyne","followers_url":"https://api.github.com/users/suvodeep-pyne/followers","following_url":"https://api.github.com/users/suvodeep-pyne/following{/other_user}","gists_url":"https://api.github.com/users/suvodeep-pyne/gists{/gist_id}","starred_url":"https://api.github.com/users/suvodeep-pyne/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/suvodeep-pyne/subscriptions","organizations_url":"https://api.github.com/users/suvodeep-pyne/orgs","repos_url":"https://api.github.com/users/suvodeep-pyne/repos","events_url":"https://api.github.com/users/suvodeep-pyne/events{/privacy}","received_events_url":"https://api.github.com/users/suvodeep-pyne/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T16:24:20Z","updated_at":"2020-07-22T16:24:20Z","author_association":"CONTRIBUTOR","body":"Thanks @akshayrai \r\n\r\nThe min date will be useful when trying to figure out how far to look back when figuring out anomalies when a new alert is created.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662551757/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662610355","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662610355","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662610355,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjYxMDM1NQ==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T18:20:44Z","updated_at":"2020-07-22T18:20:44Z","author_association":"CONTRIBUTOR","body":"> > > > > > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > > > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > > > > > \r\n> > > > > > > \r\n> > > > > > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > > > > > \r\n> > > > > > \r\n> > > > > > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > > > > > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > > > > > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> > > > > \r\n> > > > > \r\n> > > > > This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n> > > > \r\n> > > > \r\n> > > > If thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?\r\n> > > \r\n> > > \r\n> > > The `startBatchUpload` and `endBatchUpload` are the primitives we want to provide. I'm okay renaming them to something like `startReplacingSegments` and `endReplacingSegments`, but I don't want to make the primitives associate with any specific operation (taking an extra query param of \"operation\") because the behavior should be the same for all operations\r\n> > \r\n> > \r\n> > I think that the confusion may come from the naming, `batchUpload`. There was a different design for batch upload protocol a while ago that was aiming to reduce the data inconsistency during the segment push (this design was about using batchId for upload, keep all segments under batchId, and update metadata at once in the end)\r\n> > The current design is much simpler. This API is essentially a primitive that replaces m segments with n segments atomically. I like the `startReplaceSegments`/ `endReplaceSegments` suggestion because it directly indicates what the API is trying to do.\r\n> > @mcvsubbu I put some thoughts on this and it's likely that we won't change parameters for these APIs when we implement other operations (versioning/batch replacement/merge). Rather, those operations will use this replacement primitive API as a part of the step. In that sense, we don't need to associate higher level operation to the lower level primitive.\r\n> > e.g.\r\n> > Segment Merge -> minion will call these APIs when replacing old segments with merged segments.\r\n> > Batch Upload/Batch Replacement(backfill) -> Pinot build and push job will call these APIs to upload/backfill segments\r\n> \r\n> When you say \"likely\" that means we dont have a clear idea. The parameters may change in some way.\r\n> \r\n> If you want to look at how complex coding gets when the same API is used for multiple operations, you don't have to look far. Just look at `/segments` It accommodates so many different options in the same API: refresh vs add, uri vs actual segment, encryption at source/sink , encryption scheme by source/tableschema ....\r\n> Now imagine if you were to write code for the API and you knew what exactly the intention of the API invoker was right in the beginning. Would the code not be simpler?\r\n> My argument is simple. If you are using this for multiple operations, and the invoker knows which operation they are going to perform, let the invoker specify the operation. We then have the flexibility to keep the code simple, or support a generic code that handles all possible operations. as in : if (operation == merge) mergeSegments(); else if (operation == batchUpload()) batchUpload(); else throw IllegalOperation()\r\n\r\nI would argue another way around, where API should be easy to use, instead of asking the user to understand all the supported operations in order to use it.\r\nOther than that, I don't see the behavior difference for the primitive for merge vs batch-upload because the semantic of the primitive is just replacing the segments, and it does not matter what is the purpose of using the primitive. For an example, when you use a lock, you wouldn't pass in an extra parameter stating that the lock is for preventing deadlock or solving race conditions.\r\nEven if we need to add the operation (I don't see that happen), it is always easy to add extra query parameters, but removing them is impossible without backward-incompatible change.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662610355/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662616086","html_url":"https://github.com/apache/pinot/issues/5730#issuecomment-662616086","issue_url":"https://api.github.com/repos/apache/pinot/issues/5730","id":662616086,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjYxNjA4Ng==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T18:32:40Z","updated_at":"2020-07-22T18:33:00Z","author_association":"CONTRIBUTOR","body":"Make sense.\r\nI had one PR to prevent users from creating tables with dot: https://github.com/apache/incubator-pinot/pull/5714\r\n\r\nI think we can extend it to evaluate a valid table name here.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662616086/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662630159","html_url":"https://github.com/apache/pinot/issues/5721#issuecomment-662630159","issue_url":"https://api.github.com/repos/apache/pinot/issues/5721","id":662630159,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjYzMDE1OQ==","user":{"login":"shahsank3t","id":6761317,"node_id":"MDQ6VXNlcjY3NjEzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/6761317?v=4","gravatar_id":"","url":"https://api.github.com/users/shahsank3t","html_url":"https://github.com/shahsank3t","followers_url":"https://api.github.com/users/shahsank3t/followers","following_url":"https://api.github.com/users/shahsank3t/following{/other_user}","gists_url":"https://api.github.com/users/shahsank3t/gists{/gist_id}","starred_url":"https://api.github.com/users/shahsank3t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shahsank3t/subscriptions","organizations_url":"https://api.github.com/users/shahsank3t/orgs","repos_url":"https://api.github.com/users/shahsank3t/repos","events_url":"https://api.github.com/users/shahsank3t/events{/privacy}","received_events_url":"https://api.github.com/users/shahsank3t/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T19:01:34Z","updated_at":"2020-07-22T19:01:34Z","author_association":"CONTRIBUTOR","body":"@fx19880617 - this issue can be closed as the fix has already landed in.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662630159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662699127","html_url":"https://github.com/apache/pinot/issues/5721#issuecomment-662699127","issue_url":"https://api.github.com/repos/apache/pinot/issues/5721","id":662699127,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjY5OTEyNw==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T21:12:01Z","updated_at":"2020-07-22T21:12:01Z","author_association":"CONTRIBUTOR","body":"Thanks! @shahsank3t ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662699127/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662703720","html_url":"https://github.com/apache/pinot/pull/5732#issuecomment-662703720","issue_url":"https://api.github.com/repos/apache/pinot/issues/5732","id":662703720,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjcwMzcyMA==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T21:22:11Z","updated_at":"2020-07-22T21:22:11Z","author_association":"CONTRIBUTOR","body":"Oh man, this is something I'm looking for for a very long time!!!","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662703720/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662748149","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662748149","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662748149,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc0ODE0OQ==","user":{"login":"mayankshriv","id":12615885,"node_id":"MDQ6VXNlcjEyNjE1ODg1","avatar_url":"https://avatars.githubusercontent.com/u/12615885?v=4","gravatar_id":"","url":"https://api.github.com/users/mayankshriv","html_url":"https://github.com/mayankshriv","followers_url":"https://api.github.com/users/mayankshriv/followers","following_url":"https://api.github.com/users/mayankshriv/following{/other_user}","gists_url":"https://api.github.com/users/mayankshriv/gists{/gist_id}","starred_url":"https://api.github.com/users/mayankshriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayankshriv/subscriptions","organizations_url":"https://api.github.com/users/mayankshriv/orgs","repos_url":"https://api.github.com/users/mayankshriv/repos","events_url":"https://api.github.com/users/mayankshriv/events{/privacy}","received_events_url":"https://api.github.com/users/mayankshriv/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T23:30:48Z","updated_at":"2020-07-22T23:33:29Z","author_association":"CONTRIBUTOR","body":"> > > > > > > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > > > > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > > > > > > \r\n> > > > > > > > \r\n> > > > > > > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > > > > > > \r\n> > > > > > > \r\n> > > > > > > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > > > > > > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > > > > > > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> > > > > > \r\n> > > > > > \r\n> > > > > > This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n> > > > > \r\n> > > > > \r\n> > > > > If thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?\r\n> > > > \r\n> > > > \r\n> > > > The `startBatchUpload` and `endBatchUpload` are the primitives we want to provide. I'm okay renaming them to something like `startReplacingSegments` and `endReplacingSegments`, but I don't want to make the primitives associate with any specific operation (taking an extra query param of \"operation\") because the behavior should be the same for all operations\r\n> > > \r\n> > > \r\n> > > I think that the confusion may come from the naming, `batchUpload`. There was a different design for batch upload protocol a while ago that was aiming to reduce the data inconsistency during the segment push (this design was about using batchId for upload, keep all segments under batchId, and update metadata at once in the end)\r\n> > > The current design is much simpler. This API is essentially a primitive that replaces m segments with n segments atomically. I like the `startReplaceSegments`/ `endReplaceSegments` suggestion because it directly indicates what the API is trying to do.\r\n> > > @mcvsubbu I put some thoughts on this and it's likely that we won't change parameters for these APIs when we implement other operations (versioning/batch replacement/merge). Rather, those operations will use this replacement primitive API as a part of the step. In that sense, we don't need to associate higher level operation to the lower level primitive.\r\n> > > e.g.\r\n> > > Segment Merge -> minion will call these APIs when replacing old segments with merged segments.\r\n> > > Batch Upload/Batch Replacement(backfill) -> Pinot build and push job will call these APIs to upload/backfill segments\r\n> > \r\n> > \r\n> > When you say \"likely\" that means we dont have a clear idea. The parameters may change in some way.\r\n> > If you want to look at how complex coding gets when the same API is used for multiple operations, you don't have to look far. Just look at `/segments` It accommodates so many different options in the same API: refresh vs add, uri vs actual segment, encryption at source/sink , encryption scheme by source/tableschema ....\r\n> > Now imagine if you were to write code for the API and you knew what exactly the intention of the API invoker was right in the beginning. Would the code not be simpler?\r\n> > My argument is simple. If you are using this for multiple operations, and the invoker knows which operation they are going to perform, let the invoker specify the operation. We then have the flexibility to keep the code simple, or support a generic code that handles all possible operations. as in : if (operation == merge) mergeSegments(); else if (operation == batchUpload()) batchUpload(); else throw IllegalOperation()\r\n> \r\n> I would argue another way around, where API should be easy to use, instead of asking the user to understand all the supported operations in order to use it.\r\n> Other than that, I don't see the behavior difference for the primitive for merge vs batch-upload because the semantic of the primitive is just replacing the segments, and it does not matter what is the purpose of using the primitive. For an example, when you use a lock, you wouldn't pass in an extra parameter stating that the lock is for preventing deadlock or solving race conditions.\r\n> Even if we need to add the operation (I don't see that happen), it is always easy to add extra query parameters, but removing them is impossible without backward-incompatible change.\r\n\r\nFrom what I have followed based on the code as well as the discussions here:\r\n1. This PR is just providing a primitive to replace m segments with n segments in a consistent way.\r\n2. It has not considered future possible use cases that could be built using this primitive (eg versioning). However, it is clear and complete in its definition, and doesn't expect to be modified for future usage.\r\n3. Any future possible usage of these primitives will create functionality that wraps the primitive as opposed to directly modifying the primitive's code itself (e.g., add new `if` blocks in the primitive).\r\n\r\nBased on my understanding above, and the fact that future usage is unclear (even though it is clear that future usage is not allowed to change the primitive itself), I don't see a strong need to tie the primitive with an operation.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662748149/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662752035","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662752035","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662752035,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc1MjAzNQ==","user":{"login":"snleee","id":27253407,"node_id":"MDQ6VXNlcjI3MjUzNDA3","avatar_url":"https://avatars.githubusercontent.com/u/27253407?v=4","gravatar_id":"","url":"https://api.github.com/users/snleee","html_url":"https://github.com/snleee","followers_url":"https://api.github.com/users/snleee/followers","following_url":"https://api.github.com/users/snleee/following{/other_user}","gists_url":"https://api.github.com/users/snleee/gists{/gist_id}","starred_url":"https://api.github.com/users/snleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snleee/subscriptions","organizations_url":"https://api.github.com/users/snleee/orgs","repos_url":"https://api.github.com/users/snleee/repos","events_url":"https://api.github.com/users/snleee/events{/privacy}","received_events_url":"https://api.github.com/users/snleee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T23:44:40Z","updated_at":"2020-07-22T23:44:40Z","author_association":"CONTRIBUTOR","body":"> > > > > > > > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > > > > > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > > > > > > > \r\n> > > > > > > > > \r\n> > > > > > > > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > > > > > > > \r\n> > > > > > > > \r\n> > > > > > > > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > > > > > > > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > > > > > > > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> > > > > > > \r\n> > > > > > > \r\n> > > > > > > This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n> > > > > > \r\n> > > > > > \r\n> > > > > > If thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?\r\n> > > > > \r\n> > > > > \r\n> > > > > The `startBatchUpload` and `endBatchUpload` are the primitives we want to provide. I'm okay renaming them to something like `startReplacingSegments` and `endReplacingSegments`, but I don't want to make the primitives associate with any specific operation (taking an extra query param of \"operation\") because the behavior should be the same for all operations\r\n> > > > \r\n> > > > \r\n> > > > I think that the confusion may come from the naming, `batchUpload`. There was a different design for batch upload protocol a while ago that was aiming to reduce the data inconsistency during the segment push (this design was about using batchId for upload, keep all segments under batchId, and update metadata at once in the end)\r\n> > > > The current design is much simpler. This API is essentially a primitive that replaces m segments with n segments atomically. I like the `startReplaceSegments`/ `endReplaceSegments` suggestion because it directly indicates what the API is trying to do.\r\n> > > > @mcvsubbu I put some thoughts on this and it's likely that we won't change parameters for these APIs when we implement other operations (versioning/batch replacement/merge). Rather, those operations will use this replacement primitive API as a part of the step. In that sense, we don't need to associate higher level operation to the lower level primitive.\r\n> > > > e.g.\r\n> > > > Segment Merge -> minion will call these APIs when replacing old segments with merged segments.\r\n> > > > Batch Upload/Batch Replacement(backfill) -> Pinot build and push job will call these APIs to upload/backfill segments\r\n> > > \r\n> > > \r\n> > > When you say \"likely\" that means we dont have a clear idea. The parameters may change in some way.\r\n> > > If you want to look at how complex coding gets when the same API is used for multiple operations, you don't have to look far. Just look at `/segments` It accommodates so many different options in the same API: refresh vs add, uri vs actual segment, encryption at source/sink , encryption scheme by source/tableschema ....\r\n> > > Now imagine if you were to write code for the API and you knew what exactly the intention of the API invoker was right in the beginning. Would the code not be simpler?\r\n> > > My argument is simple. If you are using this for multiple operations, and the invoker knows which operation they are going to perform, let the invoker specify the operation. We then have the flexibility to keep the code simple, or support a generic code that handles all possible operations. as in : if (operation == merge) mergeSegments(); else if (operation == batchUpload()) batchUpload(); else throw IllegalOperation()\r\n> > \r\n> > \r\n> > I would argue another way around, where API should be easy to use, instead of asking the user to understand all the supported operations in order to use it.\r\n> > Other than that, I don't see the behavior difference for the primitive for merge vs batch-upload because the semantic of the primitive is just replacing the segments, and it does not matter what is the purpose of using the primitive. For an example, when you use a lock, you wouldn't pass in an extra parameter stating that the lock is for preventing deadlock or solving race conditions.\r\n> > Even if we need to add the operation (I don't see that happen), it is always easy to add extra query parameters, but removing them is impossible without backward-incompatible change.\r\n> \r\n> From what I have followed based on the code as well as the discussions here:\r\n> \r\n> 1. This PR is just providing a primitive to replace m segments with n segments in a consistent way.\r\n> 2. It has not considered future possible use cases that could be built using this primitive (eg versioning). However, it is clear and complete in its definition, and doesn't expect to be modified for future usage.\r\n> 3. Any future possible usage of these primitives will create functionality that wraps the primitive as opposed to directly modifying the primitive's code itself (e.g., add new `if` blocks in the primitive).\r\n> \r\n> Based on my understanding above, and the fact that future usage is unclear (even though it is clear that future usage is not allowed to change the primitive itself), I don't see a strong need to tie the primitive with an operation.\r\n\r\n@mayankshriv Thank you for the summary. I also prefer not to tie the primitives with the operation for now because the current primitive is complete by itself and it does not have any merge specific logic. When other operations start to use this primitive and if it becomes inevitable to add the operation specific logics, we can easily add the extra operation query parameter to make the code cleaner as @mcvsubbu suggested.\r\n\r\n@mcvsubbu How do you think on this?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662752035/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662752341","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662752341","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662752341,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc1MjM0MQ==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T23:45:51Z","updated_at":"2020-07-22T23:45:51Z","author_association":"CONTRIBUTOR","body":"OK, My last attempt on this:\r\n\r\nIf this API does not claim to solve a future problem, do not take up the namespace of the command like 'startBatchUpload'. In this case, any other functionality (e.g. versioning, consistent upload of refresh segments, etc.) that may need a batch upload may not be able to use this without lots of ugly code that is hard to maintain when it comes to backward compatibility (see current POST /segments implementation for an example)\r\n\r\nOptions are to introduce an operation like I suggested, or rename it.\r\n\r\nI prefer the extra query argument but will settle for a rename.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662752341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662753137","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662753137","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662753137,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc1MzEzNw==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-22T23:49:00Z","updated_at":"2020-07-22T23:49:00Z","author_association":"CONTRIBUTOR","body":"> > > > > > > > > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > > > > > > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > > > > > > > > \r\n> > > > > > > > > > \r\n> > > > > > > > > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > > > > > > > > \r\n> > > > > > > > > \r\n> > > > > > > > > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > > > > > > > > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > > > > > > > > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> > > > > > > > \r\n> > > > > > > > \r\n> > > > > > > > This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n> > > > > > > \r\n> > > > > > > \r\n> > > > > > > If thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?\r\n> > > > > > \r\n> > > > > > \r\n> > > > > > The `startBatchUpload` and `endBatchUpload` are the primitives we want to provide. I'm okay renaming them to something like `startReplacingSegments` and `endReplacingSegments`, but I don't want to make the primitives associate with any specific operation (taking an extra query param of \"operation\") because the behavior should be the same for all operations\r\n> > > > > \r\n> > > > > \r\n> > > > > I think that the confusion may come from the naming, `batchUpload`. There was a different design for batch upload protocol a while ago that was aiming to reduce the data inconsistency during the segment push (this design was about using batchId for upload, keep all segments under batchId, and update metadata at once in the end)\r\n> > > > > The current design is much simpler. This API is essentially a primitive that replaces m segments with n segments atomically. I like the `startReplaceSegments`/ `endReplaceSegments` suggestion because it directly indicates what the API is trying to do.\r\n> > > > > @mcvsubbu I put some thoughts on this and it's likely that we won't change parameters for these APIs when we implement other operations (versioning/batch replacement/merge). Rather, those operations will use this replacement primitive API as a part of the step. In that sense, we don't need to associate higher level operation to the lower level primitive.\r\n> > > > > e.g.\r\n> > > > > Segment Merge -> minion will call these APIs when replacing old segments with merged segments.\r\n> > > > > Batch Upload/Batch Replacement(backfill) -> Pinot build and push job will call these APIs to upload/backfill segments\r\n> > > > \r\n> > > > \r\n> > > > When you say \"likely\" that means we dont have a clear idea. The parameters may change in some way.\r\n> > > > If you want to look at how complex coding gets when the same API is used for multiple operations, you don't have to look far. Just look at `/segments` It accommodates so many different options in the same API: refresh vs add, uri vs actual segment, encryption at source/sink , encryption scheme by source/tableschema ....\r\n> > > > Now imagine if you were to write code for the API and you knew what exactly the intention of the API invoker was right in the beginning. Would the code not be simpler?\r\n> > > > My argument is simple. If you are using this for multiple operations, and the invoker knows which operation they are going to perform, let the invoker specify the operation. We then have the flexibility to keep the code simple, or support a generic code that handles all possible operations. as in : if (operation == merge) mergeSegments(); else if (operation == batchUpload()) batchUpload(); else throw IllegalOperation()\r\n> > > \r\n> > > \r\n> > > I would argue another way around, where API should be easy to use, instead of asking the user to understand all the supported operations in order to use it.\r\n> > > Other than that, I don't see the behavior difference for the primitive for merge vs batch-upload because the semantic of the primitive is just replacing the segments, and it does not matter what is the purpose of using the primitive. For an example, when you use a lock, you wouldn't pass in an extra parameter stating that the lock is for preventing deadlock or solving race conditions.\r\n> > > Even if we need to add the operation (I don't see that happen), it is always easy to add extra query parameters, but removing them is impossible without backward-incompatible change.\r\n> > \r\n> > \r\n> > From what I have followed based on the code as well as the discussions here:\r\n> > \r\n> > 1. This PR is just providing a primitive to replace m segments with n segments in a consistent way.\r\n> > 2. It has not considered future possible use cases that could be built using this primitive (eg versioning). However, it is clear and complete in its definition, and doesn't expect to be modified for future usage.\r\n> > 3. Any future possible usage of these primitives will create functionality that wraps the primitive as opposed to directly modifying the primitive's code itself (e.g., add new `if` blocks in the primitive).\r\n> > \r\n> > Based on my understanding above, and the fact that future usage is unclear (even though it is clear that future usage is not allowed to change the primitive itself), I don't see a strong need to tie the primitive with an operation.\r\n> \r\n> @mayankshriv Thank you for the summary. I also prefer not to tie the primitives with the operation for now because the current primitive is complete by itself and it does not have any merge specific logic. When other operations start to use this primitive and if it becomes inevitable to add the operation specific logics, we can easily add the extra operation query parameter to make the code cleaner as @mcvsubbu suggested.\r\n> \r\n> @mcvsubbu How do you think on this?\r\n\r\nThat is the exact thing that I am trying to avoid.\r\nLet us say, we introduce a \"operation\"  query param later.\r\nWe will need to code around the fact that \"operation == null\" means it is segment merge.\r\nAnd then maybe go around deprecating null and adding making it mandatory over time.\r\n\r\nSure, that can be done yes, but is that how we want it to evolve?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662753137/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662756552","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662756552","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662756552,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc1NjU1Mg==","user":{"login":"snleee","id":27253407,"node_id":"MDQ6VXNlcjI3MjUzNDA3","avatar_url":"https://avatars.githubusercontent.com/u/27253407?v=4","gravatar_id":"","url":"https://api.github.com/users/snleee","html_url":"https://github.com/snleee","followers_url":"https://api.github.com/users/snleee/followers","following_url":"https://api.github.com/users/snleee/following{/other_user}","gists_url":"https://api.github.com/users/snleee/gists{/gist_id}","starred_url":"https://api.github.com/users/snleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snleee/subscriptions","organizations_url":"https://api.github.com/users/snleee/orgs","repos_url":"https://api.github.com/users/snleee/repos","events_url":"https://api.github.com/users/snleee/events{/privacy}","received_events_url":"https://api.github.com/users/snleee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T00:02:06Z","updated_at":"2020-07-23T00:02:06Z","author_association":"CONTRIBUTOR","body":"> > > > > > > > > > > > I think it is prudent to add an extra query parameter to the controller API for start/end batchupload. I suggest \"operation\" and make it string type. In this case, \"Operation\" will be set to \"MERGE\"\r\n> > > > > > > > > > > > This way, we don't assume that if source segments is null, the the operation MUST be new segment upload. Let us specify the operation clearly, and then it gets easier to evolve the API over other operations we may need.\r\n> > > > > > > > > > > \r\n> > > > > > > > > > > \r\n> > > > > > > > > > > @mcvsubbu We want to build primitive operations and we can use them to achieve multiple purpose such as batch upload, batch replace and version control. I don't think we should associate this primitive operation with any specific operation such as `MERGE` or `NEW_UPLOAD`. The semantic of this primitive operation is quite clear: replace the segments in `segmentsFrom` with segments in `segmentsTo` (we might want to rename the parameters if that makes the semantic more clear). @snleee Thoughts?\r\n> > > > > > > > > > \r\n> > > > > > > > > > \r\n> > > > > > > > > > If we know that this API will never be used for anything other than merge, then it is ok as defined. In that case, I would rename the API to say startBatchForMerge() or something like that. That way, if we want to introduce a startBatch for upload, we can do so.\r\n> > > > > > > > > > But then we know that this API will perhaps be re-used for batch upload of segments. Since we are reasonably sure that will be the case, but we don't know exactly what arguments it will take when we re-use it for another operation, it is best to specify the operation name we want.\r\n> > > > > > > > > > that way, even if some other set of arguments need to be added, or some null assimptions do not hold true, we have the operation very clearly specified. Yes, we can always add operaton later on, and say that if \"operation\" is not present, then treat it as merge, but I think it is clearner to specify that now.\r\n> > > > > > > > > \r\n> > > > > > > > > \r\n> > > > > > > > > This API will be used for merge, batch upload, batch replace, but I don't want to associate the API with certain type of operation because the semantic of this API is very clear and is independent of the actual operation. It will replace the segments in `segmentsFrom` with segments in `segmentsTo` atomically, and this will hold for all operations.\r\n> > > > > > > > \r\n> > > > > > > > \r\n> > > > > > > > If thats the case, then I agree with Subbu. It's better to name this primitive as ReplaceSegments or SwapSegments. Then all higher-level API can leverage this. WDYT?\r\n> > > > > > > \r\n> > > > > > > \r\n> > > > > > > The `startBatchUpload` and `endBatchUpload` are the primitives we want to provide. I'm okay renaming them to something like `startReplacingSegments` and `endReplacingSegments`, but I don't want to make the primitives associate with any specific operation (taking an extra query param of \"operation\") because the behavior should be the same for all operations\r\n> > > > > > \r\n> > > > > > \r\n> > > > > > I think that the confusion may come from the naming, `batchUpload`. There was a different design for batch upload protocol a while ago that was aiming to reduce the data inconsistency during the segment push (this design was about using batchId for upload, keep all segments under batchId, and update metadata at once in the end)\r\n> > > > > > The current design is much simpler. This API is essentially a primitive that replaces m segments with n segments atomically. I like the `startReplaceSegments`/ `endReplaceSegments` suggestion because it directly indicates what the API is trying to do.\r\n> > > > > > @mcvsubbu I put some thoughts on this and it's likely that we won't change parameters for these APIs when we implement other operations (versioning/batch replacement/merge). Rather, those operations will use this replacement primitive API as a part of the step. In that sense, we don't need to associate higher level operation to the lower level primitive.\r\n> > > > > > e.g.\r\n> > > > > > Segment Merge -> minion will call these APIs when replacing old segments with merged segments.\r\n> > > > > > Batch Upload/Batch Replacement(backfill) -> Pinot build and push job will call these APIs to upload/backfill segments\r\n> > > > > \r\n> > > > > \r\n> > > > > When you say \"likely\" that means we dont have a clear idea. The parameters may change in some way.\r\n> > > > > If you want to look at how complex coding gets when the same API is used for multiple operations, you don't have to look far. Just look at `/segments` It accommodates so many different options in the same API: refresh vs add, uri vs actual segment, encryption at source/sink , encryption scheme by source/tableschema ....\r\n> > > > > Now imagine if you were to write code for the API and you knew what exactly the intention of the API invoker was right in the beginning. Would the code not be simpler?\r\n> > > > > My argument is simple. If you are using this for multiple operations, and the invoker knows which operation they are going to perform, let the invoker specify the operation. We then have the flexibility to keep the code simple, or support a generic code that handles all possible operations. as in : if (operation == merge) mergeSegments(); else if (operation == batchUpload()) batchUpload(); else throw IllegalOperation()\r\n> > > > \r\n> > > > \r\n> > > > I would argue another way around, where API should be easy to use, instead of asking the user to understand all the supported operations in order to use it.\r\n> > > > Other than that, I don't see the behavior difference for the primitive for merge vs batch-upload because the semantic of the primitive is just replacing the segments, and it does not matter what is the purpose of using the primitive. For an example, when you use a lock, you wouldn't pass in an extra parameter stating that the lock is for preventing deadlock or solving race conditions.\r\n> > > > Even if we need to add the operation (I don't see that happen), it is always easy to add extra query parameters, but removing them is impossible without backward-incompatible change.\r\n> > > \r\n> > > \r\n> > > From what I have followed based on the code as well as the discussions here:\r\n> > > \r\n> > > 1. This PR is just providing a primitive to replace m segments with n segments in a consistent way.\r\n> > > 2. It has not considered future possible use cases that could be built using this primitive (eg versioning). However, it is clear and complete in its definition, and doesn't expect to be modified for future usage.\r\n> > > 3. Any future possible usage of these primitives will create functionality that wraps the primitive as opposed to directly modifying the primitive's code itself (e.g., add new `if` blocks in the primitive).\r\n> > > \r\n> > > Based on my understanding above, and the fact that future usage is unclear (even though it is clear that future usage is not allowed to change the primitive itself), I don't see a strong need to tie the primitive with an operation.\r\n> > \r\n> > \r\n> > @mayankshriv Thank you for the summary. I also prefer not to tie the primitives with the operation for now because the current primitive is complete by itself and it does not have any merge specific logic. When other operations start to use this primitive and if it becomes inevitable to add the operation specific logics, we can easily add the extra operation query parameter to make the code cleaner as @mcvsubbu suggested.\r\n> > @mcvsubbu How do you think on this?\r\n> \r\n> That is the exact thing that I am trying to avoid.\r\n> Let us say, we introduce a \"operation\" query param later.\r\n> We will need to code around the fact that \"operation == null\" means it is segment merge.\r\n> And then maybe go around deprecating null and adding making it mandatory over time.\r\n> \r\n> Sure, that can be done yes, but is that how we want it to evolve?\r\n\r\nWhat if we end up not modifying anything on this primitive? Then, we will have some extra parameter that's not even used and we will also need to deprecate this parameter. IMO, inefficiency appears to both approaches. \r\n\r\nThe current primitive has no logic specific to segment merge so we don't need to tie `null` to segment merge. We just need to add new operation-specific logic. The logic will be something like the following: \r\n\r\nLet's assume that we added versioning.\r\n```\r\nif (operation != null) {\r\n  // operation specific logic\r\n  switch(operation) {\r\n    case VERSIONING:\r\n      performVersioningSpecificLogic();\r\n      ...\r\n  }\r\n} \r\n\r\n// existing logic\r\n```","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662756552/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662756622","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662756622","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662756622,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc1NjYyMg==","user":{"login":"snleee","id":27253407,"node_id":"MDQ6VXNlcjI3MjUzNDA3","avatar_url":"https://avatars.githubusercontent.com/u/27253407?v=4","gravatar_id":"","url":"https://api.github.com/users/snleee","html_url":"https://github.com/snleee","followers_url":"https://api.github.com/users/snleee/followers","following_url":"https://api.github.com/users/snleee/following{/other_user}","gists_url":"https://api.github.com/users/snleee/gists{/gist_id}","starred_url":"https://api.github.com/users/snleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snleee/subscriptions","organizations_url":"https://api.github.com/users/snleee/orgs","repos_url":"https://api.github.com/users/snleee/repos","events_url":"https://api.github.com/users/snleee/events{/privacy}","received_events_url":"https://api.github.com/users/snleee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T00:02:20Z","updated_at":"2020-07-23T00:02:20Z","author_association":"CONTRIBUTOR","body":"> OK, My last attempt on this:\r\n> \r\n> If this API does not claim to solve a future problem, do not take up the namespace of the command like 'startBatchUpload'. In this case, any other functionality (e.g. versioning, consistent upload of refresh segments, etc.) that may need a batch upload may not be able to use this without lots of ugly code that is hard to maintain when it comes to backward compatibility (see current POST /segments implementation for an example)\r\n> \r\n> Options are to introduce an operation like I suggested, or rename it.\r\n> \r\n> I prefer the extra query argument but will settle for a rename.\r\n\r\n@mcvsubbu I already changed the name to `startReplaceSegments`, `endReplaceSegments`. How do you think on the name?","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662756622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662757591","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-662757591","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":662757591,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc1NzU5MQ==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T00:05:39Z","updated_at":"2020-07-23T00:05:39Z","author_association":"CONTRIBUTOR","body":"I'll take that, thanks.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662757591/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662766153","html_url":"https://github.com/apache/pinot/pull/5686#issuecomment-662766153","issue_url":"https://api.github.com/repos/apache/pinot/issues/5686","id":662766153,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc2NjE1Mw==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T00:39:40Z","updated_at":"2020-07-23T00:39:40Z","author_association":"CONTRIBUTOR","body":"Discussed with @mayankshriv offline, the common logic has been extracted into `BaseCombineOperator`, and it is very hard to extract the per-thread logic because they are using different concurrency primitives.\r\nAdded TODOs into the `GroupByCombineOperator` and `GroupByOrderByCombineOperator` to extend `BaseCombineOperator` for future cleanup","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662766153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662785658","html_url":"https://github.com/apache/pinot/issues/5253#issuecomment-662785658","issue_url":"https://api.github.com/repos/apache/pinot/issues/5253","id":662785658,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc4NTY1OA==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T02:07:19Z","updated_at":"2020-07-23T02:07:19Z","author_association":"CONTRIBUTOR","body":"Tracked in #5738 ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662785658/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662785715","html_url":"https://github.com/apache/pinot/issues/5252#issuecomment-662785715","issue_url":"https://api.github.com/repos/apache/pinot/issues/5252","id":662785715,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc4NTcxNQ==","user":{"login":"Jackie-Jiang","id":17555551,"node_id":"MDQ6VXNlcjE3NTU1NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17555551?v=4","gravatar_id":"","url":"https://api.github.com/users/Jackie-Jiang","html_url":"https://github.com/Jackie-Jiang","followers_url":"https://api.github.com/users/Jackie-Jiang/followers","following_url":"https://api.github.com/users/Jackie-Jiang/following{/other_user}","gists_url":"https://api.github.com/users/Jackie-Jiang/gists{/gist_id}","starred_url":"https://api.github.com/users/Jackie-Jiang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jackie-Jiang/subscriptions","organizations_url":"https://api.github.com/users/Jackie-Jiang/orgs","repos_url":"https://api.github.com/users/Jackie-Jiang/repos","events_url":"https://api.github.com/users/Jackie-Jiang/events{/privacy}","received_events_url":"https://api.github.com/users/Jackie-Jiang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T02:07:35Z","updated_at":"2020-07-23T02:07:35Z","author_association":"CONTRIBUTOR","body":"Tracked in #5738 ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662785715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662793026","html_url":"https://github.com/apache/pinot/pull/5654#issuecomment-662793026","issue_url":"https://api.github.com/repos/apache/pinot/issues/5654","id":662793026,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjc5MzAyNg==","user":{"login":"yupeng9","id":13425258,"node_id":"MDQ6VXNlcjEzNDI1MjU4","avatar_url":"https://avatars.githubusercontent.com/u/13425258?v=4","gravatar_id":"","url":"https://api.github.com/users/yupeng9","html_url":"https://github.com/yupeng9","followers_url":"https://api.github.com/users/yupeng9/followers","following_url":"https://api.github.com/users/yupeng9/following{/other_user}","gists_url":"https://api.github.com/users/yupeng9/gists{/gist_id}","starred_url":"https://api.github.com/users/yupeng9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yupeng9/subscriptions","organizations_url":"https://api.github.com/users/yupeng9/orgs","repos_url":"https://api.github.com/users/yupeng9/repos","events_url":"https://api.github.com/users/yupeng9/events{/privacy}","received_events_url":"https://api.github.com/users/yupeng9/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T02:45:17Z","updated_at":"2020-07-23T02:45:17Z","author_association":"CONTRIBUTOR","body":"@Jackie-Jiang thanks for taking another pass. Comments addressed, and feel free to merge","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662793026/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662899251","html_url":"https://github.com/apache/pinot/pull/4901#issuecomment-662899251","issue_url":"https://api.github.com/repos/apache/pinot/issues/4901","id":662899251,"node_id":"MDEyOklzc3VlQ29tbWVudDY2Mjg5OTI1MQ==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T09:06:54Z","updated_at":"2020-07-23T09:06:54Z","author_association":"MEMBER","body":"@siddharthteotia closing this since we have moved over to pinotquery","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662899251/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662900006","html_url":"https://github.com/apache/pinot/pull/5686#issuecomment-662900006","issue_url":"https://api.github.com/repos/apache/pinot/issues/5686","id":662900006,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MjkwMDAwNg==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T09:08:30Z","updated_at":"2020-07-23T09:08:30Z","author_association":"MEMBER","body":"Lets create another issue to move common functionality across multiple combine operator to a basecombineoperator.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/662900006/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663098410","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-663098410","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":663098410,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzA5ODQxMA==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T16:15:47Z","updated_at":"2020-07-23T16:15:47Z","author_association":"MEMBER","body":"@snleee are we good to go? can we add some docs on how to use this?\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663098410/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663165120","html_url":"https://github.com/apache/pinot/pull/5700#issuecomment-663165120","issue_url":"https://api.github.com/repos/apache/pinot/issues/5700","id":663165120,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzE2NTEyMA==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T18:32:30Z","updated_at":"2020-07-23T18:32:30Z","author_association":"CONTRIBUTOR","body":"@chenboat  please add some tests in another follow-up commit. Here is what I would suggest:\r\n1. You can start a thread that behaves like deepstore, failing the commit. Start another thread, that starts only the committer, mocking everything else. Start a server fake server thread that in externalview seem online for the segment. Assert that the server gets a request for download, and assert the segment commit passes. This verifies only the server side.\r\n2. Controller verificaton can be done independently, I think. All that we need to verify is that when a segment is committed with \"PEER\" in the URI, the metadata for segment URI is null. You can probably do this by starting a controller, mocking a realtime segment, and posting a consumed followed by commit call using http.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663165120/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663239120","html_url":"https://github.com/apache/pinot/issues/5716#issuecomment-663239120","issue_url":"https://api.github.com/repos/apache/pinot/issues/5716","id":663239120,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzIzOTEyMA==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-23T21:22:14Z","updated_at":"2020-07-23T21:22:14Z","author_association":"CONTRIBUTOR","body":"cc  @mayankshriv ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663239120/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663299681","html_url":"https://github.com/apache/pinot/pull/5745#issuecomment-663299681","issue_url":"https://api.github.com/repos/apache/pinot/issues/5745","id":663299681,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzI5OTY4MQ==","user":{"login":"mayankshriv","id":12615885,"node_id":"MDQ6VXNlcjEyNjE1ODg1","avatar_url":"https://avatars.githubusercontent.com/u/12615885?v=4","gravatar_id":"","url":"https://api.github.com/users/mayankshriv","html_url":"https://github.com/mayankshriv","followers_url":"https://api.github.com/users/mayankshriv/followers","following_url":"https://api.github.com/users/mayankshriv/following{/other_user}","gists_url":"https://api.github.com/users/mayankshriv/gists{/gist_id}","starred_url":"https://api.github.com/users/mayankshriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayankshriv/subscriptions","organizations_url":"https://api.github.com/users/mayankshriv/orgs","repos_url":"https://api.github.com/users/mayankshriv/repos","events_url":"https://api.github.com/users/mayankshriv/events{/privacy}","received_events_url":"https://api.github.com/users/mayankshriv/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T00:42:19Z","updated_at":"2020-07-24T00:58:22Z","author_association":"CONTRIBUTOR","body":"@ianvkoeppe I am unclear on the PR description:\r\n1. The first offline segment should immediately push the high-water-mark to (maxTime-1). Are you referring to a case with single segment push per day?\r\n2. Your requirement seems contrary to the other requests we are getting, where the high-water-mark being pushed up pre-maturely (before all segments from the new date are ONLINE) causes inconsistent results during the push time. And we are getting multiple requests to address the inconsistency by deferring the push of high-water-mark until the entire push is complete.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663299681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663300262","html_url":"https://github.com/apache/pinot/pull/5745#issuecomment-663300262","issue_url":"https://api.github.com/repos/apache/pinot/issues/5745","id":663300262,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMwMDI2Mg==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T00:44:53Z","updated_at":"2020-07-24T00:44:53Z","author_association":"MEMBER","body":"This is a fantastic contribution!","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663300262/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663302060","html_url":"https://github.com/apache/pinot/pull/5746#issuecomment-663302060","issue_url":"https://api.github.com/repos/apache/pinot/issues/5746","id":663302060,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMwMjA2MA==","user":{"login":"npawar","id":19693933,"node_id":"MDQ6VXNlcjE5NjkzOTMz","avatar_url":"https://avatars.githubusercontent.com/u/19693933?v=4","gravatar_id":"","url":"https://api.github.com/users/npawar","html_url":"https://github.com/npawar","followers_url":"https://api.github.com/users/npawar/followers","following_url":"https://api.github.com/users/npawar/following{/other_user}","gists_url":"https://api.github.com/users/npawar/gists{/gist_id}","starred_url":"https://api.github.com/users/npawar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/npawar/subscriptions","organizations_url":"https://api.github.com/users/npawar/orgs","repos_url":"https://api.github.com/users/npawar/repos","events_url":"https://api.github.com/users/npawar/events{/privacy}","received_events_url":"https://api.github.com/users/npawar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T00:53:57Z","updated_at":"2020-07-24T00:53:57Z","author_association":"CONTRIBUTOR","body":"@jackjlli this doesn't look like the right fix for the issue. For GenericRecord, we should be looking at each field recursively.\r\n\r\nAlso the AvroRecordExtractorComplexTypesTest will fail with this change.\r\n\r\nThe code you're introducing makes an assumption that for a field of type GenericRecord in the avro raw data, we should always only look at the first fiel. That's not a good assumption right? ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663302060/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663308658","html_url":"https://github.com/apache/pinot/pull/5746#issuecomment-663308658","issue_url":"https://api.github.com/repos/apache/pinot/issues/5746","id":663308658,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMwODY1OA==","user":{"login":"jackjlli","id":35080149,"node_id":"MDQ6VXNlcjM1MDgwMTQ5","avatar_url":"https://avatars.githubusercontent.com/u/35080149?v=4","gravatar_id":"","url":"https://api.github.com/users/jackjlli","html_url":"https://github.com/jackjlli","followers_url":"https://api.github.com/users/jackjlli/followers","following_url":"https://api.github.com/users/jackjlli/following{/other_user}","gists_url":"https://api.github.com/users/jackjlli/gists{/gist_id}","starred_url":"https://api.github.com/users/jackjlli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jackjlli/subscriptions","organizations_url":"https://api.github.com/users/jackjlli/orgs","repos_url":"https://api.github.com/users/jackjlli/repos","events_url":"https://api.github.com/users/jackjlli/events{/privacy}","received_events_url":"https://api.github.com/users/jackjlli/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T01:24:33Z","updated_at":"2020-07-24T01:24:33Z","author_association":"MEMBER","body":"> The fix should be in the `DataTypeTransformer` instead of here.\r\n> In `DataTypeTransformer` we should be able to handle map properly\r\n\r\nI've thought about that. But `DataTypeTransformer` uses a generic class for all kinds of data types though.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663308658/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663308715","html_url":"https://github.com/apache/pinot/issues/5747#issuecomment-663308715","issue_url":"https://api.github.com/repos/apache/pinot/issues/5747","id":663308715,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMwODcxNQ==","user":{"login":"xiangfu0","id":1202120,"node_id":"MDQ6VXNlcjEyMDIxMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1202120?v=4","gravatar_id":"","url":"https://api.github.com/users/xiangfu0","html_url":"https://github.com/xiangfu0","followers_url":"https://api.github.com/users/xiangfu0/followers","following_url":"https://api.github.com/users/xiangfu0/following{/other_user}","gists_url":"https://api.github.com/users/xiangfu0/gists{/gist_id}","starred_url":"https://api.github.com/users/xiangfu0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiangfu0/subscriptions","organizations_url":"https://api.github.com/users/xiangfu0/orgs","repos_url":"https://api.github.com/users/xiangfu0/repos","events_url":"https://api.github.com/users/xiangfu0/events{/privacy}","received_events_url":"https://api.github.com/users/xiangfu0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T01:24:51Z","updated_at":"2020-07-24T01:24:51Z","author_association":"CONTRIBUTOR","body":"Since Pinot expected multiple segments for same day, could you describe more detailed situation of the issue?\r\n\r\nBasically how the data segments are organized and how do you find there are duplicates by looking at the segment(name/metadata) (I assume this is not related to looking at real data, since the checker only has access to segment metadata). \r\n\r\nIt will help summaries this to a common pattern and design the right way to identify data duplication.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663308715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663311913","html_url":"https://github.com/apache/pinot/pull/5745#issuecomment-663311913","issue_url":"https://api.github.com/repos/apache/pinot/issues/5745","id":663311913,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMxMTkxMw==","user":{"login":"ianvkoeppe","id":13874383,"node_id":"MDQ6VXNlcjEzODc0Mzgz","avatar_url":"https://avatars.githubusercontent.com/u/13874383?v=4","gravatar_id":"","url":"https://api.github.com/users/ianvkoeppe","html_url":"https://github.com/ianvkoeppe","followers_url":"https://api.github.com/users/ianvkoeppe/followers","following_url":"https://api.github.com/users/ianvkoeppe/following{/other_user}","gists_url":"https://api.github.com/users/ianvkoeppe/gists{/gist_id}","starred_url":"https://api.github.com/users/ianvkoeppe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ianvkoeppe/subscriptions","organizations_url":"https://api.github.com/users/ianvkoeppe/orgs","repos_url":"https://api.github.com/users/ianvkoeppe/repos","events_url":"https://api.github.com/users/ianvkoeppe/events{/privacy}","received_events_url":"https://api.github.com/users/ianvkoeppe/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T01:41:21Z","updated_at":"2020-07-24T01:41:21Z","author_association":"CONTRIBUTOR","body":"@mayankshriv, thanks for reviewing. See answers inline below.\r\n\r\n> 1. The first offline segment should immediately push the high-water-mark to (maxTime-1). Are you referring to a case with single segment push per day?\r\n\r\nYes, this is for cases where there is a single segment push per day.\r\n\r\n> 2. Your requirement seems contrary to the other requests we are getting, where the high-water-mark being pushed up pre-maturely (before all segments from the new date are ONLINE) causes inconsistent results during the push time. And we are getting multiple requests to address the inconsistency by deferring the push of high-water-mark until the entire push is complete.\r\n\r\nThis sounds like the current supported case. In our case, we have a Hybrid table where we serve current day metrics from realtime and once per day upload an offline segment. The issue is, since we only upload one segment per day, the latest offline segment isn't used until the next day's data is pushed.\r\n\r\nToday we get around this by creating \"dummy\" segments with empty rows and +1 day as a way of forcing the time value to increment further and serve the latest actual offline segment. Unfortunately, this won't work for us any longer and we need a better long-term solution.\r\n\r\nI hope this clarifies, but let me know if you have any further questions.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663311913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663326776","html_url":"https://github.com/apache/pinot/pull/5745#issuecomment-663326776","issue_url":"https://api.github.com/repos/apache/pinot/issues/5745","id":663326776,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMyNjc3Ng==","user":{"login":"mayankshriv","id":12615885,"node_id":"MDQ6VXNlcjEyNjE1ODg1","avatar_url":"https://avatars.githubusercontent.com/u/12615885?v=4","gravatar_id":"","url":"https://api.github.com/users/mayankshriv","html_url":"https://github.com/mayankshriv","followers_url":"https://api.github.com/users/mayankshriv/followers","following_url":"https://api.github.com/users/mayankshriv/following{/other_user}","gists_url":"https://api.github.com/users/mayankshriv/gists{/gist_id}","starred_url":"https://api.github.com/users/mayankshriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayankshriv/subscriptions","organizations_url":"https://api.github.com/users/mayankshriv/orgs","repos_url":"https://api.github.com/users/mayankshriv/repos","events_url":"https://api.github.com/users/mayankshriv/events{/privacy}","received_events_url":"https://api.github.com/users/mayankshriv/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T03:02:40Z","updated_at":"2020-07-24T03:02:40Z","author_association":"CONTRIBUTOR","body":"> @mayankshriv, thanks for reviewing. See answers inline below.\r\n> \r\n> > 1. The first offline segment should immediately push the high-water-mark to (maxTime-1). Are you referring to a case with single segment push per day?\r\n> \r\n> Yes, this is for cases where there is a single segment push per day.\r\n> \r\n> > 1. Your requirement seems contrary to the other requests we are getting, where the high-water-mark being pushed up pre-maturely (before all segments from the new date are ONLINE) causes inconsistent results during the push time. And we are getting multiple requests to address the inconsistency by deferring the push of high-water-mark until the entire push is complete.\r\n> \r\n> This sounds like the current supported case. In our case, we have a Hybrid table where we serve current day metrics from realtime and once per day upload an offline segment. The issue is, since we only upload one segment per day, the latest offline segment isn't used until the next day's data is pushed.\r\n> \r\n> Today we get around this by creating \"dummy\" segments with empty rows and +1 day as a way of forcing the time value to increment further and serve the latest actual offline segment. Unfortunately, this won't work for us any longer and we need a better long-term solution.\r\n> \r\n> I hope this clarifies, but let me know if you have any further questions.\r\n\r\nI see, the single segment per day clarifies the confusion. There's also a new api being added in the controller that makes it a protocol. Perhaps you could piggy-back on it to update time-boundary? @snleee What do you think? \r\nhttps://github.com/apache/incubator-pinot/pull/5712 ","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663326776/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663328375","html_url":"https://github.com/apache/pinot/pull/5745#issuecomment-663328375","issue_url":"https://api.github.com/repos/apache/pinot/issues/5745","id":663328375,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMyODM3NQ==","user":{"login":"ianvkoeppe","id":13874383,"node_id":"MDQ6VXNlcjEzODc0Mzgz","avatar_url":"https://avatars.githubusercontent.com/u/13874383?v=4","gravatar_id":"","url":"https://api.github.com/users/ianvkoeppe","html_url":"https://github.com/ianvkoeppe","followers_url":"https://api.github.com/users/ianvkoeppe/followers","following_url":"https://api.github.com/users/ianvkoeppe/following{/other_user}","gists_url":"https://api.github.com/users/ianvkoeppe/gists{/gist_id}","starred_url":"https://api.github.com/users/ianvkoeppe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ianvkoeppe/subscriptions","organizations_url":"https://api.github.com/users/ianvkoeppe/orgs","repos_url":"https://api.github.com/users/ianvkoeppe/repos","events_url":"https://api.github.com/users/ianvkoeppe/events{/privacy}","received_events_url":"https://api.github.com/users/ianvkoeppe/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T03:11:43Z","updated_at":"2020-07-24T03:11:57Z","author_association":"CONTRIBUTOR","body":"> There's also a new api being added in the controller that makes it a protocol. Perhaps you could piggy-back on it to update time-boundary? @snleee What do you think?\r\n> #5712\r\n\r\nSubbu mentioned this functionality might be possible via the controller in the future. I have just a couple concerns with that approach.\r\n\r\n1) We are planning to build a reporting pipeline within an execution environment where we may not have the flexibility or control to configure jobs which call the controller. Pinot segment creation, upload, etc. is all abstracted away.\r\n2) Managing the time boundary ourselves might be error prone since it means we have to have custom code to track our latest successful job runs and update the time boundary correctly afterwards. I'm worried about maintaining a custom job step that could potentially update the time boundary incorrectly, or having to think about how we'd rollback an update if we wanted to delete a badly pushed segment.\r\n\r\nI'm interested to hear your thoughts on these.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663328375/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663334111","html_url":"https://github.com/apache/pinot/pull/5740#issuecomment-663334111","issue_url":"https://api.github.com/repos/apache/pinot/issues/5740","id":663334111,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMzNDExMQ==","user":{"login":"suvodeep-pyne","id":2577714,"node_id":"MDQ6VXNlcjI1Nzc3MTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2577714?v=4","gravatar_id":"","url":"https://api.github.com/users/suvodeep-pyne","html_url":"https://github.com/suvodeep-pyne","followers_url":"https://api.github.com/users/suvodeep-pyne/followers","following_url":"https://api.github.com/users/suvodeep-pyne/following{/other_user}","gists_url":"https://api.github.com/users/suvodeep-pyne/gists{/gist_id}","starred_url":"https://api.github.com/users/suvodeep-pyne/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/suvodeep-pyne/subscriptions","organizations_url":"https://api.github.com/users/suvodeep-pyne/orgs","repos_url":"https://api.github.com/users/suvodeep-pyne/repos","events_url":"https://api.github.com/users/suvodeep-pyne/events{/privacy}","received_events_url":"https://api.github.com/users/suvodeep-pyne/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T03:43:45Z","updated_at":"2020-07-24T03:43:45Z","author_association":"CONTRIBUTOR","body":"Hi @akshayrai \r\n\r\nI replaced the `backfillStart` with the already existing `lastTimestamp`. This value is used as a checkpoint and is already being persisted in the db so this seems to be a better fit.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663334111/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663335958","html_url":"https://github.com/apache/pinot/pull/5712#issuecomment-663335958","issue_url":"https://api.github.com/repos/apache/pinot/issues/5712","id":663335958,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzMzNTk1OA==","user":{"login":"snleee","id":27253407,"node_id":"MDQ6VXNlcjI3MjUzNDA3","avatar_url":"https://avatars.githubusercontent.com/u/27253407?v=4","gravatar_id":"","url":"https://api.github.com/users/snleee","html_url":"https://github.com/snleee","followers_url":"https://api.github.com/users/snleee/followers","following_url":"https://api.github.com/users/snleee/following{/other_user}","gists_url":"https://api.github.com/users/snleee/gists{/gist_id}","starred_url":"https://api.github.com/users/snleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snleee/subscriptions","organizations_url":"https://api.github.com/users/snleee/orgs","repos_url":"https://api.github.com/users/snleee/repos","events_url":"https://api.github.com/users/snleee/events{/privacy}","received_events_url":"https://api.github.com/users/snleee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T03:55:27Z","updated_at":"2020-07-24T03:55:27Z","author_association":"CONTRIBUTOR","body":"#2715","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663335958/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663655592","html_url":"https://github.com/apache/pinot/issues/5559#issuecomment-663655592","issue_url":"https://api.github.com/repos/apache/pinot/issues/5559","id":663655592,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzY1NTU5Mg==","user":{"login":"Sreemanth","id":2398992,"node_id":"MDQ6VXNlcjIzOTg5OTI=","avatar_url":"https://avatars.githubusercontent.com/u/2398992?v=4","gravatar_id":"","url":"https://api.github.com/users/Sreemanth","html_url":"https://github.com/Sreemanth","followers_url":"https://api.github.com/users/Sreemanth/followers","following_url":"https://api.github.com/users/Sreemanth/following{/other_user}","gists_url":"https://api.github.com/users/Sreemanth/gists{/gist_id}","starred_url":"https://api.github.com/users/Sreemanth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Sreemanth/subscriptions","organizations_url":"https://api.github.com/users/Sreemanth/orgs","repos_url":"https://api.github.com/users/Sreemanth/repos","events_url":"https://api.github.com/users/Sreemanth/events{/privacy}","received_events_url":"https://api.github.com/users/Sreemanth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T17:45:40Z","updated_at":"2020-07-24T17:45:40Z","author_association":"CONTRIBUTOR","body":"@npawar \nEnsure  table setup logic added.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663655592/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663662162","html_url":"https://github.com/apache/pinot/issues/5747#issuecomment-663662162","issue_url":"https://api.github.com/repos/apache/pinot/issues/5747","id":663662162,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzY2MjE2Mg==","user":{"login":"yupeng9","id":13425258,"node_id":"MDQ6VXNlcjEzNDI1MjU4","avatar_url":"https://avatars.githubusercontent.com/u/13425258?v=4","gravatar_id":"","url":"https://api.github.com/users/yupeng9","html_url":"https://github.com/yupeng9","followers_url":"https://api.github.com/users/yupeng9/followers","following_url":"https://api.github.com/users/yupeng9/following{/other_user}","gists_url":"https://api.github.com/users/yupeng9/gists{/gist_id}","starred_url":"https://api.github.com/users/yupeng9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yupeng9/subscriptions","organizations_url":"https://api.github.com/users/yupeng9/orgs","repos_url":"https://api.github.com/users/yupeng9/repos","events_url":"https://api.github.com/users/yupeng9/events{/privacy}","received_events_url":"https://api.github.com/users/yupeng9/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T18:01:01Z","updated_at":"2020-07-24T18:01:01Z","author_association":"CONTRIBUTOR","body":"Right. The generated segment name includes three parts: time column's min value, time columns' max value, sequence id. e.g. `transcript_OFFLINE_1570863600000_1572418800000_0`. \r\n\r\nWe have seen some batch ingestion jobs incorrectly generate the records overlapping on the time column. This reflects on the segment metadata, specifically the min/max range of the segments. It will be helpful to have such inbuilt sanity checks to catch this kind of errors.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663662162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663664728","html_url":"https://github.com/apache/pinot/pull/5745#issuecomment-663664728","issue_url":"https://api.github.com/repos/apache/pinot/issues/5745","id":663664728,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzY2NDcyOA==","user":{"login":"kishoreg","id":850791,"node_id":"MDQ6VXNlcjg1MDc5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/850791?v=4","gravatar_id":"","url":"https://api.github.com/users/kishoreg","html_url":"https://github.com/kishoreg","followers_url":"https://api.github.com/users/kishoreg/followers","following_url":"https://api.github.com/users/kishoreg/following{/other_user}","gists_url":"https://api.github.com/users/kishoreg/gists{/gist_id}","starred_url":"https://api.github.com/users/kishoreg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishoreg/subscriptions","organizations_url":"https://api.github.com/users/kishoreg/orgs","repos_url":"https://api.github.com/users/kishoreg/repos","events_url":"https://api.github.com/users/kishoreg/events{/privacy}","received_events_url":"https://api.github.com/users/kishoreg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T18:06:33Z","updated_at":"2020-07-24T18:06:33Z","author_association":"MEMBER","body":"@ianvkoeppe this is definitely a good feature to have.  However, the solution is too restrictive and we generally prefer table level config (for multi-tenancy).\r\nCan you please create an issue to discuss high level requirements and solution.\r\n\r\nMy requirements\r\n- should be configurable per table. Have something like timeBoundaryUpdateStrategy which will allow us to add more strategies. RoutingConfig is probably the right place\r\n- An explicit API to update the time boundary for the table. This can be handy where users can call the API after all the segments are uploaded for a day.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663664728/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663672482","html_url":"https://github.com/apache/pinot/pull/5745#issuecomment-663672482","issue_url":"https://api.github.com/repos/apache/pinot/issues/5745","id":663672482,"node_id":"MDEyOklzc3VlQ29tbWVudDY2MzY3MjQ4Mg==","user":{"login":"mcvsubbu","id":2279037,"node_id":"MDQ6VXNlcjIyNzkwMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2279037?v=4","gravatar_id":"","url":"https://api.github.com/users/mcvsubbu","html_url":"https://github.com/mcvsubbu","followers_url":"https://api.github.com/users/mcvsubbu/followers","following_url":"https://api.github.com/users/mcvsubbu/following{/other_user}","gists_url":"https://api.github.com/users/mcvsubbu/gists{/gist_id}","starred_url":"https://api.github.com/users/mcvsubbu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcvsubbu/subscriptions","organizations_url":"https://api.github.com/users/mcvsubbu/orgs","repos_url":"https://api.github.com/users/mcvsubbu/repos","events_url":"https://api.github.com/users/mcvsubbu/events{/privacy}","received_events_url":"https://api.github.com/users/mcvsubbu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-07-24T18:24:50Z","updated_at":"2020-07-24T18:24:50Z","author_association":"CONTRIBUTOR","body":"@ianvkoeppe can u please create an issue first? It is better to agree on an implementation strategy in an issue. In case of external API changes, let us define the APIs clearly in a doc so that we can all comment on it.","reactions":{"url":"https://api.github.com/repos/apache/pinot/issues/comments/663672482/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]