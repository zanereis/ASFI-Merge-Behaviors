[{"url":"https://api.github.com/repos/apache/singa/issues/comments/627297455","html_url":"https://github.com/apache/singa/issues/691#issuecomment-627297455","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":627297455,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzI5NzQ1NQ==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-12T11:56:58Z","updated_at":"2020-05-12T11:56:58Z","author_association":"MEMBER","body":"> > > > Do we need to save params of the model?\r\n> > > \r\n> > > \r\n> > > Yes, says if we did the training and want to save the model, so that later we can deploy it as web service for inference\r\n> > > This is common because we can train the model inside a cluster with many computational resource.\r\n> > > Then, we deploy the model in a different environment, e.g. to host a inference job web application like image classification.\r\n> > \r\n> > \r\n> > Got it. So I think we better implement this feature on the Python side because the scheduler doesn't have information about the type of operator and it also has no concept of neural network layer.\r\n> \r\n> If it is in the python side, I guess the easiest way is use pickle to pack a python list or dict, but a drawback is that pickle cannot pack SWIG python object (if I am not wrong)\r\n> https://docs.python.org/3/library/pickle.html\r\n\r\nOr we can serialize and deserialize data ourselves. There is no need to serialize the entire objects, we just need to save the state data.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627297455/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627308459","html_url":"https://github.com/apache/singa/issues/691#issuecomment-627308459","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":627308459,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzMwODQ1OQ==","user":{"login":"chrishkchris","id":38325429,"node_id":"MDQ6VXNlcjM4MzI1NDI5","avatar_url":"https://avatars.githubusercontent.com/u/38325429?v=4","gravatar_id":"","url":"https://api.github.com/users/chrishkchris","html_url":"https://github.com/chrishkchris","followers_url":"https://api.github.com/users/chrishkchris/followers","following_url":"https://api.github.com/users/chrishkchris/following{/other_user}","gists_url":"https://api.github.com/users/chrishkchris/gists{/gist_id}","starred_url":"https://api.github.com/users/chrishkchris/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chrishkchris/subscriptions","organizations_url":"https://api.github.com/users/chrishkchris/orgs","repos_url":"https://api.github.com/users/chrishkchris/repos","events_url":"https://api.github.com/users/chrishkchris/events{/privacy}","received_events_url":"https://api.github.com/users/chrishkchris/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-12T12:21:57Z","updated_at":"2020-05-12T12:26:01Z","author_association":"CONTRIBUTOR","body":"> > > > > Do we need to save params of the model?\r\n> > > > \r\n> > > > \r\n> > > > Yes, says if we did the training and want to save the model, so that later we can deploy it as web service for inference\r\n> > > > This is common because we can train the model inside a cluster with many computational resource.\r\n> > > > Then, we deploy the model in a different environment, e.g. to host a inference job web application like image classification.\r\n> > > \r\n> > > \r\n> > > Got it. So I think we better implement this feature on the Python side because the scheduler doesn't have information about the type of operator and it also has no concept of neural network layer.\r\n> > \r\n> > \r\n> > If it is in the python side, I guess the easiest way is use pickle to pack a python list or dict, but a drawback is that pickle cannot pack SWIG python object (if I am not wrong)\r\n> > https://docs.python.org/3/library/pickle.html\r\n> \r\n> Or we can serialize and deserialize data ourselves. There is no need to serialize the entire objects, we just need to save the state data.\r\n\r\nYes, I guess it is something like this\r\n1. save https://github.com/nginyc/rafiki/blob/b027c588f27ed4e801e8e300785b0eca230b5167/examples/models/image_classification/TfVgg16.py#L105\r\n2. load\r\nhttps://github.com/nginyc/rafiki/blob/b027c588f27ed4e801e8e300785b0eca230b5167/examples/models/image_classification/TfVgg16.py#L127\r\nBut the different is that this issue is conncerning the ONNX format.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627308459/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627334841","html_url":"https://github.com/apache/singa/issues/691#issuecomment-627334841","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":627334841,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzMzNDg0MQ==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-12T13:11:58Z","updated_at":"2020-05-12T13:11:58Z","author_association":"MEMBER","body":"Rafiki dumps model in ONNX format?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627334841/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627336381","html_url":"https://github.com/apache/singa/issues/691#issuecomment-627336381","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":627336381,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzMzNjM4MQ==","user":{"login":"chrishkchris","id":38325429,"node_id":"MDQ6VXNlcjM4MzI1NDI5","avatar_url":"https://avatars.githubusercontent.com/u/38325429?v=4","gravatar_id":"","url":"https://api.github.com/users/chrishkchris","html_url":"https://github.com/chrishkchris","followers_url":"https://api.github.com/users/chrishkchris/followers","following_url":"https://api.github.com/users/chrishkchris/following{/other_user}","gists_url":"https://api.github.com/users/chrishkchris/gists{/gist_id}","starred_url":"https://api.github.com/users/chrishkchris/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chrishkchris/subscriptions","organizations_url":"https://api.github.com/users/chrishkchris/orgs","repos_url":"https://api.github.com/users/chrishkchris/repos","events_url":"https://api.github.com/users/chrishkchris/events{/privacy}","received_events_url":"https://api.github.com/users/chrishkchris/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-12T13:14:18Z","updated_at":"2020-05-12T13:14:18Z","author_association":"CONTRIBUTOR","body":"> Rafiki dumps model in ONNX format?\r\n\r\nNo, I didn't mean that. They dumps model in different format not in ONNX.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627336381/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627736886","html_url":"https://github.com/apache/singa/issues/696#issuecomment-627736886","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":627736886,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzczNjg4Ng==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T04:24:26Z","updated_at":"2020-05-13T04:24:26Z","author_association":"MEMBER","body":"* Scheme 1\r\n![scheme_1](https://user-images.githubusercontent.com/32295829/81771083-a34f7700-9514-11ea-92bd-48f884d760f7.png)\r\n* Scheme 2\r\n![scheme_2](https://user-images.githubusercontent.com/32295829/81771093-a9455800-9514-11ea-9ed6-7f6003c807ff.png)\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627736886/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627744891","html_url":"https://github.com/apache/singa/issues/696#issuecomment-627744891","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":627744891,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzc0NDg5MQ==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T04:53:58Z","updated_at":"2020-05-13T04:55:45Z","author_association":"MEMBER","body":"Agree on point 1, `Layer` vs `Operation`:\r\n\r\nCurrently `Layer` is in `autograd.py`, but what `Layer` does is **defining forward connection using building blocks including `Operation` and `Layer`**. Thus by right `Layer` is not part of `autograd`. Singa `autograd` is more on constructing backward pass.\r\n\r\nThus, propose to separate `Layer` into individual module. Additionally, stateless function like `relu` should also be a conceptual `layer`.\r\n\r\nFor external user, only `Layer` and `Module` are visible. Can build new `Layer` with exisiting `Layer`. Can build new `Module` with existing `Layer`\r\n```python\r\nfrom singa.layers import Conv2d, relu\r\n```\r\n\r\nFor internal user/advanced user, can build `Layer` with `Operation`.\r\n\r\nLastly, if this is finalized, `autograd.py` should contains only `Operation`, then we could keep the original naming convention. Not need to mark operation as \"private\" by prefixing underscore e.g. `_RNN`","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627744891/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627837030","html_url":"https://github.com/apache/singa/issues/696#issuecomment-627837030","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":627837030,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzgzNzAzMA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T08:35:29Z","updated_at":"2020-05-13T08:35:29Z","author_association":"MEMBER","body":"> \r\n> \r\n> Agree on point 1, `Layer` vs `Operation`:\r\n> \r\n> Currently `Layer` is in `autograd.py`, but what `Layer` does is **defining forward connection using building blocks including `Operation` and `Layer`**. Thus by right `Layer` is not part of `autograd`. Singa `autograd` is more on constructing backward pass.\r\n> \r\n> Thus, propose to separate `Layer` into individual module. Additionally, stateless function like `relu` should also be a conceptual `layer`.\r\nWe can create `class ReLU(Layer)` in layer.py.\r\n> \r\n> For external user, only `Layer` and `Module` are visible. Can build new `Layer` with exisiting `Layer`. Can build new `Module` with existing `Layer`\r\n> \r\n> ```python\r\n> from singa.layers import Conv2d, relu\r\n> ```\r\nshould be `ReLU`?\r\n> \r\n> For internal user/advanced user, can build `Layer` with `Operation`.\r\n> \r\n> Lastly, if this is finalized, `autograd.py` should contains only `Operation`, then we could keep the original naming convention. Not need to mark operation as \"private\" by prefixing underscore e.g. `_RNN`\r\nyes.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627837030/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627869786","html_url":"https://github.com/apache/singa/issues/696#issuecomment-627869786","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":627869786,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzg2OTc4Ng==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T09:34:56Z","updated_at":"2020-05-13T09:34:56Z","author_association":"MEMBER","body":"> \r\n> \r\n>     * Scheme 1\r\n>       ![scheme_1](https://user-images.githubusercontent.com/32295829/81771083-a34f7700-9514-11ea-92bd-48f884d760f7.png)\r\n> \r\n>     * Scheme 2\r\n>       ![scheme_2](https://user-images.githubusercontent.com/32295829/81771093-a9455800-9514-11ea-9ed6-7f6003c807ff.png)\r\n\r\nHow about using the following APIs.\r\n\r\n```python\r\nclass Module:\r\n   def __init__(self, inputs):\r\n       # inputs is a list of input tensors (placeholders)\r\n       # randomly fill each input tensor\r\n       self.forward(*inputs)  # turn off the graph mode completely\r\n\r\n    # another option is to define a compile method\r\n    def compile(self, inputs, is_train, use_graph, graph_alg):\r\n        self.forward(*inputs)\r\n       \r\nclass MyModel(Module):\r\n    def __init__(self, inputs):\r\n       # define all layers\r\n       # can we force the next call to be invoked at the end of the __init__ method?\r\n       super.__init__(inputs)  \r\n\r\nx = Placeholder((2, 3), device = gpu)  # alias of Tensor.\r\nm = MyModel([x])\r\n# if use the other option\r\n# m = MyModel()\r\n# m.compile([x], is_train=True, use_graph=True, graph_alg='sequence')\r\n\r\nfor pname, ptensor in m.get_params():\r\n    ptensor.uniform(-1, 1)\r\n\r\ny = Tensor((2,), device = gpu)\r\nfor npx, npy in data:\r\n   x.copy_from(npx)\r\n   y.copy_from(npy)\r\n   y_ = m(x)             # build the graph in the first iteration.\r\n   l = m.loss(y, y_)\r\n   # ...\r\n```\r\n\r\n```python\r\nclass MyLayer:\r\n    def __init__(kernel_initialization=\"he_uniform\", name=None):\r\n       # kernel_initialization is a string for the predefined initialization method \r\n       # or a function that accept a tensor as input and fill the values in-place; \r\n       # this is to provide a default initialization method; \r\n       #  users can also configure it to use customized initialization method or \r\n      # get the params out and fill the values explicitly as shown below.\r\n      self.init = False\r\n      self.kernel_initialization = ...\r\n\r\n    def __call__(self, x):\r\n       if self.init == False:\r\n           self.kernel = Tensor(...)\r\n           self.kernel_initialization(self.kernel)\r\n       else:\r\n          # do the forward propagation \r\n```       ","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627869786/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627889252","html_url":"https://github.com/apache/singa/issues/696#issuecomment-627889252","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":627889252,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzg4OTI1Mg==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T10:14:37Z","updated_at":"2020-05-13T10:14:37Z","author_association":"MEMBER","body":"> > ```\r\n> > * Scheme 1\r\n> >   ![scheme_1](https://user-images.githubusercontent.com/32295829/81771083-a34f7700-9514-11ea-92bd-48f884d760f7.png)\r\n> > \r\n> > * Scheme 2\r\n> >   ![scheme_2](https://user-images.githubusercontent.com/32295829/81771093-a9455800-9514-11ea-9ed6-7f6003c807ff.png)\r\n> > ```\r\n> \r\n> How about using the following APIs.\r\n> \r\n> ```python\r\n> class Module:\r\n>    def __init__(self, inputs):\r\n>        # inputs is a list of input tensors (placeholders)\r\n>        # randomly fill each input tensor\r\n>        self.forward(*inputs)  # turn off the graph mode completely\r\n> \r\n>     # another option is to define a compile method\r\n>     def compile(self, inputs, is_train, use_graph, graph_alg):\r\n>         self.forward(*inputs)\r\n>        \r\n> class MyModel(Module):\r\n>     def __init__(self, inputs):\r\n>        # define all layers\r\n>        # can we force the next call to be invoked at the end of the __init__ method?\r\n>        super.__init__(inputs)  \r\n> \r\n> x = Placeholder((2, 3), device = gpu)  # alias of Tensor.\r\n> m = MyModel([x])\r\n> # if use the other option\r\n> # m = MyModel()\r\n> # m.compile([x], is_train=True, use_graph=True, graph_alg='sequence')\r\n> \r\n> for pname, ptensor in m.get_params():\r\n>     ptensor.uniform(-1, 1)\r\n> \r\n> y = Tensor((2,), device = gpu)\r\n> for npx, npy in data:\r\n>    x.copy_from(npx)\r\n>    y.copy_from(npy)\r\n>    y_ = m(x)             # build the graph in the first iteration.\r\n>    l = m.loss(y, y_)\r\n>    # ...\r\n> ```\r\n> \r\n> ```python\r\n> class MyLayer:\r\n>     def __init__(kernel_initialization=\"he_uniform\", name=None):\r\n>        # kernel_initialization is a string for the predefined initialization method \r\n>        # or a function that accept a tensor as input and fill the values in-place; \r\n>        # this is to provide a default initialization method; \r\n>        #  users can also configure it to use customized initialization method or \r\n>       # get the params out and fill the values explicitly as shown below.\r\n>       self.init = False\r\n>       self.kernel_initialization = ...\r\n> \r\n>     def __call__(self, x):\r\n>        if self.init == False:\r\n>            self.kernel = Tensor(...)\r\n>            self.kernel_initialization(self.kernel)\r\n>        else:\r\n>           # do the forward propagation \r\n> ```\r\n\r\nThanks for such a detailed explanation! For the first scheme, we can't call the forward function in \\_\\_init\\_\\_ function because `inputs` variable is just a list of placeholders. So we still need to separate initialization and forward propagation, or it will produce a runtime error.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627889252/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627895174","html_url":"https://github.com/apache/singa/issues/696#issuecomment-627895174","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":627895174,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzg5NTE3NA==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T10:27:27Z","updated_at":"2020-05-13T10:35:10Z","author_association":"MEMBER","body":"```Python\r\nclass MyLayer:\r\n    def __init__(kernel_initialization=\"he_uniform\", name=None):\r\n       # kernel_initialization is a string for the predefined initialization method \r\n       # or a function that accept a tensor as input and fill the values in-place; \r\n       # this is to provide a default initialization method; \r\n       #  users can also configure it to use customized initialization method or \r\n      # get the params out and fill the values explicitly as shown below.\r\n      self.initialized = False\r\n      self.kernel_initialization = ...\r\n\r\n    def init(self, x):\r\n       # init params and other state data\r\n\r\n    def forward(self, x): \r\n       # do the forward propagation\r\n\r\n    # __call__ function is inherited by all subclasses\r\n    # This part of code does not need to be implemented in every subclass\r\n    def __call__(self, x):\r\n       if self.initialized == False:\r\n           self.init(inputs)\r\n           self.initialized = True\r\n       \r\n       self.forward(inputs)\r\n```\r\n\r\nIn this way,  when to initialize is transparent to users, users just need to implement \\_\\_init\\_\\_, init and forward function if they want to create a new Layer.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627895174/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627982103","html_url":"https://github.com/apache/singa/issues/696#issuecomment-627982103","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":627982103,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzk4MjEwMw==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T13:22:04Z","updated_at":"2020-05-13T13:22:04Z","author_association":"MEMBER","body":"1. Before we call Module.forward(), we can randomly fill the placeholder tensors.\r\n2. We can make Layer.init() optional. To implement a new layer, the parameter initialization can be done within the `__call__` method or in a `init()` method. It is up to the contributor.\r\n\r\nAny comments on the drawbacks?\r\n@dcslin @XJDKC ","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627982103/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/627990940","html_url":"https://github.com/apache/singa/issues/696#issuecomment-627990940","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":627990940,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNzk5MDk0MA==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T13:35:42Z","updated_at":"2020-05-13T13:39:25Z","author_association":"MEMBER","body":"> 1. Before we call Module.forward(), we can randomly fill the placeholder tensors.\r\n> 2. We can make Layer.init() optional. To implement a new layer, the parameter initialization can be done within the `__call__` method or in a `init()` method. It is up to the contributor.\r\n> \r\n> Any comments on the drawbacks?\r\n> @dcslin @XJDKC\r\n\r\n1. If we separate the initialization and the forward propagation, there is no need to fill the placeholder. The data of tensors will only be accessed in the forward propagation. For initialization, we just access their shapes, types and so on. \r\n2. That's great. But if users move the initialization into \\_\\_call\\_\\_ function, they should determine whether the layer has been initialized by themselves.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/627990940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628033791","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628033791","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628033791,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODAzMzc5MQ==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-13T14:37:36Z","updated_at":"2020-05-13T14:37:36Z","author_association":"MEMBER","body":"> 1. Before we call Module.forward(), we can randomly fill the placeholder tensors.\r\n> 2. We can make Layer.init() optional. To implement a new layer, the parameter initialization can be done within the `__call__` method or in a `init()` method. It is up to the contributor.\r\n> \r\n> Any comments on the drawbacks?\r\n> @dcslin @XJDKC\r\n\r\nFor some models, it cannot use the random inputs, such as BERT within ONNX, some nodes may compute the indices of a tensor, and the next node may split the tensor by using these indices. If we randomly generate the inputs, this case always fails.\r\n\r\nBy the way, I prefer the idea of:\r\n\r\n```py\r\n# another option is to define a compile method\r\n    def compile(self, inputs, is_train, use_graph, graph_alg):\r\n        self.forward(*inputs)\r\n```\r\n\r\nHowever, I'd like to add a method to compute the shape based on the inputs of each node instead of calling the forward function:\r\n```py\r\ndef compute_output_shape(self, input_shape):\r\n    # print(input_shape) # [(None, 10), (None, 12)]\r\n    return (None, input_shape[0][1] + input_shape[1][1] + 2)\r\n```\r\n\r\nLet me think about it, I'll comment the detailed API later.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628033791/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628355516","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628355516","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628355516,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODM1NTUxNg==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T02:54:43Z","updated_at":"2020-05-14T03:58:43Z","author_association":"MEMBER","body":"Considering the API requirement, and constraints as below:\r\n\r\nAPI requirement:\r\n1. [**Model**] multi-input/output (multi loss fn)\r\n2. [**Model**] Load model from disk, in other words: Model param memory allocation should be done in `model.__init__`\r\n\r\nAPI constraints:\r\n1. [**Model**] graph module buffer first forward call **or** turn off graph module in the first forward call\r\n2. [**Layer**] layer param memory allocation & initialization requires input x\r\n\r\n@XJDKC 's scheme 2 and @nudles 's `Placeholder` is close to current implemenation, and changes required could be small.\r\n\r\nFor model building:\r\n```python\r\nclass MyModel(Model):\r\n  def __init__(self, inputs, configs):\r\n    self.mylayer=MyLayer(configs)\r\n    self.linear1=Linear(configs, kernel_init=configs.ker_init)\r\n    super.__init__(inputs) # maybe a bit confuse for user what is this\r\n  def forward(self, inputs):\r\n    return linear1(mylayer(inputs[0], inputs[1]))\r\n```\r\n\r\nFor model running:\r\n```python\r\nx=PlaceHolder(shape=(batch, shape1, shape2))\r\nm=MyModel([x],**configs,**graph_configs)\r\nm.on_device(gpu)\r\nm.train()\r\nfor e in epochs:\r\n  for x, y in data_gen:\r\n    losses = m.loss(y, m(x))\r\n    m.optim(l1)\r\n    m.optim(l2)\r\n```\r\n\r\nFor Layer building:\r\n```python\r\nclass MyLayer(Layer):\r\n  def __init__(self, configs):\r\n    self.configs = configs\r\n  def __call__(self, inputs):\r\n    if not self.init:\r\n      self.W = Tensor(self.configs, inputs.shape).initializer()\r\n      self.device_check(inputs, self.W)\r\n      self.init=True\r\n    return = operator1(inputs[0], inputs[1])\r\n```\r\n\r\nFor Module class impl:\r\n```python\r\nclass Module:\r\n  def __init__(self, placeholder_input, configs):\r\n    turn_off_graph()\r\n    self.forward(*placeholder_input)\r\n    turn_on_graph()\r\n  def __call__(self,inputs):\r\n    return self.forward(*inputs)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628355516/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628364838","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628364838","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628364838,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODM2NDgzOA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T03:28:59Z","updated_at":"2020-05-14T03:28:59Z","author_association":"MEMBER","body":"> \r\n> \r\n> > 1. Before we call Module.forward(), we can randomly fill the placeholder tensors.\r\n> > 2. We can make Layer.init() optional. To implement a new layer, the parameter initialization can be done within the `__call__` method or in a `init()` method. It is up to the contributor.\r\n> > \r\n> > Any comments on the drawbacks?\r\n> > @dcslin @XJDKC\r\n> \r\n>     1. If we separate the initialization and the forward propagation, there is no need to fill the placeholder. The data of tensors will only be accessed in the forward propagation. For initialization, we just access their shapes, types and so on.\r\nThen we need a method like `infer_output_shapes(self, input_shapes)`; otherwise, we have to call the forward method to get the output shapes from the output tensor. I prefer to call the forward function to avoid adding a new method to each layer.  \r\n> \r\n>     2. That's great. But if users move the initialization into __call__ function, they should determine whether the layer has been initialized by themselves.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628364838/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628365342","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628365342","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628365342,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODM2NTM0Mg==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T03:30:57Z","updated_at":"2020-05-14T03:43:50Z","author_association":"MEMBER","body":"> \r\n> \r\n> > 1. Before we call Module.forward(), we can randomly fill the placeholder tensors.\r\n> > 2. We can make Layer.init() optional. To implement a new layer, the parameter initialization can be done within the `__call__` method or in a `init()` method. It is up to the contributor.\r\n> > \r\n> > Any comments on the drawbacks?\r\n> > @dcslin @XJDKC\r\n> \r\n> For some models, it cannot use the random inputs, such as BERT within ONNX, some nodes may compute the indices of a tensor, and the next node may split the tensor by using these indices. If we randomly generate the inputs, this case always fails.\r\n\r\nGood point. Then we can config the data type when creating the placeholder and initialize the placeholder according to this data type. But how to initialize? randomly or set to 0? there could still be some issues. So the better way is to use real data instead of placeholders..\r\n> \r\n> By the way, I prefer the idea of:\r\n> \r\n> ```python\r\n> # another option is to define a compile method\r\n>     def compile(self, inputs, is_train, use_graph, graph_alg):\r\n>         self.forward(*inputs)\r\n> ```\r\n> \r\n> However, I'd like to add a method to compute the shape based on the inputs of each node instead of calling the forward function:\r\n> \r\n> ```python\r\n> def compute_output_shape(self, input_shape):\r\n>     # print(input_shape) # [(None, 10), (None, 12)]\r\n>     return (None, input_shape[0][1] + input_shape[1][1] + 2)\r\n> ```\r\n> \r\n\r\nDo you need this one for onnx loading?\r\n\r\n> Let me think about it, I'll comment the detailed API later.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628365342/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628483159","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628483159","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628483159,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODQ4MzE1OQ==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T08:34:50Z","updated_at":"2020-05-14T08:34:50Z","author_association":"MEMBER","body":"Shall we go with the following APIs?\r\n@joddiy @dcslin @XJDKC  \r\nThey should be compatible with the current APIs.\r\n\r\n```python\r\nclass Module:\r\n    def compile(self, inputs, is_train, use_graph, graph_alg):\r\n        set train, graph etc config\r\n        turn off graph\r\n        if inputs are not filled, print warnings and fill inputs according to data type.\r\n        self.forward(*inputs)\r\n    \r\n     def load(self, ckp_path, include_state=False):\r\n       load onnx model and copy the params to each layer; \r\n       generate warnings for mismatched layers/params.\r\n       restore the states and return it as a dict\r\n     \r\n     def save(self, ckp_path, state={}):\r\n       save the model as onnx format\r\n       save the states\r\n    \r\n     def forward(self, x):    # turn on graph if necessary\r\n        pass\r\n\r\n     def train_one_batch(self, x, y):  # turn on graph if necessary\r\n        pass   \r\n   \r\n     @deprecated \r\n     def loss(self, ):\r\n        pass\r\n\r\n      @deprecated \r\n      def optim(self,):\r\n          pass      \r\n\r\n\r\nclass Layer:\r\n    def __init__(name=None):\r\n      self.init = False\r\n      \r\n    def __call__(self, x):\r\n       if self.init == False:\r\n           init layer states\r\n       else:\r\n          # do the forward propagation \r\n\r\n\r\nclass MyLayer(Layer):\r\n     def __init__(self):\r\n          self.layer1 = layer.Conv2d(nb_kernels = 32, kernel=3, stride=1, padding=0, kernel_init='he_uniform') \r\n          self.layer2 = layer.MaxPool2d(kernel=3, stride=2)\r\n\r\n      def forward(self, x):\r\n          return self.layer2(self.layer1(x))\r\n\r\n\r\n\r\nclass MyModule(Module):\r\n     def __init__(self):\r\n           self.blk1 = MyLayer()\r\n           self.blk2 = MyLayer()\r\n           self.optim = SGD()\r\n           self.loss = CrossEntropyLoss()\r\n\r\n      def forward(self, x):\r\n           return self.blk2(self.blk1(x))    \r\n\r\n      def train_one_batch(self, x, y): \r\n           y_ = self.forward(x)\r\n           l = self.loss(y_, y)\r\n           self.optim.backward_and_update(l)\r\n           return l\r\n\r\nx = Placeholder((2, 3), device = gpu, dtype=singa.float) # alias of Tensor\r\nfill x with values\r\nm = MyModel()\r\n\r\n# compatible with existing code which does not have the following two statements.\r\nm.compile([x], is_train=True, use_graph=True, graph_alg='sequence')\r\nfor pname, ptensor in m.get_params():\r\n    ptensor.uniform(-1, 1)   # not necessary if each layer's param init methods are configured.\r\n\r\ny = Placeholder((2,), device = gpu)\r\nfor npx, npy in data:\r\n   x.copy_from(npx)\r\n   y.copy_from(npy)\r\n   m.train_one_batch(x, y)  # build the graph in the first iter.  For the old code, the params are initialized here.\r\n\r\nm.save('mymodel', state={'epoch': data.size(), 'sgd': m.optim}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628483159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628507144","html_url":"https://github.com/apache/singa/pull/688#issuecomment-628507144","issue_url":"https://api.github.com/repos/apache/singa/issues/688","id":628507144,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODUwNzE0NA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T09:14:42Z","updated_at":"2020-05-14T09:14:42Z","author_association":"MEMBER","body":"The following APIs should be backward compatible. Please test.\r\n\r\n```python\r\n\r\nclass Linear(Layer):\r\n     def __init__(self, num_output, *args, bias=True, **kwargs):\r\n          # the following block is for backward compatibility. \r\n          # the old code will all Linear(2, 3), or (2, 3, False)\r\n          if len(args) > 0:\r\n             num_input = num_output\r\n             num_output = args[0]\r\n          if len(args) > 1:\r\n             bias = args[1]\r\n\r\n       self.num_output = num_output\r\n       self.bias = bias\r\n\r\nclass Conv2d(Layer):\r\n       def __init__(self,\r\n                 out_channels,\r\n                 kernel_size,\r\n                 *args,\r\n                 stride=1,\r\n                 padding=0,\r\n                 dilation=1,\r\n                 group=1,\r\n                 bias=True,\r\n                 pad_mode=\"NOTSET\",\r\n                 **kwargs):\r\n         # the old code create the layer like: Conv2d(8, 16, 3)， or Conv2d(8, 16, 3, stride=1)\r\n         # the following code block is for backward compatibility\r\n         if len(args) >0:\r\n           in_channel=out_channel\r\n           out_channel = kernel\r\n           kernel = args[0]\r\n         if len(args) > 1:\r\n           stride = args[1]\r\n         if len(args) > 2:\r\n           padding = args[2]\r\n ```\r\n\r\n\r\n\r\n\r\n         ","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628507144/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628528799","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628528799","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628528799,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODUyODc5OQ==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T09:56:31Z","updated_at":"2020-05-14T10:05:40Z","author_association":"MEMBER","body":"So we replace the loss and optim with train_one_batch?\r\nShould we make Module a subclass of Layer?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628528799/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628547912","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628547912","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628547912,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODU0NzkxMg==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T10:36:51Z","updated_at":"2020-05-14T10:37:32Z","author_association":"MEMBER","body":"To me this api is more clear. For example, the `model.compile([x])` make more sense as it require `x` as arg, compared to `model([x])` (first call for init purpose).\r\nAlso introducing `train_one_batch()` gives flexibility on loss function and optim function. \r\nWhile `train_one_batch()` is only an interface, and let user to define, and there is no decorator for this method. It sounds like there is no enforcement for user to use this method. Maybe we can make it clear in documentation that this is singa-way to build the model to enforece this `train_one_batch()` method.\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628547912/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628548737","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628548737","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628548737,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODU0ODczNw==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T10:38:39Z","updated_at":"2020-05-14T10:41:39Z","author_association":"MEMBER","body":"> Shall we go with the following APIs?\r\n> @joddiy @dcslin @XJDKC\r\n> They should be compatible with the current APIs.\r\n> \r\n> ```python\r\n> class Module:\r\n>     def compile(self, inputs, is_train, use_graph, graph_alg):\r\n>         set train, graph etc config\r\n>         turn off graph\r\n>         if inputs are not filled, print warnings and fill inputs according to data type.\r\n>         self.forward(*inputs)\r\n>     \r\n>      def load(self, ckp_path, include_state=False):\r\n>        load onnx model and copy the params to each layer; \r\n>        generate warnings for mismatched layers/params.\r\n>        restore the states and return it as a dict\r\n>      \r\n>      def save(self, ckp_path, state={}):\r\n>        save the model as onnx format\r\n>        save the states\r\n>     \r\n>      def forward(self, x):    # turn on graph if necessary\r\n>         pass\r\n> \r\n>      def train_one_batch(self, x, y):  # turn on graph if necessary\r\n>         pass   \r\n>    \r\n>      @deprecated \r\n>      def loss(self, ):\r\n>         pass\r\n> \r\n>       @deprecated \r\n>       def optim(self,):\r\n>           pass      \r\n> \r\n> \r\n> class Layer:\r\n>     def __init__(name=None):\r\n>       self.init = False\r\n>       \r\n>     def __call__(self, x):\r\n>        if self.init == False:\r\n>            init layer states\r\n>        else:\r\n>           # do the forward propagation \r\n> \r\n> \r\n> class MyLayer(Layer):\r\n>      def __init__(self):\r\n>           self.layer1 = layer.Conv2d(nb_kernels = 32, kernel=3, stride=1, padding=0, kernel_init='he_uniform') \r\n>           self.layer2 = layer.MaxPool2d(kernel=3, stride=2)\r\n> \r\n>       def forward(self, x):\r\n>           return self.layer2(self.layer1(x))\r\n> \r\n> \r\n> \r\n> class MyModule(Module):\r\n>      def __init__(self):\r\n>            self.blk1 = MyLayer()\r\n>            self.blk2 = MyLayer()\r\n>            self.optim = SGD()\r\n>            self.loss = CrossEntropyLoss()\r\n> \r\n>       def forward(self, x):\r\n>            return self.blk2(self.blk1(x))    \r\n> \r\n>       def train_one_batch(self, x, y): \r\n>            y_ = self.forward(x)\r\n>            l = self.loss(y_, y)\r\n>            self.optim.backward_and_update(l)\r\n>            return l\r\n> \r\n> x = Placeholder((2, 3), device = gpu, dtype=singa.float) # alias of Tensor\r\n> fill x with values\r\n> m = MyModel()\r\n> \r\n> # compatible with existing code which does not have the following two statements.\r\n> m.compile([x], is_train=True, use_graph=True, graph_alg='sequence')\r\n> for pname, ptensor in m.get_params():\r\n>     ptensor.uniform(-1, 1)   # not necessary if each layer's param init methods are configured.\r\n> \r\n> y = Placeholder((2,), device = gpu)\r\n> for npx, npy in data:\r\n>    x.copy_from(npx)\r\n>    y.copy_from(npy)\r\n>    m.train_one_batch(x, y)  # build the graph in the first iter.  For the old code, the params are initialized here.\r\n> \r\n> m.save('mymodel', state={'epoch': data.size(), 'sgd': m.optim}\r\n> ```\r\n\r\nThis approach still postpones the operation init till the training phase right? When the user has a batch of samples, he calls `train_one_batch`, to call `forward`, and then to call `_call_`:\r\n```py\r\ndef __call__(self, x):\r\n    if self.init == False:\r\n        init layer states\r\n```\r\nit's still strange to init the graph until the user has the data.\r\n\r\nIn my opinion, the current problem is, \r\n1. we don't have the shape of the input -> so we using a Placeholder as the input\r\n2. even we have the shape of input data, we cannot compute the all shapes of intermediate tensors since we cannot call the forward with Placeholder -> we may want to init random data but it may incur error.\r\n\r\nSo, the key point is, we bind the graph construction with `forward` function. Only when we call forward, we construct the graph. But if we want to call forward we must have the real data.\r\n\r\nThen I'm thinking about separating the graph construction with `forward` function. We define several classes called `Graph`, `Node`, the `Graph` stores relationship between `Node`s, and `Node`s stores an `Operation` as well as its input and output.  \r\n\r\nIn the `_call_` function of an `Operation`, we don't call the `forward` function, instead, create a `Node`, and stores this operation itself within this `Node`, set its input and output, then return this newly created `Node`. So finally, in the following code:\r\n```py\r\nclass Operation(object):\r\n    def __init__(self):\r\n        pass\r\n\r\n    def __call__(self, previous_node): # for multiply input is similiar\r\n        # create an Node\r\n        # link the current with previous node\r\n        # do the infer_shape, set the shape of each input and output for the current node and previous node\r\n        current_node = new Node()\r\n        current_node.input.node = previous_node\r\n        current_node.operation = self\r\n        current_node.output.shape = infer_shape()\r\n        previous_node.output.node = current_node\r\n        return current_node\r\n\r\n    def forward():\r\n        pass\r\n\r\n    def backward():\r\n        pass\r\n\r\n    def infer_shape():\r\n        pass\r\n```\r\n\r\n\r\nWe actually constructed a `Graph` linked with `Node` by using the following code:\r\n```py\r\nclass MyModule(Module):\r\n    def __init__(self):\r\n        super(Model, self).__init__()\r\n\r\n        self.conv1 = autograd.Conv2d(1, 20, 5, padding=0)\r\n        self.conv2 = autograd.Conv2d(20, 50, 5, padding=0)\r\n\r\n        self.sgd = opt.SGD(lr=0.01)\r\n\r\n    def construt_graph(self, x):\r\n        # x is a placeholder\r\n       # create the Graph linked with Node\r\n        y = self.conv1(x)\r\n        y = self.conv2(y)\r\n        self.graph = Graph(x, y)\r\n\r\n    def train(self, x, y): \r\n        y_ = self.graph.forward(x)\r\n        l = self.loss(y_, y)\r\n        self.optim.backward_and_update(l)\r\n        return l\r\n\r\n    def loss(self, out, y):\r\n        return autograd.softmax_cross_entropy(out, y)\r\n\r\n    def optim(self, loss):\r\n        self.sgd.backward_and_update(loss)\r\n\r\nmodel = MyModule()\r\nx = Placeholder((2, 3), device = gpu, dtype=singa.float) # alias of Tensor\r\nmodel.construt_graph(x) # build the graph\r\n\r\ny = Placeholder((2,), device = gpu)\r\nfor npx, npy in data:\r\n   x.copy_from(npx)\r\n   y.copy_from(npy)\r\n   m.train(x, y)  # directly train\r\n\r\nm.save('mymodel', state={'epoch': data.size(), 'sgd': m.optim}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628548737/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628551574","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628551574","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628551574,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODU1MTU3NA==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T10:44:55Z","updated_at":"2020-05-14T10:44:55Z","author_association":"MEMBER","body":"I see the @joddiy proposal is different only on a naming of a method, `compile` to `construt_graph` in terms of API perspective. Maybe can upgrade the backend to graph construction later without breaking new API?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628551574/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628554398","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628554398","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628554398,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODU1NDM5OA==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T10:51:07Z","updated_at":"2020-05-14T10:51:07Z","author_association":"MEMBER","body":"I think we don't need to fill placeholders. If we turn off the buffer, the operations and intermediate tensors in the forward functions can be generated without executing them. So we can get the output tensors in this way.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628554398/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628554400","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628554400","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628554400,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODU1NDQwMA==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T10:51:07Z","updated_at":"2020-05-14T10:51:24Z","author_association":"MEMBER","body":"> I see the @joddiy proposal is different only on a naming of a method, `compile` to `construt_graph` in terms of API perspective. Maybe can upgrade the backend to graph construction later without breaking new API?\r\n\r\nHi, @dcslin , the key point is the `_call_` function of Operation(or Layer, since we want to merge these two), this `_call` doesn't call the forward function instead it creates a new object we called `Node`, so within the `construt_graph`, or we say, `compile`, we build the graph with a placeholder, which means we don't need to postpone the graph construction til we call forward function after we have the real data.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628554400/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628560755","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628560755","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628560755,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODU2MDc1NQ==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T11:04:57Z","updated_at":"2020-05-14T11:06:19Z","author_association":"MEMBER","body":"```Python\r\nclass Module:\r\n    def compile(self, inputs, is_train, use_graph, graph_alg):\r\n        set train, graph etc config\r\n        ===turn on graph===\r\n        if inputs are not filled, print warnings and fill inputs according to data type.\r\n        self.forward(*inputs)\r\n        ===turn off graph===\r\n    \r\n     def load(self, ckp_path, include_state=False):\r\n       load onnx model and copy the params to each layer; \r\n       generate warnings for mismatched layers/params.\r\n       restore the states and return it as a dict\r\n     \r\n     def save(self, ckp_path, state={}):\r\n       save the model as onnx format\r\n       save the states\r\n    \r\n     def forward(self, x):    # turn on graph if necessary\r\n        pass\r\n\r\n     def train_one_batch(self, x, y):  # turn on graph if necessary\r\n        pass   \r\n   \r\n     @deprecated \r\n     def loss(self, ):\r\n        pass\r\n\r\n      @deprecated \r\n      def optim(self,):\r\n          pass      \r\n\r\n\r\nclass Layer:\r\n    def __init__(name=None):\r\n      self.init = False\r\n\r\n    def do_init(x):\r\n        ===turn off graph===\r\n           init layer states\r\n           As the graph is turned off, the initialization operations will be executed\r\n        ===restore the state of the graph===\r\n      \r\n    def forward():\r\n        # do the forward propagation \r\n\r\n    def __call__(self, x):\r\n       if self.init == False:\r\n          self.do_init(x)\r\n       self.forward(x)\r\n\r\nclass MyLayer(Layer):\r\n     def __init__(self):\r\n          self.layer1 = layer.Conv2d(nb_kernels = 32, kernel=3, stride=1, padding=0, kernel_init='he_uniform') \r\n          self.layer2 = layer.MaxPool2d(kernel=3, stride=2)\r\n\r\n      def forward(self, x):\r\n          return self.layer2(self.layer1(x))\r\n\r\n\r\n\r\nclass MyModule(Module):\r\n     def __init__(self):\r\n           self.blk1 = MyLayer()\r\n           self.blk2 = MyLayer()\r\n           self.optim = SGD()\r\n           self.loss = CrossEntropyLoss()\r\n\r\n      def forward(self, x):\r\n           return self.blk2(self.blk1(x))    \r\n\r\n      def train_one_batch(self, x, y): \r\n           y_ = self.forward(x)\r\n           l = self.loss(y_, y)\r\n           self.optim.backward_and_update(l)\r\n           return l\r\n\r\nx = Placeholder((2, 3), device = gpu, dtype=singa.float) # alias of Tensor\r\n#  === no need to fill x with values===\r\nm = MyModel()\r\n\r\n# compatible with existing code which does not have the following two statements.\r\nm.compile([x], is_train=True, use_graph=True, graph_alg='sequence')\r\nfor pname, ptensor in m.get_params():\r\n    ptensor.uniform(-1, 1)   # not necessary if each layer's param init methods are configured.\r\n\r\ny = Placeholder((2,), device = gpu)\r\nfor npx, npy in data:\r\n   x.copy_from(npx)\r\n   y.copy_from(npy)\r\n   m.train_one_batch(x, y)  # build the graph in the first iter.  For the old code, the params are initialized here.\r\n\r\nm.save('mymodel', state={'epoch': data.size(), 'sgd': m.optim}\r\n```\r\n\r\nHow about this proposal?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628560755/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628573921","html_url":"https://github.com/apache/singa/issues/696#issuecomment-628573921","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":628573921,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODU3MzkyMQ==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T11:33:26Z","updated_at":"2020-05-14T11:35:49Z","author_association":"MEMBER","body":"> ```python\r\n> class Module:\r\n>     def compile(self, inputs, is_train, use_graph, graph_alg):\r\n>         set train, graph etc config\r\n>         ===turn on graph===\r\n>         if inputs are not filled, print warnings and fill inputs according to data type.\r\n>         self.forward(*inputs)\r\n>         ===turn off graph===\r\n>     \r\n>      def load(self, ckp_path, include_state=False):\r\n>        load onnx model and copy the params to each layer; \r\n>        generate warnings for mismatched layers/params.\r\n>        restore the states and return it as a dict\r\n>      \r\n>      def save(self, ckp_path, state={}):\r\n>        save the model as onnx format\r\n>        save the states\r\n>     \r\n>      def forward(self, x):    # turn on graph if necessary\r\n>         pass\r\n> \r\n>      def train_one_batch(self, x, y):  # turn on graph if necessary\r\n>         pass   \r\n>    \r\n>      @deprecated \r\n>      def loss(self, ):\r\n>         pass\r\n> \r\n>       @deprecated \r\n>       def optim(self,):\r\n>           pass      \r\n> \r\n> \r\n> class Layer:\r\n>     def __init__(name=None):\r\n>       self.init = False\r\n> \r\n>     def do_init(x):\r\n>         ===turn off graph===\r\n>            init layer states\r\n>            As the graph is turned off, the initialization operations will be executed\r\n>         ===restore the state of the graph===\r\n>       \r\n>     def forward():\r\n>         # do the forward propagation \r\n> \r\n>     def __call__(self, x):\r\n>        if self.init == False:\r\n>           self.do_init(x)\r\n>        self.forward(x)\r\n> \r\n> class MyLayer(Layer):\r\n>      def __init__(self):\r\n>           self.layer1 = layer.Conv2d(nb_kernels = 32, kernel=3, stride=1, padding=0, kernel_init='he_uniform') \r\n>           self.layer2 = layer.MaxPool2d(kernel=3, stride=2)\r\n> \r\n>       def forward(self, x):\r\n>           return self.layer2(self.layer1(x))\r\n> \r\n> \r\n> \r\n> class MyModule(Module):\r\n>      def __init__(self):\r\n>            self.blk1 = MyLayer()\r\n>            self.blk2 = MyLayer()\r\n>            self.optim = SGD()\r\n>            self.loss = CrossEntropyLoss()\r\n> \r\n>       def forward(self, x):\r\n>            return self.blk2(self.blk1(x))    \r\n> \r\n>       def train_one_batch(self, x, y): \r\n>            y_ = self.forward(x)\r\n>            l = self.loss(y_, y)\r\n>            self.optim.backward_and_update(l)\r\n>            return l\r\n> \r\n> x = Placeholder((2, 3), device = gpu, dtype=singa.float) # alias of Tensor\r\n> #  === no need to fill x with values===\r\n> m = MyModel()\r\n> \r\n> # compatible with existing code which does not have the following two statements.\r\n> m.compile([x], is_train=True, use_graph=True, graph_alg='sequence')\r\n> for pname, ptensor in m.get_params():\r\n>     ptensor.uniform(-1, 1)   # not necessary if each layer's param init methods are configured.\r\n> \r\n> y = Placeholder((2,), device = gpu)\r\n> for npx, npy in data:\r\n>    x.copy_from(npx)\r\n>    y.copy_from(npy)\r\n>    m.train_one_batch(x, y)  # build the graph in the first iter.  For the old code, the params are initialized here.\r\n> \r\n> m.save('mymodel', state={'epoch': data.size(), 'sgd': m.optim}\r\n> ```\r\n> \r\n> How about this proposal?\r\n\r\nThanks for your comments. I guess it's a good idea we add a compile function before the training. Based on Ruling's code, if we don't want to run the computation during the init phase, we can add a function to compute the shape:\r\n\r\n```py\r\nclass Module:\r\n    def compile(self, inputs, is_train, use_graph, graph_alg):\r\n        set train, graph etc config\r\n        turn off graph\r\n        if inputs are not filled, print warnings and fill inputs according to data type.\r\n        self.forward(*inputs)\r\n    \r\n     def load(self, ckp_path, include_state=False):\r\n       load onnx model and copy the params to each layer; \r\n       generate warnings for mismatched layers/params.\r\n       restore the states and return it as a dict\r\n     \r\n     def save(self, ckp_path, state={}):\r\n       save the model as onnx format\r\n       save the states\r\n    \r\n     def forward(self, x):    # turn on graph if necessary\r\n        pass\r\n\r\n     def train_one_batch(self, x, y):  # turn on graph if necessary\r\n        pass   \r\n   \r\n     @deprecated \r\n     def loss(self, ):\r\n        pass\r\n\r\n      @deprecated \r\n      def optim(self,):\r\n          pass      \r\n\r\n\r\nclass Layer:\r\n    def __init__(name=None):\r\n      self.init = False\r\n\r\n    def do_init(x):\r\n        #  compute the output shape\r\n        output_shape = self.infer_shape(x)\r\n        # init weights by the shape\r\n        init_weights()\r\n        # return a new Placeholder to the next operation\r\n        return Placeholder(output_shape, device = gpu, dtype=singa.float) # alias of Tensor\r\n      \r\n    def forward():\r\n        # do the forward propagation \r\n\r\n    def __call__(self, x):\r\n       if self.init == False:\r\n          y = self.do_init(x)\r\n       y = self.forward(x)\r\n       return y\r\n    \r\n    def infer_shape(x):\r\n        # infer shape\r\n\r\n\r\nclass MyLayer(Layer):\r\n     def __init__(self):\r\n          self.layer1 = layer.Conv2d(nb_kernels = 32, kernel=3, stride=1, padding=0, kernel_init='he_uniform') \r\n          self.layer2 = layer.MaxPool2d(kernel=3, stride=2)\r\n\r\n      def forward(self, x):\r\n          return self.layer2(self.layer1(x))\r\n\r\n\r\n\r\nclass MyModule(Module):\r\n     def __init__(self):\r\n           self.blk1 = MyLayer()\r\n           self.blk2 = MyLayer()\r\n           self.optim = SGD()\r\n           self.loss = CrossEntropyLoss()\r\n\r\n      def forward(self, x):\r\n           return self.blk2(self.blk1(x))    \r\n\r\n      def train_one_batch(self, x, y): \r\n           y_ = self.forward(x)\r\n           l = self.loss(y_, y)\r\n           self.optim.backward_and_update(l)\r\n           return l\r\n\r\nx = Placeholder((2, 3), device = gpu, dtype=singa.float) # alias of Tensor\r\n#  === no need to fill x with values===\r\nm = MyModel()\r\n\r\n# compatible with existing code which does not have the following two statements.\r\nm.compile([x], is_train=True, use_graph=True, graph_alg='sequence')\r\nfor pname, ptensor in m.get_params():\r\n    ptensor.uniform(-1, 1)   # not necessary if each layer's param init methods are configured.\r\n\r\ny = Placeholder((2,), device = gpu)\r\nfor npx, npy in data:\r\n   x.copy_from(npx)\r\n   y.copy_from(npy)\r\n   m.train_one_batch(x, y)  # build the graph in the first iter.  For the old code, the params are initialized here.\r\n\r\nm.save('mymodel', state={'epoch': data.size(), 'sgd': m.optim}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628573921/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628605135","html_url":"https://github.com/apache/singa/issues/695#issuecomment-628605135","issue_url":"https://api.github.com/repos/apache/singa/issues/695","id":628605135,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODYwNTEzNQ==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T12:36:42Z","updated_at":"2020-05-14T12:36:42Z","author_association":"MEMBER","body":"Hi @agnesnatasya , thank you for raising the issue, it seems that your conda is not configured properly. Would you like to follow this tutorial on conda website to configure your conda environment? https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html\r\n\r\nI have just tested on a clean environment, it works at my side:\r\n```\r\nroot@1e5cfb0a87dd:~# conda search -c nusdbsystem singa-gpu=3.0.0\r\nLoading channels: done\r\n# Name                       Version           Build  Channel\r\nsinga-gpu                      3.0.0            py37  nusdbsystem\r\n```\r\n\r\n```\r\nroot@1e5cfb0a87dd:~# conda install -c nusdbsystem singa-gpu=3.0.0\r\nCollecting package metadata (current_repodata.json): done\r\nSolving environment: failed with initial frozen solve. Retrying with flexible solve.\r\nSolving environment: failed with repodata from current_repodata.json, will retry with next repodata source.\r\nCollecting package metadata (repodata.json): done\r\nSolving environment: done\r\n\r\n## Package Plan ##\r\n\r\n  environment location: /root/miniconda\r\n\r\n  added / updated specs:\r\n    - singa-gpu=3.0.0\r\n\r\n\r\nThe following packages will be downloaded:\r\n\r\n...\r\n...\r\n...\r\n\r\nDownloading and Extracting Packages\r\nllvm-openmp-10.0.0   | 2.8 MB    | ################################################################################################################################################################### | 100%\r\nlibprotobuf-3.9.2    | 4.7 MB    | ################################################################################################################################################################### | 100%\r\n_libgcc_mutex-0.1    | 3 KB      | ################################################################################################################################################################### | 100%\r\ndnnl-1.1             | 3.6 MB    | ################################################################################################################################################################### | 100%\r\nwrapt-1.12.1         | 46 KB     | ################################################################################################################################################################### | 100%\r\nsinga-gpu-3.0.0      | 4 KB      | ################################################################################################################################################################### | 100%\r\nprotobuf-3.9.2       | 688 KB    | ################################################################################################################################################################### | 100%\r\nsinga-3.0.0          | 26.8 MB   | ################################################################################################################################################################### | 100%\r\nlibopenblas-0.3.9    | 7.8 MB    | ################################################################################################################################################################### | 100%\r\ndeprecated-1.2.7     | 10 KB     | ################################################################################################################################################################### | 100%\r\nlibgcc-ng-9.2.0      | 8.2 MB    | ################################################################################################################################################################### | 100%\r\n_openmp_mutex-4.5    | 5 KB      | ################################################################################################################################################################### | 100%\r\nPreparing transaction: done\r\nVerifying transaction: done\r\nExecuting transaction: done\r\n```\r\n\r\n```\r\nroot@1e5cfb0a87dd:~# python3\r\nPython 3.7.6 (default, Jan  8 2020, 19:59:22)\r\n[GCC 7.3.0] :: Anaconda, Inc. on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import singa\r\n```\r\n\r\nKindly let me know if further info is required.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628605135/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628795899","html_url":"https://github.com/apache/singa/issues/695#issuecomment-628795899","issue_url":"https://api.github.com/repos/apache/singa/issues/695","id":628795899,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODc5NTg5OQ==","user":{"login":"agnesnatasya","id":44172431,"node_id":"MDQ6VXNlcjQ0MTcyNDMx","avatar_url":"https://avatars.githubusercontent.com/u/44172431?v=4","gravatar_id":"","url":"https://api.github.com/users/agnesnatasya","html_url":"https://github.com/agnesnatasya","followers_url":"https://api.github.com/users/agnesnatasya/followers","following_url":"https://api.github.com/users/agnesnatasya/following{/other_user}","gists_url":"https://api.github.com/users/agnesnatasya/gists{/gist_id}","starred_url":"https://api.github.com/users/agnesnatasya/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/agnesnatasya/subscriptions","organizations_url":"https://api.github.com/users/agnesnatasya/orgs","repos_url":"https://api.github.com/users/agnesnatasya/repos","events_url":"https://api.github.com/users/agnesnatasya/events{/privacy}","received_events_url":"https://api.github.com/users/agnesnatasya/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-14T17:59:24Z","updated_at":"2020-05-14T17:59:24Z","author_association":"CONTRIBUTOR","body":"Hi @dcslin thank you so much for replying to my issue. Yes, I did not create the virtual environment properly. Now, I have created the virtual environment using \r\n`conda create -n singa python=3.6`\r\nand I entered this command afterwards\r\n`conda install -c nusdbsystem -c conda-forge singa=3.0.0`\r\n\r\nI do not use singa-gpu=3.0.0 like you because if gave me a PackageNotFoundError as it is not listed in my channel, singa=3.0.0 works for me though. \r\n\r\nHowever, it still gave me a compatibility error. \r\n```\r\nUnsatisfiableError: The following specifications were found to be incompatible with each other:\r\n\r\n\r\n\r\nPackage libcxx conflicts for:\r\npython=3.6 -> libcxx[version='>=4.0.1']\r\nsinga=3.0.0 -> libcxx[version='>=9.0.1']\r\nPackage libopenblas conflicts for:\r\nsinga=3.0.0 -> libopenblas=0.3.9\r\nPackage numpy conflicts for:\r\nsinga=3.0.0 -> numpy[version='>=1.16,<1.17.0a0']\r\nPackage tk conflicts for:\r\npython=3.6 -> tk[version='8.6.*|>=8.6.7,<8.7.0a0|>=8.6.8,<8.7.0a0']\r\nPackage zlib conflicts for:\r\npython=3.6 -> zlib[version='>=1.2.11,<1.3.0a0']\r\nPackage glog conflicts for:\r\nsinga=3.0.0 -> glog[version='>=0.3.5,<0.4.0a0']\r\nPackage libprotobuf conflicts for:\r\nsinga=3.0.0 -> libprotobuf=3.10.0\r\nPackage python_abi conflicts for:\r\nsinga=3.0.0 -> python_abi[version='3.6.*|3.7.*',build='*_cp37m|*_cp36m']\r\nPackage tqdm conflicts for:\r\nsinga=3.0.0 -> tqdm\r\nPackage pip conflicts for:\r\npython=3.6 -> pip\r\nPackage deprecated conflicts for:\r\nsinga=3.0.0 -> deprecated=1.2.7\r\nPackage sqlite conflicts for:\r\npython=3.6 -> sqlite[version='>=3.20.1,<4.0a0|>=3.22.0,<4.0a0|>=3.23.1,<4.0a0|>=3.24.0,<4.0a0|>=3.25.2,<4.0a0|>=3.26.0,<4.0a0|>=3.29.0,<4.0a0|>=3.30.1,<4.0a0|>=3.31.1,<4.0a0']\r\nPackage xz conflicts for:\r\npython=3.6 -> xz[version='>=5.2.3,<6.0a0|>=5.2.4,<6.0a0|>=5.2.5,<6.0a0']\r\nPackage readline conflicts for:\r\npython=3.6 -> readline[version='7.*|>=7.0,<8.0a0|>=8.0,<9.0a0']\r\nPackage libffi conflicts for:\r\npython=3.6 -> libffi[version='3.2.*|>=3.2.1,<3.3a0|>=3.3,<3.4.0a0']\r\nPackage future conflicts for:\r\nsinga=3.0.0 -> future\r\nPackage ncurses conflicts for:\r\npython=3.6 -> ncurses[version='>=6.0,<7.0a0|>=6.1,<7.0a0|>=6.2,<7.0a0']\r\nPackage onnx conflicts for:\r\nsinga=3.0.0 -> onnx=1.6.0\r\nPackage dnnl conflicts for:\r\nsinga=3.0.0 -> dnnl[version='>=1.1,<1.2.0a0']\r\nPackage openssl conflicts for:\r\npython=3.6 -> openssl[version='1.0.*|1.0.*,>=1.0.2l,<1.0.3a|>=1.0.2m,<1.0.3a|>=1.0.2n,<1.0.3a|>=1.0.2o,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1c,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1e,<1.1.2a|>=1.1.1g,<1.1.2a']\r\nPackage pillow conflicts for:\r\nsinga=3.0.0 -> pillow\r\n```\r\nI received similar long error message when I configure the python version of the virtual environment to be 3.7. \r\n\r\nThus, I tried to create the virtual environment using package version according to what singa wants, such as \r\n```\r\nconda install -n singa python=3.6 libcxx=9.0.1 libopenblas=0.3.9 numpy=1.16 tk=8.6.7 zlib=1.2.11 glog=0.3.5 tqdm pip deprecated=1.2.7 sqlite=3.20.1 xz=5.2.3 readline=7.0 libffi=3.2.1 future ncurses=6.1 openssl=1.0.2 pillow\r\n```\r\n\r\nIt then give me some other incompatibility error like this\r\n```\r\nUnsatisfiableError: The following specifications were found to be incompatible with a past\r\nexplicit spec that is not an explicit spec in this operation (libopenblas):\r\n\r\n  - libopenblas=0.3.9\r\n  - numpy=1.16 -> mkl_random[version='>=1.0.2,<2.0a0'] -> numpy-base[version='>=1.0.2,<2.0a0,>=1.0.4,<2.0a0'] -> libopenblas[version='>=0.3.3,<1.0a0']\r\n\r\nThe following specifications were found to be incompatible with each other:\r\n\r\n\r\n\r\nPackage libgfortran conflicts for:\r\nlibgfortran\r\nnumpy=1.16 -> mkl_random[version='>=1.0.2,<2.0a0'] -> numpy-base[version='>=1.0.2,<2.0a0,>=1.0.4,<2.0a0'] -> libopenblas[version='>=0.3.3,<1.0a0'] -> libgfortran[version='>=3.0.1,<4.0.0.a0']\r\nlibopenblas=0.3.9 -> libgfortran[version='>=4.0.0,<5.0.0.a0']\r\n```\r\n\r\nReally apologise for the trouble, do you have any idea why this is happening?\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628795899/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628979345","html_url":"https://github.com/apache/singa/pull/688#issuecomment-628979345","issue_url":"https://api.github.com/repos/apache/singa/issues/688","id":628979345,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODk3OTM0NQ==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T01:53:28Z","updated_at":"2020-05-15T01:53:28Z","author_association":"MEMBER","body":"update linear constructor, tested ok","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628979345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/628981306","html_url":"https://github.com/apache/singa/pull/688#issuecomment-628981306","issue_url":"https://api.github.com/repos/apache/singa/issues/688","id":628981306,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODk4MTMwNg==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T02:00:16Z","updated_at":"2020-05-15T02:00:16Z","author_association":"NONE","body":"This pull request **introduces 3 alerts** when merging 3d835a0d03d4f2172ede1f812a0508a4cd93cb77 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-c32b7ed7c06733dda07d225da7dcbad88866b184)\n\n**new alerts:**\n\n* 2 for Unnecessary pass\n* 1 for Unused import","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/628981306/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629019650","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629019650","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629019650,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTAxOTY1MA==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T04:31:20Z","updated_at":"2020-05-15T04:31:20Z","author_association":"NONE","body":"This pull request **introduces 1 alert** when merging 6bebd087941ece23608f58bbe36da1b89fd9deec into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-2e2dfa6988a741deaa73abb6b233bf700d55fe92)\n\n**new alerts:**\n\n* 1 for Unused import","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629019650/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629042559","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629042559","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629042559,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTA0MjU1OQ==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T05:53:04Z","updated_at":"2020-05-15T05:53:04Z","author_association":"NONE","body":"This pull request **introduces 1 alert** and **fixes 1** when merging cb524a2669d76cd1cbbb807de8fb89d34fd194b9 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-0bfbe366c2e890694fc67a96b2e3218e18fc0fa6)\n\n**new alerts:**\n\n* 1 for Unused import\n\n**fixed alerts:**\n\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629042559/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629108980","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629108980","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629108980,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTEwODk4MA==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T08:36:54Z","updated_at":"2020-05-15T09:02:45Z","author_association":"MEMBER","body":"How are the topological connection(`forward()`) and configs(`Linear(2,3)`) handled when `module.save()` is called?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629108980/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629120597","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629120597","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629120597,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTEyMDU5Nw==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T09:00:15Z","updated_at":"2020-05-15T09:00:15Z","author_association":"MEMBER","body":"I guess \"high/low priority\" refers to the preference? In the \"low priority\" option, the `save` and `load` is non intrusive/not part of class `module`.\r\nPersonally, serialization, is a mechanism telling how to handle a class, is preferred to be non intrusive/ not part of the class. The class itself is a structure. For example `mymodel = MyModel(); mymodel.load(fp)`. Maybe can be `mymodel=singa.module.load(fp)` \r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629120597/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629147694","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629147694","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629147694,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTE0NzY5NA==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T10:00:21Z","updated_at":"2020-05-15T10:00:21Z","author_association":"MEMBER","body":"## Conslusion first\r\n\r\nGood news: \r\n> The ONNX can defines the loss and optimizer now within its format. However, current loss only have `NegativeLogLikelihoodLoss` and `SoftmaxCrossEntropyLoss`. Also, it only can store optimizers, only have - `Adagrad`, `Adam`, `Momentum`(SGD with standard momentum). \r\n\r\nBad news:\r\n> we need to update the onnx to 1.7, which is released last week, may not be so stable. In this release, ONNX defines a comlicated node called `GraphCall` to specify which gradients should be computed and how to update the tensors by using these gradients. Since we will update the weights following the backward, so this part may not be useful for us.\r\n\r\n## ONNX Training Preview (TrainingInfoProto)\r\n\r\nIn last week, the ONNX team has released a new version [1.7.0](https://github.com/onnx/onnx/releases/tag/v1.7.0) which upgrade its opset version to 12. In this new rleases, they add a new feature called [`TrainingInfoProto`](https://github.com/onnx/onnx/blob/3368834cf0b1f0ab9838cf6bdf78a27299d08187/onnx/onnx.proto3#L211-L316). \r\n\r\nThis new feature defines something about training information. There are two main parts in it, `initialization-step` and `training-algorithm-step`.\r\n\r\n### initialization-step\r\n\r\n`initialization-step` means the developer can defines a `initialization`. For its type, the `initialization` is a formal ONNX graph. It doesn't have input but seveal outputs. The developer can defines some nodes in this graph, such as `RandomNormal` or `RandomUniform`, and in another field called `initialization_binding`, the developer can assign these outputs to the specific tensors in the inference graph.\r\n\r\nThe current supported ramdom methods are: `RandomNormal` or `RandomUniform`.\r\n\r\n### training-algorithm-step\r\n\r\n`training-algorithm-step` defines a field called `algorithm`. It defines a inference graph which represents a training algorithm's step. Given required inputs, it computes outputs to update tensors in its own or in the main computaton graph. `update_binding` contains a key-value pair of strings to assign the outputs to some specific tensors.\r\n\r\nIn general, this graph contains loss node, gradient node, optimizer node, increment of iteration count, and some calls to the inference graph. The field algorithm.node is the only place the user can use GraphCall operator. \r\n\r\n#### Loss node\r\n\r\n- `NegativeLogLikelihoodLoss`\r\n- `SoftmaxCrossEntropyLoss`\r\n\r\n\r\n#### Optimizer node\r\n\r\n- `Adagrad`\r\n- `Adam`\r\n- `Momentum`: SG with standard momentum\r\n\r\n#### Gradient node\r\n\r\nThe gradient node actually only defines the necessary information to compute the gradient for all graph, for example, at the following graph, the gradient defines its inputs containing the `xs`(intermidate weights) and `zs`(input of the graph), and `y`(the output of the graph), and its outputs having `dY/dW`, `dY/dZ` whose order corresponds to the inputs in `xs`. \r\n\r\nIt doesn't defines any logic about how to compute the `dY/dW`, `dY/dZ`.\r\n\r\n```\r\nW --> Conv --> H --> Gemm --> Y\r\n|      ^              ^\r\n|      |              |\r\n|      X              Z\r\n|      |              |\r\n|      |   .----------'\r\n|      |   |  (W/Z/X is the 1st/2nd/3rd input of Gradient as shown in\r\n|      |   |   \"xs\" followed by \"zs\")\r\n|      v   v\r\n'---> Gradient(xs=[\"W\", \"Z\"], zs=[\"X\"], y=\"Y\")\r\n       |   |\r\n       |   '-----------------------------------> dY/dW (1st output of Gradient)\r\n       |\r\n       '---------------------------------------> dY/dZ (2nd output of Gradient)\r\n```\r\n\r\n#### GraphCall node\r\n\r\nThe GraphCall operator invokes a graph inside TrainingInfoProto's algorithm field. The GraphCall inputs and outputs are bound to those of invoked graph by position.\r\n\r\nBased on the above inference graph, the GraphCall can use like this:\r\n\r\n```\r\n.-------- W (a global and mutable variable from\r\n|         |  the inference graph)\r\n|         |\r\n|   .-----'-----------.\r\n|   |                 |\r\n|   |                 v\r\n|   | .-- X_1 --> GraphCall(graph_name=\"MyInferenceGraph\")\r\n|   | |            |  |\r\n|   | |            |  |\r\n|   | |   Z_1 -----'  |\r\n|   | |    |          V\r\n|   | |    |         Y_1 ---> Loss ---> O\r\n|   | |    |                    ^\r\n|   | |    |                    |\r\n|   | `--. |                    C\r\n|   |    | |                    |\r\n|   |    | |   .----------------'\r\n|   |    | |   |\r\n|   |    v v   v\r\n|   `--> Gradient(xs=[\"W\"], zs=[\"X_1\", \"Z_1\", \"C\"], y=\"O\")\r\n|        |\r\n|        v\r\n|      dO_dW (gradient of W)      1 (a scalar one)\r\n|        |                        |\r\n|        V                        v\r\n|       Div <--- T ------------> Add ---> T_new\r\n|        |    (T is the number of training iterations.\r\n|        |     T is also globally visible and mutable.)\r\n|        v\r\n`-----> Sub ----> W_new\r\n```\r\n\r\nThe previous section's inference graph is called by `GraphCall(graph_name=\"MyInferenceGraph\")`, and it uses a new batch of inputs (`X_1`, `Z_1`) to compute `Y_1`. \r\n\r\n`Gradient` defines the graidents the graph should compute, finally, it gets `W_new` amd `T_new`.\r\n\r\nThe it uses the following `update_binding` to udpate the tensors:\r\n\r\n```\r\nupdate_binding: {\"W\": \"W_new\", \"T\": \"T_new\"}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629147694/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629177098","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629177098","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629177098,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTE3NzA5OA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T11:12:31Z","updated_at":"2020-05-15T11:12:31Z","author_association":"MEMBER","body":"> \r\n> \r\n> How are the topological connection(`forward()`) and configs(`Linear(2,3)`) handled when `module.save()` is called?\r\n\r\nwe do a forward (e.g., using placeholder recorded by compile()) inside save() to get the output y and then trace back to get all operations.\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629177098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629179541","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629179541","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629179541,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTE3OTU0MQ==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T11:18:22Z","updated_at":"2020-05-15T11:18:22Z","author_association":"MEMBER","body":"> \r\n> \r\n> I guess \"high/low priority\" refers to the preference? In the \"low priority\" option, the `save` and `load` is non intrusive/not part of class `module`.\r\n> Personally, serialization, is a mechanism telling how to handle a class, is preferred to be non intrusive/ not part of the class. The class itself is a structure. For example `mymodel = MyModel(); mymodel.load(fp)`. Maybe can be `mymodel=singa.module.load(fp)`\r\n\r\nwe provide two approaches.\r\n1. save and load as class method. The disk file is in onnx format. Major application scenario: checkpoint and restore training. Or rename is to checkpoint() and restore().\r\n2. singa.save() and singa.load(). Major application scenario: we do not have the code of MyModule and only have the serialized model. The disk file is in pickle format as we use pickle to serialize MyModule class.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629179541/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629269482","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629269482","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629269482,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTI2OTQ4Mg==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T14:34:21Z","updated_at":"2020-05-15T14:34:21Z","author_association":"MEMBER","body":"**Updated on May 15 Night**\r\n\r\n```python\r\nclass Layer:\r\n   def get_params(self):\r\n       \"\"\"the params of this layer and sublayers as a dict;  param name is: layername.param\r\n           e.g., self.W = Tensor(), self.b=Tensor()\r\n                  name of W and b is  like conv1.W and conv1.b  \r\n       \"\"\"\r\n\r\n    def get_states(self):\r\n       \"\"\"states of this layer as sublayers that are necessary for model training/evaluation/inference.\r\n           the states include the params and others, e.g., the running mean and var of batchnorm.\r\n      \"\"\"\r\n\r\nclass Module(Layer):   \r\n  def compile(self ...):\r\n     \"\"\"set the name of each layer and sublayers, which will be used to create the dict \r\n          for get_params and get_states. Then no need to manually config the layer name \r\n         the __init__ method of a layer.\r\n \r\n        For instance,\r\n        class Blk(Layer):\r\n             def __init__(self):\r\n                  self.conv1= Conv2d()\r\n                  self.conv2 = Conv2d()\r\n\r\n        class MyModel(Module):\r\n              def __init__(self):         \r\n                 self.blk1 = Blk() --> blk1.conv1, blk1.conv2\r\n                 self.blk2 = Blk()  --> blk2.conv1, blk2.conv2\r\n   \"\"\"\r\n\r\n  # high priority\r\n  def save_states(self, fpath, aux_states={}):\r\n      \"\"\"Save states.\r\n      \r\n      Args:\r\n         fpath: output file path (without the extension)\r\n         aux_states(dict): values are standard data types or Tensor, \r\n                                   e.g., epoch ID, learning rate, optimizer states\r\n      \"\"\"\r\n      states = get_states() + aux_states + input_placeholders\r\n      tensor_dict = {}\r\n      for k, v in states:\r\n           if type(v) is Tensor:\r\n             tensor_dict[k] = v\r\n             states[k] = {'shape': v.shape, 'dtype': v.dtype}\r\n      save states as json file\r\n      save tensor_dict via numpy or hdf5 or protobuf\r\n      zip the output files\r\n\r\n  def load_states(self, fpath, dev, use_graph=True, graph_alg='sequence'):\r\n      \"\"\"Load the model onto dev\r\n   \r\n       Args:\r\n         path: input file path (without the extension)\r\n       Returns:\r\n          dict \r\n      ```\r\n      unzip the input file\r\n      load the json file --> states\r\n      load the tensor files --> tensor_dict\r\n      put the tensors into states\r\n      states --> model_states + input_placeholders + aux_states\r\n      self.compile(input_placeholders, dev, use_graph, graph_alg)\r\n     model.set_states(model_states) \r\n     return the rest states as a dict\r\n\r\n# lower priority\r\ndef save(fpath, model):\r\n    attributes <-- model\r\n    replace all tensors in attributes --> {'shape': v.shape, 'dtype': v.dtype}\r\n    dump the tensors via numpy or protobuf or hdf5\r\n    dump model via pickle\r\n    zip the output files\r\n\r\ndef load(fpath, dev, use_graph, graph_alg):\r\n     unzip the input file\r\n     load model via pickle\r\n     load tensors \r\n     restore the tensors in model attributes\r\n     return the model\r\n\r\n\r\n# handle ONNX \r\ndef to_onnx(model):\r\n    return a onnx model \r\n\r\nclass SONNXModel(Module):\r\n     def __init__(self, onnx_model):\r\n          self.store_output = store_output\r\n          for layer_name, layer_config in get_layer(onnx_model):\r\n              self.__dict__[layer_name] = CreateLayer(...)\r\n\r\n    def forward(self, aux_output):\r\n          run forward according to onnx graph \r\n         return the last output + aux_output\r\n\r\nclass MyModel(SONNXModel):\r\n     def __init__(self, onnx):\r\n          super.__init__(onnx)\r\n          self.layer1 = Conv()\r\n          self.layer2 = Conv()\r\n\r\n     def forward(self, x):\r\n           x1, x2 = super.forward(x, aux_output)\r\n           x = self.layer1.forward(x2)\r\n           return self.layer2.forward(x1) + x\r\n\r\n      def train_one_batch(self, x, y):\r\n           y_ = self.forward(x)\r\n           ....\r\n\r\n```\r\n\r\nClarification:\r\n* Params: layer parameters (Tensor) that are updated via SGD. `Layer.get_params()`\r\n* States: Params + other variables that are necessary for model evaluation/inference. Superset of params.  `Layer.get_states()`\r\n* Attributes: members of a class instance `class.__dict__`. Superset of states.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629269482/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629297697","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629297697","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629297697,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTI5NzY5Nw==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-15T15:16:49Z","updated_at":"2020-05-15T15:18:39Z","author_association":"MEMBER","body":"If we have the model stats, we can recreate the params. Do the placeholders still make sense? I think we don't need to compile the module if we use the set_states function.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629297697/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629574095","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629574095","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629574095,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTU3NDA5NQ==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T02:14:44Z","updated_at":"2020-05-16T02:14:44Z","author_association":"NONE","body":"This pull request **introduces 1 alert** and **fixes 1** when merging db89d78f3e1a2c5ecb0204ba30fee29ed2705f04 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-2ba67a6910657f917a976a92279861140e1da08e)\n\n**new alerts:**\n\n* 1 for Unused import\n\n**fixed alerts:**\n\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629574095/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629580668","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629580668","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629580668,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTU4MDY2OA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T03:20:58Z","updated_at":"2020-05-16T03:20:58Z","author_association":"MEMBER","body":"> \r\n> \r\n> If we have the model stats, we can recreate the params. Do the placeholders still make sense? I think we don't need to compile the module if we use the set_states function.\r\n\r\nThe API is a bit ugly.. But we need to compile() to create the handles, which are not serialized as states.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629580668/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629581021","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629581021","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629581021,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTU4MTAyMQ==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T03:24:41Z","updated_at":"2020-05-16T03:24:41Z","author_association":"MEMBER","body":"> > If we have the model stats, we can recreate the params. Do the placeholders still make sense? I think we don't need to compile the module if we use the set_states function.\r\n> \r\n> The API is a bit ugly.. But we need to compile() to create the handles, which are not serialized as states.\r\n\r\nGot it. I thought handles were also state info.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629581021/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629583130","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629583130","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629583130,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTU4MzEzMA==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T03:49:03Z","updated_at":"2020-05-16T04:27:09Z","author_association":"MEMBER","body":"current save params and states\r\n\r\nstateful Layers | Params | States\r\n-- | -- | --\r\nLinear | W, b |  \r\nConv2D | W, b |  \r\nSeparableConv2d(2 sub layers - Conv2D) |   |  \r\nBatchNorm2d | scale, bias | running_mean, running_var\r\nRNN | Wx, Wh, b |  \r\nLSTM | Wx \\* 4, Wh \\* 4, Bx \\* 4, Bh \\*  4 |  \r\nCudnnRNN(no in master) | W |  \r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629583130/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629599079","html_url":"https://github.com/apache/singa/issues/695#issuecomment-629599079","issue_url":"https://api.github.com/repos/apache/singa/issues/695","id":629599079,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTU5OTA3OQ==","user":{"login":"agnesnatasya","id":44172431,"node_id":"MDQ6VXNlcjQ0MTcyNDMx","avatar_url":"https://avatars.githubusercontent.com/u/44172431?v=4","gravatar_id":"","url":"https://api.github.com/users/agnesnatasya","html_url":"https://github.com/agnesnatasya","followers_url":"https://api.github.com/users/agnesnatasya/followers","following_url":"https://api.github.com/users/agnesnatasya/following{/other_user}","gists_url":"https://api.github.com/users/agnesnatasya/gists{/gist_id}","starred_url":"https://api.github.com/users/agnesnatasya/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/agnesnatasya/subscriptions","organizations_url":"https://api.github.com/users/agnesnatasya/orgs","repos_url":"https://api.github.com/users/agnesnatasya/repos","events_url":"https://api.github.com/users/agnesnatasya/events{/privacy}","received_events_url":"https://api.github.com/users/agnesnatasya/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T06:54:33Z","updated_at":"2020-05-16T06:54:33Z","author_association":"CONTRIBUTOR","body":"Hi, I have tried again from a clean environment, and I successfully installed it, somehow all the errors are not there anymore. Thank you for your help!","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629599079/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629601708","html_url":"https://github.com/apache/singa/issues/693#issuecomment-629601708","issue_url":"https://api.github.com/repos/apache/singa/issues/693","id":629601708,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYwMTcwOA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T07:21:07Z","updated_at":"2020-05-16T07:21:07Z","author_association":"MEMBER","body":"#696 ","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629601708/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629604531","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629604531","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629604531,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYwNDUzMQ==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T07:49:28Z","updated_at":"2020-05-16T07:53:48Z","author_association":"MEMBER","body":"```\r\n# handle ONNX \r\ndef to_onnx(model):\r\n    return a onnx model \r\n\r\nclass SONNXModel(Module):\r\n    def __init__(self, onnx_model):\r\n        singa_rep = sonnx.prepare(onnx_model, device=dev, batchsize=1)\r\n        for layer_name, layer in singa_rep.layers:\r\n            self.__dict__[layer_name] = layer\r\n        # store weights here as numpy\r\n        for weith_name, weight in singa_rep.weights:\r\n            self.weights[weith_name] = weight\r\n        # store layer info such as input and output name(only weights)\r\n        for layer_name, layer_info in singa_rep.layer_infos:\r\n            self.layer_infos[layer_name] = layer_info\r\n\r\n    def forward(self, aux_output):\r\n        # run forward according to onnx graph \r\n        return the last output + aux_output\r\n\r\n    def compile(self)\r\n        # init weights\r\n        super.compile(self)\r\n        # set weights' value\r\n        for layer_name, layer in self.__dict__:\r\n            input_info, output_info = self.layer_infos[layer_name]\r\n            for input_name in input_info:\r\n                layer.set_weight(self.weights[input_name])\r\n\r\nclass MyModel(SONNXModel):\r\n     def __init__(self, onnx):\r\n          super.__init__(onnx)\r\n          self.layer1 = Conv()\r\n          self.layer2 = Conv()\r\n\r\n     def forward(self, x):\r\n           x1, x2 = super.forward(x, aux_output)\r\n           x = self.layer1.forward(x2)\r\n           return self.layer2.forward(x1) + x\r\n\r\n      def train_one_batch(self, x, y):\r\n           y_ = self.forward(x)\r\n           ....\r\n```\r\nHow about this one, we pareses onnx by `soon.prepare`(Backend), it returns a `singa_rep`(BackendRep), and the  singa_rep contains the layers, weights and input_output_info, we store the layers in `self.__dict__`. When we compile the model, first we call super() to init the params, then we set its value from the onnx loaded weights.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629604531/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629606349","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629606349","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629606349,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYwNjM0OQ==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T08:03:22Z","updated_at":"2020-05-16T08:07:38Z","author_association":"MEMBER","body":"Pls check my inline comments starting with **\r\n\r\n> \r\n> \r\n> ```\r\n> # handle ONNX \r\n> def to_onnx(model):\r\n>     return a onnx model \r\n> \r\n> class SONNXModel(Module):\r\n>     def __init__(self, onnx_model):  ** need to pass the dev as an argument.\r\n>         singa_rep = sonnx.prepare(onnx_model, device=dev, batchsize=1)\r\n>         for layer_name, layer in singa_rep.layers:\r\n>             self.__dict__[layer_name] = layer\r\n>         # store weights here as numpy\r\n>         for weith_name, weight in singa_rep.weights:\r\n>             self.weights[weith_name] = weight\r\n>         # store layer info such as input and output name(only weights)\r\n>         for layer_name, layer_info in singa_rep.layer_infos:\r\n>             self.layer_infos[layer_name] = layer_info\r\n> \r\n>     def forward(self, aux_output):\r\n>         # run forward according to onnx graph \r\n>         return the last output + aux_output\r\n> \r\n>     def compile(self)   \r\n>         # init weights\r\n>         super.compile(self)   ** args like dev, use_graph, graph_alg should be passed.\r\n>         # set weights' value\r\n>         for layer_name, layer in self.__dict__:\r\n>             input_info, output_info = self.layer_infos[layer_name]\r\n>             for input_name in input_info:\r\n>                 layer.set_weight(self.weights[input_name])   ** remember to release self.weights to free memory.\r\n> \r\n> class MyModel(SONNXModel):\r\n>      def __init__(self, onnx):\r\n>           super.__init__(onnx)\r\n>           self.layer1 = Conv()\r\n>           self.layer2 = Conv()\r\n> \r\n>      def forward(self, x):\r\n>            x1, x2 = super.forward(x, aux_output)\r\n>            x = self.layer1.forward(x2)\r\n>            return self.layer2.forward(x1) + x\r\n> \r\n>       def train_one_batch(self, x, y):\r\n>            y_ = self.forward(x)\r\n>            ....\r\n> ```\r\n> \r\n> How about this one, we pareses onnx by `soon.prepare`(Backend), it returns a `singa_rep`(BackendRep), and the singa_rep contains the layers, weights and input_output_info, we store the layers in `self.__dict__`. When we compile the model, first we call super() to init the params, then we set its value from the onnx loaded weights.\r\n\r\nIt's good to reuse singa_rep.\r\nTo use MyModel,\r\n```python\r\nox = onnx.load(fpath)\r\nm = MyModel(ox)\r\nm.compile([x]...)\r\n```\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629606349/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629607741","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629607741","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629607741,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYwNzc0MQ==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T08:14:58Z","updated_at":"2020-05-16T08:14:58Z","author_association":"NONE","body":"This pull request **introduces 1 alert** and **fixes 1** when merging 8eb70cfb2d6d97a08cb07a3a6da21af625cbea46 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-22e9d77c433887ca394bb36b25da10b3b05e2c48)\n\n**new alerts:**\n\n* 1 for Unused import\n\n**fixed alerts:**\n\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629607741/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629608607","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629608607","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629608607,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYwODYwNw==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T08:23:24Z","updated_at":"2020-05-16T08:26:48Z","author_association":"MEMBER","body":"```\r\n# handle ONNX \r\ndef to_onnx(model):\r\n    return a onnx model \r\n\r\nclass SONNXModel(Module):\r\n    def __init__(self, onnx_mode): \r\n        singa_rep = sonnx.prepare(onnx_model) # will update the prepare function to remove device and batchsize\r\n        for layer_name, layer in singa_rep.layers:\r\n            self.__dict__[layer_name] = layer\r\n        # store weights here as numpy\r\n        for weith_name, weight in singa_rep.weights:\r\n            self.weights[weith_name] = weight\r\n        # store layer info such as input and output name(only weights)\r\n        for layer_name, layer_info in singa_rep.layer_infos:\r\n            self.layer_infos[layer_name] = layer_info\r\n\r\n    def forward(self, aux_output):\r\n        # run forward according to onnx graph \r\n        return the last output + aux_output\r\n\r\n    def compile(self, inputs, is_train, use_graph, graph_alg)\r\n        # init weights\r\n        super.compile(self, inputs, is_train, use_graph, graph_alg)\r\n        # set weights' value\r\n        for layer_name, layer in self.__dict__:\r\n            input_info, output_info = self.layer_infos[layer_name]\r\n            for input_name in input_info:\r\n                layer.set_weight(self.weights[input_name])   ** remember to release self.weights to free memory.\r\n\r\nclass MyModel(SONNXModel):\r\n     def __init__(self, onnx):\r\n          super.__init__(onnx)\r\n          self.layer1 = Conv()\r\n          self.layer2 = Conv()\r\n\r\n     def forward(self, x):\r\n           x1, x2 = super.forward(x, aux_output)\r\n           x = self.layer1.forward(x2)\r\n           return self.layer2.forward(x1) + x\r\n\r\n      def train_one_batch(self, x, y):\r\n           y_ = self.forward(x)\r\n           ....\r\n\r\nox = onnx.load(fpath)\r\nx = Placeholder((2, 3), device = gpu, dtype=singa.float) # alias of Tensor\r\nm = MyModel(ox)\r\n# compatible with existing code which does not have the following two statements.\r\nm.compile([x], is_train=True, use_graph=True, graph_alg='sequence')\r\n\r\ny = Placeholder((2,), device = gpu)\r\nfor npx, npy in data:\r\n   x.copy_from(npx)\r\n   y.copy_from(npy)\r\n   m.train_one_batch(x, y)  # build the graph in the first iter.  For the old code, the params are initialized here.\r\n```\r\n\r\nupdate code with the comments with `**`\r\n\r\nAnd I need to update the current `SingaBackend` and `SingabackendRep`, in the `SingaBackend`, we won't create tensors, we only create layers and store the weights as numpy array. We postpone the tensor creation to `SingabackendRep.run` to make this API be uniform with the above API.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629608607/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629609089","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629609089","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629609089,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYwOTA4OQ==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T08:27:55Z","updated_at":"2020-05-16T08:29:56Z","author_association":"MEMBER","body":"To be consistent, I think we'd better always call `m.compile()` explicitly?\r\n```python\r\nm=MyModel()\r\nm.compile([x], use_graph=True)\r\nm.load_states(fpath)\r\n\r\nm=MyONNXModel(onnx_model)\r\nm.compile([x], use_graph=True)\r\n\r\nm=singa.load(fpath)\r\nm.compile([x], use_graph=True)\r\n```\r\n\r\nThen the `load_states()` only has a single argument, i.e., fpath.\r\n\r\nAny better solution?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629609089/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629610072","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629610072","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629610072,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYxMDA3Mg==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T08:36:58Z","updated_at":"2020-05-16T08:36:58Z","author_association":"MEMBER","body":"> To be consistent, I think we'd better always call `m.compile()` explicitly?\r\n> \r\n> ```python\r\n> m=MyModel()\r\n> m.compile([x], use_graph=True)\r\n> m.load_states(fpath)\r\n> \r\n> m=MyONNXModel(onnx_model)\r\n> m.compile([x], use_graph=True)\r\n> \r\n> m=singa.load(fpath)\r\n> m.compile([x], use_graph=True)\r\n> ```\r\n> \r\n> Then the `load_states()` only has a single argument, i.e., fpath.\r\n> \r\n> Any better solution?\r\n\r\nActually, in the above sonnx API, we merge load_states into compile, right?\r\nHow about this one:\r\n\r\n```\r\nm=MyModel(path) # check the file is a model or just states\r\nm.compile([x], use_graph=True) # do m.load_states(fpath) within compile\r\n\r\nm=MyONNXModel(onnx_model)\r\nm.compile([x], use_graph=True)\r\n\r\nm=singa.load(fpath)\r\nm.compile([x], use_graph=True)\r\n```","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629610072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629610649","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629610649","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629610649,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYxMDY0OQ==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T08:41:40Z","updated_at":"2020-05-16T08:48:11Z","author_association":"MEMBER","body":"1. I think you can still store numpy arrays in singabackend. Copy data from numpy array into the param tensors directly later.\r\n2. The new APIs are more consistent. But users then do not call `load_states` explicitly. They do call `save_states()` explicitly.  Not symmetric..  @dcslin any comments?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629610649/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629611562","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629611562","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629611562,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYxMTU2Mg==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T08:49:56Z","updated_at":"2020-05-16T08:49:56Z","author_association":"NONE","body":"This pull request **introduces 2 alerts** and **fixes 1** when merging e19934bcfcfad6bc475091e66ae22af58ae33d57 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-1fcaf2cee6435c38089a106ecfe46a6197a07f6d)\n\n**new alerts:**\n\n* 1 for Unused local variable\n* 1 for Unused import\n\n**fixed alerts:**\n\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629611562/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629615953","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629615953","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629615953,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYxNTk1Mw==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T09:23:12Z","updated_at":"2020-05-16T09:23:12Z","author_association":"NONE","body":"This pull request **introduces 2 alerts** and **fixes 1** when merging 2203a98246fdfc904b9ce90d9bb61cd1bc06ec96 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-20ef26a49037332b2971e22e15c6804b32cde9c3)\n\n**new alerts:**\n\n* 1 for Unused local variable\n* 1 for Unused import\n\n**fixed alerts:**\n\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629615953/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629623057","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629623057","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629623057,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYyMzA1Nw==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T10:18:27Z","updated_at":"2020-05-16T10:18:27Z","author_association":"NONE","body":"This pull request **introduces 10 alerts** and **fixes 7** when merging b3aa6fd49b819be407b57f5d304e9bf21790fdc3 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-b1b834fdea122df13bdb05c17b632fb86e194f9a)\n\n**new alerts:**\n\n* 3 for Mismatch between signature and use of an overriding method\n* 2 for Unused import\n* 2 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Unused local variable\n* 1 for &#39;import \\*&#39; may pollute namespace\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 4 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629623057/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629630581","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629630581","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629630581,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYzMDU4MQ==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T11:23:32Z","updated_at":"2020-05-16T11:23:32Z","author_association":"NONE","body":"This pull request **introduces 54 alerts** and **fixes 8** when merging 772f05c8ee8eedafd5fb3e37414f1c3de99134d7 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-e01ac9d53c133dcd237f7245d7b32d5afea76d58)\n\n**new alerts:**\n\n* 24 for Wrong number of arguments in a class instantiation\n* 23 for Wrong name for an argument in a class instantiation\n* 3 for Unused import\n* 3 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Unused local variable\n\n**fixed alerts:**\n\n* 5 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629630581/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629634540","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629634540","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629634540,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTYzNDU0MA==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T11:58:23Z","updated_at":"2020-05-16T12:30:03Z","author_association":"MEMBER","body":"Quoted from @joddiy , `m=MyModel(path) # check the file is a model or just states`, this case, user know `MyModel` class, so just loading states right?\r\n\r\n\r\nFrom the perspective of a new onnx user, please let me know if this part is not correct.\r\n`singa_rep`: model like `singa.Module`\r\n`singa.save()/singa.load()`: save/load model w/o states\r\n`singa.Module.save_states()/load_states()`: save/load model states only\r\n\r\n### Use case 1, load model from onnx file\r\n```python\r\nclass MySONNXModel(SONNXModel):\r\n    pass # so we know the structure of model already?\r\n\r\n# load from onnx model\r\nonnx_model=onnx.load('./saved_models/onnx_model_downloaded')\r\nm1=MySONNXModel(onnx_model) # so we know the structure of model already?\r\nm1.compile([placeholder_x], ...)\r\nfor _ in data:\r\n    m1.train_one_batch(_)\r\n```\r\n\r\n### use case 2: save states and model\r\n```python\r\n# save\r\nm1.save_states('./saved_models/my_checkpoint_1')\r\nsinga.save('./saved_models/my_model_1', m1)\r\n```\r\n\r\n### use case 3 load model and states from disk\r\n```python\r\n# Later reuse the model\r\nm2=singa.load('./saved_models/my_model_1')\r\nm2.load_states('./saved_models/my_checkpoint_1')\r\nm2.compile([placeholder_x], use_graph=True)\r\n```\r\n\r\n### use case 4 load states only\r\n```python\r\n# singa model is known\r\nclass MyModel(Module):\r\n    pass\r\n\r\nm3=MyModel(states_path='./saved_models/my_checkpoint_1') # could only be states, right?\r\n# m3=MyModel('./saved_models/my_model_1') # could not be saved_model right? since we know the model\r\nm3.compile(...)\r\n```\r\n\r\nTo be frank, I am a bit overwhelmed by all the discussions not just in this issue, is it possible to consolidate the new API into a specification including example in singa-doc? Which is useful for new users? btw, is API in [onnx-doc](https://github.com/apache/singa-doc/blob/master/docs-site/docs/onnx.md) gonna change?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629634540/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629661360","html_url":"https://github.com/apache/singa/issues/691#issuecomment-629661360","issue_url":"https://api.github.com/repos/apache/singa/issues/691","id":629661360,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTY2MTM2MA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-16T15:12:53Z","updated_at":"2020-05-16T15:13:09Z","author_association":"MEMBER","body":"Here is the latest summary: https://gist.github.com/nudles/d7f8043f251872333ec06f2701696cce\r\n\r\nAPIs in onnx-doc should be backward-compatible. ","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629661360/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629744198","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629744198","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629744198,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc0NDE5OA==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T05:08:35Z","updated_at":"2020-05-17T05:08:35Z","author_association":"NONE","body":"This pull request **introduces 2 alerts** and **fixes 11** when merging 1493242d1795e96b300c2bb018400c23a1706c9f into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-892e1658422700a676d37930d9547e2ecc27d1da)\n\n**new alerts:**\n\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629744198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629745052","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629745052","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629745052,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc0NTA1Mg==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T05:18:30Z","updated_at":"2020-05-17T05:18:30Z","author_association":"NONE","body":"This pull request **introduces 2 alerts** and **fixes 11** when merging 48b3501171eb31c5ae72ec412c14bd1448412eb6 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-e3ec2be437fec3a22633427b46d25de9979c46dd)\n\n**new alerts:**\n\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629745052/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629758480","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629758480","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629758480,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc1ODQ4MA==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T07:55:18Z","updated_at":"2020-05-17T07:55:18Z","author_association":"NONE","body":"This pull request **introduces 2 alerts** and **fixes 11** when merging 0598393b127ca5681bd730b8136e846c317fcf90 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-6e42c6771a85e77b1933615f390b97974fce93f0)\n\n**new alerts:**\n\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629758480/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629759836","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629759836","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629759836,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc1OTgzNg==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T08:09:04Z","updated_at":"2020-05-17T08:09:04Z","author_association":"NONE","body":"This pull request **introduces 3 alerts** and **fixes 11** when merging eb4281742e9a378420d370b32a40b8d385822551 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-f3aa9ad6f5f06bb30ec0745034ae2dd74f5047ee)\n\n**new alerts:**\n\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Variable defined multiple times\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629759836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629763040","html_url":"https://github.com/apache/singa/issues/696#issuecomment-629763040","issue_url":"https://api.github.com/repos/apache/singa/issues/696","id":629763040,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc2MzA0MA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T08:40:36Z","updated_at":"2020-05-17T08:40:36Z","author_association":"MEMBER","body":"Here is the latest API proposal\r\nhttps://gist.github.com/nudles/d7f8043f251872333ec06f2701696cce","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629763040/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629765369","html_url":"https://github.com/apache/singa/issues/701#issuecomment-629765369","issue_url":"https://api.github.com/repos/apache/singa/issues/701","id":629765369,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc2NTM2OQ==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T09:02:05Z","updated_at":"2020-05-17T09:02:05Z","author_association":"MEMBER","body":"Code from the data module may be reused. https://github.com/apache/singa/blob/master/python/singa/data.py","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629765369/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629765398","html_url":"https://github.com/apache/singa/issues/701#issuecomment-629765398","issue_url":"https://api.github.com/repos/apache/singa/issues/701","id":629765398,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc2NTM5OA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T09:02:19Z","updated_at":"2020-05-17T09:02:19Z","author_association":"MEMBER","body":"And https://github.com/apache/singa/blob/master/python/singa/image_tool.py","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629765398/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629769013","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629769013","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629769013,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc2OTAxMw==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T09:28:49Z","updated_at":"2020-05-17T09:28:49Z","author_association":"NONE","body":"This pull request **introduces 14 alerts** and **fixes 11** when merging b6f2c926aa11da07afdcbe2e04c8a809ab139e82 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-252b66c12616f67ff702e891eaec18c1640b869e)\n\n**new alerts:**\n\n* 12 for Module\\-level cyclic import\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629769013/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629779826","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629779826","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629779826,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc3OTgyNg==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T11:07:12Z","updated_at":"2020-05-17T11:07:12Z","author_association":"NONE","body":"This pull request **introduces 14 alerts** and **fixes 11** when merging 57fc2ddf7affaac88e5311c3a117c8b094322b1c into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-59ad77c3d3a73f193351085da6127add7d5b6a77)\n\n**new alerts:**\n\n* 12 for Module\\-level cyclic import\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629779826/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629785583","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629785583","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629785583,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTc4NTU4Mw==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T11:59:30Z","updated_at":"2020-05-17T11:59:30Z","author_association":"NONE","body":"This pull request **introduces 2 alerts** and **fixes 11** when merging 2e0a4de8f81152adeadb0f6d4498cdc7c7e9b3bb into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-1846d0cb2d52d7545478c0d4c381956cd07d5c2c)\n\n**new alerts:**\n\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629785583/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629807323","html_url":"https://github.com/apache/singa/issues/700#issuecomment-629807323","issue_url":"https://api.github.com/repos/apache/singa/issues/700","id":629807323,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTgwNzMyMw==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-17T14:29:32Z","updated_at":"2020-05-17T14:29:32Z","author_association":"MEMBER","body":"Examples (To be updated):\r\nMobileNetV2\r\nShuffleNetV2\r\nYOLO\r\nMask RCNN\r\nFaster RCNN\r\nInceptionNetV3","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629807323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629903664","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629903664","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629903664,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTkwMzY2NA==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T01:52:41Z","updated_at":"2020-05-18T01:53:56Z","author_association":"MEMBER","body":"TODO list compiled by @XJDKC with slight update:\r\n\r\n- [x] [rulin] 1. separate layers from autograd.py to form a new file(`layer.py`)\r\n_Alias added in `autograd.py` for backward compatibility_\r\n- [x] [rulin] 2. rename the Operation to Operator\r\n- [x] [rulin] 3. create alias for Operator and Tensor\r\n- [ ] 4. make Model(_renamed from module_) a subclass of Layer\r\n- [ ] 5. compile / do_init: separate the initialzation and forward propagation for each layers, create name of each layer\r\n**WIP**\r\n- [x] [rulin] 6. train_one_batch: with graph and without graph\r\n- [ ] 7. save_states/load_states/set_states: recursive logic」\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629903664/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629917583","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629917583","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629917583,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTkxNzU4Mw==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T02:52:15Z","updated_at":"2020-05-18T02:52:15Z","author_association":"NONE","body":"This pull request **introduces 2 alerts** and **fixes 11** when merging 1782aaedcc64db25b6a6e1f7b3c66c5d149234e4 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-6b277f8f2ca18338c700feb9d2c9998c24b6f978)\n\n**new alerts:**\n\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629917583/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629974688","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629974688","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629974688,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTk3NDY4OA==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T06:31:55Z","updated_at":"2020-05-18T06:31:55Z","author_association":"MEMBER","body":"@XJDKC regarding the set name of layer, and following with layer.get_params with name:\r\n\r\nhttps://github.com/apache/singa/pull/697/commits/0d76c8f880891836335898aab9d3648c9980e4ab\r\n\r\n```\r\nlayer.get_params()\r\n{'l1.W': [[-0.07531427 -0.62196964]\r\n [ 0.04674786 -0.9586175 ]\r\n [-0.79629827 -0.08110885]\r\n [-0.10159992  0.65847474]], 'l1.b': [0. 0.]}\r\n```\r\n\r\nwhat do you think?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629974688/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629976931","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629976931","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629976931,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTk3NjkzMQ==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T06:37:52Z","updated_at":"2020-05-18T06:37:52Z","author_association":"NONE","body":"This pull request **introduces 3 alerts** and **fixes 12** when merging 0d76c8f880891836335898aab9d3648c9980e4ab into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-e7bc0084ac42369a4629c7e78ec187ea3bfb6db1)\n\n**new alerts:**\n\n* 1 for Unnecessary pass\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Unnecessary pass\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629976931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629981649","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629981649","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629981649,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTk4MTY0OQ==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T06:50:17Z","updated_at":"2020-05-18T06:50:17Z","author_association":"MEMBER","body":"how about this scheme, `{\"name\": {\"param\": [0,...]}`, it should be easier to restore params/states:\r\n```\r\n{'l1': {'W': [[ 0.09014801 -0.03559005]\r\n [-1.6343217  -1.0570787 ]\r\n [ 1.3426386   0.49866426]\r\n [ 0.27287227 -0.49320117]], 'b': [0. 0.]}}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629981649/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629983062","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629983062","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629983062,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTk4MzA2Mg==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T06:54:04Z","updated_at":"2020-05-18T06:54:04Z","author_association":"MEMBER","body":"> how about this scheme, `{\"name\": {\"param\": [0,...]}`, it should be easier to restore params/states:\r\n> \r\n> ```\r\n> {'l1': {'W': [[ 0.09014801 -0.03559005]\r\n>  [-1.6343217  -1.0570787 ]\r\n>  [ 1.3426386   0.49866426]\r\n>  [ 0.27287227 -0.49320117]], 'b': [0. 0.]}}\r\n> ```\r\n\r\nThis scheme will have the problem of duplicate names, which may not be very convenient for ONNX? I'm not sure.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629983062/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/629983974","html_url":"https://github.com/apache/singa/pull/697#issuecomment-629983974","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":629983974,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTk4Mzk3NA==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T06:56:17Z","updated_at":"2020-05-18T06:56:17Z","author_association":"NONE","body":"This pull request **introduces 3 alerts** and **fixes 12** when merging 5539cc31fb83bc95bde7aa58aa22c8ac1f279bee into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-0edcd44b9ecd5b275a39b749830d5120748e508c)\n\n**new alerts:**\n\n* 1 for Unnecessary pass\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Unnecessary pass\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/629983974/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630022509","html_url":"https://github.com/apache/singa/pull/688#issuecomment-630022509","issue_url":"https://api.github.com/repos/apache/singa/issues/688","id":630022509,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDAyMjUwOQ==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T08:17:33Z","updated_at":"2020-05-18T08:18:43Z","author_association":"MEMBER","body":"Hi, @dcslin , can I use this PR right now or which operation I can use now? since I need to let the soonx to support the new autograd  api.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630022509/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630023004","html_url":"https://github.com/apache/singa/pull/694#issuecomment-630023004","issue_url":"https://api.github.com/repos/apache/singa/issues/694","id":630023004,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDAyMzAwNA==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T08:18:29Z","updated_at":"2020-05-18T08:18:29Z","author_association":"MEMBER","body":"@XJDKC can you help review this PR.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630023004/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630023072","html_url":"https://github.com/apache/singa/pull/703#issuecomment-630023072","issue_url":"https://api.github.com/repos/apache/singa/issues/703","id":630023072,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDAyMzA3Mg==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T08:18:39Z","updated_at":"2020-05-18T08:18:39Z","author_association":"NONE","body":"This pull request **introduces 7 alerts** when merging b6a8754e048e6447ccdfd9d359692143e6c967cb into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-f213db032a5d6a71907b8a64b0fb520467054dfc)\n\n**new alerts:**\n\n* 3 for Unused local variable\n* 3 for Unreachable code\n* 1 for Unused import","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630023072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630026306","html_url":"https://github.com/apache/singa/pull/694#issuecomment-630026306","issue_url":"https://api.github.com/repos/apache/singa/issues/694","id":630026306,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDAyNjMwNg==","user":{"login":"XJDKC","id":32295829,"node_id":"MDQ6VXNlcjMyMjk1ODI5","avatar_url":"https://avatars.githubusercontent.com/u/32295829?v=4","gravatar_id":"","url":"https://api.github.com/users/XJDKC","html_url":"https://github.com/XJDKC","followers_url":"https://api.github.com/users/XJDKC/followers","following_url":"https://api.github.com/users/XJDKC/following{/other_user}","gists_url":"https://api.github.com/users/XJDKC/gists{/gist_id}","starred_url":"https://api.github.com/users/XJDKC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XJDKC/subscriptions","organizations_url":"https://api.github.com/users/XJDKC/orgs","repos_url":"https://api.github.com/users/XJDKC/repos","events_url":"https://api.github.com/users/XJDKC/events{/privacy}","received_events_url":"https://api.github.com/users/XJDKC/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T08:24:54Z","updated_at":"2020-05-18T08:24:54Z","author_association":"MEMBER","body":"> @XJDKC can you help review this PR.\r\n\r\nSure.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630026306/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630031726","html_url":"https://github.com/apache/singa/pull/688#issuecomment-630031726","issue_url":"https://api.github.com/repos/apache/singa/issues/688","id":630031726,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDAzMTcyNg==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T08:34:45Z","updated_at":"2020-05-18T08:34:45Z","author_association":"MEMBER","body":"> Hi, @dcslin , can I use this PR right now or which operation I can use now? since I need to let the soonx to support the new autograd api.\r\n\r\nHi @joddiy please refer to https://github.com/apache/singa/pull/697","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630031726/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630066505","html_url":"https://github.com/apache/singa/pull/697#issuecomment-630066505","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":630066505,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDA2NjUwNQ==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T09:37:10Z","updated_at":"2020-05-18T09:37:10Z","author_association":"MEMBER","body":"> \r\n> \r\n> how about this scheme, `{\"name\": {\"param\": [0,...]}`, it should be easier to restore params/states:\r\n> \r\n> ```\r\n> {'l1': {'W': [[ 0.09014801 -0.03559005]\r\n>  [-1.6343217  -1.0570787 ]\r\n>  [ 1.3426386   0.49866426]\r\n>  [ 0.27287227 -0.49320117]], 'b': [0. 0.]}}\r\n> ```\r\n\r\nIs it a recursive dict?\r\nOne problem is readability, another problem is with Optimizer, which may store the first and second order moment of each param. Then we need a python dict with the key as the param name. Therefore, we need a unique name for each param. \r\n`get_param` and `get_state` should return a flat dict.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630066505/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630096178","html_url":"https://github.com/apache/singa/pull/697#issuecomment-630096178","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":630096178,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDA5NjE3OA==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T10:34:30Z","updated_at":"2020-05-18T10:34:30Z","author_association":"MEMBER","body":"> > how about this scheme, `{\"name\": {\"param\": [0,...]}`, it should be easier to restore params/states:\r\n> > ```\r\n> > {'l1': {'W': [[ 0.09014801 -0.03559005]\r\n> >  [-1.6343217  -1.0570787 ]\r\n> >  [ 1.3426386   0.49866426]\r\n> >  [ 0.27287227 -0.49320117]], 'b': [0. 0.]}}\r\n> > ```\r\n> \r\n> Is it a recursive dict?\r\n> One problem is readability, another problem is with Optimizer, which may store the first and second order moment of each param. Then we need a python dict with the key as the param name. Therefore, we need a unique name for each param.\r\n> `get_param` and `get_state` should return a flat dict.\r\n\r\nto avoid the recursive duct, we may can use this flat dict:\r\n\r\n```\r\n{\r\n    \"<name of layer>:<name of sub_layer>:<name of sub_sub_layer>:<name of param>\" : <value of param>\r\n}\r\n```\r\n\r\nor\r\n\r\n```\r\n{\r\n    \"<name of layer>:<name of sub_layer>:<name of sub_sub_layer>\" : \r\n    {\r\n        \"<name of param>\" : <value of param>\r\n    }\r\n}\r\n```\r\n\r\nAnd for onnx, the key of the dict(for both layers and params) should be unique.","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630096178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630096942","html_url":"https://github.com/apache/singa/pull/688#issuecomment-630096942","issue_url":"https://api.github.com/repos/apache/singa/issues/688","id":630096942,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDA5Njk0Mg==","user":{"login":"joddiy","id":14108933,"node_id":"MDQ6VXNlcjE0MTA4OTMz","avatar_url":"https://avatars.githubusercontent.com/u/14108933?v=4","gravatar_id":"","url":"https://api.github.com/users/joddiy","html_url":"https://github.com/joddiy","followers_url":"https://api.github.com/users/joddiy/followers","following_url":"https://api.github.com/users/joddiy/following{/other_user}","gists_url":"https://api.github.com/users/joddiy/gists{/gist_id}","starred_url":"https://api.github.com/users/joddiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joddiy/subscriptions","organizations_url":"https://api.github.com/users/joddiy/orgs","repos_url":"https://api.github.com/users/joddiy/repos","events_url":"https://api.github.com/users/joddiy/events{/privacy}","received_events_url":"https://api.github.com/users/joddiy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T10:36:17Z","updated_at":"2020-05-18T10:36:17Z","author_association":"MEMBER","body":"> > Hi, @dcslin , can I use this PR right now or which operation I can use now? since I need to let the soonx to support the new autograd api.\r\n> \r\n> Hi @joddiy please refer to #697\r\n\r\nThanks, shicong, and one thing to confirm, the name of operation should be `_ReLU` or `ReLU`?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630096942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630181079","html_url":"https://github.com/apache/singa/pull/697#issuecomment-630181079","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":630181079,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDE4MTA3OQ==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T13:25:07Z","updated_at":"2020-05-18T13:25:32Z","author_association":"MEMBER","body":"> \r\n> \r\n> > > how about this scheme, `{\"name\": {\"param\": [0,...]}`, it should be easier to restore params/states:\r\n> > > ```\r\n> > > {'l1': {'W': [[ 0.09014801 -0.03559005]\r\n> > >  [-1.6343217  -1.0570787 ]\r\n> > >  [ 1.3426386   0.49866426]\r\n> > >  [ 0.27287227 -0.49320117]], 'b': [0. 0.]}}\r\n> > > ```\r\n> > \r\n> > \r\n> > Is it a recursive dict?\r\n> > One problem is readability, another problem is with Optimizer, which may store the first and second order moment of each param. Then we need a python dict with the key as the param name. Therefore, we need a unique name for each param.\r\n> > `get_param` and `get_state` should return a flat dict.\r\n> \r\n> to avoid the recursive duct, we may can use this flat dict:\r\n> \r\n> ```\r\n> {\r\n>     \"<name of layer>:<name of sub_layer>:<name of sub_sub_layer>:<name of param>\" : <value of param>\r\n> }\r\n> ```\r\nThis one (above) is good for me.\r\n> \r\n> or\r\n> \r\n> ```\r\n> {\r\n>     \"<name of layer>:<name of sub_layer>:<name of sub_sub_layer>\" : \r\n>     {\r\n>         \"<name of param>\" : <value of param>\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> And for onnx, the key of the dict(for both layers and params) should be unique.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630181079/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630333336","html_url":"https://github.com/apache/singa/pull/697#issuecomment-630333336","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":630333336,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDMzMzMzNg==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T17:37:13Z","updated_at":"2020-05-18T17:37:13Z","author_association":"NONE","body":"This pull request **introduces 10 alerts** and **fixes 11** when merging 16b6a60d09f4d4e7b032529afeb291ef475fb222 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-f484e7f242babcd9b35191ac397adc3b51790921)\n\n**new alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Variable defined multiple times\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630333336/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630334827","html_url":"https://github.com/apache/singa/pull/703#issuecomment-630334827","issue_url":"https://api.github.com/repos/apache/singa/issues/703","id":630334827,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDMzNDgyNw==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T17:40:16Z","updated_at":"2020-05-18T17:40:16Z","author_association":"NONE","body":"This pull request **introduces 10 alerts** and **fixes 13** when merging 7e47512775933cd33d980e3321d57a9f45055cae into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-c0db4b8a230c6ca2f56d44a7219d3611ecda7122)\n\n**new alerts:**\n\n* 3 for Unused local variable\n* 3 for Unreachable code\n* 1 for Unnecessary pass\n* 1 for Unused import\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Unnecessary pass\n* 1 for Unused local variable\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630334827/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630371622","html_url":"https://github.com/apache/singa/pull/703#issuecomment-630371622","issue_url":"https://api.github.com/repos/apache/singa/issues/703","id":630371622,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDM3MTYyMg==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-18T18:49:49Z","updated_at":"2020-05-18T18:49:49Z","author_association":"NONE","body":"This pull request **introduces 10 alerts** and **fixes 13** when merging 5fccbbab6c65fb8d563198bc99bbb95bedc09940 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-68df59fa63bec4645bbc1f9c06ea75ab409cb7d6)\n\n**new alerts:**\n\n* 3 for Unused local variable\n* 3 for Unreachable code\n* 1 for Unnecessary pass\n* 1 for Unused import\n* 1 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Unnecessary pass\n* 1 for Unused local variable\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630371622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630558376","html_url":"https://github.com/apache/singa/pull/697#issuecomment-630558376","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":630558376,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDU1ODM3Ng==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T03:34:10Z","updated_at":"2020-05-19T03:34:10Z","author_association":"NONE","body":"This pull request **introduces 10 alerts** and **fixes 11** when merging ce261cb98cfa23cc4f741f39cb069c0a3f89b2ed into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-3b30bad100cafe50ac67e561ea29a576602b64a2)\n\n**new alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Variable defined multiple times\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630558376/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630596877","html_url":"https://github.com/apache/singa/issues/704#issuecomment-630596877","issue_url":"https://api.github.com/repos/apache/singa/issues/704","id":630596877,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDU5Njg3Nw==","user":{"login":"chrishkchris","id":38325429,"node_id":"MDQ6VXNlcjM4MzI1NDI5","avatar_url":"https://avatars.githubusercontent.com/u/38325429?v=4","gravatar_id":"","url":"https://api.github.com/users/chrishkchris","html_url":"https://github.com/chrishkchris","followers_url":"https://api.github.com/users/chrishkchris/followers","following_url":"https://api.github.com/users/chrishkchris/following{/other_user}","gists_url":"https://api.github.com/users/chrishkchris/gists{/gist_id}","starred_url":"https://api.github.com/users/chrishkchris/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chrishkchris/subscriptions","organizations_url":"https://api.github.com/users/chrishkchris/orgs","repos_url":"https://api.github.com/users/chrishkchris/repos","events_url":"https://api.github.com/users/chrishkchris/events{/privacy}","received_events_url":"https://api.github.com/users/chrishkchris/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T05:52:49Z","updated_at":"2020-05-19T05:52:49Z","author_association":"CONTRIBUTOR","body":"could you place the result of \"conda list\" here?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630596877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630608187","html_url":"https://github.com/apache/singa/issues/704#issuecomment-630608187","issue_url":"https://api.github.com/repos/apache/singa/issues/704","id":630608187,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDYwODE4Nw==","user":{"login":"chrishkchris","id":38325429,"node_id":"MDQ6VXNlcjM4MzI1NDI5","avatar_url":"https://avatars.githubusercontent.com/u/38325429?v=4","gravatar_id":"","url":"https://api.github.com/users/chrishkchris","html_url":"https://github.com/chrishkchris","followers_url":"https://api.github.com/users/chrishkchris/followers","following_url":"https://api.github.com/users/chrishkchris/following{/other_user}","gists_url":"https://api.github.com/users/chrishkchris/gists{/gist_id}","starred_url":"https://api.github.com/users/chrishkchris/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chrishkchris/subscriptions","organizations_url":"https://api.github.com/users/chrishkchris/orgs","repos_url":"https://api.github.com/users/chrishkchris/repos","events_url":"https://api.github.com/users/chrishkchris/events{/privacy}","received_events_url":"https://api.github.com/users/chrishkchris/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T06:20:34Z","updated_at":"2020-05-19T06:20:34Z","author_association":"CONTRIBUTOR","body":"You may check the anaconda cloud for the existing version available\r\nhttps://anaconda.org/nusdbsystem/singa-cpu/files\r\n\r\nI have run python 3.7 singa 3.0.0 cpu in ubuntu without any problem, you may see the following log:\r\n\r\n```\r\ndcsysh@ncrs:/$ conda create -n singacpu37 python=3.7\r\nCollecting package metadata (current_repodata.json): done\r\nSolving environment: done\r\n\r\n==> WARNING: A newer version of conda exists. <==\r\n  current version: 4.8.2\r\n  latest version: 4.8.3\r\n\r\nPlease update conda by running\r\n\r\n    $ conda update -n base -c defaults conda\r\n\r\n## Package Plan ##\r\n\r\n  environment location: /home/dcsysh/anaconda3/envs/singacpu37\r\n\r\n  added / updated specs:\r\n    - python=3.7\r\n\r\n\r\nThe following packages will be downloaded:\r\n\r\n    package                    |            build\r\n    ---------------------------|-----------------\r\n    python_abi-3.7             |          1_cp37m           4 KB  conda-forge\r\n    setuptools-46.4.0          |   py37hc8dfbb8_0         633 KB  conda-forge\r\n    ------------------------------------------------------------\r\n                                           Total:         637 KB\r\n\r\nThe following NEW packages will be INSTALLED:\r\n\r\n  _libgcc_mutex      conda-forge/linux-64::_libgcc_mutex-0.1-conda_forge\r\n  _openmp_mutex      conda-forge/linux-64::_openmp_mutex-4.5-0_gnu\r\n  ca-certificates    conda-forge/linux-64::ca-certificates-2020.4.5.1-hecc5488_0\r\n  certifi            conda-forge/linux-64::certifi-2020.4.5.1-py37hc8dfbb8_0\r\n  ld_impl_linux-64   conda-forge/linux-64::ld_impl_linux-64-2.34-h53a641e_0\r\n  libffi             conda-forge/linux-64::libffi-3.2.1-he1b5a44_1007\r\n  libgcc-ng          conda-forge/linux-64::libgcc-ng-9.2.0-h24d8f2e_2\r\n  libgomp            conda-forge/linux-64::libgomp-9.2.0-h24d8f2e_2\r\n  libstdcxx-ng       conda-forge/linux-64::libstdcxx-ng-9.2.0-hdf63c60_2\r\n  ncurses            conda-forge/linux-64::ncurses-6.1-hf484d3e_1002\r\n  openssl            conda-forge/linux-64::openssl-1.1.1g-h516909a_0\r\n  pip                conda-forge/noarch::pip-20.1-pyh9f0ad1d_0\r\n  python             conda-forge/linux-64::python-3.7.6-h8356626_5_cpython\r\n  python_abi         conda-forge/linux-64::python_abi-3.7-1_cp37m\r\n  readline           conda-forge/linux-64::readline-8.0-hf8c457e_0\r\n  setuptools         conda-forge/linux-64::setuptools-46.4.0-py37hc8dfbb8_0\r\n  sqlite             conda-forge/linux-64::sqlite-3.30.1-hcee41ef_0\r\n  tk                 conda-forge/linux-64::tk-8.6.10-hed695b0_0\r\n  wheel              conda-forge/noarch::wheel-0.34.2-py_1\r\n  xz                 conda-forge/linux-64::xz-5.2.5-h516909a_0\r\n  zlib               conda-forge/linux-64::zlib-1.2.11-h516909a_1006\r\n\r\n\r\nProceed ([y]/n)? y\r\n\r\n\r\nDownloading and Extracting Packages\r\npython_abi-3.7       | 4 KB      | ########################################################################################################################## | 100%\r\nsetuptools-46.4.0    | 633 KB    | ########################################################################################################################## | 100%\r\nPreparing transaction: done\r\nVerifying transaction: done\r\nExecuting transaction: done\r\n#\r\n# To activate this environment, use\r\n#\r\n#     $ conda activate singacpu37\r\n#\r\n# To deactivate an active environment, use\r\n#\r\n#     $ conda deactivate\r\n\r\ndcsysh@ncrs:/$ source activate singacpu37\r\n(singacpu37) dcsysh@ncrs:/$ conda install -c nusdbsystem -c conda-forge singa-cpu=3.0.0\r\nCollecting package metadata (current_repodata.json): done\r\nSolving environment: failed with initial frozen solve. Retrying with flexible solve.\r\nSolving environment: failed with repodata from current_repodata.json, will retry with next repodata source.\r\nCollecting package metadata (repodata.json): done\r\nSolving environment: done\r\n\r\n\r\n==> WARNING: A newer version of conda exists. <==\r\n  current version: 4.8.2\r\n  latest version: 4.8.3\r\n\r\nPlease update conda by running\r\n\r\n    $ conda update -n base -c defaults conda\r\n\r\n\r\n\r\n## Package Plan ##\r\n\r\n  environment location: /home/dcsysh/anaconda3/envs/singacpu37\r\n\r\n  added / updated specs:\r\n    - singa-cpu=3.0.0\r\n\r\n\r\nThe following packages will be downloaded:\r\n\r\n    package                    |            build\r\n    ---------------------------|-----------------\r\n    _openmp_mutex-4.5          |           1_llvm           5 KB  conda-forge\r\n    dnnl-1.1                   |            build         3.6 MB  nusdbsystem\r\n    future-0.18.2              |   py37hc8dfbb8_1         712 KB  conda-forge\r\n    libblas-3.8.0              |      16_openblas          10 KB  conda-forge\r\n    libcblas-3.8.0             |      16_openblas          10 KB  conda-forge\r\n    liblapack-3.8.0            |      16_openblas          10 KB  conda-forge\r\n    numpy-1.16.5               |   py37h95a1406_0         4.3 MB  conda-forge\r\n    onnx-1.6.0                 |   py37he1b5a44_0         2.9 MB  conda-forge\r\n    pillow-7.1.2               |   py37h718be6c_0         658 KB  conda-forge\r\n    protobuf-3.9.2             |   py37he1b5a44_1         688 KB  conda-forge\r\n    singa-3.0.0                |         cpu_py37        22.4 MB  nusdbsystem\r\n    singa-cpu-3.0.0            |             py37           4 KB  nusdbsystem\r\n    wrapt-1.12.1               |   py37h8f50634_1          46 KB  conda-forge\r\n    ------------------------------------------------------------\r\n                                           Total:        35.3 MB\r\n\r\nThe following NEW packages will be INSTALLED:\r\n\r\n  deprecated         conda-forge/noarch::deprecated-1.2.7-py_0\r\n  dnnl               nusdbsystem/linux-64::dnnl-1.1-build\r\n  freetype           conda-forge/linux-64::freetype-2.10.2-he06d7ca_0\r\n  future             conda-forge/linux-64::future-0.18.2-py37hc8dfbb8_1\r\n  glog               conda-forge/linux-64::glog-0.3.5-hf484d3e_1001\r\n  jpeg               conda-forge/linux-64::jpeg-9c-h14c3975_1001\r\n  libblas            conda-forge/linux-64::libblas-3.8.0-16_openblas\r\n  libcblas           conda-forge/linux-64::libcblas-3.8.0-16_openblas\r\n  libgfortran-ng     conda-forge/linux-64::libgfortran-ng-7.5.0-hdf63c60_6\r\n  liblapack          conda-forge/linux-64::liblapack-3.8.0-16_openblas\r\n  libopenblas        conda-forge/linux-64::libopenblas-0.3.9-h5ec1e0e_0\r\n  libpng             conda-forge/linux-64::libpng-1.6.37-hed695b0_1\r\n  libprotobuf        conda-forge/linux-64::libprotobuf-3.9.2-h8b12597_0\r\n  libtiff            conda-forge/linux-64::libtiff-4.1.0-hc7e4089_6\r\n  libwebp-base       conda-forge/linux-64::libwebp-base-1.1.0-h516909a_3\r\n  llvm-openmp        conda-forge/linux-64::llvm-openmp-10.0.0-hc9558a2_0\r\n  lz4-c              conda-forge/linux-64::lz4-c-1.9.2-he1b5a44_1\r\n  numpy              conda-forge/linux-64::numpy-1.16.5-py37h95a1406_0\r\n  olefile            conda-forge/noarch::olefile-0.46-py_0\r\n  onnx               conda-forge/linux-64::onnx-1.6.0-py37he1b5a44_0\r\n  pillow             conda-forge/linux-64::pillow-7.1.2-py37h718be6c_0\r\n  protobuf           conda-forge/linux-64::protobuf-3.9.2-py37he1b5a44_1\r\n  singa              nusdbsystem/linux-64::singa-3.0.0-cpu_py37\r\n  singa-cpu          nusdbsystem/linux-64::singa-cpu-3.0.0-py37\r\n  six                conda-forge/noarch::six-1.14.0-py_1\r\n  tqdm               conda-forge/noarch::tqdm-4.46.0-pyh9f0ad1d_0\r\n  wrapt              conda-forge/linux-64::wrapt-1.12.1-py37h8f50634_1\r\n  zstd               conda-forge/linux-64::zstd-1.4.4-h6597ccf_3\r\n\r\nThe following packages will be DOWNGRADED:\r\n\r\n  _openmp_mutex                                   4.5-0_gnu --> 4.5-1_llvm\r\n\r\n\r\nProceed ([y]/n)? y\r\n\r\n\r\nDownloading and Extracting Packages\r\nlibblas-3.8.0        | 10 KB     | ########################################################################################################################## | 100%\r\nonnx-1.6.0           | 2.9 MB    | ########################################################################################################################## | 100%\r\nsinga-3.0.0          | 22.4 MB   | ########################################################################################################################## | 100%\r\ndnnl-1.1             | 3.6 MB    | ########################################################################################################################## | 100%\r\n_openmp_mutex-4.5    | 5 KB      | ########################################################################################################################## | 100%\r\nwrapt-1.12.1         | 46 KB     | ########################################################################################################################## | 100%\r\npillow-7.1.2         | 658 KB    | ########################################################################################################################## | 100%\r\nprotobuf-3.9.2       | 688 KB    | ########################################################################################################################## | 100%\r\nnumpy-1.16.5         | 4.3 MB    | ########################################################################################################################## | 100%\r\nlibcblas-3.8.0       | 10 KB     | ########################################################################################################################## | 100%\r\nfuture-0.18.2        | 712 KB    | ########################################################################################################################## | 100%\r\nsinga-cpu-3.0.0      | 4 KB      | ########################################################################################################################## | 100%\r\nliblapack-3.8.0      | 10 KB     | ########################################################################################################################## | 100%\r\nPreparing transaction: done\r\nVerifying transaction: done\r\nExecuting transaction: done\r\n(singacpu37) dcsysh@ncrs:/$ python\r\nPython 3.7.6 | packaged by conda-forge | (default, Mar 23 2020, 23:03:20)\r\n[GCC 7.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import numpy as np\r\n>>> from singa import tensor\r\n>>>\r\n>>> tensor.from_numpy( np.asarray([[1, 0, 0], [0, 1, 0]], dtype=np.float32) )\r\n[[1. 0. 0.]\r\n [0. 1. 0.]]\r\n>>>\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630608187/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630611721","html_url":"https://github.com/apache/singa/issues/704#issuecomment-630611721","issue_url":"https://api.github.com/repos/apache/singa/issues/704","id":630611721,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDYxMTcyMQ==","user":{"login":"Shashankwer","id":15552734,"node_id":"MDQ6VXNlcjE1NTUyNzM0","avatar_url":"https://avatars.githubusercontent.com/u/15552734?v=4","gravatar_id":"","url":"https://api.github.com/users/Shashankwer","html_url":"https://github.com/Shashankwer","followers_url":"https://api.github.com/users/Shashankwer/followers","following_url":"https://api.github.com/users/Shashankwer/following{/other_user}","gists_url":"https://api.github.com/users/Shashankwer/gists{/gist_id}","starred_url":"https://api.github.com/users/Shashankwer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shashankwer/subscriptions","organizations_url":"https://api.github.com/users/Shashankwer/orgs","repos_url":"https://api.github.com/users/Shashankwer/repos","events_url":"https://api.github.com/users/Shashankwer/events{/privacy}","received_events_url":"https://api.github.com/users/Shashankwer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T06:28:33Z","updated_at":"2020-05-19T06:28:33Z","author_association":"CONTRIBUTOR","body":"Name|Version|Build|Channel\r\n------|-------|-----|---------\r\nappnope|0.1.0|py36h9f0ad1d_1001|conda-forge\r\nattrs|19.3.0|py_0|conda-forge\r\nbackcall|0.1.0|py_0|conda-forge\r\nbleach|3.1.5|pyh9f0ad1d_0|conda-forge\r\nca-certificates|2020.4.5.1|hecc5488_0|conda-forge\r\ncertifi|2020.4.5.1|py36h9f0ad1d_0|conda-forge\r\ndbus|1.13.6|h2f22bb5_0|conda-forge\r\ndecorator|4.4.2|py_0|conda-forge\r\ndefusedxml|0.6.0|py_0|conda-forge\r\ndeprecated|1.2.7|py_0|conda-forge\r\ndnnl|1.1|build|nusdbsystem\r\nentrypoints|0.3|py36h9f0ad1d_1001|conda-forge\r\nexpat|2.2.9|h4a8c4bd_2|conda-forge\r\nfreetype|2.10.2|h8da9a1a_0|conda-forge\r\nfuture|0.18.2|py36h9f0ad1d_1|conda-forge\r\ngettext|0.19.8.1|h46ab8bc_1002|conda-forge\r\nglib|2.64.2|h577aef8_1|conda-forge\r\nglog|0.3.5|h0a44026_1001|conda-forge\r\nicu|64.2|h6de7cb9_1|conda-forge\r\nimportlib-metadata|1.6.0|py36h9f0ad1d_0|conda-forge\r\nimportlib_metadata|1.6.0|0|conda-forge\r\nipykernel|5.2.1|py36h95af2a2_0|conda-forge\r\nipython|7.14.0|py36h9f0ad1d_0|conda-forge\r\nipython_genutils|0.2.0|py_1|conda-forge\r\nipywidgets|7.5.1|py_0|conda-forge\r\njedi|0.17.0|py36h9f0ad1d_0|conda-forge\r\njinja2|2.11.2|pyh9f0ad1d_0|conda-forge\r\njpeg|9c|h1de35cc_1001|conda-forge\r\njsonschema|3.2.0|py36h9f0ad1d_1|conda-forge\r\njupyter|1.0.0|py_2|conda-forge\r\njupyter_client|6.1.3|py_0|conda-forge\r\njupyter_console|6.1.0|py_1|conda-forge\r\njupyter_core|4.6.3|py36h9f0ad1d_1|conda-forge\r\nkrb5|1.17.1|h1752a42_0|conda-forge\r\nlibblas|3.8.0|16_openblas|conda-forge\r\nlibcblas|3.8.0|16_openblas|conda-forge\r\nlibclang|9.0.1|default_hf57f61e_0|conda-forge\r\nlibcxx|10.0.0|h1af66ff_2|conda-forge\r\nlibedit|3.1.20170329|hcfe32e1_1001|conda-forge\r\nlibffi|3.2.1|h4a8c4bd_1007|conda-forge\r\nlibgfortran|4.0.0|2|conda-forge\r\nlibiconv|1.15|h0b31af3_1006|conda-forge\r\nliblapack|3.8.0|16_openblas|conda-forge\r\nlibllvm9|9.0.1|h7475705_1|conda-forge\r\nlibopenblas|0.3.9|h3d69b6c_0|conda-forge\r\nlibpng|1.6.37|hbbe82c9_1|conda-forge\r\nlibpq|12.2|h489d428_1|conda-forge\r\nlibprotobuf|3.10.0|hd174df1_0|conda-forge\r\nlibsodium|1.0.17|h01d97ff_0|conda-forge\r\nlibtiff|4.1.0|h2ae36a8_6|conda-forge\r\nlibwebp-base|1.1.0|h0b31af3_3|conda-forge\r\nllvm-openmp|10.0.0|h28b9765_0|conda-forge\r\nlz4-c|1.9.2|h4a8c4bd_1|conda-forge\r\nmarkupsafe|1.1.1|py36h37b9a7d_1|conda-forge\r\nmistune|0.8.4|py36h37b9a7d_1001|conda-forge\r\nnbconvert|5.6.1|py36h9f0ad1d_1|conda-forge\r\nnbformat|5.0.6|py_0|conda-forge\r\nncurses|6.1|h0a44026_1002|conda-forge\r\nnotebook|6.0.3|py36h9f0ad1d_0|conda-forge\r\nnspr|4.20|h0a44026_1000|conda-forge\r\nnss|3.47|hc0980d9_0|conda-forge\r\nnumpy|1.16.5|py36hde6bac1_0|conda-forge\r\nolefile|0.46|py_0|conda-forge\r\nonnx|1.6.0|py36h4a8c4bd_0|conda-forge\r\nopenssl|1.1.1g|h0b31af3_0|conda-forge\r\npackaging|20.1|py_0|conda-forge\r\npandoc|2.9.2.1|0|conda-forge\r\npandocfilters|1.4.2|py_1|conda-forge\r\nparso|0.7.0|pyh9f0ad1d_0|conda-forge\r\npcre|8.44|h4a8c4bd_0|conda-forge\r\npexpect|4.8.0|py36h9f0ad1d_1|conda-forge\r\npickleshare|0.7.5|py36h9f0ad1d_1001|conda-forge\r\npillow|7.1.2|py36h2ae5dfa_0|conda-forge\r\npip|20.1|pyh9f0ad1d_0|conda-forge\r\nprometheus_client|0.7.1|py_0|conda-forge\r\nprompt-toolkit|3.0.5|py_0|conda-forge\r\nprompt_toolkit|3.0.5|0|conda-forge\r\nprotobuf|3.10.0|py36h4a8c4bd_0|conda-forge\r\nptyprocess|0.6.0|py_1001|conda-forge\r\npygments|2.6.1|py_0|conda-forge\r\npyparsing|2.4.7|pyh9f0ad1d_0|conda-forge\r\npyqt|5.12.3|py36haa9e2f4_3|conda-forge\r\npyqt5-sip|4.19.18|pypi_0|pypi\r\npyqtchart|5.12|pypi_0|pypi\r\npyqtwebengine|5.12.1|pypi_0|pypi\r\npyrsistent|0.16.0|py36h37b9a7d_0|conda-forge\r\npython|3.6.10|h4334963_1011_cpython|conda-forge\r\npython-dateutil|2.8.1|py_0|conda-forge\r\npython_abi|3.6|1_cp36m|conda-forge\r\npyzmq|19.0.1|py36h820b253_0|conda-forge\r\nqt|5.12.5|h514805e_3|conda-forge\r\nqtconsole|4.7.4|pyh9f0ad1d_0|conda-forge\r\nqtpy|1.9.0|py_0|conda-forge\r\nreadline|8.0|hcfe32e1_0|conda-forge\r\nsend2trash|1.5.0|py_0|conda-forge\r\nsetuptools|46.4.0|py36h9f0ad1d_0|conda-forge\r\nsinga|3.0.0|cpu_py36|nusdbsystem\r\nsix|1.14.0|py_1|conda-forge\r\nsqlite|3.30.1|h93121df_0|conda-forge\r\nterminado|0.8.3|py36h9f0ad1d_1|conda-forge\r\ntestpath|0.4.4|py_0|conda-forge\r\ntk|8.6.10|hbbe82c9_0|conda-forge\r\ntornado|6.0.4|py36h37b9a7d_1|conda-forge\r\ntqdm|4.46.0|pyh9f0ad1d_0|conda-forge\r\ntraitlets|4.3.3|py36h9f0ad1d_1|conda-forge\r\nwcwidth|0.1.9|pyh9f0ad1d_0|conda-forge\r\nwebencodings|0.5.1|py_1|conda-forge\r\nwheel|0.34.2|py_1|conda-forge\r\nwidgetsnbextension|3.5.1|py36_0|conda-forge\r\nwrapt|1.12.1|py36h37b9a7d_1|conda-forge\r\nxz|5.2.5|h0b31af3_0|conda-forge\r\nzeromq|4.3.2|h6de7cb9_2|conda-forge\r\nzipp|3.1.0|py_0|conda-forge\r\nzlib|1.2.11|h0b31af3_1006|conda-forge\r\nzstd|1.4.4|h4b3e974_3|conda-forge","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630611721/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630612309","html_url":"https://github.com/apache/singa/issues/704#issuecomment-630612309","issue_url":"https://api.github.com/repos/apache/singa/issues/704","id":630612309,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDYxMjMwOQ==","user":{"login":"Shashankwer","id":15552734,"node_id":"MDQ6VXNlcjE1NTUyNzM0","avatar_url":"https://avatars.githubusercontent.com/u/15552734?v=4","gravatar_id":"","url":"https://api.github.com/users/Shashankwer","html_url":"https://github.com/Shashankwer","followers_url":"https://api.github.com/users/Shashankwer/followers","following_url":"https://api.github.com/users/Shashankwer/following{/other_user}","gists_url":"https://api.github.com/users/Shashankwer/gists{/gist_id}","starred_url":"https://api.github.com/users/Shashankwer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shashankwer/subscriptions","organizations_url":"https://api.github.com/users/Shashankwer/orgs","repos_url":"https://api.github.com/users/Shashankwer/repos","events_url":"https://api.github.com/users/Shashankwer/events{/privacy}","received_events_url":"https://api.github.com/users/Shashankwer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T06:29:46Z","updated_at":"2020-05-19T06:29:46Z","author_association":"CONTRIBUTOR","body":"Will check the updated version","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630612309/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630613894","html_url":"https://github.com/apache/singa/issues/704#issuecomment-630613894","issue_url":"https://api.github.com/repos/apache/singa/issues/704","id":630613894,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDYxMzg5NA==","user":{"login":"Shashankwer","id":15552734,"node_id":"MDQ6VXNlcjE1NTUyNzM0","avatar_url":"https://avatars.githubusercontent.com/u/15552734?v=4","gravatar_id":"","url":"https://api.github.com/users/Shashankwer","html_url":"https://github.com/Shashankwer","followers_url":"https://api.github.com/users/Shashankwer/followers","following_url":"https://api.github.com/users/Shashankwer/following{/other_user}","gists_url":"https://api.github.com/users/Shashankwer/gists{/gist_id}","starred_url":"https://api.github.com/users/Shashankwer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shashankwer/subscriptions","organizations_url":"https://api.github.com/users/Shashankwer/orgs","repos_url":"https://api.github.com/users/Shashankwer/repos","events_url":"https://api.github.com/users/Shashankwer/events{/privacy}","received_events_url":"https://api.github.com/users/Shashankwer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T06:33:31Z","updated_at":"2020-05-19T06:33:31Z","author_association":"CONTRIBUTOR","body":"Updating to 3.7, the version seems to working well. Thank you for the assistance. ","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630613894/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630643227","html_url":"https://github.com/apache/singa/pull/697#issuecomment-630643227","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":630643227,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDY0MzIyNw==","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T07:37:24Z","updated_at":"2020-05-19T07:37:24Z","author_association":"NONE","body":"This pull request **introduces 11 alerts** and **fixes 11** when merging 3b1c46a42cf5896457b4263fa34f1f7bc8232f93 into db1846dd2c612950054f75b8125f40cd25a20f44 - [view on LGTM.com](https://lgtm.com/projects/g/apache/singa/rev/pr-e04eb65886fa3affacc20966d5363da9c61dff81)\n\n**new alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 1 for Mismatch between signature and use of an overridden method\n* 1 for Variable defined multiple times\n* 1 for Wrong number of arguments in a class instantiation\n\n**fixed alerts:**\n\n* 8 for Missing call to \\_\\_init\\_\\_ during object initialization\n* 2 for Unreachable code\n* 1 for Mismatch between signature and use of an overridden method","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630643227/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630741700","html_url":"https://github.com/apache/singa/pull/697#issuecomment-630741700","issue_url":"https://api.github.com/repos/apache/singa/issues/697","id":630741700,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDc0MTcwMA==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T10:48:47Z","updated_at":"2020-05-19T10:48:59Z","author_association":"MEMBER","body":"Hi @nudles @joddiy  get/set params are implemented as required:\r\n\r\n```\r\n{'l1:W': [[-0.838156    0.58935565]\r\n [ 0.4453408   0.08828315]\r\n [ 0.10353903  0.974195  ]\r\n [ 0.24744798  0.26123875]], 'l1:b': [0. 0.], 'bn1:scale': [1. 1.], 'bn1:bias': [0. 0.], 'dl1:l1:W': [[ 0.2805689  -0.05141211 -0.27061072  0.02269484]\r\n [-0.5174572  -0.02928859 -0.10004351 -0.47666895]], 'dl1:l1:b': [0. 0. 0. 0.], 'dl1:l2:W': [[ 1.0805224   0.01622006]\r\n [ 0.26961604  0.61809814]\r\n [ 1.0673248  -0.26117754]\r\n [-0.50873727  0.09084714]], 'dl1:l2:b': [0. 0.]}\r\n```\r\n\r\nMay I know for `states`, what is the rationale to make it separated from `params`? could we just make it as params? for now only `batchnorm` has states.\r\nCould we have it like together:\r\n```\r\n 'bn1:scale': [1. 1.], 'bn1:bias': [0. 0.], 'bn1:running_mean': [1. 1.], 'bn1:running_var': [0. 0.],\r\n```","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630741700/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630855677","html_url":"https://github.com/apache/singa/issues/702#issuecomment-630855677","issue_url":"https://api.github.com/repos/apache/singa/issues/702","id":630855677,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDg1NTY3Nw==","user":{"login":"nudles","id":3797447,"node_id":"MDQ6VXNlcjM3OTc0NDc=","avatar_url":"https://avatars.githubusercontent.com/u/3797447?v=4","gravatar_id":"","url":"https://api.github.com/users/nudles","html_url":"https://github.com/nudles","followers_url":"https://api.github.com/users/nudles/followers","following_url":"https://api.github.com/users/nudles/following{/other_user}","gists_url":"https://api.github.com/users/nudles/gists{/gist_id}","starred_url":"https://api.github.com/users/nudles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nudles/subscriptions","organizations_url":"https://api.github.com/users/nudles/orgs","repos_url":"https://api.github.com/users/nudles/repos","events_url":"https://api.github.com/users/nudles/events{/privacy}","received_events_url":"https://api.github.com/users/nudles/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T14:27:15Z","updated_at":"2020-05-19T14:27:15Z","author_association":"MEMBER","body":"Or we can convert SINGA Tensor to numpy array and use sklearn.metrics to compute the metrics https://scikit-learn.org/stable/modules/model_evaluation.html. ","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630855677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630891049","html_url":"https://github.com/apache/singa/pull/688#issuecomment-630891049","issue_url":"https://api.github.com/repos/apache/singa/issues/688","id":630891049,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDg5MTA0OQ==","user":{"login":"dcslin","id":13751447,"node_id":"MDQ6VXNlcjEzNzUxNDQ3","avatar_url":"https://avatars.githubusercontent.com/u/13751447?v=4","gravatar_id":"","url":"https://api.github.com/users/dcslin","html_url":"https://github.com/dcslin","followers_url":"https://api.github.com/users/dcslin/followers","following_url":"https://api.github.com/users/dcslin/following{/other_user}","gists_url":"https://api.github.com/users/dcslin/gists{/gist_id}","starred_url":"https://api.github.com/users/dcslin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcslin/subscriptions","organizations_url":"https://api.github.com/users/dcslin/orgs","repos_url":"https://api.github.com/users/dcslin/repos","events_url":"https://api.github.com/users/dcslin/events{/privacy}","received_events_url":"https://api.github.com/users/dcslin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T15:17:35Z","updated_at":"2020-05-19T15:17:35Z","author_association":"MEMBER","body":"> > > Hi, @dcslin , can I use this PR right now or which operation I can use now? since I need to let the soonx to support the new autograd api.\r\n> > \r\n> > \r\n> > Hi @joddiy please refer to #697\r\n> \r\n> Thanks, shicong, and one thing to confirm, the name of operation should be `_ReLU` or `ReLU`?\r\n\r\nI guess you are building the model? then by convention we use `autograd.relu()`","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630891049/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630902943","html_url":"https://github.com/apache/singa/issues/700#issuecomment-630902943","issue_url":"https://api.github.com/repos/apache/singa/issues/700","id":630902943,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDkwMjk0Mw==","user":{"login":"Shashankwer","id":15552734,"node_id":"MDQ6VXNlcjE1NTUyNzM0","avatar_url":"https://avatars.githubusercontent.com/u/15552734?v=4","gravatar_id":"","url":"https://api.github.com/users/Shashankwer","html_url":"https://github.com/Shashankwer","followers_url":"https://api.github.com/users/Shashankwer/followers","following_url":"https://api.github.com/users/Shashankwer/following{/other_user}","gists_url":"https://api.github.com/users/Shashankwer/gists{/gist_id}","starred_url":"https://api.github.com/users/Shashankwer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shashankwer/subscriptions","organizations_url":"https://api.github.com/users/Shashankwer/orgs","repos_url":"https://api.github.com/users/Shashankwer/repos","events_url":"https://api.github.com/users/Shashankwer/events{/privacy}","received_events_url":"https://api.github.com/users/Shashankwer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T15:36:33Z","updated_at":"2020-05-19T15:36:33Z","author_association":"CONTRIBUTOR","body":"Will Start working with MobileNetV2, InceptionNetV3","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630902943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/singa/issues/comments/630920491","html_url":"https://github.com/apache/singa/issues/702#issuecomment-630920491","issue_url":"https://api.github.com/repos/apache/singa/issues/702","id":630920491,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDkyMDQ5MQ==","user":{"login":"chrishkchris","id":38325429,"node_id":"MDQ6VXNlcjM4MzI1NDI5","avatar_url":"https://avatars.githubusercontent.com/u/38325429?v=4","gravatar_id":"","url":"https://api.github.com/users/chrishkchris","html_url":"https://github.com/chrishkchris","followers_url":"https://api.github.com/users/chrishkchris/followers","following_url":"https://api.github.com/users/chrishkchris/following{/other_user}","gists_url":"https://api.github.com/users/chrishkchris/gists{/gist_id}","starred_url":"https://api.github.com/users/chrishkchris/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chrishkchris/subscriptions","organizations_url":"https://api.github.com/users/chrishkchris/orgs","repos_url":"https://api.github.com/users/chrishkchris/repos","events_url":"https://api.github.com/users/chrishkchris/events{/privacy}","received_events_url":"https://api.github.com/users/chrishkchris/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-05-19T16:06:57Z","updated_at":"2020-05-19T16:09:47Z","author_association":"CONTRIBUTOR","body":"When we use this accuracy:\r\ny_true (each value is a label index) is provided directly by the dataset\r\ny_pred (each value is a label index) needs to be obtained by applying max function to the network output (i.e. logit) BEFORE the softmaxCrossEntropy\r\n\r\nso we need a max function to turn the logits into pred label index?","reactions":{"url":"https://api.github.com/repos/apache/singa/issues/comments/630920491/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]