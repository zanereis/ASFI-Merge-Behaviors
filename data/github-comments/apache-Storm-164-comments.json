[{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643761","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643761","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643761,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:18:58Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50303592\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50303592</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) {\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +} else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) {\n    +return artifactsDir;\n    +    } else {\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +return (workerArtifactsRoot(conf, id) + FILE_SEPARATOR + port);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsPidPath(Map conf, String id, Integer port) </p>\n{\n    +return (workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR +  \"worker.pid\");\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(String fname) </p>\n{\n    +String[] subStrings = fname.split(FILE_SEPARATOR); // TODO: does this work well on windows?\n    +String id = subStrings[0];\n    +Integer port = Integer.parseInt(subStrings[1]);\n    +return getLogMetaDataFile(Utils.readStormConfig(), id, port);\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(Map conf, String id, Integer port) </p>\n{\n    +String fname = workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR + \"worker.yaml\";\n    +return new File(fname);\n    +    }\n<p>    +<br/>\n    +    public static File getWorkerDirFromRoot(String logRoot, String id, Integer port) </p>\n{\n    +return new File((logRoot + FILE_SEPARATOR + id + FILE_SEPARATOR + port));\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"workers\");\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf) + FILE_SEPARATOR + id);\n    +    }\n<p>    +<br/>\n    +    public static String workerPidsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"pids\");\n    +    }\n<p>    +<br/>\n    +    public static String workerPidPath(Map conf, String id, String pid) </p>\n{\n    +return (workerPidsRoot(conf, id) + FILE_SEPARATOR + pid);\n    +    }\n<p>    +<br/>\n    +    public static String workerHeartbeatsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"heartbeats\");\n    +    }\n<p>    +<br/>\n    +    public static LocalState workerState(Map conf, String id) throws IOException </p>\n{\n    +return new LocalState(workerHeartbeatsRoot(conf, id));\n    +    }\n<p>    +<br/>\n    +    public static Map overrideLoginConfigWithSystemProperty(Map conf) { // note that we delete the return value<br/>\n    +String loginConfFile = System.getProperty(\"java.security.auth.login.config\");<br/>\n    +if (loginConfFile != null) </p>\n{\n    +     conf.put(\"java.security.auth.login.config\", loginConfFile);\n    +}\n<p>    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    /* TODO: make sure test these two functions in manual tests */<br/>\n    +    public static List<String> getTopoLogsUsers(Map topologyConf) {<br/>\n    +List<String> logsUsers = (List<String>)topologyConf.get(Config.LOGS_USERS);<br/>\n    +List<String> topologyUsers = (List<String>)topologyConf.get(Config.TOPOLOGY_USERS);<br/>\n    +Set<String> mergedUsers = new HashSet<String>();<br/>\n    +if (logsUsers != null) {<br/>\n    +    for (String user : logsUsers) {<br/>\n    +if (user != null) </p>\n{\n    +    mergedUsers.add(user);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +if (topologyUsers != null) {<br/>\n    +    for (String user : topologyUsers) {<br/>\n    +if (user != null) {    +    mergedUsers.add(user);    +}\n<p>    +    }<br/>\n    +}<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    A reason for not doing so is that some user might be null or \"null\" in the configuration?<br/>\n    I see there is \"remove nil?\" in original clojure code.<br/>\n    ``<br/>\n      (sort (distinct (remove nil?<br/>\n(concat<br/>\n  (topology-conf LOGS-GROUPS)<br/>\n  (topology-conf TOPOLOGY-GROUPS))))))<br/>\n    ``</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643761/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701541","html_url":"https://github.com/apache/storm/issues/5308#issuecomment-2612701541","issue_url":"https://api.github.com/repos/apache/storm/issues/5308","id":2612701541,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE1NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:55:29Z","updated_at":"2025-01-24T14:44:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1015\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1015</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701541/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701544","html_url":"https://github.com/apache/storm/issues/5308#issuecomment-2612701544","issue_url":"https://api.github.com/repos/apache/storm/issues/5308","id":2612701544,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE1NDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:56:24Z","updated_at":"2025-01-24T14:44:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zhuoliu\" class=\"user-hover\" rel=\"zhuoliu\">Zhuo Liu</a>,</p>\n\n<p>I merged this into master and 1.x-branch</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701544/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703532","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703532","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703532,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1MzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:00:54Z","updated_at":"2025-01-24T14:45:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1027#discussion_r50310048\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1027#discussion_r50310048</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Login.java &#8212;<br/>\n    @@ -0,0 +1,411 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.messaging.netty;<br/>\n    +<br/>\n    +/**<br/>\n    + * This class is responsible for refreshing Kerberos credentials for<br/>\n    + * logins for both Zookeeper client and server.<br/>\n    + * See ZooKeeperSaslServer for server-side usage.<br/>\n    + * See ZooKeeperSaslClient for client-side usage.<br/>\n    + * This class is a copied from <a href=\"https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/Login.java\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/Login.java</a><br/>\n    + * with the difference that refresh thread does not die.<br/>\n    + */<br/>\n    +<br/>\n    +import javax.security.auth.kerberos.KerberosPrincipal;<br/>\n    +import javax.security.auth.login.AppConfigurationEntry;<br/>\n    +import javax.security.auth.login.Configuration;<br/>\n    +import javax.security.auth.login.LoginContext;<br/>\n    +import javax.security.auth.login.LoginException;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +<br/>\n    +import org.apache.log4j.Logger;<br/>\n    +import org.apache.zookeeper.Shell;<br/>\n    +import org.apache.zookeeper.client.ZooKeeperSaslClient;<br/>\n    +import javax.security.auth.kerberos.KerberosTicket;<br/>\n    +import javax.security.auth.Subject;<br/>\n    +import java.util.Date;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.Set;<br/>\n    +<br/>\n    +public class Login {<br/>\n    +    Logger LOG = Logger.getLogger(Login.class);<br/>\n    +    public CallbackHandler callbackHandler;<br/>\n    +<br/>\n    +    // LoginThread will sleep until 80% of time from last refresh to<br/>\n    +    // ticket's expiry has been reached, at which time it will wake<br/>\n    +    // and try to renew the ticket.<br/>\n    +    private static final float TICKET_RENEW_WINDOW = 0.80f;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Percentage of random jitter added to the renewal time<br/>\n    +     */<br/>\n    +    private static final float TICKET_RENEW_JITTER = 0.05f;<br/>\n    +<br/>\n    +    // Regardless of TICKET_RENEW_WINDOW setting above and the ticket expiry time,<br/>\n    +    // thread will not sleep between refresh attempts any less than 1 minute (60*1000 milliseconds = 1 minute).<br/>\n    +    // Change the '1' to e.g. 5, to change this to 5 minutes.<br/>\n    +    private static final long MIN_TIME_BEFORE_RELOGIN = 1 * 60 * 1000L;<br/>\n    +<br/>\n    +    private Subject subject = null;<br/>\n    +    private Thread t = null;<br/>\n    +    private boolean isKrbTicket = false;<br/>\n    +    private boolean isUsingTicketCache = false;<br/>\n    +    private boolean isUsingKeytab = false;<br/>\n    +<br/>\n    +    /** Random number generator */<br/>\n    +    private static Random rng = new Random();<br/>\n    +<br/>\n    +    private LoginContext login = null;<br/>\n    +    private String loginContextName = null;<br/>\n    +    private String keytabFile = null;<br/>\n    +    private String principal = null;<br/>\n    +<br/>\n    +    private long lastLogin = 0;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * LoginThread constructor. The constructor starts the thread used<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Minor nit: `LoginThread` --> `Login`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703532/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173343533","html_url":"https://github.com/apache/storm/pull/1023#issuecomment-173343533","issue_url":"https://api.github.com/repos/apache/storm/issues/1023","id":173343533,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM0MzUzMw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:01:06Z","updated_at":"2016-01-20T20:01:06Z","author_association":"CONTRIBUTOR","body":"Because the files have change locations porting to 0.10.x is going to need a separate pull request (git is not happy)\n\nI will merge this in for master and 1.x-branch\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173343533/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702630","html_url":"https://github.com/apache/storm/issues/5316#issuecomment-2612702630","issue_url":"https://api.github.com/repos/apache/storm/issues/5316","id":2612702630,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI2MzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:01:07Z","updated_at":"2025-01-24T14:45:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1023#issuecomment-173343533\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1023#issuecomment-173343533</a></p>\n\n<p>    Because the files have change locations porting to 0.10.x is going to need a separate pull request (git is not happy)</p>\n\n<p>    I will merge this in for master and 1.x-branch</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702630/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173344407","html_url":"https://github.com/apache/storm/pull/1027#issuecomment-173344407","issue_url":"https://api.github.com/repos/apache/storm/issues/1027","id":173344407,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM0NDQwNw==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:04:38Z","updated_at":"2016-01-20T20:04:38Z","author_association":"MEMBER","body":"One very minor nit.\n\n+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173344407/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703539","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703539","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703539,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:04:39Z","updated_at":"2025-01-24T14:45:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1027#issuecomment-173344407\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1027#issuecomment-173344407</a></p>\n\n<p>    One very minor nit.</p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703539/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173345063","html_url":"https://github.com/apache/storm/pull/1023#issuecomment-173345063","issue_url":"https://api.github.com/repos/apache/storm/issues/1023","id":173345063,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM0NTA2Mw==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:07:25Z","updated_at":"2016-01-20T20:07:25Z","author_association":"MEMBER","body":"@revans2 I'll take care of the merge to 0.10.x as soon as this is in master.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173345063/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702637","html_url":"https://github.com/apache/storm/issues/5316#issuecomment-2612702637","issue_url":"https://api.github.com/repos/apache/storm/issues/5316","id":2612702637,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI2Mzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:07:26Z","updated_at":"2025-01-24T14:45:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1023#issuecomment-173345063\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1023#issuecomment-173345063</a></p>\n\n<p>    @revans2 I'll take care of the merge to 0.10.x as soon as this is in master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702637/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173345862","html_url":"https://github.com/apache/storm/pull/1023#issuecomment-173345862","issue_url":"https://api.github.com/repos/apache/storm/issues/1023","id":173345862,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM0NTg2Mg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:10:27Z","updated_at":"2016-01-20T20:10:27Z","author_association":"CONTRIBUTOR","body":"@ptgoetz sounds good just running a sanity check with the tests before merging it in.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173345862/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702638","html_url":"https://github.com/apache/storm/issues/5316#issuecomment-2612702638","issue_url":"https://api.github.com/repos/apache/storm/issues/5316","id":2612702638,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI2Mzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:10:28Z","updated_at":"2025-01-24T14:45:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1023#issuecomment-173345862\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1023#issuecomment-173345862</a></p>\n\n<p>    @ptgoetz sounds good just running a sanity check with the tests before merging it in.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702638/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702644","html_url":"https://github.com/apache/storm/issues/5316#issuecomment-2612702644","issue_url":"https://api.github.com/repos/apache/storm/issues/5316","id":2612702644,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI2NDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:13:03Z","updated_at":"2025-01-24T14:45:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1023\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1023</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702644/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702654","html_url":"https://github.com/apache/storm/issues/5316#issuecomment-2612702654","issue_url":"https://api.github.com/repos/apache/storm/issues/5316","id":2612702654,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI2NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:14:18Z","updated_at":"2025-01-24T14:45:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vesense\" class=\"user-hover\" rel=\"vesense\">Xin Wang</a>,</p>\n\n<p>I merged this to master and 1.x-branch.  <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\" class=\"user-hover\" rel=\"ptgoetz\">P. Taylor Goetz</a> said he will port this to 0.10.x</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702654/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703543","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703543","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703543,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:32:33Z","updated_at":"2025-01-24T14:45:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1027#discussion_r50314307\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1027#discussion_r50314307</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Login.java &#8212;<br/>\n    @@ -0,0 +1,411 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.messaging.netty;<br/>\n    +<br/>\n    +/**<br/>\n    + * This class is responsible for refreshing Kerberos credentials for<br/>\n    + * logins for both Zookeeper client and server.<br/>\n    + * See ZooKeeperSaslServer for server-side usage.<br/>\n    + * See ZooKeeperSaslClient for client-side usage.<br/>\n    + * This class is a copied from <a href=\"https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/Login.java\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/Login.java</a><br/>\n    + * with the difference that refresh thread does not die.<br/>\n    + */<br/>\n    +<br/>\n    +import javax.security.auth.kerberos.KerberosPrincipal;<br/>\n    +import javax.security.auth.login.AppConfigurationEntry;<br/>\n    +import javax.security.auth.login.Configuration;<br/>\n    +import javax.security.auth.login.LoginContext;<br/>\n    +import javax.security.auth.login.LoginException;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +<br/>\n    +import org.apache.log4j.Logger;<br/>\n    +import org.apache.zookeeper.Shell;<br/>\n    +import org.apache.zookeeper.client.ZooKeeperSaslClient;<br/>\n    +import javax.security.auth.kerberos.KerberosTicket;<br/>\n    +import javax.security.auth.Subject;<br/>\n    +import java.util.Date;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.Set;<br/>\n    +<br/>\n    +public class Login {<br/>\n    +    Logger LOG = Logger.getLogger(Login.class);<br/>\n    +    public CallbackHandler callbackHandler;<br/>\n    +<br/>\n    +    // LoginThread will sleep until 80% of time from last refresh to<br/>\n    +    // ticket's expiry has been reached, at which time it will wake<br/>\n    +    // and try to renew the ticket.<br/>\n    +    private static final float TICKET_RENEW_WINDOW = 0.80f;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Percentage of random jitter added to the renewal time<br/>\n    +     */<br/>\n    +    private static final float TICKET_RENEW_JITTER = 0.05f;<br/>\n    +<br/>\n    +    // Regardless of TICKET_RENEW_WINDOW setting above and the ticket expiry time,<br/>\n    +    // thread will not sleep between refresh attempts any less than 1 minute (60*1000 milliseconds = 1 minute).<br/>\n    +    // Change the '1' to e.g. 5, to change this to 5 minutes.<br/>\n    +    private static final long MIN_TIME_BEFORE_RELOGIN = 1 * 60 * 1000L;<br/>\n    +<br/>\n    +    private Subject subject = null;<br/>\n    +    private Thread t = null;<br/>\n    +    private boolean isKrbTicket = false;<br/>\n    +    private boolean isUsingTicketCache = false;<br/>\n    +    private boolean isUsingKeytab = false;<br/>\n    +<br/>\n    +    /** Random number generator */<br/>\n    +    private static Random rng = new Random();<br/>\n    +<br/>\n    +    private LoginContext login = null;<br/>\n    +    private String loginContextName = null;<br/>\n    +    private String keytabFile = null;<br/>\n    +    private String principal = null;<br/>\n    +<br/>\n    +    private long lastLogin = 0;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * LoginThread constructor. The constructor starts the thread used<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @ptgoetz  I trying not to deviate a lot from org.apache.zookeeer.Login code. If I can not push the changes to zookeeper and this becomes Storm only code then, we may get ride of unwanted comments etc... <br/>\n    If you still prefer, I am more than willing to make these minor changes in code comments..</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703543/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703547","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703547","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703547,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:37:52Z","updated_at":"2025-01-24T14:45:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1027#discussion_r50314937\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1027#discussion_r50314937</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Login.java &#8212;<br/>\n    @@ -0,0 +1,411 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.messaging.netty;<br/>\n    +<br/>\n    +/**<br/>\n    + * This class is responsible for refreshing Kerberos credentials for<br/>\n    + * logins for both Zookeeper client and server.<br/>\n    + * See ZooKeeperSaslServer for server-side usage.<br/>\n    + * See ZooKeeperSaslClient for client-side usage.<br/>\n    + * This class is a copied from <a href=\"https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/Login.java\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/Login.java</a><br/>\n    + * with the difference that refresh thread does not die.<br/>\n    + */<br/>\n    +<br/>\n    +import javax.security.auth.kerberos.KerberosPrincipal;<br/>\n    +import javax.security.auth.login.AppConfigurationEntry;<br/>\n    +import javax.security.auth.login.Configuration;<br/>\n    +import javax.security.auth.login.LoginContext;<br/>\n    +import javax.security.auth.login.LoginException;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +<br/>\n    +import org.apache.log4j.Logger;<br/>\n    +import org.apache.zookeeper.Shell;<br/>\n    +import org.apache.zookeeper.client.ZooKeeperSaslClient;<br/>\n    +import javax.security.auth.kerberos.KerberosTicket;<br/>\n    +import javax.security.auth.Subject;<br/>\n    +import java.util.Date;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.Set;<br/>\n    +<br/>\n    +public class Login {<br/>\n    +    Logger LOG = Logger.getLogger(Login.class);<br/>\n    +    public CallbackHandler callbackHandler;<br/>\n    +<br/>\n    +    // LoginThread will sleep until 80% of time from last refresh to<br/>\n    +    // ticket's expiry has been reached, at which time it will wake<br/>\n    +    // and try to renew the ticket.<br/>\n    +    private static final float TICKET_RENEW_WINDOW = 0.80f;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Percentage of random jitter added to the renewal time<br/>\n    +     */<br/>\n    +    private static final float TICKET_RENEW_JITTER = 0.05f;<br/>\n    +<br/>\n    +    // Regardless of TICKET_RENEW_WINDOW setting above and the ticket expiry time,<br/>\n    +    // thread will not sleep between refresh attempts any less than 1 minute (60*1000 milliseconds = 1 minute).<br/>\n    +    // Change the '1' to e.g. 5, to change this to 5 minutes.<br/>\n    +    private static final long MIN_TIME_BEFORE_RELOGIN = 1 * 60 * 1000L;<br/>\n    +<br/>\n    +    private Subject subject = null;<br/>\n    +    private Thread t = null;<br/>\n    +    private boolean isKrbTicket = false;<br/>\n    +    private boolean isUsingTicketCache = false;<br/>\n    +    private boolean isUsingKeytab = false;<br/>\n    +<br/>\n    +    /** Random number generator */<br/>\n    +    private static Random rng = new Random();<br/>\n    +<br/>\n    +    private LoginContext login = null;<br/>\n    +    private String loginContextName = null;<br/>\n    +    private String keytabFile = null;<br/>\n    +    private String principal = null;<br/>\n    +<br/>\n    +    private long lastLogin = 0;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * LoginThread constructor. The constructor starts the thread used<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I'm not sure we want to push this back to zookeeper.  Login feels like it was an internal class not meant for others to use.  We probably never should have used it, and forking it is the right thing to do long term.  Even if we do push a fix back to zookeeper.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703547/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173352336","html_url":"https://github.com/apache/storm/pull/991#issuecomment-173352336","issue_url":"https://api.github.com/repos/apache/storm/issues/991","id":173352336,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM1MjMzNg==","user":{"login":"Parth-Brahmbhatt","id":6914358,"node_id":"MDQ6VXNlcjY5MTQzNTg=","avatar_url":"https://avatars.githubusercontent.com/u/6914358?v=4","gravatar_id":"","url":"https://api.github.com/users/Parth-Brahmbhatt","html_url":"https://github.com/Parth-Brahmbhatt","followers_url":"https://api.github.com/users/Parth-Brahmbhatt/followers","following_url":"https://api.github.com/users/Parth-Brahmbhatt/following{/other_user}","gists_url":"https://api.github.com/users/Parth-Brahmbhatt/gists{/gist_id}","starred_url":"https://api.github.com/users/Parth-Brahmbhatt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Parth-Brahmbhatt/subscriptions","organizations_url":"https://api.github.com/users/Parth-Brahmbhatt/orgs","repos_url":"https://api.github.com/users/Parth-Brahmbhatt/repos","events_url":"https://api.github.com/users/Parth-Brahmbhatt/events{/privacy}","received_events_url":"https://api.github.com/users/Parth-Brahmbhatt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:38:46Z","updated_at":"2016-01-20T20:38:46Z","author_association":"CONTRIBUTOR","body":"I think you need to add this module to incubator-storm/storm-dist/binary/src/main/assembly/binary.xml . I am +1 once that is done.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173352336/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691006","html_url":"https://github.com/apache/storm/issues/5241#issuecomment-2612691006","issue_url":"https://api.github.com/repos/apache/storm/issues/5241","id":2612691006,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTEwMDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:38:48Z","updated_at":"2025-01-24T14:40:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Parth-Brahmbhatt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/991#issuecomment-173352336\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/991#issuecomment-173352336</a></p>\n\n<p>    I think you need to add this module to incubator-storm/storm-dist/binary/src/main/assembly/binary.xml . I am +1 once that is done.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691006/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703555","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703555","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703555,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:40:02Z","updated_at":"2025-01-24T14:45:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1027#discussion_r50315408\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1027#discussion_r50315408</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Login.java &#8212;<br/>\n    @@ -0,0 +1,411 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.messaging.netty;<br/>\n    +<br/>\n    +/**<br/>\n    + * This class is responsible for refreshing Kerberos credentials for<br/>\n    + * logins for both Zookeeper client and server.<br/>\n    + * See ZooKeeperSaslServer for server-side usage.<br/>\n    + * See ZooKeeperSaslClient for client-side usage.<br/>\n    + * This class is a copied from <a href=\"https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/Login.java\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/Login.java</a><br/>\n    + * with the difference that refresh thread does not die.<br/>\n    + */<br/>\n    +<br/>\n    +import javax.security.auth.kerberos.KerberosPrincipal;<br/>\n    +import javax.security.auth.login.AppConfigurationEntry;<br/>\n    +import javax.security.auth.login.Configuration;<br/>\n    +import javax.security.auth.login.LoginContext;<br/>\n    +import javax.security.auth.login.LoginException;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +<br/>\n    +import org.apache.log4j.Logger;<br/>\n    +import org.apache.zookeeper.Shell;<br/>\n    +import org.apache.zookeeper.client.ZooKeeperSaslClient;<br/>\n    +import javax.security.auth.kerberos.KerberosTicket;<br/>\n    +import javax.security.auth.Subject;<br/>\n    +import java.util.Date;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.Set;<br/>\n    +<br/>\n    +public class Login {<br/>\n    +    Logger LOG = Logger.getLogger(Login.class);<br/>\n    +    public CallbackHandler callbackHandler;<br/>\n    +<br/>\n    +    // LoginThread will sleep until 80% of time from last refresh to<br/>\n    +    // ticket's expiry has been reached, at which time it will wake<br/>\n    +    // and try to renew the ticket.<br/>\n    +    private static final float TICKET_RENEW_WINDOW = 0.80f;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Percentage of random jitter added to the renewal time<br/>\n    +     */<br/>\n    +    private static final float TICKET_RENEW_JITTER = 0.05f;<br/>\n    +<br/>\n    +    // Regardless of TICKET_RENEW_WINDOW setting above and the ticket expiry time,<br/>\n    +    // thread will not sleep between refresh attempts any less than 1 minute (60*1000 milliseconds = 1 minute).<br/>\n    +    // Change the '1' to e.g. 5, to change this to 5 minutes.<br/>\n    +    private static final long MIN_TIME_BEFORE_RELOGIN = 1 * 60 * 1000L;<br/>\n    +<br/>\n    +    private Subject subject = null;<br/>\n    +    private Thread t = null;<br/>\n    +    private boolean isKrbTicket = false;<br/>\n    +    private boolean isUsingTicketCache = false;<br/>\n    +    private boolean isUsingKeytab = false;<br/>\n    +<br/>\n    +    /** Random number generator */<br/>\n    +    private static Random rng = new Random();<br/>\n    +<br/>\n    +    private LoginContext login = null;<br/>\n    +    private String loginContextName = null;<br/>\n    +    private String keytabFile = null;<br/>\n    +    private String principal = null;<br/>\n    +<br/>\n    +    private long lastLogin = 0;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * LoginThread constructor. The constructor starts the thread used<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Ok will change it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703555/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173353051","html_url":"https://github.com/apache/storm/pull/991#issuecomment-173353051","issue_url":"https://api.github.com/repos/apache/storm/issues/991","id":173353051,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM1MzA1MQ==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:41:45Z","updated_at":"2016-01-20T20:41:45Z","author_association":"MEMBER","body":"@Parth-Brahmbhatt Good catch. Will do.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173353051/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691009","html_url":"https://github.com/apache/storm/issues/5241#issuecomment-2612691009","issue_url":"https://api.github.com/repos/apache/storm/issues/5241","id":2612691009,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTEwMDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:41:46Z","updated_at":"2025-01-24T14:40:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/991#issuecomment-173353051\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/991#issuecomment-173353051</a></p>\n\n<p>    @Parth-Brahmbhatt Good catch. Will do.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691009/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702659","html_url":"https://github.com/apache/storm/issues/5316#issuecomment-2612702659","issue_url":"https://api.github.com/repos/apache/storm/issues/5316","id":2612702659,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI2NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:47:13Z","updated_at":"2025-01-24T14:45:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\">ptgoetz</a>:</i>\n<p>Ported to 0.10.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702659/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173354953","html_url":"https://github.com/apache/storm/pull/986#issuecomment-173354953","issue_url":"https://api.github.com/repos/apache/storm/issues/986","id":173354953,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM1NDk1Mw==","user":{"login":"connieyang","id":810950,"node_id":"MDQ6VXNlcjgxMDk1MA==","avatar_url":"https://avatars.githubusercontent.com/u/810950?v=4","gravatar_id":"","url":"https://api.github.com/users/connieyang","html_url":"https://github.com/connieyang","followers_url":"https://api.github.com/users/connieyang/followers","following_url":"https://api.github.com/users/connieyang/following{/other_user}","gists_url":"https://api.github.com/users/connieyang/gists{/gist_id}","starred_url":"https://api.github.com/users/connieyang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/connieyang/subscriptions","organizations_url":"https://api.github.com/users/connieyang/orgs","repos_url":"https://api.github.com/users/connieyang/repos","events_url":"https://api.github.com/users/connieyang/events{/privacy}","received_events_url":"https://api.github.com/users/connieyang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T20:49:51Z","updated_at":"2016-01-20T20:49:51Z","author_association":"NONE","body":"@hmcl Will your PR include the rev for Trident API to work with Kafka 0.9?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173354953/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173357623","html_url":"https://github.com/apache/storm/pull/991#issuecomment-173357623","issue_url":"https://api.github.com/repos/apache/storm/issues/991","id":173357623,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM1NzYyMw==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:01:32Z","updated_at":"2016-01-20T21:01:32Z","author_association":"MEMBER","body":"@Parth-Brahmbhatt Done.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173357623/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691013","html_url":"https://github.com/apache/storm/issues/5241#issuecomment-2612691013","issue_url":"https://api.github.com/repos/apache/storm/issues/5241","id":2612691013,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTEwMTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:01:33Z","updated_at":"2025-01-24T14:40:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/991#issuecomment-173357623\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/991#issuecomment-173357623</a></p>\n\n<p>    @Parth-Brahmbhatt Done.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691013/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173358421","html_url":"https://github.com/apache/storm/pull/991#issuecomment-173358421","issue_url":"https://api.github.com/repos/apache/storm/issues/991","id":173358421,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM1ODQyMQ==","user":{"login":"Parth-Brahmbhatt","id":6914358,"node_id":"MDQ6VXNlcjY5MTQzNTg=","avatar_url":"https://avatars.githubusercontent.com/u/6914358?v=4","gravatar_id":"","url":"https://api.github.com/users/Parth-Brahmbhatt","html_url":"https://github.com/Parth-Brahmbhatt","followers_url":"https://api.github.com/users/Parth-Brahmbhatt/followers","following_url":"https://api.github.com/users/Parth-Brahmbhatt/following{/other_user}","gists_url":"https://api.github.com/users/Parth-Brahmbhatt/gists{/gist_id}","starred_url":"https://api.github.com/users/Parth-Brahmbhatt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Parth-Brahmbhatt/subscriptions","organizations_url":"https://api.github.com/users/Parth-Brahmbhatt/orgs","repos_url":"https://api.github.com/users/Parth-Brahmbhatt/repos","events_url":"https://api.github.com/users/Parth-Brahmbhatt/events{/privacy}","received_events_url":"https://api.github.com/users/Parth-Brahmbhatt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:04:45Z","updated_at":"2016-01-20T21:04:45Z","author_association":"CONTRIBUTOR","body":"+1.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173358421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691022","html_url":"https://github.com/apache/storm/issues/5241#issuecomment-2612691022","issue_url":"https://api.github.com/repos/apache/storm/issues/5241","id":2612691022,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTEwMjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:04:47Z","updated_at":"2025-01-24T14:40:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Parth-Brahmbhatt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/991#issuecomment-173358421\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/991#issuecomment-173358421</a></p>\n\n<p>    +1.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173359428","html_url":"https://github.com/apache/storm/pull/1027#issuecomment-173359428","issue_url":"https://api.github.com/repos/apache/storm/issues/1027","id":173359428,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM1OTQyOA==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:09:07Z","updated_at":"2016-01-20T21:09:07Z","author_association":"MEMBER","body":"Still +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173359428/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703559","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703559","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703559,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:09:08Z","updated_at":"2025-01-24T14:45:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1027#issuecomment-173359428\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1027#issuecomment-173359428</a></p>\n\n<p>    Still +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703559/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697901","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697901","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697901,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:13:17Z","updated_at":"2025-01-24T14:43:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#discussion_r50319883\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#discussion_r50319883</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/ui/core.clj &#8212;<br/>\n    @@ -863,6 +855,7 @@<br/>\n   (.get_eventlog_host comp-page-info)<br/>\n   (.get_eventlog_port comp-page-info)<br/>\n   secure?)<br/>\n    +       \"profilingAndDebuggingCapable\" (not on-windows?)<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1489\" title=\"Script for cleaner environment checking\" class=\"issue-link\" data-issue-key=\"STORM-1489\"><del>STORM-1489</del></a>(<a href=\"https://issues.apache.org/jira/browse/STORM-1489\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1489</a>) created</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173361855","html_url":"https://github.com/apache/storm/pull/1012#issuecomment-173361855","issue_url":"https://api.github.com/repos/apache/storm/issues/1012","id":173361855,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM2MTg1NQ==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:17:39Z","updated_at":"2016-01-20T21:17:39Z","author_association":"MEMBER","body":"@d2r You can just delete the .md file in question. I should have a pull request for the docs in a minute.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173361855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697904","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697904","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697904,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5MDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:17:40Z","updated_at":"2025-01-24T14:43:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#issuecomment-173361855\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#issuecomment-173361855</a></p>\n\n<p>    @d2r You can just delete the .md file in question. I should have a pull request for the docs in a minute.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173362346","html_url":"https://github.com/apache/storm/pull/1027#issuecomment-173362346","issue_url":"https://api.github.com/repos/apache/storm/issues/1027","id":173362346,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM2MjM0Ng==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:19:42Z","updated_at":"2016-01-20T21:19:42Z","author_association":"CONTRIBUTOR","body":"Still +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173362346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703565","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703565","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703565,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:19:45Z","updated_at":"2025-01-24T14:45:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1027#issuecomment-173362346\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1027#issuecomment-173362346</a></p>\n\n<p>    Still +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703565/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173362478","html_url":"https://github.com/apache/storm/pull/994#issuecomment-173362478","issue_url":"https://api.github.com/repos/apache/storm/issues/994","id":173362478,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM2MjQ3OA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:20:16Z","updated_at":"2016-01-20T21:21:30Z","author_association":"CONTRIBUTOR","body":"Maintaining backward compatibility is bi-directional, which means just modifying core can break module's backward compatibility what @revans2 stated.\nWe should bear in mind of backward compatibility with core itself.\nAdopting semver is great to go, and in fact preparing 1.0.0 is the chance to break backward compatibility if necessary. If we deprecated some classes/methods, let's review.\nI expect we can not have a chance to release another major version sooner (except 2.0, it is not for such change)\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173362478/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697339","html_url":"https://github.com/apache/storm/issues/5284#issuecomment-2612697339","issue_url":"https://api.github.com/repos/apache/storm/issues/5284","id":2612697339,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTczMzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:20:17Z","updated_at":"2025-01-24T14:43:08Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/994#issuecomment-173362478\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/994#issuecomment-173362478</a></p>\n\n<p>    Maintaining backward compatibility is bi-directional, which means just modifying core can break module's backward compatibility what @revans2 stated.<br/>\n    We should bear in mind of backward compatibility with core itself.<br/>\n    Adopting semver is great to go, and in fact preparing 1.0.0 is the chance to break backward compatibility if necessary. If we were deprecated some classes/methods, let's review.<br/>\n    I expect we can not have a chance to release another major version sooner (except 2.0, it is not for such change)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697339/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697912","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697912","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697912,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:22:49Z","updated_at":"2025-01-24T14:43:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user ptgoetz opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1032\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1032</a></p>\n\n<p>     <a href=\"https://issues.apache.org/jira/browse/STORM-1452\" title=\"Worker \"profiler\" actions broken by default\" class=\"issue-link\" data-issue-key=\"STORM-1452\"><del>STORM-1452</del></a>: update REST API docs for profiling</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/ptgoetz/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/ptgoetz/storm</a> asf-site-ptgoetz2</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1032.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1032.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1032</p>\n\n<hr />\n<p>commit 75c0ddc1d5bc4234164cdeba89ab47bedeed8bdd<br/>\nAuthor: P. Taylor Goetz <ptgoetz@gmail.com><br/>\nDate:   2016-01-20T21:21:12Z</p>\n\n<p>    update REST API docs for <a href=\"https://issues.apache.org/jira/browse/STORM-1452\" title=\"Worker \"profiler\" actions broken by default\" class=\"issue-link\" data-issue-key=\"STORM-1452\"><del>STORM-1452</del></a> (profiling)</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697912/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173363553","html_url":"https://github.com/apache/storm/pull/1012#issuecomment-173363553","issue_url":"https://api.github.com/repos/apache/storm/issues/1012","id":173363553,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM2MzU1Mw==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:24:43Z","updated_at":"2016-01-20T21:24:43Z","author_association":"MEMBER","body":"PR for moving the docs to `asf-site`: https://github.com/apache/storm/pull/1032\n\nThat includes the typo @revans2 mentioned.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173363553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697922","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697922","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697922,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5MjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:24:44Z","updated_at":"2025-01-24T14:43:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#issuecomment-173363553\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#issuecomment-173363553</a></p>\n\n<p>    PR for moving the docs to `asf-site`: <a href=\"https://github.com/apache/storm/pull/1032\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1032</a></p>\n\n<p>    That includes the typo @revans2 mentioned.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700481","html_url":"https://github.com/apache/storm/issues/5303#issuecomment-2612700481","issue_url":"https://api.github.com/repos/apache/storm/issues/5303","id":2612700481,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA0ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:35:52Z","updated_at":"2025-01-24T14:44:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\" class=\"user-hover\" rel=\"ptgoetz\">P. Taylor Goetz</a><br/>\nIs it intentional to apply this to only 2.x?<br/>\nDiverge between 1.x (1.x-branch) and 2.x (master) comes from this issue, and we may have hard time backporting if pull request needs to fix some docs (for example, <a href=\"https://issues.apache.org/jira/browse/STORM-1452\" title=\"Worker \"profiler\" actions broken by default\" class=\"issue-link\" data-issue-key=\"STORM-1452\"><del>STORM-1452</del></a>).</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700481/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173369417","html_url":"https://github.com/apache/storm/pull/1012#issuecomment-173369417","issue_url":"https://api.github.com/repos/apache/storm/issues/1012","id":173369417,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM2OTQxNw==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:42:53Z","updated_at":"2016-01-20T21:42:53Z","author_association":"NONE","body":"> PR for moving the docs to asf-site: #1032\n> \n> That includes the typo @revans2 mentioned.\n\nThanks @ptgoetz !\n\nOK I have rebased the branch to 1.x-branch, and I removed the .md in that process.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173369417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697927","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697927","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697927,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5Mjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:42:54Z","updated_at":"2025-01-24T14:43:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#issuecomment-173369417\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#issuecomment-173369417</a></p>\n\n<p>    > PR for moving the docs to asf-site: #1032<br/>\n    > <br/>\n    > That includes the typo @revans2 mentioned.</p>\n\n<p>    Thanks @ptgoetz !</p>\n\n<p>    OK I have rebased the branch to 1.x-branch, and I removed the .md in that process.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700488","html_url":"https://github.com/apache/storm/issues/5303#issuecomment-2612700488","issue_url":"https://api.github.com/repos/apache/storm/issues/5303","id":2612700488,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA0ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:53:41Z","updated_at":"2025-01-24T14:44:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>It is addressed to 1.x-branch via 93e0d028a588a1c45f8966f7e2fde82f207616eb.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700488/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700498","html_url":"https://github.com/apache/storm/issues/5303#issuecomment-2612700498","issue_url":"https://api.github.com/repos/apache/storm/issues/5303","id":2612700498,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA0OTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:55:50Z","updated_at":"2025-01-24T14:44:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\">ptgoetz</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a>, the removal of the </p>\n{docs}\n<p> directory has been applied to master and 1.x-branch. The content that was there has been migrated to asf-site, where the website content is maintained. This was intentional to avoid maintaining docs in two separate places.</p>\n\n<p>We would like to figure out a way to version documentation so we can publish docs for different releases, but there haven't been any proposals for an approach.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700498/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173375022","html_url":"https://github.com/apache/storm/pull/1024#issuecomment-173375022","issue_url":"https://api.github.com/repos/apache/storm/issues/1024","id":173375022,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM3NTAyMg==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:59:56Z","updated_at":"2016-01-20T21:59:56Z","author_association":"CONTRIBUTOR","body":"It should be also backported to 0.10.x-branch, too.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173375022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702775","html_url":"https://github.com/apache/storm/issues/5317#issuecomment-2612702775","issue_url":"https://api.github.com/repos/apache/storm/issues/5317","id":2612702775,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI3NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T21:59:58Z","updated_at":"2025-01-24T14:45:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1024#issuecomment-173375022\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1024#issuecomment-173375022</a></p>\n\n<p>    It should be also backported to 0.10.x-branch, too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702775/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691029","html_url":"https://github.com/apache/storm/issues/5241#issuecomment-2612691029","issue_url":"https://api.github.com/repos/apache/storm/issues/5241","id":2612691029,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTEwMjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:08:24Z","updated_at":"2025-01-24T14:40:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/991\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/991</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691029/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691034","html_url":"https://github.com/apache/storm/issues/5241#issuecomment-2612691034","issue_url":"https://api.github.com/repos/apache/storm/issues/5241","id":2612691034,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTEwMzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:08:51Z","updated_at":"2025-01-24T14:40:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\">ptgoetz</a>:</i>\n<p>Merged to master/1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612691034/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173378037","html_url":"https://github.com/apache/storm/pull/1016#issuecomment-173378037","issue_url":"https://api.github.com/repos/apache/storm/issues/1016","id":173378037,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM3ODAzNw==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:10:39Z","updated_at":"2016-01-20T22:10:39Z","author_association":"CONTRIBUTOR","body":"@jerrypeng @d2r \nIt was merged only to master (misplaced CHANGELOG, will fix it) but contains bug fixes so I think it should be backported to 1.x-branch as well.\nWhat do you think?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173378037/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697541","html_url":"https://github.com/apache/storm/issues/5285#issuecomment-2612697541","issue_url":"https://api.github.com/repos/apache/storm/issues/5285","id":2612697541,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc1NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:10:40Z","updated_at":"2025-01-24T14:43:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1016#issuecomment-173378037\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1016#issuecomment-173378037</a></p>\n\n<p>    @jerrypeng @d2r <br/>\n    It was merged only to master (misplaced CHANGELOG, will fix it) but contains bug fixes so I think it should be backported to 1.x-branch as well.<br/>\n    What do you think?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697541/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643770","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643770","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643770,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3NzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:14:51Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50328528\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50328528</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The second has a valueOf. Will unify as \"null\", which is clearer.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643770/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697931","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697931","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697931,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:16:36Z","updated_at":"2025-01-24T14:43:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697943","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697943","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697943,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:17:30Z","updated_at":"2025-01-24T14:43:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\">ptgoetz</a>:</i>\n<p>Merged to master and 1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643777","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643777","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643777,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3Nzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:18:55Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50329212\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50329212</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +}\n<p> catch (IOException e) {<br/>\n    +    LOG.error(\"Failed to create dir \" + ret, e);<br/>\n    +    throw e;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    removed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643777/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643780","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643780","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643780,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3ODA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:19:39Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50329442\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50329442</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Actually we want to return null if the test is setting mockedSupervisorLocalDir as \"sth\".</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643780/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173380332","html_url":"https://github.com/apache/storm/pull/1032#issuecomment-173380332","issue_url":"https://api.github.com/repos/apache/storm/issues/1032","id":173380332,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM4MDMzMg==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:19:57Z","updated_at":"2016-01-20T22:19:57Z","author_association":"MEMBER","body":"As this is a documentation-only patch, and was previously reviewed as part of #1012, I'm going to merge this. If there are any objections, we can revert the change later.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173380332/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697947","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697947","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697947,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:19:58Z","updated_at":"2025-01-24T14:43:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1032#issuecomment-173380332\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1032#issuecomment-173380332</a></p>\n\n<p>    As this is a documentation-only patch, and was previously reviewed as part of #1012, I'm going to merge this. If there are any objections, we can revert the change later.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643786","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643786","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643786,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3ODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:21:43Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50329739\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50329739</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}\n<p>    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Then it will need to depend on util.clj. Or I will translate the url-encode within this pull request.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643786/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697955","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697955","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697955,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc5NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:22:50Z","updated_at":"2025-01-24T14:43:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1032\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1032</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697955/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173382241","html_url":"https://github.com/apache/storm/pull/1016#issuecomment-173382241","issue_url":"https://api.github.com/repos/apache/storm/issues/1016","id":173382241,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzM4MjI0MQ==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:27:23Z","updated_at":"2016-01-20T22:27:23Z","author_association":"MEMBER","body":"+1 for backporting to 1.x-branch.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173382241/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697547","html_url":"https://github.com/apache/storm/issues/5285#issuecomment-2612697547","issue_url":"https://api.github.com/repos/apache/storm/issues/5285","id":2612697547,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc1NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:27:27Z","updated_at":"2025-01-24T14:43:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1016#issuecomment-173382241\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1016#issuecomment-173382241</a></p>\n\n<p>    +1 for backporting to 1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697547/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702782","html_url":"https://github.com/apache/storm/issues/5317#issuecomment-2612702782","issue_url":"https://api.github.com/repos/apache/storm/issues/5317","id":2612702782,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI3ODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:31:51Z","updated_at":"2025-01-24T14:45:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Reopening to change fix versions</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702782/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702787","html_url":"https://github.com/apache/storm/issues/5317#issuecomment-2612702787","issue_url":"https://api.github.com/repos/apache/storm/issues/5317","id":2612702787,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI3ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:32:28Z","updated_at":"2025-01-24T14:45:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Backported to 1.x / 0.10.x branch as well.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702787/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643793","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643793","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643793,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3OTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:39:13Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50332475\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50332475</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +}\n<p> catch (IOException e) {<br/>\n    +    LOG.error(\"Failed to create dir \" + ret, e);<br/>\n    +    throw e;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Mark here: may need to file a JIRA.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643793/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643802","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643802","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643802,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4MDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T22:47:55Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50333592\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50333592</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    Fixed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173443829","html_url":"https://github.com/apache/storm/pull/963#issuecomment-173443829","issue_url":"https://api.github.com/repos/apache/storm/issues/963","id":173443829,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzQ0MzgyOQ==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T03:53:39Z","updated_at":"2016-01-21T03:53:39Z","author_association":"CONTRIBUTOR","body":"@ptgoetz @Parth-Brahmbhatt I made a minor fix to exclude checkpoint stream id from the component's input streams. https://github.com/arunmahadevan/storm/commit/596dc3ecafccd4b9e6ec523ef81832f007d1dee6\n\nCould you take a look and merge if things look ok ?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173443829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612626985","html_url":"https://github.com/apache/storm/issues/5014#issuecomment-2612626985","issue_url":"https://api.github.com/repos/apache/storm/issues/5014","id":2612626985,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MjY5ODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T03:53:40Z","updated_at":"2025-01-24T14:12:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/963#issuecomment-173443829\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/963#issuecomment-173443829</a></p>\n\n<p>    @ptgoetz @Parth-Brahmbhatt I made a minor fix to exclude checkpoint stream id from the component's input streams. <a href=\"https://github.com/arunmahadevan/storm/commit/596dc3ecafccd4b9e6ec523ef81832f007d1dee6\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/arunmahadevan/storm/commit/596dc3ecafccd4b9e6ec523ef81832f007d1dee6</a></p>\n\n<p>    Could you take a look and merge if things look ok ?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612626985/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173458467","html_url":"https://github.com/apache/storm/pull/1016#issuecomment-173458467","issue_url":"https://api.github.com/repos/apache/storm/issues/1016","id":173458467,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzQ1ODQ2Nw==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T05:28:51Z","updated_at":"2016-01-21T05:28:51Z","author_association":"CONTRIBUTOR","body":"Ya sure I can back port to the 1.x branch as well\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173458467/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697552","html_url":"https://github.com/apache/storm/issues/5285#issuecomment-2612697552","issue_url":"https://api.github.com/repos/apache/storm/issues/5285","id":2612697552,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc1NTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T05:28:53Z","updated_at":"2025-01-24T14:43:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1016#issuecomment-173458467\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1016#issuecomment-173458467</a></p>\n\n<p>    Ya sure I can back port to the 1.x branch as well</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697552/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612690694","html_url":"https://github.com/apache/storm/issues/5240#issuecomment-2612690694","issue_url":"https://api.github.com/repos/apache/storm/issues/5240","id":2612690694,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTA2OTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T07:18:43Z","updated_at":"2025-01-24T14:40:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hmclouro\">hmclouro</a>:</i>\n<p>Merged into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612690694/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173483216","html_url":"https://github.com/apache/storm/pull/728#issuecomment-173483216","issue_url":"https://api.github.com/repos/apache/storm/issues/728","id":173483216,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzQ4MzIxNg==","user":{"login":"ooasis","id":10720176,"node_id":"MDQ6VXNlcjEwNzIwMTc2","avatar_url":"https://avatars.githubusercontent.com/u/10720176?v=4","gravatar_id":"","url":"https://api.github.com/users/ooasis","html_url":"https://github.com/ooasis","followers_url":"https://api.github.com/users/ooasis/followers","following_url":"https://api.github.com/users/ooasis/following{/other_user}","gists_url":"https://api.github.com/users/ooasis/gists{/gist_id}","starred_url":"https://api.github.com/users/ooasis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ooasis/subscriptions","organizations_url":"https://api.github.com/users/ooasis/orgs","repos_url":"https://api.github.com/users/ooasis/repos","events_url":"https://api.github.com/users/ooasis/events{/privacy}","received_events_url":"https://api.github.com/users/ooasis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T07:32:53Z","updated_at":"2016-01-21T07:32:53Z","author_association":"NONE","body":"With some refactoring, now it can sustain throughput of 20,000 /sec  which it was not able to before.  But latency at 20,000 /sec is still much higher than 3.x (5+ times).  I will continue to investigate.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173483216/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598548","html_url":"https://github.com/apache/storm/issues/4876#issuecomment-2612598548","issue_url":"https://api.github.com/repos/apache/storm/issues/4876","id":2612598548,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTg1NDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T07:32:55Z","updated_at":"2025-01-24T14:00:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hsun-cnnxty commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/728#issuecomment-173483216\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/728#issuecomment-173483216</a></p>\n\n<p>    With some refactoring, now it can sustain throughput of 20,000 /sec  which it was not able to before.  But latency at 20,000 /sec is still much higher than 3.x (5+ times).  I will continue to investigate.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612598548/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173498063","html_url":"https://github.com/apache/storm/pull/986#issuecomment-173498063","issue_url":"https://api.github.com/repos/apache/storm/issues/986","id":173498063,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzQ5ODA2Mw==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T08:38:42Z","updated_at":"2016-01-21T08:38:42Z","author_association":"CONTRIBUTOR","body":"@connieyang the goal of my patch is to entirely replace the existing kafka spout; that includes the Trident API. In order to allow for a smooth migration, as well as avoid any backward compatibility issues, I started writing the code in a new package, completely isolated from the existing one. The goal is to do a complete rewrite. It is my opinion that this task should be properly designed to address future requirements, including proper testing and backwards compatibility. However, some patches have recently come in addressing the JIRAs I had assigned (despite my comments), which will inevitably lead to wasted effort by either one of the parts.\n\nNevertheless, I will do my best to make the most of this situation for the benefit of the community.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173498063/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173585848","html_url":"https://github.com/apache/storm/pull/986#issuecomment-173585848","issue_url":"https://api.github.com/repos/apache/storm/issues/986","id":173585848,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzU4NTg0OA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T14:32:47Z","updated_at":"2016-01-21T14:32:47Z","author_association":"CONTRIBUTOR","body":"@hsun-cnnxty I agree that STORM-1015 looks independent of the other changes happening to support the 0.9 API.  It adds in a new feature for backwards compatibility though.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173585848/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173587159","html_url":"https://github.com/apache/storm/pull/1016#issuecomment-173587159","issue_url":"https://api.github.com/repos/apache/storm/issues/1016","id":173587159,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzU4NzE1OQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T14:37:37Z","updated_at":"2016-01-21T14:37:37Z","author_association":"CONTRIBUTOR","body":"+1 for 1.x\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173587159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697555","html_url":"https://github.com/apache/storm/issues/5285#issuecomment-2612697555","issue_url":"https://api.github.com/repos/apache/storm/issues/5285","id":2612697555,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc1NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T14:37:38Z","updated_at":"2025-01-24T14:43:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1016#issuecomment-173587159\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1016#issuecomment-173587159</a></p>\n\n<p>    +1 for 1.x</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697555/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643804","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643804","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643804,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4MDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T14:44:26Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50408252\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50408252</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Then lets take the model and expand things to be a more complete mock, and we can do this everywhere.  I really would like consistency in how this works for all of the static mocking we do, and the real issue is we need to support returning a null value.</p>\n\n<p>    ```<br/>\npublic static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    public SetMockedSupervisorLocalDir(String dir) </p>\n{\nmockedSupervisorLocalDir = dir;\nisSupervisorLocalDirMocked = true;\n    }\n<p>    @Override<br/>\n    public void close() </p>\n{\nisSupervisorLocalDirMocked = false;\nmockedSupervisorLocalDir = null;\n    }\n<p>}<br/>\nprivate static String mockedSupervisorLocalDir = null;<br/>\nprivate static boolean isSupervisorLocalDirMocked = false;</p>\n\n<p>public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    if (isSupervisorLocalDirMocked) {<br/>\nreturn mockedSupervisorLocalDir;<br/>\n...<br/>\n    ```</p>\n\n\n\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643804/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643805","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643805","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643805,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4MDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T14:45:44Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50408413\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50408413</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) {\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +} else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) {\n    +return artifactsDir;\n    +    } else {\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +return (workerArtifactsRoot(conf, id) + FILE_SEPARATOR + port);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsPidPath(Map conf, String id, Integer port) </p>\n{\n    +return (workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR +  \"worker.pid\");\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(String fname) </p>\n{\n    +String[] subStrings = fname.split(FILE_SEPARATOR); // TODO: does this work well on windows?\n    +String id = subStrings[0];\n    +Integer port = Integer.parseInt(subStrings[1]);\n    +return getLogMetaDataFile(Utils.readStormConfig(), id, port);\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(Map conf, String id, Integer port) </p>\n{\n    +String fname = workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR + \"worker.yaml\";\n    +return new File(fname);\n    +    }\n<p>    +<br/>\n    +    public static File getWorkerDirFromRoot(String logRoot, String id, Integer port) </p>\n{\n    +return new File((logRoot + FILE_SEPARATOR + id + FILE_SEPARATOR + port));\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"workers\");\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf) + FILE_SEPARATOR + id);\n    +    }\n<p>    +<br/>\n    +    public static String workerPidsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"pids\");\n    +    }\n<p>    +<br/>\n    +    public static String workerPidPath(Map conf, String id, String pid) </p>\n{\n    +return (workerPidsRoot(conf, id) + FILE_SEPARATOR + pid);\n    +    }\n<p>    +<br/>\n    +    public static String workerHeartbeatsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"heartbeats\");\n    +    }\n<p>    +<br/>\n    +    public static LocalState workerState(Map conf, String id) throws IOException </p>\n{\n    +return new LocalState(workerHeartbeatsRoot(conf, id));\n    +    }\n<p>    +<br/>\n    +    public static Map overrideLoginConfigWithSystemProperty(Map conf) { // note that we delete the return value<br/>\n    +String loginConfFile = System.getProperty(\"java.security.auth.login.config\");<br/>\n    +if (loginConfFile != null) </p>\n{\n    +     conf.put(\"java.security.auth.login.config\", loginConfFile);\n    +}\n<p>    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    /* TODO: make sure test these two functions in manual tests */<br/>\n    +    public static List<String> getTopoLogsUsers(Map topologyConf) {<br/>\n    +List<String> logsUsers = (List<String>)topologyConf.get(Config.LOGS_USERS);<br/>\n    +List<String> topologyUsers = (List<String>)topologyConf.get(Config.TOPOLOGY_USERS);<br/>\n    +Set<String> mergedUsers = new HashSet<String>();<br/>\n    +if (logsUsers != null) {<br/>\n    +    for (String user : logsUsers) {<br/>\n    +if (user != null) </p>\n{\n    +    mergedUsers.add(user);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +if (topologyUsers != null) {<br/>\n    +    for (String user : topologyUsers) {<br/>\n    +if (user != null) {    +    mergedUsers.add(user);    +}\n<p>    +    }<br/>\n    +}<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Good point I missed that, this is fine.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643805/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173655683","html_url":"https://github.com/apache/storm/pull/963#issuecomment-173655683","issue_url":"https://api.github.com/repos/apache/storm/issues/963","id":173655683,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzY1NTY4Mw==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T18:01:26Z","updated_at":"2016-01-21T18:01:26Z","author_association":"MEMBER","body":"Still +1. Since there was a recent code change we should hold off on merging until there's been enough time for review.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173655683/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612626997","html_url":"https://github.com/apache/storm/issues/5014#issuecomment-2612626997","issue_url":"https://api.github.com/repos/apache/storm/issues/5014","id":2612626997,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MjY5OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T18:01:28Z","updated_at":"2025-01-24T14:12:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/963#issuecomment-173655683\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/963#issuecomment-173655683</a></p>\n\n<p>    Still +1. Since there was a recent code change we should hold off on merging until there's been enough time for review.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612626997/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612621259","html_url":"https://github.com/apache/storm/issues/4979#issuecomment-2612621259","issue_url":"https://api.github.com/repos/apache/storm/issues/4979","id":2612621259,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MjEyNTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T19:12:14Z","updated_at":"2025-01-24T14:09:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cburch\">cburch</a>:</i>\n<p>The 0.10.0 jars referenced aren't using the code in the 0.10.x branch e.g. <a href=\"https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/generated/ClusterSummary.java#L72\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/generated/ClusterSummary.java#L72</a> the pushed jars are missing the ClusterSummary.nimbuses field.  This results in any call to <br/>\nbacktype.storm.generated.Nimbus.Client.getClusterInfo() failing because it doesn't expect the nimbuses field and is instead looking for the nimbus_uptime_secs field mentioned.  There could be other issues but this was the first one I ran into attempting to upgrade our deployment.</p>\n\n<p>Any chance the latest 0.10.x branch can be pushed or am I missing something?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612621259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643807","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643807","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643807,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T19:55:14Z","updated_at":"2025-01-24T14:19:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50453900\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50453900</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -41,291 +38,18 @@<br/>\n       (dofor <span class=\"error\">&#91;f (seq (.getFields Config))&#93;</span><br/>\n      (.get f nil)))</p>\n\n<p>    -<br/>\n    +;; TODO this function and its callings will be replace when nimbus and supervisor move to Java<br/>\n     (defn cluster-mode<br/>\n       <span class=\"error\">&#91;conf & args&#93;</span><br/>\n       (keyword (conf STORM-CLUSTER-MODE)))</p>\n\n<p>    -(defn local-mode?</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let <span class=\"error\">&#91;mode (conf STORM-CLUSTER-MODE)&#93;</span></li>\n\t<li>(condp = mode</li>\n\t<li>\"local\" true</li>\n\t<li>\"distributed\" false</li>\n\t<li>(throw (IllegalArgumentException.</li>\n\t<li>(str \"Illegal cluster mode in conf: \" mode))))))<br/>\n    -<br/>\n     (defn sampling-rate<br/>\n       <span class=\"error\">&#91;conf&#93;</span><br/>\n       (->> (conf TOPOLOGY-STATS-SAMPLE-RATE)</li>\n\t<li>(/ 1)</li>\n\t<li>int))<br/>\n    +    (/ 1)<br/>\n    +    int))</li>\n</ul>\n\n\n<p>    +;; TODO this function together with sampling-rate are to be replaced with Java version when util.clj is in<br/>\n     (defn mk-stats-sampler<br/>\n       <span class=\"error\">&#91;conf&#93;</span></p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(even-sampler (sampling-rate conf)))<br/>\n    -<br/>\n    -(defn read-default-config</li>\n\t<li>[]</li>\n\t<li>(clojurify-structure (Utils/readDefaultConfig)))<br/>\n    -<br/>\n    -(defn validate-configs-with-schemas</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(ConfigValidation/validateFields conf))<br/>\n    -<br/>\n    -(defn read-storm-config</li>\n\t<li>[]</li>\n\t<li>(let <span class=\"error\">&#91;conf (clojurify-structure (Utils/readStormConfig))&#93;</span></li>\n\t<li>(validate-configs-with-schemas conf)</li>\n\t<li>conf))<br/>\n    -<br/>\n    -(defn read-yaml-config</li>\n\t<li>(<span class=\"error\">&#91;name must-exist&#93;</span></li>\n\t<li>(let <span class=\"error\">&#91;conf (clojurify-structure (Utils/findAndReadConfigFile name must-exist))&#93;</span></li>\n\t<li>(validate-configs-with-schemas conf)</li>\n\t<li>conf))</li>\n\t<li>(<span class=\"error\">&#91;name&#93;</span></li>\n\t<li>(read-yaml-config true)))<br/>\n    -<br/>\n    -(defn absolute-storm-local-dir <span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let [storm-home (System/getProperty \"storm.home\")</li>\n\t<li>path (conf STORM-LOCAL-DIR)]</li>\n\t<li>(if path</li>\n\t<li>(if (is-absolute-path? path) path (str storm-home file-path-separator path))</li>\n\t<li>(str storm-home file-path-separator \"storm-local\"))))<br/>\n    -<br/>\n    -(def LOG-DIR</li>\n\t<li>(.getCanonicalPath</li>\n\t<li>(clojure.java.io/file (or (System/getProperty \"storm.log.dir\")</li>\n\t<li>(get (read-storm-config) \"storm.log.dir\")</li>\n\t<li>(str (System/getProperty \"storm.home\") file-path-separator \"logs\")))))<br/>\n    -<br/>\n    -(defn absolute-healthcheck-dir <span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let [storm-home (System/getProperty \"storm.home\")</li>\n\t<li>path (conf STORM-HEALTH-CHECK-DIR)]</li>\n\t<li>(if path</li>\n\t<li>(if (is-absolute-path? path) path (str storm-home file-path-separator path))</li>\n\t<li>(str storm-home file-path-separator \"healthchecks\"))))<br/>\n    -<br/>\n    -(defn master-local-dir</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let <span class=\"error\">&#91;ret (str (absolute-storm-local-dir conf) file-path-separator \"nimbus\")&#93;</span></li>\n\t<li>(FileUtils/forceMkdir (File. ret))</li>\n\t<li>ret))<br/>\n    -<br/>\n    -(defn master-stormjar-key</li>\n\t<li><span class=\"error\">&#91;topology-id&#93;</span></li>\n\t<li>(str topology-id \"-stormjar.jar\"))<br/>\n    -<br/>\n    -(defn master-stormcode-key</li>\n\t<li><span class=\"error\">&#91;topology-id&#93;</span></li>\n\t<li>(str topology-id \"-stormcode.ser\"))<br/>\n    -<br/>\n    -(defn master-stormconf-key</li>\n\t<li><span class=\"error\">&#91;topology-id&#93;</span></li>\n\t<li>(str topology-id \"-stormconf.ser\"))<br/>\n    -<br/>\n    -(defn master-stormdist-root</li>\n\t<li>(<span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(str (master-local-dir conf) file-path-separator \"stormdist\"))</li>\n\t<li>(<span class=\"error\">&#91;conf storm-id&#93;</span></li>\n\t<li>(str (master-stormdist-root conf) file-path-separator storm-id)))<br/>\n    -<br/>\n    -(defn master-tmp-dir</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let <span class=\"error\">&#91;ret (str (master-local-dir conf) file-path-separator \"tmp\")&#93;</span></li>\n\t<li>(FileUtils/forceMkdir (File. ret))</li>\n\t<li>ret ))<br/>\n    -<br/>\n    -(defn read-supervisor-storm-conf-given-path</li>\n\t<li><span class=\"error\">&#91;conf stormconf-path&#93;</span></li>\n\t<li>(merge conf (clojurify-structure (Utils/fromCompressedJsonConf (FileUtils/readFileToByteArray (File. stormconf-path))))))<br/>\n    -<br/>\n    -(defn master-storm-metafile-path <span class=\"error\">&#91;stormroot &#93;</span></li>\n\t<li>(str stormroot file-path-separator \"storm-code-distributor.meta\"))<br/>\n    -<br/>\n    -(defn master-stormjar-path</li>\n\t<li><span class=\"error\">&#91;stormroot&#93;</span></li>\n\t<li>(str stormroot file-path-separator \"stormjar.jar\"))<br/>\n    -<br/>\n    -(defn master-stormcode-path</li>\n\t<li><span class=\"error\">&#91;stormroot&#93;</span></li>\n\t<li>(str stormroot file-path-separator \"stormcode.ser\"))<br/>\n    -<br/>\n    -(defn master-stormconf-path</li>\n\t<li><span class=\"error\">&#91;stormroot&#93;</span></li>\n\t<li>(str stormroot file-path-separator \"stormconf.ser\"))<br/>\n    -<br/>\n    -(defn master-inbox</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let <span class=\"error\">&#91;ret (str (master-local-dir conf) file-path-separator \"inbox\")&#93;</span></li>\n\t<li>(FileUtils/forceMkdir (File. ret))</li>\n\t<li>ret ))<br/>\n    -<br/>\n    -(defn master-inimbus-dir</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(str (master-local-dir conf) file-path-separator \"inimbus\"))<br/>\n    -<br/>\n    -(defn supervisor-local-dir</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let <span class=\"error\">&#91;ret (str (absolute-storm-local-dir conf) file-path-separator \"supervisor\")&#93;</span></li>\n\t<li>(FileUtils/forceMkdir (File. ret))</li>\n\t<li>ret))<br/>\n    -<br/>\n    -(defn supervisor-isupervisor-dir</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(str (supervisor-local-dir conf) file-path-separator \"isupervisor\"))<br/>\n    -<br/>\n    -(defn supervisor-stormdist-root</li>\n\t<li>(<span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(str (supervisor-local-dir conf) file-path-separator \"stormdist\"))</li>\n\t<li>(<span class=\"error\">&#91;conf storm-id&#93;</span></li>\n\t<li>(str (supervisor-stormdist-root conf) file-path-separator (url-encode storm-id))))<br/>\n    -<br/>\n    -(defn supervisor-stormjar-path <span class=\"error\">&#91;stormroot&#93;</span></li>\n\t<li>(str stormroot file-path-separator \"stormjar.jar\"))<br/>\n    -<br/>\n    -(defn supervisor-storm-metafile-path <span class=\"error\">&#91;stormroot&#93;</span></li>\n\t<li>(str stormroot file-path-separator \"storm-code-distributor.meta\"))<br/>\n    -<br/>\n    -(defn supervisor-stormcode-path</li>\n\t<li><span class=\"error\">&#91;stormroot&#93;</span></li>\n\t<li>(str stormroot file-path-separator \"stormcode.ser\"))<br/>\n    -<br/>\n    -(defn supervisor-stormconf-path</li>\n\t<li><span class=\"error\">&#91;stormroot&#93;</span></li>\n\t<li>(str stormroot file-path-separator \"stormconf.ser\"))<br/>\n    -<br/>\n    -(defn supervisor-tmp-dir</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let <span class=\"error\">&#91;ret (str (supervisor-local-dir conf) file-path-separator \"tmp\")&#93;</span></li>\n\t<li>(FileUtils/forceMkdir (File. ret))</li>\n\t<li>ret ))<br/>\n    -<br/>\n    -(defn supervisor-storm-resources-path</li>\n\t<li><span class=\"error\">&#91;stormroot&#93;</span></li>\n\t<li>(str stormroot file-path-separator RESOURCES-SUBDIR))<br/>\n    -<br/>\n    -(defn ^LocalState supervisor-state</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(LocalState. (str (supervisor-local-dir conf) file-path-separator \"localstate\")))<br/>\n    -<br/>\n    -(defn ^LocalState nimbus-topo-history-state</li>\n\t<li><span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(LocalState. (str (master-local-dir conf) file-path-separator \"history\")))<br/>\n    -<br/>\n    -(defn read-supervisor-storm-conf</li>\n\t<li><span class=\"error\">&#91;conf storm-id&#93;</span></li>\n\t<li>(let [stormroot (supervisor-stormdist-root conf storm-id)</li>\n\t<li>conf-path (supervisor-stormconf-path stormroot)]</li>\n\t<li>(read-supervisor-storm-conf-given-path conf conf-path)))<br/>\n    -<br/>\n    -(defn read-supervisor-topology</li>\n\t<li><span class=\"error\">&#91;conf storm-id&#93;</span></li>\n\t<li>(let [stormroot (supervisor-stormdist-root conf storm-id)</li>\n\t<li>topology-path (supervisor-stormcode-path stormroot)]</li>\n\t<li>(Utils/deserialize (FileUtils/readFileToByteArray (File. topology-path)) StormTopology)</li>\n\t<li>))<br/>\n    -<br/>\n    -(defn worker-user-root <span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(str (absolute-storm-local-dir conf) \"/workers-users\"))<br/>\n    -<br/>\n    -(defn worker-user-file <span class=\"error\">&#91;conf worker-id&#93;</span></li>\n\t<li>(str (worker-user-root conf) \"/\" worker-id))<br/>\n    -<br/>\n    -(defn get-worker-user <span class=\"error\">&#91;conf worker-id&#93;</span></li>\n\t<li>(log-message \"GET worker-user \" worker-id)</li>\n\t<li>(try</li>\n\t<li>(str/trim (slurp (worker-user-file conf worker-id)))</li>\n\t<li>(catch IOException e</li>\n\t<li>(log-warn-error e \"Failed to get worker user for \" worker-id \".\")</li>\n\t<li>nil</li>\n\t<li>)))<br/>\n    -<br/>\n    -(defn get-id-from-blob-key</li>\n\t<li><span class=\"error\">&#91;key&#93;</span></li>\n\t<li>(if-let <span class=\"error\">&#91;groups (re-find #\"^(.*)((-stormjar\\.jar)|(-stormcode\\.ser)|(-stormconf\\.ser))$\" key)&#93;</span></li>\n\t<li>(nth groups 1)))<br/>\n    -<br/>\n    -(defn set-worker-user! <span class=\"error\">&#91;conf worker-id user&#93;</span></li>\n\t<li>(log-message \"SET worker-user \" worker-id \" \" user)</li>\n\t<li>(let <span class=\"error\">&#91;file (worker-user-file conf worker-id)&#93;</span></li>\n\t<li>(.mkdirs (.getParentFile (File. file)))</li>\n\t<li>(spit (worker-user-file conf worker-id) user)))<br/>\n    -<br/>\n    -(defn remove-worker-user! <span class=\"error\">&#91;conf worker-id&#93;</span></li>\n\t<li>(log-message \"REMOVE worker-user \" worker-id)</li>\n\t<li>(.delete (File. (worker-user-file conf worker-id))))<br/>\n    -<br/>\n    -(defn worker-artifacts-root</li>\n\t<li>(<span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(let <span class=\"error\">&#91;workers-artifacts-dir (conf STORM-WORKERS-ARTIFACTS-DIR)&#93;</span></li>\n\t<li>(if workers-artifacts-dir</li>\n\t<li>(if (is-absolute-path? workers-artifacts-dir)</li>\n\t<li>workers-artifacts-dir</li>\n\t<li>(str LOG-DIR file-path-separator workers-artifacts-dir))</li>\n\t<li>(str LOG-DIR file-path-separator \"workers-artifacts\"))))</li>\n\t<li>(<span class=\"error\">&#91;conf id&#93;</span></li>\n\t<li>(str (worker-artifacts-root conf) file-path-separator id))</li>\n\t<li>(<span class=\"error\">&#91;conf id port&#93;</span></li>\n\t<li>(str (worker-artifacts-root conf id) file-path-separator port)))<br/>\n    -<br/>\n    -(defn worker-artifacts-pid-path</li>\n\t<li><span class=\"error\">&#91;conf id port&#93;</span></li>\n\t<li>(str (worker-artifacts-root conf id port) file-path-separator \"worker.pid\"))<br/>\n    -<br/>\n    -(defn get-log-metadata-file</li>\n\t<li>(<span class=\"error\">&#91;fname&#93;</span></li>\n\t<li>(let [<span class=\"error\">&#91;id port & _&#93;</span> (str/split fname (re-pattern file-path-separator))]</li>\n\t<li>(get-log-metadata-file (read-storm-config) id port)))</li>\n\t<li>(<span class=\"error\">&#91;conf id port&#93;</span></li>\n\t<li>(clojure.java.io/file (str (worker-artifacts-root conf id) file-path-separator port file-path-separator) \"worker.yaml\")))<br/>\n    -<br/>\n    -(defn get-worker-dir-from-root</li>\n\t<li><span class=\"error\">&#91;log-root id port&#93;</span></li>\n\t<li>(clojure.java.io/file (str log-root file-path-separator id file-path-separator port)))<br/>\n    -<br/>\n    -(defn worker-root</li>\n\t<li>(<span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(str (absolute-storm-local-dir conf) file-path-separator \"workers\"))</li>\n\t<li>(<span class=\"error\">&#91;conf id&#93;</span></li>\n\t<li>(str (worker-root conf) file-path-separator id)))<br/>\n    -<br/>\n    -(defn worker-pids-root</li>\n\t<li><span class=\"error\">&#91;conf id&#93;</span></li>\n\t<li>(str (worker-root conf id) file-path-separator \"pids\"))<br/>\n    -<br/>\n    -(defn worker-pid-path</li>\n\t<li><span class=\"error\">&#91;conf id pid&#93;</span></li>\n\t<li>(str (worker-pids-root conf id) file-path-separator pid))<br/>\n    -<br/>\n    -(defn worker-heartbeats-root</li>\n\t<li><span class=\"error\">&#91;conf id&#93;</span></li>\n\t<li>(str (worker-root conf id) file-path-separator \"heartbeats\"))<br/>\n    -<br/>\n    -;; workers heartbeat here with pid and timestamp<br/>\n    -;; if supervisor stops receiving heartbeat, it kills and restarts the process<br/>\n    -;; in local mode, keep a global map of ids to threads for simulating process management<br/>\n    -(defn ^LocalState worker-state</li>\n\t<li><span class=\"error\">&#91;conf id&#93;</span></li>\n\t<li>(LocalState. (worker-heartbeats-root conf id)))<br/>\n    -<br/>\n    -(defn override-login-config-with-system-property <span class=\"error\">&#91;conf&#93;</span></li>\n\t<li>(if-let <span class=\"error\">&#91;login_conf_file (System/getProperty \"java.security.auth.login.config\")&#93;</span></li>\n\t<li>(assoc conf \"java.security.auth.login.config\" login_conf_file)</li>\n\t<li>conf))<br/>\n    -<br/>\n    -(defn get-topo-logs-users</li>\n\t<li><span class=\"error\">&#91;topology-conf&#93;</span></li>\n\t<li>(sort (distinct (remove nil?</li>\n\t<li>(concat</li>\n\t<li>(topology-conf LOGS-USERS)</li>\n\t<li>(topology-conf TOPOLOGY-USERS))))))<br/>\n    -<br/>\n    -(defn get-topo-logs-groups</li>\n\t<li><span class=\"error\">&#91;topology-conf&#93;</span></li>\n\t<li>(sort (distinct (remove nil?</li>\n\t<li>(concat</li>\n\t<li>(topology-conf LOGS-GROUPS)</li>\n\t<li>(topology-conf TOPOLOGY-GROUPS))))))<br/>\n    -<br/>\n    +  (even-sampler (sampling-rate conf)))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Please don't remove the newline from this file.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643807/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643813","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643813","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643813,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4MTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:06:43Z","updated_at":"2025-01-24T14:19:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50455607\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50455607</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,678 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +import java.net.URLEncoder;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +<br/>\n    +    public static String getLogDir() {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) {<br/>\n    +    dir = System.getProperty(\"storm.log.dir\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we avoid calling System.getProperty twice by assigning at declaration of dir?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643813/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643816","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643816","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643816,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4MTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:09:18Z","updated_at":"2025-01-24T14:19:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50455998\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50455998</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,678 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +import java.net.URLEncoder;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +<br/>\n    +    public static String getLogDir() {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    No need for nested if here. Make an else-if and an else.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643816/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643821","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643821","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643821,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4MjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:22:01Z","updated_at":"2025-01-24T14:19:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50457931\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50457931</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,678 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +import java.net.URLEncoder;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +<br/>\n    +    public static String getLogDir() {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    return new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we move this declaration just above SetMockedStormConfig and give it proper spacing?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643821/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643829","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643829","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643829,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4Mjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:29:55Z","updated_at":"2025-01-24T14:19:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50459185\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50459185</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,678 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +import java.net.URLEncoder;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +<br/>\n    +    public static String getLogDir() {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    return new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Should we maybe call this MockedStormConfigGuard or something with 'guard' in it? It would be nice to directly indicate that this object is an RAII-style guard.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173699059","html_url":"https://github.com/apache/storm/pull/1030#issuecomment-173699059","issue_url":"https://api.github.com/repos/apache/storm/issues/1030","id":173699059,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzY5OTA1OQ==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:31:05Z","updated_at":"2016-01-21T20:31:05Z","author_association":"NONE","body":"We have a separate implementation for mocking static methods that we think will also allow things like Mockito to track calls, arguments, and things of that sort. I will post a link when I have an example.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173699059/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643837","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643837","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643837,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4Mzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:31:06Z","updated_at":"2025-01-24T14:19:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#issuecomment-173699059\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#issuecomment-173699059</a></p>\n\n<p>    We have a separate implementation for mocking static methods that we think will also allow things like Mockito to track calls, arguments, and things of that sort. I will post a link when I have an example.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643841","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643841","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643841,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:42:30Z","updated_at":"2025-01-24T14:19:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50460728\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50460728</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,678 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +import java.net.URLEncoder;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +<br/>\n    +    public static String getLogDir() {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    return new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = (String)conf.get(Config.STORM_HEALTH_CHECK_DIR);<br/>\n    +if (healthCheckDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Same comments as I made above apply here, and everywhere you use this trick.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643841/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643847","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643847","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643847,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:45:34Z","updated_at":"2025-01-24T14:19:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50461090\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50461090</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,678 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +import java.net.URLEncoder;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +<br/>\n    +    public static String getLogDir() {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    return new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = (String)conf.get(Config.STORM_HEALTH_CHECK_DIR);<br/>\n    +if (healthCheckDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}\n<p>    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {<br/>\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Double parens?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643847/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173704553","html_url":"https://github.com/apache/storm/pull/1030#issuecomment-173704553","issue_url":"https://api.github.com/repos/apache/storm/issues/1030","id":173704553,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzcwNDU1Mw==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:53:26Z","updated_at":"2016-01-22T19:15:32Z","author_association":"NONE","body":"> I will post a link when I have an example.\n\nnew [staticmocking](https://github.com/d2r/storm/tree/56d48faac918123af46f1e021e38549fa6a4cf6c/storm-core/src/jvm/org/apache/storm/testing/staticmocking) package\n\nSee example methods under test: [Utils](https://github.com/d2r/storm/blob/56d48faac918123af46f1e021e38549fa6a4cf6c/storm-core/src/jvm/org/apache/storm/utils/Utils.java)\n\nHere is a (clojure) example of [usage](https://github.com/d2r/storm/blob/56d48faac918123af46f1e021e38549fa6a4cf6c/storm-core/test/clj/org/apache/storm/logviewer_test.clj#L372-L387). This will all eventually be Java, and it would use a try-with-resources syntax in place of the `with-open`.\n\nIf this seems like a good pattern to follow, we can add it to the [migration guidelines](https://cwiki.apache.org/confluence/display/STORM/Java+Migration+Guidelines).\n\nEDIT to fix Utils link\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173704553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643854","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643854","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643854,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:53:27Z","updated_at":"2025-01-24T14:19:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#issuecomment-173704553\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#issuecomment-173704553</a></p>\n\n<p>    > I will post a link when I have an example.</p>\n\n<p>    new <span class=\"error\">&#91;staticmocking&#93;</span>(<a href=\"https://github.com/d2r/storm/tree/56d48faac918123af46f1e021e38549fa6a4cf6c/storm-core/src/jvm/org/apache/storm/testing/staticmocking\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/d2r/storm/tree/56d48faac918123af46f1e021e38549fa6a4cf6c/storm-core/src/jvm/org/apache/storm/testing/staticmocking</a>) package</p>\n\n<p>    See example methods under test: <span class=\"error\">&#91;Utils&#93;</span>(<a href=\"https://github.com/d2r/storm/blob/56d48faac918123af46f1e021e38549fa6a4cf6c/external/storm-hbase/src/main/java/org/apache/storm/hbase/common/Utils.java\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/d2r/storm/blob/56d48faac918123af46f1e021e38549fa6a4cf6c/external/storm-hbase/src/main/java/org/apache/storm/hbase/common/Utils.java</a>)</p>\n\n<p>    Here is a (clojure) example of <span class=\"error\">&#91;usage&#93;</span>(<a href=\"https://github.com/d2r/storm/blob/56d48faac918123af46f1e021e38549fa6a4cf6c/storm-core/test/clj/org/apache/storm/logviewer_test.clj#L372-L387\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/d2r/storm/blob/56d48faac918123af46f1e021e38549fa6a4cf6c/storm-core/test/clj/org/apache/storm/logviewer_test.clj#L372-L387</a>). This will all eventually be Java, and it would use a try-with-resources syntax in place of the `with-open`.</p>\n\n<p>    If this seems like a good pattern to follow, we can add it to the <span class=\"error\">&#91;migration guidelines&#93;</span>(<a href=\"https://cwiki.apache.org/confluence/display/STORM/Java+Migration+Guidelines\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://cwiki.apache.org/confluence/display/STORM/Java+Migration+Guidelines</a>).</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643860","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643860","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643860,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T20:55:39Z","updated_at":"2025-01-24T14:19:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50462413\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50462413</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,678 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +import java.net.URLEncoder;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +<br/>\n    +    public static String getLogDir() {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    return new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = (String)conf.get(Config.STORM_HEALTH_CHECK_DIR);<br/>\n    +if (healthCheckDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf));<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}\n<p>    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + URLEncoder.encode(stormId, \"UTF-8\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This pattern is repeated many, many times in this file. Can we move this to its own method and call that from here?<br/>\n    ```<br/>\n    public static String supervisorStormBasePath(String stormRoot) {<br/>\n    String ret = \"\";<br/>\n    if (stormRoot != null) </p>\n{\nret = stormRoot;\n    }\n<p>    return ret + FILE_SEPARATOR;<br/>\n}</p>\n\n<p>    public static String supervisorStormJarPath(String stormRoot) </p>\n{\nreturn supervisorStormBasePath(stormRoot) + \"stormjar.jar\";\n    }\n<p>    ...<br/>\n    ```</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643860/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612470116","html_url":"https://github.com/apache/storm/issues/4191#issuecomment-2612470116","issue_url":"https://api.github.com/repos/apache/storm/issues/4191","id":2612470116,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0NzAxMTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T21:36:12Z","updated_at":"2025-01-24T12:55:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jkaria commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/215#discussion_r50468175\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/215#discussion_r50468175</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/backtype/storm/ui/core.clj &#8212;<br/>\n    @@ -47,33 +52,19 @@<br/>\n  <span class=\"error\">&#91;~nimbus-sym (*STORM-CONF* NIMBUS-HOST) (*STORM-CONF* NIMBUS-THRIFT-PORT)&#93;</span><br/>\n  ~@body))</p>\n\n<p>    -(defn authorized-ui-user?</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><span class=\"error\">&#91;user conf topology-conf&#93;</span></li>\n\t<li>(let [ui-users (concat (conf UI-USERS)</li>\n\t<li>(conf NIMBUS-ADMINS)</li>\n\t<li>(topology-conf UI-USERS)</li>\n\t<li>(topology-conf TOPOLOGY-USERS))]</li>\n\t<li>(or (blank? (conf UI-FILTER))</li>\n\t<li>(and (not (blank? user))</li>\n\t<li>(some #(= % user) ui-users)))))<br/>\n    -<br/>\n    -(defn assert-authorized-ui-user</li>\n\t<li><span class=\"error\">&#91;user conf topology-conf&#93;</span></li>\n\t<li>(if (not (authorized-ui-user? user conf topology-conf))</li>\n\t<li>;;TODO need a better exception here so the UI can appear better</li>\n\t<li>(throw (RuntimeException. (str \"User \" user \" is not authorized.\")))))<br/>\n    -<br/>\n    <del>(defn</del> ui-actions-enabled?</li>\n\t<li>[]</li>\n\t<li>(= \"true\" (lower-case (<b>STORM-CONF</b> UI-ACTIONS-ENABLED))))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    with this change shouldn't the config line for this in defaults.yaml removed?</p>\n\n<p>    ui.actions.enabled: true<br/>\n    <a href=\"https://github.com/apache/storm/blob/master/conf/defaults.yaml#L87\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/conf/defaults.yaml#L87</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612470116/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643865","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643865","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643865,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM4NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T21:36:43Z","updated_at":"2025-01-24T14:19:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50468248\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50468248</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,678 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +import java.net.URLEncoder;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +<br/>\n    +    public static String getLogDir() {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    return new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String)conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = (String)conf.get(Config.STORM_HEALTH_CHECK_DIR);<br/>\n    +if (healthCheckDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf));<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + URLEncoder.encode(stormId, \"UTF-8\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) {<br/>\n    +    LOG.error(\"Failed to get worker user for {}.\", workerId);<br/>\n    +    return null;<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +final String STORM_JAR_SUFFIX = \"-stormjar.jar\";<br/>\n    +final String STORM_CODE_SUFFIX = \"-stormcode.ser\";<br/>\n    +final String STORM_CONF_SUFFIX = \"-stormconf.ser\";<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(STORM_JAR_SUFFIX)) </p>\n{\n    +    ret = key.substring(0, key.length() - STORM_JAR_SUFFIX.length());\n    +}\n<p> else if (key.endsWith(STORM_CODE_SUFFIX)) </p>\n{\n    +    ret = key.substring(0, key.length() - STORM_CODE_SUFFIX.length());\n    +}\n<p> else if (key.endsWith(STORM_CONF_SUFFIX)) </p>\n{\n    +    ret = key.substring(0, key.length() - STORM_CONF_SUFFIX.length());\n    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) </p>\n{\n    +    return (getLogDir() + FILE_SEPARATOR + \"workers-artifacts\");\n    +}\n<p> else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) </p>\n{\n    +return artifactsDir;\n    +    }\n<p> else </p>\n{\n    +return (getLogDir() + FILE_SEPARATOR + artifactsDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    // if the mockedWorkerArtifactsRoot is set, return its value no matter what\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    // if the mockedWorkerArtifactsRoot is set, return its value no matter what    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf, id) + FILE_SEPARATOR + port);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsPidPath(Map conf, String id, Integer port) </p>\n{\n    +return (workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR +  \"worker.pid\");\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(String fname) </p>\n{\n    +String[] subStrings = fname.split(FILE_SEPARATOR); // TODO: does this work well on windows?\n    +String id = subStrings[0];\n    +Integer port = Integer.parseInt(subStrings[1]);\n    +return getLogMetaDataFile(Utils.readStormConfig(), id, port);\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(Map conf, String id, Integer port) </p>\n{\n    +String fname = workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR + \"worker.yaml\";\n    +return new File(fname);\n    +    }\n<p>    +<br/>\n    +    public static File getWorkerDirFromRoot(String logRoot, String id, Integer port) </p>\n{\n    +return new File((logRoot + FILE_SEPARATOR + id + FILE_SEPARATOR + port));\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"workers\");\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf) + FILE_SEPARATOR + id);\n    +    }\n<p>    +<br/>\n    +    public static String workerPidsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"pids\");\n    +    }\n<p>    +<br/>\n    +    public static String workerPidPath(Map conf, String id, String pid) </p>\n{\n    +return (workerPidsRoot(conf, id) + FILE_SEPARATOR + pid);\n    +    }\n<p>    +<br/>\n    +    public static String workerHeartbeatsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"heartbeats\");\n    +    }\n<p>    +<br/>\n    +    public static LocalState workerState(Map conf, String id) throws IOException </p>\n{\n    +return new LocalState(workerHeartbeatsRoot(conf, id));\n    +    }\n<p>    +<br/>\n    +    public static Map overrideLoginConfigWithSystemProperty(Map conf) { // note that we delete the return value<br/>\n    +String loginConfFile = System.getProperty(\"java.security.auth.login.config\");<br/>\n    +if (loginConfFile != null) </p>\n{\n    +     conf.put(\"java.security.auth.login.config\", loginConfFile);\n    +}\n<p>    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    /* TODO: make sure test these two functions in manual tests */<br/>\n    +    public static List<String> getTopoLogsUsers(Map topologyConf) {<br/>\n    +List<String> logsUsers = (List<String>)topologyConf.get(Config.LOGS_USERS);<br/>\n    +List<String> topologyUsers = (List<String>)topologyConf.get(Config.TOPOLOGY_USERS);<br/>\n    +Set<String> mergedUsers = new HashSet<String>();<br/>\n    +if (logsUsers != null) {<br/>\n    +    for (String user : logsUsers) {<br/>\n    +if (user != null) </p>\n{\n    +    mergedUsers.add(user);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +if (topologyUsers != null) {<br/>\n    +    for (String user : topologyUsers) {<br/>\n    +if (user != null) {    +    mergedUsers.add(user);    +}\n<p>    +    }<br/>\n    +}<br/>\n    +List<String> ret = new ArrayList<String>(mergedUsers);<br/>\n    +Collections.sort(ret);<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getTopoLogsGroups(Map topologyConf) {<br/>\n    +List<String> logsGroups = (List<String>)topologyConf.get(Config.LOGS_GROUPS);<br/>\n    +List<String> topologyGroups = (List<String>)topologyConf.get(Config.TOPOLOGY_GROUPS);<br/>\n    +Set<String> mergedGroups = new HashSet<String>();<br/>\n    +if (logsGroups != null) {<br/>\n    +    for (String group : logsGroups) {<br/>\n    +if (group != null) </p>\n{\n    +    mergedGroups.add(group);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +if (topologyGroups != null) {<br/>\n    +    for (String group : topologyGroups) {<br/>\n    +if (group != null) {    +    mergedGroups.add(group);    +}\n<p>    +    }<br/>\n    +}<br/>\n    +List<String> ret = new ArrayList<String>(mergedGroups);<br/>\n    +Collections.sort(ret);<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +}<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Newline!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643865/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612621266","html_url":"https://github.com/apache/storm/issues/4979#issuecomment-2612621266","issue_url":"https://api.github.com/repos/apache/storm/issues/4979","id":2612621266,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MjEyNjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T22:38:01Z","updated_at":"2025-01-24T14:09:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=erikdw\">erikdw</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cburch\" class=\"user-hover\" rel=\"cburch\">caleb burch</a>:  0.10.x and 0.10.0 don't have <tt>ClusterSummary.nimbuses</tt>:</p>\n<ul>\n\t<li><a href=\"https://github.com/apache/storm/blob/v0.10.0/storm-core/src/jvm/backtype/storm/generated/ClusterSummary.java#L68-L70\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/v0.10.0/storm-core/src/jvm/backtype/storm/generated/ClusterSummary.java#L68-L70</a></li>\n\t<li><a href=\"https://github.com/apache/storm/blob/0.10.x-branch/storm-core/src/jvm/backtype/storm/generated/ClusterSummary.java#L68-L70\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/0.10.x-branch/storm-core/src/jvm/backtype/storm/generated/ClusterSummary.java#L68-L70</a></li>\n</ul>\n\n\n<p>That field <a href=\"https://github.com/apache/storm/commit/4502bffbe3f9b4cd3674a56afbda1bb115cec239\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">landed into master</a> and wasn't put into 0.10.0.  I believe it's part of the HA Nimbus support that is in 0.11.x.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612621266/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612621270","html_url":"https://github.com/apache/storm/issues/4979#issuecomment-2612621270","issue_url":"https://api.github.com/repos/apache/storm/issues/4979","id":2612621270,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MjEyNzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T22:39:01Z","updated_at":"2025-01-24T14:09:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cburch\" class=\"user-hover\" rel=\"cburch\">caleb burch</a> <br/>\nIt's just a difference between vanilla 0.10.0 and HDP.<br/>\nHDP includes nimbus H/A feature which is merged to 1.0.0 for Apache Storm and not released yet. So, it's not a problem with Apache Storm, but maybe an issue with HDP.<br/>\nCould you move this issue to <a href=\"http://hortonworks.com/community/\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">Hortonworks Community Connection</a>?<br/>\nThanks!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612621270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173744934","html_url":"https://github.com/apache/storm/pull/986#issuecomment-173744934","issue_url":"https://api.github.com/repos/apache/storm/issues/986","id":173744934,"node_id":"MDEyOklzc3VlQ29tbWVudDE3Mzc0NDkzNA==","user":{"login":"connieyang","id":810950,"node_id":"MDQ6VXNlcjgxMDk1MA==","avatar_url":"https://avatars.githubusercontent.com/u/810950?v=4","gravatar_id":"","url":"https://api.github.com/users/connieyang","html_url":"https://github.com/connieyang","followers_url":"https://api.github.com/users/connieyang/followers","following_url":"https://api.github.com/users/connieyang/following{/other_user}","gists_url":"https://api.github.com/users/connieyang/gists{/gist_id}","starred_url":"https://api.github.com/users/connieyang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/connieyang/subscriptions","organizations_url":"https://api.github.com/users/connieyang/orgs","repos_url":"https://api.github.com/users/connieyang/repos","events_url":"https://api.github.com/users/connieyang/events{/privacy}","received_events_url":"https://api.github.com/users/connieyang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-21T23:08:52Z","updated_at":"2016-01-21T23:08:52Z","author_association":"NONE","body":"I too agree that STORM-1015 is beyond the scope of Kafka 0.9 uprev related changes.  So, I think it makes sense to keep them separate.\n\n@hmcl, any ETA on the rewrite or uprev effort?  Thanks much!\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173744934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173768849","html_url":"https://github.com/apache/storm/pull/1016#issuecomment-173768849","issue_url":"https://api.github.com/repos/apache/storm/issues/1016","id":173768849,"node_id":"MDEyOklzc3VlQ29tbWVudDE3Mzc2ODg0OQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-22T01:17:15Z","updated_at":"2016-01-22T01:17:15Z","author_association":"CONTRIBUTOR","body":"Backported to 1.x-branch. =)\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173768849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697561","html_url":"https://github.com/apache/storm/issues/5285#issuecomment-2612697561","issue_url":"https://api.github.com/repos/apache/storm/issues/5285","id":2612697561,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc1NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-22T01:17:16Z","updated_at":"2025-01-24T14:43:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1016#issuecomment-173768849\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1016#issuecomment-173768849</a></p>\n\n<p>    Backported to 1.x-branch. =)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697561/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]