[{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/296946158","html_url":"https://github.com/apache/lucenenet/pull/203#issuecomment-296946158","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/203","id":296946158,"node_id":"MDEyOklzc3VlQ29tbWVudDI5Njk0NjE1OA==","user":{"login":"davhdavh","id":1201165,"node_id":"MDQ6VXNlcjEyMDExNjU=","avatar_url":"https://avatars.githubusercontent.com/u/1201165?v=4","gravatar_id":"","url":"https://api.github.com/users/davhdavh","html_url":"https://github.com/davhdavh","followers_url":"https://api.github.com/users/davhdavh/followers","following_url":"https://api.github.com/users/davhdavh/following{/other_user}","gists_url":"https://api.github.com/users/davhdavh/gists{/gist_id}","starred_url":"https://api.github.com/users/davhdavh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davhdavh/subscriptions","organizations_url":"https://api.github.com/users/davhdavh/orgs","repos_url":"https://api.github.com/users/davhdavh/repos","events_url":"https://api.github.com/users/davhdavh/events{/privacy}","received_events_url":"https://api.github.com/users/davhdavh/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-04-25T07:45:28Z","updated_at":"2017-04-25T07:45:28Z","author_association":"NONE","body":"A small bug in the port in `Term.ToString(BytesRef termText)`. The call to `termText.Utf8ToString(); ` will never throw, it should use the system utf8encoder instead: `return new System.Text.UTF8Encoding(false, true).GetString(termText.Bytes, termText.Offset, termText.Length);`. but IHMO, it is still fundamentally broken, ran into this on an int that happens to have a valid utf8 encoding when serialized to bytes.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/296946158/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/296967854","html_url":"https://github.com/apache/lucenenet/pull/203#issuecomment-296967854","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/203","id":296967854,"node_id":"MDEyOklzc3VlQ29tbWVudDI5Njk2Nzg1NA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-04-25T09:08:40Z","updated_at":"2017-04-25T09:08:40Z","author_association":"CONTRIBUTOR","body":"@davhdavh - thanks for the report. I was wondering about that piece of code, but since none of the tests were complaining I left it alone. Thanks for complaining in their place. This is just another place where someone deviated from the original code that happened to be the wrong choice (as usually is the case).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/296967854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/297117000","html_url":"https://github.com/apache/lucenenet/pull/191#issuecomment-297117000","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/191","id":297117000,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzExNzAwMA==","user":{"login":"rmarinho","id":1235097,"node_id":"MDQ6VXNlcjEyMzUwOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1235097?v=4","gravatar_id":"","url":"https://api.github.com/users/rmarinho","html_url":"https://github.com/rmarinho","followers_url":"https://api.github.com/users/rmarinho/followers","following_url":"https://api.github.com/users/rmarinho/following{/other_user}","gists_url":"https://api.github.com/users/rmarinho/gists{/gist_id}","starred_url":"https://api.github.com/users/rmarinho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmarinho/subscriptions","organizations_url":"https://api.github.com/users/rmarinho/orgs","repos_url":"https://api.github.com/users/rmarinho/repos","events_url":"https://api.github.com/users/rmarinho/events{/privacy}","received_events_url":"https://api.github.com/users/rmarinho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-04-25T18:08:15Z","updated_at":"2017-04-25T18:08:15Z","author_association":"NONE","body":"what this was merged?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/297117000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/297220681","html_url":"https://github.com/apache/lucenenet/pull/203#issuecomment-297220681","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/203","id":297220681,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzIyMDY4MQ==","user":{"login":"davhdavh","id":1201165,"node_id":"MDQ6VXNlcjEyMDExNjU=","avatar_url":"https://avatars.githubusercontent.com/u/1201165?v=4","gravatar_id":"","url":"https://api.github.com/users/davhdavh","html_url":"https://github.com/davhdavh","followers_url":"https://api.github.com/users/davhdavh/followers","following_url":"https://api.github.com/users/davhdavh/following{/other_user}","gists_url":"https://api.github.com/users/davhdavh/gists{/gist_id}","starred_url":"https://api.github.com/users/davhdavh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davhdavh/subscriptions","organizations_url":"https://api.github.com/users/davhdavh/orgs","repos_url":"https://api.github.com/users/davhdavh/repos","events_url":"https://api.github.com/users/davhdavh/events{/privacy}","received_events_url":"https://api.github.com/users/davhdavh/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-04-26T02:36:01Z","updated_at":"2017-04-26T02:36:01Z","author_association":"NONE","body":"Thanks for all the quick fixes :) I found two more issues. 1. The assemblies are not strong-named in either debug or release build. 2. The assembly version is 4.0.0.0. I believe the right thing to do would be to set `[assembly: AssemblyVersion(\"4.8.*\")]` and `[assembly: AssemblyInformationalVersion(\"4.8-apiwork-ci\")]` ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/297220681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/297225752","html_url":"https://github.com/apache/lucenenet/pull/203#issuecomment-297225752","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/203","id":297225752,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzIyNTc1Mg==","user":{"login":"davhdavh","id":1201165,"node_id":"MDQ6VXNlcjEyMDExNjU=","avatar_url":"https://avatars.githubusercontent.com/u/1201165?v=4","gravatar_id":"","url":"https://api.github.com/users/davhdavh","html_url":"https://github.com/davhdavh","followers_url":"https://api.github.com/users/davhdavh/followers","following_url":"https://api.github.com/users/davhdavh/following{/other_user}","gists_url":"https://api.github.com/users/davhdavh/gists{/gist_id}","starred_url":"https://api.github.com/users/davhdavh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davhdavh/subscriptions","organizations_url":"https://api.github.com/users/davhdavh/orgs","repos_url":"https://api.github.com/users/davhdavh/repos","events_url":"https://api.github.com/users/davhdavh/events{/privacy}","received_events_url":"https://api.github.com/users/davhdavh/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-04-26T03:14:43Z","updated_at":"2017-04-26T03:14:43Z","author_association":"NONE","body":"After trying to get strong names on, I can say that the entire build system is broken on latest version of dotnet sdk. 1. Restore needs a specific sln, since there are two, ie: `& dotnet.exe restore $base_directory\\Lucene.Net.sln` 2. build command no longer accepts a project.json, but instead uses the csproj files. That can be fixed by finding the csproj files before build-assemblies call:\r\n```\r\n\t\tpushd $base_directory\r\n\t\t$projects = Get-ChildItem -Path \"*.csproj\" -Recurse\r\n\t\tpopd\r\n\r\n\t\tBuild-Assemblies $projects\r\n```\r\nand yet with those fixes, I still cant get it working.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/297225752/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/297257472","html_url":"https://github.com/apache/lucenenet/pull/203#issuecomment-297257472","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/203","id":297257472,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzI1NzQ3Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-04-26T06:55:38Z","updated_at":"2017-04-26T06:55:38Z","author_association":"CONTRIBUTOR","body":"@davhdavh \r\n\r\n> 1. The assemblies are not strong-named in either debug or release build.\r\n\r\nPer Itamar (the project manager), [Lucene.Net will not be strong-named going forward](http://code972.com/blog/2014/04/68-ditching-strong-naming-for-lucene-net). I don't agree with all of his points, but for now I am just going to see how many people complain. I did strong-name the [`spatial4n` dependency](https://github.com/NightOwl888/Spatial4n/) just in case we need to do it. He might be right that it is time to ditch it as some other open-source projects have. Personally, I don't need it - do you? If so, I suggest you complain loudly about it on the [dev mailing list](https://cwiki.apache.org/confluence/display/LUCENENET/Mailing+Lists) and open an issue on [JIRA](https://issues.apache.org/jira/browse/LUCENENET-574?jql=project%20%3D%20LUCENENET%20AND%20status%20%3D%20Open) about it so we can see how many votes it gets.\r\n\r\n> 2. The assembly version is 4.0.0.0. I believe the right thing to do would be to set [assembly: AssemblyVersion(\"4.8.*\")] and [assembly: AssemblyInformationalVersion(\"4.8-apiwork-ci\")]\r\n\r\nIn case we do strong-name because of popular demand, setting the assembly version to 4.0.0.0 is the right way to go. This is what the MVC team did - all versions of MVC 4 were 4.0.0.0 (until a they found a security vulnerability so severe that they had to force everyone to upgrade to it, then it incremented to 4.0.0.1). If you read the [SemVer](http://semver.org/) document, the behavior of strong-naming acts exactly like changing the major version, since whenever it is changed it breaks binary compatibility. Therefore, it should never change unless the major version is changed.\r\n\r\n> After trying to get strong names on, I can say that the entire build system is broken on latest version of dotnet sdk. 1. Restore needs a specific sln, since there are two, ie: & dotnet.exe restore $base_directory\\Lucene.Net.sln 2. build command no longer accepts a project.json, but instead uses the csproj files.\r\n\r\nIf you look at the [`global.json` file](https://github.com/apache/lucenenet/blob/master/global.json), the build requires the `1.0.0-preview2-1-003177` SDK, which is the [current one](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md) that supports `project.json` (but now that you mention it, the README needs to state the prerequisites). The `global.json` file ensures the right SDK is used even if a newer one is installed.\r\n\r\nI made an attempt to unify to one solution and upgrade to `.csproj`, but ran into many issues:\r\n\r\n1. The NUnit test adapter doesn't yet support `.csproj` on .NET Core, so no debugging in VS2017 on .NET Core unless you fire off the tests manually or with NUnitLite.\r\n2. Some of the tests would not complete after the switch.\r\n3. With `.csproj`, versioning is still broken with respect to what I mentioned above about the assembly version (which I plan to file an issue about) - when you specify an AssemblyVersion, it always uses the same version for the AssemblyFileVersion, meaning they cannot differ. Also, it is broken in respect to using a non SemVer scheme (which I don't see an alternative for a port, since we will almost certainly have multiple production releases that correspond to Lucene 4.8.0). You cannot pass a version number to the `dotnet pack` command, only a version suffix (which always assumes there will be a `-` before it and always assumes there will be a version prefix). In addition, when generating the NuGet packages for a pre-release, it doesn't update the project dependency version numbers to pre-release (which gives you compile warnings).\r\n\r\nThese issues can probably be overcome and I much prefer the new format, but I didn't want to delay the release any longer. I think it would be best to wait until Microsoft announces they are feature-complete  and NUnit Test Adapter has .NET Core support rather than trading one broken build system for another.\r\n\r\nI wouldn't object if you want to contribute a build option to turn on strong-naming (provided it doesn't break the build in TeamCity). But keep in mind, many of the assemblies are using `InternalsVisibleTo` so we will need a conditional compilation symbol (`FEATURE_STRONGNAME`) to toggle them between the standard and strong-named form. The strong-name option would not necessarily need to extend to the `Lucene.Net.sln` solution or its projects, since they are not used for the build.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/297257472/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212297","html_url":"https://github.com/apache/lucenenet/issues/277#issuecomment-624212297","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/277","id":624212297,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjI5Nw==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-05T10:09:16Z","updated_at":"2020-05-05T17:57:16Z","author_association":"NONE","body":"<p>This is also the case with Apache Lucene (Java):</p>\n\n<p><a href=\"https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.0/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PortugueseStemmer.java#L84\" class=\"external-link\" rel=\"nofollow\">https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.0/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PortugueseStemmer.java#L84</a></p>\n\n<p>I believe the right thing to do for Lucene.NET is leave it as-is, analyzers are expected to behave the same in .NET and Java - and as a by-product that will make indexes readable by both. It is easy enough to create your own analyzer by copying the code and fixing what needs to be fixed. It might make sense to also notify the Apache Lucene project so they can fix it in future releases.</p>\n<i>by itamar</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212297/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299845710","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-299845710","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":299845710,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTg0NTcxMA==","user":{"login":"synhershko","id":212252,"node_id":"MDQ6VXNlcjIxMjI1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/212252?v=4","gravatar_id":"","url":"https://api.github.com/users/synhershko","html_url":"https://github.com/synhershko","followers_url":"https://api.github.com/users/synhershko/followers","following_url":"https://api.github.com/users/synhershko/following{/other_user}","gists_url":"https://api.github.com/users/synhershko/gists{/gist_id}","starred_url":"https://api.github.com/users/synhershko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/synhershko/subscriptions","organizations_url":"https://api.github.com/users/synhershko/orgs","repos_url":"https://api.github.com/users/synhershko/repos","events_url":"https://api.github.com/users/synhershko/events{/privacy}","received_events_url":"https://api.github.com/users/synhershko/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-08T11:47:33Z","updated_at":"2017-05-08T11:47:33Z","author_association":"CONTRIBUTOR","body":"Good catch, thanks!\r\n\r\n@NightOwl888 can we get this to the beta version before it's released?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299845710/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299852696","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-299852696","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":299852696,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTg1MjY5Ng==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-08T12:25:31Z","updated_at":"2017-05-08T12:25:31Z","author_association":"CONTRIBUTOR","body":"@synhershko \r\n\r\nNot without cancelling the vote and starting over (for the 3rd time) - we have only 12 hours left on the current vote. I suspect there will be several issues such as this that will need patching, so we should probably wait until the next release to address them.\r\n\r\n@pvginkel \r\n\r\nGood find. Keep them coming :).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299852696/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299854299","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-299854299","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":299854299,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTg1NDI5OQ==","user":{"login":"pvginkel","id":828966,"node_id":"MDQ6VXNlcjgyODk2Ng==","avatar_url":"https://avatars.githubusercontent.com/u/828966?v=4","gravatar_id":"","url":"https://api.github.com/users/pvginkel","html_url":"https://github.com/pvginkel","followers_url":"https://api.github.com/users/pvginkel/followers","following_url":"https://api.github.com/users/pvginkel/following{/other_user}","gists_url":"https://api.github.com/users/pvginkel/gists{/gist_id}","starred_url":"https://api.github.com/users/pvginkel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pvginkel/subscriptions","organizations_url":"https://api.github.com/users/pvginkel/orgs","repos_url":"https://api.github.com/users/pvginkel/repos","events_url":"https://api.github.com/users/pvginkel/events{/privacy}","received_events_url":"https://api.github.com/users/pvginkel/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-08T12:33:12Z","updated_at":"2017-05-08T12:33:12Z","author_association":"NONE","body":"I am currently working around this using reflection, so for me it's fine.\nHowever, this is causing real problems. I wrote a prototype which is\nindexing using 4 threads, a thread that commits every 5 seconds and a\nreopen thread every .5 seconds, at roughly 1500 documents per second,\nindexing all of Wikipedia. It crashes because of this problem every single\nrun.\n\nOn Mon, May 8, 2017, 14:25 Shad Storhaug <notifications@github.com> wrote:\n\n> @synhershko <https://github.com/synhershko>\n>\n> Not without cancelling the vote and starting over (for the 3rd time) - we\n> have only 12 hours left on the current vote. I suspect there will be\n> several issues such as this that will need patching, so we should probably\n> wait until the next release to address them.\n>\n> @pvginkel <https://github.com/pvginkel>\n>\n> Good find. Keep them coming :).\n>\n> —\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/apache/lucenenet/pull/205#issuecomment-299852696>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAymJu37xJlX_IYmMo1FHG8q1B-ART4Lks5r3wm_gaJpZM4NT1mj>\n> .\n>\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299854299/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299857182","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-299857182","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":299857182,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTg1NzE4Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-08T12:47:51Z","updated_at":"2017-05-08T12:47:51Z","author_association":"CONTRIBUTOR","body":"@pvginkel \r\n\r\nCould you add a test to this PR in the [TestDirectory class](https://github.com/pvginkel/lucenenet/blob/synchronized-stale-files/src/Lucene.Net.Tests/Store/TestDirectory.cs) that fails with the current HashSet and passes with the ConcurrentHashSet? Not that I don't believe you fixed it, but for future porting efforts it would help if we don't repeat the same bugs over and over again.\r\n\r\nPlease mark the test with the `[LuceneNetSpecific]` attribute.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299857182/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299865591","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-299865591","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":299865591,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTg2NTU5MQ==","user":{"login":"pvginkel","id":828966,"node_id":"MDQ6VXNlcjgyODk2Ng==","avatar_url":"https://avatars.githubusercontent.com/u/828966?v=4","gravatar_id":"","url":"https://api.github.com/users/pvginkel","html_url":"https://github.com/pvginkel","followers_url":"https://api.github.com/users/pvginkel/followers","following_url":"https://api.github.com/users/pvginkel/following{/other_user}","gists_url":"https://api.github.com/users/pvginkel/gists{/gist_id}","starred_url":"https://api.github.com/users/pvginkel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pvginkel/subscriptions","organizations_url":"https://api.github.com/users/pvginkel/orgs","repos_url":"https://api.github.com/users/pvginkel/repos","events_url":"https://api.github.com/users/pvginkel/events{/privacy}","received_events_url":"https://api.github.com/users/pvginkel/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-08T13:24:05Z","updated_at":"2017-05-08T13:24:05Z","author_association":"NONE","body":"I have, but this is a problematic one. This depends on a race condition, which is non-deterministic by definition.\r\n\r\nThe test case I created runs a few threads for a few seconds and fails when the exception is thrown in one of the threads. Fun thing is that we're running until some timeout and then cancelling the test. If we wouldn't the test could theoretically run indefinitely, never hitting the race condition. However, since we run for some time interval, it could also be that the problem is still there, but it just wasn't hit.\r\n\r\nI've ignored this test case because:\r\n\r\n* It's non deterministic, so the fact that it succeeds doesn't mean that the problem isn't there, making the test case useless;\r\n* It prolongs running the test suite since we have to run for a non trivial amount of time. I've set this to 5 seconds.\r\n\r\nThis all being said: the test case is there so you can try it if you'd like. On my 8 core workstation, it fails most of the time with the `HashSet<>` and succeeds all of the time with the `ConcurrentHashSet<>`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299865591/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299905186","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-299905186","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":299905186,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTkwNTE4Ng==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-08T15:43:23Z","updated_at":"2017-05-08T15:43:23Z","author_association":"CONTRIBUTOR","body":"No big deal - I'd say the majority of the tests we have are non-deterministic - certainly the randomization makes them a bit unpredictable. If we don't get any false negatives or false positives, I'd say this is fine. So long as we have a way to detect the problem so it can be addressed if it pops up again in a future port.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299905186/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299965578","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-299965578","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":299965578,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTk2NTU3OA==","user":{"login":"synhershko","id":212252,"node_id":"MDQ6VXNlcjIxMjI1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/212252?v=4","gravatar_id":"","url":"https://api.github.com/users/synhershko","html_url":"https://github.com/synhershko","followers_url":"https://api.github.com/users/synhershko/followers","following_url":"https://api.github.com/users/synhershko/following{/other_user}","gists_url":"https://api.github.com/users/synhershko/gists{/gist_id}","starred_url":"https://api.github.com/users/synhershko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/synhershko/subscriptions","organizations_url":"https://api.github.com/users/synhershko/orgs","repos_url":"https://api.github.com/users/synhershko/repos","events_url":"https://api.github.com/users/synhershko/events{/privacy}","received_events_url":"https://api.github.com/users/synhershko/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-08T19:25:12Z","updated_at":"2017-05-08T19:25:12Z","author_association":"CONTRIBUTOR","body":"This is a great test - and as it happens many bugs in Apache Lucene (Java), even very severe ones, were caught using a randomized testing framework, which by definition is not deterministic.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/299965578/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300070932","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-300070932","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":300070932,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA3MDkzMg==","user":{"login":"pvginkel","id":828966,"node_id":"MDQ6VXNlcjgyODk2Ng==","avatar_url":"https://avatars.githubusercontent.com/u/828966?v=4","gravatar_id":"","url":"https://api.github.com/users/pvginkel","html_url":"https://github.com/pvginkel","followers_url":"https://api.github.com/users/pvginkel/followers","following_url":"https://api.github.com/users/pvginkel/following{/other_user}","gists_url":"https://api.github.com/users/pvginkel/gists{/gist_id}","starred_url":"https://api.github.com/users/pvginkel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pvginkel/subscriptions","organizations_url":"https://api.github.com/users/pvginkel/orgs","repos_url":"https://api.github.com/users/pvginkel/repos","events_url":"https://api.github.com/users/pvginkel/events{/privacy}","received_events_url":"https://api.github.com/users/pvginkel/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T06:13:06Z","updated_at":"2017-05-09T06:13:06Z","author_association":"NONE","body":"OK. So I should remove the `[Ignore]` attribute then?\r\n\r\nThe only question I still have is about the timeout. In my tests, if it would test, it would test rather quickly. At the moment I have the timeout on 5 seconds, but it should be fine to lower this to e.g. 1 second or .5 seconds. Should I do this?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300070932/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300094739","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-300094739","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":300094739,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA5NDczOQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T08:18:28Z","updated_at":"2017-05-09T08:18:28Z","author_association":"CONTRIBUTOR","body":"> OK. So I should remove the `[Ignore]` attribute then?\r\n\r\nYes. We should only use the `[Ignore]` attribute in cases where the test takes > 30 minutes and must be run manually, or was ignored in Lucene for some reason. Otherwise we want the tests to complain if there is something wrong with the software.\r\n\r\n> The only question I still have is about the timeout. In my tests, if it would test, it would test rather quickly. At the moment I have the timeout on 5 seconds, but it should be fine to lower this to e.g. 1 second or .5 seconds. Should I do this?\r\n\r\nI would say use your best judgement to set the timeout where it is long enough to fail at least 50% of the time on most systems. 5 seconds isn't too bad considering a full test run takes around an hour. I don't even consider them \"long running tests\" unless they are upwards of 1 minute.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300094739/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300096920","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-300096920","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":300096920,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA5NjkyMA==","user":{"login":"pvginkel","id":828966,"node_id":"MDQ6VXNlcjgyODk2Ng==","avatar_url":"https://avatars.githubusercontent.com/u/828966?v=4","gravatar_id":"","url":"https://api.github.com/users/pvginkel","html_url":"https://github.com/pvginkel","followers_url":"https://api.github.com/users/pvginkel/followers","following_url":"https://api.github.com/users/pvginkel/following{/other_user}","gists_url":"https://api.github.com/users/pvginkel/gists{/gist_id}","starred_url":"https://api.github.com/users/pvginkel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pvginkel/subscriptions","organizations_url":"https://api.github.com/users/pvginkel/orgs","repos_url":"https://api.github.com/users/pvginkel/repos","events_url":"https://api.github.com/users/pvginkel/events{/privacy}","received_events_url":"https://api.github.com/users/pvginkel/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T08:28:19Z","updated_at":"2017-05-09T08:28:19Z","author_association":"NONE","body":"I've removed the `[Ignore]` attribute and left the timeout as is.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300096920/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300107209","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-300107209","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":300107209,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDEwNzIwOQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T09:13:34Z","updated_at":"2017-05-09T09:13:34Z","author_association":"CONTRIBUTOR","body":"> I am currently working around this using reflection, so for me it's fine.\r\n\r\nPeter, could you please post your workaround here in case other users need it?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300107209/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300127121","html_url":"https://github.com/apache/lucenenet/pull/205#issuecomment-300127121","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/205","id":300127121,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDEyNzEyMQ==","user":{"login":"pvginkel","id":828966,"node_id":"MDQ6VXNlcjgyODk2Ng==","avatar_url":"https://avatars.githubusercontent.com/u/828966?v=4","gravatar_id":"","url":"https://api.github.com/users/pvginkel","html_url":"https://github.com/pvginkel","followers_url":"https://api.github.com/users/pvginkel/followers","following_url":"https://api.github.com/users/pvginkel/following{/other_user}","gists_url":"https://api.github.com/users/pvginkel/gists{/gist_id}","starred_url":"https://api.github.com/users/pvginkel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pvginkel/subscriptions","organizations_url":"https://api.github.com/users/pvginkel/orgs","repos_url":"https://api.github.com/users/pvginkel/repos","events_url":"https://api.github.com/users/pvginkel/events{/privacy}","received_events_url":"https://api.github.com/users/pvginkel/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T10:42:00Z","updated_at":"2017-05-09T10:42:00Z","author_association":"NONE","body":"Sure, no problem:\r\n\r\n    private void ReplaceStaleFiles(FSDirectory fsDirectory)\r\n    {\r\n        // Work around for https://github.com/apache/lucenenet/pull/205.\r\n\r\n        var field = typeof(FSDirectory).GetField(\"StaleFiles\", BindingFlags.Instance | BindingFlags.NonPublic);\r\n\r\n        field.SetValue(fsDirectory, new ConcurrentHashSet<string>());\r\n    }","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/300127121/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/301725293","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-301725293","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":301725293,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTcyNTI5Mw==","user":{"login":"synhershko","id":212252,"node_id":"MDQ6VXNlcjIxMjI1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/212252?v=4","gravatar_id":"","url":"https://api.github.com/users/synhershko","html_url":"https://github.com/synhershko","followers_url":"https://api.github.com/users/synhershko/followers","following_url":"https://api.github.com/users/synhershko/following{/other_user}","gists_url":"https://api.github.com/users/synhershko/gists{/gist_id}","starred_url":"https://api.github.com/users/synhershko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/synhershko/subscriptions","organizations_url":"https://api.github.com/users/synhershko/orgs","repos_url":"https://api.github.com/users/synhershko/repos","events_url":"https://api.github.com/users/synhershko/events{/privacy}","received_events_url":"https://api.github.com/users/synhershko/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T09:22:10Z","updated_at":"2017-05-16T09:22:10Z","author_association":"CONTRIBUTOR","body":"This looks great, thanks for the initiative!\r\n\r\n@NightOwl888 I assume many files' code comments are still broken so we will gradually get them fixed so it looks better then\r\n\r\n@wwb is there a way we can use our CI to generate the docs for each build (and then as a next step maybe automatically pull them for a static hosting of some kind e.g. github pages)?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/301725293/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/301757155","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-301757155","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":301757155,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTc1NzE1NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T11:46:40Z","updated_at":"2017-05-16T11:46:40Z","author_association":"CONTRIBUTOR","body":"@Shazwazza \r\n\r\nThanks for this!\r\n\r\n> it's also possible to add markdown articles using docfx but I've removed these for now until we might want them.\r\n\r\nWe definitely want them. Lucene has HTML documents that they add to each package, and often this is where the best code samples and detailed overview of the API can be found. It would be best if we could add the HTML documents unmodified from Lucene to our repo and have the script convert them to be used in the documentation. Then we just need to copy over the files from the next version and that part of the documentation will be automatic. Here is an example of one of those HTML files:\r\n\r\nhttps://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.0/lucene/highlighter/src/java/org/apache/lucene/search/highlight/package.html\r\n\r\nIf there is a way to automate converting the code samples (preferably both to C# and VB.NET), it would be ideal, but at least that would likely be the only part of the document that needs to change if converting the code samples is not possible.\r\n\r\nIt occurred to me that we also need to re-map the namespaces, but we should be able to easily automate that part.\r\n\r\nFor the home page, we should also aim to provide the same information as the rest of the Java API docs: https://lucene.apache.org/core/4_8_0/.\r\n\r\n@synhershko \r\n\r\nYes, many of the files in Lucene.Net and Lucene.Net.Codecs have not been cleaned up yet. Plus there are some other places where the comments need to be fixed up a bit. I have been doing this bit by bit during the hour-long test runs when I can't really do much else.\r\n\r\nWe could really use some help with this, as it would take one person the better part of a week to get it all done. If 50 people contributed an hour each, we would be done in an hour ;).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/301757155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/301998294","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-301998294","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":301998294,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTk5ODI5NA==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-17T06:29:46Z","updated_at":"2017-05-17T06:29:46Z","author_association":"CONTRIBUTOR","body":"OK cool, I'm happy to update this PR with what I can and let you know what I get done. Probably isn't going to happy super fast but I can put in some work each week!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/301998294/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/307937170","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-307937170","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":307937170,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNzkzNzE3MA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-12T21:39:58Z","updated_at":"2017-06-29T13:20:32Z","author_association":"CONTRIBUTOR","body":"@Shazwazza \r\n\r\nThanks again. I took a look and documentation generated perfectly. The documentation and code samples look great.\r\n\r\nI have done all of the grunt work to update the documentation comments to get rid of nearly all of the compile warnings (at least in Visual Studio).\r\n\r\nHowever, there are a few issues/limitations that I found with the generated documentation, as well as some features that would be nice to build in.\r\n\r\n## Package Breakdown\r\n\r\nThe Lucene documentation (https://lucene.apache.org/core/4_8_0/) breaks the API down by package first, and then allows you to drill into types. \r\n\r\nI am torn between that approach and putting everything into one \"bucket\" like we currently have, which is similar to MSDN. The filter makes it easy to find something specific, but it is difficult to tell where the core types are vs the specialized add-ons.\r\n\r\nThe amount of data that you have to wade through is a bit overwhelming. For example, the navigation initializes with mostly obscure analysis packages in view before more useful namespaces. If we could somehow arrange it so the main namespaces show up at the top level, and allow a drill down to the levels below (or at least have an additional navigation feature that does this), that would seem more appropriate. \r\n\r\n## .NET Standard vs .NET Framework\r\n\r\nThe APIs for each framework are similar, but there are places where they diverge. Namely, there are several types that are not supported in .NET Standard and therefore don't exist. One such example is [ConcurrentMergeScheduler](https://github.com/apache/lucenenet/blob/master/src/Lucene.Net/Index/ConcurrentMergeScheduler.cs). If you look at that class in the documentation, there is no indication at all that it doesn't exist in .NET Core.\r\n\r\nIdeally, the fix for that would be to generate framework/version specific documents with a \"drop down\" (or similar) navigation feature that allows switching between available frameworks (just like MSDN). Is this (or a workaround) possible?\r\n\r\n## Missing Links\r\n\r\nSome of the documentation I updated have links that are not being generated in the output even though they show up fine in Intellisense. Here are some problematic files:\r\n\r\n`/api/Lucene.Net.Codecs.Bloom.html`\r\n`/api/Lucene.Net.Codecs.Lucene46.Lucene46FieldInfosFormat.html`\r\n\r\nIn the first case, several of the links (such as CodecHeader) are not showing up. In the second case, all of them are showing up except for the one after Attributes. I haven't figured out why this is the case.\r\n\r\nBut actually this is a symptom of another problem. In Lucene, they are able to change the link text to a code reference, but I haven't worked out what the syntax for that is (if it is even possible). You can see [here](https://lucene.apache.org/core/4_8_0/core/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat.html) that the link after Attributes has the text `Map<String, String>` but it links to the documentation for `DataOutput.writeStringStringMap()`. \r\n\r\nI tried the obvious way to create that type of link (`<see cref=\"SomeClass\">link text</see>`), but that just makes the whole thing disappear. If you have any insight how this could be done I would appreciate it.\r\n\r\n## HTML pages\r\n\r\nI mentioned this before, but after looking at this there are more than 250 HTML pages. So this is a huge amount of missing documentation and most of the code samples are in it. I recall reading that some documentation generators allow you to specify \"namespace documentation\", and if that is the case with DocFx, perhaps we should use that to solve this.\r\n\r\nIf you could provide a specification as to what format the \"package documentation\" needs to be in (i.e. Markdown) and what convention it needs to follow (where the documentation needs to be in order to show up under a specific namespace), I would be happy to put together a tool to convert the existing HTML pages to that format and location.\r\n\r\n## Viewport Width\r\n\r\nMinor complaint. On a large monitor, only about 2/3 of the available width is being utilized. I checked and regular MSDN pages are using roughly 10% more width, and some of the newer pages ([example](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/list)) are using about 25% more of the available width. Is there a way to specify the maximum width be wider?\r\n\r\n## Token Replacement\r\n\r\nIn Lucene there are a couple of tokens, such as `@lucene.experimental` and `@lucene.internal` that are replaced with text such as `WARNING: This API is experimental and might change in incompatible ways in the next release.` in the generated output.\r\n\r\nWorst case, we could just find and replace in Visual Studio, but it seems better maintenance-wise to use similar functionality if it is available in the doc generator.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/307937170/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/308027273","html_url":"https://github.com/apache/lucenenet/pull/208#issuecomment-308027273","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/208","id":308027273,"node_id":"MDEyOklzc3VlQ29tbWVudDMwODAyNzI3Mw==","user":{"login":"synhershko","id":212252,"node_id":"MDQ6VXNlcjIxMjI1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/212252?v=4","gravatar_id":"","url":"https://api.github.com/users/synhershko","html_url":"https://github.com/synhershko","followers_url":"https://api.github.com/users/synhershko/followers","following_url":"https://api.github.com/users/synhershko/following{/other_user}","gists_url":"https://api.github.com/users/synhershko/gists{/gist_id}","starred_url":"https://api.github.com/users/synhershko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/synhershko/subscriptions","organizations_url":"https://api.github.com/users/synhershko/orgs","repos_url":"https://api.github.com/users/synhershko/repos","events_url":"https://api.github.com/users/synhershko/events{/privacy}","received_events_url":"https://api.github.com/users/synhershko/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-13T07:08:36Z","updated_at":"2017-06-13T07:08:36Z","author_association":"CONTRIBUTOR","body":"Thanks, that's an interesting one.\r\n\r\nFirst, there's a lot of whitespace noise - can you remove it please? (align with the project's whitespace specs)\r\n\r\nSecond, assuming we have no threading issues at the moment, how can we be sure this doesn't introduce any? cc @NightOwl888 ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/308027273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/308034647","html_url":"https://github.com/apache/lucenenet/pull/208#issuecomment-308034647","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/208","id":308034647,"node_id":"MDEyOklzc3VlQ29tbWVudDMwODAzNDY0Nw==","user":{"login":"vvdb","id":17848230,"node_id":"MDQ6VXNlcjE3ODQ4MjMw","avatar_url":"https://avatars.githubusercontent.com/u/17848230?v=4","gravatar_id":"","url":"https://api.github.com/users/vvdb","html_url":"https://github.com/vvdb","followers_url":"https://api.github.com/users/vvdb/followers","following_url":"https://api.github.com/users/vvdb/following{/other_user}","gists_url":"https://api.github.com/users/vvdb/gists{/gist_id}","starred_url":"https://api.github.com/users/vvdb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvdb/subscriptions","organizations_url":"https://api.github.com/users/vvdb/orgs","repos_url":"https://api.github.com/users/vvdb/repos","events_url":"https://api.github.com/users/vvdb/events{/privacy}","received_events_url":"https://api.github.com/users/vvdb/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-13T07:43:53Z","updated_at":"2017-06-13T07:43:53Z","author_association":"CONTRIBUTOR","body":">> align with the project's whitespace specs\r\nI’ve been trying to find the project’s code formatting document, but was unsuccessful.\r\n\r\n>> Second, assuming we have no threading issues at the moment, how can we be sure this doesn't introduce any?\r\nWe can be sure of nothing, since certainty is only as strong as the assumptions it is based on.\r\nHowever:\r\n\r\n-          the tests have been appropriately changed and use the new code, and they all pass.\r\n\r\n-          On a more personal level (even though it means nothing since you have to take my unverifiable word for it), this code has been in production use these past 3 months on a 28-core machine, all of them writing to a single IndexWriter for about a hundred million documents, repeatedly. No problems were ever seen.\r\nThese things don’t show the absence of problems, but make me reasonably confident that the code is sound.\r\n\r\nVincent\r\n\r\nFrom: Itamar Syn-Hershko [mailto:notifications@github.com]\r\nSent: Tuesday, June 13, 2017 9:09 AM\r\nTo: apache/lucenenet <lucenenet@noreply.github.com>\r\nCc: Van Den Berghe, Vincent <Vincent.VanDenBerghe@bvdinfo.com>; Author <author@noreply.github.com>\r\nSubject: Re: [apache/lucenenet] LUCENE-5644: switch to simpler LIFO thread to ThreadState allocator d… (#208)\r\n\r\n\r\nThanks, that's an interesting one.\r\n\r\nFirst, there's a lot of whitespace noise - can you remove it please? (align with the project's whitespace specs)\r\n\r\nSecond, assuming we have no threading issues at the moment, how can we be sure this doesn't introduce any? cc @NightOwl888<https://github.com/nightowl888>\r\n\r\n—\r\nYou are receiving this because you authored the thread.\r\nReply to this email directly, view it on GitHub<https://github.com/apache/lucenenet/pull/208#issuecomment-308027273>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ARBXpku1AqOToF4KGaoBuQG8Pu83axMhks5sDjV4gaJpZM4N4A9a>.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/308034647/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/308094185","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-308094185","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":308094185,"node_id":"MDEyOklzc3VlQ29tbWVudDMwODA5NDE4NQ==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-13T12:02:14Z","updated_at":"2017-06-13T12:02:14Z","author_association":"CONTRIBUTOR","body":"Awesome feedback and questions. I'm currently overseas atm but will see what answers i can provide next week. I know answers to some but others will require a bit of investigation. I'll get back to you in about a week","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/308094185/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/308106118","html_url":"https://github.com/apache/lucenenet/pull/208#issuecomment-308106118","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/208","id":308106118,"node_id":"MDEyOklzc3VlQ29tbWVudDMwODEwNjExOA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-13T12:54:24Z","updated_at":"2017-06-13T12:54:24Z","author_association":"CONTRIBUTOR","body":"> Second, assuming we have no threading issues at the moment, how can we be sure this doesn't introduce any? cc @NightOwl888\r\n\r\n@synhershko \r\n\r\nFirst of all, we still have some threading issues. The [Lucene.Net.Store.TestLockFactory.TestStressLocksNativeFSLockFactory test](https://teamcity.jetbrains.com/viewLog.html?buildId=1084071&tab=buildResultsDiv&buildTypeId=LuceneNet_PortableBuilds_TestOnNet451) and [Lucene.Net.Store.TestLockFactory.TestStressLocks test](https://teamcity.jetbrains.com/viewLog.html?buildId=1071425&tab=buildResultsDiv&buildTypeId=LuceneNet_PortableBuilds_TestOnNet451) still fail randomly, and there may be others (last I checked there were 2 tests that failed *only* when the MMapDirectory was randomly selected).\r\n\r\nSecondly, this change is part of the Lucene 4.8.1 patch. Much of this port (including most or all of Analysis.Common) is from 4.8.1 already, so we should probably try to include the rest of the fixes to get us all the way to 4.8.1, especially if they have performance benefits.\r\n\r\n@vvdb \r\n\r\nIf we are going to work toward 4.8.1 on a gradual basis, we should probably include a comment at the top of each changed file indicating the version compatibility level so we don't have to check the entire file to see if it is up to speed.\r\n\r\n```\r\n// Version compatibility level: 4.8.1\r\n``` \r\n\r\nAs for getting all the way there, I have outlined a procedure [here](https://github.com/apache/lucenenet/pull/174#issuecomment-251614795) for upgrading Lucene.Net to 4.8.1, which should be a lot quicker and easier than porting it from scratch again. Of course, it requires you to have a text comparison tool that allows you to filter out \"unimportant changes\" such as Beyond Compare. This will ensure we get all of the changes between the old file and new file and port them into the .NET file.\r\n\r\nIt would be better to have a tool that allows you to ignore simple code formatting changes (such as changing the curly bracket from the same line to the following line of a function or if statement), but to my knowledge a tool like that doesn't exist.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/308106118/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311289271","html_url":"https://github.com/apache/lucenenet/pull/208#issuecomment-311289271","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/208","id":311289271,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMTI4OTI3MQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-27T08:26:34Z","updated_at":"2017-06-27T08:26:34Z","author_association":"CONTRIBUTOR","body":"@vvdb \r\n\r\nI would like to add this fix to the next release. Are you planning to submit another pull request?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311289271/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311289983","html_url":"https://github.com/apache/lucenenet/pull/208#issuecomment-311289983","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/208","id":311289983,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMTI4OTk4Mw==","user":{"login":"vvdb","id":17848230,"node_id":"MDQ6VXNlcjE3ODQ4MjMw","avatar_url":"https://avatars.githubusercontent.com/u/17848230?v=4","gravatar_id":"","url":"https://api.github.com/users/vvdb","html_url":"https://github.com/vvdb","followers_url":"https://api.github.com/users/vvdb/followers","following_url":"https://api.github.com/users/vvdb/following{/other_user}","gists_url":"https://api.github.com/users/vvdb/gists{/gist_id}","starred_url":"https://api.github.com/users/vvdb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvdb/subscriptions","organizations_url":"https://api.github.com/users/vvdb/orgs","repos_url":"https://api.github.com/users/vvdb/repos","events_url":"https://api.github.com/users/vvdb/events{/privacy}","received_events_url":"https://api.github.com/users/vvdb/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-27T08:29:24Z","updated_at":"2017-06-27T08:29:24Z","author_association":"CONTRIBUTOR","body":"I’m not planning to submit another pull request at this time.\r\nFeel free to take whatever you need from my repository: you’re better at this than I am.\r\n\r\nVincent\r\n\r\nFrom: Shad Storhaug [mailto:notifications@github.com]\r\nSent: Tuesday, June 27, 2017 10:27 AM\r\nTo: apache/lucenenet <lucenenet@noreply.github.com>\r\nCc: Van Den Berghe, Vincent <Vincent.VanDenBerghe@bvdinfo.com>; Mention <mention@noreply.github.com>\r\nSubject: Re: [apache/lucenenet] LUCENE-5644: switch to simpler LIFO thread to ThreadState allocator d… (#208)\r\n\r\n\r\n@vvdb<https://github.com/vvdb>\r\n\r\nI would like to add this fix to the next release. Are you planning to submit another pull request?\r\n\r\n—\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://github.com/apache/lucenenet/pull/208#issuecomment-311289271>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ARBXprqH0s0Tjj1dhQ4f_ryNc6H2vCZEks5sILy9gaJpZM4N4A9a>.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311289983/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311652147","html_url":"https://github.com/apache/lucenenet/pull/208#issuecomment-311652147","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/208","id":311652147,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMTY1MjE0Nw==","user":{"login":"dsmiley","id":377295,"node_id":"MDQ6VXNlcjM3NzI5NQ==","avatar_url":"https://avatars.githubusercontent.com/u/377295?v=4","gravatar_id":"","url":"https://api.github.com/users/dsmiley","html_url":"https://github.com/dsmiley","followers_url":"https://api.github.com/users/dsmiley/followers","following_url":"https://api.github.com/users/dsmiley/following{/other_user}","gists_url":"https://api.github.com/users/dsmiley/gists{/gist_id}","starred_url":"https://api.github.com/users/dsmiley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dsmiley/subscriptions","organizations_url":"https://api.github.com/users/dsmiley/orgs","repos_url":"https://api.github.com/users/dsmiley/repos","events_url":"https://api.github.com/users/dsmiley/events{/privacy}","received_events_url":"https://api.github.com/users/dsmiley/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-28T12:58:40Z","updated_at":"2017-06-28T12:58:40Z","author_association":"NONE","body":"Guys, the PR title here references LUCENE-5644 and this trigger's ASF JIRA-GitHub integration to link the conversation here to comments on that old issue.  Can you please edit the PR title?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311652147/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212302","html_url":"https://github.com/apache/lucenenet/issues/277#issuecomment-624212302","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/277","id":624212302,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjMwMg==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-28T19:12:18Z","updated_at":"2020-05-05T17:57:16Z","author_association":"NONE","body":"<p>Seems to be a reasonable request since its expected for Portuguese to work this way and contributing the fix directly to the Snowball project <a href=\"https://github.com/snowballstem/snowball\" class=\"external-link\" rel=\"nofollow\">https://github.com/snowballstem/snowball</a> would literally take years to trickle down to Lucene and then Lucene.Net.</p>\n\n<p>Actually, I have already attempted this. It might work fine. However, this request doesn't have instructions anywhere on how to rework the ZIP file that are used for the tests to verify it works </p>\n\n<ul>\n\t<li><a href=\"https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.0/lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocabData.zip\" class=\"external-link\" rel=\"nofollow\">https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.0/lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocabData.zip</a></li>\n</ul>\n\n\n<p>Of course, without altering the ZIP file also (or instructions on how to alter it), the tests for the Portuguese stemmer fail. Any chance you can add that to this request?</p>\n<i>by nightowl888</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311790338","html_url":"https://github.com/apache/lucenenet/pull/158#issuecomment-311790338","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/158","id":311790338,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMTc5MDMzOA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-28T21:04:16Z","updated_at":"2017-06-28T21:04:16Z","author_association":"CONTRIBUTOR","body":"Please close this issue now. I have confirmed that this is no longer a problem in Lucene.Net 4.8.0.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311790338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212315","html_url":"https://github.com/apache/lucenenet/issues/278#issuecomment-624212315","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/278","id":624212315,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjMxNQ==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-29T09:39:43Z","updated_at":"2020-05-05T17:57:18Z","author_association":"NONE","body":"<p>According to the .NET Standard page (<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/net-standard\" class=\"external-link\" rel=\"nofollow\">https://docs.microsoft.com/en-us/dotnet/standard/net-standard</a>), just being on .NET Standard 1.5 is enough to support Universal Windows Platform (which is where the \"develop\" link leads above).</p>\n\n<p>I have made an attempt to move us to .NET Standard 1.4 (which would get us there immediately), but this turns out is either not possible or very difficult because of missing APIs.</p>\n\n<p>Either way, we cannot verify this on Lucene.Net 4.8.0 until the support is in place (either by supporting .NET Standard 1.4 or waiting until UWP vNext), so I am leaving this open for now.</p>\n<i>by nightowl888</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212315/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311967360","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-311967360","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":311967360,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMTk2NzM2MA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-29T13:32:34Z","updated_at":"2017-06-29T13:32:34Z","author_association":"CONTRIBUTOR","body":"@Shazwazza - Added another minor issue to the above list. Any chance you will be able to answer some of these questions soon? In particular, I would like to know if there is a spec that the HTML docs can be converted to (and whether there a convention we can use for changing the code links within them into the correct hyperlinks). Even if it is imperfect or still incomplete, it would be nice to have some documentation hosted so people using the beta have somewhere more relevant to turn than the Lucene 4.8.0 docs.\r\n\r\n@synhershko - Any particular reason you are suggesting Github pages instead of hosting at http://lucenenet.apache.org/docs/3.0.3/Index.html? I think it would be less confusing if users only have to modify the version number in the URL to get to the latest. Although, since most of the new classes are not in the same location as the old, now would be the ideal time to jump to a different host if that is indeed the plan.\r\n\r\nQuestion: For pre-releases should we be releasing new docs on each release in a new versioned location, or updating the existing 4.8.0 version location until it is fully released? Seems the former would be a better option in terms of legacy usage and automation of deployment, but may end up taking up lots of space if we end up with a lot of pre-releases.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/311967360/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/312173123","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-312173123","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":312173123,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMjE3MzEyMw==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-30T04:39:18Z","updated_at":"2017-06-30T04:39:18Z","author_association":"CONTRIBUTOR","body":"Hi all,\r\n\r\nHere's some feedback on many of the above questions/comments:\r\n\r\nI've pushed some updates to this PR which:\r\n\r\n* Fixed up a couple of cref's\r\n* Updated to use latest docfx v2.17.x release (be sure to delete the /tools folder) to get the latest version when running the ps1 script. Unfortunatey upgrading to the very latest docfx 2.19.2 causes build errors. I also checked that 2.18.x also causes these build errors. I'm putting together a bug report for this now. I has to do with some YAML parsing errors and things like \"quoted scalar\" and \"orphaned high surrogate\" which sound fun ;) \r\n* Adds some comments to the ps1 script about where other docs live and potentially somehow scraping/automating fetching these docs\r\n* Update the home page of the docs to mimic https://lucene.apache.org/core/4_8_0/, I've just copied the HTML, then removed the html/body tags and replaced the header tags with Markdown header tags so they are parsed correctly by DocFx to create the side menu. The links throughout this document will need to be updated since they still point to the lucene.apache.org links. I've done this to show that HTML markup works happily side by side and inline with Markdown with DocFx which will probably make it easier to scrape docs.\r\n* Adds a landing page in the API Docs section which is a copy of this page: https://github.com/apache/lucene-solr/blob/branch_4x/lucene/core/src/java/overview.html (links would need to be fixed), this file is committed to /api/index.md\r\n* Adds example docs and table of contents: /api/search/highlight which includes the docs taken from the package.html files (i.e. https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.0/lucene/highlighter/src/java/org/apache/lucene/search/highlight/package.html) \r\n* Updated the header menu to point to custom documentation articles and also the API docs\r\n\r\nI cannot figure out why docfx is complaining about System cref's such as `Invalid cref value \"T:IDictionary{string, string}\"`, i think it has to do with a missing config `externalReference` which is now obsoleted so hoping that the newer docfx version fixes this once i get it building.\r\n\r\nIf you wish to test this setup without waiting for the entire metadata for all classes to be created, you can update the /docfx.json file metadata/src/files section from `\"**.csproj\"`  to `\"**/Lucene.Net.csproj\"`  (which will just generate the API docs for that particular project), or just clear that out entirely if you just want to build the non-api docs for testing. \r\n\r\nCurrently DocFx does not support the namespace style docuementation that Sandcastle used to support, there's an open issue for that here: https://github.com/dotnet/docfx/issues/952 So for namespace style documentation such as https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.0/lucene/highlighter/src/java/org/apache/lucene/search/highlight/package.html we would currently have to host these as documentation articles. Currently I've put documentation articles in the /docs folder but it's possible to have any number of different articles folders if required.\r\n\r\nAs for changing how the namespaces are shown on the left hand side and ordering by more important ones, this could be achieved by modifying the generated /api/toc.yml file after it is built. This file is autogenerated by docfx when it's building the API docs. As far as I can tell one way to do this would be with a custom Post Processor: https://dotnet.github.io/docfx/tutorial/howto_add_a_customized_post_processor.html but OOTB I don't think this is possible with standard configuration.\r\n\r\nI'm not really sure what we can do about the .NET Standard vs .NET Framework, there is some mention of this in this issue: https://github.com/dotnet/docfx/issues/1518 which apparently is fixed in this PR https://github.com/dotnet/docfx/pull/1549 . I will just need to figure out exactly what all this means and what the options are. \r\n\r\nFor token replacement, i think this could also be achieved with a Post Processor in one way or another https://dotnet.github.io/docfx/tutorial/howto_add_a_customized_post_processor.html, though i did see this feature in later release notes: https://github.com/dotnet/docfx/issues/1737 \r\n\r\nThere's quite a lot of docs on docfx here http://dotnet.github.io/docfx/tutorial/docfx_getting_started.html \r\n\r\nHope this answers a few of your questions. I'll keep researching into the new docfx versions, what support it has and why we can't use it currently.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/312173123/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/312231074","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-312231074","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":312231074,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMjIzMTA3NA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-06-30T10:16:04Z","updated_at":"2017-06-30T10:16:04Z","author_association":"CONTRIBUTOR","body":"I have added some comments inline.\r\n\r\nI also [asked a question](https://stackoverflow.com/questions/44670354/how-do-you-create-code-references-with-custom-link-text-in-documentation-comment) about creating code links in DocFx with custom link text that you might find the comments helpful for.\r\n\r\n> As for changing how the namespaces are shown on the left hand side and ordering by more important ones, this could be achieved by modifying the generated /api/toc.yml file after it is built. This file is autogenerated by docfx when it's building the API docs. As far as I can tell one way to do this would be with a custom Post Processor: https://dotnet.github.io/docfx/tutorial/howto_add_a_customized_post_processor.html but OOTB I don't think this is possible with standard configuration.\r\n\r\nNormally when faced with post-build issues such as these I either overwrite the contents of the file by [generating it in the Powershell script](https://github.com/apache/lucenenet/blob/master/build/build.ps1#L304-L351) or use the Powershell script to update the contents of the file, depending on how much of the file I need control over.\r\n\r\nBut I wasn't referring to the order of them so much as the depth. For example, it would be best if we had a link to `Lucene.Net.Analysis` in the TOC that when clicked expanded the `Lucene.Net.Analysis.Ar`, `Lucene.Net.Analysis.Bg`, etc. instead of having all of the Analysis.Common hierarchy in the initial view that loads.\r\n\r\nAnyway, I will wade through the rest of this and get back to you if I have any other questions/comments.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/312231074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313511658","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-313511658","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":313511658,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzUxMTY1OA==","user":{"login":"geobmx540","id":662915,"node_id":"MDQ6VXNlcjY2MjkxNQ==","avatar_url":"https://avatars.githubusercontent.com/u/662915?v=4","gravatar_id":"","url":"https://api.github.com/users/geobmx540","html_url":"https://github.com/geobmx540","followers_url":"https://api.github.com/users/geobmx540/followers","following_url":"https://api.github.com/users/geobmx540/following{/other_user}","gists_url":"https://api.github.com/users/geobmx540/gists{/gist_id}","starred_url":"https://api.github.com/users/geobmx540/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geobmx540/subscriptions","organizations_url":"https://api.github.com/users/geobmx540/orgs","repos_url":"https://api.github.com/users/geobmx540/repos","events_url":"https://api.github.com/users/geobmx540/events{/privacy}","received_events_url":"https://api.github.com/users/geobmx540/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-06T20:34:44Z","updated_at":"2017-07-06T20:34:44Z","author_association":"CONTRIBUTOR","body":"> @synhershko - Any particular reason you are suggesting Github pages instead of hosting at http://lucenenet.apache.org/docs/3.0.3/Index.html? I think it would be less confusing if users only have to modify the version number in the URL to get to the latest. Although, since most of the new classes are not in the same location as the old, now would be the ideal time to jump to a different host if that is indeed the plan.\r\n\r\nI like having them at lucenenet.apache.org/docs I think that's the right solution.\r\n\r\n> Question: For pre-releases should we be releasing new docs on each release in a new versioned location, or updating the existing 4.8.0 version location until it is fully released? Seems the former would be a better option in terms of legacy usage and automation of deployment, but may end up taking up lots of space if we end up with a lot of pre-releases.\r\n\r\nI'd say cross the space issue when it becomes an issue.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313511658/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313514597","html_url":"https://github.com/apache/lucenenet/pull/207#issuecomment-313514597","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/207","id":313514597,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzUxNDU5Nw==","user":{"login":"geobmx540","id":662915,"node_id":"MDQ6VXNlcjY2MjkxNQ==","avatar_url":"https://avatars.githubusercontent.com/u/662915?v=4","gravatar_id":"","url":"https://api.github.com/users/geobmx540","html_url":"https://github.com/geobmx540","followers_url":"https://api.github.com/users/geobmx540/followers","following_url":"https://api.github.com/users/geobmx540/following{/other_user}","gists_url":"https://api.github.com/users/geobmx540/gists{/gist_id}","starred_url":"https://api.github.com/users/geobmx540/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geobmx540/subscriptions","organizations_url":"https://api.github.com/users/geobmx540/orgs","repos_url":"https://api.github.com/users/geobmx540/repos","events_url":"https://api.github.com/users/geobmx540/events{/privacy}","received_events_url":"https://api.github.com/users/geobmx540/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-06T20:46:53Z","updated_at":"2017-07-06T20:46:53Z","author_association":"CONTRIBUTOR","body":"The first approach is much more intuitive and inline with the rest of the C# ecosystem.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313514597/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313516326","html_url":"https://github.com/apache/lucenenet/pull/207#issuecomment-313516326","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/207","id":313516326,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzUxNjMyNg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-06T20:53:55Z","updated_at":"2017-07-06T20:53:55Z","author_association":"CONTRIBUTOR","body":"What about naming? Do you think it would be more intuitive to call it `AcquireReference()` and make the class named `Reference` instead of `ReferenceContext`? Seems like that would be a bit more intuitive from a user point of view.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313516326/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313522108","html_url":"https://github.com/apache/lucenenet/pull/207#issuecomment-313522108","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/207","id":313522108,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzUyMjEwOA==","user":{"login":"geobmx540","id":662915,"node_id":"MDQ6VXNlcjY2MjkxNQ==","avatar_url":"https://avatars.githubusercontent.com/u/662915?v=4","gravatar_id":"","url":"https://api.github.com/users/geobmx540","html_url":"https://github.com/geobmx540","followers_url":"https://api.github.com/users/geobmx540/followers","following_url":"https://api.github.com/users/geobmx540/following{/other_user}","gists_url":"https://api.github.com/users/geobmx540/gists{/gist_id}","starred_url":"https://api.github.com/users/geobmx540/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geobmx540/subscriptions","organizations_url":"https://api.github.com/users/geobmx540/orgs","repos_url":"https://api.github.com/users/geobmx540/repos","events_url":"https://api.github.com/users/geobmx540/events{/privacy}","received_events_url":"https://api.github.com/users/geobmx540/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-06T21:18:04Z","updated_at":"2017-07-06T21:18:48Z","author_association":"CONTRIBUTOR","body":"Is our reference only an `IndexSearcher` and it's descendants? I'm partial to the `Context` language - I'm using EF as my implementation reference because I think it's widely known, accepted and pretty well architected. `DbContext` is well known, just as perhaps `LuceneContext` could be very intuitive (as the class) with the method `Context()`.\r\n\r\nWe could also overload  `ReferenceContext.cs` (or `LuceneContext`) to have pass through methods directly to the context/reference IndexSearch to avoid the extra method call to get the Reference. This would require an additional constraint on `T`\r\n\r\n```\r\nusing (var context = searcherManager.Context()) \r\n{\r\n      // General use case\r\n     var topDocs = context.Search(query, 10);\r\n\r\n     // Cast if you're trying to reach a descendant class type with additional methods / properties\r\n     BetterIndexSearcher searcher = (BetterIndexSearcher)context.Context;\r\n     var betterTopDocs = searcher.BetterSearch(query,10);\r\n}\r\n```\r\n\r\nor alternatively,\r\n\r\n```\r\nusing (var context = (BetterIndexSearcher)searcherManager.Context()) \r\n{\r\n      var topDocs = context.BetterSearch(query, 10);\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313522108/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313538542","html_url":"https://github.com/apache/lucenenet/pull/207#issuecomment-313538542","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/207","id":313538542,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzUzODU0Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-06T22:39:44Z","updated_at":"2017-07-06T22:39:44Z","author_association":"CONTRIBUTOR","body":"Looks nice. Although, I tend to favor the \"all methods are verbs\" and \"all properties are nouns or adjectives\"  methodology. For example, I would expect a method named `Buffer()` to buffer something, not return a buffer. In this case that argument is a bit weaker, but it still feels like `GetContext()` would be more clear than `Context()`.\r\n\r\nI primarily named it `AcquireContext()` because it is essentially the same functionality as the existing `Acquire()` method (from Java), so the similar names seem natural. But `GetContext()` is also clear (and more concise).\r\n\r\nHmm, that wasn't what I meant by \"other subclasses\". Actually, I made the constructor of `ReferenceContext` internal so it is effectively sealed to the outside world. What I was referring to is the fact that SearcherManger is just one of a few (with many more possible) subclasses of `ReferenceManager<G>`. \r\nAnd since `ReferenceManager<G>` is generic, the `Reference` property is also generic and the cast is not necessary - its type is specific to the subclass of `ReferenceManager<G>`. \r\n\r\nHowever, we can't very well name the property `Searcher` (so we have `context.Searcher`) because it wouldn't be generic enough for the other subclasses of `ReferenceManager<G>`. Well, we could by making extension methods and a custom \"holder\" type for each subclass of `ReferenceManager<G>`. But the disadvantage there is repetitive similar code. Maybe it would be worth it for such an integral part of the API, though.\r\n\r\nThe purpose of the using block here isn't to dispose anything really - it is just to help ensure the variable isn't utilized after its reference is no longer tracked. The context is just a \"holder\" for the reference to implement `Dispose()` on, which tells the parent `ReferenceManager<G>` class that we are done using the reference. You can see an example of how it looks with the Java functions [here](https://github.com/synhershko/LuceneNetDemo/blob/master/LuceneNetDemo/GitHubIndex.cs#L157-L184) with a more verbose finally block. Same thing, but shaves a few lines of code off of the block. You don't gain much if you need to catch an exception, though because you still need to put a try catch inside of the using block.\r\n\r\nThe using block does do one nice thing. Since it is a block, the variable goes out of scope when it is done.\r\n\r\n```c#\r\nusing (var context = searcherManager.AcquireContext)\r\n{\r\n    var foo = context.Reference;\r\n    foo.Search();\r\n} // foo goes out of scope\r\n```\r\nThe only issue is that it is not 100% obvious that this is a problem:\r\n\r\n```c#\r\nSearcher foo;\r\n\r\nusing (var context = searcherManager.AcquireContext)\r\n{\r\n    foo = context.Reference;\r\n} // foo doesn't go out of scope - BAD\r\n\r\nfoo.Search(); // Not allowed here\r\n```\r\n\r\nBut this just seems to be a scenario where there is no real way to force the end user to follow the rules. You just have to document the right way and hope they follow the documentation.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313538542/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313581154","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-313581154","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":313581154,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzU4MTE1NA==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-07T03:58:49Z","updated_at":"2017-07-07T03:58:49Z","author_association":"CONTRIBUTOR","body":"Some updated info:\r\n\r\n* I've got the docfx build to work with the latest docfx version, the problem was this: https://github.com/dotnet/docfx/issues/1817 which means I've had to exclude the SURROGATE constants from the output docs (but i think that is probably fine), they're putting a requested fix for this with the roslyn team\r\n* It would seem that it may be possible to get namespace documentation working. I've been trying to research this using a docfx feature called 'overwrite' and there's mention that it works so I've asked for feedback on the topic: https://github.com/dotnet/docfx/issues/229#issuecomment-313567058. I've got overwrites to work at the class level which might be handy in the future but would be great to see if it can work at the namespace level\r\n* I've added a WIKI section to show how that can be done, I've copied the HTML content from the current wiki, I only did the home page, getting started and mail group pages as examples and update the links between them. The html could/should be formatted to markdown (not sure how the source of the current wiki is?) but that is optional but the links between pages should be updated to markdowns since that's much easier to generate the links.\r\n\r\nThere's still lots for me to look into based on the previous questions. I'll keep trying out things as I find time.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313581154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313582797","html_url":"https://github.com/apache/lucenenet/pull/207#issuecomment-313582797","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/207","id":313582797,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzU4Mjc5Nw==","user":{"login":"geobmx540","id":662915,"node_id":"MDQ6VXNlcjY2MjkxNQ==","avatar_url":"https://avatars.githubusercontent.com/u/662915?v=4","gravatar_id":"","url":"https://api.github.com/users/geobmx540","html_url":"https://github.com/geobmx540","followers_url":"https://api.github.com/users/geobmx540/followers","following_url":"https://api.github.com/users/geobmx540/following{/other_user}","gists_url":"https://api.github.com/users/geobmx540/gists{/gist_id}","starred_url":"https://api.github.com/users/geobmx540/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geobmx540/subscriptions","organizations_url":"https://api.github.com/users/geobmx540/orgs","repos_url":"https://api.github.com/users/geobmx540/repos","events_url":"https://api.github.com/users/geobmx540/events{/privacy}","received_events_url":"https://api.github.com/users/geobmx540/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-07T04:15:20Z","updated_at":"2017-07-07T04:15:20Z","author_association":"CONTRIBUTOR","body":"Ah, ok I misunderstood your use case regarding other subclasses. I agree, the amount of repetition in the code for that is probably unwieldy.\r\n \r\nNo argument with `GetContext()`, even though it doesn't match java, it matches .net style (i.e. `GetEnumerator()`\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313582797/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313590200","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-313590200","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":313590200,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzU5MDIwMA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-07T05:27:05Z","updated_at":"2017-07-07T05:27:05Z","author_association":"CONTRIBUTOR","body":"Much appreciated - keep up the good work 👍\r\n\r\nI am almost to the point where I will start documenting the [new CLI tool](https://github.com/NightOwl888/lucenenet/tree/cli/src/tools). Originally, I was thinking about making 1 page per command like Microsoft did on their [dotnet tool](https://docs.microsoft.com/en-us/dotnet/core/tools/), but there isn't quite enough here for all of that. It would be easier to have 1 document for each of the 4 subcommands and a small section below for each command + 1 overview document describing the tool in general (so 5 pages of docs).\r\n\r\nThis tool contains all of the index maintenance tasks (checking, fixing, upgrading, splitting, merging, moving segments around, etc.) plus a set of demos that can be run, and source code viewed, or exported. The plan is to put this tool on Chocolatey so it can be easily installed and updated, as well as make it part of the CI release process.\r\n\r\nWould building the docs in Markdown and placing them in a subdirectory of tools be appropriate, or would something else work better?\r\n\r\n> but that is optional but the links between pages should be updated to markdowns since that's much easier to generate the links.\r\n\r\nThis is one point that is a bit unclear to me. In the past I have tried to make links between pages on GitHub and they didn't always work - I ended up using absolute URLs to avoid the problems (but I don't recall exactly what they were). Do you have a suggestion about the *correct* way to make relative links between Markdown pages?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313590200/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313591076","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-313591076","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":313591076,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzU5MTA3Ng==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-07T05:34:23Z","updated_at":"2017-07-07T05:34:23Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 If you put markdown files in the /apidocs/tools folder that should be fine and then i can update any \"toc\" files to point to them. Currently that folder already exists for download 'tools' that help the docfx build process but i'll move that to a better temporary folder (i.e. 'obj/tools') . The correct way to create links between MD pages can be seen here: https://github.com/Shazwazza/lucenenet/commit/d440348113295c2d88935b88447297e3ed17fe6c#diff-a121785cab27b808ad3b4d2fbd049bc7R6  and docfx will ensure it's all wired up correctly when it builds. Of course if you want to go up a level it's the standard \"../\" syntax.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313591076/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313591791","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-313591791","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":313591791,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzU5MTc5MQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-07T05:39:53Z","updated_at":"2017-07-07T05:39:53Z","author_association":"CONTRIBUTOR","body":"Actually, I was referring to the new \"tools\" folder under \"src\" (to keep the docs near the source code the same as they would be by converting the HTML pages from Java). \r\n\r\nBTW - There is some [discussion about the WIKI](http://apache.markmail.org/search/?q=lucenenet+wiki#query:lucenenet%20wiki%20from%3A%22Shad%20Storhaug%22%20order%3Adate-backward+page:1+mid:j6tajbocpy77nop6+state:results) happening on the [dev mailing list](https://cwiki.apache.org/confluence/display/LUCENENET/Mailing+Lists). If you are not already, you should subscribe to stay looped on on this.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313591791/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313597166","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-313597166","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":313597166,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzU5NzE2Ng==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-07T06:19:57Z","updated_at":"2017-07-07T06:19:57Z","author_association":"CONTRIBUTOR","body":"Ah i see, we can include any md files from anywhere in the solution so wherever you want to put them will work just fine :)\r\n\r\nI'm on the list so all good, just haven't had a chance to reply quite yet, will do soon","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313597166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313848209","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-313848209","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":313848209,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzg0ODIwOQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-08T10:37:57Z","updated_at":"2017-07-08T10:37:57Z","author_association":"CONTRIBUTOR","body":"@Shazwazza - Ok, you have explained how to link from one document to another in Markdown. How would you do an anchor within the same document so that it works in DocFx? \r\n\r\nI went through the tutorial [here](https://dotnet.github.io/docfx/tutorial/links_and_cross_references.html), but there was no mention of how to do it. It works in GitHub if you do...\r\n\r\n```\r\n## Something To Link To\r\n```\r\n\r\nand then link to it using\r\n\r\n```\r\n[link text](#something-to-link-to)\r\n```\r\n\r\nIs that also the case with DocFx?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/313848209/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/314301446","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-314301446","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":314301446,"node_id":"MDEyOklzc3VlQ29tbWVudDMxNDMwMTQ0Ng==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-11T02:03:15Z","updated_at":"2017-07-11T02:03:15Z","author_association":"CONTRIBUTOR","body":"Yes that's exactly how it works in DocFx too","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/314301446/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/314304006","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-314304006","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":314304006,"node_id":"MDEyOklzc3VlQ29tbWVudDMxNDMwNDAwNg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-11T02:20:55Z","updated_at":"2017-07-11T02:20:55Z","author_association":"CONTRIBUTOR","body":"Thanks. I ended up dividing them into separate documents because it was too easy to scroll by the end of the command you are looking at into the next command, so that was not needed anyway.\r\n\r\nhttps://github.com/NightOwl888/lucenenet/tree/cli/src/tools/lucene-cli/docs\r\n\r\nLet me know if there is anything with this structure that isn't going to work. I am working on fixing an issue with the build script that was caused by adding this CLI project to the solution, after which I will be able to merge this to master. Then I can work on adding the CLI tool to the build script at the same time you are working on integrating these Markdown pages into the API docs.\r\n\r\nTo remove the Java CLI info from the original API docs, we should probably replace it with a link to the corresponding command (or commands) here in the doc comments. Any ideas how that could be done?\r\n\r\nWe could just remove it from the API docs altogether, but it feels like there still needs to be some sort of API document telling you which command a class is used in, and on these Markdown docs which class is used by a command. So we will need a way to link both directions.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/314304006/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/314394218","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-314394218","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":314394218,"node_id":"MDEyOklzc3VlQ29tbWVudDMxNDM5NDIxOA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-11T09:52:45Z","updated_at":"2017-07-11T09:52:45Z","author_association":"CONTRIBUTOR","body":"FYI - The CLI tool and docs have been merged to master.\r\n\r\nhttps://github.com/apache/lucenenet/tree/cli/src/tools/lucene-cli/docs","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/314394218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/314626857","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-314626857","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":314626857,"node_id":"MDEyOklzc3VlQ29tbWVudDMxNDYyNjg1Nw==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-12T02:30:20Z","updated_at":"2017-07-12T02:30:20Z","author_association":"CONTRIBUTOR","body":"Awesome, I'll try to find some time this week to see what I can do !","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/314626857/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/317257165","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-317257165","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":317257165,"node_id":"MDEyOklzc3VlQ29tbWVudDMxNzI1NzE2NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-23T14:32:54Z","updated_at":"2017-07-23T14:32:54Z","author_association":"CONTRIBUTOR","body":"Hi Jens,\r\n\r\nBefore I give this a proper review, I would like to try to plug this into an AspNetCore app to see if I can get it to work. Could you provide some instructions to how to plug this in? \r\n\r\nI would expect there to be an extension method for `IHostingEnvironment` or `IApplicationBuilder` so it could be added to the application:\r\n\r\n```c#\r\n    public class Startup\r\n    {\r\n        public Startup(IHostingEnvironment env)\r\n        {\r\n            var builder = new ConfigurationBuilder()\r\n                .SetBasePath(env.ContentRootPath)\r\n                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\r\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\r\n                .AddEnvironmentVariables();\r\n            Configuration = builder.Build();\r\n        }\r\n\r\n        public IConfigurationRoot Configuration { get; }\r\n\r\n        // This method gets called by the runtime. Use this method to add services to the container.\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            // Add framework services.\r\n            services.AddMvc();\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n        {\r\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n            loggerFactory.AddDebug();\r\n\r\n            app.UseMvc();\r\n        }\r\n    }\r\n```\r\n\r\nFor example `services.AddLuceneReplicator()` or `app.UseLuceneReplicator()`. I would also expect it to configure the default routing to act as a server, since out of the box it should use the same URL scheme as Lucene's replicator.\r\n\r\nMaybe what we have here is a lower level bare-bones component which we will also need, but it feels like the additional steps to get from here to a working app need to be simplified (or at the very least documented).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/317257165/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318617327","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-318617327","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":318617327,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODYxNzMyNw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-28T10:21:51Z","updated_at":"2017-07-28T10:44:18Z","author_association":"CONTRIBUTOR","body":"So for the past week I have been trying to make a very crude \"prototype\" project that integrates this... all in all working with AspNetCore it self actually posed far more trouble than integrating the replicator into it as an afterthought... (Which I think is what will happen in many cases)...\r\n\r\nIt does have some gotchas and I am considering some changes in the HttpReplicator and HttpClientBase as a consequence... Even though the ReplicatorService it self was super easy to integrate, there is things I am reconsidering about it... \r\n\r\nHere is an example of it integrated into a \"Mvc\"Controller:\r\n\r\n```csharp\r\n    [Route(\"api/[controller]\")]\r\n    public class ReplicateController : Controller\r\n    {\r\n        [HttpGet(\"{*path}\")]\r\n        public void Get(string path) => Index.Instance.Service.Perform(Request, Response);\r\n    }\r\n```\r\n\r\nThis requires the replicator to be created as:\r\n```csharp\r\n    replicator = new LocalReplicator();\r\n    Service = new ReplicationService(new Dictionary<string, IReplicator>()\r\n    {\r\n        .... indexes\r\n    }, \"/api/replicate\");\r\n```\r\n\r\nMost notable is the `[Route(\"api/[controller]\")]` + the controller type that has to be in sync with whats provided in the ReplicationService ctor: `\"/api/replicate\"` (replicate because we named the controller ReplicateController.\r\n\r\n> I would expect there to be an extension method for IHostingEnvironment or IApplicationBuilder so it could be added to the application:\r\n\r\nI don't think that would make all that much sense, there is allot more to it and I think it would be difficult, at least at this point to make the integration so simple as the \"user\" needs to manage publishing revisions etc. them self...\r\n\r\nBut I also don't think \"middleware\" is the right place for this, instead it depends on the kind of solution your making, often I would think that you would have some sort of web-api along side of it, in this case it should go into a controller, much like above however it DOES feel a bit awkward that we have a Get method that is void and doesn't have any parameters at all.\r\n\r\nHowever I do think it fair to provide the signature currently given by the `Lucene.Net.Replicator.AspNetCore` as a basic approach as that is very similar to the Java version, which means it feels familiar and people will be able to read Java examples and somewhat translate them to .NET.\r\n\r\nHowever I would like to supplement this with something that felt more natural, but it requires allot more thought, something that might be easier with a \"working\" solution in front of me, which I have now... But it would still take time.\r\n\r\nSo short term brings me back to that there are some minor reconsideration I wan't to take on the HttpReplicator and HttpClientBase as well as the ReplicatorService and the abstraction.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318617327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318620914","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-318620914","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":318620914,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODYyMDkxNA==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-28T10:42:01Z","updated_at":"2017-07-28T10:42:01Z","author_association":"CONTRIBUTOR","body":"> (or at the very least documented)\r\n\r\nThis though, will very much be needed because as mentioned, it's apparently not that simple, and currently I don't fully get the idea behind the design from the java implementation... The things I do get though is that it is a master/slave implementation and a polling implementation.\r\n\r\nRight now I am trying to see if I can find some equivalent documentation from the Java parts.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318620914/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318684390","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-318684390","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":318684390,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODY4NDM5MA==","user":{"login":"AndyPook","id":781227,"node_id":"MDQ6VXNlcjc4MTIyNw==","avatar_url":"https://avatars.githubusercontent.com/u/781227?v=4","gravatar_id":"","url":"https://api.github.com/users/AndyPook","html_url":"https://github.com/AndyPook","followers_url":"https://api.github.com/users/AndyPook/followers","following_url":"https://api.github.com/users/AndyPook/following{/other_user}","gists_url":"https://api.github.com/users/AndyPook/gists{/gist_id}","starred_url":"https://api.github.com/users/AndyPook/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndyPook/subscriptions","organizations_url":"https://api.github.com/users/AndyPook/orgs","repos_url":"https://api.github.com/users/AndyPook/repos","events_url":"https://api.github.com/users/AndyPook/events{/privacy}","received_events_url":"https://api.github.com/users/AndyPook/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-28T15:28:53Z","updated_at":"2017-07-28T15:28:53Z","author_association":"NONE","body":"Just sticking my 2p/2c in again...\r\n\r\nHaving this as middleware with a ```UseLuceneReplicator(\"rootPrefix\", service)``` would be a lot more \"natural\" from an aspnetcore point of view.\r\n\r\nPart of the reason that the controller looks a little odd is due to the signature of ```Perform```. It is odd to use the Request/Response properties in a Controller. In order to make the routing work it also needs \"{path*}\" and the arg etc which is ignored cos it actually pulls those direct from the Request.\r\n\r\nLooking at how Perform works, middleware taking control of the req/res at the owin layer without all the mvc/routing shenanigans. Having it intercept a few path(s) (ie ```StartsWith(routprefix```) would seem the \"right thing to do\". That way the developer can just add the middleware without needing to get involved in creating a \"weird\" controller or messing with routing or thinking about DI or...\r\nThe MVC feature is just middleware after all.\r\n\r\nI think there may be an odd side effect if an exception occurs part way through. ie a partial response with a json serialized exception added to the end which would be hard for the client to deal with (although if this is how the java version works...). \r\n\r\nOr if you think the Controller approach is better, I could imagine wrapping some of the behavior in a custom ```IActionResult```. This could deal with handling the exception and creating the right kind of http response. This would leave the ReplicationService with just creating the stream.\r\n\r\nMight also be worth digging into how aspnetcore deals with big streams (ie does it buffer them in memory before sending the first byte like old asp/iis did or can it do something smarter).\r\n\r\nAnyway, just some thoughts... what do you think?\r\n\r\nI ought to put my money where my mouth is, write some code and contribute :)\r\nI haven't used VS2015 in what seems like forever. We'll see what the weekend brings\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318684390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318708629","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-318708629","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":318708629,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODcwODYyOQ==","user":{"login":"AndyPook","id":781227,"node_id":"MDQ6VXNlcjc4MTIyNw==","avatar_url":"https://avatars.githubusercontent.com/u/781227?v=4","gravatar_id":"","url":"https://api.github.com/users/AndyPook","html_url":"https://github.com/AndyPook","followers_url":"https://api.github.com/users/AndyPook/followers","following_url":"https://api.github.com/users/AndyPook/following{/other_user}","gists_url":"https://api.github.com/users/AndyPook/gists{/gist_id}","starred_url":"https://api.github.com/users/AndyPook/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndyPook/subscriptions","organizations_url":"https://api.github.com/users/AndyPook/orgs","repos_url":"https://api.github.com/users/AndyPook/repos","events_url":"https://api.github.com/users/AndyPook/events{/privacy}","received_events_url":"https://api.github.com/users/AndyPook/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-28T17:02:57Z","updated_at":"2017-07-28T17:02:57Z","author_association":"NONE","body":"just playing... here's how a middleware might look\r\n\r\n```csharp\r\n\tpublic class Startup\r\n\t{\r\n\t\t// usual boiler plate\r\n\r\n\t\t// add some method that bootstraps the index and replication service\r\n\r\n\t\tpublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n\t\t{\r\n\t\t\tloggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n\t\t\tloggerFactory.AddDebug();\r\n\r\n\t\t\tapp.UseLuceneReplicator(\"/_replicator\", \"replicaService123\");\r\n\r\n\t\t\tapp.UseMvc();\r\n\t\t}\r\n\t}\r\n\r\n\t//  these bits live in Lucene.Net.Replicator.AspNetCore\r\n\tpublic static class LuceneReplicatorMiddlewareExtensions\r\n\t{\r\n\t\tpublic static IApplicationBuilder UseLuceneReplicator(this IApplicationBuilder builder, PathString prefix, object replicaService)\r\n\t\t{\r\n\t\t\treturn builder.Map(prefix, app => app.UseMiddleware<LuceneReplicatorMiddleware>(replicaService));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class LuceneReplicatorMiddleware\r\n\t{\r\n\t\tprivate readonly RequestDelegate next;\r\n\t\tprivate readonly object replicaService;\r\n\r\n\t\tpublic LuceneReplicatorMiddleware(RequestDelegate next, object replicaService)\r\n\t\t{\r\n\t\t\tthis.next = next;\r\n\t\t\tthis.replicaService= replicaService;\r\n\t\t}\r\n\r\n\t\tpublic async Task Invoke(HttpContext context)\r\n\t\t{\r\n\t\t\tvar req = context.Request;\r\n\r\n\t\t\tawait context.Response.WriteAsync($\"<p>{DateTime.Now.ToString()}</p>\");\r\n\t\t\tawait context.Response.WriteAsync($\"<p>replicaService={replicaService.ToString()}</p>\");\r\n\t\t\tawait context.Response.WriteAsync($\"<p>path={req.Path}</p>\");\r\n\r\n\t\t\tawait context.Response.WriteAsync($\"<ul>\");\r\n\t\t\tforeach(var q in req.Query)\r\n\t\t\t\tawait context.Response.WriteAsync($\"<li>{q.Key}={q.Value}</li>\");\r\n\t\t\tawait context.Response.WriteAsync($\"</ul>\");\r\n\t\t}\r\n\t}\r\n```\r\n```app.Map``` intercepts requests with that prefix (they call it \"branching the request pipeline\")\r\n\r\nWhere I've used \"replicaService123\" is just a demo of how to pass stuff into the middleware. You'd substitute the ```ReplicationService```. Then ```Invoke``` could be as simple as ```replicaService.Perform(context.Request, context.Response)```. But it might be better to pull the exception handling part out into the middleware and just pass the response stream into the service.\r\n\r\nNote: ```req.Path``` is just the part coming after the prefix\r\n\r\nAnyway, just an idea","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318708629/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318743043","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-318743043","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":318743043,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODc0MzA0Mw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-28T19:33:21Z","updated_at":"2017-07-28T19:46:29Z","author_association":"CONTRIBUTOR","body":"Personally, I generally don't like the middleware idea, at least not as a starting point because it doesn't feel like what we are adding sits at such a \"general\" level... It doesn't feel like across the board infrastructure in the same way as Mvc, Ioc etc.\r\n\r\nAnother thing is that we don't really hide much complexity for the developer but instead take away his freedom to decide when and where indexes etc. should be initialized or at least provide some pre-stage knowledge of it as each index would have to have a replicator configured, these should then be accessible from where he writes to the index has they have to be notified of changes...\r\n\r\nSo all in all, I would like to provide both flexibility and ease of use, but I would rather do the later first with the first one in mind so that can be added on top later (Or even by 3rd party libraries where people could try out different approaches, so we can find the best one)...\r\n\r\nIn other words, I won't block people to implement it as middle-ware if they wan't to, even though I personally feel that would be misplaced, on the contrary... But I don't feel like I have enough knowledge and experience to provide them with a good solution yet... So I aim for a more general one.\r\n\r\nAnyways, wouldn't the above just be a glorified version of:\r\n\r\n```\r\n            app.Map(\"/_replicator\", builder => builder.Run(async context =>\r\n            {\r\n                await Task.Yield();\r\n                service.Perform(context.Request, context.Response);\r\n            }));\r\n```\r\n\r\nIn any case, it shows that we can add iterations on top of it later, let it grow and that would be what I want to allow for.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318743043/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318775501","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-318775501","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":318775501,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODc3NTUwMQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-28T22:21:22Z","updated_at":"2017-07-28T22:21:22Z","author_association":"CONTRIBUTOR","body":"> Another thing is that we don't really hide much complexity for the developer but instead take away his freedom to decide when and where indexes etc. should be initialized or at least provide some pre-stage knowledge of it as each index would have to have a replicator configured, these should then be accessible from where he writes to the index has they have to be notified of changes...\r\n\r\nI disagree. We are not taking anything away from the user by doing this - they are always free to drop to the lower-level Lucene APIs to do any low-level configuration such features.\r\n\r\nBut the grand plan is (hopefully...someday...with enough contributions) to have integration packages with all of the .NET UI frameworks so application-level configuration can be done at application startup using DI and so all of the boilerplate code that everyone writes to add search to the application can be reduced to a fluent API configuration (the same way that most .NET libraries do it). We know nearly every web app will need an IndexWriter per index registered as a singleton. Why not do that with one (or two) `.AddSearch()` method where the configuration operations are specified as simple variables in one place (the place where every other global feature of the app is configured)? We could easily provide a way to do most of the common options that apply to 80-90% of users (and would save 80-90% of users from having to deal with a complex API to get the simple features they want).\r\n\r\nI don't see any reason at all to expose the HttpRequest/HttpResponse in this API - there are only a few ways this can go that are sensible. Sure, this might make sense at a low level (particularly if this is the piece that we plug into every HTTP listener-capable framework), but these details are not necessary for it to be useful for the end user (after all, they are interacting with it through a URL).\r\n\r\nAnd sure, there are other features of Lucene that need to interact with the UI directly and so forth that need other integration APIs to interoperate. But certainly there is no question that an HTTP listener is a one-time per application thing, not something that would ever be registered in a controller. The client on the other hand may be a different story.\r\n\r\nAlso, we should make the .NET version of replicator support interop with the Java Lucene replicator. For that to work, the URL scheme should be the same as Lucene by default. The [replication service documentation](https://lucene.apache.org/core/4_8_0/replicator/org/apache/lucene/replicator/http/ReplicationService.html) clearly specifies this as:\r\n\r\n```\r\n/<context>/<shard>/<action>\r\n```\r\n\r\nOf course, we should probably provide a way to override this - routing conflicts happen. But this is the logical default setting. I haven't looked into whether this is even configurable in Java or would require a custom compile in order to get it to interoperate.\r\n\r\nMost likely the common use case for the server will be a standalone application that serves as a server only. So, I would expect routing conflicts in this situation to be rare.\r\n\r\nEven if you go the path of using a controller for this (which is an option), we should stay away from attribute routing for the simple reason that it is impossible to change after it is compiled into the library. A better argument for never using it is the fact that routing is *order sensitive* and .NET Reflection (which is how Attributes are read) by definition has *undefined order*. I have answered who knows how many questions on StackOverflow for people who have hit that landmine. The solution is to add an Order parameter to the attributes, but once again if the attribute is compiled into the DLL there is no way to fix this problem.\r\n\r\nOn the other hand, using convention-based routing allows you do define the AddLuceneReplication() method where the route will be added in relation to the other routes, based on the order the methods are called at application startup (which is unclear to me if that is possible with middleware - it should be...).\r\n\r\nI made a similar implementation in MvcSiteMapProvider for the [`XmlSiteMapController`](https://github.com/maartenba/MvcSiteMapProvider/blob/master/src/MvcSiteMapProvider/MvcSiteMapProvider/Web/Mvc/XmlSiteMapController.cs).  It registers its own routes using convention-based routing. It used WebActivator to load the routing for the controller. Although, this was before Microsoft made the nice `Startup.cs` class where everything could be configured using extension methods so this is not exactly how I would do it now. Instead, I would give the user the ability to configure it in `Startup.cs`, where other 3rd parties do it. And that is where I would provide extension method overloads to configure alternate route URLs and any other advanced options that may be needed.\r\n\r\nThe user of course always has the option to *not* call the method at application startup, build their own controller, and dig into any of the more advanced options (assuming there are any left that are not in the extension method overloads). But why should everyone have to do this?\r\n\r\n>  it's apparently not that simple, and currently I don't fully get the idea behind the design from the java implementation... The things I do get though is that it is a master/slave implementation and a polling implementation.\r\n\r\nThere is [some documentation](https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.0/lucene/replicator/src/java/org/apache/lucene/replicator/package.html) in the repo about how replicator is configured in Java, but it seems to be missing from the [4.8.0 API docs](https://lucene.apache.org/core/4_8_0/replicator/index.html). \r\n\r\nA quick search also reveals [this mailing list thread](https://lists.gt.net/lucene/java-user/225677) which links to [a blog post](http://shaierera.blogspot.com/2013/05/the-replicator.html) that seems to describe it in more detail.\r\n\r\nDoes this help? If not, I suggest contacting the Lucene team (and link to the above) via the Lucene user list to see if they can provide better answers on the intended workflow. I skimmed it, but it is still not very clear to me where the client (who calls the server every 30 seconds) would need to be. Maybe a Quartz.net task? Or a Windows service/other type of persistent app that runs when the computer is started? Certainly, that is the part that has the most complexity - it needs to keep track of the URLs to call to replicate everything and provide the commands to the replication servers.\r\n\r\n> Move EnumrableExtensions to Lucene.Support? or Lucene.Util?\r\n\r\nLucene.Support is the only place where we are putting code that is not a port of something from Java, so that would be the place to put it. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318775501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318844327","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-318844327","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":318844327,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODg0NDMyNw==","user":{"login":"AndyPook","id":781227,"node_id":"MDQ6VXNlcjc4MTIyNw==","avatar_url":"https://avatars.githubusercontent.com/u/781227?v=4","gravatar_id":"","url":"https://api.github.com/users/AndyPook","html_url":"https://github.com/AndyPook","followers_url":"https://api.github.com/users/AndyPook/followers","following_url":"https://api.github.com/users/AndyPook/following{/other_user}","gists_url":"https://api.github.com/users/AndyPook/gists{/gist_id}","starred_url":"https://api.github.com/users/AndyPook/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndyPook/subscriptions","organizations_url":"https://api.github.com/users/AndyPook/orgs","repos_url":"https://api.github.com/users/AndyPook/repos","events_url":"https://api.github.com/users/AndyPook/events{/privacy}","received_events_url":"https://api.github.com/users/AndyPook/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-07-29T17:04:27Z","updated_at":"2017-07-29T17:04:27Z","author_association":"NONE","body":"@jeme you are quite right, that is equivalent.\r\nA bit OCD, but I have a tendency to try and encapsulate features in discrete pieces. If this got much more complex that a one liner then I think splitting it out into a separate class would be a \"good thing\", easier to create tests for...\r\n\r\nI agree with @NightOwl888. It seems that this \"api\" is very well defined and opinionated (esp if you want interop) so leaving this to an end developer to reimplement each time would be error prone or cut&paste boiler plate. \r\nIn short, keeping this well defined service api outside of mvc world with it's attributes, reflection, media type formatters etc. would also be a good thing\r\n\r\nAlthough I may be missing some nuances and be off in the weeds somewhere.\r\n\r\nIf the path is defined as ```/<context>/<shard>/<action>``` then maybe using routing would be helpful. Maybe something like...\r\n\r\n```csharp\r\n\t\tpublic static void UseLuceneReplicator2(this IApplicationBuilder app, string prefix, object indexService)\r\n\t\t{\r\n\t\t\tvar routeBuilder = new RouteBuilder(app);\r\n\r\n\t\t\trouteBuilder.MapGet(prefix+ \"/{context}/{shard}/{action}/{*path}\", async context =>\r\n\t\t\t{\r\n\t\t\t\tvar req = context.Request;\r\n\r\n\t\t\t\tawait context.Response.WriteAsync($\"<p>{DateTime.Now.ToString()}</p>\");\r\n\t\t\t\tawait context.Response.WriteAsync($\"<p>indexService={indexService.ToString()}</p>\");\r\n\t\t\t\tawait context.Response.WriteAsync($\"<p>path={req.Path}</p>\");\r\n\t\t\t\tawait context.Response.WriteAsync($\"<p>context={context.GetRouteValue(\"context\")}</p>\");\r\n\t\t\t\tawait context.Response.WriteAsync($\"<p>shard={context.GetRouteValue(\"shard\")}</p>\");\r\n\t\t\t\tawait context.Response.WriteAsync($\"<p>action={context.GetRouteValue(\"action\")}</p>\");\r\n\r\n\t\t\t\tawait context.Response.WriteAsync($\"<ul>\");\r\n\t\t\t\tforeach (var q in req.Query)\r\n\t\t\t\t\tawait context.Response.WriteAsync($\"<li>{q.Key}={q.Value}</li>\");\r\n\t\t\t\tawait context.Response.WriteAsync($\"</ul>\");\r\n\t\t\t});\r\n\r\n\t\t\tvar routes = routeBuilder.Build();\r\n\t\t\tapp.UseRouter(routes);\r\n\t\t}\r\n```\r\n\r\nAgain I'd suggest taking the lamdba body out into something more discrete, this is just a demo.\r\n\r\nJust throwing stuff at the wall to see what sticks :)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/318844327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/319576869","html_url":"https://github.com/apache/lucenenet/pull/210#issuecomment-319576869","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/210","id":319576869,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTU3Njg2OQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-02T06:07:08Z","updated_at":"2017-08-02T06:07:08Z","author_association":"CONTRIBUTOR","body":"Thanks.\r\n\r\nI would have thought you would be more creative with the branch name, though.\r\n\r\nI pushed this to master, but somehow GitHub didn't get the message and left it open. For whatever reason, I don't have the ability to close pull requests on GitHub from the UI, the only way I can do it is by pushing another commit with a special `#closes 210` commit message. So, if you don't mind (and you can see a close button here), please close this pull request, it is accepted.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/319576869/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/319578050","html_url":"https://github.com/apache/lucenenet/pull/210#issuecomment-319578050","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/210","id":319578050,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTU3ODA1MA==","user":{"login":"vvdb","id":17848230,"node_id":"MDQ6VXNlcjE3ODQ4MjMw","avatar_url":"https://avatars.githubusercontent.com/u/17848230?v=4","gravatar_id":"","url":"https://api.github.com/users/vvdb","html_url":"https://github.com/vvdb","followers_url":"https://api.github.com/users/vvdb/followers","following_url":"https://api.github.com/users/vvdb/following{/other_user}","gists_url":"https://api.github.com/users/vvdb/gists{/gist_id}","starred_url":"https://api.github.com/users/vvdb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvdb/subscriptions","organizations_url":"https://api.github.com/users/vvdb/orgs","repos_url":"https://api.github.com/users/vvdb/repos","events_url":"https://api.github.com/users/vvdb/events{/privacy}","received_events_url":"https://api.github.com/users/vvdb/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-02T06:14:37Z","updated_at":"2017-08-02T06:14:37Z","author_association":"CONTRIBUTOR","body":"Good morning Shad,\r\n\r\nI followed your detailed instruction to the letter and was so happy it worked. And “vincents-amazing-patch” sounded creative enough <g>.\r\nI closed the pull request, and got this as a message:\r\n\r\nClosed with unmerged commits\r\nThis pull request is closed, but the vvdb:vincents-amazing-patch branch has unmerged commits.\r\n\r\n… with a button  “Delete branch”. I did not click on that button. But can I? If so, next time I’ll have a more creative name, such as vincents-attempt-at-a-pull-requests-waiting-for-Shad-s-approval. Or something like that…\r\n\r\nVincent\r\n\r\nFrom: Shad Storhaug [mailto:notifications@github.com]\r\nSent: Wednesday, August 02, 2017 8:07 AM\r\nTo: apache/lucenenet <lucenenet@noreply.github.com>\r\nCc: Van Den Berghe, Vincent <Vincent.VanDenBerghe@bvdinfo.com>; Author <author@noreply.github.com>\r\nSubject: Re: [apache/lucenenet] Corrected bug in Lifetime reference count (#210)\r\n\r\n\r\nThanks.\r\n\r\nI would have thought you would be more creative with the branch name, though.\r\n\r\nI pushed this to master, but somehow GitHub didn't get the message and left it open. For whatever reason, I don't have the ability to close pull requests on GitHub from the UI, the only way I can do it is by pushing another commit with a special #closes 210 commit message. So, if you don't mind (and you can see a close button here), please close this pull request, it is accepted.\r\n\r\n—\r\nYou are receiving this because you authored the thread.\r\nReply to this email directly, view it on GitHub<https://github.com/apache/lucenenet/pull/210#issuecomment-319576869>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ARBXptBSLCcJVQHf5CnF-D45zdhHCuCHks5sUBIQgaJpZM4Ophnh>.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/319578050/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/319588017","html_url":"https://github.com/apache/lucenenet/pull/210#issuecomment-319588017","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/210","id":319588017,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTU4ODAxNw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-02T07:11:35Z","updated_at":"2017-08-02T07:11:35Z","author_association":"CONTRIBUTOR","body":"As you can see your commit is here: https://github.com/apache/lucenenet/commits/master\r\n\r\nWhat you do with the branch on your GitHub account is up to you. Personally, I usually just keep them in case I need to review them later - it is easier to find your commits when they are on top of your own branch than buried among everyone else's. And GitHub won't send you a bill for keeping them.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/319588017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320453789","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-320453789","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":320453789,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDQ1Mzc4OQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-05T16:40:41Z","updated_at":"2017-08-05T16:40:41Z","author_association":"CONTRIBUTOR","body":"@Shazwazza \r\n\r\nI finally got a chance to look at this today. A fine docs site this is becoming. \r\n\r\nNow it is becoming a bit more clear how to build a tool to convert all of those HTML files. I will start working on a tool to take care of that, starting with the `overview.html` pages, and then work out how to get those \"namespace documents\", the `package.html` pages. There are a few simple changes that can be done to convert many of the code comments completely (namely changing the first letter of every method or field name to upper case and moving opening curly brackets from the end of a line to the beginning of the following line), and then they will need manual review (which I can drop a token in to search for so this can be done by multiple people over a period of time).\r\n\r\nThere will probably need to be several revisions of the tool before we actually commit to a manual starting point, though.\r\n\r\n> I've added a WIKI section to show how that can be done, I've copied the HTML content from the current wiki, I only did the home page, getting started and mail group pages as examples and update the links between them. The html could/should be formatted to markdown (not sure how the source of the current wiki is?) but that is optional but the links between pages should be updated to markdowns since that's much easier to generate the links.\r\n\r\nUnfortunately, the format of the WIKI is not markdown. [Here is the documentation](https://confluence.atlassian.com/doc/confluence-wiki-markup-251003035.html) for the Confluence WIKI markup format. Maybe a converter for this format to markdown exists, though...?\r\n\r\n> > As for changing how the namespaces are shown on the left hand side and ordering by more important ones, this could be achieved by modifying the generated /api/toc.yml file after it is built. This file is autogenerated by docfx when it's building the API docs. As far as I can tell one way to do this would be with a custom Post Processor: https://dotnet.github.io/docfx/tutorial/howto_add_a_customized_post_processor.html but OOTB I don't think this is possible with standard configuration.\r\n\r\n> Normally when faced with post-build issues such as these I either overwrite the contents of the file by [generating it in the Powershell script](https://github.com/apache/lucenenet/blob/master/build/build.ps1#L304-L351) or use the Powershell script to update the contents of the file, depending on how much of the file I need control over.\r\n\r\n> But I wasn't referring to the order of them so much as the depth. For example, it would be best if we had a link to `Lucene.Net.Analysis` in the TOC that when clicked expanded the `Lucene.Net.Analysis.Ar`, `Lucene.Net.Analysis.Bg`, etc. instead of having all of the Analysis.Common hierarchy in the initial view that loads.\r\n\r\nA thought occurred to me how we might handle this. Is there such a thing as a filter that can be applied to the TOC so that only the part from a single .NET assembly appears at a time? Then when for example, you click on \"analyzers-common\", and you get a view of the index page on the right and a TOC on the left that is filtered for that NuGet package, similar to [the original](https://lucene.apache.org/core/4_8_0/analyzers-common/index.html). I don't think we need the \"packages\" section on the upper left, though - that doesn't seem to work for .NET. But having the filtered TOC here would make it easy to drill down/search the rest of Analysis.Common without going through the sea of other NuGet package documentation. And maybe there could be a way to remove the filter to see everything again.\r\n\r\n### Minor Issue\r\n\r\nThe `api` folder is not currently in `.gitignore`, so the `.yml` documents all appear as uncommitted files.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320453789/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320473287","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-320473287","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":320473287,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDQ3MzI4Nw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-05T22:14:51Z","updated_at":"2017-10-03T19:44:32Z","author_association":"CONTRIBUTOR","body":"@jeme \r\n\r\nI got a chance to get a deeper look of this structure, and I found a comment on that [blog post](http://shaierera.blogspot.com/2013/05/the-replicator.html) that holds the answer to what I think is the part we are struggling with:\r\n\r\n> The server can use ReplicationService to embed in a servlet which responds to HTTP requests sent by HttpReplicator [on the client side]. The server also uses LocalReplicator to manage the revisions. The indexing code on the server will call localReplicator.publish() and the servlet (through ReplicationService) will call localReplicator.checkForUpdate, obtain etc.\r\n\r\n> The clients can use ReplicationClient, with an HttpReplicator, to replicate index changes from the server. The HttpReplicator is given the host:port of the server which manages the index revisions. The code examples above show how it can be done.\r\n\r\nSo, there are not 2 pieces to this, but 3:\r\n\r\n1. A ReplicationService (on the server), which indeed does nothing more than listen for incoming requests. The files are replicated from the server to the client when it receives a command.\r\n2. A LocalReplicator (on the server), which does the publishing of revisions.\r\n3. An HTTPReplicator (on the client), which calls the ReplicationService with the commands. It receives the files from the server and updates files local to the client.\r\n\r\nSince the ReplicationService (the HTTP listener) accepts an `IDictionary<string, IReplicator>` through its constructor, and we know that an HTTP listener must be registered at application startup, I think it is safe to assume that these replicators need to be registered as singletons (best to do it with DI, but I suppose a static would also work). If you look at the [HttpReplicatorTest](https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.1/lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest.java#L48), it registers this dependency at the class level (which essentially makes it singleton for the test).\r\n\r\nSo, first we need to devise a way to have multiple replicators as singleton:\r\n\r\n```c#\r\nservices.AddFileReplication(r => r.WithShard(\"shard1\").WithShard(\"shard2\", new MyCustomReplicator()));\r\n```\r\n\r\nUsing a fluent builder API, you can register multiple shards with \"speak-able\" syntax. Internally, this would just register a custom service that encapsulates a dictionary to hold the configuration data similar to the `IHttpContextAccessor`.\r\n\r\n```c#\r\n    public interface IReplicatorAccessor\r\n    {\r\n        IDictionary<string, IReplicator> Replicators { get; }\r\n        IReplicator GetReplicator(string shard);\r\n    }\r\n\r\n    public class ReplicatorAccessor : IReplicatorAccessor\r\n    {\r\n        public ReplicatorAccessor(IDictionary<string, IReplicator> replicators)\r\n        {\r\n            this.Replicators = replicators ?? throw new ArgumentNullException(nameof(replicators));\r\n        }\r\n\r\n        public IDictionary<string, IReplicator> Replicators { get; private set; }\r\n\r\n        public IReplicator GetReplicator(string shard)\r\n        {\r\n            IReplicator result;\r\n            Replicators.TryGetValue(shard, out result);\r\n            return result;\r\n        }\r\n    }\r\n```\r\n\r\nThis is wired up with an extension method:\r\n\r\n```c#\r\n    public static class ServiceCollectionExtensions\r\n    {\r\n        public static void AddFileReplication(this IServiceCollection services, Func<ReplicatorBuilder, ReplicatorBuilder> expression)\r\n        {\r\n            if (services == null)\r\n                throw new ArgumentNullException(nameof(services));\r\n            if (expression == null)\r\n                throw new ArgumentNullException(nameof(expression));\r\n\r\n            var starter = new ReplicatorBuilder();\r\n            var builder = expression(starter);\r\n            AddFileReplication(services, builder.Build());\r\n        }\r\n\r\n        public static void AddFileReplication(this IServiceCollection services, IDictionary<string, IReplicator> replicators)\r\n        {\r\n            if (services == null)\r\n                throw new ArgumentNullException(nameof(services));\r\n            if (replicators == null)\r\n                throw new ArgumentNullException(nameof(replicators));\r\n\r\n            services.AddSingleton<IReplicatorAccessor>(new ReplicatorAccessor(replicators));\r\n        }\r\n    }\r\n```\r\nand the dictionary is built using a fluent builder. This is the most interesting part:\r\n\r\n```c#\r\n    public class ReplicatorBuilder\r\n    {\r\n        private readonly IDictionary<string, IReplicator> replicators;\r\n\r\n        public ReplicatorBuilder()\r\n            : this(new Dictionary<string, IReplicator>())\r\n        {\r\n        }\r\n\r\n        public ReplicatorBuilder(IDictionary<string, IReplicator> replicators)\r\n        {\r\n            this.replicators = replicators ?? throw new ArgumentNullException(\"replicators\");\r\n        }\r\n\r\n        public ReplicatorBuilder WithShard(string shard)\r\n        {\r\n            replicators.Add(shard, new LocalReplicator());\r\n            return new ReplicatorBuilder(replicators);\r\n        }\r\n\r\n        public ReplicatorBuilder WithShard(string shard, IReplicator replicator)\r\n        {\r\n            replicators.Add(shard, replicator);\r\n            return new ReplicatorBuilder(replicators);\r\n        }\r\n\r\n        public IDictionary<string, IReplicator> Build()\r\n        {\r\n            return replicators;\r\n        }\r\n    }\r\n```\r\n\r\nWith that one line registered at application startup, you can ask for the `IReplicatorAccessor` by adding a constructor argument for it.\r\n\r\n```c#\r\n    public class ValuesController : Controller\r\n    {\r\n        private readonly IReplicatorAccessor replicatorAccessor;\r\n\r\n        public ValuesController(IReplicatorAccessor replicatorAccessor)\r\n        {\r\n            this.replicatorAccessor = replicatorAccessor ?? throw new ArgumentNullException(\"replicatorAccessor\");\r\n        }\r\n```\r\n\r\nAnd then you can use it to get the replicator instances by shard name.\r\n\r\n```c#\r\n        [HttpGet]\r\n        public IEnumerable<string> Get()\r\n        {\r\n            IReplicator replicator = replicatorAccessor.GetReplicator(\"shard1\");\r\n            replicator.Publish(new IndexRevision(writer));\r\n\r\n            return new string[] { \"value1\", \"value2\" };\r\n        }\r\n```\r\n\r\nNow, if the server needs to be registered as an HTTP listener, we just need another extension method to do that, similar to @AndyPook 's example. Basically, we register a route that runs our ReplicationService logic, which uses the `IReplicatorAccessor` to get the dictionary where they live and pass it to the `ReplicationService`.\r\n\r\n```c#\r\n    public static class ApplicationBuilderExtensions\r\n    {\r\n        public static void UseFileReplication(this IApplicationBuilder app)\r\n        {\r\n            UseFileReplication(app, string.Empty);\r\n        }\r\n\r\n        public static void UseFileReplication(this IApplicationBuilder app, string urlPrefix)\r\n        {\r\n            var routeBuilder = new RouteBuilder(app);\r\n            string template = (string.IsNullOrWhiteSpace(urlPrefix) ? \"\" : urlPrefix + \"/\") +\r\n                \"{context}/{shard}/{action}\";\r\n\r\n            routeBuilder.MapGet(template, async context =>\r\n            {\r\n                var replicatorAccessor = app.ApplicationServices.GetService<IReplicatorAccessor>();\r\n                var replicationService = new ReplicationService(replicatorAccessor.Replicators);\r\n                replicationService.Perform(new AspNetCoreReplicationRequest(context.Request), \r\n                    new AspNetCoreReplicationResponse(context.Response));\r\n\r\n                await Task.FromResult(0);\r\n            });\r\n\r\n            var routes = routeBuilder.Build();\r\n            app.UseRouter(routes);\r\n        }\r\n    }\r\n```\r\n\r\nSo, in a nutshell you were right that there is more to the server than a simple HTTP listener. But I was right that the HTTP listener doesn't have any runtime behavior and thus needs to be registered at startup. So, we are both right :).\r\n\r\nWe just needed a way to register the shards in a way that they can be used both at startup and at runtime. But it looks like you were exactly on the right path where we need to go.\r\n\r\nBTW - not sure about the `await` above. Maybe we should provide a way to `await` the `Perform()` method?\r\n\r\nThe above is horrible in terms of how it blocks the default MVC route - we need at least one route constrant. The simplest option (although not as thorough at it should be) would just be to make a constraint that matches the shard name against the keys in the `IReplicatorAccessor.Replicators.Keys` property. Suggestions on how to make it a bit more reliable than that welcome. Also, I wasn't able to work out how to use a constraint in conjunction with a handler...more time (or suggestions) needed.\r\n\r\nThe client can simply do its stuff by calling replicator API methods directly, there is no need to build anything special into AspNetCore for that.\r\n\r\nAs for the IndexWriters and IndexReaders, we can also provide similar extension methods to register them as singletons and access them in services (but not in `Lucene.Net.Replicator` - we'll build a package named `Lucene.Net.AspNetCore` for that).\r\n\r\nSo, if you don't mind putting this together like I have above and cleaning up the Java comments, I think this will be good enough to merge. Or if you don't have the time let me know and I will get it done.\r\n\r\nThere are some unfinished documentation comments and some methods that should be virtual (in Java they are virtual by default), but I think I can manage these. The important thing is that all of the test pass.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320473287/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320899462","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-320899462","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":320899462,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDg5OTQ2Mg==","user":{"login":"AndyPook","id":781227,"node_id":"MDQ6VXNlcjc4MTIyNw==","avatar_url":"https://avatars.githubusercontent.com/u/781227?v=4","gravatar_id":"","url":"https://api.github.com/users/AndyPook","html_url":"https://github.com/AndyPook","followers_url":"https://api.github.com/users/AndyPook/followers","following_url":"https://api.github.com/users/AndyPook/following{/other_user}","gists_url":"https://api.github.com/users/AndyPook/gists{/gist_id}","starred_url":"https://api.github.com/users/AndyPook/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndyPook/subscriptions","organizations_url":"https://api.github.com/users/AndyPook/orgs","repos_url":"https://api.github.com/users/AndyPook/repos","events_url":"https://api.github.com/users/AndyPook/events{/privacy}","received_events_url":"https://api.github.com/users/AndyPook/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-08T09:15:48Z","updated_at":"2017-08-08T09:15:48Z","author_association":"NONE","body":"Making ```Perform``` async could be done like... \r\n\r\n```csharp\r\n        public async Task PerformAsync(IReplicationRequest request, IReplicationResponse response)\r\n        {\r\n            ...\r\n            try\r\n            {\r\n                switch (action)\r\n                {\r\n                    case ReplicationAction.OBTAIN:\r\n                        string sessionId = ExtractRequestParam(request, REPLICATE_SESSION_ID_PARAM);\r\n                        string fileName = ExtractRequestParam(request, REPLICATE_FILENAME_PARAM);\r\n                        string source = ExtractRequestParam(request, REPLICATE_SOURCE_PARAM);\r\n                        using (Stream stream = replicator.ObtainFile(sessionId, source, fileName))\r\n                            await stream.CopyToAsync(response.Body);\r\n                        break;\r\n\r\n                    case ReplicationAction.RELEASE:\r\n                        replicator.Release(ExtractRequestParam(request, REPLICATE_SESSION_ID_PARAM));\r\n                        break;\r\n\r\n                    case ReplicationAction.UPDATE:\r\n                        string currentVersion = request.QueryParam(REPLICATE_VERSION_PARAM);\r\n                        SessionToken token = replicator.CheckForUpdate(currentVersion);\r\n                        if (token == null)\r\n                        {\r\n                            await response.Body.WriteAsync(new byte[] { 0 }, 0, 1); // marker for null token\r\n                        }\r\n                        else\r\n                        {\r\n                            await response.Body.WriteAsync(new byte[] { 1 }, 0, 1);\r\n                            token.Serialize(new DataOutputStream(response.Body));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw new ArgumentOutOfRangeException();\r\n                }\r\n            }\r\n            ...\r\n        }\r\n```\r\nNote ```CopyToAsync``` and ```WriteAsync```. It's a shame that DataOutputStream isn't async. A little out of scope for this though :)\r\n\r\nOn the trivia front. The ReplicatorBuilder fluent methods can just ```return this``` rather than newing up another builder each time.\r\n\r\nShouldn't the template building part be\r\n```\r\nstring template = (string.IsNullOrWhiteSpace(urlPrefix) ? \"\" : urlPrefix) +\r\n                \"/{context}/{shard}/{action}\";\r\n```\r\nOtherwise the template would not start with \"/\" if urlPrefix was missing and it would throw?\r\n\r\nThough I would suggest that urlPrefix should be mandatory. Otherwise it will steal all the requests from whatever comes next in the middleware pipeline.\r\n\r\nQ: Why do you say it's \"horrible to block the default route\"?\r\nThis seems entirely natural to me :) Even back in asp you could add handlers that would intercept certain paths/extensions. It doesn't seem any different to Swagger intercepting \"/swagger\". Or OAuth intercepting it's control flow.\r\n\r\nLastly, an observation... My intent with using the template was that the Perform method would be refactored to accept the parts from the route. If you want to leave the Perform method as is (closer to java implementation I'm guessing) which parses the path and qs then the ```MapWhen``` approach might be better/simpler...\r\n\r\n```csharp\r\n\t\tpublic static void UseLuceneReplicator3(this IApplicationBuilder app, string urlPrefix, object indexService)\r\n\t\t{\r\n\t\t\tif (string.IsNullOrEmpty(urlPrefix) || !urlPrefix.StartsWith(\"/\"))\r\n\t\t\t\tthrow new ArgumentException(\"urlPrefix MUST be provided\");\r\n\r\n\t\t\tvar replicatorAccessor = app.ApplicationServices.GetService<IReplicatorAccessor>();\r\n\t\t\tvar replicationService = new ReplicationService(replicatorAccessor.Replicators);\r\n\r\n\t\t\tapp.MapWhen(context => context.Request.Path.StartsWithSegments(urlPrefix), appBuilder =>\r\n\t\t\t{\r\n\t\t\t\tappBuilder.Run(async context =>\r\n\t\t\t\t{\r\n\t\t\t\t\tawait replicationService.PerformAsync(\r\n\t\t\t\t\t\tnew AspNetCoreReplicationRequest(context.Request), \r\n\t\t\t\t\t\tnew AspNetCoreReplicationResponse(context.Response));\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n```\r\n\r\nAs the accessor and service are singletons, they only need resolving once rather than every request.\r\n\r\nLastly, the template we've been looking at has a {context] segement, however the Perform method only parses 'shard' and 'action'. Is that significant?\r\n\r\nJust stream of thought and observations :)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320899462/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320950344","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-320950344","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":320950344,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDk1MDM0NA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-08T13:07:25Z","updated_at":"2017-08-08T13:07:25Z","author_association":"CONTRIBUTOR","body":"@AndyPook \r\n\r\nGood point on the `context` parameter. After [taking a closer look](https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.1/lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase.java#L77-L78), there is a `path` parameter on the client. Why they didn't name it `context` to match the server is beyond me, but it appears to be one and the same. So, effectively, we can get rid of that parameter and replace it with `urlPrefix` because they are the same thing. And because we have a prefix (and indeed it is not optional), we don't need a route constraint.\r\n\r\nFunny how long it is taking us to work this out since they admitted on that blog post that they built replicator in just 1 day. But they certainly could have documented it better in the API docs instead of falling back on a blog to serve as the documentation.\r\n\r\nActually, the above code wasn't intended to be a finished product, but a demonstration of how to fit the pieces together. And making the pieces fit first (and tests pass) before refactoring is a good strategy. One decision that I will probably end up changing is to make the parameter `IReadOnlyDictionary` instead of `IDictionary`, since we don't want anyone tinkering with the contents of this singleton after application startup.\r\n\r\nWhile I agree with you that the switch case statement in `ReplicationService` seems to be screaming out for refactoring, I think Jens is also right on the money on this approach. Being that there needs to be some server-side interaction between the runtime code and HTTP listener, it is not possible to just wrap this up into a generic service that can be installed with an installer. In fact, we should build similar integration packages for MVC 5, WebApi2, and possibly even web forms. And if we are doing that, we should wait to see how we can create those integration packages before refactoring `ReplicationService` (assuming refactoring it is even in the cards - it may ultimately prove to be more useful to serve as the generic \"servlet\" piece that is missing from .NET). I think what Jens did with the `IReplicationRequest` and `IReplicationResponse` abstractions is a fine idea that will ultimately prove useful for plugging into each of these frameworks. And if `ReplicationService` is something the user never has to deal with anyway, maybe it doesn't make sense to change it as tempting as that might be. After all, if we refactor it, then we have to also refactor the tests.\r\n\r\n@jeme \r\n\r\nI am not implying you have to do all of the work to integrate with each of those frameworks, just finishing AspNetCore is enough. Actually, integrating with the other frameworks will be a bit more tricky because the lack of default DI container, so I the most intuitive approach might be to register the dictionary statically on those.\r\n\r\nI have arrived at a decision on a folder structure for the .NET wrapper projects. We should put `Lucene.Net.Replicator.AspNetCore` into a new directory `src/dotnet/`. This will be the place where all of the projects go that we aren't specifically porting from Java, and eventually we can move the `Lucene.Net.ICU` and `lucene-cli` projects and their tests there, too. However, if you want to give this new project a permanent home, go ahead and create that folder as part of this PR.\r\n\r\nThis will also serve as a \"contrib\" folder, but to me calling a project \"contrib\" makes it sound like it is unfinished or inferior quality. We expect that these packages will be highly polished with a more intuitive API than the Java ported code.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320950344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320988216","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-320988216","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":320988216,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDk4ODIxNg==","user":{"login":"AndyPook","id":781227,"node_id":"MDQ6VXNlcjc4MTIyNw==","avatar_url":"https://avatars.githubusercontent.com/u/781227?v=4","gravatar_id":"","url":"https://api.github.com/users/AndyPook","html_url":"https://github.com/AndyPook","followers_url":"https://api.github.com/users/AndyPook/followers","following_url":"https://api.github.com/users/AndyPook/following{/other_user}","gists_url":"https://api.github.com/users/AndyPook/gists{/gist_id}","starred_url":"https://api.github.com/users/AndyPook/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndyPook/subscriptions","organizations_url":"https://api.github.com/users/AndyPook/orgs","repos_url":"https://api.github.com/users/AndyPook/repos","events_url":"https://api.github.com/users/AndyPook/events{/privacy}","received_events_url":"https://api.github.com/users/AndyPook/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-08T15:16:23Z","updated_at":"2017-08-08T15:16:23Z","author_association":"NONE","body":"All good :) In no way is any criticism intended. Was just looking at it\nfrom a micro/code perspective.\nThe switch is just fine as is, the case blocks are small, maybe just\nextract it out into another method to isolate it from the setup and\nexception catch stuff which is always noisy. If there's a desire to plug\ninto other http frameworks then the IReplicatorReq/Res works well too\n\nRe: other frameworks... I think that, as we're dealing with http rather\nthan the higher framework, that it more depends on how it's all\nbootstrapped. So owin style or Global.asax.\nI think that it would be a very similar approach for webapi2/mvc4/5 as they\nboth have a notion of an owin pipeline. Though the types are different I\nthink. Not sure DI is a blocker here, wiring the bits up seems straight\nforward enough.\nFor non owin, \"all that's needed\" is someplace with the current HttpContext\nto to call the ReplicatorService if the path StartsWith urlPrefix. So, an\nIHttpHandler or from GlobalAsax.BeginRequest\n\nAs you've kept the api to Replicator abstract then adding other frameworks\nought to be ok.\nHappy to contribute if that'd help at all.\n\nOn 8 August 2017 at 14:07, Shad Storhaug <notifications@github.com> wrote:\n\n> @AndyPook <https://github.com/andypook>\n>\n> Good point on the context parameter. After taking a closer look\n> <https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.8.1/lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase.java#L77-L78>,\n> there is a path parameter on the client. Why they didn't name it context\n> to match the server is beyond me, but it appears to be one and the same.\n> So, effectively, we can get rid of that parameter and replace it with\n> urlPrefix because they are the same thing. And because we have a prefix\n> (and indeed it is not optional), we don't need a route constraint.\n>\n> Funny how long it is taking us to work this out since they admitted on\n> that blog post that they built replicator in just 1 day. But they certainly\n> could have documented it better in the API docs instead of falling back on\n> a blog to serve as the documentation.\n>\n> Actually, the above code wasn't intended to be a finished product, but a\n> demonstration of how to fit the pieces together. And making the pieces fit\n> first (and tests pass) before refactoring is a good strategy. One decision\n> that I will probably end up changing is to make the parameter\n> IReadOnlyDictionary instead of IDictionary, since we don't want anyone\n> tinkering with the contents of this singleton after application startup.\n>\n> While I agree with you that the switch case statement in\n> ReplicationService seems to be screaming out for refactoring, I think\n> Jens is also right on the money on this approach. Being that there needs to\n> be some server-side interaction between the runtime code and HTTP listener,\n> it is not possible to just wrap this up into a generic service that can be\n> installed with an installer. In fact, we should build similar integration\n> packages for MVC 5, WebApi2, and possibly even web forms. And if we are\n> doing that, we should wait to see how we can create those integration\n> packages before refactoring ReplicationService (assuming refactoring it\n> is even in the cards - it may ultimately prove to be more useful to serve\n> as the generic \"servlet\" piece that is missing from .NET). I think what\n> Jens did with the IReplicationRequest and IReplicationResponse\n> abstractions is a fine idea that will ultimately prove useful for plugging\n> into each of these frameworks. And if ReplicationService is something the\n> user never has to deal with anyway, maybe it doesn't make sense to change\n> it as tempting as that might be. After all, if we refactor it, then we have\n> to also refactor the tests.\n>\n> @jeme <https://github.com/jeme>\n>\n> I am not implying you have to do all of the work to integrate with each of\n> those frameworks, just finishing AspNetCore is enough. Actually,\n> integrating with the other frameworks will be a bit more tricky because the\n> lack of default DI container, so I the most intuitive approach might be to\n> register the dictionary statically on those.\n>\n> I have arrived at a decision on a folder structure for the .NET wrapper\n> projects. We should put Lucene.Net.Replicator.AspNetCore into a new\n> directory src/dotnet/. This will be the place where all of the projects\n> go that we aren't specifically porting from Java, and eventually we can\n> move the Lucene.Net.ICU and lucene-cli projects and their tests there,\n> too. However, if you want to give this new project a permanent home, go\n> ahead and create that folder as part of this PR.\n>\n> This will also serve as a \"contrib\" folder, but to me calling a project\n> \"contrib\" makes it sound like it is unfinished or inferior quality. We\n> expect that these packages will be highly polished with a more intuitive\n> API than the Java ported code.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/apache/lucenenet/pull/209#issuecomment-320950344>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAvrq_7oi_Bmir0DbB5HClGLqLo34yw9ks5sWF2PgaJpZM4OgKD6>\n> .\n>\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/320988216/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321019002","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321019002","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321019002,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTAxOTAwMg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-08T17:03:29Z","updated_at":"2017-08-08T17:03:29Z","author_association":"CONTRIBUTOR","body":"> Happy to contribute if that'd help at all.\r\n\r\nThere are definitely [a lot of things](https://github.com/apache/lucenenet/blob/master/CONTRIBUTING.md#other-ways-to-help) you could do to help and it would be much appreciated. Not just with `Lucene.Net.Replicator.AspNetCore` when Jens completes his end, but there are a lot of new development tasks I would like to do to make the API more palatable before calling this \"released\". It dawned on me that if 2 people create a folder with the same name (`src/dotnet/`) on 2 different branches, there won't be a conflict since Git doesn't track folders anyway. So that is not a blocker for doing this work.\r\n\r\nAs I previously mentioned, I think we should have an integration package for each major UI framework (both thick and thin client) so we can wire up the boilerplate stuff in \"the normal\" way for that framework. Certainly, creating packages like `Lucene.Net.AspNetCore` and `Lucene.Net.Owin` (or MVC?) are up for grabs, starting with creating a fluent way to setup an index writer and/or reader at application startup, and working out what other stuff is common boilerplate code that we could save others from having to research when setting it up. There should also be some UI components to plug in to make adding the most common search features to applications easier - I am being vague here, because this will take some discovery.\r\n\r\nAlso, the most common 3rd party NuGet package is a Document - POCO mapper. This is high on the list of things to create a built-in solution for that will ultimately find a place in every one of the UI framework modules. It seems to me that taking a good hard look at the MVC `ModelBinder` implementation would be a good place to start with this. We should make it work by default with conventions like `ModelBinder`, but be able to override the defaults using .NET Attributes (being that we have both a `TextField` and a `StringField` that could map to a string property, etc.). Do note there is a `LazyDocument` implementation in `Lucene.Net.Misc` that is read-only and we wouldn't want to block its use in any way.\r\n\r\nThen of course there are the fun ones - UI integrations with Highlighter, Suggest, and Facet. At least the latter two may require some front-end JavaScript work for thin clients to create the customizable boilerplate implementations so they don't have to be re-invented by every consumer. Or, there may already be some great JS plugins we can use/recommend. Plus we will need similar integration components with thick clients with similar goals. I'd like to try to avoid the \"experimental\" JS frameworks that could evaporate tomorrow and use popular frameworks like JQuery and Bootstrap (or others that most people have heard of), but we should cater to the SPA crowd, too. It seems like this could be a very deep rabbit hole if we created a package for each SPA framework, but if we do one I am sure that others might contribute more for their framework of choice.\r\n\r\nBTW - when dealing with the DI stuff, there are a couple of great articles [here](http://blog.ploeh.dk/2014/05/19/di-friendly-library/) and [here](http://blog.ploeh.dk/2014/05/19/di-friendly-framework/) which are helpful (plus he wrote a great book, Dependency Injection in .NET). I'd like to try to avoid using statics for this stuff if at all possible and allow for as much interop with DI containers as possible. Coming up with a good solution for a singleton IndexWriter (which is Disposable) for some of the older web frameworks when they are not using DI is a bit of a challenge.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321019002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212365","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212365","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212365,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM2NQ==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-08T19:12:26Z","updated_at":"2020-05-05T17:57:21Z","author_association":"NONE","body":"<p>How about something like...</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">abstract</span> <span class=\"code-keyword\">class </span>TermEnum : IEnumerable<TermFreq>, IDisposable\n\t{\n\t\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">abstract</span> bool Next();\n\t\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">abstract</span> Term Term();\n\t\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">abstract</span> <span class=\"code-object\">int</span> DocFreq();\n\t\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">abstract</span> void Close();\n\t\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">abstract</span> void Dispose();\n\n\t\t<span class=\"code-keyword\">public</span> IEnumerator<TermFreq> GetEnumerator() => <span class=\"code-keyword\">new</span> EnumEnumerator<TermFreq>(Next, Dispose, () => <span class=\"code-keyword\">new</span> TermFreq { Term = Term(), DocFreq = DocFreq() });\n\n\t\tIEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n\t}\n\n\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">class </span>TermFreq\n\t{\n\t\t<span class=\"code-keyword\">public</span> Term Term { get; set; }\n\t\t<span class=\"code-keyword\">public</span> <span class=\"code-object\">int</span> DocFreq { get; set; }\n\t}\n\n\t<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">class </span>EnumEnumerator<T> : IEnumerator<T>\n\t{\n\t\t<span class=\"code-keyword\">private</span> readonly Func<bool> next;\n\t\t<span class=\"code-keyword\">private</span> readonly Action dispose;\n\t\t<span class=\"code-keyword\">private</span> readonly Func<T> currentFactory;\n\n\t\t<span class=\"code-keyword\">private</span> bool started = <span class=\"code-keyword\">false</span>;\n\n\t\t<span class=\"code-keyword\">public</span> EnumEnumerator(Func<bool> next, Action dispose, Func<T> currentFactory)\n\t\t{\n\t\t\t<span class=\"code-keyword\">this</span>.next = next;\n\t\t\t<span class=\"code-keyword\">this</span>.dispose = dispose;\n\t\t\t<span class=\"code-keyword\">this</span>.currentFactory = currentFactory;\n\t\t}\n\n\t\t<span class=\"code-keyword\">public</span> T Current => started ? currentFactory() : <span class=\"code-keyword\">default</span>(T);\n\n\t\tobject IEnumerator.Current => Current;\n\n\t\t<span class=\"code-keyword\">public</span> bool MoveNext() => (started = next());\n\n\t\t<span class=\"code-keyword\">public</span> void Reset() => <span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> NotImplementedException();\n\n\t\t<span class=\"code-keyword\">public</span> void Dispose() => dispose();\n\t}\n</pre>\n</div></div>\n\n<p>Excuse the c#7 lambda stuff, just used for brevity. Would expand if theory accepted.</p>\n\n<p>The idea is to have a default generic Enumerator which can be used for any Iterator type. So, simply add the IEnumerable i/f and the two GetEnumerator methods returning the generic. It takes Next, Dispose and a factory to create the items.<br/>\nThe started member is to emulate the enumerator semantic of being null before the first call to MoveNext.<br/>\nEnum's aren't resetable so just throw?<br/>\nIn this example I've kept the item type simple. But it would probably be implemented as an immutable.</p>\n\n<p>Observation: There don't seem to be many Enum types (those that have <tt>bool Next()</tt>) I'm assuming other have already been converted?</p>\n\n<p>Thoughts?</p>\n<i>by andypook</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212365/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212369","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212369","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212369,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM2OQ==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T05:43:29Z","updated_at":"2020-05-05T17:57:21Z","author_association":"NONE","body":"<p>The types I am aware of are the <tt>TermsEnum</tt> and <tt>DocIdSetIterator</tt> and their subclasses (which include <tt>DocsEnum</tt> and <tt>DocsAndPositionsEnum</tt> classes). There are probably a few others. Anything that is not public facing isn't worth the effort of refactoring, so there isn't much after these that haven't already been converted.</p>\n\n<p>BTW - there is no longer a <tt>TermEnum</tt> class in Lucene 4+ - it has been replaced with <tt>TermsEnum</tt>.</p>\n\n<p>The issue isn't so much with implementing <tt>IEnumerator<T></tt> as the fact that once you use a foreach loop and it calls <tt>GetEnumerator()</tt>, there would need to be a cast to get to the functionality other than <tt>IEnumerator<T></tt>. And inside of a foreach loop you don't have access to the <tt>IEnumerator<T></tt> instance, so there is no way to cast to get the rest of the functionality. </p>\n\n<p>I looked at <tt>TermsEnum</tt> in some depth and I think the best solution there would be to divide it into \"basic\" and \"advanced\" APIs. Simply rename <tt>Terms.GetIterator(BytesRef)</tt> to <tt>Terms.GetEnumerator(BytesRef)</tt> and add an overload that accepts no parameter and satisfies the <tt>IEnumerable<T></tt> contract that internally calls <tt>Terms.GetEnumerator(null)</tt>. The overload that accepts a parameter can then return a <tt>TermsEnum</tt> type, which will expose the additional members that are hidden in the .NETified overload.</p>\n\n<p>Since a common use case is to loop forward, this would simplify some code:</p>\n\n<div class=\"code panel\" style=\"border-style: solid;border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">Terms vector = <something>\nTermsEnum termsEnum = vector.GetIterator(<span class=\"code-keyword\">null</span>);\nBytesRef text;\n<span class=\"code-keyword\">while</span> ((text = termsEnum.Next()) != <span class=\"code-keyword\">null</span>)\n{\n\t<span class=\"code-comment\">// use text\n</span>}\n</pre>\n</div></div>\n\n<p>becomes</p>\n\n<div class=\"code panel\" style=\"border-style: solid;border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">Terms vector = <something>\nforeach (BytesRef text in vector)\n{\n\t<span class=\"code-comment\">// use text\n</span>}\n</pre>\n</div></div>\n\n<p>But you could also call <tt>GetEnumerable(BytesRef)</tt> in order to reuse a <tt>BytesRef</tt> or to get to all of <tt>TermsEnum</tt> s goodies that aren't part of the <tt>IEnumerator<T></tt> contract.</p>\n\n<p>I don't think this same approach will work for <tt>DocsEnum</tt> or <tt>DocsAndPositionsEnum</tt> - it would be nice to find a solution that can be applied consistently. I am not so sure those types fit the mold of <tt>IEnumerator<T></tt> anyway, but perhaps there is some way to refactor them to fit.</p>\n\n<p>Then again, there must be some reason why the Lucene designers strayed away from using <tt>Iterable<T></tt> in this part of the design - they may have intentionally done it this way for some odd reason.</p>\n<i>by nightowl888</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212369/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212371","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212371","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212371,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM3MQ==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T05:52:58Z","updated_at":"2020-05-05T17:57:22Z","author_association":"NONE","body":"<p>Oh, one more thing. I was planning on getting to this after the next beta release. There are several bug fixes, optimizations, and 5 new NuGet packages I would like to push out (and hopefully the API docs) before getting to these breaking API changes.</p>\n<i>by nightowl888</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212371/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321166920","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-321166920","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":321166920,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTE2NjkyMA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T06:38:09Z","updated_at":"2017-08-09T06:38:09Z","author_association":"CONTRIBUTOR","body":"During the building of a tool to get the `.html` pages converted, I can break the types of links we have into 3 categories:\r\n\r\n1. Code links\r\n2. Repo links\r\n3. Namespace links\r\n\r\nI am using a library Html2Markdown to convert the text into markdown docs, and naming them all readme.md so they show up by default on GitHub when viewing the folder.\r\n\r\n### Code links\r\n\r\nFor the first category, I have (for the time being at least) used a similar method as in the C# doc comments.\r\n\r\n```\r\n<see cref=\"Lucene.Net.Search.Query\">Query</see>\r\n```\r\nThe primary difference being that it accepts an optional inner text, which is meant to be the link text. If these are hard-coded to the relative path of the code element doc, I think it might be difficult to manage if we end up moving stuff around later.\r\n\r\nWithout the link text, the `see` element is simply closed.\r\n\r\n```\r\n<see cref=\"Lucene.Net.Search.Query\"/>\r\n```\r\n\r\n### Repo links\r\n\r\nThis one is a bit tricky as well:\r\n\r\n```\r\n[IndexFiles](https://github.com/apache/lucenenet/blob/{tag}/src/Lucene.Net.Demo/IndexFiles.cs)\r\n```\r\n\r\nWe need to accept the tag as a powershell parameter from the release process when generating these docs, so when we change versions this API doc is pointing to the version it applies to.\r\n\r\n### Namespace links\r\n\r\nThis one I haven't worked out yet. As long as we can put a TOC that is filtered for the current namespace on the left side, we should be able to use the approach you mentioned with the WIKI page to build namespace documentation. It would be ideal if these documents were the `index.html` for the namespace so we could just chop off the current page from relative links to get to the \"current\" namespace.\r\n\r\n------------------------\r\n\r\nI am curious if you think it will be too difficult to convert those `<see>` elements into code links, or if we should just generate them as hard links to the API docs now?\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321166920/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321167684","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-321167684","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":321167684,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTE2NzY4NA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T06:42:49Z","updated_at":"2017-08-09T06:46:26Z","author_association":"CONTRIBUTOR","body":"BTW - I tried running the code generation after copying and pasting the repo over to a different directory, and I am getting a null reference exception for some reason.\r\n\r\n![image](https://user-images.githubusercontent.com/1538288/29108438-1a15813a-7d09-11e7-8a0f-82afdda476d5.png)\r\n\r\n\r\n```\r\nDone Building Project \"F:\\Projects\\_Test\\lucenenet\\src\\docs\\LuceneDocsPlugins\\L\r\nuceneDocsPlugins\\LuceneDocsPlugins.csproj\" (default targets).\r\n\r\nDone Building Project \"F:\\Projects\\_Test\\lucenenet\\src\\docs\\LuceneDocsPlugins\\L\r\nuceneDocsPlugins.sln\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:03.14\r\nBuilding metadata...\r\n[17-08-07 11:44:26.907]Warning:[ExtractMetadata]Error opening project F:/Projects/_Test/lucenenet/src/tools/lucene-cli/project.json: Object reference not set to an instance of an object.. Ignored.\r\n[17-08-07 11:44:26.924]Error:Error extracting metadata for F:/Projects/_Test/lucenenet/src/Lucene.Net/Lucene.Net.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Common/Lucene.Net.Analysis.Common.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Phonetic/Lucene.Net.Analysis.Phonetic.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Stempel/Lucene.Net.Analysis.Stempel.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Classification/Lucene.Net.Classification.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Codecs/Lucene.Net.Codecs.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Expressions/Lucene.Net.Expressions.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Facet/Lucene.Net.Facet.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Grouping/Lucene.Net.Grouping.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Highlighter/Lucene.Net.Highlighter.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.ICU/Lucene.Net.ICU.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Join/Lucene.Net.Join.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Memory/Lucene.Net.Memory.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Misc/Lucene.Net.Misc.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Queries/Lucene.Net.Queries.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.QueryParser/Lucene.Net.QueryParser.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Spatial/Lucene.Net.Spatial.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Suggest/Lucene.Net.Suggest.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.SmartCn/project.json,F:/Projects/_Test/lucenenet/src/tools/lucene-cli/project.json: Object reference not set to an instance of an object.\r\n[17-08-07 11:44:26.925]Info:Completed in 32619.2671 milliseconds\r\n\r\n\r\nBuild failed.\r\n[17-08-07 11:44:26.966]Warning:[ExtractMetadata]Error opening project F:/Projects/_Test/lucenenet/src/tools/lucene-cli/project.json: Object reference not set to an instance of an object.. Ignored.\r\n[17-08-07 11:44:26.966]Error:Error extracting metadata for F:/Projects/_Test/lucenenet/src/Lucene.Net/Lucene.Net.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Common/Lucene.Net.Analysis.Common.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Phonetic/Lucene.Net.Analysis.Phonetic.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Stempel/Lucene.Net.Analysis.Stempel.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Classification/Lucene.Net.Classification.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Codecs/Lucene.Net.Codecs.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Expressions/Lucene.Net.Expressions.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Facet/Lucene.Net.Facet.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Grouping/Lucene.Net.Grouping.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Highlighter/Lucene.Net.Highlighter.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.ICU/Lucene.Net.ICU.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Join/Lucene.Net.Join.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Memory/Lucene.Net.Memory.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Misc/Lucene.Net.Misc.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Queries/Lucene.Net.Queries.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.QueryParser/Lucene.Net.QueryParser.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Spatial/Lucene.Net.Spatial.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Suggest/Lucene.Net.Suggest.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.SmartCn/project.json,F:/Projects/_Test/lucenenet/src/tools/lucene-cli/project.json: Object reference not set to an instance of an object.\r\n        1 Warning(s)\r\n        1 Error(s)\r\n\r\n\r\n\r\nF:\\Projects\\_Test\\lucenenet>powershell -file apidocs/docs.ps1 -ServeDocs 1\r\n\r\n\r\n    Directory: F:\\Projects\\_Test\\lucenenet\\apidocs\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----         8/7/2017   6:43 PM                tools\r\n\r\n\r\n    Directory: F:\\Projects\\_Test\\lucenenet\\apidocs\\tools\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----         8/8/2017   4:45 PM                tmp\r\nd-----         8/7/2017   6:43 PM                docfx\r\nd-----         8/7/2017   6:43 PM                nuget\r\nd-----         8/7/2017   6:43 PM                vswhere\r\nCleaning...\r\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\amd64'.\r\nAll packages listed in packages.config are already installed.\r\n\r\n\r\n    Directory: F:\\Projects\\_Test\\lucenenet\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----         8/7/2017   6:43 PM                PluginsFolder\r\nMicrosoft (R) Build Engine version 15.1.1012.6693\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\r\nBuild started 8/8/2017 4:45:23 PM.\r\nProject \"F:\\Projects\\_Test\\lucenenet\\src\\docs\\LuceneDocsPlugins\\LuceneDocsPlugi\r\nns.sln\" on node 1 (default targets).\r\nValidateSolutionConfiguration:\r\n  Building solution configuration \"Debug|Any CPU\".\r\nProject \"F:\\Projects\\_Test\\lucenenet\\src\\docs\\LuceneDocsPlugins\\LuceneDocsPlugi\r\nns.sln\" (1) is building \"F:\\Projects\\_Test\\lucenenet\\src\\docs\\LuceneDocsPlugins\r\n\\LuceneDocsPlugins\\LuceneDocsPlugins.csproj\" (2) on node 1 (default targets).\r\nGenerateTargetFrameworkMonikerAttribute:\r\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output fi\r\nles are up-to-date with respect to the input files.\r\nCoreCompile:\r\nSkipping target \"CoreCompile\" because all output files are up-to-date with resp\r\nect to the input files.\r\nCopyFilesToOutputDirectory:\r\n  LuceneDocsPlugins -> F:\\Projects\\_Test\\lucenenet\\apidocs\\lucenetemplate\\plugi\r\n  ns\\LuceneDocsPlugins.dll\r\nDone Building Project \"F:\\Projects\\_Test\\lucenenet\\src\\docs\\LuceneDocsPlugins\\L\r\nuceneDocsPlugins\\LuceneDocsPlugins.csproj\" (default targets).\r\n\r\nDone Building Project \"F:\\Projects\\_Test\\lucenenet\\src\\docs\\LuceneDocsPlugins\\L\r\nuceneDocsPlugins.sln\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.39\r\nBuilding metadata...\r\n[17-08-08 09:45:43.390]Warning:[ExtractMetadata]Error opening project F:/Projects/_Test/lucenenet/src/tools/lucene-cli/project.json: Object reference not set to an instance of an object.. Ignored.\r\n[17-08-08 09:45:43.409]Error:Error extracting metadata for F:/Projects/_Test/lucenenet/src/Lucene.Net/Lucene.Net.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Common/Lucene.Net.Analysis.Common.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Phonetic/Lucene.Net.Analysis.Phonetic.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Stempel/Lucene.Net.Analysis.Stempel.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Classification/Lucene.Net.Classification.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Codecs/Lucene.Net.Codecs.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Expressions/Lucene.Net.Expressions.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Facet/Lucene.Net.Facet.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Grouping/Lucene.Net.Grouping.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Highlighter/Lucene.Net.Highlighter.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.ICU/Lucene.Net.ICU.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Join/Lucene.Net.Join.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Memory/Lucene.Net.Memory.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Misc/Lucene.Net.Misc.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Queries/Lucene.Net.Queries.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.QueryParser/Lucene.Net.QueryParser.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Spatial/Lucene.Net.Spatial.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Suggest/Lucene.Net.Suggest.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.SmartCn/project.json,F:/Projects/_Test/lucenenet/src/tools/lucene-cli/project.json: Object reference not set to an instance of an object.\r\n[17-08-08 09:45:43.410]Info:Completed in 19189.1809 milliseconds\r\n\r\n\r\nBuild failed.\r\n[17-08-08 09:45:43.446]Warning:[ExtractMetadata]Error opening project F:/Projects/_Test/lucenenet/src/tools/lucene-cli/project.json: Object reference not set to an instance of an object.. Ignored.\r\n[17-08-08 09:45:43.447]Error:Error extracting metadata for F:/Projects/_Test/lucenenet/src/Lucene.Net/Lucene.Net.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Common/Lucene.Net.Analysis.Common.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Phonetic/Lucene.Net.Analysis.Phonetic.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.Stempel/Lucene.Net.Analysis.Stempel.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Classification/Lucene.Net.Classification.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Codecs/Lucene.Net.Codecs.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Expressions/Lucene.Net.Expressions.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Facet/Lucene.Net.Facet.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Grouping/Lucene.Net.Grouping.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Highlighter/Lucene.Net.Highlighter.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.ICU/Lucene.Net.ICU.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Join/Lucene.Net.Join.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Memory/Lucene.Net.Memory.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Misc/Lucene.Net.Misc.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Queries/Lucene.Net.Queries.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.QueryParser/Lucene.Net.QueryParser.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Spatial/Lucene.Net.Spatial.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Suggest/Lucene.Net.Suggest.csproj,F:/Projects/_Test/lucenenet/src/Lucene.Net.Analysis.SmartCn/project.json,F:/Projects/_Test/lucenenet/src/tools/lucene-cli/project.json: Object reference not set to an instance of an object.\r\n        1 Warning(s)\r\n        1 Error(s)\r\n\r\n\r\n\r\nF:\\Projects\\_Test\\lucenenet>\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321167684/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321184686","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321184686","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321184686,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTE4NDY4Ng==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T08:07:45Z","updated_at":"2017-08-09T08:07:45Z","author_association":"CONTRIBUTOR","body":"Ok so I think I will give up on commenting on all of the above because there is to much. I will as a general note say be careful that you don't get ahead of your self.\r\n\r\nI personally think it would be a bad idea to put to much of all that AspNetCore, Owin etc. into this particular project (project as Lucene in a whole, not each csproj file)...\r\n\r\nInstead I would separate them out and give them meaningful project names... and give them their own release cycle...  (Actually I think the Lucene.Net.Replicator.AspNetCore project would belong in one of those \"child projects\", but that is a bit complicated as it's currently needed for tests, it might be possible to write the tests differently without it or add a minimalistic implementation into test instead)\r\n\r\nThey could still be under \"Lucene.Net\" organisation wise, but I think there would be many advantages in allowing them to have their own repo and life...\r\n\r\nThis would focus this repository on the port of lucene (as direct as possible, but also to support these projects) and each project could have it's individual focus... (Lucene on AspNetCore for all AspNetCore integration on different levels, Lucene on Nancy for that etc.)...\r\n\r\nAlso, your already on the edge of making some decisions that would be bad for larger scale projects... E.g. making a Singleton LuceneWriter (registered in a IoC Container or not) wouldn't that limit you to only having a single index?... that would seem like an odd direction to consider within this context as the Replicator directly supports shards... (aka multiple indexes?)\r\n\r\nIt also seems that as things are right now you can't release each individual csproject on it's own from here?... (E.g. releasing just the Lucene.Net package and not the rest?)... If that is the case then I think that speaks even more for putting these more \"platform\" specific integrations into their own project/repo/release cycle so they are not bound by each other... So that these packages could be release on a much more rapid cycle than Lucene.Net it self. \r\n\r\nThere is ofc. many considerations around such \"branching out\", but from having done so quite a few time my self on our own projects, I can say that it is so much more convenient in the long run...\r\n\r\nAs a final note, I won't be able to find time to take the Lucene.Net.Replicator.AspNetCore project much further, my goal was to focus on Lucene.Net.Replicator it self and provide a meaningful port of that that could be integrated into AspNetCore (which we haven't even adopted yet), AspNet4x, Nancy or similar frameworks with relative ease...\r\n\r\nWhich path you take with Lucene.Net.Replicator.AspNetCore is up to you... But I don't feel right about building anything two involved for a framework/platform I don't even use and therefore don't know all the ins and outs of...\r\n\r\nTo me it was an example integration that could help me find points in the Lucene.Net.Replicator which might cause difficulty when integrating or straight out felt wrong and there are a few things about the ReplicatorService that annoys me in that regard, but there is a broader picture as the HttpReplicator aligns to that same theme and then there is your desire to stay compatible with Java versions, which is questionably because they choose to actually serialize Exception objects, if java clients expect any meaning of that then we are not compatible at all as all Exceptions would end up as \"Unknown Exceptions\" in a Java client... and that goes for the other way around as well...\r\n\r\nI do have a small super simplistic and extremely crude DEMO AspNetCore app that indexes and publishes data and then a Console client that pulls the replicas which works. I am trying to use this to weed out annoyances. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321184686/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212374","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212374","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212374,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM3NA==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T09:35:38Z","updated_at":"2020-05-05T17:57:22Z","author_association":"NONE","body":"<p>So I have a little time to get into this then <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>\n\n<p>Probably nothing new here to you. Mainly just me catching up...</p>\n\n<p>To your first point about GetEnumerator being somewhat hidden/opaque, isn't that just something that is the usual guidance in c#. ie don't mess with the collection from inside a for cos you'll break the enumerator.</p>\n\n<p>In the fairly simple case in the code above you could...<br/>\n(NB just using TermEnum as it's a simple example)</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">TermEnum vector = <something>\nforeach (<span class=\"code-keyword\">var</span> item in vector)\n{\n\t<span class=\"code-keyword\">var</span> x = vector.Term();\n\t<span class=\"code-keyword\">var</span> y = item.Term;  <span class=\"code-comment\">// same thing as <span class=\"code-quote\">'x'</span>\n</span>\tvector.DoStuff();\n\t<span class=\"code-comment\">// but you should probably steer clear of using <span class=\"code-quote\">'Next()'</span>\n</span>}\n</pre>\n</div></div>\n\n<p>There's no need to extend/cast or get access to the enumerator. The enumerators job is to simply move a cursor forwards and support a language construct.<br/>\nOf course this would make it still look weird to a c#/vb dev.<br/>\n<tt>Current</tt> is supposed to return the current value of the cursor. Maybe it could return Current as the collection ('vector' above). So it would look like...</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">TermEnum vector = <something>\nforeach (TermEnum item in vector)\n{\n\t<span class=\"code-keyword\">var</span> x = item.Term();\n}\n</pre>\n</div></div>\n\n<p>Again, weird. Doing the method -> property change would help. But, still feels odd to have the item being the same thing as vector.</p>\n\n<p>Here lies the basic problem. The Lucene \"iterable\" classes represent all of: </p>\n<ul>\n\t<li>the collection\n\t<ul>\n\t\t<li>stepping the cursor</li>\n\t\t<li>collection scope behaviors for the type</li>\n\t</ul>\n\t</li>\n\t<li>the current item within the collection\n\t<ul>\n\t\t<li>\"properties\"</li>\n\t\t<li>item scope behaviors<br/>\nNot only that but there are also different implementations of the pattern with different semantics. ie <tt>Next()</tt> returns success; <tt>NextDoc()</tt> returns an id or magic number; <tt>Advance(target)</tt> spin forward to target</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>Also, the need to allow the Current item to be; created on each iteration; reused; fetch from object pool; ...<br/>\nI'm fairly sure that the EnumEnumerator (or versions of) can handle all that. I'd need to get further into the use cases.</p>\n\n<p>Lastly, there's the observation that the <tt>while</tt> vs <tt>foreach</tt> examples you gave are not equivalent as the while version does not call <tt>Dispose()</tt>. <br/>\nI suspect that in current usage Dispose is never called. Or if it is it's because it's associated with files rather than because we're leaving a loop. Does that match your experience?<br/>\nThinking about it, maybe the enumerator Dispose should be a noop? It's odd for a type to be disposing it's \"parent\" (though I know some StreamWriter/Reader classes do, it's still odd/annoying). Again there's a scoping concept here that's muddled by the type being many things.</p>\n\n<p>All very Tricky...</p>\n\n<p>I think there's some combination of</p>\n<ul>\n\t<li>isolating the \"item\" type</li>\n\t<li>using the collection object behaviors from inside the loop</li>\n\t<li>implementing the enumerator such that it is ok about the cursor being changed from outside</li>\n</ul>\n\n\n<p>It's going to be very hard to get the semantics of each type in a sane shape such that it's hard for a dev to get tripped up.<br/>\nWhich is why this have been open for 5+ years <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>\n\n<p>I'll see if I can put together a proof of concept PR</p>\n<i>by andypook</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212374/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321221259","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321221259","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321221259,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTIyMTI1OQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T10:50:27Z","updated_at":"2017-08-09T10:50:27Z","author_association":"CONTRIBUTOR","body":"Jens, thanks for the feedback. \r\n\r\nWhile I generally agree with your points, we are unfortunately obligated to work within the confines of the Apache organization, which comes with its own set of conditions. For one, there is a [formal release process](http://www.apache.org/legal/release-policy.html) we need to abide by (including a vote process that takes a minimum of 3 days per release), and I am not sure what is involved in setting up another Apache repo (nor am I sure I really want to go down that rabbit hole).\r\n\r\nThat said, we could follow the [Lucene project's](https://github.com/apache/lucene-solr) example with their separate release cycles of Lucene and SOLR: put everything into one repo and use separate tag names for each product. At least they started out that way - now they are releasing both products at the same time.\r\n\r\nIt probably makes sense, though. If we have a release vote on both product A and product B and product B depends on product A, and product A doesn't pass the release vote, then product B will be stalled anyway.\r\n\r\nOf course, there is an alternative - build these integration packages outside of Apache's umbrella. But I am not sure what Apache's policy is in this regard (anyone?). Given the current situation with Spatial4n and LuceneNetDemo being on Itamar's personal account and no ability to push to them without being given special permission (by Itamar), and the fact that most of the projects on NuGet that depend on Lucene.Net are either dead or dying, it feels like this idea could go wrong as well. Sure, it is feasible for a huge team like Microsoft to do this, but trying to pull this off with a small team probably isn't very realistic.\r\n\r\nNot to mention, platform support. With the release of .NET Standard 2.0 looming, we are looking at a sweeping update that will hit every project. And what of .NET Standard 2.5 when that is eventually released? As much as Microsoft has promised by creating .NET Standard, we still have some branching between platforms we need to maintain, although it isn't as bad as if we were trying to use a portable library. Now, multiply that update by the number of repos that we would have to update (each with their own ever diverging build script)...and we have a huge pile of work.\r\n\r\nBut I will take this into consideration. Perhaps after a few releases that are synced up, we can put together a new template in TeamCity so each of these integration packages can have their own release cycle. But since the team of active PMC members is so small, finding the 3 votes necessary for every one of those separate releases might not be very realistic. Our last beta vote had exactly the minimum 3 votes that were required (including my own).\r\n\r\n> Also, your already on the edge of making some decisions that would be bad for larger scale projects... E.g. making a Singleton LuceneWriter (registered in a IoC Container or not) wouldn't that limit you to only having a single index?... that would seem like an odd direction to consider within this context as the Replicator directly supports shards... (aka multiple indexes?)\r\n\r\nActually, I was planning to make an API to be able to register multiple IndexWriters or IndexReaders at application startup as singleton. Something along the lines of...\r\n\r\n```\r\nservices.AddSearch().WithIndex(...).WithIndex(...)\r\n```\r\n\r\nBut the fact remains that the recommendation is to use a singleton IndexWriter (or Reader) per index, meaning if we didn't provide the tools do it with a simple straightforward API, everyone would end up having to do the research how to do it and write the same boilerplate code. And a lot of them would assume they could create an IndexReader instance on each request (or register it with the wrong lifetime) and find out just how poorly that performs.\r\n\r\nI need to explore exactly how this can work in a way that doesn't block people from doing it their own way, providing all of the overloads that allow pre-built implementations to be passed in as an alternative to using fluent builders. But regardless of how you slice it, setting up an index reader or writer belongs in the application startup phase and nowhere else, although you need to access those instances at runtime (again best solved with DI). Microsoft is providing a standard way for doing this in their latest UI frameworks and it would be a real shame not to take advantage of this fact.\r\n\r\n> As a final note, I won't be able to find time to take the Lucene.Net.Replicator.AspNetCore project much further, my goal was to focus on Lucene.Net.Replicator it self and provide a meaningful port of that that could be integrated into AspNetCore (which we haven't even adopted yet), AspNet4x, Nancy or similar frameworks with relative ease...\r\n\r\n> Which path you take with Lucene.Net.Replicator.AspNetCore is up to you... But I don't feel right about building anything two involved for a framework/platform I don't even use and therefore don't know all the ins and outs of...\r\n\r\nNo problem. Your contribution is much appreciated.\r\n\r\n> To me it was an example integration that could help me find points in the Lucene.Net.Replicator which might cause difficulty when integrating or straight out felt wrong and there are a few things about the ReplicatorService that annoys me in that regard, but there is a broader picture as the HttpReplicator aligns to that same theme and then there is your desire to stay compatible with Java versions, which is questionably because they choose to actually serialize Exception objects, if java clients expect any meaning of that then we are not compatible at all as all Exceptions would end up as \"Unknown Exceptions\" in a Java client... and that goes for the other way around as well...\r\n\r\nI see. You are right that it might not entirely interoperate with the Java version (at least not if there are exceptions), but at least we have explored that option and came to this conclusion. \r\n\r\n> I do have a small super simplistic and extremely crude DEMO AspNetCore app that indexes and publishes data and then a Console client that pulls the replicas which works. I am trying to use this to weed out annoyances.\r\n\r\nCool. Just let me know when you are ready to hand over the reigns. I am still exploring whether I can make API docs part of the upcoming beta release.\r\n\r\nI would also like to tinker with getting replicator working in a demo setup. Perhaps you can put the demo project in a separate repo? When you are ready, that is.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321221259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321233931","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321233931","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321233931,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTIzMzkzMQ==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T11:55:26Z","updated_at":"2017-08-09T12:36:08Z","author_association":"CONTRIBUTOR","body":"> While I generally agree with your points, we are unfortunately obligated to work within the confines of the Apache organization, which comes with its own set of conditions. For one, there is a formal release process we need to abide by (including a vote process that takes a minimum of 3 days per release), and I am not sure what is involved in setting up another Apache repo (nor am I sure I really want to go down that rabbit hole).\r\n\r\nHoly crap... I am glad I am not under that umbrella, in an age of continuous delivery and continuous deployment that sounds like poison... o.O...\r\n\r\n> That said, we could follow the Lucene project's example with their separate release cycles of Lucene and SOLR: put everything into one repo and use separate tag names for each product. At least they started out that way - now they are releasing both products at the same time.\r\n\r\n> It probably makes sense, though. If we have a release vote on both product A and product B and product B depends on product A, and product A doesn't pass the release vote, then product B will be stalled anyway.\r\n\r\nProduct B would always depend on a Released A. (Could be a Beta Release or Final Release, but it would be something that was out there)... It would work the same way as if I choose to create a package that used Lucene.NET...\r\n\r\n> Of course, there is an alternative - build these integration packages outside of Apache's umbrella. But I am not sure what Apache's policy is in this regard (anyone?). Given the current situation with Spatial4n and LuceneNetDemo being on Itamar's personal account and no ability to push to them without being given special permission (by Itamar), and the fact that most of the projects on NuGet that depend on Lucene.Net are either dead or dying, it feels like this idea could go wrong as well. Sure, it is feasible for a huge team like Microsoft to do this, but trying to pull this off with a small team probably isn't very realistic.\r\n\r\nI doubt very much that putting things in under ASF is what will keep it alive, actually I would think the opposite as ASF seems like such a scary thing to get started with which probably scares off allot of contributors... Besides, I think the thriving world of OpenSource proves that even single person contributions can end up becoming projects with huge communities... But ofc. you can't just put something into OpenSource and then think it will just take a life of it's own... It requires effort... But again...\r\n\r\nI would say that a more likely cause for the many deaths of Lucene.Net dependent projects was that Lucene.Net it self seemed to have died. I have even questioned my use of Lucene.Net in favor for Solr/ELK due to the version gap...\r\n\r\nAnyways if you choose to start by setting up a project for these AspNetCore integrations etc... There is nothing keeping you from pulling them into Lucene.Net under ASF later?... It does happen that someone makes a thing for a framework that at a later point becomes part of that framework in one way or another, and then the small projects largely dies... Been there, done that >.<... \r\n\r\n> But the fact remains that the recommendation is to use a singleton IndexWriter (or Reader) per index, meaning if we didn't provide the tools do it with a simple straightforward API, everyone would end up having to do the research how to do it and write the same boilerplate code. And a lot of them would assume they could create an IndexReader instance on each request (or register it with the wrong lifetime) and find out just how poorly that performs.\r\n\r\nThats not a singleton though... without knowing for sure, I am fairly sure that it's not just a recommendation in this context, firstly the writer needs to be configured with a specific deletion policy and you create revisions based on the writer, so having multiple writers for a single index sounds like something that would break... I am not sure though, I could be wrong...\r\n\r\nSo what your talking about is having a registry of indexes (with writers and readers)... That registry could be registered as a singleton... (Sounds much like my LuceneIndexContext on a different project >.<)\r\n\r\n-------------------\r\nAnyways, this is derailing things a bit, it was just some input for you going forward. So we should probably get back to focusing on the actual Lucene.Net.Replicator, and comments in there >.<...\r\n\r\nIll see if I can find a suitable place for that little demo app.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321233931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212377","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212377","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212377,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM3Nw==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T14:22:44Z","updated_at":"2020-05-05T17:57:22Z","author_association":"NONE","body":"<p>No problem. I am just a bit surprised given the choice for some prime green field development vs this headache that you would choose this path. But nonetheless, my aching head thanks you <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/>.</p>\n\n<p>By now you have probably worked out that <tt>IBytesRefIterator</tt> should inherit <tt>IEnumerator<T></tt> and that implementing that interface isn't much more complicated than dividing the 1 <tt>BytesRef Next();</tt> method into <tt>bool MoveNext();</tt> and <tt>BytesRef Current { get;</tt>}. The other fun stuff such as <tt>SeekCeil()</tt> and <tt>SeekExact()</tt> most likely won't be affected. And yes, this means the <tt>Dispose()</tt> method should be a no-op in our case, but who knows, maybe it won't be in a subclass somewhere - just make sure to put in the dispose pattern so we are covered.</p>\n\n<p>The only real trick is ensuring the other methods on <tt>TermsEnum</tt> and its subclasses are exposed when implementing the <tt>IEnumerable<BytesRef></tt> on <tt>Terms</tt> (and anybody else using <tt>TermsEnum</tt>). As I mentioned before, I think overloading <tt>GetEnumerator()</tt> with a method that returns the <tt>TermsEnum</tt> type is the solution there. But, that probably doesn't take into account any subclasses of <tt>Terms</tt> that have a different type of iterator returned from their <tt>GetIterator()</tt> method than the abstract class <tt>TermsEnum</tt>.</p>\n\n<blockquote><p>Lastly, there's the observation that the while vs foreach examples you gave are not equivalent as the while version does not call Dispose(). </p></blockquote>\n\n<p>That is just because <tt>TermsEnum</tt> doesn't implement <tt>IDisposable</tt> yet. Of course, that all changes when implementing <tt>IEnumerator<T></tt>...</p>\n\n<p>And there are several places throughout the codebase where enumerators are utilized without a using block or calling <tt>Dispose()</tt>. The tests aren't such a big concern, but we really shouldn't be doing this in the production code. I am sure there are some places where you can put your own implementation with its own unmanaged resources and watch the resource leaks pile up because we aren't doing our job and calling <tt>Dispose()</tt>. The real trick is locating them. I really wish Microsoft would put a feature in Visual Studio that searches for code that should exist but doesn't <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/>.</p>\n\n<p>Then again, I haven't been using Code Analysis. Maybe that (or Resharper?) can be used to quickly detect all of the <tt>Dispose()</tt> violations. If you can find them, maybe that is a PR that should go ahead of the refactoring.</p>\n\n<blockquote><p>It's odd for a type to be disposing it's \"parent\" (though I know some StreamWriter/Reader classes do, it's still odd/annoying).</p></blockquote>\n\n<p>Agreed - when using <tt>Dispose()</tt> in conjunction with the decorator pattern things get odd. But how does that apply to <tt>TermsEnum</tt>? Disposing a superclass is not quite the same thing (and is rather expected using the dispose pattern).</p>\n\n<blockquote><p>All very Tricky...</p>\n\n<p>I think there's some combination of</p>\n\n<ol>\n\t<li>isolating the \"item\" type</li>\n\t<li>using the collection object behaviors from inside the loop</li>\n\t<li>implementing the enumerator such that it is ok about the cursor being changed from outside</li>\n</ol>\n\n\n<p>It's going to be very hard to get the semantics of each type in a sane shape such that it's hard for a dev to get tripped up.</p></blockquote>\n\n<p>In Java the \"item\" type is usually the one that is returned from the <tt>Next()</tt> method. But the real issue is all of the \"extras\" that come along with these iterators and how to expose them without casting the result of <tt>GetEnumerator()</tt>. Keep in mind the \"extras\" (ala LINQ) are usually part of the <tt>IEnumerable<T></tt> not part of the <tt>IEnumerator<T></tt>. Maybe trying to expose the \"extras\" is the wrong approach altogether. Maybe those \"extras\" are crying out to be refactored into services of their own that are separate from the enumerator.</p>\n\n<p>If you go that route, note that because we are a port we had to redefine what \"maintainable\" means. So, when refactoring a class into many, the typical approach I follow is to drop all of that code into the same code file that is being refactored (in the same order as much as possible). This will make it easy to figure out where that code is when upgrading to the next Lucene version. The standard approach of putting each type into a file on its own would be chaos for a port version upgrade.</p>\n\n<p>But you seem to have a handle on things. If there is a solution to be found here, I am sure you will be able to find it. If you need a sounding board to run your ideas by, I am here.</p>\n\n<blockquote><p>Which is why this have been open for 5+ years </p></blockquote>\n\n<p>Yea, I bet the decision to wait until the \"next release\" was a decision that came with some regret. Unfortunately, Lucene.Net struggled to get over the hump of getting a 4.x release because the project grew by a factor of 10. We are almost there now, and the path to catch up to Lucene 6.x is now clear considering how much smaller the change set is between here and there than the monster change set between 3.x and 4.x.</p>\n<i>by nightowl888</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212377/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212381","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212381","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212381,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM4MQ==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T15:20:04Z","updated_at":"2020-05-05T17:57:23Z","author_association":"NONE","body":"<p>Yeah, well, I thought, that's looks like it might be isolated, small. Ha!<br/>\nI'll poke at it some more, see what turns up. But I may just punt and look for something else <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>\n\n<p>I'm not sure I'm on the same wave length just yet...</p>\n\n<p>\"how does that apply to TermsEnum? Disposing a superclass is not quite the same thing\"<br/>\nBut the enumerator is not a super class. It's a \"child\" of the TermsEnum (or whatever) created for a purpose. Disposing the child shouldn't dispose the \"parent\". I'm fairly sure that IEnumerator has Dispose so that things like listing files (managed resource) can be cleaned up. But still, it's about cleaning up resources used by the enumerator <em>not</em> by the parent collection type.<br/>\nIf you want to Dispose the collection type then that's a separate operation. There may be other behaviors available, appropriate on the collection type <em>after</em> you've looped some aspect of it.<br/>\nRight ??</p>\n\n<p>Also a bit confused around the \"extras\" topic. I don't see the problem. We'd get all the linq bits for free. You're right, they are generally defined on <tt>IEnumerable<T></tt> But that's fine. In your example of <tt>TermsEnum</tt> being <tt>IEnumerable<BytesRef></tt> then regardless of how the enumerator is factored you can still do <tt>foreach(var item in termsEnum.Where(b=>b.Length>100))</tt></p>\n\n<p>I was thinking by \"extras\" you meant \"other things on the collection type\". By my theory those are either: part of the item and exposed there; or an op you call in the collection object from inside the loop.</p>\n\n<p>What am I missing?</p>\n<i>by andypook</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212381/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212385","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212385","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212385,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM4NQ==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T17:19:36Z","updated_at":"2020-05-05T17:57:23Z","author_association":"NONE","body":"<p>Ahh...I think I now know where we are getting our wires crossed.</p>\n\n<p>You have become a victim of the Java developers' incessant need to abbreviate everything (which annoys the crap out of me, but unfortunately fixing it is a losing battle). </p>\n\n<p>Essentially, <tt>TermsEnum</tt> == <tt>IEnumerator<BytesRef></tt>, <tt>TermsEnum</tt> != <tt>IEnumerable<BytesRef></tt>. \"Enum\" could be interpreted as either one, hence the misunderstanding (hell, come to think of it, it could even be misinterpreted as an enumeration).</p>\n\n<p>So, rather than loading up the <tt>IEnermerable<BytesRef></tt> with all kinds of useful stuff like LINQ does, our Lucene friends have loaded up a <tt>IEnumerator<T></tt> (or not - they didn't actually implement Java's analogue to this) with stuff that most <tt>IEnumerator</tt> s don't do. Which of course is leaving us scratching our heads.</p>\n\n<p>So, when disposing <tt>TermsEnum</tt>, we are doing the standard <tt>IEnumerator<T>.Dispose()</tt> stuff that the foreach loop does not some funky other relationship. The <tt>Terms</tt> class is essentially the <tt>IEnumerable<BytesRef>></tt> that we are enumerating over.</p>\n<i>by nightowl888</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212385/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212389","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212389","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212389,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM4OQ==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T18:43:53Z","updated_at":"2020-05-05T17:57:23Z","author_association":"NONE","body":"<p>Yes, agreed. I think I wasn't quite using the right words to disambiguate.</p>\n\n<p>So... take a breath... lots of Esomething words coming....</p>\n\n<p>Yes, the Enum types have the characteristics of a c# IEnumerator (Next() etc).<br/>\nBut also represent the current item (via Term etc).<br/>\nBut also has additional \"collection\" type operations (<tt>SeekExact()</tt> etc) (are these part of what you were referring to as \"extras\"?).<br/>\nIt's this Enum class I was calling the \"collection\" type 'cos it kind of holds the collection state.</p>\n\n<p>What I was proposing was to make the Enum also look like an IEnumerable so that you can <tt>foreach</tt> over it.<br/>\nWhich means it needs a <tt>GetEnumerable()</tt> to return an IEnumerator. This new enumerator is the <tt>EnumEnumerator</tt> type from in previous messages.</p>\n\n<p>So, I'm taking an Enum, adding an IEnumerable facade, to return a new IEnumerable type which pokes the Enum to move forward.</p>\n\n<p>It was the <tt>Dispose()</tt> of this new IEnumerator that I was referring to. Pretty convinced that this one should always be a no-op. Exiting the loop should not Dispose the Enum (ie the \"collection\") and as the new IEnumerator is just poking methods on the Enum, there's nothing for it to clean up.</p>\n\n<p>Pretty sure I've got all the right E's in the right place <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>\n\n<p>NB: some thought would be needed to define what the \"item\" class (representing Current) should look like in each case.<br/>\nNB: Calling a Current changing method (ie one of the Seek...() methods) from inside a foreach would result in undefined behavior.</p>\n\n<p>Phew... Did that make sense; fit with your view of the universe?</p>\n<i>by andypook</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321351266","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321351266","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321351266,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTM1MTI2Ng==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T19:04:39Z","updated_at":"2017-08-09T19:04:39Z","author_association":"CONTRIBUTOR","body":"> Holy crap... I am glad I am not under that umbrella, in an age of continuous delivery and continuous deployment that sounds like poison... o.O...\r\n\r\nIt's both a blessing and a curse. For example, we would never be able to pull this off without the resources of the CI account (TeamCity) that we have setup. It takes at least an hour to run the tests on each platform, so we need something we can run them in parallel on for at least that long. I tried this with MyGet and it turns out there is a limit to 15 minutes per build. So, having a full CI server with huge amounts of storage and RAM is a good thing. I also got some help from the team setting it up.\r\n\r\nAlso, Apache requires that all code must be testable before being released (implying there must be tests), and ensure that the licensing is all legal, all code files have license headers, etc.\r\n\r\nBut not being able to setup your own repo (because they are hosted by Apache) and having to deal with JIRA instead of just using GitHub's issue tracker causes some friction.\r\n\r\nCould there be Lucene.Net without Apache? I don't know. There must be some reason why no developer before me went off on their own and decided to pull it out from under Apache (and I don't think there is anything in the licensing preventing it). \r\n\r\nBut we do what we can. Recently, there have been more contributions than since I started working on this a year ago. I am not sure if that is because we are now so close to the finish line, or my efforts of updating documentation, getting a release on NuGet, etc are starting to pay off.\r\n\r\nBut I think that to help combat this we really need to update the documentation, website, simplify deployment, etc. and generally make Lucene.Net a good place to work. Key among these things is to lower the bar for how difficult it is to add search to an application, and that is what I am hoping to achieve with these integration packages (which in turn should increase both downloads and contributions). But of course, if you would rather use the low-level APIs directly they are not going anywhere.\r\n\r\n> So what your talking about is having a registry of indexes (with writers and readers)... That registry could be registered as a singleton... (Sounds much like my LuceneIndexContext on a different project >.<)\r\n\r\nYes, it is probably similar. Although it will probably end up being an `IIndexAccessor` or something along those lines.\r\n\r\nIt sounds like you are not too familiar with dependency injection (which is why I am following this approach), and although you can certainly get by without it, it is definitely something every developer should know going forward. I was reluctant to read up on DI at first and wasn't sure that doing so would be worth the time, but ever since I read [Dependency Injection in .NET](https://www.manning.com/books/dependency-injection-in-dot-net), it has forever changed the way I write code. And out of dozens of books that I have read there are very few I can say have accomplished that. But as they say, you can lead a horse to water, but you can't make them drink - do as you will :).\r\n\r\n> Anyways, this is derailing things a bit, it was just some input for you going forward. So we should probably get back to focusing on the actual Lucene.Net.Replicator, and comments in there >.<...\r\n\r\n> Ill see if I can find a suitable place for that little demo app.\r\n\r\nThanks again. Replicate away! And if you can, find a way to replicate contributors :).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321351266/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321375016","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321375016","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321375016,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTM3NTAxNg==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T20:40:06Z","updated_at":"2017-08-09T20:40:06Z","author_association":"CONTRIBUTOR","body":"> It sounds like you are not too familiar with dependency injection (which is why I am following this approach), and although you can certainly get by without it, it is definitely something every developer should know going forward. I was reluctant to read up on DI at first and wasn't sure that doing so would be worth the time, but ever since I read Dependency Injection in .NET, it has forever changed the way I write code. And out of dozens of books that I have read there are very few I can say have accomplished that. But as they say, you can lead a horse to water, but you can't make them drink - do as you will :).\r\n\r\nI don't know how you would get that idea? I have been usiing IoC/DI for years, often but not always paired with a IoC Container.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321375016/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212393","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212393","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212393,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM5Mw==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T20:40:10Z","updated_at":"2020-05-05T17:57:23Z","author_association":"NONE","body":"<blockquote><p>It's this Enum class I was calling the \"collection\" type 'cos it kind of holds the collection state.</p>\n\n<p>What I was proposing was to make the Enum also look like an IEnumerable so that you can foreach over it.<br/>\nWhich means it needs a GetEnumerable() to return an IEnumerator. This new enumerator is the EnumEnumerator type from in previous messages.</p>\n\n<p>So, I'm taking an Enum, adding an IEnumerable facade, to return a new IEnumerable type which pokes the Enum to move forward.</p></blockquote>\n\n<p>That is an interesting idea.</p>\n\n<p>I am not sure if the state is actually being \"iterated over\" so much as it is being calculated on the fly. But then, <tt>IEnumerable<T></tt> is just an interface - it doesn't actually define any behavior. In fact, I had to redefine what the key and value <tt>ICollection<T></tt> s do in CharArrayMap's KeyCollection and ValueCollection, so maybe this is also possible.</p>\n\n<p>> NB: some thought would be needed to define what the \"item\" class (representing Current) should look like in each case.<br/>\n> NB: Calling a Current changing method (ie one of the Seek...() methods) from inside a foreach would result in undefined behavior.</p>\n\n<p>So then we end up with some behavior that doesn't fit the mold.</p>\n\n<p>I thought for a moment that it could be possible these SeekCeil and SeekExact methods are only defined here because there are no such thing as extension methods in Java, but since they are overridden in subclasses, that is probably not a valid assumption.</p>\n\n<p>Speaking of which, I suggest you have a look at how they are used in the TermsEnum overloads in the codecs (for example <span class=\"error\">&#91;Lucene40TermVectorsReader&#93;</span>(<a href=\"https://github.com/apache/lucenenet/blob/468199e3fa95c7e1f77b14e7f00aeaafd7c2f8b9/src/Lucene.Net/Codecs/Lucene40/Lucene40TermVectorsReader.cs#L446\" class=\"external-link\" rel=\"nofollow\">https://github.com/apache/lucenenet/blob/468199e3fa95c7e1f77b14e7f00aeaafd7c2f8b9/src/Lucene.Net/Codecs/Lucene40/Lucene40TermVectorsReader.cs#L446</a>)) or <span class=\"error\">&#91;Lucene45DocValuesProducer.TermsEnumAnonymousInnerClassHelper&#93;</span>(<a href=\"https://github.com/apache/lucenenet/blob/468199e3fa95c7e1f77b14e7f00aeaafd7c2f8b9/src/Lucene.Net/Codecs/Lucene45/Lucene45DocValuesProducer.cs#L1090\" class=\"external-link\" rel=\"nofollow\">https://github.com/apache/lucenenet/blob/468199e3fa95c7e1f77b14e7f00aeaafd7c2f8b9/src/Lucene.Net/Codecs/Lucene45/Lucene45DocValuesProducer.cs#L1090</a>).</p>\n\n<p>As you can see, the complexity of these enums becomes quite high (lots of internal state), and it seems to me it would be simpler to port future changes from Lucene if the general structure of the \"extras\" (that is, the properties and Seek* methods) were left alone (or at least left intact and used by some other type of facade). The DocsAndPositionsEnum s are even more complex than this.</p>\n\n<p>The only thing I was hoping to get out of this was the added ability to use a foreach loop on Terms (and possibly the DocIdSetIterator). Sure we could refactor the TermsEnum data structure to be more .NET-like, but then where would we be when we need to connect the dots on the next Lucene upgrade? I am not necessarily against it, but finding bugs in the codec code is no picnic, so we would need some clear way to ensure future codecs behavior can be mapped onto the new structure without causing too much pain. Keep in mind, the codecs change in every major (and nearly every minor) version.</p>\n\n<blockquote><p>Phew... Did that make sense; fit with your view of the universe?</p></blockquote>\n\n<p>Wow, do I sound so closed minded? I think I need to work on my delivery <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/>. </p>\n<i>by nightowl888</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212393/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321376776","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321376776","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321376776,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTM3Njc3Ng==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-09T20:47:19Z","updated_at":"2017-08-09T20:47:19Z","author_association":"CONTRIBUTOR","body":"> I don't know how you would get that idea? I have been usiing IoC/DI for years, often but not always paired with a IoC Container.\r\n\r\nMy bad. To me it seems natural to want to put all of the startup code in the composition root (which Microsoft has made a nice way to do) and I made an assumption that one had to do with the other...It really is 3:45am, isn't it? :)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321376776/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321490358","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321490358","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321490358,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTQ5MDM1OA==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-10T08:45:20Z","updated_at":"2017-08-10T08:46:22Z","author_association":"CONTRIBUTOR","body":"> Could there be Lucene.Net without Apache? I don't know. There must be some reason why no developer before me went off on their own and decided to pull it out from under Apache (and I don't think there is anything in the licensing preventing it).\r\n\r\nActually way back the first time I began to look into Lucene on .NET I did come across a few other attempts on just that, but I guess they died off in favor for this, and to some extend thanks for that because one of them attempted to use a RAW port (no .NET-fications) and then just build a wrapper around it, in theory a good idea if you could do fully automated porting for every Lucene release, but in practice not viable at all I think...\r\n\r\nOther solutions simply used a JNBridge and the Lucene Jar's... No idea how well that would work, again I think you would have the wrapper layer. Sounds awfully ineffective...","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321490358/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212395","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212395","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212395,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM5NQ==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-10T08:45:53Z","updated_at":"2020-05-05T17:57:24Z","author_association":"NONE","body":"<blockquote><p>Wow, do I sound so closed minded?</p></blockquote>\n<p>Ha. No not at all <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> more worried I just not seeing the whole picture.</p>\n\n<blockquote><p>not sure if the state is actually being \"iterated over\" ... </p></blockquote>\n<p>Well, in so far as <tt>Next</tt> moves a set of values one step forward, it can certainly be thought of that way. I think of these like a cursor over a sql table. You can foreach over the rows. How the data is actually retrieved is abstracted. It could be one at a time, batches, all of them, cached... At the foreach level you just call Next to inspect the values of the next item.</p>\n\n<blockquote><p><tt>IEnumerable<T></tt> is just an interface - it doesn't actually define any behavior.</p></blockquote>\n<p>Right, this is one of those language syntax enabling things. You actually don't need to specify the interface. As long as the class implements <tt>GetEnumerator()</tt> then foreach will work. </p>\n\n<blockquote><p>So then we end up with some behavior that doesn't fit the mold.</p></blockquote>\n<p>True. But that's completely normal.<br/>\nImagine an enumerator over a Stream that pulls a line of text at a time. What would happen if you called <tt>myStream.Seek(...)</tt> inside the loop? Or a foreach over a Dictionary and call <tt>myDictionary.Add(...)</tt>? The behavior is to either throw (because the Dictionary.Enumerator protects against this) or some undefined behavior depending on which Stream/Reader or underlying storage is being used. Having overridden implementations with different behaviors is also to be expected. Many hours of fun to be had following Stream/TextReader etc. There's no guarantee that descendant classes will have similar behavior at he edges.</p>\n\n<p>My theory was to enable foreach that would produce items representing the values of the Enum that change when its Next is called. This would be entirely an overlay/facade. All the existing members would remain presenting a dual api.<br/>\nThis way copy/pasting code from Java is still possible (modulo c# style properties). But the while style can be refactored to foreach. Or green field dev can be done in whichever style the dev likes.</p>\n\n<p>All linq style stuff will work. I don't think the \"extra\" (Seek etc) are a problem. Most of them aren't composable as they return a single item or perfrom some op over the \"collection\". I mean for example you probably wouldn't call <tt>SeekExact</tt> from inside a foreach, in the same way you would use a dictionary indexer if you were foreach'ing over it. Or call <tt>Sort</tt> inside a foreach over a List.<br/>\nThose that are composable (ie the various <tt>Docs</tt> methods) will work (assuming the <tt>DocsEnum</tt> is converted. So you could image <tt>terms.Docs(...).Where(d=>...).Select(...)</tt> working. But I would expect them to be at the beginning of the chain.<br/>\nI guess you could image a few extra linq style extensions for special cases. But once you're into enumerable land it does cause some restrictions. Unless you want to get into rewriting expressions trees (runs away screaming).</p>\n\n<p>You are quite right, trying to fit this in such that it's consistent across the class hierarchies is going to be a challenge for sure <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>\n\n<p>I'm away this weekend but I'll try to put together a PR with a few examples/tests new week to see if it'll work out.</p>\n<i>by andypook</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321512951","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-321512951","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":321512951,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMTUxMjk1MQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-10T10:23:39Z","updated_at":"2017-08-10T10:23:39Z","author_association":"CONTRIBUTOR","body":"> Actually way back the first time I began to look into Lucene on .NET I did come across a few other attempts on just that, but I guess they died off in favor for this, and to some extend thanks for that because one of them attempted to use a RAW port (no .NET-fications) and then just build a wrapper around it, in theory a good idea if you could do fully automated porting for every Lucene release, but in practice not viable at all I think...\r\n\r\n> Other solutions simply used a JNBridge and the Lucene Jar's... No idea how well that would work, again I think you would have the wrapper layer. Sounds awfully ineffective...\r\n\r\nIt sounds like you are referring to what happens when you use [IKVM](http://www.ikvm.net/userguide/tutorial.html) to convert a `.jar` to MSIL byte code. You get a full-on Java-style API including the ridiculously long namespace names. \r\n\r\nI recently have been looking into using it to avoid porting some of the Analysis dependencies (such as UIMA, which is quite large).  I wouldn't use such a thing for Lucene.Net because of the performance impact it would have (which I have read is something like a 20-25% loss, but I suspect would be much higher than that). But even [Standford University](https://sergey-tihon.github.io/Stanford.NLP.NET/) is using IKVM-processed Java for natural language processing, so I think this would be adequate for (at least index time) analysis.\r\n\r\nUnfortunately, even that (apparently long-standing) project has [recently died out](http://weblog.ikvm.net/default.aspx). There will never be .NET Standard support for IKVM unless someone picks up the torch and keeps moving it forward.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/321512951/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212396","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212396","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212396,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjM5Ng==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-14T22:47:01Z","updated_at":"2020-05-05T17:57:41Z","author_association":"NONE","body":"<p>GitHub user AndyPook opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/lucenenet/pull/212\" class=\"external-link\" rel=\"nofollow\">https://github.com/apache/lucenenet/pull/212</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/GH-469\" title=\"Convert Java Iterator classes to implement IEnumerable<T>\" class=\"issue-link\" data-issue-key=\"GH-469\">GH-469</a> - enumerables</p>\n\n<p>    See <a href=\"https://issues.apache.org/jira/projects/LUCENENET/issues/GH-469\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/projects/LUCENENET/issues/GH-469</a> for background.</p>\n\n<p>    This is an early stage proposal for implementing IEnumerable<T> on various \"Enum\" types. To enable `foreach` and linq style operators.</p>\n\n<p>    This prototype provides `EnumEnumerator<T>` as a helper. It can be used in various ways to make the implementation of `IEnumerable<T>` more straightforward.</p>\n\n<p>    I have modified `IBytesRefIterator` and `TermsEnum` to add `IEnumerable<BytesRef>` and therefore to all of it's descendants.</p>\n\n<p>    The test (such as it is) demonstrates retrieving a `TermsEnum` from a reader. Then using `foreach` and a simple `.Count()` linq operator.</p>\n\n<p>    If this approach is acceptable it ought to be adaptable to other Enum types</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/AndyPook/lucenenet\" class=\"external-link\" rel=\"nofollow\">https://github.com/AndyPook/lucenenet</a> <a href=\"https://issues.apache.org/jira/browse/GH-469\" title=\"Convert Java Iterator classes to implement IEnumerable<T>\" class=\"issue-link\" data-issue-key=\"GH-469\">GH-469</a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/lucenenet/pull/212.patch\" class=\"external-link\" rel=\"nofollow\">https://github.com/apache/lucenenet/pull/212.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #212</p>\n\n<hr />\n<p>commit 008df498bcba7e9940ca97efc83d656ddb03b2c3<br/>\nAuthor: Andy Pook <andy.pook@gmail.com><br/>\nDate:   2017-08-14T21:32:45Z</p>\n\n<p>    simple editorconfig</p>\n\n<p>    ensures spaces for indent</p>\n\n<p>commit 59646be0cf8fbc7e8ad64f395f451a11aca57fc6<br/>\nAuthor: Andy Pook <andy.pook@gmail.com><br/>\nDate:   2017-08-14T21:34:48Z</p>\n\n<p>    add EnumEnumerator helper</p>\n\n<p>commit 526ddaf8c837f82cd141324e922372155914701b<br/>\nAuthor: Andy Pook <andy.pook@gmail.com><br/>\nDate:   2017-08-14T21:35:32Z</p>\n\n<p>    add IEnumerable to TermsEnum/IBytesRefArray</p>\n\n<p>commit 456df8e8347ef67055b712722b50cc3b1bbf26cc<br/>\nAuthor: Andy Pook <andy.pook@gmail.com><br/>\nDate:   2017-08-14T21:36:54Z</p>\n\n<p>    add header, fix usings</p>\n\n<p>commit 1a1c25da7cbcd112d12d6c418c669786cdf4088c<br/>\nAuthor: Andy Pook <andy.pook@gmail.com><br/>\nDate:   2017-08-14T22:25:15Z</p>\n\n<p>    add example test</p>\n\n<hr />\n<i>by githubbot</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212396/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212404","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-624212404","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":624212404,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDIxMjQwNA==","user":{"login":"clambertus","id":8631661,"node_id":"MDQ6VXNlcjg2MzE2NjE=","avatar_url":"https://avatars.githubusercontent.com/u/8631661?v=4","gravatar_id":"","url":"https://api.github.com/users/clambertus","html_url":"https://github.com/clambertus","followers_url":"https://api.github.com/users/clambertus/followers","following_url":"https://api.github.com/users/clambertus/following{/other_user}","gists_url":"https://api.github.com/users/clambertus/gists{/gist_id}","starred_url":"https://api.github.com/users/clambertus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clambertus/subscriptions","organizations_url":"https://api.github.com/users/clambertus/orgs","repos_url":"https://api.github.com/users/clambertus/repos","events_url":"https://api.github.com/users/clambertus/events{/privacy}","received_events_url":"https://api.github.com/users/clambertus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-14T22:48:46Z","updated_at":"2020-05-05T17:57:25Z","author_association":"NONE","body":"<p>added PR <a href=\"https://github.com/apache/lucenenet/pull/212\" class=\"external-link\" rel=\"nofollow\">https://github.com/apache/lucenenet/pull/212</a> which I am sure will need a lot of work. The intent at this point is to just demonstrate the approach</p>\n<i>by andypook</i>","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/624212404/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/322508979","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-322508979","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":322508979,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMjUwODk3OQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-15T15:56:05Z","updated_at":"2017-08-15T15:56:05Z","author_association":"CONTRIBUTOR","body":"Hi Jens,\r\n\r\nI'd like to get this merged so I can start working on upgrading to the new `.csproj` format and adding support for the [now released .NET Standard 2.0](https://github.com/dotnet/announcements/issues/24), and a fresh beta release of Lucene.Net.\r\n\r\nWhat more needs to happen with this to get it ready?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/322508979/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/322864383","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-322864383","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":322864383,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMjg2NDM4Mw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-16T18:48:07Z","updated_at":"2017-08-16T18:48:07Z","author_association":"CONTRIBUTOR","body":"FYI - I have started cleaning up the documentation comments already so I can merge this. Just wanted you to know so we aren't duplicating efforts. Thanks again for the contribution.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/322864383/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/322930180","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-322930180","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":322930180,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMjkzMDE4MA==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-16T23:48:55Z","updated_at":"2017-08-16T23:48:55Z","author_association":"CONTRIBUTOR","body":"Hi really sorry for the delay on this one, trying to find some time this week but it hasn't worked out for me :(  I'll do my best to get back to this asap.\r\n\r\nI've also updated the original desc of this PR to include a checklist of things done and things to do which we should keep updated. \r\n\r\nI'll try to get to some of this tomorrow, (fingers crossed)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/322930180/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/322935323","html_url":"https://github.com/apache/lucenenet/pull/206#issuecomment-322935323","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/206","id":322935323,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMjkzNTMyMw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-17T00:25:32Z","updated_at":"2017-08-17T00:25:32Z","author_association":"CONTRIBUTOR","body":"Thanks Shannon. There are basically 5 tasks I'd like to get done before the next beta release:\r\n\r\n1. Finish up Replicator\r\n2. Upgrade to the new `.csproj` format/VS2017\r\n3. Support for .NET Standard 2.0 (yea, now we will have 3 frameworks to deal with)\r\n4. Package up the lucene-cli tool (most likely just zipped for now)\r\n5. API docs (at least some preliminary ones)\r\n\r\nCertainly, I would appreciate your assistance getting the API docs ready. \r\n\r\nDon't worry about that copy-paste error for now, that is low priority.\r\n\r\nWorst case, we could revert it back to something like the state where you first showed it (without all of the demo pages and broken links) so it is somewhat functional. We can always add those pages back in with working links before the following beta release.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/322935323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323287314","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-323287314","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":323287314,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMzI4NzMxNA==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-18T08:00:26Z","updated_at":"2017-08-18T08:00:26Z","author_association":"CONTRIBUTOR","body":"I had started to see if we could refactor the replicator service in a way that made it more flexible towards routing parameters etc... But I quickly realized that then there was not much reason to have the service anymore as it mostly just became a glorified dictionary over the shards... So I don't think that made much sense.\r\n\r\nSo it's there to allow some quick integrations small scale integrations, but on a bigger scale I don't really see it begin all that useful, but that is actually also a topic they touch in the blog post so I guess that's fair for now...\r\n\r\nI have been really busy this week so I have not had all that much time but I am working on making on transforming my crude little example into something a bit more meaningful as well as upgrading to AspNetCore 2.0 on the example >.<... \r\n\r\nThat would provide some \"example\" documentation here, but it would actually be a bit easier to share the demo project ones this PR is in and the release is out as I don't have to pull that in in a dirty way.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323287314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323294937","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-323294937","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":323294937,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMzI5NDkzNw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-18T08:35:46Z","updated_at":"2017-08-18T08:35:46Z","author_association":"CONTRIBUTOR","body":"Jens,\r\n\r\nI have upgraded the project [here](https://github.com/NightOwl888/lucenenet/tree/replicator) to work on .NET Standard 1.5, cleaned up the doc comments, and fixed the member accessibility.\r\n\r\nCurrently, I am working on making a ReplicationHttpListener service that wraps TcpListener and IReplicationService (containing only the Perform method). I have a working prototype (HTTP 1.0), but am still cleaning up the rough edges. It is very basic, but allows you to pass in your own TcpListener so if someone were inclined to use HTTPS, authentication, client certificates, etc. it is possible to do. It is pretty clear we still need integration with AspNetCore and other thin clients since this will be incompatible with those, but this listener should handle the general case where someone wants to build a thick client to act as a replication server, and will work even on .NET Standard 1.5.\r\n\r\nMy hope is to use the ReplicationHttpListener for the main tests. We should migrate the AspNetCore specific tests to a new test project Lucene.Net.Tests.AspNetCore and build that out with the fluent API similar to what I showed before (although, it may make sense to move the reusable bits to the Support directory in Lucene.Net.Replicator). This will decouple the projects so at least your suggestion of moving Lucene.Net.AspNetCore to a separate repository is possible.\r\n\r\nAnyway, if you want to refactor ReplicationService into separate concerns that would be okay as long as we keep the Perform method signature as it is.\r\n\r\nAs for upgrading to AspNetCore 2.0, it would probably be better to multi-target (1.0 and 2.0), since we will be adding support to run .NET Core 2.0 to the project soon (running tests on .NET Framework 4.5.1, .NET Core 1.0, and .NET Core 2.0).\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323294937/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323301150","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-323301150","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":323301150,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMzMwMTE1MA==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-18T09:05:55Z","updated_at":"2017-08-18T09:16:16Z","author_association":"CONTRIBUTOR","body":"Seems you misunderstood me a little bit :)...\r\n\r\nIf your fixing documentation comments and adding virtual modifiers, then I don't think I have anything else to add to the code, then it's all documentation from here on. (Unless you have any specific comments to any areas of the code etc.)\r\n\r\n> As for upgrading to AspNetCore 2.0, it would probably be better to multi-target (1.0 and 2.0), since we will be adding support to run .NET Core 2.0 to the project soon (running tests on .NET Framework 4.5.1, .NET Core 1.0, and .NET Core 2.0).\r\n\r\nIt was only for the Sample. I won't dive that deep for a sample TBH... It's just meant to demonstrate how one could integrate it, nothing more... (Code wise)... And then use that as input to the missing documentation (similar to the blog post)...","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323301150/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323312883","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-323312883","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":323312883,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMzMxMjg4Mw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-18T09:58:12Z","updated_at":"2017-08-18T10:11:45Z","author_association":"CONTRIBUTOR","body":"> If your fixing documentation comments and adding virtual modifiers, then I don't think I have anything else to add to the code, then it's all documentation from here on.\r\n\r\nWell, there are...\r\n\r\n- Rethink HttpClientBase and HttpReplicator\r\n- Rethink ReplicatorService, abstractions and AspNetCore implementation.\r\n\r\nBut I think those should probably wait until we have integrations with MVC, WebApi, and web forms so we can ensure the pieces all fit together right. I still think you did an excellent job of finding the lowest common denominator between any type of HTTP listener, and I doubt we will need to refactor the request/response interfaces or the Perform method signature, but there may still be some work to do with these three classes.\r\n\r\n> > As for upgrading to AspNetCore 2.0, it would probably be better to multi-target (1.0 and 2.0), since we will be adding support to run .NET Core 2.0 to the project soon (running tests on .NET Framework 4.5.1, .NET Core 1.0, and .NET Core 2.0).\r\n\r\n> It was only for the Sample. I won't dive that deep for a sample TBH... It's just meant to demonstrate how one could integrate it, nothing more... (Code wise)... And then use that as input to the missing documentation (similar to the blog post)...\r\n\r\nAhh, okay. \r\n\r\n> That would provide some \"example\" documentation here, but it would actually be a bit easier to share the demo project ones this PR is in and the release is out as I don't have to pull that in in a dirty way.\r\n\r\nNot sure exactly what you mean by this. But, you might consider doing a [local build](https://github.com/NightOwl888/lucenenet/tree/replicator#building-and-testing) `build -pv:4.8.0-beta00005`, and then you can [reference the NuGet package locally](https://github.com/apache/lucenenet/pull/191#issuecomment-275886200) so you can work with it as if it were a release.\r\n\r\nOr, if you mean you need to link to something in the repo, let me know and I will see about finalizing the locations of everything and merging to master to facilitate your documentation work.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323312883/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323318235","html_url":"https://github.com/apache/lucenenet/pull/209#issuecomment-323318235","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/209","id":323318235,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMzMxODIzNQ==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-08-18T10:24:18Z","updated_at":"2017-08-18T10:26:29Z","author_association":"CONTRIBUTOR","body":"> Not sure exactly what you mean by this. But, you might consider doing a local build build -pv:4.8.0-beta00005, and then you can reference the NuGet package locally so you can work with it as if it were a release.\r\n\r\nY, that is what I am doing now but it means that if I am to share the project (e.g. on github) then I have to check those in or leave instructions for the \"ugly workaround\"...\r\n\r\nFor locally doing work towards it it's fine though, so it's not before I am to share it publicly that the issue really arises.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/323318235/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]