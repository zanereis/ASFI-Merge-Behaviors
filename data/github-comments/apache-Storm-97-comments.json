[{"url":"https://api.github.com/repos/apache/storm/issues/comments/126573508","html_url":"https://github.com/apache/storm/pull/658#issuecomment-126573508","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":126573508,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNjU3MzUwOA==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T05:50:39Z","updated_at":"2015-07-31T05:50:39Z","author_association":"CONTRIBUTOR","body":"Perhaps for the purposes of the config \"topology.stats.sample.rate\" and future number based configs we should have a PositiveNumberValidator.  There is already a PositiveIntegerValidator but it only deals with positive integers.  It seems to me that \"topology.stats.sample.rate\" can be set to some positive float/double or integer. So I think we should include the PositiveNumberValidator.  I have added a commit that includes the code for the PositiveNumberValidator.  What do you think?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/126573508/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583708","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583708","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583708,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3MDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T05:50:40Z","updated_at":"2025-01-24T13:53:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-126573508\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-126573508</a></p>\n\n<p>    Perhaps for the purposes of the config \"topology.stats.sample.rate\" and future number based configs we should have a PositiveNumberValidator.  There is already a PositiveIntegerValidator but it only deals with positive integers.  It seems to me that \"topology.stats.sample.rate\" can be set to some positive float/double or integer. So I think we should include the PositiveNumberValidator.  I have added a commit that includes the code for the PositiveNumberValidator.  What do you think?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583708/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/126706239","html_url":"https://github.com/apache/storm/pull/644#issuecomment-126706239","issue_url":"https://api.github.com/repos/apache/storm/issues/644","id":126706239,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNjcwNjIzOQ==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T14:16:27Z","updated_at":"2015-07-31T14:16:27Z","author_association":"CONTRIBUTOR","body":"I am +1 on the last approach. @arunmahadevan  please add to the README under storm-hdfs.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/126706239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612560622","html_url":"https://github.com/apache/storm/issues/4677#issuecomment-2612560622","issue_url":"https://api.github.com/repos/apache/storm/issues/4677","id":2612560622,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjA2MjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T14:16:28Z","updated_at":"2025-01-24T13:42:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/644#issuecomment-126706239\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/644#issuecomment-126706239</a></p>\n\n<p>    I am +1 on the last approach. @arunmahadevan  please add to the README under storm-hdfs.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612560622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612582831","html_url":"https://github.com/apache/storm/issues/4798#issuecomment-2612582831","issue_url":"https://api.github.com/repos/apache/storm/issues/4798","id":2612582831,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODI4MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T14:28:58Z","updated_at":"2025-01-24T13:52:57Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/653\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/653</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612582831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/126708790","html_url":"https://github.com/apache/storm/pull/653#issuecomment-126708790","issue_url":"https://api.github.com/repos/apache/storm/issues/653","id":126708790,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNjcwODc5MA==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T14:29:12Z","updated_at":"2015-07-31T14:29:12Z","author_association":"CONTRIBUTOR","body":"@dossett Thanks for the patch. Pushed to master.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/126708790/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612582835","html_url":"https://github.com/apache/storm/issues/4798#issuecomment-2612582835","issue_url":"https://api.github.com/repos/apache/storm/issues/4798","id":2612582835,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODI4MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T14:29:13Z","updated_at":"2025-01-24T13:52:57Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/653#issuecomment-126708790\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/653#issuecomment-126708790</a></p>\n\n<p>    @dossett Thanks for the patch. Pushed to master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612582835/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/126726770","html_url":"https://github.com/apache/storm/pull/656#issuecomment-126726770","issue_url":"https://api.github.com/repos/apache/storm/issues/656","id":126726770,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNjcyNjc3MA==","user":{"login":"dossett","id":7207582,"node_id":"MDQ6VXNlcjcyMDc1ODI=","avatar_url":"https://avatars.githubusercontent.com/u/7207582?v=4","gravatar_id":"","url":"https://api.github.com/users/dossett","html_url":"https://github.com/dossett","followers_url":"https://api.github.com/users/dossett/followers","following_url":"https://api.github.com/users/dossett/following{/other_user}","gists_url":"https://api.github.com/users/dossett/gists{/gist_id}","starred_url":"https://api.github.com/users/dossett/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dossett/subscriptions","organizations_url":"https://api.github.com/users/dossett/orgs","repos_url":"https://api.github.com/users/dossett/repos","events_url":"https://api.github.com/users/dossett/events{/privacy}","received_events_url":"https://api.github.com/users/dossett/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T15:36:49Z","updated_at":"2015-07-31T15:36:49Z","author_association":"CONTRIBUTOR","body":"Rebased to master and added documentation updates.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/126726770/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612579085","html_url":"https://github.com/apache/storm/issues/4776#issuecomment-2612579085","issue_url":"https://api.github.com/repos/apache/storm/issues/4776","id":2612579085,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzkwODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T15:36:49Z","updated_at":"2025-01-24T13:51:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dossett commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/656#issuecomment-126726770\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/656#issuecomment-126726770</a></p>\n\n<p>    Rebased to master and added documentation updates.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612579085/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612582839","html_url":"https://github.com/apache/storm/issues/4798#issuecomment-2612582839","issue_url":"https://api.github.com/repos/apache/storm/issues/4798","id":2612582839,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODI4Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T15:44:47Z","updated_at":"2025-01-24T13:52:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dossett@gmail.com\">dossett@gmail.com</a>:</i>\n<p>Thank you!  One other observation: this change makes something like <a href=\"https://issues.apache.org/jira/browse/STORM-938\" title=\"storm-hive add a time interval to flush tuples to hive\" class=\"issue-link\" data-issue-key=\"STORM-938\"><del>STORM-938</del></a> very important.  Since tuples aren't ack'd until flushed then tuples will get timed out unless the batch is regularly filled up within the timeout window.  Adding a periodic flush that's less than the timeout setting will really improve performance.</p>\n\n<p>It was implementing this change internally that led to us to find a solution for <a href=\"https://issues.apache.org/jira/browse/STORM-938\" title=\"storm-hive add a time interval to flush tuples to hive\" class=\"issue-link\" data-issue-key=\"STORM-938\"><del>STORM-938</del></a>.  I've made our fix available as PR to 938.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612582839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583935","html_url":"https://github.com/apache/storm/issues/4806#issuecomment-2612583935","issue_url":"https://api.github.com/repos/apache/storm/issues/4806","id":2612583935,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM5MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T16:21:50Z","updated_at":"2025-01-24T13:53:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user snikhil5 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/661\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/661</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-968\" title=\"Display the stream id in the Trident UI for the Spouts\" class=\"issue-link\" data-issue-key=\"STORM-968\"><del>STORM-968</del></a> Adding support to generate the id based on names in Trident</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/snikhil5/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/snikhil5/incubator-storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-968\" title=\"Display the stream id in the Trident UI for the Spouts\" class=\"issue-link\" data-issue-key=\"STORM-968\"><del>STORM-968</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/661.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/661.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #661</p>\n\n<hr />\n<p>commit 4555c56f9a05476f0e96fb97aa1da9adbc90037a<br/>\nAuthor: nsingh1 <nsingh1@yahoo-inc.com><br/>\nDate:   2015-07-31T16:05:12Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-968\" title=\"Display the stream id in the Trident UI for the Spouts\" class=\"issue-link\" data-issue-key=\"STORM-968\"><del>STORM-968</del></a> Adding support to generate the id based on names in Trident</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583935/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612574411","html_url":"https://github.com/apache/storm/issues/4742#issuecomment-2612574411","issue_url":"https://api.github.com/repos/apache/storm/issues/4742","id":2612574411,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzQ0MTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T18:24:35Z","updated_at":"2025-01-24T13:49:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user priyank5485 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/662\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/662</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-904\" title=\"move storm bin commands to java and provide appropriate bindings for windows and linux\" class=\"issue-link\" data-issue-key=\"STORM-904\"><del>STORM-904</del></a>: Move bin/storm command line to java.</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/priyank5485/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/priyank5485/storm</a> storm-904</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/662.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/662.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #662</p>\n\n<hr />\n<p>commit 193f59e027a8ab95d72c8e386d66f0b90f9b86f9<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-17T23:45:13Z</p>\n\n<p>    Remove python and add a java class to support storm cli.</p>\n\n<p>    Add a java class that encapsulates storm cli functionality currently<br/>\n    coded in two different places. storm, storm.py for bash and storm.cmd<br/>\n    for windows. Now both storm and storm.cmd will call the java class<br/>\n    eliminating python code and putting all the code in one place for bash<br/>\n    and windows respectively.</p>\n\n<p>commit 793781cfd55c56f7184910fd744341351f6cc4bf<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-20T23:04:48Z</p>\n\n<p>    Add apace commons cli library for command line parsing</p>\n\n<p>commit a425fc50ab9b518337d0c095ae80e9d78221e3fd<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-21T17:44:30Z</p>\n\n<p>    Adding version for dependency in pom file.</p>\n\n<p>commit 5a4ec36ac17af69297dfc73aaa682b8e43edf5de<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-21T21:23:54Z</p>\n\n<p>    Sample code to test for apache commons cli.</p>\n\n<p>commit 1a8240a558516110a5c14d3a4bb0b177ab76090b<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-22T23:40:40Z</p>\n\n<p>    Removing apache commons cli, renaming and some intiialization code.</p>\n\n<p>commit b69e295e81216e992187737cc069ff66d2e74687<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-23T10:14:48Z</p>\n\n<p>    Some redesigning/refactoring.</p>\n\n<p>commit 8c2fbeadbf699b5b286479649d133623c92bc85c<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-23T21:49:43Z</p>\n\n<p>    Add printUsage mainly.</p>\n\n<p>commit 74f45c7c9d6ae813635c91ba14fdb1cd3dd24c74<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-24T18:49:15Z</p>\n\n<p>    Call storm command methods using reflection.</p>\n\n<p>commit 10ba25f8c81e2fdc34f4ae3e0e2cdf9ecd142a4a<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-24T19:25:01Z</p>\n\n<p>    Add method boxes without code for other storm commands.</p>\n\n<p>commit fb2022db8dda7a5183ee5a2cc64a7ef035006c80<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-27T17:59:20Z</p>\n\n<p>    Initial executeStorm method creating a new process.</p>\n\n<p>    Need to test storm daemons if they can be killed using shutdown hooks.</p>\n\n<p>commit 493b0dfeb7be2daa0a54e7dec2f3f716d0af0e26<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-29T07:02:49Z</p>\n\n<p>    Ship some more code over from python.</p>\n\n<p>commit 3082d4f5ea2d66babe232e5ff49506b322385473<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-29T18:49:57Z</p>\n\n<p>    Fix an exception which failed to start the nimbus command.</p>\n\n<p>commit c616068d90dd47fa61fbb670c2853805d7ccb324<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-29T21:53:27Z</p>\n\n<p>    Use exec to replace current process rather than creating a new one.</p>\n\n<p>commit 06f4dcc17d8dcf3c81094557ed97ff117d6410ed<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-30T08:37:08Z</p>\n\n<p>    Add some commented code.</p>\n\n<p>commit da0ad60438841a1f874c115cef27190a59401f4f<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-30T15:45:52Z</p>\n\n<p>    Add nil check for strings returned from conclave</p>\n\n<p>commit 0b242adf0bc261e9140c3587b3eedd2141e31718<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-30T19:04:35Z</p>\n\n<p>    Fix an issue with passing options to storm command,</p>\n\n<p>commit 0bb15782c171d336be905d2f5143865e288a8239<br/>\nAuthor: Priyank <pshah@hortonworks.com><br/>\nDate:   2015-07-31T00:37:07Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-904\" title=\"move storm bin commands to java and provide appropriate bindings for windows and linux\" class=\"issue-link\" data-issue-key=\"STORM-904\"><del>STORM-904</del></a>: Add shutdown hook thread to kill subprocess.</p>\n\n<p>    Does not work for kill -9. Need to debug.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612574411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/126779134","html_url":"https://github.com/apache/storm/pull/662#issuecomment-126779134","issue_url":"https://api.github.com/repos/apache/storm/issues/662","id":126779134,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNjc3OTEzNA==","user":{"login":"priyank5485","id":5192436,"node_id":"MDQ6VXNlcjUxOTI0MzY=","avatar_url":"https://avatars.githubusercontent.com/u/5192436?v=4","gravatar_id":"","url":"https://api.github.com/users/priyank5485","html_url":"https://github.com/priyank5485","followers_url":"https://api.github.com/users/priyank5485/followers","following_url":"https://api.github.com/users/priyank5485/following{/other_user}","gists_url":"https://api.github.com/users/priyank5485/gists{/gist_id}","starred_url":"https://api.github.com/users/priyank5485/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/priyank5485/subscriptions","organizations_url":"https://api.github.com/users/priyank5485/orgs","repos_url":"https://api.github.com/users/priyank5485/repos","events_url":"https://api.github.com/users/priyank5485/events{/privacy}","received_events_url":"https://api.github.com/users/priyank5485/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T18:37:14Z","updated_at":"2015-07-31T18:37:14Z","author_association":"CONTRIBUTOR","body":"This PR aims at factoring out the logic for storm command line client which currently resides in two places. One in storm bash script and storm.py for Unix and storm.cmd for Windows. Idea is to create a java program that will be called from storm.cmd and storm bash script which will have all the logic from storm.py and storm.cmd in one place. This will help us maintain the storm client better since we will have only one file to change and in most cases only the base class that both Windows and Unix classes inherit from. I have already removed storm.py. I am working on finishing up the java file and also removing the storm.cmd file. Just putting it out there to elicit response to this approach from the community.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/126779134/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612574414","html_url":"https://github.com/apache/storm/issues/4742#issuecomment-2612574414","issue_url":"https://api.github.com/repos/apache/storm/issues/4742","id":2612574414,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzQ0MTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T18:37:14Z","updated_at":"2025-01-24T13:49:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user priyank5485 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/662#issuecomment-126779134\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/662#issuecomment-126779134</a></p>\n\n<p>    This PR aims at factoring out the logic for storm command line client which currently resides in two places. One in storm bash script and storm.py for Unix and storm.cmd for Windows. Idea is to create a java program that will be called from storm.cmd and storm bash script which will have all the logic from storm.py and storm.cmd in one place. This will help us maintain the storm client better since we will have only one file to change and in most cases only the base class that both Windows and Unix classes inherit from. I have already removed storm.py. I am working on finishing up the java file and also removing the storm.cmd file. Just putting it out there to elicit response to this approach from the community.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612574414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/126791327","html_url":"https://github.com/apache/storm/pull/661#issuecomment-126791327","issue_url":"https://api.github.com/repos/apache/storm/issues/661","id":126791327,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNjc5MTMyNw==","user":{"login":"snikhil5","id":7913986,"node_id":"MDQ6VXNlcjc5MTM5ODY=","avatar_url":"https://avatars.githubusercontent.com/u/7913986?v=4","gravatar_id":"","url":"https://api.github.com/users/snikhil5","html_url":"https://github.com/snikhil5","followers_url":"https://api.github.com/users/snikhil5/followers","following_url":"https://api.github.com/users/snikhil5/following{/other_user}","gists_url":"https://api.github.com/users/snikhil5/gists{/gist_id}","starred_url":"https://api.github.com/users/snikhil5/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snikhil5/subscriptions","organizations_url":"https://api.github.com/users/snikhil5/orgs","repos_url":"https://api.github.com/users/snikhil5/repos","events_url":"https://api.github.com/users/snikhil5/events{/privacy}","received_events_url":"https://api.github.com/users/snikhil5/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T19:31:48Z","updated_at":"2015-07-31T19:31:48Z","author_association":"CONTRIBUTOR","body":"Earlier it was just spout0..spout1 etc..\n<img width=\"195\" alt=\"screen shot 2015-07-31 at 2 31 12 pm\" src=\"https://cloud.githubusercontent.com/assets/7913986/9015768/d6a88f4c-3790-11e5-8939-6058c1c4bf9d.png\">\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/126791327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583939","html_url":"https://github.com/apache/storm/issues/4806#issuecomment-2612583939","issue_url":"https://api.github.com/repos/apache/storm/issues/4806","id":2612583939,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM5Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T19:31:49Z","updated_at":"2025-01-24T13:53:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user snikhil5 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/661#issuecomment-126791327\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/661#issuecomment-126791327</a></p>\n\n<p>    Earlier it was just spout0..spout1 etc..<br/>\n    <img width=\"195\" alt=\"screen shot 2015-07-31 at 2 31 12 pm\" src=\"https://cloud.githubusercontent.com/assets/7913986/9015768/d6a88f4c-3790-11e5-8939-6058c1c4bf9d.png\"></p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612580904","html_url":"https://github.com/apache/storm/issues/4788#issuecomment-2612580904","issue_url":"https://api.github.com/repos/apache/storm/issues/4788","id":2612580904,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODA5MDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T19:47:01Z","updated_at":"2025-01-24T13:52:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user harshach opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/663\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/663</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-950\" title=\"Apache Storm website redesign\" class=\"issue-link\" data-issue-key=\"STORM-950\"><del>STORM-950</del></a>. Apache Storm website redesign.</p>\n\n<p>    To run<br/>\n    1. Install Jekyll<br/>\n    2.  jekyll serve -w will start a webserver at localhost:4000</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/harshach/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/harshach/incubator-storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-650\" title=\"Storm-Kafka Refactoring and Improvements\" class=\"issue-link\" data-issue-key=\"STORM-650\"><del>STORM-650</del></a>-V5</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/663.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/663.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #663</p>\n\n<hr />\n<p>commit 0e88bda33c112b65c493fd9cdf16d3a9a2c2aab8<br/>\nAuthor: Sriharsha Chintalapani <harsha@hortonworks.com><br/>\nDate:   2015-07-31T19:43:49Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-950\" title=\"Apache Storm website redesign\" class=\"issue-link\" data-issue-key=\"STORM-950\"><del>STORM-950</del></a>. Apache Storm website redesign.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612580904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/126795885","html_url":"https://github.com/apache/storm/pull/663#issuecomment-126795885","issue_url":"https://api.github.com/repos/apache/storm/issues/663","id":126795885,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNjc5NTg4NQ==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T19:49:14Z","updated_at":"2015-07-31T19:49:14Z","author_association":"CONTRIBUTOR","body":"@HeartSaVioR @ptgoetz please take a look.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/126795885/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612580911","html_url":"https://github.com/apache/storm/issues/4788#issuecomment-2612580911","issue_url":"https://api.github.com/repos/apache/storm/issues/4788","id":2612580911,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODA5MTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T19:49:15Z","updated_at":"2025-01-24T13:52:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/663#issuecomment-126795885\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/663#issuecomment-126795885</a></p>\n\n<p>    @HeartSaVioR @ptgoetz please take a look.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612580911/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612517314","html_url":"https://github.com/apache/storm/issues/4446#issuecomment-2612517314","issue_url":"https://api.github.com/repos/apache/storm/issues/4446","id":2612517314,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MTczMTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-07-31T20:29:48Z","updated_at":"2025-01-24T13:20:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rmangi\">rmangi</a>:</i>\n<p>I can reproduce this with storm running off the git head as well. I just built and deployed it. Not bundling the storm jar in my uberjar. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612517314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/126848034","html_url":"https://github.com/apache/storm/pull/663#issuecomment-126848034","issue_url":"https://api.github.com/repos/apache/storm/issues/663","id":126848034,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNjg0ODAzNA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-01T01:34:29Z","updated_at":"2015-08-01T01:34:29Z","author_association":"CONTRIBUTOR","body":"@harshach \nMany resources and document links are broken. Maybe you forgot to add files to commit?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/126848034/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612580920","html_url":"https://github.com/apache/storm/issues/4788#issuecomment-2612580920","issue_url":"https://api.github.com/repos/apache/storm/issues/4788","id":2612580920,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODA5MjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-01T01:34:31Z","updated_at":"2025-01-24T13:52:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/663#issuecomment-126848034\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/663#issuecomment-126848034</a></p>\n\n<p>    @harshach <br/>\n    Many resources and document links are broken. Maybe you forgot to add files to commit?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612580920/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612584049","html_url":"https://github.com/apache/storm/issues/4807#issuecomment-2612584049","issue_url":"https://api.github.com/repos/apache/storm/issues/4807","id":2612584049,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODQwNDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-02T20:23:05Z","updated_at":"2025-01-24T13:53:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dossett@gmail.com\">dossett@gmail.com</a>:</i>\n<p>I should have a PR for this shortly.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612584049/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127075818","html_url":"https://github.com/apache/storm/pull/660#issuecomment-127075818","issue_url":"https://api.github.com/repos/apache/storm/issues/660","id":127075818,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzA3NTgxOA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-02T22:02:32Z","updated_at":"2015-08-02T22:02:32Z","author_association":"CONTRIBUTOR","body":"We can add null check from KafkaSpout.commit() to save tiny memory (by lazy allocation), but it is really tiny so I think current approach is acceptable.\n+1.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127075818/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612578345","html_url":"https://github.com/apache/storm/issues/4771#issuecomment-2612578345","issue_url":"https://api.github.com/repos/apache/storm/issues/4771","id":2612578345,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzgzNDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-02T22:02:33Z","updated_at":"2025-01-24T13:50:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/660#issuecomment-127075818\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/660#issuecomment-127075818</a></p>\n\n<p>    We can add null check from KafkaSpout.commit() to save tiny memory (by lazy allocation), but it is really tiny so I think current approach is acceptable.<br/>\n    +1.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612578345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612584054","html_url":"https://github.com/apache/storm/issues/4807#issuecomment-2612584054","issue_url":"https://api.github.com/repos/apache/storm/issues/4807","id":2612584054,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODQwNTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-02T22:28:05Z","updated_at":"2025-01-24T13:53:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user dossett opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/664\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/664</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-969\" title=\"HDFS Bolt can end up in an unrecoverable state\" class=\"issue-link\" data-issue-key=\"STORM-969\"><del>STORM-969</del></a>: HDFS Bolt can end up in an unrecoverable state</p>\n\n<p>    A few notes about this PR:</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>I updated the storm-hdfs pom.xml to align with other external modules.  Most significant change was probably going from hdfs version 2.2 to ${hadoop.version} (i.e. currently 2.6)</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>Many errors are recovered by forcing a file rotation which opens a new, valid File.  So the rotation now occurs either according to rotation policy or when a serious error happens.  Work could probably be done to reopen the same file name to reduce the number of rotations.</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>Added unittests with MiniDFSCluster</li>\n</ul>\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/dossett/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/dossett/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-969\" title=\"HDFS Bolt can end up in an unrecoverable state\" class=\"issue-link\" data-issue-key=\"STORM-969\"><del>STORM-969</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/664.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/664.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #664</p>\n\n<hr />\n<p>commit 795aaf93af78bf664727b91c179e0d96f673f674<br/>\nAuthor: Aaron Dossett <aaron.dossett@target.com><br/>\nDate:   2015-08-02T22:22:51Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-969\" title=\"HDFS Bolt can end up in an unrecoverable state\" class=\"issue-link\" data-issue-key=\"STORM-969\"><del>STORM-969</del></a>: HDFS Bolt can end up in an unrecoverable state</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612584054/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612578351","html_url":"https://github.com/apache/storm/issues/4771#issuecomment-2612578351","issue_url":"https://api.github.com/repos/apache/storm/issues/4771","id":2612578351,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzgzNTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-02T23:02:31Z","updated_at":"2025-01-24T13:50:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=caofangkun\" class=\"user-hover\" rel=\"caofangkun\">caofangkun</a>,<br/>\nI merged this into master, 0.10.x-branch, 0.9.x-branch respectively.</p>\n\n<p>Seems like Github mirror has issue again. When it becomes stable, your PR could be automatically marked as merged.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612578351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127082994","html_url":"https://github.com/apache/storm/pull/660#issuecomment-127082994","issue_url":"https://api.github.com/repos/apache/storm/issues/660","id":127082994,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzA4Mjk5NA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-02T23:15:46Z","updated_at":"2015-08-02T23:15:46Z","author_association":"CONTRIBUTOR","body":"I merged this into master, 0.10.x-branch, 0.9.x-branch respectively.\nSeems like Github mirror has issue again. When it becomes stable, your PR could be automatically marked as merged.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127082994/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612578357","html_url":"https://github.com/apache/storm/issues/4771#issuecomment-2612578357","issue_url":"https://api.github.com/repos/apache/storm/issues/4771","id":2612578357,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzgzNTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-02T23:15:47Z","updated_at":"2025-01-24T13:50:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/660#issuecomment-127082994\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/660#issuecomment-127082994</a></p>\n\n<p>    I merged this into master, 0.10.x-branch, 0.9.x-branch respectively.<br/>\n    Seems like Github mirror has issue again. When it becomes stable, your PR could be automatically marked as merged.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612578357/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127095071","html_url":"https://github.com/apache/storm/pull/615#issuecomment-127095071","issue_url":"https://api.github.com/repos/apache/storm/issues/615","id":127095071,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzA5NTA3MQ==","user":{"login":"caofangkun","id":1931407,"node_id":"MDQ6VXNlcjE5MzE0MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1931407?v=4","gravatar_id":"","url":"https://api.github.com/users/caofangkun","html_url":"https://github.com/caofangkun","followers_url":"https://api.github.com/users/caofangkun/followers","following_url":"https://api.github.com/users/caofangkun/following{/other_user}","gists_url":"https://api.github.com/users/caofangkun/gists{/gist_id}","starred_url":"https://api.github.com/users/caofangkun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/caofangkun/subscriptions","organizations_url":"https://api.github.com/users/caofangkun/orgs","repos_url":"https://api.github.com/users/caofangkun/repos","events_url":"https://api.github.com/users/caofangkun/events{/privacy}","received_events_url":"https://api.github.com/users/caofangkun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T01:30:28Z","updated_at":"2015-08-03T01:30:28Z","author_association":"CONTRIBUTOR","body":"@revans2 \nPlease don't forget  check this PR in  :）\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127095071/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612575681","html_url":"https://github.com/apache/storm/issues/4751#issuecomment-2612575681","issue_url":"https://api.github.com/repos/apache/storm/issues/4751","id":2612575681,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzU2ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T01:30:31Z","updated_at":"2025-01-24T13:49:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user caofangkun commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/615#issuecomment-127095071\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/615#issuecomment-127095071</a></p>\n\n<p>    @revans2 <br/>\n    Please don't forget  check this PR in  :）</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612575681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612536910","html_url":"https://github.com/apache/storm/issues/4592#issuecomment-2612536910","issue_url":"https://api.github.com/repos/apache/storm/issues/4592","id":2612536910,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MzY5MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T02:46:58Z","updated_at":"2025-01-24T13:30:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=caofangkun\">caofangkun</a>:</i>\n<p>Fixed in <a href=\"https://github.com/apache/storm/commit/e2e17e1c7899fb918562bbad21a7e68394b5f285#diff-600376dffeb79835ede4a0b285078036\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/commit/e2e17e1c7899fb918562bbad21a7e68394b5f285#diff-600376dffeb79835ede4a0b285078036</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612536910/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127146640","html_url":"https://github.com/apache/storm/pull/644#issuecomment-127146640","issue_url":"https://api.github.com/repos/apache/storm/issues/644","id":127146640,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzE0NjY0MA==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T07:22:34Z","updated_at":"2015-08-03T07:22:34Z","author_association":"CONTRIBUTOR","body":"Hi @harshach, added a note to storm hdfs README.md and modified code to disable exactly once based on file size as well.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127146640/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612560631","html_url":"https://github.com/apache/storm/issues/4677#issuecomment-2612560631","issue_url":"https://api.github.com/repos/apache/storm/issues/4677","id":2612560631,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjA2MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T07:22:35Z","updated_at":"2025-01-24T13:42:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/644#issuecomment-127146640\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/644#issuecomment-127146640</a></p>\n\n<p>    Hi @harshach, added a note to storm hdfs README.md and modified code to disable exactly once based on file size as well.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612560631/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583142","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583142","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583142,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxNDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T13:10:57Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=alexsobrino\">alexsobrino</a>:</i>\n<p>Hi <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a>,</p>\n\n<p>We're not able to reproduce it when we want. It just happens every now and then, but it's quite frequent, so we're able to provide some test results.</p>\n\n<p>Executing <tt>kill -SIGABRT <PID></tt> in one of the Python processes writes this into the worker's log:</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">2015-08-03T14:41:30.315+0200 b.s.t.ShellBolt [ERROR] Halting process: ShellBolt died.\njava.lang.RuntimeException: subprocess heartbeat timeout\n\tat backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run(ShellBolt.java:305) [storm-core-0.9.5.jar:0.9.5]\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_45]\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_45]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_45]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_45]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]\n\tat java.lang.<span class=\"code-object\">Thread</span>.run(<span class=\"code-object\">Thread</span>.java:745) [na:1.8.0_45]\n2015-08-03T14:41:30.315+0200 b.s.d.executor [ERROR] \njava.lang.RuntimeException: subprocess heartbeat timeout\n\tat backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run(ShellBolt.java:305) [storm-core-0.9.5.jar:0.9.5]\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_45]\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_45]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_45]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_45]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]\n\tat java.lang.<span class=\"code-object\">Thread</span>.run(<span class=\"code-object\">Thread</span>.java:745) [na:1.8.0_45]\n2015-08-03T14:41:30.317+0200 b.s.t.ShellBolt [ERROR] Halting process: ShellBolt died.\njava.lang.RuntimeException: backtype.storm.multilang.NoOutputException: Pipe to subprocess seems to be broken! No output read.\nSerializer Exception:\n\n\n\tat backtype.storm.utils.ShellProcess.readShellMsg(ShellProcess.java:101) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.task.ShellBolt$BoltReaderRunnable.run(ShellBolt.java:318) ~[storm-core-0.9.5.jar:0.9.5]\n\tat java.lang.<span class=\"code-object\">Thread</span>.run(<span class=\"code-object\">Thread</span>.java:745) [na:1.8.0_45]\n2015-08-03T14:41:30.318+0200 b.s.d.executor [ERROR] \njava.lang.RuntimeException: backtype.storm.multilang.NoOutputException: Pipe to subprocess seems to be broken! No output read.\nSerializer Exception:\n\n\n\tat backtype.storm.utils.ShellProcess.readShellMsg(ShellProcess.java:101) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.task.ShellBolt$BoltReaderRunnable.run(ShellBolt.java:318) ~[storm-core-0.9.5.jar:0.9.5]\n\tat java.lang.<span class=\"code-object\">Thread</span>.run(<span class=\"code-object\">Thread</span>.java:745) [na:1.8.0_45]\n2015-08-03T14:41:30.320+0200 b.s.t.ShellBolt [ERROR] Halting process: ShellBolt died.\njava.io.IOException: Broken pipe\n\tat java.io.FileOutputStream.writeBytes(Native Method) ~[na:1.8.0_45]\n\tat java.io.FileOutputStream.write(FileOutputStream.java:326) ~[na:1.8.0_45]\n\tat java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_45]\n\tat java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140) ~[na:1.8.0_45]\n\tat java.io.DataOutputStream.flush(DataOutputStream.java:123) ~[na:1.8.0_45]\n\tat backtype.storm.multilang.JsonSerializer.writeString(JsonSerializer.java:96) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.multilang.JsonSerializer.writeMessage(JsonSerializer.java:89) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.multilang.JsonSerializer.writeBoltMsg(JsonSerializer.java:74) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.utils.ShellProcess.writeBoltMsg(ShellProcess.java:106) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.task.ShellBolt$BoltWriterRunnable.run(ShellBolt.java:355) ~[storm-core-0.9.5.jar:0.9.5]\n\tat java.lang.<span class=\"code-object\">Thread</span>.run(<span class=\"code-object\">Thread</span>.java:745) [na:1.8.0_45]\n2015-08-03T14:41:30.320+0200 b.s.d.executor [ERROR] \njava.io.IOException: Broken pipe\n\tat java.io.FileOutputStream.writeBytes(Native Method) ~[na:1.8.0_45]\n\tat java.io.FileOutputStream.write(FileOutputStream.java:326) ~[na:1.8.0_45]\n\tat java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_45]\n\tat java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140) ~[na:1.8.0_45]\n\tat java.io.DataOutputStream.flush(DataOutputStream.java:123) ~[na:1.8.0_45]\n\tat backtype.storm.multilang.JsonSerializer.writeString(JsonSerializer.java:96) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.multilang.JsonSerializer.writeMessage(JsonSerializer.java:89) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.multilang.JsonSerializer.writeBoltMsg(JsonSerializer.java:74) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.utils.ShellProcess.writeBoltMsg(ShellProcess.java:106) ~[storm-core-0.9.5.jar:0.9.5]\n\tat backtype.storm.task.ShellBolt$BoltWriterRunnable.run(ShellBolt.java:355) ~[storm-core-0.9.5.jar:0.9.5]\n\tat java.lang.<span class=\"code-object\">Thread</span>.run(<span class=\"code-object\">Thread</span>.java:745) [na:1.8.0_45]\n2015-08-03T14:41:30.357+0200 b.s.d.worker [INFO] Shutting down worker my-topology-47-1438604011 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba 6700\n2015-08-03T14:41:30.358+0200 b.s.m.n.Client [INFO] closing Netty Client Netty-Client-vm05.v5tech.local/172.28.69.111:6700\n2015-08-03T14:41:30.358+0200 b.s.m.n.Client [INFO] waiting up to 600000 ms to send 0 pending messages to Netty-Client-vm05.v5tech.local/172.28.69.111:6700\n2015-08-03T14:41:30.359+0200 b.s.m.n.Client [INFO] closing Netty Client Netty-Client-vm05.v5tech.local/172.28.69.111:6701\n2015-08-03T14:41:30.360+0200 b.s.m.n.Client [INFO] waiting up to 600000 ms to send 0 pending messages to Netty-Client-vm05.v5tech.local/172.28.69.111:6701\n2015-08-03T14:41:30.360+0200 b.s.d.worker [INFO] Shutting down receive thread\n2015-08-03T14:41:30.360+0200 b.s.m.n.Client [INFO] creating Netty Client, connecting to localhost:6700, bufferSize: 5242880\n2015-08-03T14:41:30.360+0200 o.a.s.c.r.ExponentialBackoffRetry [WARN] maxRetries too large (300). Pinning to 29\n2015-08-03T14:41:30.360+0200 b.s.u.StormBoundedExponentialBackoffRetry [INFO] The baseSleepTimeMs [100] the maxSleepTimeMs [1000] the maxRetries [300]\n2015-08-03T14:41:30.360+0200 b.s.m.n.Client [INFO] connection attempt 1 to Netty-Client-localhost/127.0.0.1:6700 scheduled to run in 0 ms\n2015-08-03T14:41:30.361+0200 b.s.m.loader [INFO] Shutting down receiving-thread: [my-topology-47-1438604011, 6700]\n2015-08-03T14:41:30.361+0200 b.s.m.n.Client [ERROR] connection to Netty-Client-localhost/127.0.0.1:6700 is unavailable\n2015-08-03T14:41:30.361+0200 b.s.m.n.Client [ERROR] dropping 1 message(s) destined <span class=\"code-keyword\">for</span> Netty-Client-localhost/127.0.0.1:6700\n2015-08-03T14:41:30.361+0200 b.s.m.n.Client [INFO] closing Netty Client Netty-Client-localhost/127.0.0.1:6700\n2015-08-03T14:41:30.361+0200 b.s.m.n.Client [INFO] waiting up to 600000 ms to send 0 pending messages to Netty-Client-localhost/127.0.0.1:6700\n2015-08-03T14:41:30.361+0200 b.s.m.loader [INFO] Waiting <span class=\"code-keyword\">for</span> receiving-thread:[my-topology-47-1438604011, 6700] to die\n2015-08-03T14:41:30.365+0200 b.s.m.n.Client [INFO] connection established to Netty-Client-localhost/127.0.0.1:6700\n2015-08-03T14:41:30.366+0200 b.s.m.loader [INFO] Shutdown receiving-thread: [my-topology-47-1438604011, 6700]\n2015-08-03T14:41:30.366+0200 b.s.d.worker [INFO] Shut down receive thread\n2015-08-03T14:41:30.366+0200 b.s.d.worker [INFO] Terminating messaging context\n2015-08-03T14:41:30.366+0200 b.s.d.worker [INFO] Shutting down executors\n2015-08-03T14:41:30.368+0200 b.s.d.executor [INFO] Shutting down executor processBolt:[2 2]\n2015-08-03T14:41:30.368+0200 b.s.util [INFO] Async loop interrupted!\n2015-08-03T14:41:30.368+0200 b.s.util [INFO] Async loop interrupted!\n2015-08-03T14:41:30.370+0200 b.s.d.executor [INFO] Shut down executor processBolt:[2 2]\n2015-08-03T14:41:30.370+0200 b.s.d.executor [INFO] Shutting down executor processBolt:[5 5]\n2015-08-03T14:41:30.371+0200 b.s.util [INFO] Async loop interrupted!\n</pre>\n</div></div>\n\n<p>In the supervisor's log:</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">2015-08-03T14:42:01.542+0200 b.s.d.supervisor [INFO] Shutting down and clearing state <span class=\"code-keyword\">for</span> id f2111c3b-31e5-4e72-b16b-ff5897148844. Current supervisor time: 1438605721. State: :timed-out, Heartbeat: #backtype.storm.daemon.common.WorkerHeartbeat{:time-secs 1438605690, :storm-id <span class=\"code-quote\">\"my-topology-47-1438604011\"</span>, :executors #{[2 2] [5 5] [8 8] [11 11] [14 14] [-1 -1]}, :port 6700}\n2015-08-03T14:42:01.542+0200 b.s.d.supervisor [INFO] Shutting down 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba:f2111c3b-31e5-4e72-b16b-ff5897148844\n2015-08-03T14:42:01.544+0200 b.s.util [INFO] Error when trying to kill 63473. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:01.546+0200 b.s.util [INFO] Error when trying to kill 63466. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:01.548+0200 b.s.util [INFO] Error when trying to kill 63481. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:01.549+0200 b.s.util [INFO] Error when trying to kill 63465. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:01.554+0200 b.s.util [INFO] Error when trying to kill 63414. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:02.556+0200 b.s.util [INFO] Error when trying to kill 63473. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:02.558+0200 b.s.util [INFO] Error when trying to kill 63466. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:02.562+0200 b.s.util [INFO] Error when trying to kill 63481. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:02.563+0200 b.s.util [INFO] Error when trying to kill 63465. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:02.566+0200 b.s.util [INFO] Error when trying to kill 63414. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T14:42:02.569+0200 b.s.d.supervisor [INFO] Shut down 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba:f2111c3b-31e5-4e72-b16b-ff5897148844\n2015-08-03T14:42:02.570+0200 b.s.d.supervisor [INFO] Launching worker with assignment #backtype.storm.daemon.supervisor.LocalAssignment{:storm-id <span class=\"code-quote\">\"my-topology-47-1438604011\"</span>, :executors ([2 2] [5 5] [8 8] [11 11] [14 14])} <span class=\"code-keyword\">for</span> <span class=\"code-keyword\">this</span> supervisor 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba on port 6700 with id e75a75ff-2eed-430d-bd77-8cd707667b1d\n2015-08-03T14:42:02.571+0200 b.s.d.supervisor [INFO] Launching worker with command: <span class=\"code-quote\">'/opt/java/latest/bin/java'</span> <span class=\"code-quote\">'-server'</span> <span class=\"code-quote\">'-Xmx6144m'</span> <span class=\"code-quote\">'-Djava.library.path=/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-47-1438604011/resources/Linux-amd64:/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-47-1438604011/resources:/usr/local/lib:/opt/local/lib:/usr/lib'</span> <span class=\"code-quote\">'-Dlogfile.name=worker-6700.log'</span> <span class=\"code-quote\">'-Dstorm.home=/opt/mydir/apache-storm-0.9.5'</span> <span class=\"code-quote\">'-Dstorm.conf.file='</span> <span class=\"code-quote\">'-Dstorm.options='</span> <span class=\"code-quote\">'-Dstorm.log.dir=/opt/mydir/apache-storm-0.9.5/logs'</span> <span class=\"code-quote\">'-Dlogback.configurationFile=/opt/mydir/apache-storm-0.9.5/logback/cluster.xml'</span> <span class=\"code-quote\">'-Dstorm.id=my-topology-47-1438604011'</span> <span class=\"code-quote\">'-Dworker.id=e75a75ff-2eed-430d-bd77-8cd707667b1d'</span> <span class=\"code-quote\">'-Dworker.port=6700'</span> <span class=\"code-quote\">'-cp'</span> <span class=\"code-quote\">'/opt/mydir/apache-storm-0.9.5/lib/minlog-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/carbonite-1.4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/json-simple-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/slf4j-api-1.7.5.jar:/opt/mydir/apache-storm-0.9.5/lib/kryo-2.21.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.logging-0.2.3.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-servlet-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.cli-0.2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/disruptor-2.10.1.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-stacktrace-0.2.2.jar:/opt/mydir/apache-storm-0.9.5/lib/math.numeric-tower-0.0.1.jar:/opt/ymdir/apache-storm-0.9.5/lib/ring-jetty-adapter-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-io-2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/servlet-api-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/log4j-over-slf4j-1.6.6.jar:/opt/mydir/apache-storm-0.9.5/lib/core.incubator-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/asm-4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/hiccup-0.3.6.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-util-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.macro-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-devel-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-exec-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-core-1.1.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clout-1.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/objenesis-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-core-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/jgrapht-core-0.9.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-codec-1.6.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-lang-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clojure-1.5.1.jar:/opt/mydir/apache-storm-0.9.5/lib/storm-core-0.9.5.jar:/opt/mydir/apache-storm-0.9.5/lib/chill-java-0.3.5.jar:/opt/mydir/apache-storm-0.9.5/lib/reflectasm-1.07-shaded.jar:/opt/mydir/apache-storm-0.9.5/lib/joda-time-2.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-logging-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/compojure-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-time-0.4.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jline-2.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-fileupload-1.2.1.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-classic-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/snakeyaml-1.11.jar:/opt/mydir/apache-storm-0.9.5/conf:/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-47-1438604011/stormjar.jar'</span> <span class=\"code-quote\">'backtype.storm.daemon.worker'</span> <span class=\"code-quote\">'my-topology-47-1438604011'</span> <span class=\"code-quote\">'63b8c93e-7d6e-4d67-b4f8-957c9650e7ba'</span> <span class=\"code-quote\">'6700'</span> <span class=\"code-quote\">'e75a75ff-2eed-430d-bd77-8cd707667b1d'</span>\n2015-08-03T14:42:02.571+0200 b.s.d.supervisor [INFO] e75a75ff-2eed-430d-bd77-8cd707667b1d still hasn't started\n2015-08-03T14:42:03.072+0200 b.s.d.supervisor [INFO] e75a75ff-2eed-430d-bd77-8cd707667b1d still hasn't started\n2015-08-03T14:42:03.572+0200 b.s.d.supervisor [INFO] e75a75ff-2eed-430d-bd77-8cd707667b1d still hasn't started\n</pre>\n</div></div>\n\n<p>And nimbus' log:</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[2 2] not alive\n2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[5 5] not alive\n2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[8 8] not alive\n2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[11 11] not alive\n2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[14 14] not alive\n2015-08-03T14:42:03.964+0200 b.s.s.EvenScheduler [INFO] Available slots: ([<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6702] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6703] [<span class=\"code-quote\">\"63b8c93e-7d6e-4d67-b4f8-957c9650e7ba\"</span> 6701] [<span class=\"code-quote\">\"63b8c93e-7d6e-4d67-b4f8-957c9650e7ba\"</span> 6702] [<span class=\"code-quote\">\"63b8c93e-7d6e-4d67-b4f8-957c9650e7ba\"</span> 6703] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6700] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6701] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6702] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6703])\n2015-08-03T14:42:03.964+0200 b.s.d.nimbus [INFO] Reassigning my-topology-47-1438604011 to 3 slots\n2015-08-03T14:42:03.964+0200 b.s.d.nimbus [INFO] Reassign executors: [[2 2] [5 5] [8 8] [11 11] [14 14]]\n2015-08-03T14:42:03.969+0200 b.s.d.nimbus [INFO] Setting <span class=\"code-keyword\">new</span> assignment <span class=\"code-keyword\">for</span> topology id my-topology-47-1438604011: #backtype.storm.daemon.common.Assignment{:master-code-dir <span class=\"code-quote\">\"/<span class=\"code-keyword\">var</span>/lib/storm/nimbus/stormdist/my-topology-47-1438604011\"</span>, :node->host {<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> <span class=\"code-quote\">\"vm06.v5tech.local\"</span>, <span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> <span class=\"code-quote\">\"vm05.v5tech.local\"</span>}, :executor->node+port {[2 2] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6700], [3 3] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6700], [4 4] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6701], [5 5] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6700], [6 6] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6700], [7 7] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6701], [8 8] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6700], [9 9] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6700], [10 10] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6701], [11 11] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6700], [12 12] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6700], [13 13] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6701], [14 14] [<span class=\"code-quote\">\"1dbdec2d-9e91-42e5-beac-2f2848667e14\"</span> 6700], [15 15] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6700], [1 1] [<span class=\"code-quote\">\"3e795735-aa1d-483d-8140-1faa9eb9161c\"</span> 6701]}, :executor->start-time-secs {[2 2] 1438605723, [3 3] 1438605182, [4 4] 1438605573, [5 5] 1438605723, [6 6] 1438605182, [7 7] 1438605573, [8 8] 1438605723, [9 9] 1438605182, [10 10] 1438605573, [11 11] 1438605723, [12 12] 1438605182, [13 13] 1438605573, [14 14] 1438605723, [15 15] 1438605182, [1 1] 1438605573}}\n</pre>\n</div></div>\n\n<p>Basically, it rebalances the topology removing the node where we executed the <tt>kill</tt> command. That produces a lot of error messages and some Netty related stuff. After that, everything seems to work again. In fact, we can rebalance again the topology (via UI) and everything works fine for a random amount of time (minutes or hours).</p>\n\n<p>Right now, after 15 min, it's frozen and we don't find a single line in the logs:</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">2015-08-03T14:51:22.028+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something\n2015-08-03T14:51:50.981+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something\n2015-08-03T14:51:51.211+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something\n2015-08-03T14:51:52.289+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something\n2015-08-03T14:51:58.181+0200 s.k.ZkCoordinator [INFO] Task [3/3] Refreshing partition manager connections\n2015-08-03T14:51:58.183+0200 s.k.DynamicBrokersReader [INFO] Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=kafka1:9092, 1=kafka2:9092, 2=kafka3:9092}}\n2015-08-03T14:51:58.183+0200 s.k.KafkaUtils [INFO] Task [3/3] assigned [Partition{host=kafka3:9092, partition=2}]\n2015-08-03T14:51:58.183+0200 s.k.ZkCoordinator [INFO] Task [3/3] Deleted partition managers: []\n2015-08-03T14:51:58.183+0200 s.k.ZkCoordinator [INFO] Task [3/3] New partition managers: []\n2015-08-03T14:51:58.183+0200 s.k.ZkCoordinator [INFO] Task [3/3] Finished refreshing\n2015-08-03T14:52:22.251+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something\n2015-08-03T14:52:22.278+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something\n2015-08-03T14:52:22.289+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something\n\n2015-08-03T14:52:58.184+0200 s.k.ZkCoordinator [INFO] Task [3/3] Refreshing partition manager connections\n2015-08-03T14:52:58.187+0200 s.k.DynamicBrokersReader [INFO] Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=kafka1:9092, 1=kafka2:9092, 2=kafka3:9092}}\n2015-08-03T14:52:58.187+0200 s.k.KafkaUtils [INFO] Task [3/3] assigned [Partition{host=kafka12.v5tech.local:9092, partition=2}]\n2015-08-03T14:52:58.187+0200 s.k.ZkCoordinator [INFO] Task [3/3] Deleted partition managers: []\n2015-08-03T14:52:58.187+0200 s.k.ZkCoordinator [INFO] Task [3/3] New partition managers: []\n2015-08-03T14:52:58.187+0200 s.k.ZkCoordinator [INFO] Task [3/3] Finished refreshing\n\n\n2015-08-03T14:53:58.189+0200 s.k.ZkCoordinator [INFO] Task [3/3] Refreshing partition manager connections\n2015-08-03T14:53:58.192+0200 s.k.DynamicBrokersReader [INFO] Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=kafka1:9092, 1=kafka2:9092, 2=kafka3:9092}}\n2015-08-03T14:53:58.193+0200 s.k.KafkaUtils [INFO] Task [3/3] assigned [Partition{host=kafka3:9092, partition=2}]\n2015-08-03T14:53:58.193+0200 s.k.ZkCoordinator [INFO] Task [3/3] Deleted partition managers: []\n2015-08-03T14:53:58.193+0200 s.k.ZkCoordinator [INFO] Task [3/3] New partition managers: []\n2015-08-03T14:53:58.193+0200 s.k.ZkCoordinator [INFO] Task [3/3] Finished refreshing\n2015-08-03T14:54:58.194+0200 s.k.ZkCoordinator [INFO] Task [3/3] Refreshing partition manager connections\n2015-08-03T14:54:58.198+0200 s.k.DynamicBrokersReader [INFO] Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=kafka1:9092, 1=kafka2:9092, 2=kafka3:9092}}\n2015-08-03T14:54:58.199+0200 s.k.KafkaUtils [INFO] Task [3/3] assigned [Partition{host=kafka3:9092, partition=2}]\n2015-08-03T14:54:58.199+0200 s.k.ZkCoordinator [INFO] Task [3/3] Deleted partition managers: []\n2015-08-03T14:54:58.199+0200 s.k.ZkCoordinator [INFO] Task [3/3] New partition managers: []\n2015-08-03T14:54:58.199+0200 s.k.ZkCoordinator [INFO] Task [3/3] Finished refreshing\n</pre>\n</div></div>\n\n<p>I'll add the <tt>jstack</tt> results later on.</p>\n\n<p>I can provide you with full logs from a fresh topology deploy if a secure upload URL is provided.</p>\n\n<p>Hope this information helps a little bit.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583142/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583146","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583146","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583146,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxNDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T13:24:20Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=alexsobrino\">alexsobrino</a>:</i>\n<p>No luck with a <tt>jstack</tt> execution:</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">> ps aux|grep java| grep storm | grep worker\nstorm      850 24.9 46.1 11092720 4736148 ?    Sl   15:04   3:58 /opt/java/latest/bin/java -server -Xmx6144m -Djava.library.path=/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-48-1438607054/resources/Linux-amd64:/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-48-1438607054/resources:/usr/local/lib:/opt/local/lib:/usr/lib -Dlogfile.name=worker-6700.log -Dstorm.home=/opt/mydir/apache-storm-0.9.5 -Dstorm.conf.file= -Dstorm.options= -Dstorm.log.dir=/opt/mydir/apache-storm-0.9.5/logs -Dlogback.configurationFile=/opt/mydir/apache-storm-0.9.5/logback/cluster.xml -Dstorm.id=my-topology-48-1438607054 -Dworker.id=3904443c-7532-4b76-a0f3-63a873bae8f0 -Dworker.port=6700 -cp /opt/mydir/apache-storm-0.9.5/lib/minlog-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/carbonite-1.4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/json-simple-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/slf4j-api-1.7.5.jar:/opt/mydir/apache-storm-0.9.5/lib/kryo-2.21.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.logging-0.2.3.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-servlet-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.cli-0.2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/disruptor-2.10.1.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-stacktrace-0.2.2.jar:/opt/mydir/apache-storm-0.9.5/lib/math.numeric-tower-0.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-jetty-adapter-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-io-2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/servlet-api-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/log4j-over-slf4j-1.6.6.jar:/opt/mydir/apache-storm-0.9.5/lib/core.incubator-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/asm-4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/hiccup-0.3.6.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-util-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.macro-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-devel-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-exec-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-core-1.1.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clout-1.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/objenesis-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-core-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/jgrapht-core-0.9.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-codec-1.6.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-lang-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clojure-1.5.1.jar:/opt/mydir/apache-storm-0.9.5/lib/storm-core-0.9.5.jar:/opt/mydir/apache-storm-0.9.5/lib/chill-java-0.3.5.jar:/opt/mydir/apache-storm-0.9.5/lib/reflectasm-1.07-shaded.jar:/opt/mydir/apache-storm-0.9.5/lib/joda-time-2.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-logging-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/compojure-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-time-0.4.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jline-2.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-fileupload-1.2.1.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-classic-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/snakeyaml-1.11.jar:/opt/mydir/apache-storm-0.9.5/conf:/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-48-1438607054/stormjar.jar backtype.storm.daemon.worker my-topology-48-1438607054 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba 6700 3904443c-7532-4b76-a0f3-63a873bae8f0\n\n> jstack 850\n850: Unable to open socket file: target process not responding or HotSpot VM not loaded\nThe -F option can be used when the target process is not responding\n</pre>\n</div></div>\n\n<p>And after some minutes the worker process dies, as can be seen in the supervisor's log:</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">2015-08-03T15:20:56.584+0200 b.s.d.supervisor [INFO] Shutting down and clearing state <span class=\"code-keyword\">for</span> id 3904443c-7532-4b76-a0f3-63a873bae8f0. Current supervisor time: 1438608056. State: :timed-out, Heartbeat: #backtype.storm.daemon.common.WorkerHeartbeat{:time-secs 1438608025, :storm-id <span class=\"code-quote\">\"my-topology-48-1438607054\"</span>, :executors #{[2 2] [5 5] [8 8] [11 11] [14 14] [-1 -1]}, :port 6700}\n2015-08-03T15:20:56.584+0200 b.s.d.supervisor [INFO] Shutting down 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba:3904443c-7532-4b76-a0f3-63a873bae8f0\n2015-08-03T15:20:57.606+0200 b.s.util [INFO] Error when trying to kill 936. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T15:20:57.610+0200 b.s.util [INFO] Error when trying to kill 937. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T15:20:57.618+0200 b.s.util [INFO] Error when trying to kill 938. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T15:20:57.619+0200 b.s.util [INFO] Error when trying to kill 939. <span class=\"code-object\">Process</span> is probably already dead.\n2015-08-03T15:20:57.623+0200 b.s.d.supervisor [INFO] Shut down 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba:3904443c-7532-4b76-a0f3-63a873bae8f0\n2015-08-03T15:20:57.624+0200 b.s.d.supervisor [INFO] Launching worker with assignment #backtype.storm.daemon.supervisor.LocalAssignment{:storm-id <span class=\"code-quote\">\"my-topology-48-1438607054\"</span>, :executors ([2 2] [5 5] [8 8] [11 11] [14 14])} <span class=\"code-keyword\">for</span> <span class=\"code-keyword\">this</span> supervisor 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba on port 6700 with id 22528582-09ee-411a-bfbd-65ffecd69be4\n2015-08-03T15:20:57.625+0200 b.s.d.supervisor [INFO] Launching worker with command: <span class=\"code-quote\">'/opt/java/latest/bin/java'</span> <span class=\"code-quote\">'-server'</span> <span class=\"code-quote\">'-Xmx6144m'</span> <span class=\"code-quote\">'-Djava.library.path=/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-48-1438607054/resources/Linux-amd64:/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-48-1438607054/resources:/usr/local/lib:/opt/local/lib:/usr/lib'</span> <span class=\"code-quote\">'-Dlogfile.name=worker-6700.log'</span> <span class=\"code-quote\">'-Dstorm.home=/opt/mydir/apache-storm-0.9.5'</span> <span class=\"code-quote\">'-Dstorm.conf.file='</span> <span class=\"code-quote\">'-Dstorm.options='</span> <span class=\"code-quote\">'-Dstorm.log.dir=/opt/mydir/apache-storm-0.9.5/logs'</span> <span class=\"code-quote\">'-Dlogback.configurationFile=/opt/mydir/apache-storm-0.9.5/logback/cluster.xml'</span> <span class=\"code-quote\">'-Dstorm.id=my-topology-48-1438607054'</span> <span class=\"code-quote\">'-Dworker.id=22528582-09ee-411a-bfbd-65ffecd69be4'</span> <span class=\"code-quote\">'-Dworker.port=6700'</span> <span class=\"code-quote\">'-cp'</span> <span class=\"code-quote\">'/opt/mydir/apache-storm-0.9.5/lib/minlog-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/carbonite-1.4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/json-simple-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/slf4j-api-1.7.5.jar:/opt/mydir/apache-storm-0.9.5/lib/kryo-2.21.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.logging-0.2.3.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-servlet-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.cli-0.2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/disruptor-2.10.1.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-stacktrace-0.2.2.jar:/opt/mydir/apache-storm-0.9.5/lib/math.numeric-tower-0.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-jetty-adapter-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-io-2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/servlet-api-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/log4j-over-slf4j-1.6.6.jar:/opt/mydir/apache-storm-0.9.5/lib/core.incubator-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/asm-4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/hiccup-0.3.6.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-util-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.macro-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-devel-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-exec-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-core-1.1.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clout-1.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/objenesis-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-core-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/jgrapht-core-0.9.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-codec-1.6.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-lang-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clojure-1.5.1.jar:/opt/mydir/apache-storm-0.9.5/lib/storm-core-0.9.5.jar:/opt/mydir/apache-storm-0.9.5/lib/chill-java-0.3.5.jar:/opt/mydir/apache-storm-0.9.5/lib/reflectasm-1.07-shaded.jar:/opt/mydir/apache-storm-0.9.5/lib/joda-time-2.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-logging-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/compojure-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-time-0.4.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jline-2.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-fileupload-1.2.1.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-classic-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/snakeyaml-1.11.jar:/opt/mydir/apache-storm-0.9.5/conf:/<span class=\"code-keyword\">var</span>/lib/storm/supervisor/stormdist/my-topology-48-1438607054/stormjar.jar'</span> <span class=\"code-quote\">'backtype.storm.daemon.worker'</span> <span class=\"code-quote\">'my-topology-48-1438607054'</span> <span class=\"code-quote\">'63b8c93e-7d6e-4d67-b4f8-957c9650e7ba'</span> <span class=\"code-quote\">'6700'</span> <span class=\"code-quote\">'22528582-09ee-411a-bfbd-65ffecd69be4'</span>\n2015-08-03T15:20:57.626+0200 b.s.d.supervisor [INFO] 22528582-09ee-411a-bfbd-65ffecd69be4 still hasn't started\n2015-08-03T15:20:58.126+0200 b.s.d.supervisor [INFO] 22528582-09ee-411a-bfbd-65ffecd69be4 still hasn't started\n</pre>\n</div></div>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583146/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583154","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583154","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583154,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxNTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T13:34:49Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>jstack with -F option forces leaving thread dump. <br/>\nWhen you meet circumstance again, try jstack with -F option. It should be a good bet.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583157","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583157","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583157,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxNTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T13:36:20Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Could you please refer my e-mail address from profile and send full logs? Thanks in advance!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583157/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127237261","html_url":"https://github.com/apache/storm/pull/658#issuecomment-127237261","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":127237261,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzIzNzI2MQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T13:40:01Z","updated_at":"2015-08-03T13:40:01Z","author_association":"CONTRIBUTOR","body":"@jerrypeng \nGreat. It couldn't assert it is not big number or big decimal, but it's better than current.\n+1.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127237261/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583712","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583712","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583712,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T13:40:02Z","updated_at":"2025-01-24T13:53:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-127237261\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-127237261</a></p>\n\n<p>    @jerrypeng <br/>\n    Great. It couldn't assert it is not big number or big decimal, but it's better than current.<br/>\n    +1.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583712/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127237670","html_url":"https://github.com/apache/storm/pull/658#issuecomment-127237670","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":127237670,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzIzNzY3MA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T13:41:04Z","updated_at":"2015-08-03T13:41:04Z","author_association":"CONTRIBUTOR","body":"@jerrypeng Sorry, but could you provide unit test for PositiveNumberValidator? Thanks!\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127237670/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583715","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583715","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583715,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T13:41:05Z","updated_at":"2025-01-24T13:53:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-127237670\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-127237670</a></p>\n\n<p>    @jerrypeng Sorry, but could you provide unit test for PositiveNumberValidator? Thanks!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612582885","html_url":"https://github.com/apache/storm/issues/4799#issuecomment-2612582885","issue_url":"https://api.github.com/repos/apache/storm/issues/4799","id":2612582885,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODI4ODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T14:20:59Z","updated_at":"2025-01-24T13:52:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=01sasa10\">01sasa10</a>:</i>\n<p>Hello Taylor, </p>\n\n<p>  I am one of the main authors of Squall. We also get interest from many people who contact us privately or publicly. We are very open to integrate into Apache Storm and participate in the process. Recently, we have also incorporated a Functional Scala interface with SBT-REPL support, like that of SPARK. Looking forwards to hearing from you <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>\n\n<p>p.s. Greetings to bobby!<br/>\nCheers,</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612582885/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612576561","html_url":"https://github.com/apache/storm/issues/4757#issuecomment-2612576561","issue_url":"https://api.github.com/repos/apache/storm/issues/4757","id":2612576561,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzY1NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T14:28:11Z","updated_at":"2025-01-24T13:50:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=shyamrajendran\">shyamrajendran</a>:</i>\n<ul class=\"alternate\" type=\"square\">\n\t<li>I have added few more metrics related to JVM such as GC time, GC count ThreadCPUTimes, ThreadAllocatedBytes stats in addition to node cpu stats.</li>\n</ul>\n\n\n<p>Also it would be helpful to get opinion on the following approach to arrive at a relative rank of the topology components. This is to help implement feedback loop into the resource aware scheduler in future.</p>\n\n<p>We took a specific metric as POC and have tried with some heuristic approach taking into account the Node and Worker slot information per component to rank the components. A REST endpoint is exposed that collates the details per worker slot ( Node + port ) for all the tasks executing in them like so, </p>\n\n<p>6897b645-667f-40ca-9cfc-5fa0d749e9cc 6704 1 0 1 1 0 0.14691151919866444 1.0<br/>\n 6897b645-667f-40ca-9cfc-5fa0d749e9cc 6701 1 1 1 0 1 0.2525083612040134 1.0<br/>\n 6897b645-667f-40ca-9cfc-5fa0d749e9cc 6703 1 1 0 1 0 0.16279069767441862 1.0<br/>\n 08119658-a284-42fa-81a4-08358a08a91a 6703 1 1 0 1 0 0.1778523489932886 1.0<br/>\n 08119658-a284-42fa-81a4-08358a08a91a 6702 1 1 1 0 0 0.18090452261306533 1.0<br/>\n 08119658-a284-42fa-81a4-08358a08a91a 6704 1 0 1 1 0 0.13590604026845637 1.0<br/>\n 6897b645-667f-40ca-9cfc-5fa0d749e9cc 6700 1 1 1 0 1 0.2441860465116279 1.0<br/>\n 6897b645-667f-40ca-9cfc-5fa0d749e9cc 6702 1 1 1 0 0 0.19198664440734559 1.0<br/>\n 08119658-a284-42fa-81a4-08358a08a91a 6700 1 1 1 0 1 0.25585284280936454 1.0<br/>\n 08119658-a284-42fa-81a4-08358a08a91a 6701 1 1 1 0 1 0.24749163879598662 1.0</p>\n\n<p>where each row is unique [ node + port ] followed by count of tasks per component executing on them. In this case we could see four tasks executing per slot. For example, the first row has one task of component 2 and component 3. It is then followed by JVM process Utilization and the node cpu utilization. </p>\n\n<p>The above information can be viewed as a system of M linear equations in N unknowns, unknowns here being the components. We used apache common math library to solve them using through a technique called Singular Value decomposition that helps in case of over determined or under determined system.</p>\n\n<p>We tried to understand how the following scenarios impact the utilization<br/>\n1 - Tasks that load the JVM process. <br/>\n2 - Tasks that have multilang support that potentially load the node<br/>\n3 - Background threads spawned [ examples of database connections or such that could be shared among the executors . Help on this understanding would be appreciated] </p>\n\n<p>We tried with different topologies to simulate the above scenarios and solved equations using the below formula that tries to add a correction value to the JVM% stat read as a function of number of tasks and Node’s metrics.</p>\n\n<p> JVM% + (Sum of tasks in that JVM) (  (SuNode% - (sum of JVM% of workers in that SuNode) ) / (Task count on the SuNode) )</p>\n\n<p>We have been seeing good results with this approach to ranking when compared to expected and observed utilization values. We would be running more tests in the coming days to tweak the formula and gather the accuracy. I haven’t got the pull request updated for this change yet but have been working on an internal fork of storm and would like to hear your opinion, suggestions and feedback to improve. Thanks!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612576561/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612578361","html_url":"https://github.com/apache/storm/issues/4771#issuecomment-2612578361","issue_url":"https://api.github.com/repos/apache/storm/issues/4771","id":2612578361,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzgzNjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T15:23:03Z","updated_at":"2025-01-24T13:50:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/660\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/660</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612578361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127331868","html_url":"https://github.com/apache/storm/pull/658#issuecomment-127331868","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":127331868,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzMzMTg2OA==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T17:01:25Z","updated_at":"2015-08-03T17:01:25Z","author_association":"CONTRIBUTOR","body":"added unit tests.  Please merge? or do I need to squash some of the commits?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127331868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583723","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583723","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583723,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-03T17:01:26Z","updated_at":"2025-01-24T13:53:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-127331868\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-127331868</a></p>\n\n<p>    added unit tests.  Please merge? or do I need to squash some of the commits?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583723/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583731","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583731","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583731,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T01:22:23Z","updated_at":"2025-01-24T13:53:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user caofangkun commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#discussion_r36149821\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#discussion_r36149821</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/ConfigValidation.java &#8212;<br/>\n    @@ -28,7 +28,6 @@<br/>\n /**</p>\n<ul>\n\t<li>Declares methods for validating configuration values.<br/>\n  */</li>\n</ul>\n<ul class=\"alternate\" type=\"square\">\n\t<li>public static interface FieldValidator {\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    This interface should not be annotated.<br/>\n    Could you please have a check?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583731/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612562790","html_url":"https://github.com/apache/storm/issues/4691#issuecomment-2612562790","issue_url":"https://api.github.com/repos/apache/storm/issues/4691","id":2612562790,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjI3OTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T05:27:38Z","updated_at":"2025-01-24T13:43:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user hmcl opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/665\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/665</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-851\" title=\"Storm Solr connector\" class=\"issue-link\" data-issue-key=\"STORM-851\"><del>STORM-851</del></a>: Storm Solr Connector</p>\n\n<p>    1. SolrUpdate Bolt<br/>\n    2. Trident State implementation<br/>\n    3. Fields Mapper<br/>\n    4. JSON Mapper<br/>\n    5. Integration Tests</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/hmcl/storm-apache\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/hmcl/storm-apache</a> <a href=\"https://issues.apache.org/jira/browse/STORM-851\" title=\"Storm Solr connector\" class=\"issue-link\" data-issue-key=\"STORM-851\"><del>STORM-851</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/665.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/665.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #665</p>\n\n<hr />\n<p>commit 0c5e00caf801e8a7455f0bc7976a7dcd0f8ab335<br/>\nAuthor: Hugo Louro <hmclouro@gmail.com><br/>\nDate:   2015-07-17T02:10:30Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-851\" title=\"Storm Solr connector\" class=\"issue-link\" data-issue-key=\"STORM-851\"><del>STORM-851</del></a>: Storm Solr Connector<br/>\n    1. SolrUpdate Bolt<br/>\n    2. Trident State implementation<br/>\n    3. Fields Mapper<br/>\n    4. JSON Mapper<br/>\n    5. Integration Tests</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612562790/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127483109","html_url":"https://github.com/apache/storm/pull/665#issuecomment-127483109","issue_url":"https://api.github.com/repos/apache/storm/issues/665","id":127483109,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzQ4MzEwOQ==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T05:29:53Z","updated_at":"2015-08-04T05:29:53Z","author_association":"CONTRIBUTOR","body":"I am planning on pushing a few more unit tests while the community does the review. I have provided a set of functional tests that use the Solr gettingstarted example. I ran the functional tests successfully with Solr running locally. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127483109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612562797","html_url":"https://github.com/apache/storm/issues/4691#issuecomment-2612562797","issue_url":"https://api.github.com/repos/apache/storm/issues/4691","id":2612562797,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjI3OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T05:29:54Z","updated_at":"2025-01-24T13:43:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hmcl commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/665#issuecomment-127483109\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/665#issuecomment-127483109</a></p>\n\n<p>    I am planning on pushing a few more unit tests while the community does the review. I have provided a set of functional tests that use the Solr gettingstarted example. I ran the functional tests successfully with Solr running locally. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612562797/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127604553","html_url":"https://github.com/apache/storm/pull/658#issuecomment-127604553","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":127604553,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzYwNDU1Mw==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T13:17:27Z","updated_at":"2015-08-04T13:17:27Z","author_association":"CONTRIBUTOR","body":"@jerrypeng There's a compile failure. Could you check it?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127604553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583736","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583736","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583736,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T13:17:28Z","updated_at":"2025-01-24T13:53:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-127604553\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-127604553</a></p>\n\n<p>    @jerrypeng There's a compile failure. Could you check it?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583736/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127606460","html_url":"https://github.com/apache/storm/pull/573#issuecomment-127606460","issue_url":"https://api.github.com/repos/apache/storm/issues/573","id":127606460,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzYwNjQ2MA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T13:20:09Z","updated_at":"2015-08-04T13:20:09Z","author_association":"CONTRIBUTOR","body":"+1.\n@harshach Could you take a look? Or do you want me to merge it without your review?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127606460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612561984","html_url":"https://github.com/apache/storm/issues/4685#issuecomment-2612561984","issue_url":"https://api.github.com/repos/apache/storm/issues/4685","id":2612561984,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjE5ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T13:20:11Z","updated_at":"2025-01-24T13:43:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/573#issuecomment-127606460\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/573#issuecomment-127606460</a></p>\n\n<p>    +1.<br/>\n    @harshach Could you take a look? Or do you want me to merge it without your review?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612561984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127623505","html_url":"https://github.com/apache/storm/pull/608#issuecomment-127623505","issue_url":"https://api.github.com/repos/apache/storm/issues/608","id":127623505,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzYyMzUwNQ==","user":{"login":"bourneagain","id":6658158,"node_id":"MDQ6VXNlcjY2NTgxNTg=","avatar_url":"https://avatars.githubusercontent.com/u/6658158?v=4","gravatar_id":"","url":"https://api.github.com/users/bourneagain","html_url":"https://github.com/bourneagain","followers_url":"https://api.github.com/users/bourneagain/followers","following_url":"https://api.github.com/users/bourneagain/following{/other_user}","gists_url":"https://api.github.com/users/bourneagain/gists{/gist_id}","starred_url":"https://api.github.com/users/bourneagain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bourneagain/subscriptions","organizations_url":"https://api.github.com/users/bourneagain/orgs","repos_url":"https://api.github.com/users/bourneagain/repos","events_url":"https://api.github.com/users/bourneagain/events{/privacy}","received_events_url":"https://api.github.com/users/bourneagain/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T14:04:51Z","updated_at":"2015-08-04T14:04:51Z","author_association":"CONTRIBUTOR","body":"I will revert the changes to Thrift generated files and update the pull request. Also I have updated details on how we plan to use these metrics @ https://issues.apache.org/jira/browse/STORM-919. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127623505/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612576565","html_url":"https://github.com/apache/storm/issues/4757#issuecomment-2612576565","issue_url":"https://api.github.com/repos/apache/storm/issues/4757","id":2612576565,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzY1NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T14:04:52Z","updated_at":"2025-01-24T13:50:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bourneagain commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/608#issuecomment-127623505\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/608#issuecomment-127623505</a></p>\n\n<p>    I will revert the changes to Thrift generated files and update the pull request. Also I have updated details on how we plan to use these metrics @ <a href=\"https://issues.apache.org/jira/browse/STORM-919\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-919</a>. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612576565/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127633390","html_url":"https://github.com/apache/storm/pull/658#issuecomment-127633390","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":127633390,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzYzMzM5MA==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T14:31:45Z","updated_at":"2015-08-04T14:31:45Z","author_association":"CONTRIBUTOR","body":"You are right @caofangkun, not sure how that line got deleted, but it shouldn't have been removed.  I added back and I think the tests will pass now\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127633390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583740","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583740","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583740,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T14:31:46Z","updated_at":"2025-01-24T13:53:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-127633390\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-127633390</a></p>\n\n<p>    You are right @caofangkun, not sure how that line got deleted, but it shouldn't have been removed.  I added back and I think the tests will pass now</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583740/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127659910","html_url":"https://github.com/apache/storm/pull/658#issuecomment-127659910","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":127659910,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzY1OTkxMA==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T16:04:34Z","updated_at":"2015-08-04T16:04:34Z","author_association":"CONTRIBUTOR","body":"I don't know why the build is still failing. I just built and ran all the tests fine on my local machine.  I heard that since we just recently started using travis-ci that there are some bugs with it. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127659910/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583745","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583745","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583745,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3NDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-04T16:04:35Z","updated_at":"2025-01-24T13:53:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-127659910\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-127659910</a></p>\n\n<p>    I don't know why the build is still failing. I just built and ran all the tests fine on my local machine.  I heard that since we just recently started using travis-ci that there are some bugs with it. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583745/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/127811188","html_url":"https://github.com/apache/storm/pull/658#issuecomment-127811188","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":127811188,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzgxMTE4OA==","user":{"login":"caofangkun","id":1931407,"node_id":"MDQ6VXNlcjE5MzE0MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1931407?v=4","gravatar_id":"","url":"https://api.github.com/users/caofangkun","html_url":"https://github.com/caofangkun","followers_url":"https://api.github.com/users/caofangkun/followers","following_url":"https://api.github.com/users/caofangkun/following{/other_user}","gists_url":"https://api.github.com/users/caofangkun/gists{/gist_id}","starred_url":"https://api.github.com/users/caofangkun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/caofangkun/subscriptions","organizations_url":"https://api.github.com/users/caofangkun/orgs","repos_url":"https://api.github.com/users/caofangkun/repos","events_url":"https://api.github.com/users/caofangkun/events{/privacy}","received_events_url":"https://api.github.com/users/caofangkun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T01:19:54Z","updated_at":"2015-08-05T01:19:54Z","author_association":"CONTRIBUTOR","body":"I checked the CI build log and find \nhttps://travis-ci.org/apache/storm/jobs/74073153#L4132\n\nand there's a PR  on this , @HeartSaVioR Could you please review #652 ?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/127811188/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583750","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583750","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583750,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T01:19:55Z","updated_at":"2025-01-24T13:53:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user caofangkun commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-127811188\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-127811188</a></p>\n\n<p>    I checked the CI build log and find <br/>\n    <a href=\"https://travis-ci.org/apache/storm/jobs/74073153#L4132\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://travis-ci.org/apache/storm/jobs/74073153#L4132</a></p>\n\n<p>    and there's a PR  on this , @HeartSaVioR Could you please review #652 ?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583750/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583160","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583160","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583160,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxNjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T07:16:09Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=alexsobrino\">alexsobrino</a>:</i>\n<p>Hi <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a>, did you reviece my email?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583160/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583165","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583165","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583165,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxNjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T07:22:54Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Hi Alex, sorry I forgot to respond.<br/>\nI received your email but I didn't have a time to take a look.<br/>\nI'll have a look when I have some leisure time. Thanks!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583165/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612574419","html_url":"https://github.com/apache/storm/issues/4742#issuecomment-2612574419","issue_url":"https://api.github.com/repos/apache/storm/issues/4742","id":2612574419,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzQ0MTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T09:31:36Z","updated_at":"2025-01-24T13:49:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user caofangkun commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/662#discussion_r36284000\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/662#discussion_r36284000</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/utils/StormCommandExecutor.java &#8212;<br/>\n    @@ -0,0 +1,785 @@<br/>\n    +package backtype.storm.utils;<br/>\n    +<br/>\n    +import java.io.BufferedReader;<br/>\n    +import java.io.File;<br/>\n    +import java.io.InputStream;<br/>\n    +import java.io.InputStreamReader;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.lang.reflect.Method;<br/>\n    +import java.nio.charset.StandardCharsets;<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.commons.lang.SystemUtils;<br/>\n    +<br/>\n    +/**<br/>\n    + * Created by pshah on 7/17/15.<br/>\n    + */<br/>\n    +abstract class StormCommandExecutor {<br/>\n    +    final String NIMBUS_CLASS = \"backtype.storm.daemon.nimbus\";<br/>\n    +    final String SUPERVISOR_CLASS = \"backtype.storm.daemon.supervisor\";<br/>\n    +    final String UI_CLASS = \"backtype.storm.ui.core\";<br/>\n    +    final String LOGVIEWER_CLASS = \"backtype.storm.daemon.logviewer\";<br/>\n    +    final String DRPC_CLASS = \"backtype.storm.daemon.drpc\";<br/>\n    +    final String REPL_CLASS = \"clojure.main\";<br/>\n    +    final String ACTIVATE_CLASS = \"backtype.storm.command.activate\";<br/>\n    +    final String DEACTIVATE_CLASS = \"backtype.storm.command.deactivate\";<br/>\n    +    final String REBALANCE_CLASS = \"backtype.storm.command.rebalance\";<br/>\n    +    final String LIST_CLASS = \"backtype.storm.command.list\";<br/>\n    +    String stormHomeDirectory;<br/>\n    +    String userConfDirectory;<br/>\n    +    String stormConfDirectory;<br/>\n    +    String clusterConfDirectory;<br/>\n    +    String stormLibDirectory;<br/>\n    +    String stormBinDirectory;<br/>\n    +    String stormLog4jConfDirectory;<br/>\n    +    String configFile = \"\";<br/>\n    +    String javaCommand;<br/>\n    +    List<String> configOptions = new ArrayList<String>();<br/>\n    +    String stormExternalClasspath;<br/>\n    +    String stormExternalClasspathDaemon;<br/>\n    +    String fileSeparator;<br/>\n    +    final List<String> COMMANDS = Arrays.asList(\"jar\", \"kill\", \"shell\",<br/>\n    +    \"nimbus\", \"ui\", \"logviewer\", \"drpc\", \"supervisor\",<br/>\n    +    \"localconfvalue\",  \"remoteconfvalue\", \"repl\", \"classpath\",<br/>\n    +    \"activate\", \"deactivate\", \"rebalance\", \"help\",  \"list\",<br/>\n    +    \"dev-zookeeper\", \"version\", \"monitor\", \"upload-credentials\",<br/>\n    +    \"get-errors\");<br/>\n    +<br/>\n    +    public static void main (String[] args) {<br/>\n    +for (String arg : args) </p>\n{\n    +    System.out.println(\"Argument ++ is \" + arg);\n    +}\n<p>    +StormCommandExecutor stormCommandExecutor;<br/>\n    +if (System.getProperty(\"os.name\").startsWith(\"Windows\")) </p>\n{\n    +    stormCommandExecutor = new WindowsStormCommandExecutor();\n    +}\n<p> else </p>\n{\n    +    stormCommandExecutor = new UnixStormCommandExecutor();\n    +}\n<p>    +stormCommandExecutor.initialize();<br/>\n    +stormCommandExecutor.execute(args);<br/>\n    +    }<br/>\n    +<br/>\n    +    StormCommandExecutor () </p>\n{\n    +\n    +    }<br/>\n    +<br/>\n    +    abstract void initialize ();<br/>\n    +<br/>\n    +    abstract void execute (String[] args);<br/>\n    +<br/>\n    +    void callMethod (String command, List<String> args) {<br/>\n    +Class implementation = this.getClass();<br/>\n    +String methodName = command.replace(\"-\", \"\") + \"Command\";<br/>\n    +try {\n    +    Method method = implementation.getDeclaredMethod(methodName, List\n    +    .class);\n    +    method.invoke(this, args);\n    +} catch (NoSuchMethodException ex) {\n    +    System.out.println(\"No such method exception occured while trying\" +\n    +    \" to run storm method \" + command);\n    +} catch (IllegalAccessException ex) {\n    +    System.out.println(\"Illegal access exception occured while trying\" +\n    +    \" to run storm method \" + command);\n    +} catch (IllegalArgumentException ex) {\n    +    System.out.println(\"Illegal argument exception occured while \" +\n    +    \"trying\" + \" to run storm method \" + command);\n    +} catch (InvocationTargetException ex) {\n    +    System.out.println(\"Invocation target exception occured while \" +\n    +    \"trying\" + \" to run storm method \" + command);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +class UnixStormCommandExecutor extends StormCommandExecutor {<br/>\n    +<br/>\n    +    UnixStormCommandExecutor () {    +    +    }\n<p>    +<br/>\n    +    void initialize () {<br/>\n    +Collections.sort(this.COMMANDS);<br/>\n    +this.fileSeparator = System .getProperty (\"file.separator\");<br/>\n    +this.stormHomeDirectory = System.getenv(\"STORM_BASE_DIR\");<br/>\n    +this.userConfDirectory = System.getProperty(\"user.home\") +<br/>\n    +this.fileSeparator + \"\" +<br/>\n    +\".storm\";<br/>\n    +this.stormConfDirectory = System.getenv(\"STORM_CONF_DIR\");<br/>\n    +this.clusterConfDirectory = this.stormConfDirectory == null ?  (this<br/>\n    +.stormHomeDirectory + this.fileSeparator + \"conf\") : this<br/>\n    +.stormConfDirectory;<br/>\n    +File f = new File(this.userConfDirectory + this.fileSeparator +<br/>\n    +\"storm.yaml\");<br/>\n    +if (!f.isFile()) </p>\n{\n    +    this.userConfDirectory = this.clusterConfDirectory;\n    +}\n<p>    +this.stormLibDirectory = this.stormHomeDirectory + this.fileSeparator +<br/>\n    +\"lib\";<br/>\n    +this.stormBinDirectory = this.stormHomeDirectory + this.fileSeparator +<br/>\n    +\"bin\";<br/>\n    +this.stormLog4jConfDirectory = this.stormHomeDirectory +<br/>\n    +this.fileSeparator + \"log4j2\";<br/>\n    +if (System.getenv(\"JAVA_HOME\") != null) {<br/>\n    +    this.javaCommand = System.getenv(\"JAVA_HOME\") + this.fileSeparator +<br/>\n    +    \"bin\" + this.fileSeparator + \"java\";<br/>\n    +    if (!(new File(this.javaCommand).exists())) </p>\n{\n    +System.out.println(\"ERROR:  JAVA_HOME is invalid.  Could not \" +\n    +\"find \" + this.javaCommand);\n    +System.exit(1);\n    +    }\n<p>    +} else </p>\n{\n    +    this.javaCommand = \"java\";\n    +}\n<p>    +this.stormExternalClasspath = System.getenv(\"STORM_EXT_CLASSPATH\");<br/>\n    +this.stormExternalClasspathDaemon = System.getenv<br/>\n    +(\"STORM_EXT_CLASSPATH_DAEMON\");<br/>\n    +if (!(new File(this.stormLibDirectory).exists())) </p>\n{\n    +    System.out.println(\"******************************************\");\n    +    System.out.println(\"The storm client can only be run from within \" +\n    +    \"a release. \" + \"You appear to be trying to run the client\" +\n    +    \" from a checkout of Storm's source code.\");\n    +    System.out.println(\"You can download a Storm release at \" +\n    +    \"http://storm-project.net/downloads.html\");\n    +    System.out.println(\"******************************************\");\n    +    System.exit(1);\n    +}\n<p>    +//System.getProperties().list(System.out);<br/>\n    +    }<br/>\n    +<br/>\n    +    void execute (String[] args) {<br/>\n    +if (args.length == 0) </p>\n{\n    +    this.printUsage();\n    +    System.exit(-1);\n    +}\n<p>    +List<String> commandArgs = new ArrayList<String>();<br/>\n    +for (int i = 0; i < args.length; ++i) {<br/>\n    +    if (args<span class=\"error\">&#91;i&#93;</span> == \"-c\") </p>\n{\n    +this.configOptions.add(args[++i]);\n    +    }\n<p> else if (args<span class=\"error\">&#91;i&#93;</span> == \"--config\") </p>\n{\n    +this.configFile = args[++i];\n    +    }\n<p> else </p>\n{\n    +commandArgs.add(args[i]);\n    +    }\n<p>    +}<br/>\n    +if ((commandArgs.size() == 0)  || (!this.COMMANDS.contains<br/>\n    +(commandArgs.get(0)))) </p>\n{\n    +    System.out.println(\"Unknown command: [storm \" + StringUtils.join\n    +    (args, \" \") +  \"]\");\n    +    this.printUsage();\n    +    System.exit(254);\n    +\n    +}\n<p>    +this.callMethod(commandArgs.get(0), commandArgs.subList(1,<br/>\n    +commandArgs.size()));<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    String getConfigOptions() </p>\n{\n    +String configOptions = \"-Dstorm.options=\";\n    +//TODO  - do urlencode here. python does quote_plus to each configoption\n    +return configOptions + StringUtils.join(this.configOptions, ',');\n    +\n    +    }\n<p>    +<br/>\n    +    List<String> getJarsFull (String directory) {<br/>\n    +List<String> fullJarFiles = new ArrayList<String>();<br/>\n    +File file = new File(directory);<br/>\n    +File[] files = file.listFiles();<br/>\n    +if (files != null) {<br/>\n    +    for (File f : files) {<br/>\n    +if (f.getName().endsWith(\".jar\")) </p>\n{\n    +    fullJarFiles.add(f.getPath());\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return fullJarFiles;<br/>\n    +    }<br/>\n    +<br/>\n    +    String getClassPath (List<String> extraJars, boolean daemon) {<br/>\n    +List<String> classPaths = this.getJarsFull(this.stormHomeDirectory);<br/>\n    +classPaths.addAll(this.getJarsFull(this.stormLibDirectory));<br/>\n    +classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this<br/>\n    +.fileSeparator + \"extlib\"));<br/>\n    +if (daemon == true) </p>\n{\n    +    classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this\n    +    .fileSeparator + \"extlib-daemon\"));\n    +}\n<p>    +if (this.stormExternalClasspath != null) </p>\n{\n    +    classPaths.add(this.stormExternalClasspath);\n    +}\n<p>    +if (this.stormExternalClasspathDaemon != null) </p>\n{\n    +    classPaths.add(this.stormExternalClasspathDaemon);\n    +}\n<p>    +classPaths.addAll(extraJars);<br/>\n    +return StringUtils.join(classPaths, System.getProperty(\"path\" +<br/>\n    +\".separator\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    String confValue (String name, List<String> extraPaths, boolean daemon) {<br/>\n    +// The original code from python started a process that started a jvm<br/>\n    +// with backtype.storm.command.config_value main method that would<br/>\n    +// read the conf value and print it out to an output stream. python<br/>\n    +// tapped on to the output stream of that subprocess and returned the<br/>\n    +// confvalue for the name. Because the pythong code has been shipped<br/>\n    +// to java now it should not spawn a new process which is a jvm since<br/>\n    +// we are already in jvm. Instead it should just be doing as the code<br/>\n    +// commeneted below.<br/>\n    +// However looking at the pythong code it was<br/>\n    +// starting a jvm with -cp argument that had classpaths which might<br/>\n    +// not be available to this java process. Hence there is a chance<br/>\n    +// that the below code might break existing scripts. As a result I<br/>\n    +// have decided to still spawn a new process from java just like<br/>\n    +// python with similar classpaths being constructed for the jvm<br/>\n    +// execution<br/>\n    +/*IFn fn = Utils.loadClojureFn(\"backtype.storm.config\",<br/>\n    +\"read-storm-config\");<br/>\n    +Object o = fn.invoke();<br/>\n    +return ((Map) o).get(name).toString();*/<br/>\n    +String confValue = \"\";<br/>\n    +ProcessBuilder processBuilder = new ProcessBuilder(this.javaCommand,<br/>\n    +\"-client\", this.getConfigOptions(), \"-Dstorm.conf.file=\" +<br/>\n    +this.configFile, \"-cp\", this.getClassPath(extraPaths, daemon),<br/>\n    +\"backtype.storm.command.config_value\", name);<br/>\n    +BufferedReader br;<br/>\n    +try {<br/>\n    +    Process process = processBuilder.start();<br/>\n    +    br = new BufferedReader(new InputStreamReader(process<br/>\n    +    .getInputStream(), StandardCharsets.UTF_8));<br/>\n    +    process.waitFor();<br/>\n    +    String line;<br/>\n    +    while ((line = br.readLine()) != null) {<br/>\n    +String[] tokens = line.split(\" \");<br/>\n    +if (\"VALUE:\".equals(tokens<span class=\"error\">&#91;0&#93;</span>)) </p>\n{\n    +    confValue = StringUtils.join(Arrays.copyOfRange(tokens, 1,\n    +    tokens.length), \" \");\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    br.close();<br/>\n    +} catch (Exception ex) </p>\n{\n    +    System.out.println(\"Exception occured while starting process via \" +\n    +    \"processbuilder \" + ex.getMessage());\n    +}<br/>\n    +return confValue;<br/>\n    +    }<br/>\n    +<br/>\n    +    void executeStormClass (String className, String jvmType, List<String><br/>\n    +    jvmOptions, List<String> extraJars, List<String> args, boolean<br/>\n    +    fork, boolean daemon, String daemonName) {<br/>\n    +List<String> extraPaths = new ArrayList<>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String stormLogDirectory = this.confValue(\"storm.log.dir\",<br/>\n    +extraPaths, daemon);<br/>\n    +if ((stormLogDirectory == null) || (\"\".equals(stormLogDirectory)) ||<br/>\n    +(\"nil\".equals(stormLogDirectory))) {\n    +    stormLogDirectory = this.stormHomeDirectory + this.fileSeparator\n    +    + \"logs\";\n    +}<br/>\n    +List<String> commandList = new ArrayList<String>();<br/>\n    +commandList.add(this.javaCommand);<br/>\n    +commandList.add(jvmType);<br/>\n    +commandList.add(\"-Ddaemon.name=\" + daemonName);<br/>\n    +commandList.add(this.getConfigOptions());<br/>\n    +commandList.add(\"-Dstorm.home=\" + this.stormHomeDirectory);<br/>\n    +commandList.add(\"-Dstorm.log.dir=\" + stormLogDirectory);<br/>\n    +commandList.add(\"-Djava.library.path=\" + this<br/>\n    +.confValue(\"java.library.path\", extraJars, daemon));<br/>\n    +commandList.add(\"-Dstorm.conf.file=\" + this.configFile);<br/>\n    +commandList.add(\"-cp\");<br/>\n    +commandList.add(this.getClassPath(extraJars, daemon));<br/>\n    +commandList.addAll(jvmOptions);<br/>\n    +commandList.add(className);<br/>\n    +commandList.addAll(args);<br/>\n    +ProcessBuilder processBuilder = new ProcessBuilder(commandList);<br/>\n    +processBuilder.inheritIO();<br/>\n    +try {<br/>\n    +    Process process = processBuilder.start();<br/>\n    +    System.out.println(\"Executing the command: \");<br/>\n    +    String commandLine = StringUtils.join(commandList, \" \");<br/>\n    +    System.out.println(commandLine);<br/>\n    +    if (daemon == true) {\n    +Runtime.getRuntime().addShutdownHook(new ShutdownHookThread\n    +(process, commandLine));\n    +    }<br/>\n    +    System.out.println(\"Waiting for subprocess to finish\");<br/>\n    +    process.waitFor();<br/>\n    +    System.out.println(\"subprocess finished\");<br/>\n    +    System.out.println(\"Exit value from subprocess is :\" + process<br/>\n    +    .exitValue());<br/>\n    +} catch (Exception ex) {    +    System.out.println(\"Exception occured while starting process via \" +    +    \"processbuilder \" + ex.getMessage());    +}\n<p>    +    }<br/>\n    +<br/>\n    +    void jarCommand (List<String> args) {<br/>\n    +System.out.println(\"Called jarCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +if ((args == null) || (args.size() < 2)) {\n    +    System.out.println(\"Not enough arguments for storm jar command\");\n    +    System.out.println(\"Please pass a jar file location and the \" +\n    +    \"topology class for jar command\");\n    +    //TODO print usage for jar command here\n    +    System.exit(-1);\n    +}<br/>\n    +String jarJvmOptions = System.getenv(\"STORM_JAR_JVM_OPTS\");<br/>\n    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +if (jarJvmOptions != null) {\n    +    //TODO the python code to parse STORM_JAR_JVM_OPTIONS uses shlex\n    +    // .split to get the different jvm options for the jar. For now\n    +    // keeping it simple and splitting on space. Need to be in synch\n    +    // with python. Not sure though if we really need to use a\n    +    // lexical parser\n    +    jvmOptions.addAll(Arrays.asList(jarJvmOptions.split(\" \")));\n    +}<br/>\n    +jvmOptions.add(\"-Dstorm.jar=\" + args.get(0));<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(args.get(0));<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(args.get(1), \"-client\", jvmOptions,<br/>\n    +extraPaths, args.subList(2, args.size()), false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void killCommand (List<String> args) {<br/>\n    +System.out.println(\"Called killCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +if ((args == null) || (args.size() < 1)) </p>\n{\n    +    System.out.println(\"Not enough arguments for storm kill command\");\n    +    //TODO print usage for kill command here\n    +    System.exit(2);\n    +}\n<p>    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(\"backtype.storm.command.kill_topology\",<br/>\n    +\"-client\", new ArrayList<String>(), extraPaths, args, false,<br/>\n    +false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    //TODO implement shell command after understanding more about it<br/>\n    +    void shellCommand (List<String> args) {<br/>\n    +System.out.println(\"Called shellCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void nimbusCommand (List<String> args) {<br/>\n    +System.out.println(\"Called nimbusCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String nimbusOptions = this.confValue(\"nimbus.childopts\", extraPaths,<br/>\n    +true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(nimbusOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=nimbus.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +this.executeStormClass(this.NIMBUS_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"nimbus\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void uiCommand (List<String> args) {<br/>\n    +System.out.println(\"Called uiCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String uiOptions = this.confValue(\"ui.childopts\", extraPaths,<br/>\n    +true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(uiOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=ui.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +extraPaths.add(0, this.stormHomeDirectory);<br/>\n    +this.executeStormClass(this.UI_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"ui\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void logviewerCommand (List<String> args) {<br/>\n    +System.out.println(\"Called logviewerCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String logviewerOptions = this.confValue(\"logviewer.childopts\",<br/>\n    +extraPaths, true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(logviewerOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=logviewer.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +extraPaths.add(0, this.stormHomeDirectory);<br/>\n    +this.executeStormClass(this.LOGVIEWER_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"logviewer\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void drpcCommand (List<String> args) {<br/>\n    +System.out.println(\"Called drpcCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String drpcOptions = this.confValue(\"drpc.childopts\", extraPaths,<br/>\n    +true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(drpcOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=drpc.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +this.executeStormClass(this.DRPC_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"drpc\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void supervisorCommand (List<String> args) {<br/>\n    +System.out.println(\"Called supervisorCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String supervisorOptions = this.confValue(\"supervisor.childopts\",<br/>\n    +extraPaths,<br/>\n    +true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(supervisorOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=supervisor.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +this.executeStormClass(this.SUPERVISOR_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"supervisor\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void localconfvalueCommand (List<String> args) {<br/>\n    +System.out.println(\"Called localconfvalueCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +if ((args == null) || (args.size() == 0)) {\n    +    System.out.println(\"Not enough arguments for localconfvalue \" +\n    +    \"command\");\n    +    System.out.println(\"Please pass the name of the config value you \" +\n    +    \"want to be printed\");\n    +    //TODO print command help for localconfvalue command\n    +    System.exit(2);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +System.out.println(args.get(0) + \": \" + this.confValue(args.get(0),<br/>\n    +extraPaths,<br/>\n    +true));<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void remoteconfvalueCommand (List<String> args) {<br/>\n    +System.out.println(\"Called remoteconfvalueCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +if ((args == null) || (args.size() == 0)) </p>\n{\n    +    System.out.println(\"Not enough arguments for remoteconfvalue \" +\n    +    \"command\");\n    +    System.out.println(\"Please pass the name of the config value you \" +\n    +    \"want to be printed\");\n    +    //TODO print command help for remoteconfvalue command\n    +    System.exit(2);\n    +}\n<p>    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +System.out.println(args.get(0) + \": \" + this.confValue(args.get(0),<br/>\n    +extraPaths,<br/>\n    +true));<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void replCommand (List<String> args) {<br/>\n    +System.out.println(\"Called replCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +this.executeStormClass(this.REPL_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, new ArrayList<String>(),<br/>\n    +false, true, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void classpathCommand (List<String> args) {<br/>\n    +System.out.println(\"Called classpathCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +System.out.println(this.getClassPath(new ArrayList<String>(), true));<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void activateCommand (List<String> args) {<br/>\n    +System.out.println(\"Called activateCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +if ((args == null) || (args.size() < 1)) {\n    +    System.out.println(\"Not enough arguments for activate command\");\n    +    System.out.println(\"Please pass the topology name to activate\");\n    +    //TODO print usage for activate command here\n    +    System.exit(2);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(this.ACTIVATE_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, args, false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void deactivateCommand (List<String> args) {<br/>\n    +System.out.println(\"Called deactivateCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +if ((args == null) || (args.size() < 1)) </p>\n{\n    +    System.out.println(\"Not enough arguments for deactivate command\");\n    +    System.out.println(\"Please pass the topology name to deactivate\");\n    +    //TODO print usage for deactivate command here\n    +    System.exit(2);\n    +}\n<p>    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(this.DEACTIVATE_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, args, false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void rebalanceCommand (List<String> args) {<br/>\n    +System.out.println(\"Called rebalanceCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +if ((args == null) || (args.size() < 1)) {\n    +    System.out.println(\"Not enough arguments for rebalance command\");\n    +    System.out.println(\"Please pass the topology name to rebalance\");\n    +    //TODO print usage for rebalance command here\n    +    System.exit(2);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(this.REBALANCE_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, args, false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void helpCommand (List<String> args) {<br/>\n    +System.out.println(\"Called helpCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +if ((args == null) || (args.size() == 0)) </p>\n{\n    +    this.printUsage();\n    +}\n<p> else {<br/>\n    +    if ((!this.COMMANDS.contains(args.get(0)))) </p>\n{\n    +System.out.println(args.get(0) + \" is not a valid command\");\n    +    }\n<p> else </p>\n{\n    +//TODO print indivudual commands help here\n    +System.out.println(\"Print command specific help here\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void listCommand (List<String> args) {<br/>\n    +System.out.println(\"Called listCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(this.LIST_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, args, false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void devzookeeperCommand (List<String> args) {<br/>\n    +System.out.println(\"Called devzookeeperCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void versionCommand (List<String> args) {<br/>\n    +System.out.println(\"Called versionCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void monitorCommand (List<String> args) {<br/>\n    +System.out.println(\"Called monitorCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void uploadcredentialsCommand (List<String> args) {<br/>\n    +System.out.println(\"Called uploadcredentialsCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void geterrorsCommand (List<String> args) {<br/>\n    +System.out.println(\"Called geterrorsCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    String getLog4jConfigDirectory () {<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String log4jDirectory = this.confValue(\"storm.logback.conf.dir\",<br/>\n    +extraPaths, true);<br/>\n    +if ((log4jDirectory == null) || (\"\".equals(log4jDirectory)) ||<br/>\n    +(\"nil\".equals(log4jDirectory))) </p>\n{\n    +    log4jDirectory = this.stormLog4jConfDirectory;\n    +}\n<p>    +return log4jDirectory;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void printUsage () </p>\n{\n    +String commands = StringUtils.join(this.COMMANDS, \"\\n\\t\");\n    +System.out.println(\"Commands:\\n\\t\" + commands);\n    +System.out.println(\"\\nHelp: \\n\\thelp \\n\\thelp <command>\\n\");\n    +System.out.println(\"Documentation for the storm client can be found\" +\n    +\" at \"  +\n    +\"http://storm.incubator.apache\" +\n    +\".org/documentation/Command-line-client.html\\n\");\n    +System.out.println(\"Configs can be overridden using one or more -c \" +\n    +\"flags, e.g. \" +\n    +\"\\\"storm list -c nimbus.host=nimbus.mycompany.com\\\"\\n\");\n    +    }\n<p>    +<br/>\n    +    private void executeHelpCommand () </p>\n{\n    +System.out.println(\"Print storm help here\");\n    +    }\n<p>    +<br/>\n    +}<br/>\n    +<br/>\n    +class WindowsStormCommandExecutor extends StormCommandExecutor {<br/>\n    +<br/>\n    +    WindowsStormCommandExecutor () </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    void initialize () </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    void execute (String[] args) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    If run on Windows ,do nothing but  return ？ </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612574419/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583169","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583169","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583169,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxNjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T15:12:20Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>You seems not handle heartbeat tuple from multilang bolt process.<br/>\nPlease refer <a href=\"http://storm.apache.org/documentation/Multilang-protocol.html\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://storm.apache.org/documentation/Multilang-protocol.html</a> to how to handle heartbeat.<br/>\nstorm-multilang supports it, and AFAIK some 3rd party libraries support it.</p>\n\n<p>Here's related log from jstack. It calls ShellBolt.die() because of heartbeat timeout.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"><span class=\"code-object\">Thread</span> 3735: (state = IN_NATIVE)\n - java.io.FileInputStream.readBytes(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.io.FileInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=4, line=255 (Compiled frame)\n - java.io.BufferedInputStream.read1(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=39, line=284 (Compiled frame)\n - java.io.BufferedInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=49, line=345 (Compiled frame)\n - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)\n - sun.nio.cs.StreamDecoder.implRead(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=112, line=326 (Compiled frame)\n - sun.nio.cs.StreamDecoder.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=180, line=178 (Compiled frame)\n - java.io.InputStreamReader.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=7, line=184 (Compiled frame)\n - java.io.Reader.read(<span class=\"code-object\">char</span>[]) @bci=5, line=140 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, <span class=\"code-object\">char</span>[]) @bci=8, line=2001 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer) @bci=7, line=1980 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer) @bci=2, line=1957 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset) @bci=15, line=1907 (Interpreted frame)\n - org.apache.commons.io.IOUtils.toString(java.io.InputStream, java.nio.charset.Charset) @bci=11, line=778 (Interpreted frame)\n - org.apache.commons.io.IOUtils.toString(java.io.InputStream) @bci=4, line=759 (Interpreted frame)\n - backtype.storm.utils.ShellProcess.getErrorsString() @bci=11, line=138 (Interpreted frame)\n - backtype.storm.utils.ShellProcess.getProcessTerminationInfoString() @bci=19, line=180 (Interpreted frame)\n - backtype.storm.task.ShellBolt.die(java.lang.Throwable) @bci=21, line=280 (Interpreted frame)\n - backtype.storm.task.ShellBolt.access$400(backtype.storm.task.ShellBolt, java.lang.Throwable) @bci=2, line=69 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run() @bci=81, line=305 (Compiled frame)\n - java.util.concurrent.Executors$RunnableAdapter.call() @bci=4, line=511 (Compiled frame)\n - java.util.concurrent.FutureTask.runAndReset() @bci=47, line=308 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) @bci=1, line=180 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run() @bci=37, line=294 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n</pre>\n</div></div>\n\n<p>And here's related log from worker log.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">2015-08-03T16:01:25.762+0200 b.s.t.ShellBolt [ERROR] Halting process: ShellBolt died.\njava.lang.RuntimeException: subprocess heartbeat timeout\n\tat backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run(ShellBolt.java:305) [storm-core-0.9.5.jar:0.9.5]\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_45]\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_45]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_45]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_45]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]\n\tat java.lang.<span class=\"code-object\">Thread</span>.run(<span class=\"code-object\">Thread</span>.java:745) [na:1.8.0_45]\n</pre>\n</div></div>\n\n<p>In other words, topology is not frozen, but workers were suicided themselves cause of heartbeat timeout.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583169/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583176","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583176","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583176,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxNzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T15:28:23Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=alexsobrino\">alexsobrino</a>:</i>\n<p>Hi <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a>,</p>\n\n<p>We're using <a href=\"https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py</a> and it handles heartbeat tuples. In fact, we're able to run the topology for hours sometimes. I don't believe it's a heartbeat problem, otherwise it'd be reproduced every time we deploy the topology.</p>\n\n<p>I think that heartbeat problem was caused by the <tt>kill -SIGABRT</tt> to the python process. If we don't execute the <tt>kill</tt>, that info is not present in the logs.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583176/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612574423","html_url":"https://github.com/apache/storm/issues/4742#issuecomment-2612574423","issue_url":"https://api.github.com/repos/apache/storm/issues/4742","id":2612574423,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzQ0MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T16:52:26Z","updated_at":"2025-01-24T13:49:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user priyank5485 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/662#discussion_r36324914\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/662#discussion_r36324914</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/utils/StormCommandExecutor.java &#8212;<br/>\n    @@ -0,0 +1,785 @@<br/>\n    +package backtype.storm.utils;<br/>\n    +<br/>\n    +import java.io.BufferedReader;<br/>\n    +import java.io.File;<br/>\n    +import java.io.InputStream;<br/>\n    +import java.io.InputStreamReader;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.lang.reflect.Method;<br/>\n    +import java.nio.charset.StandardCharsets;<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +import clojure.lang.IFn;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.commons.lang.SystemUtils;<br/>\n    +<br/>\n    +/**<br/>\n    + * Created by pshah on 7/17/15.<br/>\n    + */<br/>\n    +abstract class StormCommandExecutor {<br/>\n    +    final String NIMBUS_CLASS = \"backtype.storm.daemon.nimbus\";<br/>\n    +    final String SUPERVISOR_CLASS = \"backtype.storm.daemon.supervisor\";<br/>\n    +    final String UI_CLASS = \"backtype.storm.ui.core\";<br/>\n    +    final String LOGVIEWER_CLASS = \"backtype.storm.daemon.logviewer\";<br/>\n    +    final String DRPC_CLASS = \"backtype.storm.daemon.drpc\";<br/>\n    +    final String REPL_CLASS = \"clojure.main\";<br/>\n    +    final String ACTIVATE_CLASS = \"backtype.storm.command.activate\";<br/>\n    +    final String DEACTIVATE_CLASS = \"backtype.storm.command.deactivate\";<br/>\n    +    final String REBALANCE_CLASS = \"backtype.storm.command.rebalance\";<br/>\n    +    final String LIST_CLASS = \"backtype.storm.command.list\";<br/>\n    +    String stormHomeDirectory;<br/>\n    +    String userConfDirectory;<br/>\n    +    String stormConfDirectory;<br/>\n    +    String clusterConfDirectory;<br/>\n    +    String stormLibDirectory;<br/>\n    +    String stormBinDirectory;<br/>\n    +    String stormLog4jConfDirectory;<br/>\n    +    String configFile = \"\";<br/>\n    +    String javaCommand;<br/>\n    +    List<String> configOptions = new ArrayList<String>();<br/>\n    +    String stormExternalClasspath;<br/>\n    +    String stormExternalClasspathDaemon;<br/>\n    +    String fileSeparator;<br/>\n    +    final List<String> COMMANDS = Arrays.asList(\"jar\", \"kill\", \"shell\",<br/>\n    +    \"nimbus\", \"ui\", \"logviewer\", \"drpc\", \"supervisor\",<br/>\n    +    \"localconfvalue\",  \"remoteconfvalue\", \"repl\", \"classpath\",<br/>\n    +    \"activate\", \"deactivate\", \"rebalance\", \"help\",  \"list\",<br/>\n    +    \"dev-zookeeper\", \"version\", \"monitor\", \"upload-credentials\",<br/>\n    +    \"get-errors\");<br/>\n    +<br/>\n    +    public static void main (String[] args) {<br/>\n    +for (String arg : args) </p>\n{\n    +    System.out.println(\"Argument ++ is \" + arg);\n    +}\n<p>    +StormCommandExecutor stormCommandExecutor;<br/>\n    +if (System.getProperty(\"os.name\").startsWith(\"Windows\")) </p>\n{\n    +    stormCommandExecutor = new WindowsStormCommandExecutor();\n    +}\n<p> else </p>\n{\n    +    stormCommandExecutor = new UnixStormCommandExecutor();\n    +}\n<p>    +stormCommandExecutor.initialize();<br/>\n    +stormCommandExecutor.execute(args);<br/>\n    +    }<br/>\n    +<br/>\n    +    StormCommandExecutor () </p>\n{\n    +\n    +    }<br/>\n    +<br/>\n    +    abstract void initialize ();<br/>\n    +<br/>\n    +    abstract void execute (String[] args);<br/>\n    +<br/>\n    +    void callMethod (String command, List<String> args) {<br/>\n    +Class implementation = this.getClass();<br/>\n    +String methodName = command.replace(\"-\", \"\") + \"Command\";<br/>\n    +try {\n    +    Method method = implementation.getDeclaredMethod(methodName, List\n    +    .class);\n    +    method.invoke(this, args);\n    +} catch (NoSuchMethodException ex) {\n    +    System.out.println(\"No such method exception occured while trying\" +\n    +    \" to run storm method \" + command);\n    +} catch (IllegalAccessException ex) {\n    +    System.out.println(\"Illegal access exception occured while trying\" +\n    +    \" to run storm method \" + command);\n    +} catch (IllegalArgumentException ex) {\n    +    System.out.println(\"Illegal argument exception occured while \" +\n    +    \"trying\" + \" to run storm method \" + command);\n    +} catch (InvocationTargetException ex) {\n    +    System.out.println(\"Invocation target exception occured while \" +\n    +    \"trying\" + \" to run storm method \" + command);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +class UnixStormCommandExecutor extends StormCommandExecutor {<br/>\n    +<br/>\n    +    UnixStormCommandExecutor () {    +    +    }\n<p>    +<br/>\n    +    void initialize () {<br/>\n    +Collections.sort(this.COMMANDS);<br/>\n    +this.fileSeparator = System .getProperty (\"file.separator\");<br/>\n    +this.stormHomeDirectory = System.getenv(\"STORM_BASE_DIR\");<br/>\n    +this.userConfDirectory = System.getProperty(\"user.home\") +<br/>\n    +this.fileSeparator + \"\" +<br/>\n    +\".storm\";<br/>\n    +this.stormConfDirectory = System.getenv(\"STORM_CONF_DIR\");<br/>\n    +this.clusterConfDirectory = this.stormConfDirectory == null ?  (this<br/>\n    +.stormHomeDirectory + this.fileSeparator + \"conf\") : this<br/>\n    +.stormConfDirectory;<br/>\n    +File f = new File(this.userConfDirectory + this.fileSeparator +<br/>\n    +\"storm.yaml\");<br/>\n    +if (!f.isFile()) </p>\n{\n    +    this.userConfDirectory = this.clusterConfDirectory;\n    +}\n<p>    +this.stormLibDirectory = this.stormHomeDirectory + this.fileSeparator +<br/>\n    +\"lib\";<br/>\n    +this.stormBinDirectory = this.stormHomeDirectory + this.fileSeparator +<br/>\n    +\"bin\";<br/>\n    +this.stormLog4jConfDirectory = this.stormHomeDirectory +<br/>\n    +this.fileSeparator + \"log4j2\";<br/>\n    +if (System.getenv(\"JAVA_HOME\") != null) {<br/>\n    +    this.javaCommand = System.getenv(\"JAVA_HOME\") + this.fileSeparator +<br/>\n    +    \"bin\" + this.fileSeparator + \"java\";<br/>\n    +    if (!(new File(this.javaCommand).exists())) </p>\n{\n    +System.out.println(\"ERROR:  JAVA_HOME is invalid.  Could not \" +\n    +\"find \" + this.javaCommand);\n    +System.exit(1);\n    +    }\n<p>    +} else </p>\n{\n    +    this.javaCommand = \"java\";\n    +}\n<p>    +this.stormExternalClasspath = System.getenv(\"STORM_EXT_CLASSPATH\");<br/>\n    +this.stormExternalClasspathDaemon = System.getenv<br/>\n    +(\"STORM_EXT_CLASSPATH_DAEMON\");<br/>\n    +if (!(new File(this.stormLibDirectory).exists())) </p>\n{\n    +    System.out.println(\"******************************************\");\n    +    System.out.println(\"The storm client can only be run from within \" +\n    +    \"a release. \" + \"You appear to be trying to run the client\" +\n    +    \" from a checkout of Storm's source code.\");\n    +    System.out.println(\"You can download a Storm release at \" +\n    +    \"http://storm-project.net/downloads.html\");\n    +    System.out.println(\"******************************************\");\n    +    System.exit(1);\n    +}\n<p>    +//System.getProperties().list(System.out);<br/>\n    +    }<br/>\n    +<br/>\n    +    void execute (String[] args) {<br/>\n    +if (args.length == 0) </p>\n{\n    +    this.printUsage();\n    +    System.exit(-1);\n    +}\n<p>    +List<String> commandArgs = new ArrayList<String>();<br/>\n    +for (int i = 0; i < args.length; ++i) {<br/>\n    +    if (args<span class=\"error\">&#91;i&#93;</span> == \"-c\") </p>\n{\n    +this.configOptions.add(args[++i]);\n    +    }\n<p> else if (args<span class=\"error\">&#91;i&#93;</span> == \"--config\") </p>\n{\n    +this.configFile = args[++i];\n    +    }\n<p> else </p>\n{\n    +commandArgs.add(args[i]);\n    +    }\n<p>    +}<br/>\n    +if ((commandArgs.size() == 0)  || (!this.COMMANDS.contains<br/>\n    +(commandArgs.get(0)))) </p>\n{\n    +    System.out.println(\"Unknown command: [storm \" + StringUtils.join\n    +    (args, \" \") +  \"]\");\n    +    this.printUsage();\n    +    System.exit(254);\n    +\n    +}\n<p>    +this.callMethod(commandArgs.get(0), commandArgs.subList(1,<br/>\n    +commandArgs.size()));<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    String getConfigOptions() </p>\n{\n    +String configOptions = \"-Dstorm.options=\";\n    +//TODO  - do urlencode here. python does quote_plus to each configoption\n    +return configOptions + StringUtils.join(this.configOptions, ',');\n    +\n    +    }\n<p>    +<br/>\n    +    List<String> getJarsFull (String directory) {<br/>\n    +List<String> fullJarFiles = new ArrayList<String>();<br/>\n    +File file = new File(directory);<br/>\n    +File[] files = file.listFiles();<br/>\n    +if (files != null) {<br/>\n    +    for (File f : files) {<br/>\n    +if (f.getName().endsWith(\".jar\")) </p>\n{\n    +    fullJarFiles.add(f.getPath());\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return fullJarFiles;<br/>\n    +    }<br/>\n    +<br/>\n    +    String getClassPath (List<String> extraJars, boolean daemon) {<br/>\n    +List<String> classPaths = this.getJarsFull(this.stormHomeDirectory);<br/>\n    +classPaths.addAll(this.getJarsFull(this.stormLibDirectory));<br/>\n    +classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this<br/>\n    +.fileSeparator + \"extlib\"));<br/>\n    +if (daemon == true) </p>\n{\n    +    classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this\n    +    .fileSeparator + \"extlib-daemon\"));\n    +}\n<p>    +if (this.stormExternalClasspath != null) </p>\n{\n    +    classPaths.add(this.stormExternalClasspath);\n    +}\n<p>    +if (this.stormExternalClasspathDaemon != null) </p>\n{\n    +    classPaths.add(this.stormExternalClasspathDaemon);\n    +}\n<p>    +classPaths.addAll(extraJars);<br/>\n    +return StringUtils.join(classPaths, System.getProperty(\"path\" +<br/>\n    +\".separator\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    String confValue (String name, List<String> extraPaths, boolean daemon) {<br/>\n    +// The original code from python started a process that started a jvm<br/>\n    +// with backtype.storm.command.config_value main method that would<br/>\n    +// read the conf value and print it out to an output stream. python<br/>\n    +// tapped on to the output stream of that subprocess and returned the<br/>\n    +// confvalue for the name. Because the pythong code has been shipped<br/>\n    +// to java now it should not spawn a new process which is a jvm since<br/>\n    +// we are already in jvm. Instead it should just be doing as the code<br/>\n    +// commeneted below.<br/>\n    +// However looking at the pythong code it was<br/>\n    +// starting a jvm with -cp argument that had classpaths which might<br/>\n    +// not be available to this java process. Hence there is a chance<br/>\n    +// that the below code might break existing scripts. As a result I<br/>\n    +// have decided to still spawn a new process from java just like<br/>\n    +// python with similar classpaths being constructed for the jvm<br/>\n    +// execution<br/>\n    +/*IFn fn = Utils.loadClojureFn(\"backtype.storm.config\",<br/>\n    +\"read-storm-config\");<br/>\n    +Object o = fn.invoke();<br/>\n    +return ((Map) o).get(name).toString();*/<br/>\n    +String confValue = \"\";<br/>\n    +ProcessBuilder processBuilder = new ProcessBuilder(this.javaCommand,<br/>\n    +\"-client\", this.getConfigOptions(), \"-Dstorm.conf.file=\" +<br/>\n    +this.configFile, \"-cp\", this.getClassPath(extraPaths, daemon),<br/>\n    +\"backtype.storm.command.config_value\", name);<br/>\n    +BufferedReader br;<br/>\n    +try {<br/>\n    +    Process process = processBuilder.start();<br/>\n    +    br = new BufferedReader(new InputStreamReader(process<br/>\n    +    .getInputStream(), StandardCharsets.UTF_8));<br/>\n    +    process.waitFor();<br/>\n    +    String line;<br/>\n    +    while ((line = br.readLine()) != null) {<br/>\n    +String[] tokens = line.split(\" \");<br/>\n    +if (\"VALUE:\".equals(tokens<span class=\"error\">&#91;0&#93;</span>)) </p>\n{\n    +    confValue = StringUtils.join(Arrays.copyOfRange(tokens, 1,\n    +    tokens.length), \" \");\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    br.close();<br/>\n    +} catch (Exception ex) </p>\n{\n    +    System.out.println(\"Exception occured while starting process via \" +\n    +    \"processbuilder \" + ex.getMessage());\n    +}<br/>\n    +return confValue;<br/>\n    +    }<br/>\n    +<br/>\n    +    void executeStormClass (String className, String jvmType, List<String><br/>\n    +    jvmOptions, List<String> extraJars, List<String> args, boolean<br/>\n    +    fork, boolean daemon, String daemonName) {<br/>\n    +List<String> extraPaths = new ArrayList<>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String stormLogDirectory = this.confValue(\"storm.log.dir\",<br/>\n    +extraPaths, daemon);<br/>\n    +if ((stormLogDirectory == null) || (\"\".equals(stormLogDirectory)) ||<br/>\n    +(\"nil\".equals(stormLogDirectory))) {\n    +    stormLogDirectory = this.stormHomeDirectory + this.fileSeparator\n    +    + \"logs\";\n    +}<br/>\n    +List<String> commandList = new ArrayList<String>();<br/>\n    +commandList.add(this.javaCommand);<br/>\n    +commandList.add(jvmType);<br/>\n    +commandList.add(\"-Ddaemon.name=\" + daemonName);<br/>\n    +commandList.add(this.getConfigOptions());<br/>\n    +commandList.add(\"-Dstorm.home=\" + this.stormHomeDirectory);<br/>\n    +commandList.add(\"-Dstorm.log.dir=\" + stormLogDirectory);<br/>\n    +commandList.add(\"-Djava.library.path=\" + this<br/>\n    +.confValue(\"java.library.path\", extraJars, daemon));<br/>\n    +commandList.add(\"-Dstorm.conf.file=\" + this.configFile);<br/>\n    +commandList.add(\"-cp\");<br/>\n    +commandList.add(this.getClassPath(extraJars, daemon));<br/>\n    +commandList.addAll(jvmOptions);<br/>\n    +commandList.add(className);<br/>\n    +commandList.addAll(args);<br/>\n    +ProcessBuilder processBuilder = new ProcessBuilder(commandList);<br/>\n    +processBuilder.inheritIO();<br/>\n    +try {<br/>\n    +    Process process = processBuilder.start();<br/>\n    +    System.out.println(\"Executing the command: \");<br/>\n    +    String commandLine = StringUtils.join(commandList, \" \");<br/>\n    +    System.out.println(commandLine);<br/>\n    +    if (daemon == true) {\n    +Runtime.getRuntime().addShutdownHook(new ShutdownHookThread\n    +(process, commandLine));\n    +    }<br/>\n    +    System.out.println(\"Waiting for subprocess to finish\");<br/>\n    +    process.waitFor();<br/>\n    +    System.out.println(\"subprocess finished\");<br/>\n    +    System.out.println(\"Exit value from subprocess is :\" + process<br/>\n    +    .exitValue());<br/>\n    +} catch (Exception ex) {    +    System.out.println(\"Exception occured while starting process via \" +    +    \"processbuilder \" + ex.getMessage());    +}\n<p>    +    }<br/>\n    +<br/>\n    +    void jarCommand (List<String> args) {<br/>\n    +System.out.println(\"Called jarCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +if ((args == null) || (args.size() < 2)) {\n    +    System.out.println(\"Not enough arguments for storm jar command\");\n    +    System.out.println(\"Please pass a jar file location and the \" +\n    +    \"topology class for jar command\");\n    +    //TODO print usage for jar command here\n    +    System.exit(-1);\n    +}<br/>\n    +String jarJvmOptions = System.getenv(\"STORM_JAR_JVM_OPTS\");<br/>\n    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +if (jarJvmOptions != null) {\n    +    //TODO the python code to parse STORM_JAR_JVM_OPTIONS uses shlex\n    +    // .split to get the different jvm options for the jar. For now\n    +    // keeping it simple and splitting on space. Need to be in synch\n    +    // with python. Not sure though if we really need to use a\n    +    // lexical parser\n    +    jvmOptions.addAll(Arrays.asList(jarJvmOptions.split(\" \")));\n    +}<br/>\n    +jvmOptions.add(\"-Dstorm.jar=\" + args.get(0));<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(args.get(0));<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(args.get(1), \"-client\", jvmOptions,<br/>\n    +extraPaths, args.subList(2, args.size()), false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void killCommand (List<String> args) {<br/>\n    +System.out.println(\"Called killCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +if ((args == null) || (args.size() < 1)) </p>\n{\n    +    System.out.println(\"Not enough arguments for storm kill command\");\n    +    //TODO print usage for kill command here\n    +    System.exit(2);\n    +}\n<p>    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(\"backtype.storm.command.kill_topology\",<br/>\n    +\"-client\", new ArrayList<String>(), extraPaths, args, false,<br/>\n    +false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    //TODO implement shell command after understanding more about it<br/>\n    +    void shellCommand (List<String> args) {<br/>\n    +System.out.println(\"Called shellCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void nimbusCommand (List<String> args) {<br/>\n    +System.out.println(\"Called nimbusCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String nimbusOptions = this.confValue(\"nimbus.childopts\", extraPaths,<br/>\n    +true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(nimbusOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=nimbus.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +this.executeStormClass(this.NIMBUS_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"nimbus\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void uiCommand (List<String> args) {<br/>\n    +System.out.println(\"Called uiCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String uiOptions = this.confValue(\"ui.childopts\", extraPaths,<br/>\n    +true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(uiOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=ui.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +extraPaths.add(0, this.stormHomeDirectory);<br/>\n    +this.executeStormClass(this.UI_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"ui\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void logviewerCommand (List<String> args) {<br/>\n    +System.out.println(\"Called logviewerCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String logviewerOptions = this.confValue(\"logviewer.childopts\",<br/>\n    +extraPaths, true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(logviewerOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=logviewer.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +extraPaths.add(0, this.stormHomeDirectory);<br/>\n    +this.executeStormClass(this.LOGVIEWER_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"logviewer\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void drpcCommand (List<String> args) {<br/>\n    +System.out.println(\"Called drpcCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String drpcOptions = this.confValue(\"drpc.childopts\", extraPaths,<br/>\n    +true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(drpcOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=drpc.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +this.executeStormClass(this.DRPC_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"drpc\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void supervisorCommand (List<String> args) {<br/>\n    +System.out.println(\"Called supervisorCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +List<String> jvmOptions = new ArrayList<String>();<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String supervisorOptions = this.confValue(\"supervisor.childopts\",<br/>\n    +extraPaths,<br/>\n    +true);<br/>\n    +// below line is different from original python script storm.py where<br/>\n    +// it called parse_args method on nimbusOptions. Now we just call a<br/>\n    +// split with a space.  Hence this will have different behavior and<br/>\n    +// a buggy one if the nimbusOptions string in the config file has a<br/>\n    +// space. TODO need to fix this<br/>\n    +jvmOptions.addAll(Arrays.asList(supervisorOptions.split(\" \")));<br/>\n    +jvmOptions.add(\"-Dlogfile.name=supervisor.log\");<br/>\n    +jvmOptions.add(\"-Dlog4j.configurationFile=\" + this<br/>\n    +.getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +<br/>\n    +\".xml\");<br/>\n    +this.executeStormClass(this.SUPERVISOR_CLASS, \"-server\", jvmOptions,<br/>\n    +extraPaths, new ArrayList<String>(), false, true, \"supervisor\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void localconfvalueCommand (List<String> args) {<br/>\n    +System.out.println(\"Called localconfvalueCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +if ((args == null) || (args.size() == 0)) {\n    +    System.out.println(\"Not enough arguments for localconfvalue \" +\n    +    \"command\");\n    +    System.out.println(\"Please pass the name of the config value you \" +\n    +    \"want to be printed\");\n    +    //TODO print command help for localconfvalue command\n    +    System.exit(2);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +System.out.println(args.get(0) + \": \" + this.confValue(args.get(0),<br/>\n    +extraPaths,<br/>\n    +true));<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void remoteconfvalueCommand (List<String> args) {<br/>\n    +System.out.println(\"Called remoteconfvalueCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +if ((args == null) || (args.size() == 0)) </p>\n{\n    +    System.out.println(\"Not enough arguments for remoteconfvalue \" +\n    +    \"command\");\n    +    System.out.println(\"Please pass the name of the config value you \" +\n    +    \"want to be printed\");\n    +    //TODO print command help for remoteconfvalue command\n    +    System.exit(2);\n    +}\n<p>    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +System.out.println(args.get(0) + \": \" + this.confValue(args.get(0),<br/>\n    +extraPaths,<br/>\n    +true));<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void replCommand (List<String> args) {<br/>\n    +System.out.println(\"Called replCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +this.executeStormClass(this.REPL_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, new ArrayList<String>(),<br/>\n    +false, true, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void classpathCommand (List<String> args) {<br/>\n    +System.out.println(\"Called classpathCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +System.out.println(this.getClassPath(new ArrayList<String>(), true));<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void activateCommand (List<String> args) {<br/>\n    +System.out.println(\"Called activateCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +if ((args == null) || (args.size() < 1)) {\n    +    System.out.println(\"Not enough arguments for activate command\");\n    +    System.out.println(\"Please pass the topology name to activate\");\n    +    //TODO print usage for activate command here\n    +    System.exit(2);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(this.ACTIVATE_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, args, false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void deactivateCommand (List<String> args) {<br/>\n    +System.out.println(\"Called deactivateCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +if ((args == null) || (args.size() < 1)) </p>\n{\n    +    System.out.println(\"Not enough arguments for deactivate command\");\n    +    System.out.println(\"Please pass the topology name to deactivate\");\n    +    //TODO print usage for deactivate command here\n    +    System.exit(2);\n    +}\n<p>    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(this.DEACTIVATE_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, args, false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void rebalanceCommand (List<String> args) {<br/>\n    +System.out.println(\"Called rebalanceCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +if ((args == null) || (args.size() < 1)) {\n    +    System.out.println(\"Not enough arguments for rebalance command\");\n    +    System.out.println(\"Please pass the topology name to rebalance\");\n    +    //TODO print usage for rebalance command here\n    +    System.exit(2);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(this.REBALANCE_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, args, false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void helpCommand (List<String> args) {<br/>\n    +System.out.println(\"Called helpCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +if ((args == null) || (args.size() == 0)) </p>\n{\n    +    this.printUsage();\n    +}\n<p> else {<br/>\n    +    if ((!this.COMMANDS.contains(args.get(0)))) </p>\n{\n    +System.out.println(args.get(0) + \" is not a valid command\");\n    +    }\n<p> else </p>\n{\n    +//TODO print indivudual commands help here\n    +System.out.println(\"Print command specific help here\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void listCommand (List<String> args) {<br/>\n    +System.out.println(\"Called listCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.userConfDirectory);<br/>\n    +extraPaths.add(this.stormBinDirectory);<br/>\n    +this.executeStormClass(this.LIST_CLASS, \"-client\", new<br/>\n    +ArrayList<String>(), extraPaths, args, false, false, \"\");<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void devzookeeperCommand (List<String> args) {<br/>\n    +System.out.println(\"Called devzookeeperCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void versionCommand (List<String> args) {<br/>\n    +System.out.println(\"Called versionCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void monitorCommand (List<String> args) {<br/>\n    +System.out.println(\"Called monitorCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void uploadcredentialsCommand (List<String> args) {<br/>\n    +System.out.println(\"Called uploadcredentialsCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) </p>\n{\n    +    System.out.println(s);\n    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    void geterrorsCommand (List<String> args) {<br/>\n    +System.out.println(\"Called geterrorsCommand using reflection\");<br/>\n    +System.out.println(\"Arguments are : \");<br/>\n    +for (String s: args) {    +    System.out.println(s);    +}\n<p>    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +    String getLog4jConfigDirectory () {<br/>\n    +List<String> extraPaths = new ArrayList<String>();<br/>\n    +extraPaths.add(this.clusterConfDirectory);<br/>\n    +String log4jDirectory = this.confValue(\"storm.logback.conf.dir\",<br/>\n    +extraPaths, true);<br/>\n    +if ((log4jDirectory == null) || (\"\".equals(log4jDirectory)) ||<br/>\n    +(\"nil\".equals(log4jDirectory))) </p>\n{\n    +    log4jDirectory = this.stormLog4jConfDirectory;\n    +}\n<p>    +return log4jDirectory;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void printUsage () </p>\n{\n    +String commands = StringUtils.join(this.COMMANDS, \"\\n\\t\");\n    +System.out.println(\"Commands:\\n\\t\" + commands);\n    +System.out.println(\"\\nHelp: \\n\\thelp \\n\\thelp <command>\\n\");\n    +System.out.println(\"Documentation for the storm client can be found\" +\n    +\" at \"  +\n    +\"http://storm.incubator.apache\" +\n    +\".org/documentation/Command-line-client.html\\n\");\n    +System.out.println(\"Configs can be overridden using one or more -c \" +\n    +\"flags, e.g. \" +\n    +\"\\\"storm list -c nimbus.host=nimbus.mycompany.com\\\"\\n\");\n    +    }\n<p>    +<br/>\n    +    private void executeHelpCommand () </p>\n{\n    +System.out.println(\"Print storm help here\");\n    +    }\n<p>    +<br/>\n    +}<br/>\n    +<br/>\n    +class WindowsStormCommandExecutor extends StormCommandExecutor {<br/>\n    +<br/>\n    +    WindowsStormCommandExecutor () </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    void initialize () </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    void execute (String[] args) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @caofangkun thanks for checking this out. The code is still not complete. I need to put the windows implementation as well. Most of the code in the UnixStormCommandExecutor will move to abstract base class so that WindowsStormCommandLineExecutor can reuse. It will only have code that is specific to windows.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612574423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/128131583","html_url":"https://github.com/apache/storm/pull/588#issuecomment-128131583","issue_url":"https://api.github.com/repos/apache/storm/issues/588","id":128131583,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODEzMTU4Mw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T20:01:41Z","updated_at":"2015-08-05T20:01:41Z","author_association":"CONTRIBUTOR","body":"+1 the change looks great to me.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/128131583/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612564655","html_url":"https://github.com/apache/storm/issues/4699#issuecomment-2612564655","issue_url":"https://api.github.com/repos/apache/storm/issues/4699","id":2612564655,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjQ2NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T20:01:42Z","updated_at":"2025-01-24T13:44:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/588#issuecomment-128131583\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/588#issuecomment-128131583</a></p>\n\n<p>    +1 the change looks great to me.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612564655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612564669","html_url":"https://github.com/apache/storm/issues/4699#issuecomment-2612564669","issue_url":"https://api.github.com/repos/apache/storm/issues/4699","id":2612564669,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjQ2Njk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T20:02:27Z","updated_at":"2025-01-24T13:44:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/588\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/588</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612564669/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612564675","html_url":"https://github.com/apache/storm/issues/4699#issuecomment-2612564675","issue_url":"https://api.github.com/repos/apache/storm/issues/4699","id":2612564675,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjQ2NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T20:06:24Z","updated_at":"2025-01-24T13:44:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612564675/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/128140442","html_url":"https://github.com/apache/storm/pull/644#issuecomment-128140442","issue_url":"https://api.github.com/repos/apache/storm/issues/644","id":128140442,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODE0MDQ0Mg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T20:35:36Z","updated_at":"2015-08-05T20:35:36Z","author_association":"CONTRIBUTOR","body":"I did a quick pass through the code and it looks OK, but I have not looked at it in great detail.  I am not very happy with the limitations on which rotation policy you can use, nor on the size limit.  I would rather be correct but slow by default in all cases, even if they set bad configs (> 1GB), and give them the power to make it fast but wrong if they know the risks and can deal with it.  Also a hard coded 1GB limit seems a little strange.  What if we have a 10GigE connection or even infiniband for HDFS and all of the data happens to be in memory.  We could in theory have processed the 1GB in less then a second, still painful but not the end of the world.\n\nWhy don't we want to support a time based rotation, that rotates at the end of a batch after the time has passed instead of in the middle of the batch?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/128140442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612560636","html_url":"https://github.com/apache/storm/issues/4677#issuecomment-2612560636","issue_url":"https://api.github.com/repos/apache/storm/issues/4677","id":2612560636,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjA2MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T20:35:37Z","updated_at":"2025-01-24T13:42:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/644#issuecomment-128140442\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/644#issuecomment-128140442</a></p>\n\n<p>    I did a quick pass through the code and it looks OK, but I have not looked at it in great detail.  I am not very happy with the limitations on which rotation policy you can use, nor on the size limit.  I would rather be correct but slow by default in all cases, even if they set bad configs (> 1GB), and give them the power to make it fast but wrong if they know the risks and can deal with it.  Also a hard coded 1GB limit seems a little strange.  What if we have a 10GigE connection or even infiniband for HDFS and all of the data happens to be in memory.  We could in theory have processed the 1GB in less then a second, still painful but not the end of the world.</p>\n\n<p>    Why don't we want to support a time based rotation, that rotates at the end of a batch after the time has passed instead of in the middle of the batch?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612560636/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612575688","html_url":"https://github.com/apache/storm/issues/4751#issuecomment-2612575688","issue_url":"https://api.github.com/repos/apache/storm/issues/4751","id":2612575688,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzU2ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T20:47:04Z","updated_at":"2025-01-24T13:49:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/615\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/615</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612575688/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612575692","html_url":"https://github.com/apache/storm/issues/4751#issuecomment-2612575692","issue_url":"https://api.github.com/repos/apache/storm/issues/4751","id":2612575692,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzU2OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T20:47:57Z","updated_at":"2025-01-24T13:49:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=caofangkun\" class=\"user-hover\" rel=\"caofangkun\">caofangkun</a>,</p>\n\n<p>Sorry it took me so long to merge this in.  I just got back from vacation and finally got a decent Internet connection again.  I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612575692/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/128147204","html_url":"https://github.com/apache/storm/pull/661#issuecomment-128147204","issue_url":"https://api.github.com/repos/apache/storm/issues/661","id":128147204,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODE0NzIwNA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T21:00:43Z","updated_at":"2015-08-05T21:00:43Z","author_association":"CONTRIBUTOR","body":"+1 it is better than it was before and the CI failure looks spurious.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/128147204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583942","html_url":"https://github.com/apache/storm/issues/4806#issuecomment-2612583942","issue_url":"https://api.github.com/repos/apache/storm/issues/4806","id":2612583942,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM5NDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T21:00:45Z","updated_at":"2025-01-24T13:53:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/661#issuecomment-128147204\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/661#issuecomment-128147204</a></p>\n\n<p>    +1 it is better than it was before and the CI failure looks spurious.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583946","html_url":"https://github.com/apache/storm/issues/4806#issuecomment-2612583946","issue_url":"https://api.github.com/repos/apache/storm/issues/4806","id":2612583946,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM5NDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T21:04:14Z","updated_at":"2025-01-24T13:53:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/661\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/661</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583946/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583949","html_url":"https://github.com/apache/storm/issues/4806#issuecomment-2612583949","issue_url":"https://api.github.com/repos/apache/storm/issues/4806","id":2612583949,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM5NDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T21:04:52Z","updated_at":"2025-01-24T13:53:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=snikhil5\" class=\"user-hover\" rel=\"snikhil5\">Nikhil Singh</a>,</p>\n\n<p>I merged this into master</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583949/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/128151202","html_url":"https://github.com/apache/storm/pull/663#issuecomment-128151202","issue_url":"https://api.github.com/repos/apache/storm/issues/663","id":128151202,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODE1MTIwMg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T21:14:30Z","updated_at":"2015-08-05T21:14:30Z","author_association":"CONTRIBUTOR","body":"@harshach I am getting the same thing as @HeartSaVioR Just loading the main page has over 20 404 errors returned, many of them are images, but also .css and .js files.  Bootstrap also is complaining that jquery is not loaded.  One of those things that returned a 404.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/128151202/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612580928","html_url":"https://github.com/apache/storm/issues/4788#issuecomment-2612580928","issue_url":"https://api.github.com/repos/apache/storm/issues/4788","id":2612580928,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODA5Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T21:14:31Z","updated_at":"2025-01-24T13:52:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/663#issuecomment-128151202\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/663#issuecomment-128151202</a></p>\n\n<p>    @harshach I am getting the same thing as @HeartSaVioR Just loading the main page has over 20 404 errors returned, many of them are images, but also .css and .js files.  Bootstrap also is complaining that jquery is not loaded.  One of those things that returned a 404.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612580928/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/128159999","html_url":"https://github.com/apache/storm/pull/657#issuecomment-128159999","issue_url":"https://api.github.com/repos/apache/storm/issues/657","id":128159999,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODE1OTk5OQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T21:52:17Z","updated_at":"2015-08-05T21:52:17Z","author_association":"CONTRIBUTOR","body":"The change looks good to me +1, but I want to give @knusbaum some time to follow up on his review too.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/128159999/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583407","html_url":"https://github.com/apache/storm/issues/4802#issuecomment-2612583407","issue_url":"https://api.github.com/repos/apache/storm/issues/4802","id":2612583407,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM0MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T21:52:18Z","updated_at":"2025-01-24T13:53:14Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/657#issuecomment-128159999\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/657#issuecomment-128159999</a></p>\n\n<p>    The change looks good to me +1, but I want to give @knusbaum some time to follow up on his review too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583407/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583185","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583185","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583185,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T22:08:46Z","updated_at":"2025-01-24T13:53:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>OK, then could you run jstack when topology seems frozen, without signal to python process?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583185/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/128171287","html_url":"https://github.com/apache/storm/pull/573#issuecomment-128171287","issue_url":"https://api.github.com/repos/apache/storm/issues/573","id":128171287,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODE3MTI4Nw==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T22:34:36Z","updated_at":"2015-08-05T22:34:36Z","author_association":"CONTRIBUTOR","body":"Maybe @harshach doesn't have time to review at the moment.\nI'll merge it right now.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/128171287/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612561991","html_url":"https://github.com/apache/storm/issues/4685#issuecomment-2612561991","issue_url":"https://api.github.com/repos/apache/storm/issues/4685","id":2612561991,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjE5OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T22:34:37Z","updated_at":"2025-01-24T13:43:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/573#issuecomment-128171287\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/573#issuecomment-128171287</a></p>\n\n<p>    Maybe @harshach doesn't have time to review at the moment.<br/>\n    I'll merge it right now.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612561991/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612561997","html_url":"https://github.com/apache/storm/issues/4685#issuecomment-2612561997","issue_url":"https://api.github.com/repos/apache/storm/issues/4685","id":2612561997,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjE5OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T22:59:02Z","updated_at":"2025-01-24T13:43:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/573\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/573</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612561997/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612561999","html_url":"https://github.com/apache/storm/issues/4685#issuecomment-2612561999","issue_url":"https://api.github.com/repos/apache/storm/issues/4685","id":2612561999,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjE5OTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-05T23:02:14Z","updated_at":"2025-01-24T13:43:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sweetest_sj\" class=\"user-hover\" rel=\"sweetest_sj\">Adrian Seungjin Lee</a> for the great work.<br/>\nI merged into master.</p>\n\n<p>As I stated, for covering more use cases we should add more things to this module.<br/>\nI'll file those things to JIRA. <br/>\nLet's collaborate to make storm-elasticsearch more general and powerful!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612561999/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612562006","html_url":"https://github.com/apache/storm/issues/4685#issuecomment-2612562006","issue_url":"https://api.github.com/repos/apache/storm/issues/4685","id":2612562006,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjIwMDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T01:27:33Z","updated_at":"2025-01-24T13:43:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sweetest_sj\">sweetest_sj</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a> <br/>\nThanks for your support, I'll be glad to work on improving this for sure <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612562006/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/128215489","html_url":"https://github.com/apache/storm/pull/658#issuecomment-128215489","issue_url":"https://api.github.com/repos/apache/storm/issues/658","id":128215489,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODIxNTQ4OQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T02:14:06Z","updated_at":"2015-08-06T02:14:06Z","author_association":"CONTRIBUTOR","body":"+1. Build failure is unrelated. I did test before merge.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/128215489/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583755","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583755","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583755,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T02:14:07Z","updated_at":"2025-01-24T13:53:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658#issuecomment-128215489\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658#issuecomment-128215489</a></p>\n\n<p>    +1. Build failure is unrelated. I did test before merge.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583755/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583757","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583757","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583757,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3NTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T02:14:53Z","updated_at":"2025-01-24T13:53:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/658\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/658</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583757/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583761","html_url":"https://github.com/apache/storm/issues/4804#issuecomment-2612583761","issue_url":"https://api.github.com/repos/apache/storm/issues/4804","id":2612583761,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODM3NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T02:19:04Z","updated_at":"2025-01-24T13:53:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jerrypeng\" class=\"user-hover\" rel=\"jerrypeng\">Boyang Jerry Peng</a>, I merged into master and 0.10.0 respectively.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583761/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612584299","html_url":"https://github.com/apache/storm/issues/4808#issuecomment-2612584299","issue_url":"https://api.github.com/repos/apache/storm/issues/4808","id":2612584299,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODQyOTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T03:23:09Z","updated_at":"2025-01-24T13:53:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=caofangkun\">caofangkun</a>:</i>\n<p>When I set STORM_TEST_TIMEOUT_MS larger , the UT passed.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">➜  storm git:(storm-970) export STORM_TEST_TIMEOUT_MS=100000 \n➜  storm git:(storm-970) dev-tools/test-ns.py backtype.storm.messaging-test\n...\n2397 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources\nRunning backtype.storm.messaging-test\nTests run: 2, Passed: 3, Failures: 0, Errors: 0\n...\n</pre>\n</div></div>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612584299/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/128266209","html_url":"https://github.com/apache/storm/pull/644#issuecomment-128266209","issue_url":"https://api.github.com/repos/apache/storm/issues/644","id":128266209,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODI2NjIwOQ==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T06:35:52Z","updated_at":"2015-08-06T06:35:52Z","author_association":"CONTRIBUTOR","body":"I was trying to put a safety net  so that the recovery would always work. The limitation on the timed rotation policy is also on similar lines that we don't know how much data would be written to the files before the timed rotation kicks in.\n\nSo,\n- For file size rotation, remove the restrictions on the file size and just log warnings.\n- For time based rotation, set a flag and do the actual rotation in `doCommit` as you suggested.\n- Add a note in the README about the risk that the recovery would fail if files cannot be recovered within timeout and hence should be kept to reasonable sizes (and time interval) or the message timeout should be increased.\n\nDoes it sound reasonable ? If we agree, will make the changes.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/128266209/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612560640","html_url":"https://github.com/apache/storm/issues/4677#issuecomment-2612560640","issue_url":"https://api.github.com/repos/apache/storm/issues/4677","id":2612560640,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjA2NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T06:35:54Z","updated_at":"2025-01-24T13:42:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/644#issuecomment-128266209\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/644#issuecomment-128266209</a></p>\n\n<p>    I was trying to put a safety net  so that the recovery would always work. The limitation on the timed rotation policy is also on similar lines that we don't know how much data would be written to the files before the timed rotation kicks in.</p>\n\n<p>    So,</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>For file size rotation, remove the restrictions on the file size and just log warnings.</li>\n\t<li>For time based rotation, set a flag and do the actual rotation in `doCommit` as you suggested.</li>\n\t<li>Add a note in the README about the risk that the recovery would fail if files cannot be recovered within timeout and hence should be kept to reasonable sizes (and time interval) or the message timeout should be increased.</li>\n</ul>\n\n\n<p>    Does it sound reasonable ? If we agree, will make the changes.</p>\n\n\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612560640/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583189","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583189","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583189,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxODk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T06:58:44Z","updated_at":"2025-01-24T13:53:08Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=alexsobrino\">alexsobrino</a>:</i>\n<p>Sure, no problem. I'll post it here ASAP. Thanks <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583193","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583193","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583193,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMxOTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-08-06T10:18:33Z","updated_at":"2025-01-24T13:53:08Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=alexsobrino\">alexsobrino</a>:</i>\n<p>Done. This is the result:</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">Attaching to process ID 7636, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.45-b02\nDeadlock Detection:\n\nNo deadlocks found.\n\n<span class=\"code-object\">Thread</span> 7761: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=100, line=1088 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7760: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(<span class=\"code-object\">long</span>) @bci=78, line=2078 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=124, line=1093 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7759: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.DelayQueue.take() @bci=28, line=211 (Interpreted frame)\n - java.util.concurrent.DelayQueue.take() @bci=1, line=70 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl.backgroundOperationsLoop() @bci=10, line=781 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl.access$400(org.apache.curator.framework.imps.CuratorFrameworkImpl) @bci=1, line=57 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl$4.call() @bci=4, line=275 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7758: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=442 (Interpreted frame)\n - org.apache.zookeeper.ClientCnxn$EventThread.run() @bci=9, line=494 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7757: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(<span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(<span class=\"code-object\">long</span>) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(<span class=\"code-object\">long</span>) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(<span class=\"code-object\">long</span>) @bci=37, line=86 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(<span class=\"code-object\">long</span>) @bci=30, line=97 (Compiled frame)\n - org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(<span class=\"code-object\">int</span>, java.util.List, java.util.LinkedList, org.apache.zookeeper.ClientCnxn) @bci=6, line=349 (Compiled frame)\n - org.apache.zookeeper.ClientCnxn$SendThread.run() @bci=604, line=1081 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7756: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=403 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager.processEvents() @bci=13, line=208 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager.access$000(org.apache.curator.framework.state.ConnectionStateManager) @bci=1, line=42 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager$1.call() @bci=4, line=110 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7755: (state = IN_NATIVE)\n - java.io.FileInputStream.readBytes(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.io.FileInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=4, line=255 (Compiled frame)\n - java.io.BufferedInputStream.read1(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=39, line=284 (Compiled frame)\n - java.io.BufferedInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=49, line=345 (Compiled frame)\n - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)\n - sun.nio.cs.StreamDecoder.implRead(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=112, line=326 (Compiled frame)\n - sun.nio.cs.StreamDecoder.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=180, line=178 (Compiled frame)\n - java.io.InputStreamReader.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=7, line=184 (Compiled frame)\n - java.io.Reader.read(<span class=\"code-object\">char</span>[]) @bci=5, line=140 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, <span class=\"code-object\">char</span>[]) @bci=8, line=2001 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer) @bci=7, line=1980 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer) @bci=2, line=1957 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset) @bci=15, line=1907 (Interpreted frame)\n - org.apache.commons.io.IOUtils.toString(java.io.InputStream, java.nio.charset.Charset) @bci=11, line=778 (Interpreted frame)\n - org.apache.commons.io.IOUtils.toString(java.io.InputStream) @bci=4, line=759 (Interpreted frame)\n - backtype.storm.utils.ShellProcess.getErrorsString() @bci=11, line=138 (Interpreted frame)\n - backtype.storm.utils.ShellProcess.getProcessTerminationInfoString() @bci=19, line=180 (Interpreted frame)\n - backtype.storm.task.ShellBolt.die(java.lang.Throwable) @bci=21, line=280 (Interpreted frame)\n - backtype.storm.task.ShellBolt.access$400(backtype.storm.task.ShellBolt, java.lang.Throwable) @bci=2, line=69 (Interpreted frame)\n - backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run() @bci=81, line=305 (Interpreted frame)\n - java.util.concurrent.Executors$RunnableAdapter.call() @bci=4, line=511 (Compiled frame)\n - java.util.concurrent.FutureTask.runAndReset() @bci=47, line=308 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) @bci=1, line=180 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run() @bci=37, line=294 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7754: (state = BLOCKED)\n - java.io.BufferedInputStream.available() @bci=0, line=409 (Compiled frame)\n - backtype.storm.utils.ShellProcess.logErrorStream() @bci=4, line=125 (Compiled frame)\n - backtype.storm.utils.ShellProcess.writeBoltMsg(backtype.storm.multilang.BoltMsg) @bci=11, line=108 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltWriterRunnable.run() @bci=108, line=361 (Compiled frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7753: (state = IN_NATIVE)\n - java.io.FileInputStream.readBytes(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.io.FileInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=4, line=255 (Compiled frame)\n - java.io.BufferedInputStream.read1(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=39, line=284 (Compiled frame)\n - java.io.BufferedInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=49, line=345 (Compiled frame)\n - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)\n - sun.nio.cs.StreamDecoder.implRead(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=112, line=326 (Compiled frame)\n - sun.nio.cs.StreamDecoder.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=180, line=178 (Compiled frame)\n - java.io.InputStreamReader.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=7, line=184 (Compiled frame)\n - java.io.BufferedReader.fill() @bci=145, line=161 (Compiled frame)\n - java.io.BufferedReader.readLine(<span class=\"code-object\">boolean</span>) @bci=44, line=324 (Compiled frame)\n - java.io.BufferedReader.readLine() @bci=2, line=389 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readString() @bci=12, line=179 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readMessage() @bci=1, line=166 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readShellMsg() @bci=1, line=100 (Compiled frame)\n - backtype.storm.utils.ShellProcess.readShellMsg() @bci=4, line=99 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltReaderRunnable.run() @bci=17, line=318 (Compiled frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7752: (state = IN_NATIVE)\n - java.io.FileInputStream.readBytes(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.io.FileInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=4, line=255 (Compiled frame)\n - java.io.BufferedInputStream.read1(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=39, line=284 (Compiled frame)\n - java.io.BufferedInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=49, line=345 (Compiled frame)\n - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)\n - sun.nio.cs.StreamDecoder.implRead(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=112, line=326 (Compiled frame)\n - sun.nio.cs.StreamDecoder.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=180, line=178 (Compiled frame)\n - java.io.InputStreamReader.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=7, line=184 (Compiled frame)\n - java.io.Reader.read(<span class=\"code-object\">char</span>[]) @bci=5, line=140 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, <span class=\"code-object\">char</span>[]) @bci=8, line=2001 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer) @bci=7, line=1980 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer) @bci=2, line=1957 (Interpreted frame)\n - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset) @bci=15, line=1907 (Interpreted frame)\n - org.apache.commons.io.IOUtils.toString(java.io.InputStream, java.nio.charset.Charset) @bci=11, line=778 (Interpreted frame)\n - org.apache.commons.io.IOUtils.toString(java.io.InputStream) @bci=4, line=759 (Interpreted frame)\n - backtype.storm.utils.ShellProcess.getErrorsString() @bci=11, line=138 (Interpreted frame)\n - backtype.storm.utils.ShellProcess.getProcessTerminationInfoString() @bci=19, line=180 (Interpreted frame)\n - backtype.storm.task.ShellBolt.die(java.lang.Throwable) @bci=21, line=280 (Interpreted frame)\n - backtype.storm.task.ShellBolt.access$400(backtype.storm.task.ShellBolt, java.lang.Throwable) @bci=2, line=69 (Interpreted frame)\n - backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run() @bci=81, line=305 (Interpreted frame)\n - java.util.concurrent.Executors$RunnableAdapter.call() @bci=4, line=511 (Compiled frame)\n - java.util.concurrent.FutureTask.runAndReset() @bci=47, line=308 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) @bci=1, line=180 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run() @bci=37, line=294 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7751: (state = BLOCKED)\n - java.io.BufferedInputStream.available() @bci=0, line=409 (Compiled frame)\n - backtype.storm.utils.ShellProcess.logErrorStream() @bci=4, line=125 (Compiled frame)\n - backtype.storm.utils.ShellProcess.writeBoltMsg(backtype.storm.multilang.BoltMsg) @bci=11, line=108 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltWriterRunnable.run() @bci=108, line=361 (Compiled frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7750: (state = IN_NATIVE)\n - java.io.FileInputStream.readBytes(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.io.FileInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=4, line=255 (Compiled frame)\n - java.io.BufferedInputStream.read1(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=39, line=284 (Compiled frame)\n - java.io.BufferedInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=49, line=345 (Compiled frame)\n - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)\n - sun.nio.cs.StreamDecoder.implRead(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=112, line=326 (Compiled frame)\n - sun.nio.cs.StreamDecoder.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=180, line=178 (Compiled frame)\n - java.io.InputStreamReader.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=7, line=184 (Compiled frame)\n - java.io.BufferedReader.fill() @bci=145, line=161 (Compiled frame)\n - java.io.BufferedReader.readLine(<span class=\"code-object\">boolean</span>) @bci=44, line=324 (Compiled frame)\n - java.io.BufferedReader.readLine() @bci=2, line=389 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readString() @bci=12, line=179 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readMessage() @bci=1, line=166 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readShellMsg() @bci=1, line=100 (Compiled frame)\n - backtype.storm.utils.ShellProcess.readShellMsg() @bci=4, line=99 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltReaderRunnable.run() @bci=17, line=318 (Compiled frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7749: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.DelayQueue.take() @bci=28, line=211 (Interpreted frame)\n - java.util.concurrent.DelayQueue.take() @bci=1, line=70 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl.backgroundOperationsLoop() @bci=10, line=781 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl.access$400(org.apache.curator.framework.imps.CuratorFrameworkImpl) @bci=1, line=57 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl$4.call() @bci=4, line=275 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7748: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=442 (Interpreted frame)\n - org.apache.zookeeper.ClientCnxn$EventThread.run() @bci=9, line=494 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7747: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(<span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(<span class=\"code-object\">long</span>) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(<span class=\"code-object\">long</span>) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(<span class=\"code-object\">long</span>) @bci=37, line=86 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(<span class=\"code-object\">long</span>) @bci=30, line=97 (Compiled frame)\n - org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(<span class=\"code-object\">int</span>, java.util.List, java.util.LinkedList, org.apache.zookeeper.ClientCnxn) @bci=6, line=349 (Compiled frame)\n - org.apache.zookeeper.ClientCnxn$SendThread.run() @bci=604, line=1081 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7746: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=403 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager.processEvents() @bci=13, line=208 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager.access$000(org.apache.curator.framework.state.ConnectionStateManager) @bci=1, line=42 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager$1.call() @bci=4, line=110 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7745: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.DelayQueue.take() @bci=28, line=211 (Interpreted frame)\n - java.util.concurrent.DelayQueue.take() @bci=1, line=70 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl.backgroundOperationsLoop() @bci=10, line=781 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl.access$400(org.apache.curator.framework.imps.CuratorFrameworkImpl) @bci=1, line=57 (Interpreted frame)\n - org.apache.curator.framework.imps.CuratorFrameworkImpl$4.call() @bci=4, line=275 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7744: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=442 (Interpreted frame)\n - org.apache.zookeeper.ClientCnxn$EventThread.run() @bci=9, line=494 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7743: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(<span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(<span class=\"code-object\">long</span>) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(<span class=\"code-object\">long</span>) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(<span class=\"code-object\">long</span>) @bci=37, line=86 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(<span class=\"code-object\">long</span>) @bci=30, line=97 (Compiled frame)\n - org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(<span class=\"code-object\">int</span>, java.util.List, java.util.LinkedList, org.apache.zookeeper.ClientCnxn) @bci=6, line=349 (Compiled frame)\n - org.apache.zookeeper.ClientCnxn$SendThread.run() @bci=604, line=1081 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7738: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=403 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager.processEvents() @bci=13, line=208 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager.access$000(org.apache.curator.framework.state.ConnectionStateManager) @bci=1, line=42 (Interpreted frame)\n - org.apache.curator.framework.state.ConnectionStateManager$1.call() @bci=4, line=110 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7737: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(<span class=\"code-object\">long</span>) @bci=78, line=2078 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=124, line=1093 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7736: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(<span class=\"code-object\">long</span>) @bci=78, line=2078 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=124, line=1093 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7735: (state = IN_NATIVE)\n - java.lang.UNIXProcess.waitForProcessExit(<span class=\"code-object\">int</span>) @bci=0 (Interpreted frame)\n - java.lang.UNIXProcess.lambda$initStreams$266() @bci=5, line=290 (Interpreted frame)\n - java.lang.UNIXProcess$$Lambda$9.run() @bci=4 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7733: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(<span class=\"code-object\">long</span>) @bci=78, line=2078 (Compiled frame)\n - java.util.concurrent.LinkedBlockingQueue.poll(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=62, line=467 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltWriterRunnable.run() @bci=86, line=359 (Compiled frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7732: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(<span class=\"code-object\">long</span>) @bci=78, line=2078 (Compiled frame)\n - java.util.concurrent.LinkedBlockingQueue.poll(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=62, line=467 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltWriterRunnable.run() @bci=86, line=359 (Compiled frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7731: (state = IN_NATIVE)\n - java.io.FileInputStream.readBytes(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.io.FileInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=4, line=255 (Compiled frame)\n - java.io.BufferedInputStream.read1(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=39, line=284 (Compiled frame)\n - java.io.BufferedInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=49, line=345 (Compiled frame)\n - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)\n - sun.nio.cs.StreamDecoder.implRead(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=112, line=326 (Compiled frame)\n - sun.nio.cs.StreamDecoder.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=180, line=178 (Compiled frame)\n - java.io.InputStreamReader.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=7, line=184 (Compiled frame)\n - java.io.BufferedReader.fill() @bci=145, line=161 (Compiled frame)\n - java.io.BufferedReader.readLine(<span class=\"code-object\">boolean</span>) @bci=44, line=324 (Compiled frame)\n - java.io.BufferedReader.readLine() @bci=2, line=389 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readString() @bci=12, line=179 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readMessage() @bci=1, line=166 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readShellMsg() @bci=1, line=100 (Compiled frame)\n - backtype.storm.utils.ShellProcess.readShellMsg() @bci=4, line=99 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltReaderRunnable.run() @bci=17, line=318 (Compiled frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7730: (state = IN_NATIVE)\n - java.io.FileInputStream.readBytes(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.io.FileInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=4, line=255 (Compiled frame)\n - java.io.BufferedInputStream.read1(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=39, line=284 (Compiled frame)\n - java.io.BufferedInputStream.read(<span class=\"code-object\">byte</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=49, line=345 (Compiled frame)\n - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)\n - sun.nio.cs.StreamDecoder.implRead(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=112, line=326 (Compiled frame)\n - sun.nio.cs.StreamDecoder.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=180, line=178 (Compiled frame)\n - java.io.InputStreamReader.read(<span class=\"code-object\">char</span>[], <span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>) @bci=7, line=184 (Compiled frame)\n - java.io.BufferedReader.fill() @bci=145, line=161 (Compiled frame)\n - java.io.BufferedReader.readLine(<span class=\"code-object\">boolean</span>) @bci=44, line=324 (Compiled frame)\n - java.io.BufferedReader.readLine() @bci=2, line=389 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readString() @bci=12, line=179 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readMessage() @bci=1, line=166 (Compiled frame)\n - backtype.storm.multilang.JsonSerializer.readShellMsg() @bci=1, line=100 (Compiled frame)\n - backtype.storm.utils.ShellProcess.readShellMsg() @bci=4, line=99 (Compiled frame)\n - backtype.storm.task.ShellBolt$BoltReaderRunnable.run() @bci=17, line=318 (Compiled frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7729: (state = IN_NATIVE)\n - java.lang.UNIXProcess.waitForProcessExit(<span class=\"code-object\">int</span>) @bci=0 (Interpreted frame)\n - java.lang.UNIXProcess.lambda$initStreams$266() @bci=5, line=290 (Interpreted frame)\n - java.lang.UNIXProcess$$Lambda$9.run() @bci=4 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7723: (state = IN_NATIVE)\n - java.lang.UNIXProcess.waitForProcessExit(<span class=\"code-object\">int</span>) @bci=0 (Interpreted frame)\n - java.lang.UNIXProcess.lambda$initStreams$266() @bci=5, line=290 (Interpreted frame)\n - java.lang.UNIXProcess$$Lambda$9.run() @bci=4 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7722: (state = IN_NATIVE)\n - java.lang.UNIXProcess.waitForProcessExit(<span class=\"code-object\">int</span>) @bci=0 (Interpreted frame)\n - java.lang.UNIXProcess.lambda$initStreams$266() @bci=5, line=290 (Interpreted frame)\n - java.lang.UNIXProcess$$Lambda$9.run() @bci=4 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7637: (state = BLOCKED)\n\n\n<span class=\"code-object\">Thread</span> 7719: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7718: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7717: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7716: (state = BLOCKED)\n - java.lang.<span class=\"code-object\">Thread</span>.sleep(<span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - backtype.storm.spout.SleepSpoutWaitStrategy.emptyEmit(<span class=\"code-object\">long</span>) @bci=4, line=36 (Compiled frame)\n - backtype.storm.daemon.executor$fn__6579$fn__6594$fn__6623.invoke() @bci=1143, line=575 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7715: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(<span class=\"code-object\">long</span>) @bci=11, line=338 (Compiled frame)\n - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.waitForFreeSlotAt(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence[], com.lmax.disruptor.util.MutableLong) @bci=34, line=99 (Compiled frame)\n - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.incrementAndGet(com.lmax.disruptor.Sequence[]) @bci=21, line=49 (Compiled frame)\n - com.lmax.disruptor.Sequencer.next() @bci=26, line=127 (Interpreted frame)\n - backtype.storm.utils.DisruptorQueue.publishDirect(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">boolean</span>) @bci=8, line=174 (Interpreted frame)\n - backtype.storm.utils.DisruptorQueue.publish(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">boolean</span>) @bci=69, line=167 (Compiled frame)\n - backtype.storm.disruptor$publish.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=18, line=66 (Compiled frame)\n - backtype.storm.disruptor$publish.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=18, line=68 (Compiled frame)\n - backtype.storm.daemon.worker$mk_transfer_local_fn$fn__6748.invoke(java.lang.<span class=\"code-object\">Object</span>) @bci=180, line=108 (Compiled frame)\n - backtype.storm.daemon.worker$mk_transfer_fn$fn__6755.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=604, line=134 (Compiled frame)\n - backtype.storm.daemon.executor$start_batch_transfer__GT_worker_handler_BANG_$fn__6489.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=65, line=258 (Compiled frame)\n - backtype.storm.disruptor$clojure_handler$reify__1605.onEvent(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">boolean</span>) @bci=28, line=58 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchToCursor(<span class=\"code-object\">long</span>, com.lmax.disruptor.EventHandler) @bci=125, line=125 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=39, line=99 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7714: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7713: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7712: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7711: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7710: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Compiled frame)\n - java.util.concurrent.LinkedBlockingQueue.put(java.lang.<span class=\"code-object\">Object</span>) @bci=56, line=350 (Compiled frame)\n - backtype.storm.task.ShellBolt.execute(backtype.storm.tuple.Tuple) @bci=54, line=145 (Compiled frame)\n - backtype.storm.daemon.executor$fn__6647$tuple_action_fn__6649.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=354, line=633 (Compiled frame)\n - backtype.storm.daemon.executor$mk_task_receiver$fn__6570.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=357, line=401 (Compiled frame)\n - backtype.storm.disruptor$clojure_handler$reify__1605.onEvent(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">boolean</span>) @bci=28, line=58 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchToCursor(<span class=\"code-object\">long</span>, com.lmax.disruptor.EventHandler) @bci=125, line=125 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=39, line=99 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7709: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7708: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Compiled frame)\n - java.util.concurrent.LinkedBlockingQueue.put(java.lang.<span class=\"code-object\">Object</span>) @bci=56, line=350 (Compiled frame)\n - backtype.storm.task.ShellBolt.execute(backtype.storm.tuple.Tuple) @bci=54, line=145 (Compiled frame)\n - backtype.storm.daemon.executor$fn__6647$tuple_action_fn__6649.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=354, line=633 (Compiled frame)\n - backtype.storm.daemon.executor$mk_task_receiver$fn__6570.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=357, line=401 (Compiled frame)\n - backtype.storm.disruptor$clojure_handler$reify__1605.onEvent(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">boolean</span>) @bci=28, line=58 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchToCursor(<span class=\"code-object\">long</span>, com.lmax.disruptor.EventHandler) @bci=125, line=125 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=39, line=99 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7707: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(<span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)\n - com.lmax.disruptor.BlockingWaitStrategy.waitFor(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)\n - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(<span class=\"code-object\">long</span>, <span class=\"code-object\">long</span>, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)\n - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)\n - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=12, line=80 (Compiled frame)\n - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7706: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">long</span>) @bci=20, line=215 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(<span class=\"code-object\">long</span>) @bci=78, line=2078 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=124, line=1093 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7705: (state = BLOCKED)\n - java.lang.<span class=\"code-object\">Thread</span>.sleep(<span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - org.apache.storm.netty.util.HashedWheelTimer$Worker.waitForNextTick() @bci=84, line=483 (Compiled frame)\n - org.apache.storm.netty.util.HashedWheelTimer$Worker.run() @bci=49, line=392 (Compiled frame)\n - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7704: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Compiled frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=100, line=1088 (Compiled frame)\n - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Compiled frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7703: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(<span class=\"code-object\">long</span>) @bci=11, line=338 (Compiled frame)\n - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.waitForFreeSlotAt(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence[], com.lmax.disruptor.util.MutableLong) @bci=34, line=99 (Compiled frame)\n - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.incrementAndGet(com.lmax.disruptor.Sequence[]) @bci=21, line=49 (Interpreted frame)\n - com.lmax.disruptor.Sequencer.next() @bci=26, line=127 (Interpreted frame)\n - backtype.storm.utils.DisruptorQueue.publishDirect(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">boolean</span>) @bci=8, line=174 (Interpreted frame)\n - backtype.storm.utils.DisruptorQueue.publish(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">boolean</span>) @bci=69, line=167 (Compiled frame)\n - backtype.storm.disruptor$publish.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=18, line=66 (Compiled frame)\n - backtype.storm.disruptor$publish.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=18, line=68 (Compiled frame)\n - backtype.storm.daemon.worker$mk_transfer_local_fn$fn__6748.invoke(java.lang.<span class=\"code-object\">Object</span>) @bci=180, line=108 (Compiled frame)\n - backtype.storm.messaging.loader$mk_receive_thread$fn__1626$fn__1627.invoke() @bci=600, line=49 (Compiled frame)\n - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7702: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(<span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>) @bci=0 (Interpreted frame)\n - sun.nio.ch.EPollArrayWrapper.poll(<span class=\"code-object\">long</span>) @bci=18, line=269 (Interpreted frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(<span class=\"code-object\">long</span>) @bci=28, line=79 (Interpreted frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(<span class=\"code-object\">long</span>) @bci=37, line=86 (Interpreted frame)\n - sun.nio.ch.SelectorImpl.select(<span class=\"code-object\">long</span>) @bci=30, line=97 (Interpreted frame)\n - sun.nio.ch.SelectorImpl.select() @bci=2, line=101 (Interpreted frame)\n - org.apache.storm.netty.channel.socket.nio.NioServerBoss.select(java.nio.channels.Selector) @bci=1, line=163 (Interpreted frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.run() @bci=56, line=212 (Interpreted frame)\n - org.apache.storm.netty.channel.socket.nio.NioServerBoss.run() @bci=1, line=42 (Interpreted frame)\n - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)\n - org.apache.storm.netty.util.internal.DeadLockProofWorker$1.run() @bci=14, line=42 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7701: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(<span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(<span class=\"code-object\">long</span>) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(<span class=\"code-object\">long</span>) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(<span class=\"code-object\">long</span>) @bci=37, line=86 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(<span class=\"code-object\">long</span>) @bci=30, line=97 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.SelectorUtil.select(java.nio.channels.Selector) @bci=4, line=68 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.select(java.nio.channels.Selector) @bci=1, line=415 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.run() @bci=56, line=212 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioWorker.run() @bci=1, line=89 (Interpreted frame)\n - org.apache.storm.netty.channel.socket.nio.NioWorker.run() @bci=1, line=178 (Interpreted frame)\n - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)\n - org.apache.storm.netty.util.internal.DeadLockProofWorker$1.run() @bci=14, line=42 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7700: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.util.concurrent.locks.LockSupport.parkNanos(<span class=\"code-object\">long</span>) @bci=11, line=338 (Compiled frame)\n - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.waitForFreeSlotAt(<span class=\"code-object\">long</span>, com.lmax.disruptor.Sequence[], com.lmax.disruptor.util.MutableLong) @bci=34, line=99 (Compiled frame)\n - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.incrementAndGet(com.lmax.disruptor.Sequence[]) @bci=21, line=49 (Compiled frame)\n - com.lmax.disruptor.Sequencer.next() @bci=26, line=127 (Interpreted frame)\n - backtype.storm.utils.DisruptorQueue.publishDirect(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">boolean</span>) @bci=8, line=174 (Interpreted frame)\n - backtype.storm.utils.DisruptorQueue.publish(java.lang.<span class=\"code-object\">Object</span>, <span class=\"code-object\">boolean</span>) @bci=69, line=167 (Compiled frame)\n - backtype.storm.disruptor$publish.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=18, line=66 (Compiled frame)\n - backtype.storm.disruptor$publish.invoke(java.lang.<span class=\"code-object\">Object</span>, java.lang.<span class=\"code-object\">Object</span>) @bci=18, line=68 (Compiled frame)\n - backtype.storm.daemon.executor$setup_metrics_BANG_$fn__6499.invoke() @bci=80, line=274 (Compiled frame)\n - backtype.storm.timer$schedule_recurring$this__1807.invoke() @bci=7, line=99 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=174, line=50 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7699: (state = BLOCKED)\n - java.lang.<span class=\"code-object\">Thread</span>.sleep(<span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - backtype.storm.utils.Time.sleepUntil(<span class=\"code-object\">long</span>) @bci=173, line=76 (Compiled frame)\n - backtype.storm.utils.Time.sleep(<span class=\"code-object\">long</span>) @bci=5, line=81 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=220, line=57 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7698: (state = BLOCKED)\n - java.lang.<span class=\"code-object\">Thread</span>.sleep(<span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - backtype.storm.utils.Time.sleepUntil(<span class=\"code-object\">long</span>) @bci=173, line=76 (Compiled frame)\n - backtype.storm.utils.Time.sleep(<span class=\"code-object\">long</span>) @bci=5, line=81 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=220, line=57 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7697: (state = BLOCKED)\n - java.lang.<span class=\"code-object\">Thread</span>.sleep(<span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - backtype.storm.utils.Time.sleepUntil(<span class=\"code-object\">long</span>) @bci=173, line=76 (Compiled frame)\n - backtype.storm.utils.Time.sleep(<span class=\"code-object\">long</span>) @bci=5, line=81 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=220, line=57 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7696: (state = BLOCKED)\n - java.lang.<span class=\"code-object\">Thread</span>.sleep(<span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - backtype.storm.utils.Time.sleepUntil(<span class=\"code-object\">long</span>) @bci=173, line=76 (Compiled frame)\n - backtype.storm.utils.Time.sleep(<span class=\"code-object\">long</span>) @bci=5, line=81 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=220, line=57 (Compiled frame)\n - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)\n - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7695: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(<span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(<span class=\"code-object\">long</span>) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(<span class=\"code-object\">long</span>) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(<span class=\"code-object\">long</span>) @bci=37, line=86 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(<span class=\"code-object\">long</span>) @bci=30, line=97 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.SelectorUtil.select(java.nio.channels.Selector) @bci=4, line=68 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.select(java.nio.channels.Selector) @bci=1, line=415 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.run() @bci=56, line=212 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.NioClientBoss.run() @bci=1, line=42 (Interpreted frame)\n - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)\n - org.apache.storm.netty.util.internal.DeadLockProofWorker$1.run() @bci=14, line=42 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7694: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(<span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(<span class=\"code-object\">long</span>) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(<span class=\"code-object\">long</span>) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(<span class=\"code-object\">long</span>) @bci=37, line=86 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(<span class=\"code-object\">long</span>) @bci=30, line=97 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.SelectorUtil.select(java.nio.channels.Selector) @bci=4, line=68 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.select(java.nio.channels.Selector) @bci=1, line=415 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.run() @bci=56, line=212 (Compiled frame)\n - org.apache.storm.netty.channel.socket.nio.AbstractNioWorker.run() @bci=1, line=89 (Interpreted frame)\n - org.apache.storm.netty.channel.socket.nio.NioWorker.run() @bci=1, line=178 (Interpreted frame)\n - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)\n - org.apache.storm.netty.util.internal.DeadLockProofWorker$1.run() @bci=14, line=42 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7693: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Interpreted frame)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.DelayQueue.take() @bci=28, line=211 (Interpreted frame)\n - java.util.concurrent.DelayQueue.take() @bci=1, line=70 (Interpreted frame)\n - org.apache.storm.curator.framework.imps.CuratorFrameworkImpl.backgroundOperationsLoop() @bci=10, line=781 (Interpreted frame)\n - org.apache.storm.curator.framework.imps.CuratorFrameworkImpl.access$400(org.apache.storm.curator.framework.imps.CuratorFrameworkImpl) @bci=1, line=57 (Interpreted frame)\n - org.apache.storm.curator.framework.imps.CuratorFrameworkImpl$4.call() @bci=4, line=275 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7692: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Interpreted frame)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=442 (Interpreted frame)\n - org.apache.storm.zookeeper.ClientCnxn$EventThread.run() @bci=9, line=494 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7691: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(<span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>, <span class=\"code-object\">long</span>, <span class=\"code-object\">int</span>) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(<span class=\"code-object\">long</span>) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(<span class=\"code-object\">long</span>) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(<span class=\"code-object\">long</span>) @bci=37, line=86 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(<span class=\"code-object\">long</span>) @bci=30, line=97 (Compiled frame)\n - org.apache.storm.zookeeper.ClientCnxnSocketNIO.doTransport(<span class=\"code-object\">int</span>, java.util.List, java.util.LinkedList, org.apache.storm.zookeeper.ClientCnxn) @bci=6, line=349 (Compiled frame)\n - org.apache.storm.zookeeper.ClientCnxn$SendThread.run() @bci=615, line=1081 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7690: (state = BLOCKED)\n - sun.misc.Unsafe.park(<span class=\"code-object\">boolean</span>, <span class=\"code-object\">long</span>) @bci=0 (Interpreted frame)\n - java.util.concurrent.locks.LockSupport.park(java.lang.<span class=\"code-object\">Object</span>) @bci=14, line=175 (Interpreted frame)\n - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)\n - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=403 (Interpreted frame)\n - org.apache.storm.curator.framework.state.ConnectionStateManager.processEvents() @bci=13, line=208 (Interpreted frame)\n - org.apache.storm.curator.framework.state.ConnectionStateManager.access$000(org.apache.storm.curator.framework.state.ConnectionStateManager) @bci=1, line=42 (Interpreted frame)\n - org.apache.storm.curator.framework.state.ConnectionStateManager$1.call() @bci=4, line=110 (Interpreted frame)\n - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)\n - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)\n - java.lang.<span class=\"code-object\">Thread</span>.run() @bci=11, line=745 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7647: (state = BLOCKED)\n\n\n<span class=\"code-object\">Thread</span> 7646: (state = BLOCKED)\n - java.lang.<span class=\"code-object\">Object</span>.wait(<span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.lang.ref.ReferenceQueue.remove(<span class=\"code-object\">long</span>) @bci=59, line=143 (Compiled frame)\n - java.lang.ref.ReferenceQueue.remove() @bci=2, line=164 (Compiled frame)\n - java.lang.ref.Finalizer$FinalizerThread.run() @bci=36, line=209 (Interpreted frame)\n\n\n<span class=\"code-object\">Thread</span> 7645: (state = BLOCKED)\n - java.lang.<span class=\"code-object\">Object</span>.wait(<span class=\"code-object\">long</span>) @bci=0 (Compiled frame; information may be imprecise)\n - java.lang.<span class=\"code-object\">Object</span>.wait() @bci=2, line=502 (Compiled frame)\n - java.lang.ref.Reference$ReferenceHandler.run() @bci=36, line=157 (Compiled frame)\n</pre>\n</div></div>\n\n<p>It's from a worker process.</p>\n\n<p>Nothing is written inside the logs :-\\ And <tt>kafkaSpout</tt> offset is not being updated in Zookeeper.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583193/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]