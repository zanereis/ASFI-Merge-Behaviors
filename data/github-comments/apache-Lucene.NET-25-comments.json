[{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585807978","html_url":"https://github.com/apache/lucenenet/pull/1099#issuecomment-2585807978","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1099","id":2585807978,"node_id":"IC_kwDOAAJ06c6aIExq","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-12T16:36:28Z","updated_at":"2025-01-12T16:36:28Z","author_association":"CONTRIBUTOR","body":"I'll go ahead and split out the remaining investigation work into its own PR, and merge this one as it's a nice seam.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585807978/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585814414","html_url":"https://github.com/apache/lucenenet/issues/931#issuecomment-2585814414","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/931","id":2585814414,"node_id":"IC_kwDOAAJ06c6aIGWO","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-12T16:39:03Z","updated_at":"2025-01-12T16:39:03Z","author_association":"CONTRIBUTOR","body":"#1099 Removed many usages, but there remain quite a few on the Flush/Abort/etc. methods. Need to investigate to see if those can be removed particularly in some of the derived class cases.\r\n\r\nThere are other one-off ones like \"SealFlushedSegment\" where the string method name can be replaced with nameof safely (as there's only one method with that name, and it's obvious which one it's looking for).\r\n\r\nMy goal is to use nameof as much as possible to have traceability from the test to which method it's expecting to find in the stack trace.\r\n\r\nIdeally I wish we didn't have to do this at all, as inspecting the stack trace to change behavior is a design smell, but in some cases it's unavoidable (for now, within reason) to match Lucene's test behavior.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585814414/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587577461","html_url":"https://github.com/apache/lucenenet/issues/932#issuecomment-2587577461","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/932","id":2587577461,"node_id":"IC_kwDOAAJ06c6aO0x1","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-13T16:21:33Z","updated_at":"2025-01-13T16:21:33Z","author_association":"CONTRIBUTOR","body":"I reviewed this yesterday, and in addition to the translation errors in the original issue, there is highly inconsistent translation of `printStackTrace`. I'm going to do a sweep of all usages and have it use a common extension method so that it is translated correctly.\r\n\r\nAs @NightOwl888 noted:\r\n> In .NET, Exception.StackTrace doesn't contain the exception type, so a lot of the tests use Exception.ToString() instead.\r\n\r\nIn Java, `printStackTrace` includes the exception type and message before printing the stack trace, so this is effectively the same as printing `e.ToString()`. There were several cases where this was omitted, or translated into two `Console.WriteLine` calls, which just begs to have future translation issues (or set bad precedence). \r\n\r\nTo solve this, I'm moving the TestFramework's `printStackTrace` extension method overloads into Support's `ExceptionExtensions`, fixing the capitalization of them to match .NET conventions, and having them print an output that is equivalent to Java's. This will let us translate `e.printStackTrace()` to `e.PrintStackTrace()` (or `e.printStackTrace(System.out)` to `e.PrintStackTrace(Console.Out)`) which will feel like a very natural and foolproof translation of the code. These methods are set to AggressiveInlining so they should not harm performance. (Most of the usage is in test or console code, anyways.)\r\n\r\nAdditionally, I'm moving the StackTraceHelper type into Support as noted in the original ticket, with a new method `PrintCurrentStackTrace` that does what the original issue needs. It uses `new StackTrace(skipFrames: 1)` with `NoInlining` so that the `PrintCurrentStackTrace` method is omitted from the printed stack trace, while `NoInlining` ensures that we don't miss any frames by having this inlined and then skipping the calling method frame. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587577461/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587608599","html_url":"https://github.com/apache/lucenenet/issues/932#issuecomment-2587608599","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/932","id":2587608599,"node_id":"IC_kwDOAAJ06c6aO8YX","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-13T16:34:09Z","updated_at":"2025-01-13T16:34:09Z","author_association":"CONTRIBUTOR","body":"One thing of note is that randomizedtesting injects the random seed and other debugging details into the stack trace. I haven't looked into what the most reasonable way to do that would be. But, it might be useful to have a way to accomplish that sort of thing by the test framework since we are not planning on porting randomizedtesting for the release. I think that it would be more useful if we had that injected into the live debugging info rather than just the output from `PrintStackTrace()`, but I haven't looked into the feasibility of the former and we might have to rely on the latter.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587608599/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587720357","html_url":"https://github.com/apache/lucenenet/issues/932#issuecomment-2587720357","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/932","id":2587720357,"node_id":"IC_kwDOAAJ06c6aPXql","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-13T17:19:05Z","updated_at":"2025-01-13T17:19:05Z","author_association":"CONTRIBUTOR","body":"Oh, one more thing, sort of related. There is an `AddSuppressed()` extension method on `Exception`, as well. It sort of works like `AggregateExcpetion` except that it keeps the primary exception on the outside and stores a list of any other exceptions that were thrown in a list in `Exeption.Data`. Certainly, it would make sense to have those extra exceptions in the stack trace.\n\nIn hindsight, I wonder if it would make more sense to use `AggregateException`. It didn't seem possible before we changed the catch blocks to use extension methods to identify exception types, but now that we are mostly doing that everywhere, it seems like we could just use a standard convention, such as considering the first Exception in the collection as the primary one. It could save some effort with having to work out how to display a stack trace for all of these nested exceptions since `AggregateException` has a pretty reasonable way to do that already.\n\nAlthough, we never worked out why the `Thread` class in Lucene seems to propagate the exception to the calling thread. The javadoc says it doesn't do that by default, although I found that there is a way to configure it to act that way. But, if Lucene has that extra configuration somewhere, I couldn't locate it. `ThreadJob` simply re-throws an exception that happened on the background thread when `Join()` is called. It seems to work that way. But it is possible that there is a path forward where `AggregateException` makes sense rather than just throwing the exception for the first call to `Join()`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587720357/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587730700","html_url":"https://github.com/apache/lucenenet/issues/932#issuecomment-2587730700","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/932","id":2587730700,"node_id":"IC_kwDOAAJ06c6aPaMM","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-13T17:23:54Z","updated_at":"2025-01-13T17:23:54Z","author_association":"CONTRIBUTOR","body":"> Oh, one more thing, sort of related. There is an `AddSuppressed()` extension method on `Exception`, as well. It sort of works like `AggregateExcpetion` except that it keeps the primary exception on the outside and stores a list of any other exceptions that were thrown in a list in `Exeption.Data`. Certainly, it would make sense to have those extra exceptions in the stack trace.\n> \n> In hindsight, I wonder if it would make more sense to use `AggregateException`. It didn't seem possible before we changed the catch blocks to use extension methods to identify exception types, but now that we are mostly doing that everywhere, it seems like we could just use a standard convention, such as considering the first Exception in the collection as the primary one. It could save some effort with having to work out how to display a stack trace for all of these nested exceptions since `AggregateException` has a pretty reasonable way to do that already.\n> \n> Although, we never worked out why the `Thread` class in Lucene seems to propagate the exception to the calling thread. The javadoc says it doesn't do that by default, although I found that there is a way to configure it to act that way. But, if Lucene has that extra configuration somewhere, I couldn't locate it. `ThreadJob` simply re-throws an exception that happened on the background thread when `Join()` is called. It seems to work that way. But it is possible that there is a path forward where `AggregateException` makes sense rather than just throwing the exception for the first call to `Join()`.\n\nThis seems like something that could be broken out into its own issue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587730700/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587756394","html_url":"https://github.com/apache/lucenenet/issues/932#issuecomment-2587756394","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/932","id":2587756394,"node_id":"IC_kwDOAAJ06c6aPgdq","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-13T17:35:48Z","updated_at":"2025-01-13T17:35:48Z","author_association":"CONTRIBUTOR","body":"> > Oh, one more thing, sort of related. There is an `AddSuppressed()` extension method on `Exception`, as well. It sort of works like `AggregateExcpetion` except that it keeps the primary exception on the outside and stores a list of any other exceptions that were thrown in a list in `Exeption.Data`. Certainly, it would make sense to have those extra exceptions in the stack trace.\n> > In hindsight, I wonder if it would make more sense to use `AggregateException`. It didn't seem possible before we changed the catch blocks to use extension methods to identify exception types, but now that we are mostly doing that everywhere, it seems like we could just use a standard convention, such as considering the first Exception in the collection as the primary one. It could save some effort with having to work out how to display a stack trace for all of these nested exceptions since `AggregateException` has a pretty reasonable way to do that already.\n> > Although, we never worked out why the `Thread` class in Lucene seems to propagate the exception to the calling thread. The javadoc says it doesn't do that by default, although I found that there is a way to configure it to act that way. But, if Lucene has that extra configuration somewhere, I couldn't locate it. `ThreadJob` simply re-throws an exception that happened on the background thread when `Join()` is called. It seems to work that way. But it is possible that there is a path forward where `AggregateException` makes sense rather than just throwing the exception for the first call to `Join()`.\n> \n> This seems like something that could be broken out into its own issue.\n\nYeah, probably. But it is related to printing out the stack trace, so I thought I would mention it here. Even if it means doing it separately and retrofitting the stack trace printing, as required.\n\nCurrently, the `AddSuppressed()` method just puts those exceptions into a void. They are available for debugging, but only if you know to look for them in Exception.Data. .NET doesn't add them to the stack trace of the outer exception. For the time being, since we don't use `AggregateException` it would be helpful if the `PrintStackTrace()` method included the stack traces of the inner exceptions from `GetSuppressedAsList()`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587756394/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587788523","html_url":"https://github.com/apache/lucenenet/issues/932#issuecomment-2587788523","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/932","id":2587788523,"node_id":"IC_kwDOAAJ06c6aPoTr","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-13T17:51:13Z","updated_at":"2025-01-13T17:51:13Z","author_association":"CONTRIBUTOR","body":"Ah I see what you mean, makes sense. I'll see if it is coherent to include that in this PR or break it out separately.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2587788523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2594553623","html_url":"https://github.com/apache/lucenenet/issues/1102#issuecomment-2594553623","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1102","id":2594553623,"node_id":"IC_kwDOAAJ06c6apb8X","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-16T05:14:20Z","updated_at":"2025-01-16T05:14:20Z","author_association":"CONTRIBUTOR","body":"A little insight into this. The `Reader` class in Java tracks some extra state that the .NET `TextReader` class does not. But this extra state is only required for a small number of classes in Lucene. So, rather than subclassing `TextReader` with a `Reader` class with the extra state and having to use adapters for every type of `TextReader` from .NET to turn it into a `Reader`, a new type named `BufferedCharFilter` was added to include both the functionality of `CharFilter` and the state from `BufferedReader` (which subclasses `Reader`) for those few types that required this extra tracking. This puts them in a different arrangement than in Java, so we need to account for this rewiring in the busines logic of `BufferedCharFilter`. The Harmony tests are from the `BufferedReader` class to ensure `BufferedCharFilter` does everything that `BufferedReader` does. Since this test was missing the `[Test]` attribute, it isn't too surprising that it doesn't pass by default and we need to analyze how the initial state of `IsReady` is managed in Java to fix the problem.\n\nSpecifically, the extra state tracked in `Reader` is:\n\n- `mark` (an `int` to track a position)\n- `ready` (a `bool` to indicate whether the stream is ready to be read)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2594553623/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2596058991","html_url":"https://github.com/apache/lucenenet/pull/1101#issuecomment-2596058991","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1101","id":2596058991,"node_id":"IC_kwDOAAJ06c6avLdv","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-16T15:40:03Z","updated_at":"2025-01-16T15:40:03Z","author_association":"CONTRIBUTOR","body":"FYI, tests failing on .NET FX, I'll get that fixed later today.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2596058991/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2598872560","html_url":"https://github.com/apache/lucenenet/issues/1072#issuecomment-2598872560","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1072","id":2598872560,"node_id":"IC_kwDOAAJ06c6a56Xw","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-17T17:41:26Z","updated_at":"2025-01-17T17:41:26Z","author_association":"CONTRIBUTOR","body":"I got this to repeat reliably. But, currently the `[Repeat]` attribute has not been customized to reset the `Randomizer` instance for each repeated test execution. It continues using the same instance from the last execution. So, if it takes 323 repeats to cause a failure on one run with a given seed, it will continue to take 323 repeats to execute if that same seed is reapplied.\n\nHere is a case that fails reliably with `[Repeat(1000)]`:\n\n```\nOption 1:\n\n Apply the following assembly-level attributes:\n\n[assembly: Lucene.Net.Util.RandomSeed(\"0xb78a94b3d0d07ab5\")]\n[assembly: NUnit.Framework.SetCulture(\"ca\")]\n\nOption 2:\n\n Use the following .runsettings file:\n\n<RunSettings>\n  <TestRunParameters>\n    <Parameter name=\"tests:seed\" value=\"0xb78a94b3d0d07ab5\" />\n    <Parameter name=\"tests:culture\" value=\"ca\" />\n  </TestRunParameters>\n</RunSettings>\n\nOption 3:\n\n Create the following lucene.testsettings.json file somewhere between the test assembly and the root of your drive:\n\n{\n  \"tests\": {\n     \"seed\": \"0xb78a94b3d0d07ab5\",\n     \"culture\": \"ca\"\n  }\n}\n```\n\nAfter about 5-6 minutes, it will always fail with the same stack trace:\n\n```\n  Stack Trace: \nOffsetAttribute.SetOffset(Int32 startOffset, Int32 endOffset) line 50\nShingleFilter.IncrementToken() line 369\nValidatingTokenFilter.IncrementToken() line 86\nBaseTokenStreamTestCase.CheckAnalysisConsistency(Random random, Analyzer a, Boolean useCharFilter, String text, Boolean offsetsAreCorrect, Field field) line 956\nBaseTokenStreamTestCase.CheckRandomData(Random random, Analyzer a, Int32 iterations, Int32 maxWordLength, Boolean useCharFilter, Boolean simple, Boolean offsetsAreCorrect, RandomIndexWriter iw) line 840\nBaseTokenStreamTestCase.CheckRandomData(Random random, Analyzer a, Int32 iterations, Int32 maxWordLength, Boolean simple, Boolean offsetsAreCorrect) line 694\nTestRandomChains.TestRandomChains_() line 1171\nInvokeStub_TestRandomChains.TestRandomChains_(Object, Object, IntPtr*)\nMethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```\n\nSo, a better way to repeat (for now) is to run the tests in CI without a `[Repeat]` attribute. When a failure happens there, it will be queued up to fail the first time without the `[Repeat]` attribute.\n\nI will check to see whether making a `[Repeat]` and/or a `[FindFirstFailingSeed]` attribute that resets the `Random` instance with a new seed will be easy to achieve. The `Randomizer` class already allows the `Seed` to be set without creating a new instance.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2598872560/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2598876247","html_url":"https://github.com/apache/lucenenet/issues/1072#issuecomment-2598876247","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1072","id":2598876247,"node_id":"IC_kwDOAAJ06c6a57RX","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-17T17:43:40Z","updated_at":"2025-01-17T17:43:40Z","author_association":"CONTRIBUTOR","body":"I should point out that I got it to fail on the https://github.com/paulirwin/lucene.net/tree/issue/271 branch.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2598876247/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2600286084","html_url":"https://github.com/apache/lucenenet/issues/661#issuecomment-2600286084","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/661","id":2600286084,"node_id":"IC_kwDOAAJ06c6a_TeE","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-18T23:36:51Z","updated_at":"2025-01-18T23:36:51Z","author_association":"CONTRIBUTOR","body":"Of note, Rider found _far_ more cases of this than SonarQube did: 656 compared to 32, although most of them are in unit tests. I'm going to exclude the unit tests from the PR for this.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2600286084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2602663844","html_url":"https://github.com/apache/lucenenet/issues/998#issuecomment-2602663844","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/998","id":2602663844,"node_id":"IC_kwDOAAJ06c6bIX-k","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-20T15:08:31Z","updated_at":"2025-01-20T15:08:31Z","author_association":"CONTRIBUTOR","body":"> `Lucene.Net.Index.TestIndexReaderClose.TestCloseUnderException()` (net5.0, net48, net472)\n\nI was unable to reproduce this on `net48` with this seed. A stack trace might have been helpful. But, after [looking up the exception](https://stackoverflow.com/questions/36422138/datetime-parsing-error-the-supplied-datetime-represents-an-invalid-time), it doesn't seem like a coincidence that this error was reported very close to the time of the daylight savings time change in the EU (October 27, 2024).\n\n> `Lucene.Net.Analysis.Icu.TestICUNormalizer2CharFilter.TestRandomStrings()` (net5.0, net48)\n\nThis is repeatable, but only if running all of the tests in the class with the provided seed. Running the test explicitly will pass the test. I set `numThreads = 0` in `CheckRandomData()` (being careful not to comment out `TestUtil.NextInt32(random, 2, 4);`) to disable the concurrency checking and the test passes. So, this seems like a concurrency problem with the latest changes to `ICU4N.Text.Normalizer2` and/or the changes to the analyzer to accommodate the new design.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2602663844/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2604201017","html_url":"https://github.com/apache/lucenenet/pull/1108#issuecomment-2604201017","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1108","id":2604201017,"node_id":"IC_kwDOAAJ06c6bOPQ5","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-21T09:49:58Z","updated_at":"2025-01-21T10:03:35Z","author_association":"CONTRIBUTOR","body":"Interesting results, just scratching the surface hints that the J2N implementation is actually worse performance wise on .NET Framework where on .NET core it's much more close, the extra allocation are shown but MS is clearly improving this (from nearly 40 bytes to just nearly 15 bytes between .NET 8 and 9).\r\n\r\n```\r\nBenchmarkDotNet v0.14.0, Windows 10 (10.0.19045.5131/22H2/2022Update)\r\nIntel Core i9-7900X CPU 3.30GHz (Kaby Lake), 1 CPU, 20 logical and 10 physical cores\r\n  [Host]     : .NET Framework 4.8.1 (4.8.9290.0), X64 RyuJIT VectorSize=256\r\n  DefaultJob : .NET Framework 4.8.1 (4.8.9290.0), X64 RyuJIT VectorSize=256\r\n\r\n| Method            | Mean     | Error     | StdDev    | Gen0   | Allocated |\r\n|------------------ |---------:|----------:|----------:|-------:|----------:|\r\n| BuiltInDictionary | 1.558 us | 0.0181 us | 0.0170 us | 0.2232 |   1.38 KB |\r\n| J2NDictionary     | 5.136 us | 0.0853 us | 0.0757 us | 0.1755 |   1.09 KB |\r\n\r\n\r\n\r\nBenchmarkDotNet v0.14.0, Windows 10 (10.0.19045.5131/22H2/2022Update)\r\nIntel Core i9-7900X CPU 3.30GHz (Kaby Lake), 1 CPU, 20 logical and 10 physical cores\r\n.NET SDK 9.0.101\r\n  [Host]     : .NET 8.0.11 (8.0.1124.51707), X64 RyuJIT AVX-512F+CD+BW+DQ+VL\r\n  DefaultJob : .NET 8.0.11 (8.0.1124.51707), X64 RyuJIT AVX-512F+CD+BW+DQ+VL\r\n\r\n| Method            | Mean     | Error    | StdDev   | Gen0   | Allocated |\r\n|------------------ |---------:|---------:|---------:|-------:|----------:|\r\n| BuiltInDictionary | 964.4 ns | 18.78 ns | 24.41 ns | 0.2079 |   1.46 KB |\r\n| J2NDictionary     | 817.0 ns | 14.83 ns | 13.15 ns | 0.1545 |   1.09 KB |\r\n\r\n\r\nBenchmarkDotNet v0.14.0, Windows 10 (10.0.19045.5131/22H2/2022Update)\r\nIntel Core i9-7900X CPU 3.30GHz (Kaby Lake), 1 CPU, 20 logical and 10 physical cores\r\n.NET SDK 9.0.101\r\n  [Host]     : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX-512F+CD+BW+DQ+VL\r\n  DefaultJob : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX-512F+CD+BW+DQ+VL\r\n\r\n| Method            | Mean     | Error    | StdDev   | Gen0   | Allocated |\r\n|------------------ |---------:|---------:|---------:|-------:|----------:|\r\n| BuiltInDictionary | 827.9 ns | 15.30 ns | 14.31 ns | 0.1755 |   1.23 KB |\r\n| J2NDictionary     | 808.4 ns | 15.96 ns | 19.00 ns | 0.1545 |   1.09 KB |\r\n\r\n```\r\n\r\n```CSharp\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System.Collections.Generic;\r\n\r\nBenchmarkRunner.Run<DictionaryBenchmarks>();\r\n\r\n[MemoryDiagnoser]\r\npublic class DictionaryBenchmarks\r\n{\r\n    [Benchmark]\r\n    public byte BuiltInDictionary()\r\n    {\r\n        Dictionary<string, string> values = new ();\r\n        AddItems(values);\r\n        foreach (string b in values.Values.Where(x => x.Length > 1).ToArray())\r\n            values.Remove(b);\r\n        return 1;\r\n    }\r\n\r\n\r\n    [Benchmark]\r\n    public int J2NDictionary()\r\n    {\r\n        J2N.Collections.Generic.Dictionary<string, string> values = new();\r\n        AddItems(values);\r\n        foreach (string b in values.Values.Where(x => x.Length > 1))\r\n            values.Remove(b);\r\n        return 1;\r\n    }\r\n\r\n    private void AddItems(IDictionary<string,string> x)\r\n    {\r\n       x.Add(\"00\", \"00\");\r\n       x.Add(\"01\", \"01\");\r\n       x.Add(\"02\", \"02\");\r\n       x.Add(\"03\", \"03\");\r\n       x.Add(\"04\", \"04\");\r\n       x.Add(\"05\", \"05\");\r\n       x.Add(\"06\", \"06\");\r\n       x.Add(\"07\", \"07\");\r\n       x.Add(\"08\", \"08\");\r\n       x.Add(\"09\", \"09\");\r\n       x.Add(\"10\", \"10\");\r\n       x.Add(\"11\", \"11\");\r\n       x.Add(\"12\", \"12\");\r\n       x.Add(\"13\", \"13\");\r\n       x.Add(\"14\", \"14\");\r\n       x.Add(\"15\", \"15\");\r\n    }\r\n}\r\n```\r\n\r\nOne overall concern I would have when switching from the core implementation of collections to a custom one (from e.g. J2N) is that Microsoft is pushing on performance with every itteration of .NET while other implementations might not keep up.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2604201017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2604422737","html_url":"https://github.com/apache/lucenenet/pull/1108#issuecomment-2604422737","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1108","id":2604422737,"node_id":"IC_kwDOAAJ06c6bPFZR","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-21T11:09:22Z","updated_at":"2025-01-21T11:09:22Z","author_association":"CONTRIBUTOR","body":"A few things to note:\r\n\r\n1. This *is* the Microsoft implementation of `Dictionary<TKey, TValue>` which was [upgraded to align with .NET 8](https://github.com/NightOwl888/J2N/pull/104) in J2N 2.1.0. It is only customized to the extent it took to implement nullable keys, structural formatting, and structural equality. There may be some extra overhead in J2N 2.1 because of the guard clauses and \"helper\" classes that are used to normalize the behavior between .NET Core and .NET Framework without polluting the codebase with #ifdef statements. Microsoft may also be doing some optimizations at the compiler level that we aren't accounting for.\r\n2. Due to the fact that the nested types of collections were mostly all made internal in J2N 2.0.0, we returned the interfaces rather than the concrete types from the API. There is an open issue to [fix that in J2N 3.0.0](https://github.com/NightOwl888/J2N/issues/114), but it requires a breaking API change. Therefore, calling `GetEnumerator()` will box because `Enumerator` is a struct. To do an apples-to-apples comparison, you need to box the BCL implementation, you need to cast the result of `GetEnumerator()` to `IEnumerator<T>` or do the whole comparison on `IDictionary<TKey, TValue>` rather than on the concrete type. Also, the comparison should be done on `net8.0`. Do note that Lucene.NET uses the interfaces extensively in the API, so in many cases this boxing will not be avoided even when the API of J2N has been fixed.\r\n3. Maybe I am missing something, but the warning messages in BenchmarkDotNet mention that the results cannot be relied upon unless there is at least 100ms of activity. Normally, I will add a for loop inside of a benchmark to run the operation enough iterations so that it is over 100ms.\r\n\r\nThat being said, perhaps it would be worth it to review the changes to the dictionary in .NET 9 to see whether it makes sense to do another dictionary upgrade in J2N.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2604422737/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2604484529","html_url":"https://github.com/apache/lucenenet/pull/1108#issuecomment-2604484529","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1108","id":2604484529,"node_id":"IC_kwDOAAJ06c6bPUex","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-21T11:37:56Z","updated_at":"2025-01-21T11:37:56Z","author_association":"CONTRIBUTOR","body":"1. Fair, it still has the same problem of risking falling behind. Sometimes there is good reason to have a custom implementation though, so I am not saying never, but I think it's worth consider each case.\r\n\r\n2. I am not sure I understand this point, the benchmark tries to \"Simulate\" what happens based on how it's used in a \"Before\" and \"After\" scenario in the replicator where there is as far as I can see no casting of any enumerators?\r\n\r\n3. Was that on your own PC? - I am not getting any warnings, but it's not a brand new system so perhaps newer CPU's with improved IPC and Clocks exeute this much faster.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2604484529/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2604677372","html_url":"https://github.com/apache/lucenenet/pull/1108#issuecomment-2604677372","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1108","id":2604677372,"node_id":"IC_kwDOAAJ06c6bQDj8","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-21T13:02:15Z","updated_at":"2025-01-21T13:02:15Z","author_association":"CONTRIBUTOR","body":"1. True, which is why we tried avoiding that by cascading the call to a wraped BCL implementation previously. Unfortunately, the tradeoff is that prior to .NET Core 3.x there was no support for deletion while iterating forward which Lucene uses in a few places. So, we either have to conditionally compile or make a normalized implementation in J2N. IMO, it is better to have a normalized implementation so we can push as many conditional compilation statements into J2N as possible until such time we don't need the J2N implementation any longer (in this case, when we drop support for everything below .NET Core). But, I don't think we should use `JCG.Dictionary<TKey, TValue>` unless it is required.\r\n\r\n2. All I am saying is that the next release of Lucene.NET will not have a reference to J2N 2.1, so this comparison is not completely accurate as to what will be released and does not account for work that already exists on the `main` branch in J2N.\r\n    \r\n    In the benchmark the compiler `foreach` calls `SCG.Dictionary<TKey, TValue>.Values.GetEnumerator()`, which returns type `SCG.Dictionary<TKey, TValue>.ValueCollection.Enumerator`, a struct. The J2N implementation also returns a struct, but casts it to an `IEnumerator<TValue>`, which will box. To do a direct comparison, the dictionary should be using the interface `IDictionary<string, string> values = new Dictionary<string, string>();` so the box happens there, also. In J2N 3.0, this boxing will go away so the concrete types will return a struct which will match the upstream performance better.\r\n\r\n    Also, J2N 2.1 had some boxing in some of the guard clauses, which was [recently fixed](https://github.com/NightOwl888/J2N/pull/127) as well as using the [unsigned right shift operator instead of a method](https://github.com/NightOwl888/J2N/pull/116). These will have a positive impact on the performance of much of the J2N library, including the collections.\r\n\r\n3. Good point on the difference in hardware. That could be causing the warnings I am seeing. Of course, that makes me cautious about seeing results from others that don't have at least 100ms of work in the benchmark.\r\n\r\n    ![image](https://github.com/user-attachments/assets/da9362fc-eb5f-486a-b2f5-c4761cb6e5a6)\r\n\r\n\r\n#### .NET Framework\r\n\r\nThere is one other difference that could explain what you are seeing on .NET Framework. We patched the implementation to nullify the data buckets only for reference types, whereas .NET Framework did it for both value and reference types. There is a method called `RuntimeHelpers.IsReferenceOrContainsReferences<T>()` that is used to determine whether there are any reference types to nullify, but it doesn't exist on .NET Framework so we use Reflection to analyze the type and cache the value the first time a type is used. More iterations would definitely change the result because that Reflection overhead only happens on the first call. Here is the implementation:\r\n\r\nhttps://github.com/NightOwl888/J2N/blob/8845a696e2cd3e2ca0752823c779c72aa7f0e5a1/src/J2N/Runtime/CompilerServices/RuntimeHelper.cs#L31-L84\r\n\r\nSo, 2 ways we could deal with this:\r\n\r\n- Review the above implementation to see if there are any performance enhancements that could be made\r\n- Change it to always clean up references the collection buckets as was the case in .NET Framework but keep the enhancement where `RuntimeHelpers.IsReferenceOrContainsReferences<T>()` exists (which would require conditional compilation in the J2N collections)\r\n\r\n#### .NET 9 Implementation\r\n\r\nActually, it is possible that the difference between `net8.0` and `net9.0` is due to a more efficient `.ToArray()` implementation and this might have little or nothing to do with enhancements to the `Dictionary<TKey, TValue>` implementation.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2604677372/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2605133640","html_url":"https://github.com/apache/lucenenet/issues/1110#issuecomment-2605133640","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1110","id":2605133640,"node_id":"IC_kwDOAAJ06c6bRy9I","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-21T16:02:35Z","updated_at":"2025-01-21T16:02:35Z","author_association":"CONTRIBUTOR","body":"FYI - the implementation that we based this off of still exists on this page: https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler?view=net-9.0&redirectedfrom=MSDN. We added a `ShutDown()` method, which doesn't forcibly kill it, but prevents new items from being queued so it will shut down faster.\n\nSide note: It looks like we can remove `FEATURE_THREADPOOL_UNSAFEQUEUEWORKITEM` since it is supported in all of our current target frameworks.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2605133640/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2606308627","html_url":"https://github.com/apache/lucenenet/issues/1111#issuecomment-2606308627","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1111","id":2606308627,"node_id":"IC_kwDOAAJ06c6bWR0T","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-22T05:08:26Z","updated_at":"2025-01-22T05:08:26Z","author_association":"CONTRIBUTOR","body":"I will take this one once #1119 is merged, since it improves the JSR166TestCase base class.\n\nFor posterity, the Apache Harmony tests are here: https://github.com/apache/harmony/blob/trunk/classlib/modules/concurrent/src/test/java/ReentrantLockTest.java","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2606308627/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2606316324","html_url":"https://github.com/apache/lucenenet/issues/1112#issuecomment-2606316324","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1112","id":2606316324,"node_id":"IC_kwDOAAJ06c6bWTsk","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-22T05:15:53Z","updated_at":"2025-01-22T05:15:53Z","author_association":"CONTRIBUTOR","body":"I don't see any tests in Harmony for this (in fact, I don't see Throwable having suppressed exceptions in Harmony at all), but these should be pretty trivial to write nonetheless.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2606316324/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2606562804","html_url":"https://github.com/apache/lucenenet/pull/1108#issuecomment-2606562804","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1108","id":2606562804,"node_id":"IC_kwDOAAJ06c6bXP30","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-22T08:17:23Z","updated_at":"2025-01-22T08:18:06Z","author_association":"CONTRIBUTOR","body":"Ohhh... My sincere appologies... Now i get the issue here (the title could be more clear though as I think this is a more important focus).\r\n\r\nWTF... I did not know there was a difference in how \"Remove\" was implemented in .NET 8/9 vs Framework, thats a contract change between the versions i did not know of and is quite problematic in terms of the NETStandard promise o.O, yikes.\r\n\r\nI basically looked at this from a \"performance optimization\" perspective, and went, \"but is it really an improvement\". The functional part is way more important IMO.\r\n\r\n------------------\r\n\r\nAs a side note, all this talk about dropping .NET Framework support (or NETStandard 2.0) is not something I am truely fond of as someone who uses it from that stack still, and I currently don't know if we will manage to actually upgrade within the comming years. :(... So hopefully that will be for a Lucene 10.X (or which Java version is the next target) and not 4.8 final release thing >.<...","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2606562804/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2607513943","html_url":"https://github.com/apache/lucenenet/pull/1120#issuecomment-2607513943","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1120","id":2607513943,"node_id":"IC_kwDOAAJ06c6ba4FX","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-22T15:13:13Z","updated_at":"2025-01-22T15:13:13Z","author_association":"CONTRIBUTOR","body":"I'll skip synchronization for now, it can always be added later as a fix without breaking the contract if there are any issues with it. I doubt there will be, though.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2607513943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2608162890","html_url":"https://github.com/apache/lucenenet/pull/1080#issuecomment-2608162890","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1080","id":2608162890,"node_id":"IC_kwDOAAJ06c6bdWhK","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-22T20:07:05Z","updated_at":"2025-01-22T20:07:05Z","author_association":"CONTRIBUTOR","body":"Repeating this comment from https://github.com/apache/lucenenet/pull/1119#discussion_r1925579476:\r\n\r\nAfter taking a step back from this and considering that we are working on support for `CancellationToken`s, I wonder if we should consider removing `LimitedConcurrencyLevelTaskScheduler.Shutdown()` and always use `CancellationToken` instead?\r\n\r\nIf we do keep the `LimitedConcurrencyLevelTaskScheduler.Shutdown()` method, there are some things to consider:\r\n\r\n1. Should we make `LimitedConcurrencyLevelTaskScheduler` public? The BCL doesn't have one and it is provided in the docs for `TaskScheduler`. But there is no `ShutDown()` on that implementation.\r\n2. There are some tests where `Shutdown()` was called in Lucene that would likely perform better if we use it, since those lines were often commented out in Lucene.NET. However, using `CancellationToken` could be an alternative way to handle those cases.\r\n    -  https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.1/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java#L177-L178\r\n    - https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.1/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java#L291-L292\r\n    - https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.1/lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java#L435-L437\r\n    - https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.1/lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java#L645-L646\r\n    - https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.1/lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java#L119\r\n    - https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.1/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java#L1570\r\n\r\nThe upside of using `Shutdown()` is that it aligns more closely to Lucene.\r\n\r\nThe upside of using `CancellationToken` is that it is more fine-grained and can potentially shut down a process quicker, since it will be able to intervene inside of the running task instead of prior to queuing the task.\r\n\r\nAllowing a user-defined `TaskScheduler` still seems like a good idea, but since Microsoft didn't allow them to be cancelled, it seems like we should follow the `CancellationToken` approach instead of trying to shoehorn a way to cancel a `TaskScheduler`. Using the same `CancellationToken` to make `LimitedConcurrencyLevelTaskScheduler` stop queuing new work is also something that might be worth considering.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2608162890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2608412143","html_url":"https://github.com/apache/lucenenet/issues/1111#issuecomment-2608412143","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1111","id":2608412143,"node_id":"IC_kwDOAAJ06c6beTXv","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-22T22:38:12Z","updated_at":"2025-01-22T22:38:12Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I briefly looked into this one, and it appears that it already has a few tests enabled from the Harmony tests: https://github.com/apache/lucenenet/blob/master/src/Lucene.Net.Tests/Support/Threading/ReentrantLockTest.cs\n\nOf course a lot of them are commented out because the ReentrantLock class only seems to implement what is minimally needed. I don't know if it's worth the effort to port the entire hierarchy and behavior of ReentrantLock from Harmony, as that would be very complex and time-consuming, especially if we're not using that functionality beyond what it does today. Let me know if you have specific thoughts on anything to do here, or if this can be closed out.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2608412143/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2608804454","html_url":"https://github.com/apache/lucenenet/issues/1111#issuecomment-2608804454","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1111","id":2608804454,"node_id":"IC_kwDOAAJ06c6bfzJm","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-23T04:00:45Z","updated_at":"2025-01-23T04:00:45Z","author_association":"CONTRIBUTOR","body":"I agree. The tests added in #940 are sufficient. There is no reason to port any more of `ReentrantLock`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2608804454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2609133593","html_url":"https://github.com/apache/lucenenet/pull/1119#issuecomment-2609133593","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1119","id":2609133593,"node_id":"IC_kwDOAAJ06c6bhDgZ","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-23T08:20:22Z","updated_at":"2025-01-23T08:20:22Z","author_association":"CONTRIBUTOR","body":"It looks like there is a problem with these tests on:\r\n\r\n- `net9.0` x64, Windows\r\n- `net9.0` x64 Linux\r\n- `net6.0` x64 Windows\r\n\r\nhttps://dev.azure.com/LuceneNET-Temp/Lucene.NET/_build/results?buildId=2410&view=ms.vss-test-web.build-test-results-tab\r\n\r\n```\r\nExpected: 1, Actual: 0\r\n(Test: Lucene.Net.Support.Threading.TestLimitedConcurrencyLevelTaskScheduler.TestGetActiveCount)\r\n\r\n\r\nTo reproduce this test result:\r\n\r\n\r\nOption 1:\r\n\r\n\r\nApply the following assembly-level attributes:\r\n\r\n\r\n[assembly: Lucene.Net.Util.RandomSeed(\"0x9054fc2057c057c9\")]\r\n[assembly: NUnit.Framework.SetCulture(\"ia\")]\r\n\r\n\r\nOption 2:\r\n\r\n\r\nUse the following .runsettings file:\r\n\r\n\r\n<RunSettings>\r\n  <TestRunParameters>\r\n    <Parameter name=\"tests:seed\" value=\"0x9054fc2057c057c9\" />\r\n    <Parameter name=\"tests:culture\" value=\"ia\" />\r\n  </TestRunParameters>\r\n</RunSettings>\r\nOption 3:\r\n\r\n\r\nCreate the following lucene.testsettings.json file somewhere between the test assembly and the root of your drive:\r\n\r\n\r\n{\r\n\"tests\": {\r\n\"seed\": \"0x9054fc2057c057c9\",\r\n\"culture\": \"ia\"\r\n}\r\n}\r\n\r\n\r\nFixture Test Values\r\n\r\nRandom Seed:           0x9054fc2057c057c9\r\nCulture:               ia\r\nTime Zone:             (UTC-04:00) Georgetown, La Paz, Manaus, San Juan\r\nDefault Codec:         Lucene45 (Lucene45RWCodec)\r\nDefault Similarity:    RandomSimilarityProvider(queryNorm=False,coord=crazy): {}\r\n\r\n\r\nSystem Properties\r\n\r\nNightly:               False\r\nWeekly:                False\r\nSlow:                  True\r\nAwaits Fix:            False\r\nDirectory:             random\r\nVerbose:               False\r\nRandom Multiplier:     1\r\n```\r\n-------------------------\r\n\r\n```\r\nExpected: 1, Actual: 0\r\n(Test: Lucene.Net.Support.Threading.TestLimitedConcurrencyLevelTaskScheduler.TestGetCompletedTaskCount)\r\n\r\n\r\nTo reproduce this test result:\r\n\r\n\r\nOption 1:\r\n\r\n\r\nApply the following assembly-level attributes:\r\n\r\n\r\n[assembly: Lucene.Net.Util.RandomSeed(\"0x9054fc2057c057c9\")]\r\n[assembly: NUnit.Framework.SetCulture(\"ia\")]\r\n\r\n\r\nOption 2:\r\n\r\n\r\nUse the following .runsettings file:\r\n\r\n\r\n<RunSettings>\r\n  <TestRunParameters>\r\n    <Parameter name=\"tests:seed\" value=\"0x9054fc2057c057c9\" />\r\n    <Parameter name=\"tests:culture\" value=\"ia\" />\r\n  </TestRunParameters>\r\n</RunSettings>\r\nOption 3:\r\n\r\n\r\nCreate the following lucene.testsettings.json file somewhere between the test assembly and the root of your drive:\r\n\r\n\r\n{\r\n\"tests\": {\r\n\"seed\": \"0x9054fc2057c057c9\",\r\n\"culture\": \"ia\"\r\n}\r\n}\r\n\r\n\r\nFixture Test Values\r\n\r\nRandom Seed:           0x9054fc2057c057c9\r\nCulture:               ia\r\nTime Zone:             (UTC-04:00) Georgetown, La Paz, Manaus, San Juan\r\nDefault Codec:         Lucene45 (Lucene45RWCodec)\r\nDefault Similarity:    RandomSimilarityProvider(queryNorm=False,coord=crazy): {}\r\n\r\n\r\nSystem Properties\r\n\r\nNightly:               False\r\nWeekly:                False\r\nSlow:                  True\r\nAwaits Fix:            False\r\nDirectory:             random\r\nVerbose:               False\r\nRandom Multiplier:     1\r\n\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2609133593/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":1,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2610652025","html_url":"https://github.com/apache/lucenenet/pull/1119#issuecomment-2610652025","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1119","id":2610652025,"node_id":"IC_kwDOAAJ06c6bm2N5","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-23T18:30:34Z","updated_at":"2025-01-23T18:30:34Z","author_association":"CONTRIBUTOR","body":"Created issue for failing tests: #1123","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2610652025/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]