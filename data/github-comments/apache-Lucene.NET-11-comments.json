[{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719284622","html_url":"https://github.com/apache/lucenenet/pull/381#issuecomment-719284622","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/381","id":719284622,"node_id":"MDEyOklzc3VlQ29tbWVudDcxOTI4NDYyMg==","user":{"login":"denisisack","id":48655477,"node_id":"MDQ6VXNlcjQ4NjU1NDc3","avatar_url":"https://avatars.githubusercontent.com/u/48655477?v=4","gravatar_id":"","url":"https://api.github.com/users/denisisack","html_url":"https://github.com/denisisack","followers_url":"https://api.github.com/users/denisisack/followers","following_url":"https://api.github.com/users/denisisack/following{/other_user}","gists_url":"https://api.github.com/users/denisisack/gists{/gist_id}","starred_url":"https://api.github.com/users/denisisack/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/denisisack/subscriptions","organizations_url":"https://api.github.com/users/denisisack/orgs","repos_url":"https://api.github.com/users/denisisack/repos","events_url":"https://api.github.com/users/denisisack/events{/privacy}","received_events_url":"https://api.github.com/users/denisisack/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-30T06:34:35Z","updated_at":"2020-10-30T06:34:35Z","author_association":"NONE","body":"I have tried understanding somehow might be because of my computing resource but after improving UpdateMergeThreads results at least deterministic as per my limited Computing resource was some convinced it had better result but being limited does provide me less clarity check you may suggest other way or just close PR","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719284622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719291415","html_url":"https://github.com/apache/lucenenet/pull/381#issuecomment-719291415","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/381","id":719291415,"node_id":"MDEyOklzc3VlQ29tbWVudDcxOTI5MTQxNQ==","user":{"login":"denisisack","id":48655477,"node_id":"MDQ6VXNlcjQ4NjU1NDc3","avatar_url":"https://avatars.githubusercontent.com/u/48655477?v=4","gravatar_id":"","url":"https://api.github.com/users/denisisack","html_url":"https://github.com/denisisack","followers_url":"https://api.github.com/users/denisisack/followers","following_url":"https://api.github.com/users/denisisack/following{/other_user}","gists_url":"https://api.github.com/users/denisisack/gists{/gist_id}","starred_url":"https://api.github.com/users/denisisack/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/denisisack/subscriptions","organizations_url":"https://api.github.com/users/denisisack/orgs","repos_url":"https://api.github.com/users/denisisack/repos","events_url":"https://api.github.com/users/denisisack/events{/privacy}","received_events_url":"https://api.github.com/users/denisisack/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-30T06:39:47Z","updated_at":"2020-10-30T06:39:47Z","author_association":"NONE","body":"![lucenetest2](https://user-images.githubusercontent.com/48655477/97668799-d28e7c00-1a93-11eb-8962-60bea9922c0f.PNG)\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719291415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719302002","html_url":"https://github.com/apache/lucenenet/pull/381#issuecomment-719302002","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/381","id":719302002,"node_id":"MDEyOklzc3VlQ29tbWVudDcxOTMwMjAwMg==","user":{"login":"denisisack","id":48655477,"node_id":"MDQ6VXNlcjQ4NjU1NDc3","avatar_url":"https://avatars.githubusercontent.com/u/48655477?v=4","gravatar_id":"","url":"https://api.github.com/users/denisisack","html_url":"https://github.com/denisisack","followers_url":"https://api.github.com/users/denisisack/followers","following_url":"https://api.github.com/users/denisisack/following{/other_user}","gists_url":"https://api.github.com/users/denisisack/gists{/gist_id}","starred_url":"https://api.github.com/users/denisisack/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/denisisack/subscriptions","organizations_url":"https://api.github.com/users/denisisack/orgs","repos_url":"https://api.github.com/users/denisisack/repos","events_url":"https://api.github.com/users/denisisack/events{/privacy}","received_events_url":"https://api.github.com/users/denisisack/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-30T06:48:21Z","updated_at":"2020-10-30T07:16:41Z","author_association":"NONE","body":"Some test are skipped because of low computing resources but if it doesn't help then you can just close , will try checking error remaining to see options presents.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719302002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719897260","html_url":"https://github.com/apache/lucenenet/issues/382#issuecomment-719897260","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/382","id":719897260,"node_id":"MDEyOklzc3VlQ29tbWVudDcxOTg5NzI2MA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-31T07:28:22Z","updated_at":"2020-10-31T07:28:22Z","author_association":"CONTRIBUTOR","body":"I am not sure if this will completely solve the problems you are seeing, but I have spotted 2 issues that are definitely obstructing your path to a solution.\r\n\r\nAnalyzing the [Lucene.Net.Replicator.AspNetCore](https://github.com/apache/lucenenet/tree/146d7d052db27d78726697c7c777915abceede25/src/dotnet/Lucene.Net.Replicator.AspNetCore) project might also prove helpful.\r\n\r\n### InfoStream\r\n\r\n`InfoStream` acts like any other stream. It doesn't collect information, but it passes information along to another source. \r\n\r\nFor performance reasons, the `ReplicationClient.InfoStream` property uses `InfoStream.NO_OUTPUT` by default. To receive `InfoStream` messages, you need to set it to another `InfoStream` implementation. For example, to write to the console output, you would need to set it an instance of `TextWriterInfoStream` that wraps `Console.Out`.\r\n\r\n```c#\r\n    var client = new ReplicationClient(replicator,\r\n        new IndexReplicationHandler(handlerIndexDir, () => Notify()), new PerSessionDirectoryFactory(workingPath));\r\n\r\n// For optimal performance in production, InfoStream should not be enabled in the release.\r\n// Although, you may wish to add a configuration switch to your application instead of using #if DEBUG\r\n// to make troubleshooting easier in a release build.\r\n#if DEBUG\r\n    // Write any InfoStream messages to the console output\r\n    client.InfoStream = new TextWriterInfoStream(Console.Out);\r\n#endif\r\n```\r\n\r\nAnd of course, this line will still do nothing, so it can be removed:\r\n\r\n```c#\r\nConsole.WriteLine(client.InfoStream.ToString());\r\n```\r\n\r\n### Machine-Independent Paths\r\n\r\nLinux won't recognize the paths you have setup as constants. An approach you could use to create machine-independent paths is to use the [Environment.GetFolderPath](https://docs.microsoft.com/en-us/dotnet/api/system.environment.getfolderpath?view=netcore-3.1#System_Environment_GetFolderPath_System_Environment_SpecialFolder_) method.\r\n\r\n```c#\r\nvar commonApplicationDataDir = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);\r\n\r\nvar handlerIndexDir = Path.Combine(commonApplicationDataDir, \"LuceneIndexes/handler\");\r\nvar workingPathDir = Path.Combine(commonApplicationDataDir, \"LuceneIndexes/clientWorkDir\");\r\n```\r\n\r\nSee [Environment.SpecialFolder Enum](https://docs.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=netcore-3.1) for additional options.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719897260/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719999901","html_url":"https://github.com/apache/lucenenet/issues/382#issuecomment-719999901","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/382","id":719999901,"node_id":"MDEyOklzc3VlQ29tbWVudDcxOTk5OTkwMQ==","user":{"login":"mypolat","id":4419113,"node_id":"MDQ6VXNlcjQ0MTkxMTM=","avatar_url":"https://avatars.githubusercontent.com/u/4419113?v=4","gravatar_id":"","url":"https://api.github.com/users/mypolat","html_url":"https://github.com/mypolat","followers_url":"https://api.github.com/users/mypolat/followers","following_url":"https://api.github.com/users/mypolat/following{/other_user}","gists_url":"https://api.github.com/users/mypolat/gists{/gist_id}","starred_url":"https://api.github.com/users/mypolat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mypolat/subscriptions","organizations_url":"https://api.github.com/users/mypolat/orgs","repos_url":"https://api.github.com/users/mypolat/repos","events_url":"https://api.github.com/users/mypolat/events{/privacy}","received_events_url":"https://api.github.com/users/mypolat/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-10-31T23:08:33Z","updated_at":"2020-10-31T23:08:33Z","author_association":"NONE","body":"Thank you. As you suggested, I get directories from environment enums now.\r\n\r\nI understood my problem. I applied the solution and it was fixed. The problem was that the **LocalReplicator** I used in Startup and the **LocalReplicator** I indexed the document was not common. I realized it must be common. When I defined LocalReplicator as Static, the problem was solved. I was able to replicate. (Is this a correct determination? And a correct solution?)\r\n\r\nBut now I have caused another problem. My API takes the index name from outside. The user can dynamically index. If I want to add a new record to the same index, I get the error \"cannot compare IndexCommits from different Directory instances\". I re-create IndexWriter and directory for each request.\r\n\r\nWhat can I do to overcome this problem and provide editing?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/719999901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/720083546","html_url":"https://github.com/apache/lucenenet/issues/382#issuecomment-720083546","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/382","id":720083546,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMDA4MzU0Ng==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-01T12:52:56Z","updated_at":"2020-11-01T12:52:56Z","author_association":"CONTRIBUTOR","body":"First and foremost, you probably need to describe your scenario a bit more so we know what you are trying to achieve over all, as it stands there is a few things that goes against common recommendations. Also for what is described in https://github.com/apache/lucenenet/blob/master/src/Lucene.Net.Replicator/Http/replicator.md it really only provides the most basic example so that people can get started using the replicator.\r\n\r\nI don't know if this crude sample can help you: https://github.com/jeme/LuceneNet.ReplicatorSample\r\nIt uses a class called DataIngestSimulator to simulate changes over time to each index. (An update to a random number of documents each 30 seconds).\r\n\r\nWhen you say that the user can dynamically index, what do you exactly mean?... Are you simply trying to provide the users with Real-time search, as in the user may update a document/an entity of some sort which you then want to index and make available right away? or are you referring to something else?\r\n\r\nYou should avoid recreating your Index writers unless they experience an error (e.g. OutOfMemmoryExceptions) and share them across all indexing, (That is one writer Per index in your case).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/720083546/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":1,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/720782173","html_url":"https://github.com/apache/lucenenet/issues/382#issuecomment-720782173","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/382","id":720782173,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMDc4MjE3Mw==","user":{"login":"mypolat","id":4419113,"node_id":"MDQ6VXNlcjQ0MTkxMTM=","avatar_url":"https://avatars.githubusercontent.com/u/4419113?v=4","gravatar_id":"","url":"https://api.github.com/users/mypolat","html_url":"https://github.com/mypolat","followers_url":"https://api.github.com/users/mypolat/followers","following_url":"https://api.github.com/users/mypolat/following{/other_user}","gists_url":"https://api.github.com/users/mypolat/gists{/gist_id}","starred_url":"https://api.github.com/users/mypolat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mypolat/subscriptions","organizations_url":"https://api.github.com/users/mypolat/orgs","repos_url":"https://api.github.com/users/mypolat/repos","events_url":"https://api.github.com/users/mypolat/events{/privacy}","received_events_url":"https://api.github.com/users/mypolat/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-02T23:23:38Z","updated_at":"2020-11-02T23:23:38Z","author_association":"NONE","body":"> First and foremost, you probably need to describe your scenario a bit more so we know what you are trying to achieve over all, as it stands there is a few things that goes against common recommendations. Also for what is described in https://github.com/apache/lucenenet/blob/master/src/Lucene.Net.Replicator/Http/replicator.md it really only provides the most basic example so that people can get started using the replicator.\r\n> \r\n> I don't know if this crude sample can help you: https://github.com/jeme/LuceneNet.ReplicatorSample\r\n> It uses a class called DataIngestSimulator to simulate changes over time to each index. (An update to a random number of documents each 30 seconds).\r\n> \r\n> When you say that the user can dynamically index, what do you exactly mean?... Are you simply trying to provide the users with Real-time search, as in the user may update a document/an entity of some sort which you then want to index and make available right away? or are you referring to something else?\r\n> \r\n> You should avoid recreating your Index writers unless they experience an error (e.g. OutOfMemmoryExceptions) and share them across all indexing, (That is one writer Per index in your case).\r\n\r\nThe project you created has been very useful for me, thank you.  I completed my shortcomings from there. My project is working as I want right now.\r\n\r\nSo is the scenario below possible with Lucene .Net?\r\n\r\nA master, slave B and C\r\nB master, slave A and C\r\nC master, slave A and B\r\nThere will be always 2 copies.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/720782173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/720994317","html_url":"https://github.com/apache/lucenenet/issues/382#issuecomment-720994317","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/382","id":720994317,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMDk5NDMxNw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-03T09:12:35Z","updated_at":"2020-11-03T09:15:18Z","author_association":"CONTRIBUTOR","body":"Yes that will certainly be possible, but it's up to you to implement the details. And there is very likely going to be some \"Gotchas\" you have to coin out along the way.\r\n\r\nThe obvious approach here would be to have a configuration which defines what indexes a node are master of and which indexes it should replicate from a different master.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/720994317/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/721417777","html_url":"https://github.com/apache/lucenenet/pull/376#issuecomment-721417777","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/376","id":721417777,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMTQxNzc3Nw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-03T22:57:54Z","updated_at":"2020-11-03T22:57:54Z","author_association":"CONTRIBUTOR","body":"Thanks again for identifying this, but I beat you to it in #384 :).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/721417777/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/721445172","html_url":"https://github.com/apache/lucenenet/pull/376#issuecomment-721445172","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/376","id":721445172,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMTQ0NTE3Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-04T00:26:18Z","updated_at":"2020-11-04T00:26:18Z","author_association":"CONTRIBUTOR","body":"BTW - this is the 3rd boxing issue that has been found recently. Be on the lookout for more. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/721445172/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/721494674","html_url":"https://github.com/apache/lucenenet/pull/371#issuecomment-721494674","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/371","id":721494674,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMTQ5NDY3NA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-04T03:41:42Z","updated_at":"2020-11-04T03:41:42Z","author_association":"CONTRIBUTOR","body":"Thanks. I finally had a chance to take a close look at this. Since adding the delegate was a recent change in https://github.com/apache/lucenenet/pull/348/commits/34758c1315391794825f33a3f48b5a3dd6083745 (pull #348), I ran benchmarks both on reverting that commit vs the changes in this PR (both rebased against master).\r\n\r\n## Benchmarks\r\n\r\n### IndexFiles\r\n<details>\r\n  <summary>Click to expand</summary>\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1082 (1909/November2018Update/19H2)\r\nIntel Core i7-8850H CPU 2.60GHz (Coffee Lake), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.1.403\r\n  [Host]                                : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00005                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00006                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00007                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00008                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00009                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00010                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00011                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00012                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-wip00_before_GH-370             : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-wip01_revertdelegates_GH-370    : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-wip02_refactorfieldcache_GH-370 : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n\r\nInvocationCount=1  IterationCount=15  LaunchCount=2  \r\nUnrollFactor=1  WarmupCount=10  \r\n\r\n```\r\n|     Method |                                   Job |                               NuGetReferences |     Mean |    Error |   StdDev |      Gen 0 |     Gen 1 |     Gen 2 | Allocated |\r\n|----------- |-------------------------------------- |---------------------------------------------- |---------:|---------:|---------:|-----------:|----------:|----------:|----------:|\r\n| IndexFiles |                       4.8.0-beta00005 |    Lucene.Net.Analysis.Common 4.8.0-beta00005 | 687.7 ms | 12.01 ms | 16.44 ms | 43000.0000 | 8000.0000 | 7000.0000 | 220.89 MB |\r\n| IndexFiles |                       4.8.0-beta00006 |    Lucene.Net.Analysis.Common 4.8.0-beta00006 | 683.8 ms | 15.25 ms | 21.88 ms | 43000.0000 | 8000.0000 | 7000.0000 | 220.94 MB |\r\n| IndexFiles |                       4.8.0-beta00007 |    Lucene.Net.Analysis.Common 4.8.0-beta00007 | 680.3 ms | 13.02 ms | 19.49 ms | 44000.0000 | 8000.0000 | 7000.0000 |    221 MB |\r\n| IndexFiles |                       4.8.0-beta00008 |    Lucene.Net.Analysis.Common 4.8.0-beta00008 | 672.6 ms | 13.61 ms | 18.64 ms | 44000.0000 | 8000.0000 | 7000.0000 | 221.39 MB |\r\n| IndexFiles |                       4.8.0-beta00009 |    Lucene.Net.Analysis.Common 4.8.0-beta00009 | 704.5 ms | 35.29 ms | 51.73 ms | 44000.0000 | 8000.0000 | 7000.0000 | 221.28 MB |\r\n| IndexFiles |                       4.8.0-beta00010 |    Lucene.Net.Analysis.Common 4.8.0-beta00010 | 674.4 ms | 11.88 ms | 17.41 ms | 44000.0000 | 8000.0000 | 7000.0000 | 221.23 MB |\r\n| IndexFiles |                       4.8.0-beta00011 |    Lucene.Net.Analysis.Common 4.8.0-beta00011 | 675.7 ms | 13.38 ms | 19.61 ms | 44000.0000 | 8000.0000 | 7000.0000 | 221.29 MB |\r\n| IndexFiles |                       4.8.0-beta00012 |    Lucene.Net.Analysis.Common 4.8.0-beta00012 | 701.7 ms |  9.53 ms | 13.05 ms | 56000.0000 | 7000.0000 | 6000.0000 |    287 MB |\r\n| IndexFiles |             4.8.0-wip00_before_GH-370 | Lucene.Net.Analysis.Common 4.8.0-ci0000002208 | 673.6 ms |  7.85 ms | 11.00 ms | 43000.0000 | 8000.0000 | 7000.0000 | 220.03 MB |\r\n| IndexFiles |    4.8.0-wip01_revertdelegates_GH-370 | Lucene.Net.Analysis.Common 4.8.0-ci0000002212 | 673.7 ms | 20.74 ms | 29.08 ms | 44000.0000 | 8000.0000 | 7000.0000 | 220.16 MB |\r\n| IndexFiles | 4.8.0-wip02_refactorfieldcache_GH-370 | Lucene.Net.Analysis.Common 4.8.0-ci0000002213 | 671.3 ms | 15.92 ms | 22.31 ms | 44000.0000 | 8000.0000 | 7000.0000 | 220.17 MB |\r\n\r\n</details>\r\n\r\n### SearchFiles\r\n<details>\r\n  <summary>Click to expand</summary>\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1082 (1909/November2018Update/19H2)\r\nIntel Core i7-8850H CPU 2.60GHz (Coffee Lake), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.1.403\r\n  [Host]                                : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00005                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00006                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00007                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00008                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00009                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00010                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00011                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-beta00012                       : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-wip00_before_GH-370             : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-wip01_revertdelegates_GH-370    : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n  4.8.0-wip02_refactorfieldcache_GH-370 : .NET Core 3.1.9 (CoreCLR 4.700.20.47201, CoreFX 4.700.20.47203), X64 RyuJIT\r\n\r\nIterationCount=15  LaunchCount=2  WarmupCount=10  \r\n\r\n```\r\n|      Method |                                   Job |                                                                         NuGetReferences |      Mean |    Error |    StdDev |     Gen 0 |    Gen 1 | Gen 2 | Allocated |\r\n|------------ |-------------------------------------- |---------------------------------------------------------------------------------------- |----------:|---------:|----------:|----------:|---------:|------:|----------:|\r\n| SearchFiles |                       4.8.0-beta00005 |       Lucene.Net.Analysis.Common 4.8.0-beta00005,Lucene.Net.QueryParser 4.8.0-beta00005 | 142.74 ms | 3.010 ms |  4.317 ms | 8750.0000 | 500.0000 |     - |  41.39 MB |\r\n| SearchFiles |                       4.8.0-beta00006 |       Lucene.Net.Analysis.Common 4.8.0-beta00006,Lucene.Net.QueryParser 4.8.0-beta00006 | 145.19 ms | 4.234 ms |  6.206 ms | 8750.0000 | 500.0000 |     - |  41.37 MB |\r\n| SearchFiles |                       4.8.0-beta00007 |       Lucene.Net.Analysis.Common 4.8.0-beta00007,Lucene.Net.QueryParser 4.8.0-beta00007 | 145.13 ms | 3.663 ms |  5.253 ms | 8750.0000 | 250.0000 |     - |  41.26 MB |\r\n| SearchFiles |                       4.8.0-beta00008 |       Lucene.Net.Analysis.Common 4.8.0-beta00008,Lucene.Net.QueryParser 4.8.0-beta00008 |  93.55 ms | 9.737 ms | 14.273 ms | 8666.6667 | 500.0000 |     - |  40.33 MB |\r\n| SearchFiles |                       4.8.0-beta00009 |       Lucene.Net.Analysis.Common 4.8.0-beta00009,Lucene.Net.QueryParser 4.8.0-beta00009 |  86.96 ms | 2.683 ms |  3.848 ms | 8666.6667 | 500.0000 |     - |  40.33 MB |\r\n| SearchFiles |                       4.8.0-beta00010 |       Lucene.Net.Analysis.Common 4.8.0-beta00010,Lucene.Net.QueryParser 4.8.0-beta00010 |  93.86 ms | 2.843 ms |  4.256 ms | 8600.0000 |        - |     - |   40.2 MB |\r\n| SearchFiles |                       4.8.0-beta00011 |       Lucene.Net.Analysis.Common 4.8.0-beta00011,Lucene.Net.QueryParser 4.8.0-beta00011 |  93.08 ms | 3.083 ms |  4.518 ms | 8666.6667 | 500.0000 |     - |  40.19 MB |\r\n| SearchFiles |                       4.8.0-beta00012 |       Lucene.Net.Analysis.Common 4.8.0-beta00012,Lucene.Net.QueryParser 4.8.0-beta00012 |  97.00 ms | 5.825 ms |  8.719 ms | 8833.3333 | 333.3333 |     - |  40.81 MB |\r\n| SearchFiles |             4.8.0-wip00_before_GH-370 | Lucene.Net.Analysis.Common 4.8.0-ci0000002208,Lucene.Net.QueryParser 4.8.0-ci0000002208 |  86.74 ms | 0.621 ms |  0.891 ms | 7000.0000 | 333.3333 |     - |  33.17 MB |\r\n| SearchFiles |    4.8.0-wip01_revertdelegates_GH-370 | Lucene.Net.Analysis.Common 4.8.0-ci0000002212,Lucene.Net.QueryParser 4.8.0-ci0000002212 |  85.16 ms | 1.542 ms |  2.307 ms | 7000.0000 | 333.3333 |     - |  33.17 MB |\r\n| SearchFiles | 4.8.0-wip02_refactorfieldcache_GH-370 | Lucene.Net.Analysis.Common 4.8.0-ci0000002213,Lucene.Net.QueryParser 4.8.0-ci0000002213 |  84.36 ms | 1.144 ms |  1.677 ms | 7000.0000 | 333.3333 |     - |  33.17 MB |\r\n\r\n</details>\r\n\r\n\r\nWhile the results do show a minor performance gain, the margin of error accounts for nearly all of it. Unlike removing other delegates in #383, we are not seeing a significant drop in memory allocations when doing \"basic\" benchmarks.\r\n\r\n## Failing Tests\r\n\r\nThis PR has introduced 5 new failing tests.\r\n\r\n![image](https://user-images.githubusercontent.com/1538288/98062759-35f81f80-1e81-11eb-87be-bee3f701d40f.png)\r\n\r\nYou can view the details of these failures at https://dev.azure.com/LuceneNET-Temp/Lucene.NET/_build/results?buildId=1170&view=ms.vss-test-web.build-test-results-tab\r\n\r\n## Double-caching\r\n\r\nWhile I don't know for a fact that this is a problem, the comments indicate these values are already cached.\r\n\r\n```c#\r\n                // Not cached here by FieldCacheImpl (cached instead\r\n                // per-thread by SegmentReader):\r\n```\r\n\r\nDigging into `SegmentReader`, there are 2 caches both of which use `ThreadLocal<T>`. I suspect that one of those caches is what the comment refers to. Putting these instances into a static variable and reusing them across threads seems like it might introduce a thread safety problem.\r\n\r\n## Summary\r\n\r\nBasically, our three options boil down to:\r\n\r\n1. Leave `FieldCacheImpl` as-is\r\n2. Revert https://github.com/apache/lucenenet/pull/348/commits/34758c1315391794825f33a3f48b5a3dd6083745\r\n3. Fix the failing tests and keep this design change\r\n\r\nChanging to use delegates rather than using concrete subclasses was done deliberately to reduce the number of classes to maintain. So, the choice with reverting https://github.com/apache/lucenenet/pull/348/commits/34758c1315391794825f33a3f48b5a3dd6083745 is raw performance vs maintainability. I am on the fence, but since the gains of reverting it are marginal at best, I am leaning toward leaving it as-is.\r\n\r\nChanging the design to this PR means diverging from the Lucene source. It will be slightly more of a maintenance burden to upgrade to the next version of Lucene. While this is something that can be seriously considered if the performance gains are significant enough, there doesn't seem to be enough of a gain here to warrant the design change (not to mention the failing tests). These benchmarks are very narrowly scoped, though. If there is another metric that can be benchmarked that shows a significant gain, then we can reconsider.\r\n\r\nThat being said, don't be discouraged by this. While we haven't been able to use very many of your commits so far, the fact that you are identifying new issues that were previously unknown makes your contributions to Lucene.NET valuable. We have already improved search performance by around 10% over 4.8.0-beta00012 thanks in part to your help.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/721494674/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/721908527","html_url":"https://github.com/apache/lucenenet/issues/296#issuecomment-721908527","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/296","id":721908527,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMTkwODUyNw==","user":{"login":"AntonOttoW","id":28915136,"node_id":"MDQ6VXNlcjI4OTE1MTM2","avatar_url":"https://avatars.githubusercontent.com/u/28915136?v=4","gravatar_id":"","url":"https://api.github.com/users/AntonOttoW","html_url":"https://github.com/AntonOttoW","followers_url":"https://api.github.com/users/AntonOttoW/followers","following_url":"https://api.github.com/users/AntonOttoW/following{/other_user}","gists_url":"https://api.github.com/users/AntonOttoW/gists{/gist_id}","starred_url":"https://api.github.com/users/AntonOttoW/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AntonOttoW/subscriptions","organizations_url":"https://api.github.com/users/AntonOttoW/orgs","repos_url":"https://api.github.com/users/AntonOttoW/repos","events_url":"https://api.github.com/users/AntonOttoW/events{/privacy}","received_events_url":"https://api.github.com/users/AntonOttoW/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-04T18:47:44Z","updated_at":"2020-11-04T18:53:24Z","author_association":"NONE","body":"In my case, when doing a fuzzy search using 4.8.0-beta00012 and doing load testing I get the IndexOutOfRangeException with the following stack trace:\r\n\r\n   at Lucene.Net.Util.Automaton.UTF32ToUTF8.Convert(Automaton utf32)\r\n   at Lucene.Net.Util.Automaton.CompiledAutomaton..ctor(Automaton automaton, Nullable`1 finite, Boolean simplify)\r\n   at Lucene.Net.Search.FuzzyTermsEnum.InitAutomata(Int32 maxDistance)\r\n   at Lucene.Net.Search.FuzzyTermsEnum.GetAutomatonEnum(Int32 editDistance, BytesRef lastTerm)\r\n   at Lucene.Net.Search.FuzzyTermsEnum.MaxEditDistanceChanged(BytesRef lastTerm, Int32 maxEdits, Boolean init)\r\n   at Lucene.Net.Search.FuzzyTermsEnum..ctor(Terms terms, AttributeSource atts, Term term, Single minSimilarity, Int32 prefixLength, Boolean transpositions)\r\n   at Lucene.Net.Search.FuzzyQuery.GetTermsEnum(Terms terms, AttributeSource atts)\r\n   at Lucene.Net.Search.TermCollectingRewrite`1.CollectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector)\r\n   at Lucene.Net.Search.TopTermsRewrite`1.Rewrite(IndexReader reader, MultiTermQuery query)\r\n   at Lucene.Net.Search.BooleanQuery.Rewrite(IndexReader reader)\r\n   at Lucene.Net.Search.BooleanQuery.Rewrite(IndexReader reader)\r\n   at Lucene.Net.Search.FilteredQuery.Rewrite(IndexReader reader)\r\n   at Lucene.Net.Search.IndexSearcher.Rewrite(Query original)\r\n   at Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query query)\r\n   at Lucene.Net.Search.IndexSearcher.Search(Query query, Filter filter, Int32 n, Sort sort)\r\n\r\nI'm running a thousand requests that is ramped up over 60 seconds. I then get an error rate of about 20 to 30 percent. \r\n\r\nI then included a retry whenever I catch this exception and have brought the error rate down to 1 to 2 percent. (I don't count the errors in the retries and only the ones that didn't return success after 3 attempts)\r\n\r\nInteresting thing is, when I removed the fuzzy search, I was able to do a 1000 successful requests. No issues.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/721908527/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722128836","html_url":"https://github.com/apache/lucenenet/issues/296#issuecomment-722128836","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/296","id":722128836,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMjEyODgzNg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-05T04:08:49Z","updated_at":"2020-11-05T04:08:49Z","author_association":"CONTRIBUTOR","body":"@willson556 \r\n\r\nThanks for submitting a working failure case. I was able to use it to create a test project that contained a failing test. From there, I was able to confirm that the error was introduced between 4.8.0-beta00007 and 4.8.0-beta00008 and by using git's detached mode the issue was traced to commit https://github.com/apache/lucenenet/commit/0eaf76540b8de326d1aa9ca24f4b5d6425a9ae38. Unfortunately, I had to start all over again at that point, since it was a merge of 60 commits, but eventually I ended up here: https://github.com/apache/lucenenet/commit/e1ead061df6ab5371979040ae8071b1bf8b18070.\r\n\r\nIt turned out to be a simple misinterpretation that `id` means \"unique\", when in fact the object reference was the unique identifier that should be used in the `Equals()` implementation.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722128836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722262837","html_url":"https://github.com/apache/lucenenet/issues/306#issuecomment-722262837","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/306","id":722262837,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMjI2MjgzNw==","user":{"login":"TheBeardedLlama","id":1180470,"node_id":"MDQ6VXNlcjExODA0NzA=","avatar_url":"https://avatars.githubusercontent.com/u/1180470?v=4","gravatar_id":"","url":"https://api.github.com/users/TheBeardedLlama","html_url":"https://github.com/TheBeardedLlama","followers_url":"https://api.github.com/users/TheBeardedLlama/followers","following_url":"https://api.github.com/users/TheBeardedLlama/following{/other_user}","gists_url":"https://api.github.com/users/TheBeardedLlama/gists{/gist_id}","starred_url":"https://api.github.com/users/TheBeardedLlama/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TheBeardedLlama/subscriptions","organizations_url":"https://api.github.com/users/TheBeardedLlama/orgs","repos_url":"https://api.github.com/users/TheBeardedLlama/repos","events_url":"https://api.github.com/users/TheBeardedLlama/events{/privacy}","received_events_url":"https://api.github.com/users/TheBeardedLlama/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-05T09:40:45Z","updated_at":"2020-11-05T09:40:45Z","author_association":"NONE","body":"Before putting any more work into nunit, I'd recommend giving xunit a go\r\n\r\nI've always preferred it over nunit (and mstest)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722262837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722386553","html_url":"https://github.com/apache/lucenenet/pull/386#issuecomment-722386553","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/386","id":722386553,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMjM4NjU1Mw==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-05T13:44:11Z","updated_at":"2020-11-05T13:44:11Z","author_association":"CONTRIBUTOR","body":"\"The presumption that the id would be unique. It turns out that the unique identifier is the object reference and id might have collisions.\"  Wow, tracking that down is impressive.  Amazing work.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722386553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722408852","html_url":"https://github.com/apache/lucenenet/issues/306#issuecomment-722408852","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/306","id":722408852,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMjQwODg1Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-05T14:21:59Z","updated_at":"2020-11-05T14:21:59Z","author_association":"CONTRIBUTOR","body":"The Lucene [test framework](https://www.nuget.org/packages/Lucene.Net.TestFramework) is unique in that it is a component that is meant for use by end users as well as our own tests. I did some research, and I cannot find another example of this on the .NET platform - it is unprecedented. In Java, the test framework uses a custom runner called [Randomized Testing](https://github.com/randomizedtesting/randomizedtesting) that is built on top of JUnit using its extensibility. The framework is inheritance-based, uses its own random seed functionality, and has its own attributes it needs to scan for during the test life cycle. Putting in enough functionality to actually debug the random tests (by outputting the random seed that was used during a failure so it can be plugged back in to debug) is a problem that still [hasn't been completely solved yet](https://github.com/apache/lucenenet/issues/288).\r\n\r\nI [asked the NUnit team](https://github.com/nunit/nunit/issues/3405), and they don't currently support the extensibility points to build your own test runner. So, in the spirit of not re-inventing the wheel we are trying to make do with only NUnit's features out of the box. Not all of the features of the test framework are supported this way (such as running the tests in a random order), but I believe we have enough of them to get by without our own test runner. NUnit is the only framework that comes close to being able to support an inheritance-based framework without a ton of research and tradeoffs.\r\n\r\nIn case you haven't been following along for the past few years, @conniey worked on converting to xUnit for several months back in 2016-2017 and ultimately came to the conclusion that it wasn't possible. But I believe she was trying to take advantage of xUnit's parallel features.\r\n\r\nIn 2019, we tried converting the test framework to both [xUnit](https://github.com/apache/lucenenet/tree/6ea55d1bcacd9322f10b696e3eee4462905a1479/src/Lucene.Net.Tests.TestFramework.xUnit) and [MSTest](https://github.com/apache/lucenenet/tree/6ea55d1bcacd9322f10b696e3eee4462905a1479/src/Lucene.Net.Tests.TestFramework.MSTest) in addition to NUnit.\r\n\r\nMSTest was completely impossible to support due to the fact that it doesn't scan for its own attributes in base classes. Maybe that has changed, but it wasn't possible in 2019.\r\n\r\nxUnit forces you to inject state into the constructor in order to get any control over what would ordinarily be `[BeforeClass]` and `[AfterClass]` attributes. This puts an unnecessary burden on end users who then have to pass your state object in order to inherit your base class. I did determine that it may be possible to make our tests run with xUnit by turning off its parallel feature and it may even be possible to support parallel testing by refactoring several of Lucene's classes to inject state rather than relying on static variables. However, I am not sure if all of the test framework features we need could be supported. xUnit wasn't designed with an inheritance-based test framework that is meant for 3rd parties in mind, and you have to manually do a lot of the things that are included right out of the box with NUnit, such as scanning for custom-made attributes.\r\n\r\nUltimately, xUnit will be a lot more work to support than NUnit, and the fact that xUnit doesn't support an inheritance-based model that \"just works\" without forcing end users to override your constructor makes it less desirable than NUnit.\r\n\r\nSo, after over a year of research and trial and err, we determined that:\r\n\r\n1. For the short term at least through to the 4.8.0 release, NUnit is our only viable choice of the top 3 test frameworks\r\n2. For the long term, it would be better to [port Randomized Testing](https://github.com/apache/lucenenet/issues/288) so we can fully support debugging random tests, but we would have to work closely with the NUnit team to ensure there is enough extensibility to support it","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722408852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722427946","html_url":"https://github.com/apache/lucenenet/pull/386#issuecomment-722427946","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/386","id":722427946,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMjQyNzk0Ng==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-05T14:53:16Z","updated_at":"2020-11-05T14:53:16Z","author_association":"CONTRIBUTOR","body":"@rclabo - Thanks Rob. It certainly wasn't the faulty end index conversion math I was expecting it to be. Without a reliable red/green indicator and the knowledge that prior versions didn't present the problem, this would have been much more difficult to track down. Fortunately, Git is a wonderful debugging tool if you are armed with that arsenal.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722427946/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722508693","html_url":"https://github.com/apache/lucenenet/issues/296#issuecomment-722508693","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/296","id":722508693,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMjUwODY5Mw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-05T17:04:08Z","updated_at":"2020-11-05T17:04:08Z","author_association":"CONTRIBUTOR","body":"BTW - if anyone wants to try out these changes before they are rolled into a release to confirm it is a complete fix, the NuGet packages can be downloaded from the `nuget` artifact here: https://dev.azure.com/LuceneNET-Temp/Lucene.NET/_build/results?buildId=1171&view=artifacts&type=publishedArtifacts","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722508693/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722520071","html_url":"https://github.com/apache/lucenenet/issues/333#issuecomment-722520071","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/333","id":722520071,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMjUyMDA3MQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-05T17:22:33Z","updated_at":"2020-11-05T17:22:33Z","author_association":"CONTRIBUTOR","body":"Since this is not really a fair comparison (4.x+ is a completely different design than 3.x) and as others pointed out there is probably something misconfigured or misused to see results like what you are seeing, I am considering this matter closed. But as @jeme pointed out, you might be more successful getting help with the issue if you post some code.\r\n\r\nHowever, since this seems to be more of a usability issue than an actual bug, it doesn't belong here, either ask on StackOverflow or on the [user mailing list](https://lucenenet.apache.org/contributing/mailing-lists.html).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/722520071/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/723422073","html_url":"https://github.com/apache/lucenenet/issues/319#issuecomment-723422073","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/319","id":723422073,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMzQyMjA3Mw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-07T09:17:17Z","updated_at":"2020-11-07T09:17:17Z","author_association":"CONTRIBUTOR","body":"@eladmarg \r\n\r\nI have tracked down issue #296 which also started to appear on 4.8.0-beta00008 and didn't occur on 4.8.0-beta00007. Could you download the packages from the `nuget` artifact [here](https://dev.azure.com/LuceneNET-Temp/Lucene.NET/_build/results?buildId=1171&view=artifacts&type=publishedArtifacts) to see if this problem still exists?\r\n\r\nIf this issue still exists, it may be possible to trace it to a commit if you can provide a console app and the data that causes it to fail.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/723422073/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/723428344","html_url":"https://github.com/apache/lucenenet/issues/319#issuecomment-723428344","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/319","id":723428344,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMzQyODM0NA==","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-07T10:28:54Z","updated_at":"2020-11-07T10:28:54Z","author_association":"CONTRIBUTOR","body":"Thanks for the update, \nI'll deploy next release and hope this will be resolved \n\nIt's happening very rarely on production with high frequency request rates \n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/723428344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/724121424","html_url":"https://github.com/apache/lucenenet/pull/371#issuecomment-724121424","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/371","id":724121424,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNDEyMTQyNA==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-09T16:26:27Z","updated_at":"2020-11-09T16:26:27Z","author_association":"CONTRIBUTOR","body":"Hi @NightOwl888 - sorry for the long time since my last answer - but I was off last week on long due holidays :)\r\n\r\nI think this change is significant for our usage of Lucene, but probably is not captured by the benchmark as they only enumerate some results. \r\n\r\nOn our use-case, we often need to enumerate all hits up to a limit (usually hundreds of thousands) - and read the value of an identifier field to match with our data for further processing - which is what causes the large number of calls to this method. I can try to push a new benchmark to reflect that, but measuring locally running our code directly referencing the Lucene projects instead of the nuget package gave us a significant reduction in allocations.\r\n\r\n\r\n\r\n ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/724121424/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/724122083","html_url":"https://github.com/apache/lucenenet/pull/371#issuecomment-724122083","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/371","id":724122083,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNDEyMjA4Mw==","user":{"login":"theolivenbaum","id":8791811,"node_id":"MDQ6VXNlcjg3OTE4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/8791811?v=4","gravatar_id":"","url":"https://api.github.com/users/theolivenbaum","html_url":"https://github.com/theolivenbaum","followers_url":"https://api.github.com/users/theolivenbaum/followers","following_url":"https://api.github.com/users/theolivenbaum/following{/other_user}","gists_url":"https://api.github.com/users/theolivenbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/theolivenbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theolivenbaum/subscriptions","organizations_url":"https://api.github.com/users/theolivenbaum/orgs","repos_url":"https://api.github.com/users/theolivenbaum/repos","events_url":"https://api.github.com/users/theolivenbaum/events{/privacy}","received_events_url":"https://api.github.com/users/theolivenbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-09T16:27:32Z","updated_at":"2020-11-09T16:27:32Z","author_association":"CONTRIBUTOR","body":"BTW - no worries reg. the comments - happy to keep contributing on my spare time as possible - will do some catch up on the feedback on the other PRs to see what I missed since I was off!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/724122083/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/724987108","html_url":"https://github.com/apache/lucenenet/pull/371#issuecomment-724987108","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/371","id":724987108,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNDk4NzEwOA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-10T21:48:51Z","updated_at":"2020-11-10T21:48:51Z","author_association":"CONTRIBUTOR","body":"@theolivenbaum \r\n\r\nI just submitted PR #389 and noticed while I was writing it up that you replied here. I am working on getting a release vote started in the next few days, so I put together a PR that reverts the commit https://github.com/apache/lucenenet/commit/34758c1315391794825f33a3f48b5a3dd6083745. Rolling back the change for the release is the safest route, because it has already been thoroughly tested.\r\n\r\n> measuring locally running our code directly referencing the Lucene projects instead of the nuget package gave us a significant reduction in allocations.\r\n\r\nGood to hear. That boxing issue was the main culprit - it reduced RAM consumption by around 15%. But changing to use generic parameters on `Debugging.Assert` also helped a lot. On the testing side things slowed down by about 15% when running tests locally, but on Azure DevOps the tests are averaging about 10% faster.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/724987108/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/725953565","html_url":"https://github.com/apache/lucenenet/pull/371#issuecomment-725953565","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/371","id":725953565,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNTk1MzU2NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-12T09:21:49Z","updated_at":"2020-11-12T09:21:49Z","author_association":"CONTRIBUTOR","body":"Fixed in #389","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/725953565/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/725953778","html_url":"https://github.com/apache/lucenenet/issues/370#issuecomment-725953778","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/370","id":725953778,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNTk1Mzc3OA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-12T09:22:10Z","updated_at":"2020-11-12T09:22:10Z","author_association":"CONTRIBUTOR","body":"Fixed in #389","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/725953778/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729237598","html_url":"https://github.com/apache/lucenenet/issues/380#issuecomment-729237598","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/380","id":729237598,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTIzNzU5OA==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-17T21:55:41Z","updated_at":"2020-11-17T21:55:41Z","author_association":"CONTRIBUTOR","body":"I'll have a look as soon as i can (this week hopefully)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729237598/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729422913","html_url":"https://github.com/apache/lucenenet/issues/380#issuecomment-729422913","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/380","id":729422913,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTQyMjkxMw==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-18T05:07:10Z","updated_at":"2020-11-18T05:07:10Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I have run the docs build locally based on this code in this PR https://github.com/apache/lucenenet/pull/391, it all worked well if you can test/merge?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729422913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729707063","html_url":"https://github.com/apache/lucenenet/pull/385#issuecomment-729707063","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/385","id":729707063,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTcwNzA2Mw==","user":{"login":"Semirk0","id":45509630,"node_id":"MDQ6VXNlcjQ1NTA5NjMw","avatar_url":"https://avatars.githubusercontent.com/u/45509630?v=4","gravatar_id":"","url":"https://api.github.com/users/Semirk0","html_url":"https://github.com/Semirk0","followers_url":"https://api.github.com/users/Semirk0/followers","following_url":"https://api.github.com/users/Semirk0/following{/other_user}","gists_url":"https://api.github.com/users/Semirk0/gists{/gist_id}","starred_url":"https://api.github.com/users/Semirk0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Semirk0/subscriptions","organizations_url":"https://api.github.com/users/Semirk0/orgs","repos_url":"https://api.github.com/users/Semirk0/repos","events_url":"https://api.github.com/users/Semirk0/events{/privacy}","received_events_url":"https://api.github.com/users/Semirk0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-18T14:17:06Z","updated_at":"2020-11-18T14:17:06Z","author_association":"CONTRIBUTOR","body":"Can you explain what you mean by \r\n\r\n> 3. Change logic of formattable `Field.ToString()` methods to test for `if (field is IFormattable formattable)`\r\n\r\nDo you mean to change logic in class `Field` or `Document`?\r\n\r\nAlso, I don't really understand 5. either. Especially \r\n\r\n> Therefore, the Document class will still only have 2 public overloads ToString() and ToString(IFormatProvider) that will cascade their call to an explictly implmented ToString(string, IFormatProvider) method.\r\n\r\nCan you elaborate?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729707063/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729904933","html_url":"https://github.com/apache/lucenenet/pull/385#issuecomment-729904933","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/385","id":729904933,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTkwNDkzMw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-18T19:30:55Z","updated_at":"2020-11-18T19:30:55Z","author_association":"CONTRIBUTOR","body":"I guess it is simpler just to show the code than to describe it.\r\n\r\nWe test for `IFormattable` in the if statement to make it an optional feature of implementations of either `IIndexableField` or `FieldsValue`. If the type implements `IFormattable`, we call `IFormattable.ToString(string, IFormatProvider)`. If not, we just skip formatting and call `ToString()` on the object. This makes it possible to use an `IIndexableField` implementation that has no `ToString()` implementations on it or to implement both `IIndexableField` and `IFormattable` to provide localizable formatting support.\r\n\r\n### In all implementations of IIndexableField (4 overloads of `ToString()`)\r\n\r\n```c#\r\npublic override string ToString()\r\n{\r\n    return ToString(null, J2N.Text.StringFormatter.CurrentCulture);\r\n}\r\n\r\npublic virtual string ToString(string format)\r\n{\r\n    return ToString(format, J2N.Text.StringFormatter.CurrentCulture);\r\n}\r\n\r\npublic virtual string ToString(IFormatProvider provider)\r\n{\r\n    return ToString(null, provider);\r\n}\r\n\r\npublic virtual string ToString(string format, IFormatProvider provider)\r\n{\r\n    StringBuilder result = new StringBuilder();\r\n    result.Append(m_type.ToString());\r\n    result.Append('<');\r\n    result.Append(m_name);\r\n    result.Append(':');\r\n\r\n    if (FieldsData != null)\r\n    {\r\n        if (FieldsData is IFormattable formattable)\r\n            result.Append(formattable.ToString(format, provider);\r\n        else\r\n            result.Append(FieldsData.ToString());\r\n    }\r\n\r\n    result.Append('>');\r\n    return result.ToString();\r\n}\r\n```\r\n\r\n### In Document (2 public and one hidden overload of `ToString()`)\r\n\r\n```c#\r\n\r\npublic override string ToString()\r\n{\r\n    return ToString(null, J2N.Text.StringFormatter.CurrentCulture);\r\n}\r\n\r\npublic virtual string ToString(IFormatProvider provider)\r\n{\r\n    return ToString(null, provider);\r\n}\r\n\r\nstring IFormattable.ToString(string format, IFormatProvider provider) // <- explicit implementation\r\n{\r\n    var buffer = new StringBuilder();\r\n    buffer.Append(\"Document<\");\r\n    for (int i = 0; i < fields.Count; i++)\r\n    {\r\n        IIndexableField field = fields[i];\r\n        if (field is IFormattable formattable)\r\n            buffer.Append(formattable.ToString(format, provider));\r\n        else\r\n            buffer.Append(field.ToString());\r\n        if (i != fields.Count - 1)\r\n        {\r\n            buffer.Append(\" \");\r\n        }\r\n    }\r\n    buffer.Append(\">\");\r\n    return buffer.ToString();\r\n}\r\n\r\n```\r\n\r\nBe sure that all built-in `IIndexableField` types, the `Field.Number` type, and `Document` all implement `IFormattable` themselves. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729904933/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729943873","html_url":"https://github.com/apache/lucenenet/pull/391#issuecomment-729943873","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/391","id":729943873,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTk0Mzg3Mw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-18T20:47:04Z","updated_at":"2020-11-18T20:47:04Z","author_association":"CONTRIBUTOR","body":"Thanks. This takes care of #380. \r\n\r\nI added a fix for trimming the trailing slash if the user enters one and also a hack for setting the environment variable, since the plugin doesn't read it from the command line version.\r\n\r\nThere are still a lot of links that aren't resolving ([example 1](https://lucenenet.apache.org/docs/4.8.0-beta00012/api/analysis-common/overview.html), [example 2](https://lucenenet.apache.org/docs/4.8.0-beta00012/api/facet/package.html), [example 3](https://lucenenet.apache.org/docs/4.8.0-beta00012/api/join/Lucene.Net.Join.html)), but this is not a new issue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/729943873/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733162314","html_url":"https://github.com/apache/lucenenet/issues/394#issuecomment-733162314","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/394","id":733162314,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzE2MjMxNA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-24T18:39:29Z","updated_at":"2020-11-24T18:39:29Z","author_association":"CONTRIBUTOR","body":"Thanks for the report.\r\n\r\nI suspect that VS2017 requires .NET Framework < 4.6.1 or .NET Standard 1.x in order for the Analyzers to function. Unfortunately, there doesn't seem to be any documentation on how to create a multi-targeted VS analyzer package, so the simplest course of action is to use a single target. Currently, we are targeting .NET Standard 2.0 because that is the version the [latest `Microsoft.CodeAnalysis.CSharp.Workspaces` package targets](https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp.Workspaces).\r\n\r\nIt is [Microsoft's recommendation to target .NET Standard 2.0 where possible and discontinue using .NET Standard 1.x](https://docs.microsoft.com/en-us/dotnet/standard/net-standard#which-net-standard-version-to-target) because of the number of extra dependencies in .NET Standard 1.x. However, I noticed that [Xunit.Analyzers is targeting .NET Standard 1.3](https://github.com/xunit/xunit.analyzers/blob/main/src/xunit.analyzers/xunit.analyzers.csproj) and [StyleCop is targeting .NET Standard 1.1 and .NET Framework 4.5.2](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/3c877565bcfeae0e737158d7c5a7092a87ef9186/StyleCop.Analyzers/StyleCop.Analyzers/StyleCop.Analyzers.csproj), although the only assembly that is shipped via NuGet is .NET Standard 1.1. This would seem to confirm my suspicion that .NET Standard 1.x is required for multi-targeting VS2017 and VS2019.\r\n\r\nSo, basically I believe the fix for VS2017 support will be:\r\n\r\n1. Change the `TargetFramework` of [`Lucene.Net.CodeAnalysis.CSharp`](https://github.com/apache/lucenenet/blob/8ad48e7ef73c62390fc1c8f2b6ca66d60eec44a8/src/dotnet/Lucene.Net.CodeAnalysis.CSharp/Lucene.Net.CodeAnalysis.CSharp.csproj#L25) and [`Lucene.Net.CodeAnalysis.VisualBasic`](https://github.com/apache/lucenenet/blob/8ad48e7ef73c62390fc1c8f2b6ca66d60eec44a8/src/dotnet/Lucene.Net.CodeAnalysis.VisualBasic/Lucene.Net.CodeAnalysis.VisualBasic.csproj#L25) to `netstandard1.3`.\r\n2. Change the [target version](https://github.com/apache/lucenenet/blob/8ad48e7ef73c62390fc1c8f2b6ca66d60eec44a8/build/Dependencies.props#L46-L47) of `Microsoft.CodeAnalysis.CSharp.Workspaces` and `Microsoft.CodeAnalysis.VisualBasic.Workspaces` to < 3.0.0.\r\n\r\n(unconfirmed)\r\n\r\nWe would be happy to accept a PR with these changes or to discuss alternatives if this isn't a fix.\r\n\r\n## Disabling Analyzers\r\n\r\nAccording to the documentation, [analyzers can be disabled for dependent projects](https://docs.microsoft.com/en-us/visualstudio/code-quality/use-roslyn-analyzers?view=vs-2019#dependent-projects). So, I suggest adding the following to your project to see if it stops the dependent projects from requiring the analyzers, also. Let us know whether this setting is helpful.\r\n\r\n```xml\r\n<PackageReference Include=\"Lucene.Net\" Version=\"4.8.0-beta00013\" PrivateAssets=\"all\" />\r\n```\r\n\r\nNote that the `Lucene.Net` NuGet package is the only one with code analyzers in it.\r\n\r\n\r\n\r\n ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733162314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733207300","html_url":"https://github.com/apache/lucenenet/pull/393#issuecomment-733207300","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/393","id":733207300,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzIwNzMwMA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-24T20:11:03Z","updated_at":"2020-11-24T20:11:03Z","author_association":"CONTRIBUTOR","body":"Thanks for the PR.\r\n\r\nThis is something that @Shazwazza has been working on, but the way the [API docs are currently deployed](https://lucenenet.apache.org/contributing/documentation.html#api-docs), these changes will be overwritten during the next documentation release.\r\n\r\nThere is some discussion about this topic in\r\n\r\n- https://github.com/apache/lucenenet/pull/231\r\n- https://github.com/apache/lucenenet/pull/229#issuecomment-520831453 (scroll down to the \"code samples\" heading)\r\n\r\nIn general, we need to get the `JavaToMarkdownConverter` tool automated to the point we can \"freeze\" the documentation at Lucene 4.8.1 without the risk of important info being reverted if it is re-run and to flag any things that need to be dealt with manually, and then we will be able to go through and convert all of the code samples and platform-specific information to target C#/.NET.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733207300/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733241122","html_url":"https://github.com/apache/lucenenet/pull/393#issuecomment-733241122","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/393","id":733241122,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzI0MTEyMg==","user":{"login":"LordMike","id":1027111,"node_id":"MDQ6VXNlcjEwMjcxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/1027111?v=4","gravatar_id":"","url":"https://api.github.com/users/LordMike","html_url":"https://github.com/LordMike","followers_url":"https://api.github.com/users/LordMike/followers","following_url":"https://api.github.com/users/LordMike/following{/other_user}","gists_url":"https://api.github.com/users/LordMike/gists{/gist_id}","starred_url":"https://api.github.com/users/LordMike/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LordMike/subscriptions","organizations_url":"https://api.github.com/users/LordMike/orgs","repos_url":"https://api.github.com/users/LordMike/repos","events_url":"https://api.github.com/users/LordMike/events{/privacy}","received_events_url":"https://api.github.com/users/LordMike/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-24T21:22:45Z","updated_at":"2020-11-24T21:22:45Z","author_association":"NONE","body":"Ah. I see.. I'll close this then, and let you guys work on a general fix :).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733241122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733726020","html_url":"https://github.com/apache/lucenenet/issues/396#issuecomment-733726020","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/396","id":733726020,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzcyNjAyMA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-25T14:04:25Z","updated_at":"2020-11-25T14:04:25Z","author_association":"CONTRIBUTOR","body":"I agree this sounds simpler to manage than other ideas that have been kicked around, provided the procedure is documented in the [contributing section of the web site](https://lucenenet.apache.org/contributing/index.html) so we never forget how to manage it.\r\n\r\nImplementing this procedure would close #283 and allow us to begin working on #284 immediately (and allow us to accept PRs to update API documentation).\r\n\r\nHowever, the tag `docs/converted/4.8.1` sounds like a finished product rather than a half-way point which is what it actually is. Perhaps one of the following would be more descriptive?\r\n\r\n- `docs/converted2markdown/4.8.1`\r\n- `docs/markdown-converted/4.8.1`\r\n- `docs/raw-converted-markdown/4.8.1`\r\n\r\n### Changes to JavaDocToMarkdownConverter\r\n\r\nSince `JavaDocToMarkdownConverter` is only executed against the `converted` branch, any changes to it must also be committed to the `converted` branch. And being that merges only happen in one direction, changing it in the `master` branch would need to be strictly prohibited.\r\n\r\nPerhaps the simplest way to enforce this would be to remove git tracking for `JavaDocToMarkdownConverter` from the `master` branch and add it to `.gitignore` on the `master` branch, but keep both enabled on the `converted` branches. If we follow the same conflict resolution pattern as the [`nbgv prepare-release`](https://github.com/dotnet/Nerdbank.GitVersioning/blob/master/doc/nbgv-cli.md#preparing-a-release) command uses for the `version.json` file with our `.gitignore` file, we can prevent these changes from creeping their way back onto `master` when merging into it.\r\n\r\n> If we need to re-run `JavaDocToMarkdownConverter` because we've made some fixes to it to fix some conversions, formatting, etc... we re-run this on the converted branch, then merge changes to the master branch. This will trigger a bunch of merge conflicts which can be resolved by Git merge.\r\n\r\nBy that I hope you mean [`git mergetool`](https://git-scm.com/docs/git-mergetool). I use it with Git for Windows in combination with [Beyond Compare](https://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows), and it makes dealing with conflicts much quicker and easier.\r\n\r\nThe \"LOCAL\", \"BASE\", and \"REMOTE\" branches visible side by side as well as a way to quickly scroll to each merge conflict. The scrollbars are linked so you see the same section in each pane when you scroll one of them. There are color coded arrows to quickly inject different blocks/lines of text or for more complicated edits manual editing is also allowed. Beyond Compare Pro also has features that allow ignoring of \"unimportant changes\" such as whitespace or code comments, which make some changes easier to deal with.\r\n\r\n![image](https://user-images.githubusercontent.com/1538288/100231245-546daa00-2f59-11eb-9a5e-e162eaad09da.png)\r\n\r\nIn this example, I am merging `master` into the current branch. The head of `master` is displayed on the right, the current commit of the current branch is displayed on the left, and \"BASE\" is what the current branch looked like prior to the current commit. The bottom section is a \"best guess\" of how to merge it, and around 40% of the time it guesses right.\r\n\r\nAt the end of the operation of a file, it creates a backup of the merge conflict in a file with a `.orig` extension added to the original, so if you get it wrong on the first try there is a way to go back and fix it manually.\r\n\r\nIt takes a little getting used to, but it is much quicker to pop in a block of text by clicking a colored arrow or to resolve a conflict by clicking on an exclamation point than going through the blocks in the raw source file that git creates.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733726020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733806638","html_url":"https://github.com/apache/lucenenet/issues/290#issuecomment-733806638","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/290","id":733806638,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzgwNjYzOA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-25T16:18:04Z","updated_at":"2020-11-25T16:23:44Z","author_association":"CONTRIBUTOR","body":"It seems there are several different workflows to deal with here:\r\n\r\n1. Update the website on https://github.com/apache/lucenenet-site/tree/asf-site when a change to the `websites/site` folder is committed to `master`\r\n2. Update the docs and website when there is a new release (with a step to make a new docs link/TOC)\r\n3. Update the docs on https://github.com/apache/lucenenet-site/tree/asf-site/docs/ `<version>` when there is a docs change committed to one of the `docs/<version>` branches\r\n4. Create a temporary URL of the docs when a PR is submitted to any of the `docs/<version>` branches so the person who submits it can preview the docs\r\n5. Create a temporary URL of the website when a PR is submitted so the person who submits it can preview the website\r\n6. Create a temporary URL of the docs and website to be part of a release pipeline so it can be previewed during the release vote\r\n\r\nNumbers 1 through 3 are higher priority than 4 through 6.\r\n\r\nDue to the fact we cannot use Azure DevOps for PRs due to [Apache permission limitations](https://issues.apache.org/jira/browse/INFRA-17030), we should use GitHub Actions for those tasks. It would also be pretty simple to setup GitHub actions to auto-deploy the website when `master` is updated. I recently used [path filters](https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpaths) on a [GitHub Actions workflow](https://github.com/apache/lucenenet/blob/e814b284e094a5bc7ddf3afe7b72868bcc3b0554/.github/workflows/Lucene-Net-Tests-Analysis-Common.yml#L25-L42) to exclude paths that don't apply to the workflow, which would work perfectly for this scenario.\r\n\r\nAs for the temporary URLs, we could use the approach outlined in [Static Web App PR Workflow for Azure App Service Using Azure DevOps](https://devblogs.microsoft.com/devops/static-web-app-pr-workflow-for-azure-app-service-using-azure-devops/). We can probably adapt the solution to launch from GitHub Actions rather than from Azure DevOps so the PRs will kick it off.\r\n\r\n> Notes:\r\n> 1. GitHub Actions doesn't load workflow files with a `.` in the name\r\n> 2. Apache has a limited number of build agents for GitHub Actions, so long-running tasks should be done in Azure DevOps\r\n> 3. A GitHub Actions PR workflow will run if additional commits are pushed to the PR branch\r\n\r\nThe only two steps above that need to be part of the Azure DevOps release are numbers 2 and 6. Number 6 could be part of the Release stage on the build pipeline in YAML (preferred) or as a step prior to the Manual Intervention step (the vote) on the Release pipeline. Number 2 could be fully automated after the Manual Intervention step.\r\n\r\nI believe all of the other workflows can be added as GitHub Actions.\r\n\r\nBreaking this task down into 6 different workflows, can you think of anything that was overlooked or that cannot be fully automated?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733806638/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733813602","html_url":"https://github.com/apache/lucenenet/issues/394#issuecomment-733813602","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/394","id":733813602,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzgxMzYwMg==","user":{"login":"Xebast","id":33876387,"node_id":"MDQ6VXNlcjMzODc2Mzg3","avatar_url":"https://avatars.githubusercontent.com/u/33876387?v=4","gravatar_id":"","url":"https://api.github.com/users/Xebast","html_url":"https://github.com/Xebast","followers_url":"https://api.github.com/users/Xebast/followers","following_url":"https://api.github.com/users/Xebast/following{/other_user}","gists_url":"https://api.github.com/users/Xebast/gists{/gist_id}","starred_url":"https://api.github.com/users/Xebast/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Xebast/subscriptions","organizations_url":"https://api.github.com/users/Xebast/orgs","repos_url":"https://api.github.com/users/Xebast/repos","events_url":"https://api.github.com/users/Xebast/events{/privacy}","received_events_url":"https://api.github.com/users/Xebast/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-25T16:30:12Z","updated_at":"2020-11-25T16:30:12Z","author_association":"NONE","body":"Hi Shad, \r\n\r\nThank you for your prompt answer and help! Yes, I think same about StyleCop / CodeAnalysis.\r\n\r\nI quickly tested `<PrivateAssets>all </PrivateAssets>` (Disabling Analyzers) and result was good! In sample above, it fixes this issue.\r\nBut that was I thought... until I use whole solution, integrating android version.\r\n\r\nSo I have a new challenger : XAMARIN.\r\n\r\nIn fact, `<PrivateAssets>all </PrivateAssets>` does not work in Xamarin + NetStandard; here is a link to an OPEN issue : PrivateAssets=\"All\" doesn't work in .netstandard csproj for Android Xamarin : [https://github.com/NuGet/Home/issues/5128]\r\n\r\n![XamarinBuildError](https://user-images.githubusercontent.com/33876387/100254102-2fba0800-2f42-11eb-993c-4bba0a66a0a0.jpg)\r\n\r\nSo of course, I tried <PrivateAssets>compile;runtime;contentFiles;build;buildMultitargeting;buildTransitive;analyzers;native </PrivateAssets> (simulation of all), but same result : does not compile, same error.\r\n\r\nI am now dealing with combination of IncludeAssets / Private assets, but never match all environmement (Visual2017 / PC solution and Visual 2017 / Android Solution.) I try to combine `compile; runtime; contentFiles; build; buildMultitargeting; buildTransitive; analyzers; native`. Maybe there is a perfect match.\r\n\r\nWe will normally move to VS2019 soon, so until, I will deactivate WarningAsError condition in assembly clients. It is temporary. With Visual2019, FxCop nugget works fine with .NetStandard 2.0.\r\n\r\nTo be honest, I did not try first recommendation about TargetVersion / TargetFramework. \r\nI will try it tomorrow and send you result ASAP, it could be interresting.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/733813602/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/734040160","html_url":"https://github.com/apache/lucenenet/issues/396#issuecomment-734040160","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/396","id":734040160,"node_id":"MDEyOklzc3VlQ29tbWVudDczNDA0MDE2MA==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-26T02:42:02Z","updated_at":"2020-11-26T02:42:02Z","author_association":"CONTRIBUTOR","body":"> Implementing this procedure would close #283 and allow us to begin working on #284 immediately (and allow us to accept PRs to update API documentation).\r\n\r\nyep! without a lot of work we can very quickly start getting all of the docs and code samples fixed up\r\n\r\n> However, the tag docs/converted/4.8.1 sounds like a finished product rather than a half-way point which is what it actually is. Perhaps one of the following would be more descriptive?\r\n\r\nyep sure, I'm happy with `docs/markdown-converted/4.8.1`\r\n\r\n> By that I hope you mean git mergetool\r\n\r\nyes exactly. I just use GitExtensions so this happens all automatically for me. I use KDiff instead of beyond compare since I like it better and it does all the 3 way merging, auto guessing, whitespace options, etc... (although it looks like it was made in the 80s and never changed)\r\n\r\n> Perhaps the simplest way to enforce this would be to remove git tracking for JavaDocToMarkdownConverter from the master branch and add it to .gitignore on the master branch\r\n\r\nYep all of what you said makes sense. The converter code could even be removed entirely from the master branch if we wanted and only live in the conversion branches.  I have no experience with what `nbgv prepare-release` so I don't really have a comment about that one (but seems like an interesting tool!)\r\n\r\n---\r\n\r\nI'm happy to get started on this if we agree with the branch naming?\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/734040160/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/734254722","html_url":"https://github.com/apache/lucenenet/issues/396#issuecomment-734254722","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/396","id":734254722,"node_id":"MDEyOklzc3VlQ29tbWVudDczNDI1NDcyMg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-26T11:52:41Z","updated_at":"2020-11-26T11:52:41Z","author_association":"CONTRIBUTOR","body":"> Yep all of what you said makes sense. The converter code could even be removed entirely from the master branch if we wanted and only live in the conversion branches. I have no experience with what `nbgv prepare-release` so I don't really have a comment about that one (but seems like an interesting tool!)\r\n\r\nI poked around under the hood of `nbgv` and then started experimenting to see what options Git may have to solve the issue with keeping `JavaDocToMarkdownConverter` updated on each of the `converted` branches. Then I realized something: this is not a VCS problem, it is a versioning problem.\r\n\r\nThis issue can be addressed simply by:\r\n\r\n1. Moving `JavaDocToMarkdownConverter` to a repo of its own so there is only 1 copy to deal with (https://selfserve.apache.org/)\r\n2. Converting it into a [dotnet tool](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools-how-to-create) so it can be packaged and versioned with NuGet\r\n3. Making all of the scripts that utilize it always uninstall and reinstall the latest version of the tool from the feed (see [dotnet tool update](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-update)) or use a specific version in cases where version drift is a problem\r\n\r\nWe don't have to use the official NuGet.org feed for this, it can be MyGet, Azure Devops, GitHub, or whatever as long as it is Internet-accessible.\r\n\r\n> I'm happy to get started on this if we agree with the branch naming?\r\n\r\nSure, that's fine.\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/734254722/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/734417702","html_url":"https://github.com/apache/lucenenet/issues/396#issuecomment-734417702","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/396","id":734417702,"node_id":"MDEyOklzc3VlQ29tbWVudDczNDQxNzcwMg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-11-26T17:30:58Z","updated_at":"2020-11-26T17:30:58Z","author_association":"CONTRIBUTOR","body":"I have converted the `JavaToMarkdownConverter` to a dotnet tool (currently at https://github.com/NightOwl888/lucenenet-javadoc2markdown) simply named `javadoc2markdown` and set up an official NuGet feed to download it from at https://dev.azure.com/lucene-net/Lucene.NET/_packaging?_a=feed&feed=lucene-net-tools\r\n\r\nTo install the latest version of the tool in the scripts to a local path, just run the command:\r\n\r\n```\r\ndotnet tool install javadoc2markdown --add-source https://pkgs.dev.azure.com/lucene-net/_packaging/lucene-net-tools/nuget/v3/index.json --tool-path ./\r\n```\r\n\r\nThen run the command:\r\n\r\n```\r\njavadoc2markdown <LUCENE DIRECTORY> <LUCENENET DIRECTORY>\r\n```\r\nThe parameters are exactly the same as they were before.\r\n\r\nThen to clean up, run the command:\r\n\r\n```\r\ndotnet tool uninstall javadoc2markdown --tool-path ./\r\n```\r\n\r\nYou might want to put that last line in a finally block to ensure the script is re-runnable in the case of an exception.\r\n\r\nThe GitHub repo is only meant to be temporary until an Apache repo is set up for it. I haven't yet removed the tool from this repo, but I suggest to do so and update the scripts before doing any branching. \r\n\r\nThe changes I made are enough to decouple the docs build scripts from any specific version of the tool, but the `JavaDoc2Markdown` tool's build and upload to the feed could be fully automated by referencing `Nerdbank.GitVersioning` and copying the `azure-pipelines.yml` and related files from [Morfologik.Stemming](https://github.com/NightOwl888/Morfologik.Stemming) (minus the test stage, we don't need that). We would also need to remove some of the [custom settings](https://github.com/dotnet/Nerdbank.GitVersioning/blob/master/doc/nbgv-cli.md#customizing-the-behaviour-of-prepare-release) from the `version.json` file, which is what configures `Nerdbank.GitVersioning` and remove the explicit `<Version>` property from the project file.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/734417702/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/736549537","html_url":"https://github.com/apache/lucenenet/pull/385#issuecomment-736549537","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/385","id":736549537,"node_id":"MDEyOklzc3VlQ29tbWVudDczNjU0OTUzNw==","user":{"login":"Semirk0","id":45509630,"node_id":"MDQ6VXNlcjQ1NTA5NjMw","avatar_url":"https://avatars.githubusercontent.com/u/45509630?v=4","gravatar_id":"","url":"https://api.github.com/users/Semirk0","html_url":"https://github.com/Semirk0","followers_url":"https://api.github.com/users/Semirk0/followers","following_url":"https://api.github.com/users/Semirk0/following{/other_user}","gists_url":"https://api.github.com/users/Semirk0/gists{/gist_id}","starred_url":"https://api.github.com/users/Semirk0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Semirk0/subscriptions","organizations_url":"https://api.github.com/users/Semirk0/orgs","repos_url":"https://api.github.com/users/Semirk0/repos","events_url":"https://api.github.com/users/Semirk0/events{/privacy}","received_events_url":"https://api.github.com/users/Semirk0/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-01T13:25:13Z","updated_at":"2020-12-01T13:25:13Z","author_association":"CONTRIBUTOR","body":"Is everything ok with my last commit or should I change something?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/736549537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/737003019","html_url":"https://github.com/apache/lucenenet/issues/396#issuecomment-737003019","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/396","id":737003019,"node_id":"MDEyOklzc3VlQ29tbWVudDczNzAwMzAxOQ==","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-02T05:37:07Z","updated_at":"2020-12-02T05:37:07Z","author_association":"CONTRIBUTOR","body":"Well done sir! 🎉 \r\n\r\nAmazing start, looks like I have some work to start on :) ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/737003019/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/740700939","html_url":"https://github.com/apache/lucenenet/issues/398#issuecomment-740700939","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/398","id":740700939,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MDcwMDkzOQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-08T15:46:12Z","updated_at":"2020-12-08T15:46:12Z","author_association":"CONTRIBUTOR","body":"Documentation is still a work in progress, and updating it for .NET is currently blocked until #396 is completed.\r\n\r\n> In our project, we make use of the CustomScoreQuery which used to be part of the Lucene.Net.Search.Function namespace. It is no longer there. According to the Apache documentation is is deprecated and should be replaced by using the FunctionScoreQuery, but this class doesn't seem to exist in 4.8. What should we use instead?\r\n\r\n> We used a class that inherited from CustomScoreProvider in Lucene.Net.Search.Function, but it is no longer there in 4.8. We used it combined with the CustomScoreQuery as returnvalue for the GetCustomScoreProvider method There doesn't seem to be any alternative. What should we use instead?\r\n\r\n[CustomScoreQuery](https://lucenenet.apache.org/docs/4.8.0-beta00013/api/queries/Lucene.Net.Queries.CustomScoreQuery.html) and [CustomScoreProvder](https://lucenenet.apache.org/docs/4.8.0-beta00013/api/queries/Lucene.Net.Queries.CustomScoreProvider.html) are still there, but the project has been split into [26 specialized assemblies](https://github.com/apache/lucenenet#all-packages-1) rather than having everything in one assembly. You just need to reference the [Lucene.Net.Queries](https://www.nuget.org/packages/Lucene.Net.Queries/) package.\r\n\r\n> We used a WhitespaceAnalyzer in 3.0, Which doesn't seem to be there anymore. What is the replacement for that?\r\n\r\n[WhiteSpaceAnalyzer](https://lucenenet.apache.org/docs/4.8.0-beta00009/api/analysis-common/Lucene.Net.Analysis.Core.WhitespaceAnalyzer.html) is in the [Lucene.Net.Analysis.Common](https://www.nuget.org/packages/Lucene.Net.Analysis.Common/) package.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/740700939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741691266","html_url":"https://github.com/apache/lucenenet/issues/398#issuecomment-741691266","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/398","id":741691266,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MTY5MTI2Ng==","user":{"login":"PaulVrugt","id":7567114,"node_id":"MDQ6VXNlcjc1NjcxMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/7567114?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulVrugt","html_url":"https://github.com/PaulVrugt","followers_url":"https://api.github.com/users/PaulVrugt/followers","following_url":"https://api.github.com/users/PaulVrugt/following{/other_user}","gists_url":"https://api.github.com/users/PaulVrugt/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulVrugt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulVrugt/subscriptions","organizations_url":"https://api.github.com/users/PaulVrugt/orgs","repos_url":"https://api.github.com/users/PaulVrugt/repos","events_url":"https://api.github.com/users/PaulVrugt/events{/privacy}","received_events_url":"https://api.github.com/users/PaulVrugt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-09T10:47:50Z","updated_at":"2020-12-09T10:47:50Z","author_association":"NONE","body":"@NightOwl888  Thanks! That clarifies a lot and solves a lot of migration issues! Might I ask some follow up questions?\r\n\r\n1. we used to create indexwriters by calling:\r\n`new Index.IndexWriter(_luceneDir, analyzer, False, Index.IndexWriter.MaxFieldLength.UNLIMITED)`\r\nnow I found we need to use the config object instead of separate parameters in the new situation. So we do somthing like:\r\n\r\n````\r\nvar config = new Index.IndexWriterConfig(Util.LuceneVersion.LUCENE_48, analyzer) {OpenMode = Index.OpenMode.APPEND}\r\nNew Index.IndexWriter(_luceneDir, config)\r\n````\r\n\r\nwhere do we leave the max field length here? Is it still required?\r\n\r\n2. Where did the `Optimize` method of the IndexWriter go? Is there any alternative?\r\n3. We used to use fields like:\r\n    `New Documents.Field(\"title\", \"<value>\", Documents.Field.Store.YES, Documents.Field.Index.ANALYZED)`\r\n\r\n    now the obsolete error tells me I need to use `StringField` or `TextField`. Which of the two do I need to use, and how to I pass \r\n    the `Store` and `Analyzed` properties to them?\r\n\r\n4. The FieldCache `GetStrings` method was replace by `GetTerms`, but `GetTerms` requires an `AtomicReader`, we used to be able to pass an `IndexReader` into this method and it used to return a string array containing the values. How to I get the same kind of behavior from the `GetTerms` method?\r\n\r\nSorry about the interrogation, but we really want to migrate, but the the lack of migration documentation makes it really hard.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741691266/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741739077","html_url":"https://github.com/apache/lucenenet/issues/398#issuecomment-741739077","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/398","id":741739077,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MTczOTA3Nw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-09T12:26:35Z","updated_at":"2020-12-09T12:27:44Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 maybe the new Github discussion feature should be enabled as it's more suitable for things like this i guess :) ?\r\n\r\nJust to give a quick answer to two of them.\r\n\r\n> 1. Where did the `Optimize` method of the IndexWriter go? Is there any alternative?\r\n\r\nEven in 3.0.3 the general consensus was that you shouldn't call that method but instead let Lucene handle optimizations internally. It generally knows better.\r\n\r\n> 2. We used to use fields like:\r\n>    `New Documents.Field(\"title\", \"<value>\", Documents.Field.Store.YES, Documents.Field.Index.ANALYZED)`\r\n>    now the obsolete error tells me I need to use `StringField` or `TextField`. Which of the two do I need to use, and how to I pass\r\n>    the `Store` and `Analyzed` properties to them?\r\n\r\nYou can still specify store as an option, As for Analyzed, AFAIK.\r\nTextField => Analyzed\r\nStringField => Not Analyzed\r\n\r\nSo you should use TextField in your case.\r\n```\r\nnew TextField(...name... , ...value... , Field.Store.NO/YES)\r\n```\r\n\r\nThe other two I will leave to @NightOwl888 , maybe he can also elaborate further.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741739077/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741792210","html_url":"https://github.com/apache/lucenenet/issues/398#issuecomment-741792210","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/398","id":741792210,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MTc5MjIxMA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-09T14:05:49Z","updated_at":"2020-12-09T14:05:49Z","author_association":"CONTRIBUTOR","body":"> Sorry about the interrogation, but we really want to migrate, but the the lack of migration documentation makes it really hard.\r\n\r\nThe migration guide is here: [Apache Lucene Migration Guide (4.8.0)](https://lucene.apache.org/core/4_8_0/MIGRATE.html). Thanks for bringing this to our attention, it hasn't been added to our API docs, so I opened #399.\r\n\r\nMost of the answers to your questions can be found in the migration guide. However, do note that some method names were changed to follow .NET conventions (for example `.terms()` was renamed `.GetTerms()`, `.iterator()` has been changed to `.GetEnumerator()`, members with numeric type names have also been renamed `Int` > `Int32`, `Long` > `Int64`, `Float` > `Single`, etc.)\r\n\r\n> Where did the Optimize method of the IndexWriter go? Is there any alternative?\r\n\r\nMany people abused the method because it was poorly named. Its purpose (when used correctly) is to rewrite an index to a smaller number of segments. However, many people called it with no arguments immediately after creating their index, which *rewrites* the entire index that was just written to a single segment.\r\n\r\nThe method has been renamed to `ForceMerge()` to clarify what it does and prevent it from being irresistible to call when it is not appropriate to.\r\n\r\n[Simon says: optimize is bad for you….](https://blog.trifork.com/2011/11/21/simon-says-optimize-is-bad-for-you/)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741792210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741796971","html_url":"https://github.com/apache/lucenenet/issues/398#issuecomment-741796971","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/398","id":741796971,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MTc5Njk3MQ==","user":{"login":"PaulVrugt","id":7567114,"node_id":"MDQ6VXNlcjc1NjcxMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/7567114?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulVrugt","html_url":"https://github.com/PaulVrugt","followers_url":"https://api.github.com/users/PaulVrugt/followers","following_url":"https://api.github.com/users/PaulVrugt/following{/other_user}","gists_url":"https://api.github.com/users/PaulVrugt/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulVrugt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulVrugt/subscriptions","organizations_url":"https://api.github.com/users/PaulVrugt/orgs","repos_url":"https://api.github.com/users/PaulVrugt/repos","events_url":"https://api.github.com/users/PaulVrugt/events{/privacy}","received_events_url":"https://api.github.com/users/PaulVrugt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-09T14:13:56Z","updated_at":"2020-12-09T14:13:56Z","author_association":"NONE","body":"@jeme @NightOwl888  you guys rock! Thanks for the input. I've taken a look at the migration guide, and this answers all of my questions posted here but one:\r\n\r\n(see question 1 from https://github.com/apache/lucenenet/issues/398#issuecomment-741691266) In 3.0.3, we called `new Index.IndexWriter(_luceneDir, analyzer, False, Index.IndexWriter.MaxFieldLength.UNLIMITED)`\r\nWe don't seem to have any method to pass the MaxFieldLength property to the new `IndexWriter`, has it become obsolete and can I simply ignore it?\r\n\r\nHopefully you can provide me with an answer to this, and I'll get out of your hair.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741796971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741802326","html_url":"https://github.com/apache/lucenenet/issues/398#issuecomment-741802326","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/398","id":741802326,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MTgwMjMyNg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-09T14:22:52Z","updated_at":"2020-12-09T14:22:52Z","author_association":"CONTRIBUTOR","body":"> @NightOwl888 maybe the new Github discussion feature should be enabled as it's more suitable for things like this i guess :) ?\r\n\r\n@jeme \r\n\r\nGood idea. However, Apache doesn't give us access to all of the settings, only the ones that are enabled through [.asf.yaml](https://cwiki.apache.org/confluence/display/INFRA/git+-+.asf.yaml+features#git.asf.yamlfeatures-Upcomingfeatures). They don't have discussions listed as a feature:\r\n\r\n```yaml\r\ngithub:\r\n  features:\r\n    # Enable wiki for documentation\r\n    wiki: true\r\n    # Enable issue management\r\n    issues: true\r\n    # Enable projects for project management boards\r\n    projects: true\r\n```\r\n\r\nHowever, I have added a question to that page asking if they can enable/add it.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741802326/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741809442","html_url":"https://github.com/apache/lucenenet/issues/398#issuecomment-741809442","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/398","id":741809442,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MTgwOTQ0Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-09T14:31:53Z","updated_at":"2020-12-09T14:36:49Z","author_association":"CONTRIBUTOR","body":"> In 3.0.3, we called new Index.IndexWriter(_luceneDir, analyzer, False, Index.IndexWriter.MaxFieldLength.UNLIMITED)\r\nWe don't seem to have any method to pass the MaxFieldLength property to the new IndexWriter, has it become obsolete and can I simply ignore it?\r\n\r\nFrom https://lucene.apache.org/core/3_6_2/api/all/org/apache/lucene/index/IndexWriter.MaxFieldLength.html:\r\n\r\n### Deprecated. \r\n*use [LimitTokenCountAnalyzer](https://lucenenet.apache.org/docs/4.8.0-beta00013/api/analysis-common/Lucene.Net.Analysis.Miscellaneous.LimitTokenCountAnalyzer.html) instead.*\r\n\r\nFrom what I gather, unlimited is now the default and if you need to limit the field length, you can use the specialized analyzer.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741809442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741812312","html_url":"https://github.com/apache/lucenenet/issues/398#issuecomment-741812312","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/398","id":741812312,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MTgxMjMxMg==","user":{"login":"PaulVrugt","id":7567114,"node_id":"MDQ6VXNlcjc1NjcxMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/7567114?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulVrugt","html_url":"https://github.com/PaulVrugt","followers_url":"https://api.github.com/users/PaulVrugt/followers","following_url":"https://api.github.com/users/PaulVrugt/following{/other_user}","gists_url":"https://api.github.com/users/PaulVrugt/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulVrugt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulVrugt/subscriptions","organizations_url":"https://api.github.com/users/PaulVrugt/orgs","repos_url":"https://api.github.com/users/PaulVrugt/repos","events_url":"https://api.github.com/users/PaulVrugt/events{/privacy}","received_events_url":"https://api.github.com/users/PaulVrugt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-09T14:36:24Z","updated_at":"2020-12-09T14:36:24Z","author_association":"NONE","body":"Well thank you. You've been a great help, and will probably soon have one more ISV with over a million end users using lucene.net 4.8 for searching!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741812312/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741957916","html_url":"https://github.com/apache/lucenenet/issues/397#issuecomment-741957916","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/397","id":741957916,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MTk1NzkxNg==","user":{"login":"mypolat","id":4419113,"node_id":"MDQ6VXNlcjQ0MTkxMTM=","avatar_url":"https://avatars.githubusercontent.com/u/4419113?v=4","gravatar_id":"","url":"https://api.github.com/users/mypolat","html_url":"https://github.com/mypolat","followers_url":"https://api.github.com/users/mypolat/followers","following_url":"https://api.github.com/users/mypolat/following{/other_user}","gists_url":"https://api.github.com/users/mypolat/gists{/gist_id}","starred_url":"https://api.github.com/users/mypolat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mypolat/subscriptions","organizations_url":"https://api.github.com/users/mypolat/orgs","repos_url":"https://api.github.com/users/mypolat/repos","events_url":"https://api.github.com/users/mypolat/events{/privacy}","received_events_url":"https://api.github.com/users/mypolat/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-09T18:17:50Z","updated_at":"2020-12-09T18:17:50Z","author_association":"NONE","body":"Hello, can you help me?\r\n\r\n> Hi all,\r\n> Is there a feature in Lucene .Net that can combine query results from different servers into a single result? We need to then combine results from multiple machine and present it to the user.\r\n> Version 3.0.3 has DistrubutedSearch feature, but I couldn't see it in 4.8.x. How can I do distributed search?\r\n> Yours truly.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/741957916/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/742167759","html_url":"https://github.com/apache/lucenenet/issues/397#issuecomment-742167759","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/397","id":742167759,"node_id":"MDEyOklzc3VlQ29tbWVudDc0MjE2Nzc1OQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2020-12-10T01:13:46Z","updated_at":"2020-12-10T01:13:46Z","author_association":"CONTRIBUTOR","body":">  In general, you would be better off asking user questions [on StackOverflow](https://stackoverflow.com/questions/tagged/lucene.net) or the [User Mailing List](https://lucenenet.apache.org/contributing/mailing-lists.html#users-user) than here.\r\n\r\nLucene is a low-level search library that gives you the tools to build a higher-level search engine, but itself is not a search engine, thus it does not contain any distributed features out of the box. Some distributed 3rd party search engines that are built on Lucene/Lucene.NET:\r\n\r\n- [NCache Distributed Lucene](https://www.alachisoft.com/ncache/distributed-lucene.html)\r\n- [SOLR Index Sharding](https://lucene.apache.org/solr/guide/6_6/distributed-search-with-index-sharding.html) (legacy)\r\n- [SolrCloud](https://lucene.apache.org/solr/guide/6_6/solrcloud.html#solrcloud)\r\n- [Elastic Search](https://www.elastic.co/elasticsearch/)\r\n\r\nIf you prefer to roll your own solution, Lucene.NET 4.8.0 has a [replicator module](https://lucenenet.apache.org/docs/4.8.0-beta00013/api/replicator/Lucene.Net.Replicator.html) that might get you part of the way there.\r\n\r\n### Lucene.Net.DistributedSearch\r\n\r\nI searched the email archives and discovered the following thread. It seems that `Lucene.Net.DistributedSearch` was brought over from Lucene.NET 2.9.4. It was a contributed feature that was never actually ported over from Lucene.\r\n\r\nhttp://markmail.org/message/acd6f3rsw626ysvv\r\n\r\n[Distributed Search Source Code](https://github.com/apache/lucenenet/tree/3.0.3/src/contrib/DistributedSearch)\r\n\r\nThere is a problem with the way `Lucene.Net.DistributedSearch` is currently implemented that is blocking if from moving forward - it requires many objects to be serializable, which is no longer considered to be a good practice. See [LUCENENET-502 (comment)](https://issues.apache.org/jira/browse/LUCENENET-502?focusedCommentId=16905862&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16905862). If we were to revive such a feature (and frankly, I am not sure it belongs in Lucene.NET), it would be better to come up with a new design that is based on a more cloud-friendly technology and an alternative to using .NET's binary serialization.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/742167759/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/757500075","html_url":"https://github.com/apache/lucenenet/issues/400#issuecomment-757500075","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/400","id":757500075,"node_id":"MDEyOklzc3VlQ29tbWVudDc1NzUwMDA3NQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-10T16:06:24Z","updated_at":"2021-01-10T16:06:24Z","author_association":"CONTRIBUTOR","body":"The [Query Syntax Documentation](https://lucenenet.apache.org/docs/4.8.0-beta00013/api/queryparser/Lucene.Net.QueryParsers.Classic.html#classes) states:\r\n\r\n> ### ParseException\r\n>\r\n> This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method `GenerateParseException` in the generated parser.\r\n>\r\n> You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.\r\n\r\nIt is expected behavior for a malformed query to throw an exception, as this is a line-by-line port from Java.\r\n\r\nThat said, in .NET it would be ideal if we had a `TryParse()` method that returned a boolean and an error message, but that would need to be done consistently on all of the Query Parsers, not just the Classic one. There are other things to consider redesigning, such as culture and other configuration as parameters of `Parse()/TryParse()` instead of public properties. However, I am not sure if any of that will make it into the 4.8.0 release.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/757500075/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/757500739","html_url":"https://github.com/apache/lucenenet/issues/400#issuecomment-757500739","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/400","id":757500739,"node_id":"MDEyOklzc3VlQ29tbWVudDc1NzUwMDczOQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-10T16:10:41Z","updated_at":"2021-01-10T16:11:12Z","author_association":"CONTRIBUTOR","body":"Do note that if you are expecting the Query Parser to never throw an exception regardless of how poorly constructed the query is, there is a [SimpleQueryParser](https://lucenenet.apache.org/docs/4.8.0-beta00013/api/queryparser/Lucene.Net.QueryParsers.Simple.html)  made for this purpose.\r\n\r\n> Any errors in query syntax will be ignored and the parser will attempt to decipher what it can; however, this may mean odd or unexpected results. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/757500739/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/759258652","html_url":"https://github.com/apache/lucenenet/issues/401#issuecomment-759258652","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/401","id":759258652,"node_id":"MDEyOklzc3VlQ29tbWVudDc1OTI1ODY1Mg==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-13T07:22:11Z","updated_at":"2021-01-13T07:22:35Z","author_association":"CONTRIBUTOR","body":"1) Sounds about right\r\n\r\n2) Since your passing a IReplicationHandler to the client, where IndexReplicationHandler is just the built-in implementation, see: https://github.com/apache/lucenenet/blob/4e66181e702db9a0849a26a86361a8fc1e796c3f/src/Lucene.Net.Replicator/ReplicationClient.cs#L496\r\n\r\n3) Do the batch update and wait with publishing a revision till your done, on server B the IndexReplicationHandler takes a Func<bool?> as a last parameter in the constructor, this is called as the last thing in the replication process.\r\n\r\n----\r\n\r\nIf you require a tighter integration or perhaps more insight to when a replication starts and ends on server B, or to expose additional information. You can utilize a decorator pattern and simply delegate to the IndexReplicationHandler.\r\n\r\nE.g.\r\n\r\n```CSharp\r\npublic class MyIndexReplicationHandler : IReplicationHandler\r\n{\r\n    private readonly IReplicationHandler innerHandler;\r\n\r\n    public string CurrentVersion => innerHandler.CurrentVersion;\r\n\r\n    public IDictionary<string, IList<RevisionFile>> CurrentRevisionFiles => innerHandler.CurrentRevisionFiles;\r\n    \r\n    public MyIndexReplicationHandler(IReplicationHandler innerHandler)\r\n    {\r\n        this.innerHandler = innerHandler;\r\n    }\r\n\r\n    public void RevisionReady(string version, IDictionary<string, IList<RevisionFile>> revisionFiles, IDictionary<string, IList<string>> copiedFiles, IDictionary<string, Directory> sourceDirectory)\r\n    {\r\n        //TODO: Do something before replication takes place.\r\n        innerHandler.RevisionReady(version, revisionFiles, copiedFiles, sourceDirectory);\r\n        //TODO: Do something after replication takes place.\r\n    }\r\n}\r\n```\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/759258652/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/759537796","html_url":"https://github.com/apache/lucenenet/issues/401#issuecomment-759537796","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/401","id":759537796,"node_id":"MDEyOklzc3VlQ29tbWVudDc1OTUzNzc5Ng==","user":{"login":"yashhema","id":7277118,"node_id":"MDQ6VXNlcjcyNzcxMTg=","avatar_url":"https://avatars.githubusercontent.com/u/7277118?v=4","gravatar_id":"","url":"https://api.github.com/users/yashhema","html_url":"https://github.com/yashhema","followers_url":"https://api.github.com/users/yashhema/followers","following_url":"https://api.github.com/users/yashhema/following{/other_user}","gists_url":"https://api.github.com/users/yashhema/gists{/gist_id}","starred_url":"https://api.github.com/users/yashhema/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yashhema/subscriptions","organizations_url":"https://api.github.com/users/yashhema/orgs","repos_url":"https://api.github.com/users/yashhema/repos","events_url":"https://api.github.com/users/yashhema/events{/privacy}","received_events_url":"https://api.github.com/users/yashhema/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-13T15:50:49Z","updated_at":"2021-01-13T15:50:49Z","author_association":"NONE","body":"Thanks , for the explanation . How can we get the revision from server A LocalReplicator (ie the entity for which we are replicating data) . I looked in the code for it  -- **lucenenet/src/Lucene.Net.Replicator/LocalReplicator.cs**\r\nI dont see a way to get version from it.\r\n**### private volatile RefCountedRevision currentRevision;**\r\nThe above field is marked private .\r\nCan you please explain how to get this value\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/759537796/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/759578447","html_url":"https://github.com/apache/lucenenet/issues/401#issuecomment-759578447","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/401","id":759578447,"node_id":"MDEyOklzc3VlQ29tbWVudDc1OTU3ODQ0Nw==","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-13T16:50:46Z","updated_at":"2021-01-13T16:53:49Z","author_association":"CONTRIBUTOR","body":"You can get that from the Revision you publish. So create that outside the call to publish and assign it to a variable, then you can read it's Version property. In case you publish an older revision the replicator will throw an error, if you wish to know if a publish is ACTUALLY a new revision, you can compare it to another revision just like happens inside the replicator.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/759578447/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/759774204","html_url":"https://github.com/apache/lucenenet/issues/401#issuecomment-759774204","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/401","id":759774204,"node_id":"MDEyOklzc3VlQ29tbWVudDc1OTc3NDIwNA==","user":{"login":"yashhema","id":7277118,"node_id":"MDQ6VXNlcjcyNzcxMTg=","avatar_url":"https://avatars.githubusercontent.com/u/7277118?v=4","gravatar_id":"","url":"https://api.github.com/users/yashhema","html_url":"https://github.com/yashhema","followers_url":"https://api.github.com/users/yashhema/followers","following_url":"https://api.github.com/users/yashhema/following{/other_user}","gists_url":"https://api.github.com/users/yashhema/gists{/gist_id}","starred_url":"https://api.github.com/users/yashhema/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yashhema/subscriptions","organizations_url":"https://api.github.com/users/yashhema/orgs","repos_url":"https://api.github.com/users/yashhema/repos","events_url":"https://api.github.com/users/yashhema/events{/privacy}","received_events_url":"https://api.github.com/users/yashhema/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-13T22:18:44Z","updated_at":"2021-01-13T22:18:44Z","author_association":"NONE","body":"Perfect thanks for your inputs. Now I think i have got the required understanding, now let me see , if I can use it to build something.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/759774204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/764964147","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-764964147","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":764964147,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NDk2NDE0Nw==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-21T21:50:42Z","updated_at":"2021-01-22T10:07:27Z","author_association":"CONTRIBUTOR","body":"The first thing to know is that there are many aspects to the \"Lucene Index\".  When not using compound files, this manifests in the various files that are created.  Just looking at two of those, we can talk about the inverted index which is called postings and we can talk about the stored documents.  Of these two, there aren't any readily available tunable settings regarding the compression of the inverted index as best I can tell.  \r\n\r\nThe HIGH_COMPRESSION mode relates to the stored fields.  If you are not storing fields and you are only using Lucene.Net to create an inverted index then doing work to turn on high compression for stored fields won't reduce the size of the \"Lucene Index\".\r\n\r\nThat said, if you _are_ storing fields and want to use high compression on that stored fields data, then you will need to create your own codec that has high compression turned on for stored fields.  And to do that, you will first need a Stored fields class that has high compression turned on.   Below are those two classes followed by a unit test that uses this new codec that I have written for you.  I haven't tried this code on a large amount of data to see the effect, I leave that for you as an exercise, but this should point the way to getting your stored fields compressed with High Compression.\r\n\r\n\r\n```csharp\r\n/*\r\n     * Licensed to the Apache Software Foundation (ASF) under one or more\r\n     * contributor license agreements.  See the NOTICE file distributed with\r\n     * this work for additional information regarding copyright ownership.\r\n     * The ASF licenses this file to You under the Apache License, Version 2.0\r\n     * (the \"License\"); you may not use this file except in compliance with\r\n     * the License.  You may obtain a copy of the License at\r\n     *\r\n     *     http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n\r\npublic sealed class Lucene41StoredFieldsHighCompressionFormat : CompressingStoredFieldsFormat {\r\n        /// <summary>\r\n        /// Sole constructor. </summary>\r\n        public Lucene41StoredFieldsHighCompressionFormat()\r\n            : base(\"Lucene41StoredFieldsHighCompression\", CompressionMode.HIGH_COMPRESSION, 1 << 14) {\r\n        }\r\n    }\r\n```\r\nHere is a custom codec to use this High Compression format:\r\n\r\n```csharp\r\n/*\r\n     * Licensed to the Apache Software Foundation (ASF) under one or more\r\n     * contributor license agreements.  See the NOTICE file distributed with\r\n     * this work for additional information regarding copyright ownership.\r\n     * The ASF licenses this file to You under the Apache License, Version 2.0\r\n     * (the \"License\"); you may not use this file except in compliance with\r\n     * the License.  You may obtain a copy of the License at\r\n     *\r\n     *     http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n\r\n    using Lucene40LiveDocsFormat = Lucene.Net.Codecs.Lucene40.Lucene40LiveDocsFormat;\r\n    using Lucene41StoredFieldsFormat = Lucene.Net.Codecs.Lucene41.Lucene41StoredFieldsFormat;\r\n    using Lucene42NormsFormat = Lucene.Net.Codecs.Lucene42.Lucene42NormsFormat;\r\n    using Lucene42TermVectorsFormat = Lucene.Net.Codecs.Lucene42.Lucene42TermVectorsFormat;\r\n    using PerFieldDocValuesFormat = Lucene.Net.Codecs.PerField.PerFieldDocValuesFormat;\r\n    using PerFieldPostingsFormat = Lucene.Net.Codecs.PerField.PerFieldPostingsFormat;\r\n\r\n    /// <summary>\r\n    /// Implements the Lucene 4.6 index format, with configurable per-field postings\r\n    /// and docvalues formats.\r\n    /// <para/>\r\n    /// If you want to reuse functionality of this codec in another codec, extend\r\n    /// <see cref=\"FilterCodec\"/>.\r\n    /// <para/>\r\n    /// See <see cref=\"Lucene.Net.Codecs.Lucene46\"/> package documentation for file format details.\r\n    /// <para/>\r\n    /// @lucene.experimental \r\n    /// </summary>\r\n    // NOTE: if we make largish changes in a minor release, easier to just make Lucene46Codec or whatever\r\n    // if they are backwards compatible or smallish we can probably do the backwards in the postingsreader\r\n    // (it writes a minor version, etc).\r\n    [CodecName(\"Lucene46HighCompression\")]\r\n    public class Lucene46HighCompressionCodec : Codec {\r\n        private readonly StoredFieldsFormat fieldsFormat = new Lucene41StoredFieldsHighCompressionFormat();    //<--This is the only line different then the stock Lucene46Codec\r\n        private readonly TermVectorsFormat vectorsFormat = new Lucene42TermVectorsFormat();\r\n        private readonly FieldInfosFormat fieldInfosFormat = new Lucene46FieldInfosFormat();\r\n        private readonly SegmentInfoFormat segmentInfosFormat = new Lucene46SegmentInfoFormat();\r\n        private readonly LiveDocsFormat liveDocsFormat = new Lucene40LiveDocsFormat();\r\n\r\n        private readonly PostingsFormat postingsFormat;\r\n\r\n        private class PerFieldPostingsFormatAnonymousInnerClassHelper : PerFieldPostingsFormat {\r\n            private readonly Lucene46HighCompressionCodec outerInstance;\r\n\r\n            public PerFieldPostingsFormatAnonymousInnerClassHelper(Lucene46HighCompressionCodec outerInstance) {\r\n                this.outerInstance = outerInstance;\r\n            }\r\n\r\n            [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n            public override PostingsFormat GetPostingsFormatForField(string field) {\r\n                return outerInstance.GetPostingsFormatForField(field);\r\n            }\r\n        }\r\n\r\n        private readonly DocValuesFormat docValuesFormat;\r\n\r\n        private class PerFieldDocValuesFormatAnonymousInnerClassHelper : PerFieldDocValuesFormat {\r\n            private readonly Lucene46HighCompressionCodec outerInstance;\r\n\r\n            public PerFieldDocValuesFormatAnonymousInnerClassHelper(Lucene46HighCompressionCodec outerInstance) {\r\n                this.outerInstance = outerInstance;\r\n            }\r\n\r\n            [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n            public override DocValuesFormat GetDocValuesFormatForField(string field) {\r\n                return outerInstance.GetDocValuesFormatForField(field);\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Sole constructor. </summary>\r\n        public Lucene46HighCompressionCodec()\r\n            : base() {\r\n            postingsFormat = new PerFieldPostingsFormatAnonymousInnerClassHelper(this);\r\n            docValuesFormat = new PerFieldDocValuesFormatAnonymousInnerClassHelper(this);\r\n        }\r\n\r\n        public override sealed StoredFieldsFormat StoredFieldsFormat => fieldsFormat;\r\n\r\n        public override sealed TermVectorsFormat TermVectorsFormat => vectorsFormat;\r\n\r\n        public override sealed PostingsFormat PostingsFormat => postingsFormat;\r\n\r\n        public override sealed FieldInfosFormat FieldInfosFormat => fieldInfosFormat;\r\n\r\n        public override sealed SegmentInfoFormat SegmentInfoFormat => segmentInfosFormat;\r\n\r\n        public override sealed LiveDocsFormat LiveDocsFormat => liveDocsFormat;\r\n\r\n        /// <summary>\r\n        /// Returns the postings format that should be used for writing\r\n        /// new segments of <paramref name=\"field\"/>.\r\n        /// <para/>\r\n        /// The default implementation always returns \"Lucene41\"\r\n        /// </summary>\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        public virtual PostingsFormat GetPostingsFormatForField(string field) {\r\n            // LUCENENET specific - lazy initialize the codec to ensure we get the correct type if overridden.\r\n            if (defaultFormat == null) {\r\n                defaultFormat = Lucene.Net.Codecs.PostingsFormat.ForName(\"Lucene41\");\r\n            }\r\n            return defaultFormat;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns the docvalues format that should be used for writing\r\n        /// new segments of <paramref name=\"field\"/>.\r\n        /// <para/>\r\n        /// The default implementation always returns \"Lucene45\"\r\n        /// </summary>\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        public virtual DocValuesFormat GetDocValuesFormatForField(string field) {\r\n            // LUCENENET specific - lazy initialize the codec to ensure we get the correct type if overridden.\r\n            if (defaultDVFormat == null) {\r\n                defaultDVFormat = Lucene.Net.Codecs.DocValuesFormat.ForName(\"Lucene45\");\r\n            }\r\n            return defaultDVFormat;\r\n        }\r\n\r\n        public override sealed DocValuesFormat DocValuesFormat => docValuesFormat;\r\n\r\n        // LUCENENET specific - lazy initialize the codecs to ensure we get the correct type if overridden.\r\n        private PostingsFormat defaultFormat;\r\n        private DocValuesFormat defaultDVFormat;\r\n\r\n        private readonly NormsFormat normsFormat = new Lucene42NormsFormat();\r\n\r\n        public override sealed NormsFormat NormsFormat => normsFormat;\r\n    }\r\n```\r\n\r\nHere is a unit test to demonstrate use of the High Compression Codec:\r\n\r\n```csharp\r\npublic class TestCompression {\r\n\r\n\r\n        [Fact]\r\n        public void HighCompression() {\r\n            FxTest.Setup();\r\n\r\n            Directory indexDir = new RAMDirectory();\r\n\r\n            Analyzer standardAnalyzer = new StandardAnalyzer(LuceneVersion.LUCENE_48);\r\n\r\n            IndexWriterConfig indexConfig = new IndexWriterConfig(LuceneVersion.LUCENE_48, standardAnalyzer);\r\n            indexConfig.Codec = new Lucene46HighCompressionCodec();\t\t//<--------Install the High Compression codec.\r\n\r\n            indexConfig.UseCompoundFile = true;\r\n\r\n            IndexWriter writer = new IndexWriter(indexDir, indexConfig);\r\n\r\n            //souce: https://github.com/apache/lucenenet/blob/Lucene.Net_4_8_0_beta00006/src/Lucene.Net/Search/SearcherFactory.cs\r\n            SearcherManager searcherManager = new SearcherManager(writer, applyAllDeletes: true, new SearchWarmer());\r\n\r\n            Document doc = new Document();\r\n            doc.Add(new StringField(\"examplePrimaryKey\", \"001\", Field.Store.YES));\r\n            doc.Add(new TextField(\"exampleField\", \"Unique gifts are great gifts.\", Field.Store.YES));\r\n            writer.AddDocument(doc);\r\n\r\n            doc = new Document();\r\n            doc.Add(new StringField(\"examplePrimaryKey\", \"002\", Field.Store.YES));\r\n            doc.Add(new TextField(\"exampleField\", \"Everyone is gifted.\", Field.Store.YES));\r\n            writer.AddDocument(doc);\r\n\r\n            doc = new Document();\r\n            doc.Add(new StringField(\"examplePrimaryKey\", \"003\", Field.Store.YES));\r\n            doc.Add(new TextField(\"exampleField\", \"Gifts are meant to be shared.\", Field.Store.YES));\r\n            writer.AddDocument(doc);\r\n\r\n            writer.Commit();\r\n\r\n            searcherManager.MaybeRefreshBlocking();\r\n            IndexSearcher indexSearcher = searcherManager.Acquire();\r\n            try {\r\n                QueryParser parser = new QueryParser(LuceneVersion.LUCENE_48, \"exampleField\", standardAnalyzer);\r\n                Query query = parser.Parse(\"everyone\");\r\n\r\n                TopDocs topDocs = indexSearcher.Search(query, int.MaxValue);\r\n\r\n                int numMatchingDocs = topDocs.ScoreDocs.Length;\r\n                Assert.Equal(1, numMatchingDocs);\r\n\r\n\r\n                Document docRead = indexSearcher.Doc(topDocs.ScoreDocs[0].Doc);\r\n                string primaryKey = docRead.Get(\"examplePrimaryKey\");\r\n                Assert.Equal(\"002\", primaryKey);\r\n\r\n            } finally {\r\n                searcherManager.Release(indexSearcher);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/764964147/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765012058","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-765012058","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":765012058,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTAxMjA1OA==","user":{"login":"ahmad-devlop","id":72513193,"node_id":"MDQ6VXNlcjcyNTEzMTkz","avatar_url":"https://avatars.githubusercontent.com/u/72513193?v=4","gravatar_id":"","url":"https://api.github.com/users/ahmad-devlop","html_url":"https://github.com/ahmad-devlop","followers_url":"https://api.github.com/users/ahmad-devlop/followers","following_url":"https://api.github.com/users/ahmad-devlop/following{/other_user}","gists_url":"https://api.github.com/users/ahmad-devlop/gists{/gist_id}","starred_url":"https://api.github.com/users/ahmad-devlop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ahmad-devlop/subscriptions","organizations_url":"https://api.github.com/users/ahmad-devlop/orgs","repos_url":"https://api.github.com/users/ahmad-devlop/repos","events_url":"https://api.github.com/users/ahmad-devlop/events{/privacy}","received_events_url":"https://api.github.com/users/ahmad-devlop/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-21T23:42:50Z","updated_at":"2021-01-21T23:42:50Z","author_association":"NONE","body":"I highly appreciate your detailed response. @rclabo \r\nHowever, when I try to use this two classes, I faced this problem:\r\n\r\n`System.ArgumentException: 'Codec 'Lucene46HighCompression' cannot be loaded. If the codec is not in a Lucene.Net assembly, you must subclass Lucene.Net.Codecs.DefaultCodecFactory, override the Initialize() method, and call PutCodecType() or ScanForCodecs() to add the type manually. Call Lucene.Net.Codecs.Codec.SetCodecFactory() at application startup to initialize your custom codec.'`\r\n\r\n![Capture](https://user-images.githubusercontent.com/72513193/105425798-17711b80-5c5b-11eb-97d2-4ada8e31f961.PNG)\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765012058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765044601","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-765044601","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":765044601,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTA0NDYwMQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-22T01:08:46Z","updated_at":"2021-01-22T01:08:46Z","author_association":"CONTRIBUTOR","body":"@rclabo is partially correct. This requires a custom codec configuration and the implementation he provided is what I would recommend. However, when *reading* an index the codec must be properly registered for Lucene.NET to instantiate it.\r\n\r\nWhen *writing* the index, the codec can be specified as:\r\n\r\n```c#\r\nIndexWriterConfig indexConfig = new IndexWriterConfig(LuceneVersion.LUCENE_48, standardAnalyzer);\r\nindexConfig.Codec = new Lucene46HighCompressionCodec();\r\n```\r\n\r\nOr when properly registered (see registration steps below):\r\n\r\n```c#\r\nIndexWriterConfig indexConfig = new IndexWriterConfig(LuceneVersion.LUCENE_48, standardAnalyzer);\r\nindexConfig.Codec = Codec.ForName(\"Lucene46HighCompression\");\r\n```\r\n\r\n## Codec Registration\r\n\r\nWhen *reading*, the codec is instantiated based on its text name (in this case `\"Lucene46HighCompression\"`) which is stored in the index file. Codecs are supplied to Lucene.NET using an abstract factory pattern (which fits nicely with dependency injection if you are using it).\r\n\r\nIn your application's startup path you will need to add the following line to register your custom codec with high compression:\r\n\r\n```c#\r\nCodec.SetCodecFactory(new DefaultCodecFactory {\r\n    CustomCodecTypes = new Type[] { typeof(Lucene46HighCompressionCodec) }\r\n});\r\n```\r\n\r\n> Alternatively, see the [codec documentation](https://lucenenet.apache.org/docs/4.8.0-beta00013/api/core/Lucene.Net.Codecs.html#using-microsoftextensionsdependencyinjection-to-register-a-custom-codec) for examples of using `Microsoft.Extensions.DependencyInjection` to register codecs. Registering with other dependency injection containers is similar.\r\n\r\n> **NOTE:** Codecs are registered as singleton lifestyle. That is, once instantiated the same instance with that name is always used for all read/write operations.\r\n\r\nThis tells Lucene.NET what type to load. The `CodecNameAttribute` that decorates the custom codec (which is optional) specifies the name of the codec.\r\n\r\n> **IMPORTANT:** since high compression is binary incompatible with normal compression, you should not reuse the same name as `\"Lucene46\"` for your custom codec name. Reusing the same name is allowed and the last registration wins, but will only work if the codec has the exact same binary format.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765044601/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765053924","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-765053924","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":765053924,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTA1MzkyNA==","user":{"login":"ahmad-devlop","id":72513193,"node_id":"MDQ6VXNlcjcyNTEzMTkz","avatar_url":"https://avatars.githubusercontent.com/u/72513193?v=4","gravatar_id":"","url":"https://api.github.com/users/ahmad-devlop","html_url":"https://github.com/ahmad-devlop","followers_url":"https://api.github.com/users/ahmad-devlop/followers","following_url":"https://api.github.com/users/ahmad-devlop/following{/other_user}","gists_url":"https://api.github.com/users/ahmad-devlop/gists{/gist_id}","starred_url":"https://api.github.com/users/ahmad-devlop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ahmad-devlop/subscriptions","organizations_url":"https://api.github.com/users/ahmad-devlop/orgs","repos_url":"https://api.github.com/users/ahmad-devlop/repos","events_url":"https://api.github.com/users/ahmad-devlop/events{/privacy}","received_events_url":"https://api.github.com/users/ahmad-devlop/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-22T01:35:08Z","updated_at":"2021-01-22T01:35:08Z","author_association":"NONE","body":"Thanks a lot @NightOwl888 , it solved the problem.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765053924/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765363447","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-765363447","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":765363447,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTM2MzQ0Nw==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-22T12:26:45Z","updated_at":"2021-01-22T12:26:45Z","author_association":"CONTRIBUTOR","body":"Thanks @NightOwl888.  That makes perfect sense. \r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765363447/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765383722","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-765383722","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":765383722,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTM4MzcyMg==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-22T13:05:05Z","updated_at":"2021-01-22T13:05:05Z","author_association":"CONTRIBUTOR","body":"@NightOwl888  The more I think about this, it's kinda interesting.  If one uses an IndexWriter to open the index and then obtains a NRT reader from the IndexWriter then the codec gets hard coded via either\r\n       `indexConfig.Codec = new Lucene46HighCompressionCodec();`\r\nor\r\n      `indexConfig.Codec = Codec.ForName(\"Lucene46HighCompression\");`\r\n\r\nBut if one obtains a reader via `DirectoryReader aReader = DirectoryReader.Open(indexDir); ` then the codec used is selected dynamically based on the codec name stored in the index header. \r\n\r\nIt makes sensed that when obtaining a writer for a new index the codec would need to be explicitly stated in code, but it's odd that when obtaining a writer for an _existing index_ the codec is not obtained dynamically based on the codec in the header of the index.  Isn't that lack of symmetry in the design kinda odd?  (I realize this statement is not about Lucene.Net per se but about Java Lucene design.)\r\n\r\nTo give flexibility to NRT readers (obtained from an `IndexWriter`) to open indexes with different codecs, it seems there is probably an easy way to read the codec name from the header so that the name could be used in ` `indexConfig.Codec = Codec.ForName(nameReadFromHeader);``.  \r\n\r\nIs there an existing API to get this codec name from the header? ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765383722/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765396539","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-765396539","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":765396539,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTM5NjUzOQ==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-22T13:30:32Z","updated_at":"2021-01-22T13:30:32Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Never mind.  I think I understand now.  Even when opening the index for writing by creating a new `IndexWriter` with `OpenMode.CREATE_OR_APPEND` if the index already exists then it's codec will be loaded dynamically based on the codec specified in the header, any codec specified in the `indexConfig.Codec` and passed to the `IndexWriter` will be ignored.  The `indexConfig.Codec` is only used when creating a new index.  ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765396539/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765444859","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-765444859","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":765444859,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTQ0NDg1OQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-22T14:36:49Z","updated_at":"2021-01-22T14:36:49Z","author_association":"CONTRIBUTOR","body":"@rclabo \r\n\r\nThere is one \"default\" codec that defaults to `\"Lucene46\"` (and floats per Lucene version) which can be set/retrieved through the `Codec.Default` property. If there is no codec registered with the name `\"Lucene46\"` and the `Codec.Default` property is not explicitly set, there will be a `NullReferenceException` when opening the `IndexWriter` (this should probably be changed to `InvalidOperationException` for .NET compatibility).\r\n\r\nThis means codec doesn't actually have to be specified in `IndexWriterConfig` each time you open an index unless it varies from whatever the default is, it can be set once at application startup.\r\n\r\n```c#\r\nCodec.Default = new Lucene46HighCompressionCodec();\r\n```\r\n\r\nHowever, in `IndexWriter` the codec that is set/defaulted is for writing *new segments* to the index. Each segment can technically have a different codec which is specified through the `SegmentInfo.Codec` property, but they are all initialized using the codec that is passed through `IndexWriterConfig.Codec` by default (which can be overridden). As you have correctly pointed out, when opening an index for reading (even with NRT), it will use the codec specified in the index header rather than the `IndexWriter` class.\r\n\r\n> Is there an existing API to get this codec name from the header?\r\n\r\nThere is, but it is not technically meant for end-users. It requires you know the name of the segment file in the index as well as the zero-based index of the segment within the file.\r\n\r\n```c#\r\nvar sis = new SegmentInfos();\r\nsis.Read(directory, segmentFileName);\r\nstring codecName = sis.Segments[segmentIndex].Info.Codec.Name;\r\n```\r\n\r\nDo note however that this internally calls `Codec.ForName()` to instantiate the codec so the codec needs to be registered with Lucene.NET first in order to read the name this way. The actual `Read()` method has quite a bit of version-specific branching logic within it, so deconstructing it so it always gives you a name without ever calling `Codec.ForName()` is a bit more involved.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765444859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765470602","html_url":"https://github.com/apache/lucenenet/issues/403#issuecomment-765470602","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/403","id":765470602,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTQ3MDYwMg==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-22T15:09:51Z","updated_at":"2021-01-22T15:09:51Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I totally understood that the codec doesn't have to be specified via the `indexConfig.Codec` when opening a writer if using the default codec.  For sure. \r\n\r\nI appreciate you pointing out that \r\n\r\n> in IndexWriter the codec that is set/defaulted is for writing new segments to the index. Each segment can technically have a different codec which is specified through the SegmentInfo.Codec property,\r\n\r\nThis is very cool and means that simply by forcing a merge one can change the codec used for storing data given that a new segment will be created on merge and that segment will use the codec specified by `indexConfig.Codec` .  Very cool.  \r\n\r\nAlso thanks for pointing out how to obtain the codec name from a segment.  I understand that typically accessing this isn't needed but it's great for a tool that provides info about segments.  If different segments were using different codecs it's nice that there is a way to see which codec each segment is using.  ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/765470602/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768102412","html_url":"https://github.com/apache/lucenenet/issues/400#issuecomment-768102412","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/400","id":768102412,"node_id":"MDEyOklzc3VlQ29tbWVudDc2ODEwMjQxMg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-27T07:48:43Z","updated_at":"2021-01-27T07:48:43Z","author_association":"CONTRIBUTOR","body":"I am closing this issue, as it seems that either using a valid query string or using the `SimpleQueryParser` will salve the issue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768102412/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768126835","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-768126835","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":768126835,"node_id":"MDEyOklzc3VlQ29tbWVudDc2ODEyNjgzNQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-27T08:38:27Z","updated_at":"2021-01-27T08:38:27Z","author_association":"CONTRIBUTOR","body":"Note that the Lucene JIRA issue that discusses this fix is [LUCENE-5889](https://issues.apache.org/jira/browse/LUCENE-5889).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768126835/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768298151","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-768298151","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":768298151,"node_id":"MDEyOklzc3VlQ29tbWVudDc2ODI5ODE1MQ==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-27T13:50:42Z","updated_at":"2021-01-27T13:50:42Z","author_association":"CONTRIBUTOR","body":"It's too bad the member var for IndexWriter in the Java class is private rather then protected.  So inheriting from `AnalyzingInfixSuggester` and adding on a simple method \r\n\r\n```\r\npublic virtual void Commit() {\r\n            writer.Commit();\r\n        }\r\n```\r\nisn't an option sadly.  Makes a person appreciate the power of making member vars protected rather than private.  Something I don't do in my own code nearly enough.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768298151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768412488","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-768412488","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":768412488,"node_id":"MDEyOklzc3VlQ29tbWVudDc2ODQxMjQ4OA==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-27T16:39:10Z","updated_at":"2021-01-27T16:39:10Z","author_association":"CONTRIBUTOR","body":"I'd be happy to make the needed change and submit it.  This should be a nice first issue for me.  I would have assigned this issue to myself but didn't see how (the check box was missing from the list of issues view).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768412488/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768452713","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-768452713","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":768452713,"node_id":"MDEyOklzc3VlQ29tbWVudDc2ODQ1MjcxMw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-27T17:37:26Z","updated_at":"2021-01-27T17:37:26Z","author_association":"CONTRIBUTOR","body":"@rclabo \r\n\r\nSure, this is something that both looks easy and might not be as easy as it looks :grin:.\r\n\r\nPlease make sure it is clear (with either comments or c# sections) which parts are ported from after Lucene 4.8.0. By convention, we use `\\\\ LUCENENET specific - ` followed by a brief note about how we have diverged from Lucene 4.8.0.\r\n\r\nThose extra constructor parameters look innocuous enough until you think about the fact that it is a breaking constructor API change. Please add another ctor overload while preserving both the signature and behavior of the original 4.8.0 constructor, just to make sure the changes are completely compatible with 4.8.0-ported code.\r\n\r\n> Note: Microsoft almost never uses optional parameters in their code, so that is something we usually try to avoid.\r\n\r\nBy the same measure, tests should be set up to ensure exact 4.8.0 compatibility as well as for testing the complete functionality of these new changes, and we should ensure that these 2 groups of tests are clearly delineated in the code with a clear path forward when the code is upgraded beyond 4.8.0.\r\n\r\nFortunately, adding a `Commit()` method is not a breaking API change, so there is no issue with simply adding it on top of the existing API.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768452713/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768454957","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-768454957","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":768454957,"node_id":"MDEyOklzc3VlQ29tbWVudDc2ODQ1NDk1Nw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-27T17:40:59Z","updated_at":"2021-01-27T17:40:59Z","author_association":"CONTRIBUTOR","body":"Also note that in [LUCENE-5889](https://issues.apache.org/jira/browse/LUCENE-5889) these changes extend beyond just the `AnalyzingInfixSuggester` class, as the functionality applies to some other suggesters as well.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768454957/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768486539","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-768486539","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":768486539,"node_id":"MDEyOklzc3VlQ29tbWVudDc2ODQ4NjUzOQ==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-27T18:32:59Z","updated_at":"2021-01-27T18:32:59Z","author_association":"CONTRIBUTOR","body":"I was initially just proposing to add the `commit` method to the `AnalyzingInfixSuggester` because I figured you wanted to keep Lucene.Net 4.8 as close to the java version as possible.  But I'd be happy to fully apply [LUCENE-5889](https://issues.apache.org/jira/browse/LUCENE-5889) .  That will be a step of from the trivial change I intended but still seems fairly easy I think.  Will do.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768486539/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768503501","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-768503501","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":768503501,"node_id":"MDEyOklzc3VlQ29tbWVudDc2ODUwMzUwMQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-27T19:02:04Z","updated_at":"2021-01-27T19:02:04Z","author_association":"CONTRIBUTOR","body":"Much like https://github.com/apache/lucenenet/issues/274, it is generally easier to keep track of changes if an entire Lucene patch is applied, rather than pulling out individual changes within the patch. This isn't always completely possible due to the fact that some patches depend on changes that exist in other patches, but it is a bit easier to reconcile the state of the release if we know what patches have been added.\r\n\r\n- Lucene 4.8.0\r\n  - \\+ LUCENE-6001\r\n  - \\+ LUCENE-5889 ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/768503501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/769191728","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-769191728","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":769191728,"node_id":"MDEyOklzc3VlQ29tbWVudDc2OTE5MTcyOA==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-28T16:08:26Z","updated_at":"2021-01-28T16:08:26Z","author_association":"CONTRIBUTOR","body":"In the diffs for the LUCENE-5889 [commit](https://github.com/apache/lucene-solr/commit/4a485d68771e5e123139cc12e9ea2733a922baea) There are two files that are part of solr rather than Lucene.  These two files appear as the last two in the diff and are:\r\nsolr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingInfixLookupFactory.java\r\nsolr/core/src/java/org/apache/solr/spelling/suggest/fst/BlendedInfixLookupFactory.java\r\n\r\nSince they are part of solr rather than Lucene they do not currently exist in the Lucene.Net repository.  I'm guessing they they should not be added as part of my implementation of LUCENE-5889.  Agreed?\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/769191728/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/769210572","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-769210572","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":769210572,"node_id":"MDEyOklzc3VlQ29tbWVudDc2OTIxMDU3Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-28T16:35:39Z","updated_at":"2021-01-28T16:35:39Z","author_association":"CONTRIBUTOR","body":"Yes, that is correct. We have no plans to port SOLR, although we might consider that down the road when upgrading to a more recent Lucene version.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/769210572/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770104703","html_url":"https://github.com/apache/lucenenet/issues/360#issuecomment-770104703","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/360","id":770104703,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDEwNDcwMw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-29T23:33:18Z","updated_at":"2021-01-29T23:33:18Z","author_association":"CONTRIBUTOR","body":"@rclabo \r\n\r\nThanks for the PR. This feature is now implemented and will be in the next beta release.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770104703/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770112305","html_url":"https://github.com/apache/lucenenet/issues/405#issuecomment-770112305","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/405","id":770112305,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDExMjMwNQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-01-30T00:01:15Z","updated_at":"2021-01-30T00:01:59Z","author_association":"CONTRIBUTOR","body":"I suspect that https://github.com/apache/lucenenet/commit/11323a515f920e8779bc0209849b3479d3243235 might be where this problem began occurring.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770112305/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770890211","html_url":"https://github.com/apache/lucenenet/issues/353#issuecomment-770890211","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/353","id":770890211,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDg5MDIxMQ==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T14:18:12Z","updated_at":"2021-02-01T14:18:12Z","author_association":"CONTRIBUTOR","body":"Based on the Sept 24, 2020, I wonder if this one should be closed and not done.  If all affected methods are internal, and if the object instantiation in a tight loop can't be omitted then I'm not sure there is much benefit   And any benifit needs to be weighed against the downside. Converting the public API surface to follow .Net conventions is great, but for private methods, the benefit is less clear since any changes means that doing doing diff against a future java version and applying those diffs is more challenging.  ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770890211/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770937055","html_url":"https://github.com/apache/lucenenet/issues/256#issuecomment-770937055","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/256","id":770937055,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDkzNzA1NQ==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T15:23:57Z","updated_at":"2021-02-01T15:23:57Z","author_association":"CONTRIBUTOR","body":"Regarding `DependentHandle` :\r\n\r\n>Can we assume the native method exists for the current platform\r\n\r\nThis is a head scratcher.  On one hand the `static extern` is likely referencing some native binary implementation.  This would suggest the binary implementation for each platform would have to be bundled with J2N so that they could be available and that doesn't feel like the right direction.  On the other hand this call is being made from .Net Core 3.0 code which would suggest that the appropriate binaries must already be in place on all platforms that .Net Core 3.0 supports.  So in the end, my money is on those extern methods being available everywhere .Net Core 3.0 supports.   That of course does not ensure .NET Standard 2.0 support by any means.  Which brings us back to having to embed OS specific binaries which sounds like Yuk!\r\n\r\nSo I did some poking around and it appears there is an identical mono class that does not make extern calls.  Incorporating this as the J2N implementation may be the way to go.  https://github.com/dotnet/runtime/blob/master/src/mono/netcore/System.Private.CoreLib/src/System/Runtime/CompilerServices/DependentHandle.cs ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770937055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770980608","html_url":"https://github.com/apache/lucenenet/issues/259#issuecomment-770980608","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/259","id":770980608,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDk4MDYwOA==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T16:26:06Z","updated_at":"2021-02-01T16:26:06Z","author_association":"CONTRIBUTOR","body":"The first paragraph and the 2nd paragraph don't seem quite congruent.  Is the primary issue here that some lines of the tests may be commented out because the functionality didn't exist at the time the test was ported.  If so, then I suggest the course of action is to visually inspect all tests for the projects listed to ensure no needed lines of code are commented out.  If any commented lines are found then uncomment them and run the test to ensure it still passes.  If that approach is sufficient for this issue then I'm willing to do that work and this issue can be assigned to me.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770980608/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770982896","html_url":"https://github.com/apache/lucenenet/issues/405#issuecomment-770982896","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/405","id":770982896,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDk4Mjg5Ng==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T16:29:31Z","updated_at":"2021-02-01T16:29:31Z","author_association":"CONTRIBUTOR","body":"I'll do this one","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/770982896/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771056928","html_url":"https://github.com/apache/lucenenet/issues/256#issuecomment-771056928","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/256","id":771056928,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTA1NjkyOA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T18:18:33Z","updated_at":"2021-02-01T18:18:33Z","author_association":"CONTRIBUTOR","body":"> So I did some poking around and it appears there is an identical mono class that does not make extern calls. Incorporating this as the J2N implementation may be the way to go. https://github.com/dotnet/runtime/blob/master/src/mono/netcore/System.Private.CoreLib/src/System/Runtime/CompilerServices/DependentHandle.cs\r\n\r\nGood find. However, upon closer inspection, `GC.register_ephemeron_array(data);` is also a native call and so is the source of `GC.EPHEMERON_TOMBSTONE`.\r\n\r\nSo, either way it appears we need to go native to solve this. However, it looks like using the approach of Mono is simpler.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771056928/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771062197","html_url":"https://github.com/apache/lucenenet/issues/405#issuecomment-771062197","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/405","id":771062197,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTA2MjE5Nw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T18:26:48Z","updated_at":"2021-02-01T18:26:48Z","author_association":"CONTRIBUTOR","body":"Great. I have assigned the issue to you. Thanks.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771062197/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771082151","html_url":"https://github.com/apache/lucenenet/issues/259#issuecomment-771082151","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/259","id":771082151,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTA4MjE1MQ==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T19:00:29Z","updated_at":"2021-02-01T19:00:29Z","author_association":"CONTRIBUTOR","body":"@rclabo \r\n\r\nI have updated the text of the original task to make it clearer. I have also broken down the task by test project. If necessary, we can further break it down by namespace to divide up the work between multiple people.\r\n\r\nLet me know if you are still on board with doing (at least some of) this task.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771082151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771150700","html_url":"https://github.com/apache/lucenenet/issues/256#issuecomment-771150700","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/256","id":771150700,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTE1MDcwMA==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T20:54:01Z","updated_at":"2021-02-01T20:54:01Z","author_association":"CONTRIBUTOR","body":"Yep it looks like you are correct.  \r\n\r\nAnother options, and maybe one I like even better is to use compiler directives to use the existing `WeakDictionary` for NET Standard 2.0 and to use `ConditionalWeakTable` for NET Standard 2.1 or later.  \r\n\r\nThis avoids the whole \"port  `ConditionalWeakTable` to NET Standard 2.0\" all together.  This way the code works on NET Standard 2.0 but is even more performant in highly concurrent environments when running in NET Standard 2.1 or later.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771150700/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771164540","html_url":"https://github.com/apache/lucenenet/issues/259#issuecomment-771164540","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/259","id":771164540,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTE2NDU0MA==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T21:17:37Z","updated_at":"2021-02-01T21:17:37Z","author_association":"CONTRIBUTOR","body":"Let me do a dry run on some of the tests in Lucene.Net.Tests._A-D to get a sense of the time requirement for this.  Lucene.Net has 7735 tests, which is no small amount. I need some sense of the time it's gonna take before I can know what I can sign up for.  I'll report back here after I review some and see what level of effort is required.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771164540/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771203226","html_url":"https://github.com/apache/lucenenet/issues/256#issuecomment-771203226","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/256","id":771203226,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTIwMzIyNg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-01T22:26:02Z","updated_at":"2021-02-01T22:26:02Z","author_association":"CONTRIBUTOR","body":"We already are using conditional compilation to minimize usage of `WeakDictionary`, this issue is mainly about\r\n\r\n- Improving performance on .NET Framework and other platforms that don't support .NET Standard 2.1\r\n- Factoring `WeakDictionary` (and its tests) out of Lucene.NET altogether\r\n\r\nDo note that `WeakDictionary` is basically a straight port from `WeakHashSet` in Java and some of its tests fail when running in `Debug` mode in addition to having performance issues with cleanup. AFAIK this does not cause issues with Lucene.NET, but it is not very encouraging.\r\n\r\nWe could potentially add an option in .NET Standard 2.0 for [`CachedOrdinalsReader`](https://github.com/apache/lucenenet/blob/f5cca0b1a7c855f2fe44a5cdd27763aab7acdf22/src/Lucene.Net.Facet/Taxonomy/CachedOrdinalsReader.cs) to use `ConditionalWeakTable` by disabling the functionality of [`RamBytesUsed()`](https://github.com/apache/lucenenet/blob/f5cca0b1a7c855f2fe44a5cdd27763aab7acdf22/src/Lucene.Net.Facet/Taxonomy/CachedOrdinalsReader.cs#L211-L234) when the user doesn't require it and eliminate one usage of `WeakDictionary`.\r\n\r\nHowever, that would still leave `WeakDictionary` in\r\n\r\n- `FieldCacheImpl`\r\n- `AssertingScorer`\r\n- `CachingWrapperFilter`\r\n- `ThreadedIndexingAndSearchingTestCase`\r\n\r\nSince the main usage (and main bottleneck) of `WeakDictionary` on .NET Standard 2.0 is in `FieldCacheImpl`, that wouldn't gain us very much.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771203226/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771675613","html_url":"https://github.com/apache/lucenenet/issues/256#issuecomment-771675613","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/256","id":771675613,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTY3NTYxMw==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T14:32:44Z","updated_at":"2021-02-02T14:32:44Z","author_association":"CONTRIBUTOR","body":"Ok, that's all great information.  Thank you!  \r\n\r\nSince no version of .NET Framework yet supports .NET Standard 2.1 and since .NET Framework 4.6.1 does supports .NET Standard 2.0, if the performance hit of using `WeakDictionary` is large then I can totally see where you are coming from.  \r\n\r\nSince `WeakDictionary` is a port of `WeakHashSet` in Java , has anyone taken a long hard look at the `WeakDictionary` code to see why it's not more performant and why some of it's tests fail in `debug` mode?  ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771675613/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771731062","html_url":"https://github.com/apache/lucenenet/issues/406#issuecomment-771731062","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/406","id":771731062,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTczMTA2Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T15:48:45Z","updated_at":"2021-02-02T15:48:45Z","author_association":"CONTRIBUTOR","body":"I specifically [brought this to the attention of the NUnit team](https://github.com/nunit/nunit3-vs-adapter/issues/301) when we started targeting NUnit 3 instead of NUnit 2. `Console.WriteLine()` used to work in NUnit 2 flawlessly, but we had to make the switch to NUnit 3 to support .NET Standard.\r\n\r\nThere seems to be more options in NUnit 3, but I haven't worked out which one is the \"right\" one for our use cases\r\n\r\n- In Visual Studio, write output to debug or console output\r\n- On `dotnet test`, output to stdout\r\n- Xamarin.Android - not sure\r\n- Xamarin.iOS - not sure\r\n- UWP - not sure\r\n\r\nI believe all of the mobile platforms have a standard way to write output, but they would need further investigation.\r\n\r\n## Verbose Setting\r\n\r\nDo note that we also had an issue with some of the tests with larger output filling up a buffer in Visual Studio and crashing the IDE. Those tests have since had their `Verbose` output either disabled or truncated. We either need to find an actual way to increase the buffer, or find the \"proper\" way to output the logging from the tests.\r\n\r\nCurrently verbose is set to true when running tests in `Debug` mode. It can also be set to true by adding a file named `lucene.testsettings.json` in a test folder or parent folder of the tests with `verbose` set to `true`\r\n\r\n```json\r\n{\r\n    \"tests\": {\r\n        \"verbose\": \"true\"\r\n    }\r\n}\r\n```\r\n\r\n## Abstraction of Output Methods\r\n\r\nI suggest using an abstract set of `Write` and `WriteLine` methods into the test framework for writing the output into a `TextWriter` and then we can easily switch that to whatever output NUnit requires or even do more than one output simultaneously, if needed. The `Trace` functionality of .NET is designed in just such a way.\r\n\r\nDo note that in some cases, output is written to an `InfoStream`, which can be directed to any `TextWriter` as well.\r\n\r\n## Future Porting\r\n\r\nOne additional thing to keep in mind - when porting future tests, the logical thing to do is to change\r\n\r\n- `System.out.println()` > `Console.WriteLine()`\r\n- `System.out.print()` > `Console.Write()`\r\n\r\nWhatever syntax we actually end up with, we should strive to make these lines intuitive to convert to .NET.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771731062/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771769423","html_url":"https://github.com/apache/lucenenet/issues/256#issuecomment-771769423","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/256","id":771769423,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTc2OTQyMw==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T16:36:08Z","updated_at":"2021-02-02T16:39:32Z","author_association":"CONTRIBUTOR","body":"> Since `WeakDictionary` is a port of `WeakHashSet` in Java , has anyone taken a long hard look at the `WeakDictionary` code to see why it's not more performant and why some of it's tests fail in debug mode?\r\n\r\nYes, [Vincent Van Den Burghe looked at this a while back](https://lists.apache.org/thread.html/8afa06f330d3fe566bad15a4e408a4e8bd25c9c92a6cbf3bd8136768%40%3Cdev.lucenenet.apache.org%3E) and this was a \"best effort\" that could be done using pure managed code. It uses `WeakReference` to allow references to be GC'd, however, the dictionary entries still need to be cleaned up after the `WeakReference` dies and therein lies the bottleneck. Most read/write operations do a `CleanIfNeeded()` operation which isn't very efficient.\r\n\r\nUsing native resources is really the only way we can be sure that dictionary entries are \"removed\" as soon as their contained reference goes out of scope. `ConditionalWeakTable` does exactly what we need, but in .NET Standard 2.0 it is missing 2 of the APIs we need, which is a deal breaker in those 5 cases mentioned above.\r\n\r\n> Since no version of .NET Framework yet supports .NET Standard 2.1\r\n\r\nMicrosoft considers [.NET Framework to be \"finished\"](https://github.com/dotnet/standard/issues/859#issuecomment-435985504) and there will be no further development on it, including upgrading to .NET Standard 2.1. This is a problem that won't go away until everyone moves from .NET Framework to .NET 5+, which is now the best upgrade path.\r\n\r\nThis problem dies with .NET Framework (meaning it will become less of an issue over time) and we have a solution that works for now, but is less than ideal. Additionally, `WeakDictionary` has been marked internal. Therefore, this issue is fairly low priority.\r\n\r\nThat being said, there are other components of J2N that could benefit performance-wise by using native code as well. It would be great if we set up a precedent for building and deploying native code with J2N.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771769423/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771772631","html_url":"https://github.com/apache/lucenenet/issues/406#issuecomment-771772631","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/406","id":771772631,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTc3MjYzMQ==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T16:40:07Z","updated_at":"2021-02-02T16:40:07Z","author_association":"CONTRIBUTOR","body":"Thanks @NightOwl888, great info.\r\n\r\nI've done many hours of research on this and here is what I have found.  I'd really value your thoughts.\r\n\r\n## Console.WriteLine  IS going somewhere\r\nAlmost by accident, I discovered that at least for failing tests the output for `Console.WriteLine` does actually go someplace useful.  When looking at the failing test, notice the error message column in the screenshot below\r\n\r\n![screenshot1](https://user-images.githubusercontent.com/6945499/106625192-72045480-6544-11eb-98ee-8a4ca472c077.png)\r\n\r\nAt first glance it seems like it's just telling that there was a certain type of exception.  BUT if you right click that failing test and click \"Copy Details\" it will place the WHOLE message on the clipboard.  By pasting that in some editor, I came to realize that the exception message is crazy long, and in fact does contain the `Console.WriteLine`  output:\r\n\r\n![screenshot2](https://user-images.githubusercontent.com/6945499/106625738-f48d1400-6544-11eb-9652-77a1c67d9418.png)\r\n\r\nWhile this does not send the `Console.WriteLine` to the output window, it does make the output available when investigating a failing test which is probably one of it's most likely use cases.\r\n\r\n## Other API Options\r\nI have tried all of theses:\r\n\r\n```\r\nTestContext.Progress.WriteLine\r\nTestContext.Out.WriteLine\r\nTestContext.WriteLine\r\nConsole.WriteLine\r\nConsole.Error.WriteLine\r\n```\r\nIn the version of NUnit that Lucene.Net is using, none of these go to the output window.  Although, `System.Diagnostics.Debug.WriteLine` can be routed in VS to the immediate window, which is not a totally bad option BUT it does not get included in the exception message which is an important consideration.\r\n\r\n## Parallel Unit tests\r\nOne of the reason that this whole issue cropped up in NUnit3 which did not exist in NUnit2 is that in NUnit3 there was a concern that when running unit tests in parallel, the output from something like  `Console.WriteLine` was a bit problematic given that the output from several different tests running at the same time would be intermixed.  One could certainly see how that could be a problem.  This is why NUnit introduced the methods on the `TextContext` class for writing output in version 3.  \r\n\r\nThe idea was to have some methods on that class write immediately (somewhere?!) and to have some be buffered at the unit test level and only output with the test results when that unit test completes.  This in theory sounds pretty smart to me, as it gets away from the whole problem of having output intermixed for multiple tests but still provides the ability to theoretically output in real time if desired.  In practice, the actual implementation seems wonky, however.  Here is what my tests show based on examining the exception message content, and remember I can get none of these to go to the output window (or intermediate window) currently:\r\n\r\n`TestContext.Progress.WriteLine` - I can't find this output anywhere, not in the exception message, not in the output window or immediate window. I don't know where it goes... crazy!\r\n`TestContext.Out.WriteLine` - writes immediately even though the [docs](https://docs.nunit.org/articles/nunit/writing-tests/TestContext.html ) say it's buffered.\r\n`TestContext.WriteLine` - writes immediately.\r\n`Console.WriteLine`  - writes immediately.\r\n`Console.Error.WriteLine` - buffered till end of unit test then written.\r\n\r\n## In NUnit 3.17 it's now possible to send Console.WriteLine to Output Window\r\nApparently this is a recognized NUnit3 issue, [issue 343](https://github.com/nunit/nunit3-vs-adapter/issues/343).  The issue was first placed in June 2017 and got plenty of community banter.  The issue was resolved with the release of NUnit3TestAdapter ver 3.17 which is the current production release of NUnit.  This is to say that being able to have `Console.WriteLine` go to the output window was only recently solved by NUnit.  \r\n\r\nCurrently Lucene.Net uses NUnit3TestAdapter ver 3.16.1.  \r\n\r\n## Wrap-up and Call for Feedback\r\nSo it seems tempting to recommend that we upgraded Lucene.net from NUnit3.16.1 to NUnit 3.17 but I know in a project of this size, and with the number of unit test it has, there may be hidden issues I'm unaware of.  The good news is whether we upgrade NUnit or now, we now know how  to see the output from `Console.WriteLine` in the exception message of failed tests.  And frankly that's probably the time we most want to see the output.  So maybe it's good enough to just know that's possible.  \r\n\r\nAs an aside we now have a way to make the random seed for the test visible when a test fails.  We can just use `Console.WriteLine` to write the seed and it will show up in the exception message. That's cool to know.  \r\n\r\nBut we do still have to figure out if upgrading to NUnit 3.17 is worth while.  Given that I don't personally use console messages that much in my own approach to debugging, I don't have a strong opinion either way, especially since I now know how to see the output in the exception messages.  What are your thoughts?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771772631/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771823942","html_url":"https://github.com/apache/lucenenet/issues/406#issuecomment-771823942","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/406","id":771823942,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTgyMzk0Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T17:35:02Z","updated_at":"2021-02-02T17:35:02Z","author_association":"CONTRIBUTOR","body":"> But we do still have to figure out if upgrading to NUnit 3.17 is worth while. Given that I don't personally use console messages that much in my own approach to debugging, I don't have a strong opinion either way, especially since I now know how to see the output in the exception messages. What are your thoughts?\r\n\r\nThere is one issue: Xamarin tests (which I am currently doing work on) cannot use anything higher than NUnit `3.10.1`.\r\n\r\nHowever, the way forward is to downgrade to that version on `Lucene.Net.TestFramework` as well as add targets to all of the test projects for .NET Standard 2.0 and .NET Standard 2.1, which will also target NUnit 3.10.1 (which will be consumed by projects that target Xamarin). All existing test project targets can use the latest version of NUnit, 3.17.\r\n\r\nIt is becoming clear that the `Dependencies.props` file needs to be changed to a later place in the pipeline after the `TargetFramework` has been set so it can have conditional `PackageFramework` dependency versions set for specific target frameworks. Currently it is referenced by the root `Directory.Build.props` file, which is before target framework is specified. This would allow us to specify 3.10.1 for .NET Standard 2.x and 3.1.7 for everything else.\r\n\r\nI will need to check how difficult it may be to tie the output of `Console.WriteLine` to the output of `Xamarin`, although I wasn't planning on releasing the test runner I created along with Lucene.NET, it is just to verify compatibility with mobile platforms.\r\n\r\n### Parallel Unit tests\r\n\r\nSounds good in theory, but in Lucene.NET we are limited to running tests serially due to shared static members in the test framework. Changing this could be done, but would require some fairly extensive refactoring with how the codecs are loaded and breaking API changes.\r\n\r\nSo, in effect we are gaining nothing from this NUnit \"feature\" except confusion about where the results are and even worse, limits that cause truncation of the output and/or crashes.\r\n\r\n[Here is a test that is crashing](https://github.com/apache/lucenenet/blob/ae13dc4dfe0b8a2d305b9f8f860ac0849a16ac80/src/Lucene.Net.Tests/Index/TestByteSlices.cs#L35-L44) when the buffer in VS is overloaded.\r\n\r\n### VS Test Output\r\n\r\n\"Copy Details\" seems to have some finite limit. If the amount of text exceeds the limit, it is truncated and may not be very useful.\r\n\r\nUnfortunately, the Lucene tests were designed with an infinite amount of space to log into.\r\n\r\nI don't find the logging here particularly useful either. However, it is not just meant for the Lucene.NET team, it is meant for anyone that consumes the test framework - therefore, it should be set up in a reasonable way to make debugging easy for those who depend on it.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771823942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771872803","html_url":"https://github.com/apache/lucenenet/issues/406#issuecomment-771872803","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/406","id":771872803,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTg3MjgwMw==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T18:33:27Z","updated_at":"2021-02-02T18:41:19Z","author_association":"CONTRIBUTOR","body":">Sounds good in theory, but in Lucene.NET we are limited to running tests serially due to shared static members in the test framework.\r\n\r\nI kinda thought that might be the case.  I see no pressing reason to switch from serially running the tests.  That keeps our lives more sane.\r\n\r\n>All existing test project targets can use the latest version of NUnit, 3.17.\r\n\r\n>\"Copy Details\" seems to have some finite limit. If the amount of text exceeds the limit, it is truncated and may not be very useful. Unfortunately, the Lucene tests were designed with an infinite amount of space to log into.\r\n\r\n>I don't find the logging here particularly useful either. However, it is not just meant for the Lucene.NET team, it is meant for anyone that consumes the test framework - therefore, it should be set up in a reasonable way to make debugging easy for those who depend on it.\r\n\r\nIf we go to with NUnit 3.17 then the full output of `Console.WriteLine` will go to the output window in VS, for all tests except the  .NET Standard 2.0 & 2.1 testing targets running NUnit 3.10.1 (for Xamarin compatibility).  So that kinda solves the truncation problem and sounds like a good plan for how to move forward.  Since you were planning on creating the additional testing targets for Xamerin that use NUnit 3.10 anyway, do you want to be the one to upgrade the other compilation targets to use NUnit 3.17 at the same time?  I can do it, but it seems like a good fit for you to do it with the other XUnit dependency changes.\r\n\r\n>although I wasn't planning on releasing the test runner I created along with Lucene.NET, it is just to verify compatibility with mobile platforms.\r\n\r\nIs it available elsewhere where I could take a look at it just to better understand what such a test runner looks like?\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771872803/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771978544","html_url":"https://github.com/apache/lucenenet/issues/405#issuecomment-771978544","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/405","id":771978544,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTk3ODU0NA==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T20:55:22Z","updated_at":"2021-02-02T20:55:22Z","author_association":"CONTRIBUTOR","body":"It seems like the commit for [this change](https://github.com/apache/lucenenet/pull/381/commits/c95ac72b2a50dd4d5fc887003df82bc6e2db1fb7) got rolled back since it does not appear in the [commit history for TestDocTermOrds](https://github.com/apache/lucenenet/commits/master/src/Lucene.Net.Tests/Index/TestDocTermOrds.cs).  Is that a valid understanding?  If so, is there any way in GitHub to actually confirm the commit was applied on date A but rolled back on date B? Or is there some other explanation for not seeing that commit in the commit history?  (Sorry for these kinds of basic questions, I'm still working on better understanding GitHub )","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771978544/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771992128","html_url":"https://github.com/apache/lucenenet/issues/406#issuecomment-771992128","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/406","id":771992128,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTk5MjEyOA==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T21:14:29Z","updated_at":"2021-02-02T21:18:41Z","author_association":"CONTRIBUTOR","body":">Is it available elsewhere where I could take a look at it just to better understand what such a test runner looks like?\r\n\r\nI have setup a [temporary repo](https://dev.azure.com/LuceneNET-Temp/Lucene.NET/_git/NUnit.Xamarin.Android?path=%2Fsrc%2FNUnit.Xamarin.Android%2FTestSuiteInstrumentation.cs) so you can have a peek.\r\n\r\n### `BlameListener`\r\n\r\n`BlameListener` is a custom class that writes the name of each test before it is run so if there is a crash, we know which test caused the crash. I have been trying to get the NUnit team to implement such a feature for years.\r\n\r\n- [Test log to determine which test last ran when the test runner crashed](https://github.com/nunit/nunit3-vs-adapter/issues/381)\r\n- [How do I determine what exception caused Test Explorer to crash?](https://stackoverflow.com/q/45954441)\r\n\r\nAt least with the .NET 5 SDK, Microsoft finally added the blame-crash option to [`dotnet test`](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test) so crashes can be detected, but it would be nice if this didn't have to be built for every other runner manually.\r\n\r\n> NOTE: In Xamarin, there are problems with how generics are implemented that caused infinite recursion in [`ArrayEqualityComparer`](https://github.com/NightOwl888/J2N/blob/master/src/J2N/Collections/ArrayEqualityComparer.cs#L85). It would have been nearly impossible to track it down without this feature.\r\n\r\n> It also proved useful when you submitted your first PR, as it detected the crash of the runner on the command line, whereas Visual Studio simply ignores it and doesn't report anything.\r\n\r\n-----------------\r\n\r\n> Since you were planning on creating the additional testing targets for Xamerin that use NUnit 3.10 anyway, do you want to be the one to upgrade the other compilation targets to use NUnit 3.17 at the same time? I can do it, but it seems like a good fit for you to do it with the other XUnit dependency changes.\r\n\r\nThere is no conflict if you upgrade NUnit to 3.17 globally now (in `Dependencies.props`) and the other changes are implemented later, including the ability to specify a different version on specific target frameworks.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771992128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771999402","html_url":"https://github.com/apache/lucenenet/issues/405#issuecomment-771999402","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/405","id":771999402,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTk5OTQwMg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T21:25:36Z","updated_at":"2021-02-02T21:25:36Z","author_association":"CONTRIBUTOR","body":"I apologize, I should have specified that the change is from PR #381 that hasn't been merged to `master`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/771999402/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/772061506","html_url":"https://github.com/apache/lucenenet/issues/406#issuecomment-772061506","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/406","id":772061506,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjA2MTUwNg==","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T22:39:47Z","updated_at":"2021-02-02T22:39:47Z","author_association":"CONTRIBUTOR","body":">BlameListener is a custom class that writes the name of each test before it is run so if there is a crash, we know which test caused the crash.\r\n\r\n I'm unable to locate the `BlameListener` class.  Where does that one live?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/772061506/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/772068962","html_url":"https://github.com/apache/lucenenet/issues/354#issuecomment-772068962","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/354","id":772068962,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjA2ODk2Mg==","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-02-02T22:51:42Z","updated_at":"2021-02-02T22:51:42Z","author_association":"CONTRIBUTOR","body":"Given that #381 doesn't seem to solve our issue and we have had no other takers, it looks like it is time to deprecate `TaskMergeScheduler`.\r\n\r\n```c#\r\n[Obsolete(\"Use ConcurrentMergeScheduler instead. This class will be removed in 4.8.0 release candidate.\"), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]\r\npublic class TaskMergeScheduler : MergeScheduler, IConcurrentMergeScheduler\r\n```\r\n\r\nAs part of the deprecation, we need to tear out the [`LuceneTestCase.ConcurrentMergeSchedulerFactories`](https://github.com/apache/lucenenet/blob/ae13dc4dfe0b8a2d305b9f8f860ac0849a16ac80/src/Lucene.Net.TestFramework/Util/LuceneTestCase.cs#L3552-L3578) and revert all of the tests that depend on it back to their original Java Lucene implementation. Other references to `TaskMergeScheduler` should also be removed from tests.\r\n\r\nWe can also remove the tests for `TaskMergeScheduler` altogether, which will improve testing run times.\r\n\r\nAlthough it wasn't part of Lucene, we can leave the `IConcurrentMergeScheduler` interface in Lucene.NET as it might be in use by users already.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/772068962/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]