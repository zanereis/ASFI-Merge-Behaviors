[{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868785","html_url":"https://github.com/apache/storm/issues/5363#issuecomment-2612868785","issue_url":"https://api.github.com/repos/apache/storm/issues/5363","id":2612868785,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg3ODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T16:59:17Z","updated_at":"2025-01-24T16:00:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1085\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1085</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868785/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874310","html_url":"https://github.com/apache/storm/issues/5396#issuecomment-2612874310","issue_url":"https://api.github.com/repos/apache/storm/issues/5396","id":2612874310,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzQzMTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T16:59:17Z","updated_at":"2025-01-24T16:03:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1125\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1125</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874310/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192362113","html_url":"https://github.com/apache/storm/pull/1125#issuecomment-192362113","issue_url":"https://api.github.com/repos/apache/storm/issues/1125","id":192362113,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjM2MjExMw==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:10:50Z","updated_at":"2016-03-04T17:10:50Z","author_association":"CONTRIBUTOR","body":"I merged this changed in both master and 1.x-branch.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192362113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874314","html_url":"https://github.com/apache/storm/issues/5396#issuecomment-2612874314","issue_url":"https://api.github.com/repos/apache/storm/issues/5396","id":2612874314,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzQzMTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:10:51Z","updated_at":"2025-01-24T16:03:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1125#issuecomment-192362113\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1125#issuecomment-192362113</a></p>\n\n<p>    I merged this changed in both master and 1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192368860","html_url":"https://github.com/apache/storm/pull/1087#issuecomment-192368860","issue_url":"https://api.github.com/repos/apache/storm/issues/1087","id":192368860,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjM2ODg2MA==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:26:28Z","updated_at":"2016-03-04T17:26:28Z","author_association":"CONTRIBUTOR","body":"@revans2 @ptgoetz I have upmerged this again. I feel this is important fix to avoid letting workers write to /tmp and cause disk full issues. So we should put this in 1.x-branch as well. \nIf no objections, I will pull it into 1.x-branch as well.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192368860/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868940","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868940","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868940,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:26:29Z","updated_at":"2025-01-24T16:00:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1087#issuecomment-192368860\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1087#issuecomment-192368860</a></p>\n\n<p>    @revans2 @ptgoetz I have upmerged this again. I feel this is important fix to avoid letting workers write to /tmp and cause disk full issues. So we should put this in 1.x-branch as well. <br/>\n    If no objections, I will pull it into 1.x-branch as well.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192370725","html_url":"https://github.com/apache/storm/pull/1087#issuecomment-192370725","issue_url":"https://api.github.com/repos/apache/storm/issues/1087","id":192370725,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjM3MDcyNQ==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:29:49Z","updated_at":"2016-03-04T17:29:49Z","author_association":"MEMBER","body":"+1 for merging to both branches.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192370725/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868947","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868947","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868947,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:29:50Z","updated_at":"2025-01-24T16:00:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1087#issuecomment-192370725\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1087#issuecomment-192370725</a></p>\n\n<p>    +1 for merging to both branches.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871286","html_url":"https://github.com/apache/storm/issues/5378#issuecomment-2612871286","issue_url":"https://api.github.com/repos/apache/storm/issues/5378","id":2612871286,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzEyODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:45:15Z","updated_at":"2025-01-24T16:01:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1103\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1103</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871286/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192378480","html_url":"https://github.com/apache/storm/pull/1087#issuecomment-192378480","issue_url":"https://api.github.com/repos/apache/storm/issues/1087","id":192378480,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjM3ODQ4MA==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:51:16Z","updated_at":"2016-03-04T17:51:16Z","author_association":"CONTRIBUTOR","body":"Travis CI build failure is unrelated\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192378480/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868950","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868950","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868950,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T17:51:17Z","updated_at":"2025-01-24T16:00:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1087#issuecomment-192378480\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1087#issuecomment-192378480</a></p>\n\n<p>    Travis CI build failure is unrelated</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868950/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868962","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868962","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868962,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5NjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:12:14Z","updated_at":"2025-01-24T16:00:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user kishorvpatil opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1187\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1187</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1529\" title=\"Change default worker temp directory location for workers\" class=\"issue-link\" data-issue-key=\"STORM-1529\"><del>STORM-1529</del></a> Change default temp dir for workers to worker launch directory for 1.x branch</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/kishorvpatil/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/kishorvpatil/incubator-storm</a> storm1529-1.x-branch</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1187.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1187.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1187</p>\n\n<hr />\n<p>commit 275bae83958e8c137f0faa1142a01639631531b7<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2016-03-04T18:11:21Z</p>\n\n<p>    Change default temp dir for workers to worker launch directory.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868962/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192388405","html_url":"https://github.com/apache/storm/pull/1087#issuecomment-192388405","issue_url":"https://api.github.com/repos/apache/storm/issues/1087","id":192388405,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjM4ODQwNQ==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:13:21Z","updated_at":"2016-03-04T18:13:21Z","author_association":"CONTRIBUTOR","body":"@revans2 @ptgoetz \nI created a separate Pull request for 1.x-branch as I can't merge ConfigUtils.  #1187. Please review.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192388405/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868967","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868967","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868967,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5Njc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:13:22Z","updated_at":"2025-01-24T16:00:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1087#issuecomment-192388405\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1087#issuecomment-192388405</a></p>\n\n<p>    @revans2 @ptgoetz <br/>\n    I created a separate Pull request for 1.x-branch as I can't merge ConfigUtils.  #1187. Please review.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868967/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868975","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868975","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868975,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:13:57Z","updated_at":"2025-01-24T16:00:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1087\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1087</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192405319","html_url":"https://github.com/apache/storm/pull/1187#issuecomment-192405319","issue_url":"https://api.github.com/repos/apache/storm/issues/1187","id":192405319,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjQwNTMxOQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:46:55Z","updated_at":"2016-03-04T18:46:55Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192405319/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868979","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868979","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868979,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:46:56Z","updated_at":"2025-01-24T16:00:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1187#issuecomment-192405319\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1187#issuecomment-192405319</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868979/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192405669","html_url":"https://github.com/apache/storm/pull/1187#issuecomment-192405669","issue_url":"https://api.github.com/repos/apache/storm/issues/1187","id":192405669,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjQwNTY2OQ==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:47:28Z","updated_at":"2016-03-04T18:47:28Z","author_association":"CONTRIBUTOR","body":"The Travis CI build failure seems unrelated.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192405669/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868983","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868983","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868983,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:47:31Z","updated_at":"2025-01-24T16:00:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1187#issuecomment-192405669\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1187#issuecomment-192405669</a></p>\n\n<p>    The Travis CI build failure seems unrelated.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868983/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192406935","html_url":"https://github.com/apache/storm/pull/1187#issuecomment-192406935","issue_url":"https://api.github.com/repos/apache/storm/issues/1187","id":192406935,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjQwNjkzNQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:50:41Z","updated_at":"2016-03-04T18:50:41Z","author_association":"CONTRIBUTOR","body":"@kishorvpatil yes the build failures look like they need the changes I made to reduce the memory usage in travis.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192406935/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868992","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868992","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868992,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:50:42Z","updated_at":"2025-01-24T16:00:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1187#issuecomment-192406935\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1187#issuecomment-192406935</a></p>\n\n<p>    @kishorvpatil yes the build failures look like they need the changes I made to reduce the memory usage in travis.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868992/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868996","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868996","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868996,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5OTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T18:57:03Z","updated_at":"2025-01-24T16:00:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1187\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1187</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868996/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192418520","html_url":"https://github.com/apache/storm/pull/1175#issuecomment-192418520","issue_url":"https://api.github.com/repos/apache/storm/issues/1175","id":192418520,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjQxODUyMA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T19:09:32Z","updated_at":"2016-03-04T19:09:32Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192418520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877985","html_url":"https://github.com/apache/storm/issues/5423#issuecomment-2612877985","issue_url":"https://api.github.com/repos/apache/storm/issues/5423","id":2612877985,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzc5ODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T19:09:33Z","updated_at":"2025-01-24T16:04:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1175#issuecomment-192418520\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1175#issuecomment-192418520</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877985/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192486048","html_url":"https://github.com/apache/storm/pull/1185#issuecomment-192486048","issue_url":"https://api.github.com/repos/apache/storm/issues/1185","id":192486048,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjQ4NjA0OA==","user":{"login":"redsanket","id":8295799,"node_id":"MDQ6VXNlcjgyOTU3OTk=","avatar_url":"https://avatars.githubusercontent.com/u/8295799?v=4","gravatar_id":"","url":"https://api.github.com/users/redsanket","html_url":"https://github.com/redsanket","followers_url":"https://api.github.com/users/redsanket/followers","following_url":"https://api.github.com/users/redsanket/following{/other_user}","gists_url":"https://api.github.com/users/redsanket/gists{/gist_id}","starred_url":"https://api.github.com/users/redsanket/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redsanket/subscriptions","organizations_url":"https://api.github.com/users/redsanket/orgs","repos_url":"https://api.github.com/users/redsanket/repos","events_url":"https://api.github.com/users/redsanket/events{/privacy}","received_events_url":"https://api.github.com/users/redsanket/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T21:53:08Z","updated_at":"2016-03-04T21:53:08Z","author_association":"NONE","body":"upmerge\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192486048/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651894","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651894","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651894,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE4OTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-04T21:53:10Z","updated_at":"2025-01-24T14:23:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#issuecomment-192486048\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#issuecomment-192486048</a></p>\n\n<p>    upmerge</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651894/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880393","html_url":"https://github.com/apache/storm/issues/5439#issuecomment-2612880393","issue_url":"https://api.github.com/repos/apache/storm/issues/5439","id":2612880393,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODAzOTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-05T00:11:32Z","updated_at":"2025-01-24T16:05:57Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user Parth-Brahmbhatt opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1188\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1188</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1604\" title=\"Delayed transition should handle NotALeaderException\" class=\"issue-link\" data-issue-key=\"STORM-1604\"><del>STORM-1604</del></a>:Delayed transition should handle NotALeaderException</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/Parth-Brahmbhatt/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/Parth-Brahmbhatt/incubator-storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1604\" title=\"Delayed transition should handle NotALeaderException\" class=\"issue-link\" data-issue-key=\"STORM-1604\"><del>STORM-1604</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1188.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1188.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1188</p>\n\n<hr />\n<p>commit b95fcd79cb1c2225cd0816f4e2b6eaaf7a2ffd13<br/>\nAuthor: Parth Brahmbhatt <brahmbhatt.parth@gmail.com><br/>\nDate:   2016-03-05T00:09:09Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1604\" title=\"Delayed transition should handle NotALeaderException\" class=\"issue-link\" data-issue-key=\"STORM-1604\"><del>STORM-1604</del></a>:Delayed transition should handle NotALeaderException</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880393/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583224","html_url":"https://github.com/apache/storm/issues/4801#issuecomment-2612583224","issue_url":"https://api.github.com/repos/apache/storm/issues/4801","id":2612583224,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODMyMjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-05T02:42:50Z","updated_at":"2025-01-24T13:53:08Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=bopcat\">bopcat</a>:</i>\n<p>Hi! I have the same.</p>\n\n<p>Storm v. 0. 9. 4. Pure Java. A simplistic Trident topology reading from Kafka. SINGLE NODE (i. e. only one worker and parallelism of one - this is important).</p>\n\n<p>The topology consists just of an OpaqueTridentKafkaSpout and a standard Debug filter. They are translated into standard Storm spout and three bolts: $mastercoord-bg0, $spoutcoord-spout0, spout0, b-0. The topology is doing nothing no matter what I send to the Kafka topic. Silence in the logs. The sun is shining. Birds are singing.</p>\n\n<p>This very same issue appeared from time to time. Some time ago I deployed a new topology and soon realized it was processing just a single batch every minute and between those batches it was idle. Then I created the simplistic one with a single Debug filter but with two workers in a three node cluster (Nimbus + two Supervisors). The behavior was reproduced. What I observed was that those batches with the one minute delays between them were processed on a different node than the one where my spout was deployed.</p>\n\n<p>Then I simplified the configuration down to a single worker and voila! The topology became idle and even redeploying it didn't help. So I hacked Trident code a little bit by adding log output to several classes and found the following: $mastercoord-bg0 works just fine and so does $spoutcoord-spout0 but then the tuples get lost on the way to spout0. The only tuples spout0 is able to see are ticks but Kafka broker info emitted from $spoutcoord-spout0 never reaches its destination. After 60 secs which are Storm's sync timeout $mastercoord-bg0 fails its transaction attempt.</p>\n\n<p>My hand made log output from Trident classes looks like this:</p>\n\n<p>2016-03-05T03:32:39.695+0100 storm.trident.topology.MasterBatchCoordinator <span class=\"error\">&#91;DEBUG&#93;</span> Emitted: 14813273:110<br/>\n2016-03-05T03:32:39.695+0100 storm.trident.spout.TridentSpoutCoordinator <span class=\"error\">&#91;DEBUG&#93;</span> Got a transaction: 14813273:110<br/>\n2016-03-05T03:32:39.697+0100 storm.trident.spout.TridentSpoutCoordinator <span class=\"error\">&#91;DEBUG&#93;</span> The transaction 14813273 triggers a new batch with metadata GlobalPartitionInformation{partitionMap={0=test-kafka3:9092}}<br/>\n2016-03-05T03:32:39.934+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:32:44.935+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:32:49.935+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:32:54.935+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:32:59.935+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:33:04.936+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:33:09.935+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:33:14.936+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:33:19.936+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:33:24.936+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:33:29.936+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:33:34.937+0100 storm.trident.topology.TridentBoltExecutor <span class=\"error\">&#91;DEBUG&#93;</span> Got a tuple: source: __system:-1, stream: __tick, id: {}, <span class=\"error\">&#91;5&#93;</span><br/>\n2016-03-05T03:33:39.693+0100 storm.trident.topology.MasterBatchCoordinator <span class=\"error\">&#91;DEBUG&#93;</span> Failed the transaction 14813273<br/>\n2016-03-05T03:33:39.696+0100 storm.trident.topology.MasterBatchCoordinator <span class=\"error\">&#91;DEBUG&#93;</span> Emitted: 14813273:111<br/>\n2016-03-05T03:33:39.696+0100 storm.trident.spout.TridentSpoutCoordinator <span class=\"error\">&#91;DEBUG&#93;</span> Got a transaction: 14813273:111<br/>\n2016-03-05T03:33:39.700+0100 storm.trident.spout.TridentSpoutCoordinator <span class=\"error\">&#91;DEBUG&#93;</span> The transaction 14813273 triggers a new batch with metadata GlobalPartitionInformation{partitionMap={0=test-kafka3:9092}}<br/>\n.....................</p>\n\n<p>Also I noticed that every time I submit the topology to the cluster, I see the following in its worker-670*.log:</p>\n\n<p>2016-03-05T01:41:49.057+0100 b.s.m.n.Client <span class=\"error\">&#91;ERROR&#93;</span> connection to Netty-Client-localhost/127.0.0.1:6706 is unavailable<br/>\n2016-03-05T01:41:49.057+0100 b.s.m.n.Client <span class=\"error\">&#91;ERROR&#93;</span> dropping 1 message(s) destined for Netty-Client-localhost/127.0.0.1:6706</p>\n\n<p>I don't know if it's relevant or not...</p>\n\n<p>Attaching also jstack's output (jstack-bopcat.txt).</p>\n\n<p>The topology is still frozen btw after several days and many redeploys.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612583224/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192615168","html_url":"https://github.com/apache/storm/pull/1171#issuecomment-192615168","issue_url":"https://api.github.com/repos/apache/storm/issues/1171","id":192615168,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MjYxNTE2OA==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-05T09:59:48Z","updated_at":"2016-03-05T09:59:48Z","author_association":"NONE","body":"@revans2 could you take a look?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192615168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878249","html_url":"https://github.com/apache/storm/issues/5425#issuecomment-2612878249","issue_url":"https://api.github.com/repos/apache/storm/issues/5425","id":2612878249,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgyNDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-05T09:59:51Z","updated_at":"2025-01-24T16:05:00Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1171#issuecomment-192615168\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1171#issuecomment-192615168</a></p>\n\n<p>    @revans2 could you take a look?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878249/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192798074","html_url":"https://github.com/apache/storm/pull/1150#issuecomment-192798074","issue_url":"https://api.github.com/repos/apache/storm/issues/1150","id":192798074,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mjc5ODA3NA==","user":{"login":"wuchong","id":5378924,"node_id":"MDQ6VXNlcjUzNzg5MjQ=","avatar_url":"https://avatars.githubusercontent.com/u/5378924?v=4","gravatar_id":"","url":"https://api.github.com/users/wuchong","html_url":"https://github.com/wuchong","followers_url":"https://api.github.com/users/wuchong/followers","following_url":"https://api.github.com/users/wuchong/following{/other_user}","gists_url":"https://api.github.com/users/wuchong/gists{/gist_id}","starred_url":"https://api.github.com/users/wuchong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wuchong/subscriptions","organizations_url":"https://api.github.com/users/wuchong/orgs","repos_url":"https://api.github.com/users/wuchong/repos","events_url":"https://api.github.com/users/wuchong/events{/privacy}","received_events_url":"https://api.github.com/users/wuchong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-06T03:41:31Z","updated_at":"2016-03-06T03:41:31Z","author_association":"MEMBER","body":"@revans2    addressed  \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192798074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647926","html_url":"https://github.com/apache/storm/issues/5087#issuecomment-2612647926","issue_url":"https://api.github.com/repos/apache/storm/issues/5087","id":2612647926,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDc5MjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-06T03:41:31Z","updated_at":"2025-01-24T14:21:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user wuchong commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1150#issuecomment-192798074\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1150#issuecomment-192798074</a></p>\n\n<p>    @revans2    addressed  </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647926/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880626","html_url":"https://github.com/apache/storm/issues/5440#issuecomment-2612880626","issue_url":"https://api.github.com/repos/apache/storm/issues/5440","id":2612880626,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA2MjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-06T07:57:19Z","updated_at":"2025-01-24T16:06:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cody\">cody</a>:</i>\n<p>storm will fail too even there's /usr/bin/python2.7.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880757","html_url":"https://github.com/apache/storm/issues/5441#issuecomment-2612880757","issue_url":"https://api.github.com/repos/apache/storm/issues/5441","id":2612880757,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA3NTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-06T08:33:08Z","updated_at":"2025-01-24T16:06:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user hustfxj opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1189\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1189</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1606\" title=\"Travis CI can&#39;t print the infomation of the testcase which  is on failure\" class=\"issue-link\" data-issue-key=\"STORM-1606\"><del>STORM-1606</del></a> print the  information of testcase which is on failure</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/hustfxj/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/hustfxj/storm</a> travis</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1189.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1189.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1189</p>\n\n<hr />\n<p>commit 812031ff7e3017dfcbff4c3434fbd3c2437dcb33<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-03-06T08:24:22Z</p>\n\n<p>    print the  information of testcase which is on failure</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880757/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880760","html_url":"https://github.com/apache/storm/issues/5441#issuecomment-2612880760","issue_url":"https://api.github.com/repos/apache/storm/issues/5441","id":2612880760,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA3NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-06T08:43:16Z","updated_at":"2025-01-24T16:06:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1189#discussion_r55135284\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1189#discussion_r55135284</a></p>\n\n<p>    &#8212; Diff: dev-tools/travis/print-errors-from-test-reports.py &#8212;<br/>\n    @@ -55,6 +55,10 @@ def print_error_reports_from_report_file(file_path):<br/>\n     if fail is not None:<br/>\n print_detail_information(testcase, fail)</p>\n\n<p>    +failure = testcase.find(\"failure\")<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I would suspect the validity of this change since \"fail\" is a substring of \"failure\", the script should not miss \"failure\"s by searching \"fail\".</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880760/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880768","html_url":"https://github.com/apache/storm/issues/5441#issuecomment-2612880768","issue_url":"https://api.github.com/repos/apache/storm/issues/5441","id":2612880768,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA3Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-06T12:42:05Z","updated_at":"2025-01-24T16:06:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1189#discussion_r55138526\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1189#discussion_r55138526</a></p>\n\n<p>    &#8212; Diff: dev-tools/travis/print-errors-from-test-reports.py &#8212;<br/>\n    @@ -55,6 +55,10 @@ def print_error_reports_from_report_file(file_path):<br/>\n     if fail is not None:<br/>\n print_detail_information(testcase, fail)</p>\n\n<p>    +failure = testcase.find(\"failure\")<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @unsleepy22  the  api \"find(match)\" of Python ElementTree finds the first sub element matching match. So the match is sub element, but not sub string</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880768/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/192884522","html_url":"https://github.com/apache/storm/pull/1189#issuecomment-192884522","issue_url":"https://api.github.com/repos/apache/storm/issues/1189","id":192884522,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mjg4NDUyMg==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-06T12:45:36Z","updated_at":"2016-03-06T12:45:36Z","author_association":"NONE","body":"Sorry, I didn't take a deep look. +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/192884522/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880772","html_url":"https://github.com/apache/storm/issues/5441#issuecomment-2612880772","issue_url":"https://api.github.com/repos/apache/storm/issues/5441","id":2612880772,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA3NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-06T12:45:37Z","updated_at":"2025-01-24T16:06:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1189#issuecomment-192884522\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1189#issuecomment-192884522</a></p>\n\n<p>    Sorry, I didn't take a deep look. +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880772/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880632","html_url":"https://github.com/apache/storm/issues/5440#issuecomment-2612880632","issue_url":"https://api.github.com/repos/apache/storm/issues/5440","id":2612880632,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA2MzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T02:09:34Z","updated_at":"2025-01-24T16:06:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=johnbaba\">johnbaba</a>:</i>\n<p>It looks good to me， although we don't run  storm.py directly! </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880632/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193083782","html_url":"https://github.com/apache/storm/pull/1038#issuecomment-193083782","issue_url":"https://api.github.com/repos/apache/storm/issues/1038","id":193083782,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzA4Mzc4Mg==","user":{"login":"vesense","id":6711230,"node_id":"MDQ6VXNlcjY3MTEyMzA=","avatar_url":"https://avatars.githubusercontent.com/u/6711230?v=4","gravatar_id":"","url":"https://api.github.com/users/vesense","html_url":"https://github.com/vesense","followers_url":"https://api.github.com/users/vesense/followers","following_url":"https://api.github.com/users/vesense/following{/other_user}","gists_url":"https://api.github.com/users/vesense/gists{/gist_id}","starred_url":"https://api.github.com/users/vesense/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vesense/subscriptions","organizations_url":"https://api.github.com/users/vesense/orgs","repos_url":"https://api.github.com/users/vesense/repos","events_url":"https://api.github.com/users/vesense/events{/privacy}","received_events_url":"https://api.github.com/users/vesense/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T04:01:46Z","updated_at":"2016-03-07T04:01:46Z","author_association":"MEMBER","body":"ping\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193083782/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703112","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612703112","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612703112,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMxMTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T04:01:49Z","updated_at":"2025-01-24T14:45:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#issuecomment-193083782\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#issuecomment-193083782</a></p>\n\n<p>    ping</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193087867","html_url":"https://github.com/apache/storm/pull/1038#issuecomment-193087867","issue_url":"https://api.github.com/repos/apache/storm/issues/1038","id":193087867,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzA4Nzg2Nw==","user":{"login":"vesense","id":6711230,"node_id":"MDQ6VXNlcjY3MTEyMzA=","avatar_url":"https://avatars.githubusercontent.com/u/6711230?v=4","gravatar_id":"","url":"https://api.github.com/users/vesense","html_url":"https://github.com/vesense","followers_url":"https://api.github.com/users/vesense/followers","following_url":"https://api.github.com/users/vesense/following{/other_user}","gists_url":"https://api.github.com/users/vesense/gists{/gist_id}","starred_url":"https://api.github.com/users/vesense/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vesense/subscriptions","organizations_url":"https://api.github.com/users/vesense/orgs","repos_url":"https://api.github.com/users/vesense/repos","events_url":"https://api.github.com/users/vesense/events{/privacy}","received_events_url":"https://api.github.com/users/vesense/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T04:17:41Z","updated_at":"2016-03-07T04:17:41Z","author_association":"MEMBER","body":"I filed some follow on JIRAs ([STORM-1573](https://issues.apache.org/jira/browse/STORM-1573) [STORM-1607](https://issues.apache.org/jira/browse/STORM-1607)) for the next phase.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193087867/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703118","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612703118","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612703118,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMxMTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T04:17:42Z","updated_at":"2025-01-24T14:45:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#issuecomment-193087867\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#issuecomment-193087867</a></p>\n\n<p>    I filed some follow on JIRAs (<a href=\"https://issues.apache.org/jira/browse/STORM-1573\" title=\"Add batch support for MongoInsertBolt\" class=\"issue-link\" data-issue-key=\"STORM-1573\"><del>STORM-1573</del></a>(<a href=\"https://issues.apache.org/jira/browse/STORM-1573\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1573</a>) <a href=\"https://issues.apache.org/jira/browse/STORM-1607\" title=\"Add MongoMapState for supporting trident&#39;s exactly once semantics\" class=\"issue-link\" data-issue-key=\"STORM-1607\"><del>STORM-1607</del></a>(<a href=\"https://issues.apache.org/jira/browse/STORM-1607\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1607</a>)) for the next phase.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703118/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644803","html_url":"https://github.com/apache/storm/issues/5069#issuecomment-2612644803","issue_url":"https://api.github.com/repos/apache/storm/issues/5069","id":2612644803,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQ4MDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T04:18:09Z","updated_at":"2025-01-24T14:20:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1108#issuecomment-193088001\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1108#issuecomment-193088001</a></p>\n\n<p>    ping</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644803/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193103574","html_url":"https://github.com/apache/storm/pull/1136#issuecomment-193103574","issue_url":"https://api.github.com/repos/apache/storm/issues/1136","id":193103574,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzEwMzU3NA==","user":{"login":"vesense","id":6711230,"node_id":"MDQ6VXNlcjY3MTEyMzA=","avatar_url":"https://avatars.githubusercontent.com/u/6711230?v=4","gravatar_id":"","url":"https://api.github.com/users/vesense","html_url":"https://github.com/vesense","followers_url":"https://api.github.com/users/vesense/followers","following_url":"https://api.github.com/users/vesense/following{/other_user}","gists_url":"https://api.github.com/users/vesense/gists{/gist_id}","starred_url":"https://api.github.com/users/vesense/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vesense/subscriptions","organizations_url":"https://api.github.com/users/vesense/orgs","repos_url":"https://api.github.com/users/vesense/repos","events_url":"https://api.github.com/users/vesense/events{/privacy}","received_events_url":"https://api.github.com/users/vesense/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T05:10:52Z","updated_at":"2016-03-07T05:10:52Z","author_association":"MEMBER","body":"Thanks @dan-blanchard I'd love to hear from pyleus contributors.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193103574/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874760","html_url":"https://github.com/apache/storm/issues/5400#issuecomment-2612874760","issue_url":"https://api.github.com/repos/apache/storm/issues/5400","id":2612874760,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzQ3NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T05:10:56Z","updated_at":"2025-01-24T16:03:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1136#issuecomment-193103574\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1136#issuecomment-193103574</a></p>\n\n<p>    Thanks @dan-blanchard I'd love to hear from pyleus contributors.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874760/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881077","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881077","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881077,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEwNzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T11:27:01Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user arunmahadevan opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1608\" title=\"Fix stateful topology acking behavior\" class=\"issue-link\" data-issue-key=\"STORM-1608\"><del>STORM-1608</del></a> Fix stateful topology acking behavior</p>\n\n<p>    Right now the acking is automatically taken care of for the non-stateful bolts in a stateful topology. This leads to double acking if BaseRichBolts are part of the topology and the acking does not complete and tuples are re-emitted.</p>\n\n<p>    For the non-stateful bolts, its better to let the bolt do the acking rather than automatically acking.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/arunmahadevan/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/arunmahadevan/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1608\" title=\"Fix stateful topology acking behavior\" class=\"issue-link\" data-issue-key=\"STORM-1608\"><del>STORM-1608</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1190</p>\n\n<hr />\n<p>commit c0bce3e470ca4d502ee4d2ee953e06e0c0fa96c5<br/>\nAuthor: Arun Mahadevan <aiyer@hortonworks.com><br/>\nDate:   2016-03-07T06:00:35Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1608\" title=\"Fix stateful topology acking behavior\" class=\"issue-link\" data-issue-key=\"STORM-1608\"><del>STORM-1608</del></a> Fix stateful topology acking behavior</p>\n\n<p>    Right now the acking is automatically taken care of for the non-stateful bolts in a stateful topology.<br/>\n    This leads to double acking if BaseRichBolts are part of the topology.<br/>\n    For the non-stateful bolts, its better to let the bolt do the acking rather than automatically acking.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881077/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193220524","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-193220524","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":193220524,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzIyMDUyNA==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T11:57:55Z","updated_at":"2016-03-07T11:57:55Z","author_association":"MEMBER","body":"+1 LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193220524/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881082","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881082","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881082,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEwODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T11:57:57Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-193220524\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-193220524</a></p>\n\n<p>    +1 LGTM</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881082/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193280978","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-193280978","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":193280978,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzI4MDk3OA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T14:52:47Z","updated_at":"2016-03-07T14:52:47Z","author_association":"CONTRIBUTOR","body":"I didn't dig very deeply into the design of the stateful topology check-pointing so perhaps this is a very naive question, but why do all of the tuples flowing through need to be anchored/acked?  and if we get the anchoring/acking wrong what happens?  Will the state be messed up?  will we process things incorrectly?  Why do we even care if someone is OK with dropping tuples?\n\nWhat exactly is the contract that we have made between the bolts and the state checkpoint system?  Because this changes that contract, but I don't see any corresponding documentation change.\n\nWhat about the use case where someone does not ack a tuple, because they didn't expect it to be tracked, especially because we auto-anchored it for them in a previous bolt?\n\nAuto-anchoring feels like as big of a mistake as auto-acking something, unless we have a very explicit contract with end users to explain what they are and are not allowed to do.\n\nIt makes me very nervous when we try to \"fix\" someone's code automatically for them assuming that we know what they are doing.  Personally if we cannot guarantee that we are fixing it correctly 100% of the time we should not be fixing it ever.\n\nI am +1 for this patch, but I would like to understand why we are also auto-anchoring emitted tuples, and I would like to know where the contract is documented with end users on what a bolt is and is not allowed to do in this system.\n\nI have quite a few other misgivings about this feature in general and need to dig into it myself, but this is not really the best place for them.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193280978/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881086","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881086","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881086,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEwODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T14:52:49Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-193280978\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-193280978</a></p>\n\n<p>    I didn't dig very deeply into the design of the stateful topology check-pointing so perhaps this is a very naive question, but why do all of the tuples flowing through need to be anchored/acked?  and if we get the anchoring/acking wrong what happens?  Will the state be messed up?  will we process things incorrectly?  Why do we even care if someone is OK with dropping tuples?</p>\n\n<p>    What exactly is the contract that we have made between the bolts and the state checkpoint system?  Because this changes that contract, but I don't see any corresponding documentation change.</p>\n\n<p>    What about the use case where someone does not ack a tuple, because they didn't expect it to be tracked, especially because we auto-anchored it for them in a previous bolt?</p>\n\n<p>    Auto-anchoring feels like as big of a mistake as auto-acking something, unless we have a very explicit contract with end users to explain what they are and are not allowed to do.</p>\n\n<p>    It makes me very nervous when we try to \"fix\" someone's code automatically for them assuming that we know what they are doing.  Personally if we cannot guarantee that we are fixing it correctly 100% of the time we should not be fixing it ever.</p>\n\n<p>    I am +1 for this patch, but I would like to understand why we are also auto-anchoring emitted tuples, and I would like to know where the contract is documented with end users on what a bolt is and is not allowed to do in this system.</p>\n\n<p>    I have quite a few other misgivings about this feature in general and need to dig into it myself, but this is not really the best place for them.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881086/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193283763","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-193283763","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":193283763,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzI4Mzc2Mw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T14:57:52Z","updated_at":"2016-03-07T14:57:52Z","author_association":"CONTRIBUTOR","body":"+1 on what I see, but we do need to fix an issue with JDK7.\n\n```\n[ERROR] /home/travis/build/apache/storm/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java:[90,19] cannot find symbol\n  symbol:   method putIfAbsent(java.lang.String,java.lang.String)\n  location: variable kafkaProps of type java.util.Map<java.lang.String,java.lang.Object>\n```\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193283763/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193287545","html_url":"https://github.com/apache/storm/pull/1189#issuecomment-193287545","issue_url":"https://api.github.com/repos/apache/storm/issues/1189","id":193287545,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzI4NzU0NQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T15:04:47Z","updated_at":"2016-03-07T15:04:47Z","author_association":"CONTRIBUTOR","body":"+1 good catch.  I was wondering why it seemed to work on the clojure code but not on junit.  Thanks for doing this.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193287545/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880777","html_url":"https://github.com/apache/storm/issues/5441#issuecomment-2612880777","issue_url":"https://api.github.com/repos/apache/storm/issues/5441","id":2612880777,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA3Nzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T15:04:48Z","updated_at":"2025-01-24T16:06:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1189#issuecomment-193287545\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1189#issuecomment-193287545</a></p>\n\n<p>    +1 good catch.  I was wondering why it seemed to work on the clojure code but not on junit.  Thanks for doing this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880777/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193287754","html_url":"https://github.com/apache/storm/pull/1184#issuecomment-193287754","issue_url":"https://api.github.com/repos/apache/storm/issues/1184","id":193287754,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzI4Nzc1NA==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T15:05:10Z","updated_at":"2016-03-07T15:05:10Z","author_association":"CONTRIBUTOR","body":"WorkerManager - shutting down worker, launching worker, cleanup worker, reading worker heartbeat (basically the pieces of code which deals with individual worker) can go here. \nCode which calls the WorkerManager for each worker e.g. shutdownAllWorkers can go to SupervisorManager as you have done. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193287754/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193289484","html_url":"https://github.com/apache/storm/pull/1171#issuecomment-193289484","issue_url":"https://api.github.com/repos/apache/storm/issues/1171","id":193289484,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzI4OTQ4NA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T15:08:01Z","updated_at":"2016-03-07T15:08:01Z","author_association":"CONTRIBUTOR","body":"+1 looks good to me\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193289484/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878255","html_url":"https://github.com/apache/storm/issues/5425#issuecomment-2612878255","issue_url":"https://api.github.com/repos/apache/storm/issues/5425","id":2612878255,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgyNTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T15:08:02Z","updated_at":"2025-01-24T16:05:00Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1171#issuecomment-193289484\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1171#issuecomment-193289484</a></p>\n\n<p>    +1 looks good to me</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645030","html_url":"https://github.com/apache/storm/issues/5070#issuecomment-2612645030","issue_url":"https://api.github.com/repos/apache/storm/issues/5070","id":2612645030,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDUwMzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T15:27:25Z","updated_at":"2025-01-24T14:20:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user abellina opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1233\" title=\"port backtype.storm.security.auth.AuthUtils-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1233\"><del>STORM-1233</del></a>: Port AuthUtilsTest to java</p>\n\n<p>    I did a little bit of refactoring in AuthUtils:</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>Using Hex.encodeHexString in makeDigestPayload instead of StringBuilder and String.format</li>\n\t<li>Factored out the reflective class instantiations as a generic functions.</li>\n\t<li>Added a null check in updateSubject</li>\n</ul>\n\n\n<p>    I am also using JUnit TemporaryFolder to create temp folders which should be deleted after the test runs.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/abellina/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/abellina/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1233\" title=\"port backtype.storm.security.auth.AuthUtils-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1233\"><del>STORM-1233</del></a>_port_AuthUtils_test_to_java</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1191</p>\n\n<hr />\n<p>commit b795bd7e47e79f1e6b063db543b6d8fbfd3620f3<br/>\nAuthor: Alessandro Bellina <abellina@yahoo-inc.com><br/>\nDate:   2016-02-29T13:49:07Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1233\" title=\"port backtype.storm.security.auth.AuthUtils-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1233\"><del>STORM-1233</del></a>: Port AuthUtilsTest to java</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645030/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193343032","html_url":"https://github.com/apache/storm/pull/1188#issuecomment-193343032","issue_url":"https://api.github.com/repos/apache/storm/issues/1188","id":193343032,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzM0MzAzMg==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T16:54:38Z","updated_at":"2016-03-07T16:54:38Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193343032/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880405","html_url":"https://github.com/apache/storm/issues/5439#issuecomment-2612880405","issue_url":"https://api.github.com/repos/apache/storm/issues/5439","id":2612880405,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA0MDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T16:54:41Z","updated_at":"2025-01-24T16:05:57Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1188#issuecomment-193343032\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1188#issuecomment-193343032</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880405/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193353011","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-193353011","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":193353011,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzM1MzAxMQ==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T17:15:01Z","updated_at":"2016-03-07T17:15:01Z","author_association":"MEMBER","body":"@revans2 @hmcl putIfAbsent issue on JDK 7 can be avoided if it is changed from Map to ConcurrentMap.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193353011/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878258","html_url":"https://github.com/apache/storm/issues/5425#issuecomment-2612878258","issue_url":"https://api.github.com/repos/apache/storm/issues/5425","id":2612878258,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgyNTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:03:55Z","updated_at":"2025-01-24T16:05:00Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1171\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1171</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878258/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878264","html_url":"https://github.com/apache/storm/issues/5425#issuecomment-2612878264","issue_url":"https://api.github.com/repos/apache/storm/issues/5425","id":2612878264,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgyNjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:04:37Z","updated_at":"2025-01-24T16:05:00Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Cody\" class=\"user-hover\" rel=\"Cody\">Cody</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878264/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193398956","html_url":"https://github.com/apache/storm/pull/1175#issuecomment-193398956","issue_url":"https://api.github.com/repos/apache/storm/issues/1175","id":193398956,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzM5ODk1Ng==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:06:05Z","updated_at":"2016-03-07T19:06:05Z","author_association":"CONTRIBUTOR","body":"@revans2 can you merge this https://github.com/apache/storm/pull/1170 ?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193398956/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877991","html_url":"https://github.com/apache/storm/issues/5423#issuecomment-2612877991","issue_url":"https://api.github.com/repos/apache/storm/issues/5423","id":2612877991,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzc5OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:06:07Z","updated_at":"2025-01-24T16:04:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1175#issuecomment-193398956\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1175#issuecomment-193398956</a></p>\n\n<p>    @revans2 can you merge this <a href=\"https://github.com/apache/storm/pull/1170\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1170</a> ?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877991/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880785","html_url":"https://github.com/apache/storm/issues/5441#issuecomment-2612880785","issue_url":"https://api.github.com/repos/apache/storm/issues/5441","id":2612880785,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA3ODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:09:55Z","updated_at":"2025-01-24T16:06:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1189\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1189</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880785/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880791","html_url":"https://github.com/apache/storm/issues/5441#issuecomment-2612880791","issue_url":"https://api.github.com/repos/apache/storm/issues/5441","id":2612880791,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA3OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:11:06Z","updated_at":"2025-01-24T16:06:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Johnbaba\" class=\"user-hover\" rel=\"Johnbaba\">John Fang</a>,</p>\n\n<p>I merged this into master and 1.x-branch</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880791/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878000","html_url":"https://github.com/apache/storm/issues/5423#issuecomment-2612878000","issue_url":"https://api.github.com/repos/apache/storm/issues/5423","id":2612878000,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgwMDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:55:55Z","updated_at":"2025-01-24T16:04:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1170\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1170</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878007","html_url":"https://github.com/apache/storm/issues/5423#issuecomment-2612878007","issue_url":"https://api.github.com/repos/apache/storm/issues/5423","id":2612878007,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgwMDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:56:12Z","updated_at":"2025-01-24T16:04:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1175\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1175</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878011","html_url":"https://github.com/apache/storm/issues/5423#issuecomment-2612878011","issue_url":"https://api.github.com/repos/apache/storm/issues/5423","id":2612878011,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgwMTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T19:56:58Z","updated_at":"2025-01-24T16:04:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\" class=\"user-hover\" rel=\"abhishek.agarwal\">Abhishek Agarwal</a>,</p>\n\n<p>I merged this into master and 1.x-branch</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878011/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700960","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700960","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700960,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:30:02Z","updated_at":"2025-01-24T14:44:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700960/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700964","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700964","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700964,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5NjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:30:52Z","updated_at":"2025-01-24T14:44:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kishorvpatil\" class=\"user-hover\" rel=\"kishorvpatil\">Kishor Patil</a>,</p>\n\n<p>I merged this into master and 1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700964/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651899","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651899","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651899,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE4OTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:39:57Z","updated_at":"2025-01-24T14:23:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55268203\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55268203</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/common.clj &#8212;<br/>\n    @@ -86,26 +40,6 @@<br/>\n     (defn new-executor-stats []<br/>\n       (ExecutorStats. 0 0 0 0 0))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Why are we not moving ExecutorStats, SupervisorInfo, StormBase and Assignment to java?</p>\n\n<p>    I know we have thrift equivalents of these already.  Is the plan to move them to java as we change the daemon code to use java?  If so I am fine with it, I just want to understand for sure what is happening.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651899/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651904","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651904","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651904,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5MDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:41:21Z","updated_at":"2025-01-24T14:23:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55268410\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55268410</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/common.clj &#8212;<br/>\n    @@ -408,19 +69,3 @@<br/>\n       (:default-shared-resources worker)<br/>\n       (:user-shared-resources worker)<br/>\n       ))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    If we are leaving some methods in clojure, could you file a follow on JIRA to remove the file once we have the other code ported over to java?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193442125","html_url":"https://github.com/apache/storm/pull/1185#issuecomment-193442125","issue_url":"https://api.github.com/repos/apache/storm/issues/1185","id":193442125,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ0MjEyNQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:44:57Z","updated_at":"2016-03-07T20:44:57Z","author_association":"CONTRIBUTOR","body":"Please upmerge the metrics code has been moved to StormMetricsRegistry.java, and is causing conflicts now.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193442125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651907","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651907","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651907,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:45:03Z","updated_at":"2025-01-24T14:23:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#issuecomment-193442125\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#issuecomment-193442125</a></p>\n\n<p>    Please upmerge the metrics code has been moved to StormMetricsRegistry.java, and is causing conflicts now.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651907/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700968","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700968","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700968,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:45:14Z","updated_at":"2025-01-24T14:44:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kishorvpatil\">kishorvpatil</a>:</i>\n<p>Reopning, as we need to merge <a href=\"https://github.com/apache/storm/pull/1178\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1178</a> and <a href=\"https://github.com/apache/storm/pull/1179\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1179</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700968/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651910","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651910","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651910,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:46:23Z","updated_at":"2025-01-24T14:23:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55269053\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55269053</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Don't need both the .* import and the StormBase import.  Usually we prefer to not use .* imports, but for me it is not that big of a deal.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651910/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651918","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651918","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651918,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:46:51Z","updated_at":"2025-01-24T14:23:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55269119\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55269119</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Here we don't want to use a .* import.  We can pull in the wrong thing if we move to a newer version of java.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651921","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651921","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651921,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5MjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:47:09Z","updated_at":"2025-01-24T14:23:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55269157\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55269157</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,605 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651921/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651926","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651926","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651926,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5MjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:47:32Z","updated_at":"2025-01-24T14:23:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55269210\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55269210</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The metrics code has moved to another file already.  these are not needed any more.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651926/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651934","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651934","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651934,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5MzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T20:58:47Z","updated_at":"2025-01-24T14:23:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55270857\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55270857</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,605 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In fact the above function and this function are replacing <br/>\n    ```<br/>\n    (.get_name (.stormBase storm-cluster-state  x nil)<br/>\n    ```</p>\n\n<p>    where `x` is the topology id.</p>\n\n<p>    I get that this code is more efficient, but also more error prone, and so I would prefer we stick with the original code until we see a real reason to switch.</p>\n\n<p>    ```<br/>\n    for (String topologyId: stormClusterState.activeStorms()) {<br/>\nif (topologyName.equals(stormClusterState.stormBase(topologyId, null).get_name())) </p>\n{\n    return topologyId;\n}\n<p>return null;<br/>\n    }<br/>\n    ```</p>\n\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651940","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651940","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651940,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:01:36Z","updated_at":"2025-01-24T14:23:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55271251\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55271251</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The original code didn't check for null here.  Is this needed?  Extra checks that fix things up like this make me nervous that be broke something somewhere and we are using this to work around it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651942","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651942","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651942,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:01:56Z","updated_at":"2025-01-24T14:23:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55271310\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55271310</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The original code didn't check for null.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651944","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651944","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651944,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:30:50Z","updated_at":"2025-01-24T14:23:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55275531\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55275531</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Is this ever really null?  I don't see the null check even implicitly in the clojure code, if it is ever null I the clojure code would throw an NPE.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651954","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651954","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651954,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:35:19Z","updated_at":"2025-01-24T14:23:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55276131\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55276131</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The original code didn't check for null and would throw an NPE if we passed in a null.  We should do the same.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651954/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651956","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651956","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651956,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:39:17Z","updated_at":"2025-01-24T14:23:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55276746\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55276746</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    There is no reason to convert the code to a list before iterating.</p>\n\n<p>    ```<br/>\n    for (StormTopology._Fields field: Thrift.getSpoutFields()) {<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651956/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651961","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651961","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651961,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:42:27Z","updated_at":"2025-01-24T14:23:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55277280\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55277280</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) {<br/>\n    +    return true;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The original code would throw an NPE if this was null.  In this case I can see it being a minor nit, but I still would prefer to keep the code the same if possible.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651961/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651965","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651965","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651965,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:43:45Z","updated_at":"2025-01-24T14:23:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55277573\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55277573</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This null check was not in the original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651965/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651971","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651971","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651971,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:45:47Z","updated_at":"2025-01-24T14:23:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55277889\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55277889</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This null check was not in the original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651975","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651975","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651975,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:50:27Z","updated_at":"2025-01-24T14:23:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55278586\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55278586</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The null check for sourceComponent was not in the original code, and if it were null it would not mean that we subscribed to a non-existent stream.  It would mean that our topology builder didn't do its job correctly.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651982","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651982","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651982,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5ODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:52:52Z","updated_at":"2025-01-24T14:23:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55279121\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55279121</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) {<br/>\n    +    throw new InvalidTopologyException(\"Component: <span class=\"error\">&#91;\" + componentId + \"&#93;</span> subscribes from stream: <span class=\"error\">&#91;\" + sourceStreamId  +\"&#93;</span> of component \" +<br/>\n    +    \"<span class=\"error\">&#91;\" + sourceComponentId + \"&#93;</span> + with non-existent fields: \" + fields);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In the original code the error message was just for the diff-fields.  The ones that were a problem, not all of the fields.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651982/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651989","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651989","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651989,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5ODk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:53:15Z","updated_at":"2025-01-24T14:23:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55279184\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55279184</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In the original code if streams was null the return value was null.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651995","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651995","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651995,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5OTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:53:46Z","updated_at":"2025-01-24T14:23:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55279265\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55279265</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,605 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterId = null;<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() {<br/>\n    +return new Acker();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    No because it is mocked out in some cases.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651995/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651999","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612651999","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612651999,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTE5OTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T21:59:35Z","updated_at":"2025-01-24T14:23:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55280156\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55280156</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This null check was not in the original code, but it is a minor nit here.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612651999/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652003","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652003","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652003,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwMDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:00:18Z","updated_at":"2025-01-24T14:23:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55280255\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55280255</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This null check was not in the original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652003/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652010","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652010","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652010,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwMTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:01:07Z","updated_at":"2025-01-24T14:23:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55280379\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55280379</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"task-info\", \"data-points\"));\n    +common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addSystemStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Again no null check in original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652010/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193475643","html_url":"https://github.com/apache/storm/pull/1183#issuecomment-193475643","issue_url":"https://api.github.com/repos/apache/storm/issues/1183","id":193475643,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ3NTY0Mw==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:02:03Z","updated_at":"2016-03-07T22:02:03Z","author_association":"CONTRIBUTOR","body":"+1. I'm in favor of backporting STORM-1463 (#1004) as well.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193475643/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880175","html_url":"https://github.com/apache/storm/issues/5438#issuecomment-2612880175","issue_url":"https://api.github.com/repos/apache/storm/issues/5438","id":2612880175,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODAxNzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:02:04Z","updated_at":"2025-01-24T16:05:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1183#issuecomment-193475643\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1183#issuecomment-193475643</a></p>\n\n<p>    +1. I'm in favor of backporting <a href=\"https://issues.apache.org/jira/browse/STORM-1463\" title=\"log4j dir uri should always have file schema\" class=\"issue-link\" data-issue-key=\"STORM-1463\"><del>STORM-1463</del></a> (#1004) as well.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652018","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652018","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652018,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwMTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:07:11Z","updated_at":"2025-01-24T14:23:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55281249\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55281249</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"task-info\", \"data-points\"));\n    +common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addSystemStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"event\"));\n    +common.put_to_streams(SYSTEM_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> eventLoggerBoltFields() </p>\n{\n    +List<String> fields = Arrays.asList(EventLoggerBolt.FIELD_COMPONENT_ID, EventLoggerBolt.FIELD_MESSAGE_ID, EventLoggerBolt.FIELD_TS,\n    +EventLoggerBolt.FIELD_VALUES);\n    +return fields;\n    +    }\n<p>    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> eventLoggerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> allIds = new HashSet<String>();<br/>\n    +allIds.addAll(topology.get_bolts().keySet());<br/>\n    +allIds.addAll(topology.get_spouts().keySet());<br/>\n    +<br/>\n    +for(String id : allIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, EVENTLOGGER_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"component-id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addEventLogger(Map conf, StormTopology topology) {<br/>\n    +Integer numExecutors = Utils.getInt(conf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +HashMap<String, Object> componentConf = new HashMap<String, Object>();<br/>\n    +componentConf.put(Config.TOPOLOGY_TASKS, numExecutors);<br/>\n    +componentConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +Bolt eventLoggerBolt = Thrift.prepareSerializedBoltDetails(eventLoggerInputs(topology), new EventLoggerBolt(), null, numExecutors, componentConf);<br/>\n    +<br/>\n    +for(Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    No null check in the original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]