[{"url":"https://api.github.com/repos/apache/druid/issues/comments/375726350","html_url":"https://github.com/apache/druid/pull/4716#issuecomment-375726350","issue_url":"https://api.github.com/repos/apache/druid/issues/4716","id":375726350,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTcyNjM1MA==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T16:38:58Z","updated_at":"2018-03-23T16:38:58Z","author_association":"CONTRIBUTOR","body":"Done in https://github.com/druid-io/druid/pull/5429","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375726350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375727112","html_url":"https://github.com/apache/druid/pull/5514#issuecomment-375727112","issue_url":"https://api.github.com/repos/apache/druid/issues/5514","id":375727112,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTcyNzExMg==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T16:41:17Z","updated_at":"2018-03-23T16:42:01Z","author_association":"CONTRIBUTOR","body":"@zhztheplayer can you comment some more about why a customized https://github.com/druid-io/druid/blob/druid-0.12.0/server/src/main/java/io/druid/server/log/RequestLoggerProvider.java does not suit the needs here?\r\n\r\nhttps://github.com/druid-io/druid/blob/druid-0.12.0/server/src/main/java/io/druid/server/log/RequestLogger.java","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375727112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375727863","html_url":"https://github.com/apache/druid/pull/5413#issuecomment-375727863","issue_url":"https://api.github.com/repos/apache/druid/issues/5413","id":375727863,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTcyNzg2Mw==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T16:43:22Z","updated_at":"2018-03-23T16:43:22Z","author_association":"CONTRIBUTOR","body":"@leventov some of the tests close out the executor service. Announcer comes to mind. Fixing that is a bit much for this pr.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375727863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375730064","html_url":"https://github.com/apache/druid/pull/5413#issuecomment-375730064","issue_url":"https://api.github.com/repos/apache/druid/issues/5413","id":375730064,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTczMDA2NA==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T16:50:42Z","updated_at":"2018-03-23T16:50:42Z","author_association":"CONTRIBUTOR","body":"@leventov see https://github.com/druid-io/druid/issues/5527","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375730064/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375736501","html_url":"https://github.com/apache/druid/issues/4544#issuecomment-375736501","issue_url":"https://api.github.com/repos/apache/druid/issues/4544","id":375736501,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTczNjUwMQ==","user":{"login":"kalyanjanaki","id":12227088,"node_id":"MDQ6VXNlcjEyMjI3MDg4","avatar_url":"https://avatars.githubusercontent.com/u/12227088?v=4","gravatar_id":"","url":"https://api.github.com/users/kalyanjanaki","html_url":"https://github.com/kalyanjanaki","followers_url":"https://api.github.com/users/kalyanjanaki/followers","following_url":"https://api.github.com/users/kalyanjanaki/following{/other_user}","gists_url":"https://api.github.com/users/kalyanjanaki/gists{/gist_id}","starred_url":"https://api.github.com/users/kalyanjanaki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kalyanjanaki/subscriptions","organizations_url":"https://api.github.com/users/kalyanjanaki/orgs","repos_url":"https://api.github.com/users/kalyanjanaki/repos","events_url":"https://api.github.com/users/kalyanjanaki/events{/privacy}","received_events_url":"https://api.github.com/users/kalyanjanaki/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T17:10:52Z","updated_at":"2018-03-23T17:11:04Z","author_association":"NONE","body":"Hello Erankor,\r\n\r\nThanks for your writeup.  You made my day. I was able to fix issue with your steps.  Many thanks.\r\n\r\nRegards\r\nKalyan","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375736501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375738925","html_url":"https://github.com/apache/druid/pull/5413#issuecomment-375738925","issue_url":"https://api.github.com/repos/apache/druid/issues/5413","id":375738925,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTczODkyNQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T17:18:55Z","updated_at":"2018-03-23T17:18:55Z","author_association":"MEMBER","body":"In this case, why wouldn't we temporarily implement all shutdown(), shutdownNow() and isShutdown() as no-ops? And switch to throwing UnsupportedOperationException once #5527 is fixed?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375738925/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375743034","html_url":"https://github.com/apache/druid/pull/5335#issuecomment-375743034","issue_url":"https://api.github.com/repos/apache/druid/issues/5335","id":375743034,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc0MzAzNA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T17:31:47Z","updated_at":"2018-03-23T17:31:47Z","author_association":"MEMBER","body":"@fjy I feel that current unit and integration test suite tests index merging well. It wasn't that I wrote some code and it started to pass all tests immediately, far from that. Actually I was surprised how subtle corner cases were revealed (and I had to fix my new code) during unit testing.\r\n\r\nThis PR doesn't improve performance directly, but it's a part of a grand plan, that will allow to get rid of Aggregator interface, for instance (with the current merging scheme, it won't be possible to do that reasonably efficiently). I explained that in details above in this PR comments and in #5335.\r\n\r\nAnd on top of that, this PR *fixes a bug*.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375743034/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375746060","html_url":"https://github.com/apache/druid/pull/5413#issuecomment-375746060","issue_url":"https://api.github.com/repos/apache/druid/issues/5413","id":375746060,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc0NjA2MA==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T17:41:30Z","updated_at":"2018-03-23T17:41:30Z","author_association":"CONTRIBUTOR","body":"@leventov because that is only one use case, I'm not sure if there are others since I didn't try to get as many tests to pass as possible. I don't want to make assumptions about how the code is using executor services if it is already shown to do odd things with who-controls-this-executor.\r\n\r\nAs such keeping behavior close to the executor service interface is desired. This PR keeps behavior closer to the executor service interface","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375746060/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375756012","html_url":"https://github.com/apache/druid/pull/5413#issuecomment-375756012","issue_url":"https://api.github.com/repos/apache/druid/issues/5413","id":375756012,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc1NjAxMg==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T18:15:25Z","updated_at":"2018-03-23T18:15:25Z","author_association":"MEMBER","body":"Having those methods implemented as no-ops (hence `awaitTermination()` returns immediately) is guaranteed not to cause errors in runtime. It may not catch extra bugs, yes, but we know that we have bugs already. Once those bugs are fixed, it will be desired to switch back to singleton model, so why changing code back and forth? If it's made singleton now, all that is going to be needed is not replace no-op bodies with bodies throwing exceptions.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375756012/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375762210","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375762210","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375762210,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc2MjIxMA==","user":{"login":"RestfulBlue","id":32250229,"node_id":"MDQ6VXNlcjMyMjUwMjI5","avatar_url":"https://avatars.githubusercontent.com/u/32250229?v=4","gravatar_id":"","url":"https://api.github.com/users/RestfulBlue","html_url":"https://github.com/RestfulBlue","followers_url":"https://api.github.com/users/RestfulBlue/followers","following_url":"https://api.github.com/users/RestfulBlue/following{/other_user}","gists_url":"https://api.github.com/users/RestfulBlue/gists{/gist_id}","starred_url":"https://api.github.com/users/RestfulBlue/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RestfulBlue/subscriptions","organizations_url":"https://api.github.com/users/RestfulBlue/orgs","repos_url":"https://api.github.com/users/RestfulBlue/repos","events_url":"https://api.github.com/users/RestfulBlue/events{/privacy}","received_events_url":"https://api.github.com/users/RestfulBlue/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T18:38:36Z","updated_at":"2018-03-23T18:38:36Z","author_association":"NONE","body":"Hello,\r\n\r\nin our company we make extensive use of hadoop. One of our last tasks was the construction of monitoring. We considered a huge number of options(opentsdb,prometheus,clickhouse,etc). One of our final candidates was the druid. It fits perfectly into our ecosystem. The only problematic point was the insertion speed. It is very appropriate for us to increase the speed with which we can write. To do this, we would like to use much simpler indexes, sacrificing the speed of query execution.\r\n\r\nIs it possible to update the structure of the druid, and add the possibility of own implementation of the structure of the indexes and the segment?\r\n\r\nSo that it was like a module that you can connect. Thus, use standard indexes on some datasource and own indexes implementation for other.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375762210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375763250","html_url":"https://github.com/apache/druid/pull/5382#issuecomment-375763250","issue_url":"https://api.github.com/repos/apache/druid/issues/5382","id":375763250,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc2MzI1MA==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T18:42:37Z","updated_at":"2018-03-23T18:57:23Z","author_association":"CONTRIBUTOR","body":"@jihoonson i see this PR is merged so what is the story now? are we dropping support for Hadoop < 2.8.3 if, that is the case did we have a round of vote at mailing list? is this suppose to be 0.13.0 ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375763250/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375764854","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375764854","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375764854,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc2NDg1NA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T18:48:36Z","updated_at":"2018-03-23T18:50:42Z","author_association":"MEMBER","body":"@RestfulBlue it was discussed in various forms before, see #2654, #2965, #106. Yes it would be nice in theory, but it's not fully implemented at this point. However, #5402 has just been merged (allows to disable bitmap indexes), maybe it will satisfy your goals.\r\n\r\nYour question is irrelevant to this issue, if you have extra questions, please go to one of those linked threads, or ask on druid-dev mailing list.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375764854/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375768043","html_url":"https://github.com/apache/druid/pull/5382#issuecomment-375768043","issue_url":"https://api.github.com/repos/apache/druid/issues/5382","id":375768043,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc2ODA0Mw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T19:01:08Z","updated_at":"2018-03-23T19:01:08Z","author_association":"CONTRIBUTOR","body":"@b-slim we still support Hadoop 2.7 line. I tested Hadoop 2.7.3 and 2.7.5. When Hadoop 2.7 is used with s3 deep storage together, S3N still works but S3A doesn't work which is same for the master before this PR. To use S3A, they need a custom `hadoop-aws` which shades all conflicted libraries like aws, guava, and jackson.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375768043/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375777561","html_url":"https://github.com/apache/druid/issues/4544#issuecomment-375777561","issue_url":"https://api.github.com/repos/apache/druid/issues/4544","id":375777561,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc3NzU2MQ==","user":{"login":"erankor","id":4777488,"node_id":"MDQ6VXNlcjQ3Nzc0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/4777488?v=4","gravatar_id":"","url":"https://api.github.com/users/erankor","html_url":"https://github.com/erankor","followers_url":"https://api.github.com/users/erankor/followers","following_url":"https://api.github.com/users/erankor/following{/other_user}","gists_url":"https://api.github.com/users/erankor/gists{/gist_id}","starred_url":"https://api.github.com/users/erankor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erankor/subscriptions","organizations_url":"https://api.github.com/users/erankor/orgs","repos_url":"https://api.github.com/users/erankor/repos","events_url":"https://api.github.com/users/erankor/events{/privacy}","received_events_url":"https://api.github.com/users/erankor/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T19:41:26Z","updated_at":"2018-03-23T19:41:26Z","author_association":"NONE","body":"Great! glad to hear :)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375777561/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375781452","html_url":"https://github.com/apache/druid/pull/5382#issuecomment-375781452","issue_url":"https://api.github.com/repos/apache/druid/issues/5382","id":375781452,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc4MTQ1Mg==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T19:57:24Z","updated_at":"2018-03-23T19:57:24Z","author_association":"CONTRIBUTOR","body":"@jihoonson,\r\n-First as per this thread we are suppose to have support from 2.6.0 and higher, https://groups.google.com/forum/#!topic/druid-development/vFjR0pdq83U.   So am not sure if you have done testing with that as well or we are dropping support for any version less than 2.7.3?\r\n-Second, am wondering, have you tested that with HDFS as deep storage or only S3?\r\n-Third if it works with 2.7.X why changing the version Hadoop to 2.8.3?\r\nThanks. \r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375781452/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375781681","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375781681","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375781681,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc4MTY4MQ==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T19:58:26Z","updated_at":"2018-03-23T19:58:26Z","author_association":"CONTRIBUTOR","body":">Before global merge of rows, encoded row values are converted twice: firstly, per-index-unsorted-to-sorted, using the structure from 2.a), and secondly, per-index-sorted-to-globally-sorted, using the structure from 3).\r\n\r\n>After writing out the global stream of rows, per-index bitmaps are merged. This merge requires the structures from 2.b) and 5). See StringDimensionMergerV9.mergeBitmaps().\r\n\r\n>The main question is why we need to create per-index bitmaps in the very beginning, then create a lot of auxiliary structures to keep them usable until the very end, and them merge. If we could(?) just create bitmaps in the end.\r\n\r\nHm, there is an intermediate persist to disk step, I don't think the IncrementalIndex is ever merged with other indexes directly.\r\n\r\nIncrementalIndexAdapter is only created as a result of a persist() call, which in turn calls merge() but with only a single IncrementalIndex, this happens when indexing tasks persist their current IncrementalIndex object with partial data to disk.\r\n\r\nWhen the partial results are merged later the merge happens only on QueryableIndex objects loaded from disk.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375781681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375787048","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375787048","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375787048,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc4NzA0OA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T20:20:43Z","updated_at":"2018-03-23T20:22:41Z","author_association":"MEMBER","body":"@jon-wei note that\r\n\r\n - That \"individual incremental index persist to a segment\" step pretty much doesn't optimize anything that I explained in the steps 1)-6). So it still creates all those structures, which often in fact do identity conversion. It could be optimized, but it means adding even more complexity than we have now.\r\n\r\n - I don't remember exactly how incremental index operates, probably it needs to persist segments not only for merging, but batch indexing, especially Spark, does this *only* because it wants to avoid the full cost and memory consumption of steps 1)-6). So it needs to write to disk. With the new approach it could be avoided.\r\n\r\n - Even when merging only segments, per-index-row-number-to-global-row-number conversion structures are still created. This is not needed with the new approach. An option was added some time ago, to allocate those structures in off-heap memory, apparently in response to some memory problems. If those structures are just not needed, it's obviously even more helpful.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375787048/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375788598","html_url":"https://github.com/apache/druid/issues/4349#issuecomment-375788598","issue_url":"https://api.github.com/repos/apache/druid/issues/4349","id":375788598,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc4ODU5OA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T20:26:47Z","updated_at":"2018-03-23T20:26:47Z","author_association":"CONTRIBUTOR","body":"I'm not sure where to bring this up, so I'll do it here.\r\n\r\nI was reading through the null handling code and started thinking that it doesn't make sense for `druid.generic.useDefaultValueForNull` to determine indexing time behavior. IMO the system-wide setting should really only control query-time behavior. And what it should do is simple: if it's true (the default) then:\r\n\r\n1. Nulls and empty strings should be treated the same in string context, as they are today\r\n2. Nulls in numeric context should be treated like zeroes, as they are today\r\n\r\nBut it should not affect indexing at all. That should be driven by the indexing spec.\r\n\r\nThe reason is that it should be possible to specify a column as nullable or non-nullable on a per column basis. You shouldn't have to be locked into _all_ your columns being one way or the other via a systemwide property. It's similar to how a relational db would let you say column `x` is `BIGINT NOT NULL` but column `y` is `BIGINT NULL` in the same table.\r\n\r\n/cc @nishantmonu51 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375788598/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375789412","html_url":"https://github.com/apache/druid/pull/5382#issuecomment-375789412","issue_url":"https://api.github.com/repos/apache/druid/issues/5382","id":375789412,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc4OTQxMg==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T20:29:57Z","updated_at":"2018-03-23T20:29:57Z","author_association":"CONTRIBUTOR","body":"@b-slim \r\n\r\n> -First as per this thread we are suppose to have support from 2.6.0 and higher, https://groups.google.com/forum/#!topic/druid-development/vFjR0pdq83U. So am not sure if you have done testing with that as well or we are dropping support for any version less than 2.7.3?\r\n\r\nI tested Apache Hadoop 2.6.0, 2.7.1, 2.7.3, 2.7.5, 2.8.3, 2.9.0, 3.0.0, Cloudera 5.7.0, and HDP 5.7. But, it would be great if you can test more Apache Hadoop and HDP versions as well.\r\n\r\n> -Second, am wondering, have you tested that with HDFS as deep storage or only S3?\r\n\r\nI've tested four cases when deep storage is HDFS, S3A via HDFS, S3N via HDFS, and direct S3.\r\n\r\n> -Third if it works with 2.7.X why changing the version Hadoop to 2.8.3?\r\n\r\nWell, at first, I wanted to use Hadoop 2.9 to use more recent libraries especially Jackson. But, it broke the support for Hadoop 2.7, so I needed to change it again. IMO, it doesn't make sense to use Hadoop 2.7.3 as our default Hadoop version because we don't support the whole features for that version like S3A.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375789412/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375798747","html_url":"https://github.com/apache/druid/pull/5490#issuecomment-375798747","issue_url":"https://api.github.com/repos/apache/druid/issues/5490","id":375798747,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTc5ODc0Nw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T21:07:48Z","updated_at":"2018-03-23T21:07:48Z","author_association":"CONTRIBUTOR","body":"This patch looks good to me. I'll finish my review if CI is fixed.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375798747/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375803500","html_url":"https://github.com/apache/druid/pull/5490#issuecomment-375803500","issue_url":"https://api.github.com/repos/apache/druid/issues/5490","id":375803500,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgwMzUwMA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T21:29:21Z","updated_at":"2018-03-23T21:29:21Z","author_association":"MEMBER","body":"Unfortunately I don't know how to fix the CI. That are strange problems that I cannot reproduce locally. Any ideas welcome.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375803500/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375807014","html_url":"https://github.com/apache/druid/pull/5490#issuecomment-375807014","issue_url":"https://api.github.com/repos/apache/druid/issues/5490","id":375807014,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgwNzAxNA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T21:46:30Z","updated_at":"2018-03-23T21:46:30Z","author_association":"CONTRIBUTOR","body":"The failure in LoggingRequestLoggerTest looks like a bug in the test. It has this code,\r\n\r\n```java\r\n  @BeforeClass\r\n  public static void setUpStatic() throws Exception\r\n  {\r\n    appender = OutputStreamAppender\r\n        .newBuilder()\r\n        .setName(\"test stream\")\r\n        .setTarget(baos)\r\n        .setLayout(JsonLayout.createLayout(false, true, false, true, true, Charsets.UTF_8))\r\n        .build();\r\n    final Logger logger = (Logger)\r\n        LogManager.getLogger(LoggingRequestLogger.class);\r\n    appender.start();\r\n    logger.addAppender(appender);\r\n  }\r\n\r\n  @After\r\n  public void tearDown()\r\n  {\r\n    baos.reset();\r\n  }\r\n```\r\n\r\nBut this is wrong. `baos` is created in a static `@BeforeClass` setup method but is cleared in a per-test `@After` method. It leads to the \"No content\" error from Jackson. I'm honestly not sure how this has ever passed properly. Maybe some test configuration had previously been doing forks per test and now isn't?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375807014/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375807115","html_url":"https://github.com/apache/druid/pull/5490#issuecomment-375807115","issue_url":"https://api.github.com/repos/apache/druid/issues/5490","id":375807115,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgwNzExNQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T21:47:03Z","updated_at":"2018-03-23T21:47:03Z","author_association":"CONTRIBUTOR","body":"I'm not sure what causes the other, docker integration test failure.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375807115/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375814940","html_url":"https://github.com/apache/druid/pull/5490#issuecomment-375814940","issue_url":"https://api.github.com/repos/apache/druid/issues/5490","id":375814940,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgxNDk0MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T22:29:05Z","updated_at":"2018-03-23T22:29:05Z","author_association":"CONTRIBUTOR","body":"I can reproduce the IT test failure locally. I'm still not sure what's the problem but I could see every Druid servers work well. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375814940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375822263","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375822263","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375822263,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgyMjI2Mw==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-23T23:14:16Z","updated_at":"2018-03-23T23:14:16Z","author_association":"CONTRIBUTOR","body":"@leventov  is this part of https://github.com/druid-io/druid/issues/4622? If yes can we add some pointers to help navigations between proposals and actual code merging? \r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375822263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375831361","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375831361","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375831361,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgzMTM2MQ==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T00:26:20Z","updated_at":"2018-03-24T00:28:53Z","author_association":"CONTRIBUTOR","body":"To make sure I'm understanding correctly, the proposed new implementation would look like this example?\r\n\r\nIndex 1 to merge\r\n-------------------\r\nUnsorted dict: \r\nhorse -> 0\r\naardvark -> 1\r\nwhale -> 2\r\nflamingo -> 3\r\nmonkey -> 4\r\n\r\nConversion buffer:\r\n[1, 0, 3, 4, 2]\r\n\r\nrows:\r\n{ts=1, x=0}\r\n{ts=2, x=1}\r\n{ts=3, x=2}\r\n{ts=4, x=3}\r\n{ts=5, x=4}\r\n\r\nIndex 2 to merge\r\n-------------------\r\nUnsorted dictionary:\r\nmantis -> 0\r\nsnake -> 1\r\ndragon -> 2\r\nflamingo -> 3\r\nzebra -> 4\r\n\r\nConversion buffer\r\n[2, 3, 0, 1, 4]\r\n\r\nrows:\r\n{ts=1, x=0}\r\n{ts=2, x=1}\r\n{ts=3, x=2}\r\n{ts=4, x=3}\r\n{ts=5, x=4}\r\n\r\nBuild global sorted dictionary:\r\n-------------------\r\n[0:aardvark, 1:dragon, 2:flamingo, 3:horse, 4:mantis, 5:monkey, 6:snake, 7:whale, 8:zebra]\r\n\r\nindex 1 unsorted-per-index -> sorted-global ID:\r\n[3, 0, 7, 2, 5]\r\n\r\nindex 2 unsorted-per-index -> sorted-global ID:\r\n[4, 6, 1, 2, 8]\r\n\r\nConvert rows and merge:\r\n-------------------\r\nindex 1 rows:\r\nrows:\r\n{ts=1, x=3}\r\n{ts=2, x=0}\r\n{ts=3, x=7}\r\n{ts=4, x=2}\r\n{ts=5, x=5}\r\n\r\nindex 2 rows:\r\nrows:\r\n{ts=1, x=4}\r\n{ts=2, x=6}\r\n{ts=3, x=1}\r\n{ts=4, x=2}\r\n{ts=5, x=8}\r\n\r\nmerged (bitmaps for each dim value are built while merging across indexes, no bitmaps are created until this step)\r\n{ts=1, x=3}\r\n{ts=1, x=4}\r\n{ts=2, x=0}\r\n{ts=2, x=6}\r\n{ts=3, x=1}\r\n{ts=3, x=7}\r\n{ts=4, x=2} \r\n{ts=5, x=5}\r\n{ts=5, x=8}\r\n\r\n====================\r\n\r\n> I don't remember exactly how incremental index operates, probably it needs to persist segments not only for merging, but batch indexing, especially Spark, does this only because it wants to avoid full and memory consumption of steps 1)-6). So it needs to write to disk. With the new approach it could be avoided.\r\n\r\nHm, I'm not seeing how persisting partial results to disk could be avoided, even if the ingestion system was optimally memory-efficient, it's still possible to feed an indexing task more data than can be held in memory.\r\n\r\nFor batch tasks, I don't think I see anything that would prevent the merging implementation from being changed to what's being proposed. The partial persists could have an unsorted dictionary plus the dict-encoded rows, with no bitmaps.\r\n\r\nFor realtime tasks like KafkaIndexTask, the rows held by the task are exposed for querying, so that may be a reason to have sorted bitmaps -> common segment format for the partial chunks of data.\r\n\r\n> Even when merging only segments, per-index-row-number-to-global-row-number conversion structures are still created. This is not needed with the new approach. An option was added some time ago, to allocate those structures in off-heap memory, apparently in response to some memory problems. If those structures just not needed, it's obviously even more helpful.\r\n\r\nHm, if the bitmap construction is done during the merge across indexes, I guess that would eliminate the need for the row number conversions, but the merge would need to keep the bitmaps for all dimensions in memory as it builds them, vs. now where the bitmaps are merged using the row number conversions on a per-dimension basis. \r\n\r\nAs the number of dims increases, maybe this would increase total memory usage compared to now? I suppose the bitmaps could be built using per-dimension scans after the rows are merged though.\r\n\r\nAlso, do you have a link to the PR that allowed the row number conversions to be stored offheap? I didn't see such an option when looking at the code, it looks like the row num conversion buffer is created using IntBuffer.wrap() which always uses creates a HeapIntBuffer","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375831361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375839317","html_url":"https://github.com/apache/druid/pull/5028#issuecomment-375839317","issue_url":"https://api.github.com/repos/apache/druid/issues/5028","id":375839317,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgzOTMxNw==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T02:11:46Z","updated_at":"2018-03-24T02:11:46Z","author_association":"CONTRIBUTOR","body":"Sweet! @a2l007 thanks for sticking this out.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375839317/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375839549","html_url":"https://github.com/apache/druid/issues/5503#issuecomment-375839549","issue_url":"https://api.github.com/repos/apache/druid/issues/5503","id":375839549,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgzOTU0OQ==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T02:15:22Z","updated_at":"2018-03-24T02:15:22Z","author_association":"CONTRIBUTOR","body":"Commented in https://github.com/druid-io/druid/pull/5514#issuecomment-375727112 : Can this be accomplished by a https://github.com/druid-io/druid/blob/druid-0.12.0/server/src/main/java/io/druid/server/log/RequestLogger.java ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375839549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375839684","html_url":"https://github.com/apache/druid/pull/5492#issuecomment-375839684","issue_url":"https://api.github.com/repos/apache/druid/issues/5492","id":375839684,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTgzOTY4NA==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T02:17:53Z","updated_at":"2018-03-24T02:17:53Z","author_association":"CONTRIBUTOR","body":"With a plethora of batch runners out there including:\r\n\r\n* spark\r\n* hadoop\r\n* flink\r\n\r\n(which only lists Apache runners), can you elaborate more on when a druid-native batch solution is needed instead of relying on other available runners?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375839684/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375843315","html_url":"https://github.com/apache/druid/pull/5492#issuecomment-375843315","issue_url":"https://api.github.com/repos/apache/druid/issues/5492","id":375843315,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTg0MzMxNQ==","user":{"login":"fjy","id":428325,"node_id":"MDQ6VXNlcjQyODMyNQ==","avatar_url":"https://avatars.githubusercontent.com/u/428325?v=4","gravatar_id":"","url":"https://api.github.com/users/fjy","html_url":"https://github.com/fjy","followers_url":"https://api.github.com/users/fjy/followers","following_url":"https://api.github.com/users/fjy/following{/other_user}","gists_url":"https://api.github.com/users/fjy/gists{/gist_id}","starred_url":"https://api.github.com/users/fjy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fjy/subscriptions","organizations_url":"https://api.github.com/users/fjy/orgs","repos_url":"https://api.github.com/users/fjy/repos","events_url":"https://api.github.com/users/fjy/events{/privacy}","received_events_url":"https://api.github.com/users/fjy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T03:29:57Z","updated_at":"2018-03-24T03:29:57Z","author_association":"CONTRIBUTOR","body":"@drcrallen many companies out there do not have batch runners in place when they install Druid and it is one of the main reasons people don't adopt the project. Furthermore, integration with external systems can be extremely time intensive, especially to tune things to make batch indexing work, or to resolve the many many dependency problems that exist","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375843315/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375862230","html_url":"https://github.com/apache/druid/issues/5203#issuecomment-375862230","issue_url":"https://api.github.com/repos/apache/druid/issues/5203","id":375862230,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTg2MjIzMA==","user":{"login":"ericgogh","id":1916873,"node_id":"MDQ6VXNlcjE5MTY4NzM=","avatar_url":"https://avatars.githubusercontent.com/u/1916873?v=4","gravatar_id":"","url":"https://api.github.com/users/ericgogh","html_url":"https://github.com/ericgogh","followers_url":"https://api.github.com/users/ericgogh/followers","following_url":"https://api.github.com/users/ericgogh/following{/other_user}","gists_url":"https://api.github.com/users/ericgogh/gists{/gist_id}","starred_url":"https://api.github.com/users/ericgogh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ericgogh/subscriptions","organizations_url":"https://api.github.com/users/ericgogh/orgs","repos_url":"https://api.github.com/users/ericgogh/repos","events_url":"https://api.github.com/users/ericgogh/events{/privacy}","received_events_url":"https://api.github.com/users/ericgogh/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T09:49:28Z","updated_at":"2018-03-24T09:49:28Z","author_association":"NONE","body":"@jihoonson I try version 0.12.0 still has the problem.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375862230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375875718","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-375875718","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":375875718,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTg3NTcxOA==","user":{"login":"zhangxinyu1","id":12528894,"node_id":"MDQ6VXNlcjEyNTI4ODk0","avatar_url":"https://avatars.githubusercontent.com/u/12528894?v=4","gravatar_id":"","url":"https://api.github.com/users/zhangxinyu1","html_url":"https://github.com/zhangxinyu1","followers_url":"https://api.github.com/users/zhangxinyu1/followers","following_url":"https://api.github.com/users/zhangxinyu1/following{/other_user}","gists_url":"https://api.github.com/users/zhangxinyu1/gists{/gist_id}","starred_url":"https://api.github.com/users/zhangxinyu1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhangxinyu1/subscriptions","organizations_url":"https://api.github.com/users/zhangxinyu1/orgs","repos_url":"https://api.github.com/users/zhangxinyu1/repos","events_url":"https://api.github.com/users/zhangxinyu1/events{/privacy}","received_events_url":"https://api.github.com/users/zhangxinyu1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T11:28:36Z","updated_at":"2018-03-24T11:28:36Z","author_association":"CONTRIBUTOR","body":"@sascha-coenen thanks for your approval.\r\nI'm working on implementing this feature. I'm thinking about how to call it, materialized view selection and maintenance or cuboid selection and maintenance, do you have any suggestions?\r\n\r\n> For the query path, it would also be great if historical queries could contain segment lists coming from different datasources. A historical receive queries that the broker has already rewritten such that there is a list of segments contained in a historical's query. Looking at this segment list, each segment is referenced by its complete ID with the exception of the datasource that the segment belongs to. If one could improve the historical queries such that a list of segments could be passed where every segment also contains the datasource it belongs to, then historicals could already merge data across datasources.\r\n\r\nThis is a good idea, It can reduce the cost of data merge on broker. I will try to add this feature in the future. \r\nI will come up with a pr about this feature in few days. Can you help me check it out?\r\nthx. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375875718/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375880022","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-375880022","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":375880022,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTg4MDAyMg==","user":{"login":"zhangxinyu1","id":12528894,"node_id":"MDQ6VXNlcjEyNTI4ODk0","avatar_url":"https://avatars.githubusercontent.com/u/12528894?v=4","gravatar_id":"","url":"https://api.github.com/users/zhangxinyu1","html_url":"https://github.com/zhangxinyu1","followers_url":"https://api.github.com/users/zhangxinyu1/followers","following_url":"https://api.github.com/users/zhangxinyu1/following{/other_user}","gists_url":"https://api.github.com/users/zhangxinyu1/gists{/gist_id}","starred_url":"https://api.github.com/users/zhangxinyu1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhangxinyu1/subscriptions","organizations_url":"https://api.github.com/users/zhangxinyu1/orgs","repos_url":"https://api.github.com/users/zhangxinyu1/repos","events_url":"https://api.github.com/users/zhangxinyu1/events{/privacy}","received_events_url":"https://api.github.com/users/zhangxinyu1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T12:00:36Z","updated_at":"2018-03-24T12:00:36Z","author_association":"CONTRIBUTOR","body":"@jihoonson thx for your comments, I will submit a pr in these days. I already implement this function as following:\r\n\r\n- About the segment granularity, I generate data of derived datasource based on hadoop-index-task, and the segment granularity is the same with base datasource. There are two reasons why I implement it like this:\r\n1. To make sure the segment versions of base datasource and derived datasource are the same. I used the max(created_date) of segment of  base datasource as the segment version of derived datasource. Thus once there are new segment of base datasource created, the  max(created_date) will change and derived datasource supervisor will rebuild segments of derived datasource.\r\n2. I think it's easier for derived datasource supervisor to keep the timeline's consistency of base datasource and derived datasource. \r\ne.g. If base datasource A's segment granularity is hour and derived datasource B's is day,  then the change of data during any hour of one day will lead to rebuilding of segment of derived datasource. On the other hand, if A only keeps recently 12 hours' data, it's hard for supervisor to maintain the derived datasource. So I think it's better to make them the same.\r\n\r\n- If base datasource is disabled, derived datasource supervisor will not be shut down. But it doesn't matter since the duty of derived datasource supervisor is to keep the consistency of timeline between derived datasource and base datasource. So when base datasource is disabled,  derived datasource won't have any data.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375880022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375902077","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375902077","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375902077,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTkwMjA3Nw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T16:00:17Z","updated_at":"2018-03-24T16:00:17Z","author_association":"MEMBER","body":"@b-slim this issue is not related to #4622.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375902077/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375905003","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375905003","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375905003,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTkwNTAwMw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T16:21:27Z","updated_at":"2018-03-24T16:29:30Z","author_association":"MEMBER","body":"@jon-wei \r\n\r\n> Hm, if the bitmap construction is done during the merge across indexes, I guess that would eliminate the need for the row number conversions, but the merge would need to keep the bitmaps for all dimensions in memory as it builds them, vs. now where the bitmaps are merged using the row number conversions on a per-dimension basis.\r\n\r\nYes, that's the problem. Now I see it. It isn't probably a problem when dimensions for which bitmaps are constructed have reasonable cardinality, but in the worst case, when the cardinality is comparable with the total number of rows (like building bitmaps for the \"requestId\" dimension), it will increase memory usage of merging process dramatically. **So the algorithm that I proposed above is not as robust as the current one.**\r\n\r\nMost actions of 1)-6), however, really suffer the same problem. It explains why we always persist incremental index before merging.\r\n\r\n### What should still be done\r\n\r\n**A special path to produce a segment from a single incremental index.** It could avoid creating almost all temporary data structures.\r\n\r\n**The main merging algorithm could be changed to the following**\r\n\r\n1. Create a sorted-to-unsorted encoding conversion. It could be done by creating `int[]`, fill it with 0, 1, .., and then sort it with strategy, delegating comparison to the `DimensionDictionary`'s array of String values. I. e. one O(N) structure is created on this step.\r\n2. When merging per-index sorted dictionaries (as explained above, it could be done by iterating the structure, created on the previous step, and composing it with `DimensionDictionary`'s array), create per-index-unsorted-to-global-sorted encoding conversion: O(N)-sized structure.\r\n3. Before global merge of rows, convert encoded row values *once*, using the structure, created on the previous step.\r\n4. While merging rows of indexes into a global row stream, produce two types of structures in parallel:\r\n  a) per-index-row-number-to-global-row-number conversion structures, O(N)-sized. This structure is created only for indexes which are segments.\r\n  b) Produce per-index bitmaps, using *global dictionary encoding* and *global row numbers*. *Before, this was step 1, and different encoding and row numbers were used.* This structure is created only for indexes which are incremental indexes.\r\n5. After writing out the global stream of rows, per-index bitmaps are merged. For bitmaps belonging to merged indexes which are segments, i. e. bitmaps were *not* created on the step 4.b) but rather taken from the segment itself, because they already exist, conversion from local row numbers to global row numbers is done using the structure, created on the step 4.a). For bitmaps belonging to merged indexes which are incremental indexes, i. e. created on the step 4.b), no additional conversion is needed.\r\n\r\nThis algorithm should be as robust as the current one, but creates less structures and does less conversions.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375905003/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375906299","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-375906299","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":375906299,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTkwNjI5OQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T16:37:56Z","updated_at":"2018-03-24T16:37:56Z","author_association":"MEMBER","body":"> I didn't see such an option when looking at the code, it looks like the row num conversion buffer is created using IntBuffer.wrap() which always uses creates a HeapIntBuffer\r\n\r\nSee `DictionaryMergeIterator`'s `useDirect` parameter. I couldn't find the commit where it was introduced, maybe it existed from the inception of this algorithm. Anyway, it doesn't matter, because it seems that creating this structure is the lesser evil, so couldn't be avoided (unless the merged index is non-persisted incremental index, see step 4. in the updated algorithm proposal above.)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375906299/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375930640","html_url":"https://github.com/apache/druid/pull/5492#issuecomment-375930640","issue_url":"https://api.github.com/repos/apache/druid/issues/5492","id":375930640,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTkzMDY0MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T22:50:30Z","updated_at":"2018-03-24T22:50:30Z","author_association":"CONTRIBUTOR","body":"Thanks @fjy.\r\n\r\n@drcrallen even Druid works those external systems greatly, I think it's worthwhile to add a new option for users which doesn't require additional dependencies. @fjy also gave a great explanation on this. \r\n\r\nAlso, some users sometimes don't want to use those external systems even though they already are running them. That's because those systems are usually a general system for all applications they are running, not just for Druid. As a result, those general systems usually do some scheduling which means the jobs to load data into Druid should compete with other jobs to get resources. With this new task type, users can load data in parallel using only the resource of Druid cluster which is already reserved for running Druid tasks and queries.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375930640/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375930927","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-375930927","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":375930927,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTkzMDkyNw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T22:56:25Z","updated_at":"2018-03-24T22:56:25Z","author_association":"CONTRIBUTOR","body":"@zhangxinyu1 it sounds great that you're already working on this! Your explanation sounds good to me overall, but I have one question. \r\n\r\n> To make sure the segment versions of base datasource and derived datasource are the same. I used the max(created_date) of segment of base datasource as the segment version of derived datasource. \r\n\r\nDoes this mean that the segment version of base dataSource and derived dataSource are literally same? Would you elaborate more on how you could do this? I'm asking because our segment versioning system is already quite complicated and I hope we don't need to add a sort of special handling for derived dataSource.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375930927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375933705","html_url":"https://github.com/apache/druid/issues/5203#issuecomment-375933705","issue_url":"https://api.github.com/repos/apache/druid/issues/5203","id":375933705,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTkzMzcwNQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-24T23:55:44Z","updated_at":"2018-03-24T23:55:44Z","author_association":"CONTRIBUTOR","body":"@ericgogh sorry, I've forgotten this issue.. I found a bug that `forceHashAggregation` in queryContext is not respected and raised https://github.com/druid-io/druid/pull/5533. In the meantime, you can set `forceHashAggregation` in your [config](http://druid.io/docs/latest/querying/groupbyquery.html#advanced-configurations). \r\n\r\nAlso, the above error means you need more memory. Please note that you set `druid.processing.buffer.sizeBytes=2000000000 `, but Druid is trying to write some data at the offset `2025319760` which is larger than your buffer size. You can try increasing the buffer size, but I'm not sure how large buffer is needed for your query. I would recommend to set `forceHashAggregation` in your configuration.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375933705/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375970113","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-375970113","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":375970113,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTk3MDExMw==","user":{"login":"zhangxinyu1","id":12528894,"node_id":"MDQ6VXNlcjEyNTI4ODk0","avatar_url":"https://avatars.githubusercontent.com/u/12528894?v=4","gravatar_id":"","url":"https://api.github.com/users/zhangxinyu1","html_url":"https://github.com/zhangxinyu1","followers_url":"https://api.github.com/users/zhangxinyu1/followers","following_url":"https://api.github.com/users/zhangxinyu1/following{/other_user}","gists_url":"https://api.github.com/users/zhangxinyu1/gists{/gist_id}","starred_url":"https://api.github.com/users/zhangxinyu1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhangxinyu1/subscriptions","organizations_url":"https://api.github.com/users/zhangxinyu1/orgs","repos_url":"https://api.github.com/users/zhangxinyu1/repos","events_url":"https://api.github.com/users/zhangxinyu1/events{/privacy}","received_events_url":"https://api.github.com/users/zhangxinyu1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-25T13:21:45Z","updated_at":"2018-03-25T13:21:59Z","author_association":"CONTRIBUTOR","body":"@jihoonson \r\nSince I can get the max created_date of base datasource segments of specified interval, and it will change as the base segments change, then I use it as the version of derived segment of the specified interval. And I add a derived datasource supervisor to control these. Once the base segment changes, supervisor will find the version of derived segment is different with the max created_date of base one, then the related derived segments will be unused and supervisor will submit a hadoop-index-task with the information of all needed related segments of base datasource to generate the new derived segments.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375970113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/375984990","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-375984990","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":375984990,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTk4NDk5MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-25T16:50:42Z","updated_at":"2018-03-25T16:50:42Z","author_association":"CONTRIBUTOR","body":"@zhangxinyu1 ah sorry! My question was a little bit vague. \r\n\r\n> Since I can get the max created_date of base datasource segments of specified interval, and it will change as the base segments change, then I use it as the version of derived segment of the specified interval.\r\n\r\nMy question is, how will you implement the segmentAllocator to use the same segment version of the base dataSource for the corresponding derived dataSource. Do you assume that any types of tasks can't overwrite/append the derived dataSources unless they are submitted by the derived dataSource supervisor? I think it might be a valid assumption, and if so, segmentAllocator can be implemented to allocate segments based on only supervisor's local information without using `IndexerSQLMetadataStorageCoordinator`.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/375984990/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376027574","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-376027574","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":376027574,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjAyNzU3NA==","user":{"login":"zhangxinyu1","id":12528894,"node_id":"MDQ6VXNlcjEyNTI4ODk0","avatar_url":"https://avatars.githubusercontent.com/u/12528894?v=4","gravatar_id":"","url":"https://api.github.com/users/zhangxinyu1","html_url":"https://github.com/zhangxinyu1","followers_url":"https://api.github.com/users/zhangxinyu1/followers","following_url":"https://api.github.com/users/zhangxinyu1/following{/other_user}","gists_url":"https://api.github.com/users/zhangxinyu1/gists{/gist_id}","starred_url":"https://api.github.com/users/zhangxinyu1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhangxinyu1/subscriptions","organizations_url":"https://api.github.com/users/zhangxinyu1/orgs","repos_url":"https://api.github.com/users/zhangxinyu1/repos","events_url":"https://api.github.com/users/zhangxinyu1/events{/privacy}","received_events_url":"https://api.github.com/users/zhangxinyu1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T02:17:19Z","updated_at":"2018-03-26T02:20:31Z","author_association":"CONTRIBUTOR","body":"@jihoonson \r\nYes, any types of tasks can overwrite/append the derived dataSource.  Derived datasource supervisor submit hadoop-index-tasks to generate data. In the `HadoopTuningConfig `of hadoop-index-task, version is the max created_date and 'useExplicitVersion' is true.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376027574/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376037247","html_url":"https://github.com/apache/druid/pull/5514#issuecomment-376037247","issue_url":"https://api.github.com/repos/apache/druid/issues/5514","id":376037247,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjAzNzI0Nw==","user":{"login":"zhztheplayer","id":11284395,"node_id":"MDQ6VXNlcjExMjg0Mzk1","avatar_url":"https://avatars.githubusercontent.com/u/11284395?v=4","gravatar_id":"","url":"https://api.github.com/users/zhztheplayer","html_url":"https://github.com/zhztheplayer","followers_url":"https://api.github.com/users/zhztheplayer/followers","following_url":"https://api.github.com/users/zhztheplayer/following{/other_user}","gists_url":"https://api.github.com/users/zhztheplayer/gists{/gist_id}","starred_url":"https://api.github.com/users/zhztheplayer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhztheplayer/subscriptions","organizations_url":"https://api.github.com/users/zhztheplayer/orgs","repos_url":"https://api.github.com/users/zhztheplayer/repos","events_url":"https://api.github.com/users/zhztheplayer/events{/privacy}","received_events_url":"https://api.github.com/users/zhztheplayer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T03:34:43Z","updated_at":"2018-03-26T07:36:15Z","author_association":"MEMBER","body":"@drcrallen \r\n\r\nThanks for the link, which is pretty useful for me.\r\n\r\nAt first I simply want Druid broker to be a query platform that provides nice query tracing ability by it self, without ELK or any other similar tools helping. In my circumstance to build a whole ELK stack will costs much more than just adding this feature to Druid itself. I also planed to add a simple UI to Druid broker to represent query history, just like the way overload represents tasks, which delivers more convenience.\r\n\r\nSince the RequestLogger.java interface is a component about logging, and not providing any functions to read/aggregate them back to Druid, I am afraid of that there could be a little hardness to use this way to manage request logs.\r\n\r\nAny good ideas? ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376037247/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376085257","html_url":"https://github.com/apache/druid/issues/4349#issuecomment-376085257","issue_url":"https://api.github.com/repos/apache/druid/issues/4349","id":376085257,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjA4NTI1Nw==","user":{"login":"nishantmonu51","id":5023786,"node_id":"MDQ6VXNlcjUwMjM3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/5023786?v=4","gravatar_id":"","url":"https://api.github.com/users/nishantmonu51","html_url":"https://github.com/nishantmonu51","followers_url":"https://api.github.com/users/nishantmonu51/followers","following_url":"https://api.github.com/users/nishantmonu51/following{/other_user}","gists_url":"https://api.github.com/users/nishantmonu51/gists{/gist_id}","starred_url":"https://api.github.com/users/nishantmonu51/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nishantmonu51/subscriptions","organizations_url":"https://api.github.com/users/nishantmonu51/orgs","repos_url":"https://api.github.com/users/nishantmonu51/repos","events_url":"https://api.github.com/users/nishantmonu51/events{/privacy}","received_events_url":"https://api.github.com/users/nishantmonu51/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T08:24:28Z","updated_at":"2018-03-26T08:24:28Z","author_association":"MEMBER","body":"@gianm : \r\nIf the user says x is INT NOT NULL, and user tries to insert null values, then i think for SQL the insertion fails the NOT NULL constraint and would fail. However, in case of druid nulls are replaced with default values silently. \r\n\r\nIMO, the system wide config is more of kind of backwards compatibility thing, which will be removed in future releases when we fully move to SQL compatible behavior and support ONLY that. \r\n\r\nFor users who want to insert default values for nulls or replace nulls with default values, they can do that in a pre-indexing step of use CASE statements in SQL to replace nulls with some values.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376085257/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376100450","html_url":"https://github.com/apache/druid/issues/3851#issuecomment-376100450","issue_url":"https://api.github.com/repos/apache/druid/issues/3851","id":376100450,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjEwMDQ1MA==","user":{"login":"liubiggun","id":10906186,"node_id":"MDQ6VXNlcjEwOTA2MTg2","avatar_url":"https://avatars.githubusercontent.com/u/10906186?v=4","gravatar_id":"","url":"https://api.github.com/users/liubiggun","html_url":"https://github.com/liubiggun","followers_url":"https://api.github.com/users/liubiggun/followers","following_url":"https://api.github.com/users/liubiggun/following{/other_user}","gists_url":"https://api.github.com/users/liubiggun/gists{/gist_id}","starred_url":"https://api.github.com/users/liubiggun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liubiggun/subscriptions","organizations_url":"https://api.github.com/users/liubiggun/orgs","repos_url":"https://api.github.com/users/liubiggun/repos","events_url":"https://api.github.com/users/liubiggun/events{/privacy}","received_events_url":"https://api.github.com/users/liubiggun/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T09:17:35Z","updated_at":"2018-03-26T09:17:35Z","author_association":"NONE","body":"Any progress？","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376100450/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376162993","html_url":"https://github.com/apache/druid/issues/4835#issuecomment-376162993","issue_url":"https://api.github.com/repos/apache/druid/issues/4835","id":376162993,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjE2Mjk5Mw==","user":{"login":"jkukul","id":7057316,"node_id":"MDQ6VXNlcjcwNTczMTY=","avatar_url":"https://avatars.githubusercontent.com/u/7057316?v=4","gravatar_id":"","url":"https://api.github.com/users/jkukul","html_url":"https://github.com/jkukul","followers_url":"https://api.github.com/users/jkukul/followers","following_url":"https://api.github.com/users/jkukul/following{/other_user}","gists_url":"https://api.github.com/users/jkukul/gists{/gist_id}","starred_url":"https://api.github.com/users/jkukul/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkukul/subscriptions","organizations_url":"https://api.github.com/users/jkukul/orgs","repos_url":"https://api.github.com/users/jkukul/repos","events_url":"https://api.github.com/users/jkukul/events{/privacy}","received_events_url":"https://api.github.com/users/jkukul/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T13:20:04Z","updated_at":"2018-03-26T13:20:04Z","author_association":"CONTRIBUTOR","body":"> It appears that in Druid 0.10.1 (vs 0.10.0) non-query nodes (coordinator, overlord) can not load query extensions.\r\n\r\nCould `0.10.1` release notes be updated with a statement like:\r\nQuery extensions must be removed from the list of extensions on non-query nodes (coordinator, overlord).\r\n\r\nThis would save some trouble for users upgrading from `0.10.0` (and earlier).\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376162993/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376216959","html_url":"https://github.com/apache/druid/issues/4349#issuecomment-376216959","issue_url":"https://api.github.com/repos/apache/druid/issues/4349","id":376216959,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjIxNjk1OQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T15:56:02Z","updated_at":"2018-03-26T15:56:02Z","author_association":"CONTRIBUTOR","body":"> If the user says x is INT NOT NULL, and user tries to insert null values, then i think for SQL the insertion fails the NOT NULL constraint and would fail. However, in case of druid nulls are replaced with default values silently.\r\n\r\nI think if a column is marked as non-null then it makes sense for Druid to replace nulls in inputs with default values. It's mostly used for analytics and not as a source of truth, so it doesn't make sense for it to be too rigid about what it accepts. Source-of-truth DBs do that in order to maintain data integrity. But a database meant for analytics on already-existing data has to deal with what is already known, so at least it should have a choice between a mode where it is more accepting and a mode where it is more rigid, rather than be rigid all the time.\r\n\r\n> IMO, the system wide config is more of kind of backwards compatibility thing, which will be removed in future releases when we fully move to SQL compatible behavior and support ONLY that.\r\n>\r\n> For users who want to insert default values for nulls or replace nulls with default values, they can do that in a pre-indexing step of use CASE statements in SQL to replace nulls with some values.\r\n\r\nI don't think this plan is going to work. One reason in particular is that Druid doesn't require users to know each and every column in their data before ingesting it. It can detect them dynamically at ingestion time. And for dynamically detected columns, users don't have the opportunity to specify CASE statements or anything like that. So, there has to be some way to control how the dynamically detected columns are parsed and stored without knowing what their names are ahead of time. I think it should at least be per-datasource rather than a systemwide property (or even totally unconfigurable as I think you are proposing).","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376216959/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376243796","html_url":"https://github.com/apache/druid/pull/5413#issuecomment-376243796","issue_url":"https://api.github.com/repos/apache/druid/issues/5413","id":376243796,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI0Mzc5Ng==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T17:19:54Z","updated_at":"2018-03-26T17:19:54Z","author_association":"CONTRIBUTOR","body":"The constructor is package private, all instances must come through `Execs.sameThreadExecutor()` moving to singleton later will be straight forward","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376243796/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376250647","html_url":"https://github.com/apache/druid/pull/5514#issuecomment-376250647","issue_url":"https://api.github.com/repos/apache/druid/issues/5514","id":376250647,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI1MDY0Nw==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T17:41:29Z","updated_at":"2018-03-26T17:41:29Z","author_association":"CONTRIBUTOR","body":"A simple example could include using a `io.druid.server.log.LoggingRequestLogger` or similar with a custom logging config as per https://logging.apache.org/log4j/2.x/manual/appenders.html that only captures that class's logs. Then you can do whatever you want with the request logs, including piping them to syslog, into a special rolling file location, or into a JDBCAppender. You can do whatever you want with the results. Ship them out. Keep them local. Put a simple http servelet on the log directory. Or whatever.\r\n\r\nUsually the request log stream itself includes a bunch of stuff which is not useful, because its meta queries used by clients to build up their state of the cluster.\r\n\r\n\"I want to be able to collect distributed logs but don't want to manage an ELK cluster\" is fine, but your options as I see it are as follows:\r\n\r\n1. Suck it up and deploy a logging service\r\n2. Use a turnkey logging service (gcp-logging, sumologic, or splunk come to mind, but there are many others)\r\n3. Just log locally and have a way to inspect logs when you need to\r\n\r\n\r\nWould any of those, or a combination thereof, work?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376250647/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376255160","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-376255160","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":376255160,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI1NTE2MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T17:55:00Z","updated_at":"2018-03-26T17:55:00Z","author_association":"CONTRIBUTOR","body":"@zhangxinyu1 oh I see. That would work. \r\n\r\nBut, if possible, I think it would be better to use our existing versioning system (e.g., `ActionBasedSegmentAllocator`) rather than separately maintaining segment versions in derived dataSource supervisors. This is because segment version management can be done in one class (`TaskLockBox`) rather than being spread over different classes depending on ingestion types. Another reason is that only Hadoop index task supports explicitly specifying segment versions in the task spec. As a result, users should have a Hadoop cluster to use this cool feature. \r\n\r\nDo you think it's possible? I guess maybe it is if we keep the segment versions of the original dataSource corresponding to the current derived dataSources in the supervisor. Once the actual segment version of the original dataSource is higher than the one kept in the supervisor, then it is triggered to rebuild derived dataSources. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376255160/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376255965","html_url":"https://github.com/apache/druid/pull/5492#issuecomment-376255965","issue_url":"https://api.github.com/repos/apache/druid/issues/5492","id":376255965,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI1NTk2NQ==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T17:57:28Z","updated_at":"2018-03-26T17:57:48Z","author_association":"CONTRIBUTOR","body":"Thank you for the great community insight @fjy . Reducing external dependencies is a worthy goal. My key concern in this PR is I don't think we should be spending our time developing \"another batch framework\". Or: \"`<<batch system>>` is hard to deploy and maintain, lets make a `<<batch system>>` clone that is easier to deploy with druid\" sounds just as bad.\r\n\r\nIn order to balance out community needs with maintainability needs, I propose @jihoonson elaborate in the master comment on what this batch service is *not*. In other words, what are the expected limitations of the service, and at what point when people report problems do we say \"Out of scope, you are encountering problems that are better addressed by a specialized batch framework\". Highlighting in the master comment how this solves the community use cases elaborated by @fjy would also be helpful for any future code archaeologists.\r\n\r\nOnce we have a clear scope of what the service is *not*, then I think it will be easier to focus this feature on its goals.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376255965/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376260362","html_url":"https://github.com/apache/druid/pull/5492#issuecomment-376260362","issue_url":"https://api.github.com/repos/apache/druid/issues/5492","id":376260362,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI2MDM2Mg==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T18:11:57Z","updated_at":"2018-03-26T18:11:57Z","author_association":"CONTRIBUTOR","body":"@drcrallen thanks. I understand your concern. Actually, this will be a part of several PR series. I think it's better to raise an issue describing the master plan (which I should do that first). I'll raise it soon.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376260362/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376280397","html_url":"https://github.com/apache/druid/issues/5516#issuecomment-376280397","issue_url":"https://api.github.com/repos/apache/druid/issues/5516","id":376280397,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI4MDM5Nw==","user":{"login":"pdeva","id":3190176,"node_id":"MDQ6VXNlcjMxOTAxNzY=","avatar_url":"https://avatars.githubusercontent.com/u/3190176?v=4","gravatar_id":"","url":"https://api.github.com/users/pdeva","html_url":"https://github.com/pdeva","followers_url":"https://api.github.com/users/pdeva/followers","following_url":"https://api.github.com/users/pdeva/following{/other_user}","gists_url":"https://api.github.com/users/pdeva/gists{/gist_id}","starred_url":"https://api.github.com/users/pdeva/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdeva/subscriptions","organizations_url":"https://api.github.com/users/pdeva/orgs","repos_url":"https://api.github.com/users/pdeva/repos","events_url":"https://api.github.com/users/pdeva/events{/privacy}","received_events_url":"https://api.github.com/users/pdeva/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T19:17:39Z","updated_at":"2018-03-26T19:18:00Z","author_association":"CONTRIBUTOR","body":"this is badly needed to ensure a fully exactly-once pipeline.\r\ncurrently without the transactional topics introduced in kafka 1.0, the exactly-once is not guaranteed from the producer side.\r\n\r\ni hope this gets earmarked for druid 0.13.0","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376280397/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376280886","html_url":"https://github.com/apache/druid/issues/5516#issuecomment-376280886","issue_url":"https://api.github.com/repos/apache/druid/issues/5516","id":376280886,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI4MDg4Ng==","user":{"login":"pdeva","id":3190176,"node_id":"MDQ6VXNlcjMxOTAxNzY=","avatar_url":"https://avatars.githubusercontent.com/u/3190176?v=4","gravatar_id":"","url":"https://api.github.com/users/pdeva","html_url":"https://github.com/pdeva","followers_url":"https://api.github.com/users/pdeva/followers","following_url":"https://api.github.com/users/pdeva/following{/other_user}","gists_url":"https://api.github.com/users/pdeva/gists{/gist_id}","starred_url":"https://api.github.com/users/pdeva/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdeva/subscriptions","organizations_url":"https://api.github.com/users/pdeva/orgs","repos_url":"https://api.github.com/users/pdeva/repos","events_url":"https://api.github.com/users/pdeva/events{/privacy}","received_events_url":"https://api.github.com/users/pdeva/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T19:19:11Z","updated_at":"2018-03-26T19:19:11Z","author_association":"CONTRIBUTOR","body":"i believe # #5404 is related to this","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376280886/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376288095","html_url":"https://github.com/apache/druid/issues/5516#issuecomment-376288095","issue_url":"https://api.github.com/repos/apache/druid/issues/5516","id":376288095,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI4ODA5NQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T19:44:38Z","updated_at":"2018-03-26T19:44:38Z","author_association":"CONTRIBUTOR","body":"Upgrading is good and I do think #5404 is related. If anyone is willing to tackle this then go for it. Otherwise someone here will likely do it at some point.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376288095/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376314600","html_url":"https://github.com/apache/druid/pull/5440#issuecomment-376314600","issue_url":"https://api.github.com/repos/apache/druid/issues/5440","id":376314600,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjMxNDYwMA==","user":{"login":"njhartwell","id":2574830,"node_id":"MDQ6VXNlcjI1NzQ4MzA=","avatar_url":"https://avatars.githubusercontent.com/u/2574830?v=4","gravatar_id":"","url":"https://api.github.com/users/njhartwell","html_url":"https://github.com/njhartwell","followers_url":"https://api.github.com/users/njhartwell/followers","following_url":"https://api.github.com/users/njhartwell/following{/other_user}","gists_url":"https://api.github.com/users/njhartwell/gists{/gist_id}","starred_url":"https://api.github.com/users/njhartwell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/njhartwell/subscriptions","organizations_url":"https://api.github.com/users/njhartwell/orgs","repos_url":"https://api.github.com/users/njhartwell/repos","events_url":"https://api.github.com/users/njhartwell/events{/privacy}","received_events_url":"https://api.github.com/users/njhartwell/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T21:16:49Z","updated_at":"2018-03-26T21:16:49Z","author_association":"CONTRIBUTOR","body":"@jon-wei do you need anything else on this or can it be merged? Thanks!","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376314600/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376315739","html_url":"https://github.com/apache/druid/issues/5498#issuecomment-376315739","issue_url":"https://api.github.com/repos/apache/druid/issues/5498","id":376315739,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjMxNTczOQ==","user":{"login":"josephglanville","id":605591,"node_id":"MDQ6VXNlcjYwNTU5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/605591?v=4","gravatar_id":"","url":"https://api.github.com/users/josephglanville","html_url":"https://github.com/josephglanville","followers_url":"https://api.github.com/users/josephglanville/followers","following_url":"https://api.github.com/users/josephglanville/following{/other_user}","gists_url":"https://api.github.com/users/josephglanville/gists{/gist_id}","starred_url":"https://api.github.com/users/josephglanville/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josephglanville/subscriptions","organizations_url":"https://api.github.com/users/josephglanville/orgs","repos_url":"https://api.github.com/users/josephglanville/repos","events_url":"https://api.github.com/users/josephglanville/events{/privacy}","received_events_url":"https://api.github.com/users/josephglanville/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T21:21:00Z","updated_at":"2018-03-27T03:25:37Z","author_association":"CONTRIBUTOR","body":"Also seeing this on `0.12.0`, haven't looked much deeper yet but I think it's caused by unclean middle manager restarts.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376315739/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376317940","html_url":"https://github.com/apache/druid/pull/5440#issuecomment-376317940","issue_url":"https://api.github.com/repos/apache/druid/issues/5440","id":376317940,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjMxNzk0MA==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-26T21:28:51Z","updated_at":"2018-03-26T21:28:51Z","author_association":"CONTRIBUTOR","body":"@njhartwell thanks for the contrib!","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376317940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376350666","html_url":"https://github.com/apache/druid/pull/5537#issuecomment-376350666","issue_url":"https://api.github.com/repos/apache/druid/issues/5537","id":376350666,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjM1MDY2Ng==","user":{"login":"fjy","id":428325,"node_id":"MDQ6VXNlcjQyODMyNQ==","avatar_url":"https://avatars.githubusercontent.com/u/428325?v=4","gravatar_id":"","url":"https://api.github.com/users/fjy","html_url":"https://github.com/fjy","followers_url":"https://api.github.com/users/fjy/followers","following_url":"https://api.github.com/users/fjy/following{/other_user}","gists_url":"https://api.github.com/users/fjy/gists{/gist_id}","starred_url":"https://api.github.com/users/fjy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fjy/subscriptions","organizations_url":"https://api.github.com/users/fjy/orgs","repos_url":"https://api.github.com/users/fjy/repos","events_url":"https://api.github.com/users/fjy/events{/privacy}","received_events_url":"https://api.github.com/users/fjy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T00:00:44Z","updated_at":"2018-03-27T00:00:44Z","author_association":"CONTRIBUTOR","body":"👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376350666/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376352377","html_url":"https://github.com/apache/druid/pull/5528#issuecomment-376352377","issue_url":"https://api.github.com/repos/apache/druid/issues/5528","id":376352377,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjM1MjM3Nw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T00:09:52Z","updated_at":"2018-03-27T00:09:52Z","author_association":"CONTRIBUTOR","body":"@clintropolis thanks for working on this. This PR contains some changes to use lambda and I think it makes me difficult to figure out which parts are bug fixes. I would say it's better to split this PR into two sub PRs for bug fix only and remaining.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376352377/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376357615","html_url":"https://github.com/apache/druid/pull/5528#issuecomment-376357615","issue_url":"https://api.github.com/repos/apache/druid/issues/5528","id":376357615,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjM1NzYxNQ==","user":{"login":"clintropolis","id":1577461,"node_id":"MDQ6VXNlcjE1Nzc0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/1577461?v=4","gravatar_id":"","url":"https://api.github.com/users/clintropolis","html_url":"https://github.com/clintropolis","followers_url":"https://api.github.com/users/clintropolis/followers","following_url":"https://api.github.com/users/clintropolis/following{/other_user}","gists_url":"https://api.github.com/users/clintropolis/gists{/gist_id}","starred_url":"https://api.github.com/users/clintropolis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintropolis/subscriptions","organizations_url":"https://api.github.com/users/clintropolis/orgs","repos_url":"https://api.github.com/users/clintropolis/repos","events_url":"https://api.github.com/users/clintropolis/events{/privacy}","received_events_url":"https://api.github.com/users/clintropolis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T00:41:59Z","updated_at":"2018-03-27T00:41:59Z","author_association":"MEMBER","body":"Sorry for mixing stuff, this was already part of a split up chain of commits that originally also included the stuff in #5529. Main bug fix is [here](https://github.com/druid-io/druid/pull/5528/files#diff-3935bc475028da9ca5cc4525b50350c2R301) and additions to test to test the original bug are some additions [here](https://github.com/druid-io/druid/pull/5528/files#diff-a553c4eb88c34a936042d4b733421597R134) and the [test itself](https://github.com/druid-io/druid/pull/5528/files#diff-1efc163a19cea860e6054b4b89bf361eR243) \r\n\r\nI can split this stuff out if you prefer, I was just lazily updating stuff as I came across it.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376357615/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376374756","html_url":"https://github.com/apache/druid/pull/5533#issuecomment-376374756","issue_url":"https://api.github.com/repos/apache/druid/issues/5533","id":376374756,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjM3NDc1Ng==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T02:24:11Z","updated_at":"2018-03-27T02:24:11Z","author_association":"CONTRIBUTOR","body":"@clintropolis good point. Updated the PR.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376374756/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376388510","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-376388510","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":376388510,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjM4ODUxMA==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T03:52:16Z","updated_at":"2018-03-27T03:52:16Z","author_association":"CONTRIBUTOR","body":"> A special path to produce a segment from a single incremental index. It could avoid creating almost all temporary data structures.\r\n\r\nThat sounds good to me\r\n\r\n>While merging rows of indexes into a global row stream, produce two types of structures in parallel:\r\na) per-index-row-number-to-global-row-number conversion structures, O(N)-sized. This structure is created only for indexes which are segments.\r\nb) Produce per-index bitmaps, using global dictionary encoding and global row numbers. Before, this was step 1, and different encoding and row numbers were used. This structure is created only for indexes which are incremental indexes.\r\n\r\nIn this new proposal, when an indexing task needs to persist partial data to disk, under what conditions would it create a segment with a bitmap vs. deferring bitmap creation until merging?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376388510/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376394570","html_url":"https://github.com/apache/druid/pull/5471#issuecomment-376394570","issue_url":"https://api.github.com/repos/apache/druid/issues/5471","id":376394570,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjM5NDU3MA==","user":{"login":"samarthjain","id":1642180,"node_id":"MDQ6VXNlcjE2NDIxODA=","avatar_url":"https://avatars.githubusercontent.com/u/1642180?v=4","gravatar_id":"","url":"https://api.github.com/users/samarthjain","html_url":"https://github.com/samarthjain","followers_url":"https://api.github.com/users/samarthjain/followers","following_url":"https://api.github.com/users/samarthjain/following{/other_user}","gists_url":"https://api.github.com/users/samarthjain/gists{/gist_id}","starred_url":"https://api.github.com/users/samarthjain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samarthjain/subscriptions","organizations_url":"https://api.github.com/users/samarthjain/orgs","repos_url":"https://api.github.com/users/samarthjain/repos","events_url":"https://api.github.com/users/samarthjain/events{/privacy}","received_events_url":"https://api.github.com/users/samarthjain/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T04:37:20Z","updated_at":"2018-03-27T04:37:20Z","author_association":"CONTRIBUTOR","body":"@jihoonson - I have updated pull request with review comments, did some clean up and added tests.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376394570/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376396937","html_url":"https://github.com/apache/druid/pull/5471#issuecomment-376396937","issue_url":"https://api.github.com/repos/apache/druid/issues/5471","id":376396937,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjM5NjkzNw==","user":{"login":"samarthjain","id":1642180,"node_id":"MDQ6VXNlcjE2NDIxODA=","avatar_url":"https://avatars.githubusercontent.com/u/1642180?v=4","gravatar_id":"","url":"https://api.github.com/users/samarthjain","html_url":"https://github.com/samarthjain","followers_url":"https://api.github.com/users/samarthjain/followers","following_url":"https://api.github.com/users/samarthjain/following{/other_user}","gists_url":"https://api.github.com/users/samarthjain/gists{/gist_id}","starred_url":"https://api.github.com/users/samarthjain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samarthjain/subscriptions","organizations_url":"https://api.github.com/users/samarthjain/orgs","repos_url":"https://api.github.com/users/samarthjain/repos","events_url":"https://api.github.com/users/samarthjain/events{/privacy}","received_events_url":"https://api.github.com/users/samarthjain/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T04:55:52Z","updated_at":"2018-03-27T04:55:52Z","author_association":"CONTRIBUTOR","body":"The way nested query execution is implemented today, it executes the inner most query on the historical nodes with the outer queries being executed on the broker node. This can get problematic when the inner query groups using a high cardinality dimension, returning too many records for broker node to handle. One of the options that we have been internally testing and exploring is the capability to push down the complete nested query to the historical nodes. Each historical node then will execute the nested query primarily dealing with the segments it owns for that query. Because the number of records returned by each historical node would potentially be much smaller in this case, it would be less intensive for the broker to perform the final merge and aggregation. The broker though won't need to perform any more dimension or segment level filtering since it will be taken care of at the historical nodes itself.  Note that this way of distributing the aggregation to the historical nodes doesn't always return the same results as the final aggregation getting done on the broker node. However, there is a good set of cases (for ex - aggregating on dimensions that are used for hashing during ingestion) where this kind of push down logic will return the right results. I can get into this into more detail but the general idea was to leave the onus on the user to figure out if their data layout allows for this kind of push down.\r\n\r\nThis implementation provides user a way of forcing nested query execution through a query context variable. The next cut will focus on doing this automatically under the following conditions (credit to @gianm ) for clearly articulating the following:\r\n\r\n1) The groupBy query granularity is equal to, or finer than, segment granularity;\r\n\r\nand either:\r\n\r\n2a) A time chunk uses HashBasedNumberedShardSpec, partitionDimensions is nonempty, the grouping dimension set contains all of the shard partitionDimensions, and there are no \"extension\" partitions (partitions with partitionNum >= partitions, which are created by ingest tasks that append data)\r\n\r\nor:\r\n\r\n2b) A time chunk uses SingleDimensionShardSpec and the grouping dimension set contains the shard dimension.\r\n\r\nIf Druid detects this it should push down the query automatically for that time chunk. There will be situations where the query can be pushed down for some time chunks but not others (for example: consider a data pipeline that loads data unpartitioned in realtime, and later has a reindexing job to partition historical data by some useful dimension). In this case, ideally the broker should be capable of pushing down the query for the time chunks where it can be correctly pushed down, and not pushing it down for others.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376396937/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376431361","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-376431361","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":376431361,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjQzMTM2MQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T07:55:07Z","updated_at":"2018-03-27T07:55:07Z","author_association":"MEMBER","body":"> In this new proposal, when an indexing task needs to persist partial data to disk, under what conditions would it create a segment with a bitmap vs. deferring bitmap creation until merging?\r\n\r\nTo keep the algorithm as robust as the current one, initially it could always create bitmaps.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376431361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376432240","html_url":"https://github.com/apache/druid/issues/5526#issuecomment-376432240","issue_url":"https://api.github.com/repos/apache/druid/issues/5526","id":376432240,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjQzMjI0MA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T07:58:21Z","updated_at":"2018-03-27T07:58:21Z","author_association":"MEMBER","body":"Note: currently I'm not going to implement those improvements myself, so anybody is free to pick them up.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376432240/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376440215","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-376440215","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":376440215,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjQ0MDIxNQ==","user":{"login":"zhangxinyu1","id":12528894,"node_id":"MDQ6VXNlcjEyNTI4ODk0","avatar_url":"https://avatars.githubusercontent.com/u/12528894?v=4","gravatar_id":"","url":"https://api.github.com/users/zhangxinyu1","html_url":"https://github.com/zhangxinyu1","followers_url":"https://api.github.com/users/zhangxinyu1/followers","following_url":"https://api.github.com/users/zhangxinyu1/following{/other_user}","gists_url":"https://api.github.com/users/zhangxinyu1/gists{/gist_id}","starred_url":"https://api.github.com/users/zhangxinyu1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhangxinyu1/subscriptions","organizations_url":"https://api.github.com/users/zhangxinyu1/orgs","repos_url":"https://api.github.com/users/zhangxinyu1/repos","events_url":"https://api.github.com/users/zhangxinyu1/events{/privacy}","received_events_url":"https://api.github.com/users/zhangxinyu1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T08:27:39Z","updated_at":"2018-03-27T09:49:33Z","author_association":"CONTRIBUTOR","body":"@jihoonson  Thanks for your suggestions\r\n\r\n\r\nDerived dataSource supervisor would not store any segment versions. It's stateless. The things supervisor do is:\r\n1. Reading the max created_date of base dataSource of one interval from db. \r\n2. Reading the version of derived dataSource of the interval from db.\r\n3. compare the max created_date and the version. if they are the same, do nothing. otherwise, submit a task with bases datasource `DataSegment` to rebuild derived dataSource for the interval.\r\nIn this way, derived dataSource supervisor needn't store any information about the segment version. \r\n\r\n> This is because segment version management can be done in one class (TaskLockBox) rather than being spread over different classes depending on ingestion types. \r\n\r\nCould you please explain why using TaskLockBox to management segment version is better than use existing tasks.\r\n\r\nBut, you'r right, only hadoop-index-task supported is not enough. I think batch ingestion is suitable for derived datasource rebuilding, and the current batch ingestion can run on peon and run on hadoop cluster. Maybe we should implement one materialized-view-task to support both kinds of ingestion and use the existing version system in the next version. \r\n\r\n\r\n> if we keep the segment versions of the original dataSource corresponding to the current derived dataSources in the supervisor. Once the actual segment version of the original dataSource is higher than the one kept in the supervisor, then it is triggered to rebuild derived dataSources.\r\n\r\nIf the base datasource segments are generated by kafka-index-service, using the original dataSource version as the derived dataSource version may have some problems. This is because kafka-index-task can generate new segments with the same version. These new segments with the same version would not trigger derived datasource rebuilding.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376440215/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376537501","html_url":"https://github.com/apache/druid/issues/4349#issuecomment-376537501","issue_url":"https://api.github.com/repos/apache/druid/issues/4349","id":376537501,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjUzNzUwMQ==","user":{"login":"nishantmonu51","id":5023786,"node_id":"MDQ6VXNlcjUwMjM3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/5023786?v=4","gravatar_id":"","url":"https://api.github.com/users/nishantmonu51","html_url":"https://github.com/nishantmonu51","followers_url":"https://api.github.com/users/nishantmonu51/followers","following_url":"https://api.github.com/users/nishantmonu51/following{/other_user}","gists_url":"https://api.github.com/users/nishantmonu51/gists{/gist_id}","starred_url":"https://api.github.com/users/nishantmonu51/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nishantmonu51/subscriptions","organizations_url":"https://api.github.com/users/nishantmonu51/orgs","repos_url":"https://api.github.com/users/nishantmonu51/repos","events_url":"https://api.github.com/users/nishantmonu51/events{/privacy}","received_events_url":"https://api.github.com/users/nishantmonu51/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T14:05:17Z","updated_at":"2018-03-27T14:05:17Z","author_association":"MEMBER","body":"@gianm: Sorry I misunderstood your comment, \r\nThe proposal also has a section for \"Ability to specify default values for dimensions/metrics while ingestion\" which proposes to add the ability to specify default values at the ingestion time.\r\n\r\nI think for the ingestion part per column settings as outlined in the proposal where user can specify the list of columns along with defaults per column and similar defaults for per column type for on index task in case of schemaless ingestion level would be enough.\r\n\r\ndo you think we still need to infer and replace defaults based on NOT NULL/ NULL semantics, I think ability to specify default values during ingestion would be enough. \r\n \r\nFor the query part, there are two parts\r\n1) Backwards compatibility - maintained by the global setting during the transition phase. \r\n2) Null Handling going forward - It should be SQL compatible way. If user wants to treat nulls as 0 or empty strings, he can specify that at ingestion time. The difference here from current way would be that he would get the default values back from queries if nulls are replaced with some defaults instead of nulls from the queries.\r\n\r\nNote the second PR for Null handling does not have the ability of specifying defaults during ingestion. Will add that in a follow up PR if this sounds reasonable to you.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376537501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376558440","html_url":"https://github.com/apache/druid/issues/4345#issuecomment-376558440","issue_url":"https://api.github.com/repos/apache/druid/issues/4345","id":376558440,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjU1ODQ0MA==","user":{"login":"Sarvesh1990","id":6920414,"node_id":"MDQ6VXNlcjY5MjA0MTQ=","avatar_url":"https://avatars.githubusercontent.com/u/6920414?v=4","gravatar_id":"","url":"https://api.github.com/users/Sarvesh1990","html_url":"https://github.com/Sarvesh1990","followers_url":"https://api.github.com/users/Sarvesh1990/followers","following_url":"https://api.github.com/users/Sarvesh1990/following{/other_user}","gists_url":"https://api.github.com/users/Sarvesh1990/gists{/gist_id}","starred_url":"https://api.github.com/users/Sarvesh1990/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Sarvesh1990/subscriptions","organizations_url":"https://api.github.com/users/Sarvesh1990/orgs","repos_url":"https://api.github.com/users/Sarvesh1990/repos","events_url":"https://api.github.com/users/Sarvesh1990/events{/privacy}","received_events_url":"https://api.github.com/users/Sarvesh1990/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T15:02:00Z","updated_at":"2018-03-27T15:02:00Z","author_association":"NONE","body":"Hey @gianm \r\n\r\nSorry for delay. Had to go out of station for some urgent work.\r\nPlease find PR for Point  1 : #5541 \r\n\r\nLet me know if this works. Will start working on Point 2 now. \r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376558440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376592500","html_url":"https://github.com/apache/druid/issues/4345#issuecomment-376592500","issue_url":"https://api.github.com/repos/apache/druid/issues/4345","id":376592500,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjU5MjUwMA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T16:39:48Z","updated_at":"2018-03-27T16:39:48Z","author_association":"CONTRIBUTOR","body":"No worries @Sarvesh1990. I left a review on your PR.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376592500/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376630258","html_url":"https://github.com/apache/druid/pull/5440#issuecomment-376630258","issue_url":"https://api.github.com/repos/apache/druid/issues/5440","id":376630258,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjYzMDI1OA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T18:36:29Z","updated_at":"2018-03-27T18:36:29Z","author_association":"CONTRIBUTOR","body":"Hi @njhartwell, can you please fill out the Druid CLA here: http://druid.io/community/cla.html","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376630258/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376647553","html_url":"https://github.com/apache/druid/pull/5440#issuecomment-376647553","issue_url":"https://api.github.com/repos/apache/druid/issues/5440","id":376647553,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjY0NzU1Mw==","user":{"login":"njhartwell","id":2574830,"node_id":"MDQ6VXNlcjI1NzQ4MzA=","avatar_url":"https://avatars.githubusercontent.com/u/2574830?v=4","gravatar_id":"","url":"https://api.github.com/users/njhartwell","html_url":"https://github.com/njhartwell","followers_url":"https://api.github.com/users/njhartwell/followers","following_url":"https://api.github.com/users/njhartwell/following{/other_user}","gists_url":"https://api.github.com/users/njhartwell/gists{/gist_id}","starred_url":"https://api.github.com/users/njhartwell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/njhartwell/subscriptions","organizations_url":"https://api.github.com/users/njhartwell/orgs","repos_url":"https://api.github.com/users/njhartwell/repos","events_url":"https://api.github.com/users/njhartwell/events{/privacy}","received_events_url":"https://api.github.com/users/njhartwell/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T19:33:43Z","updated_at":"2018-03-27T19:33:43Z","author_association":"CONTRIBUTOR","body":"Just did, although this contribution is on behalf of Target Corp. which I am told has already signed the corporate CLA.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376647553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376661571","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-376661571","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":376661571,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjY2MTU3MQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T20:20:54Z","updated_at":"2018-03-28T17:32:29Z","author_association":"CONTRIBUTOR","body":"@zhangxinyu1 thanks for the detailed explanation.\r\n\r\n> Derived dataSource supervisor would not store any segment versions. It's stateless.\r\n\r\nYes, I see your point. But actually the algorithm is _stateful_ because it works based the states (`created_date` and `version`) stored in metastore. However, this doesn't always work. Druid's segment versioning system has a rule that recent segments have higher versions than old segments. Using time as the segment version usually works, but [we still consider using something else if there is an issue in the future](https://github.com/druid-io/druid/blob/master/indexing-service/src/main/java/io/druid/indexing/overlord/TaskLockbox.java#L474-L478). `created_time` doesn't have such a rule. As a result, recent segments might have older `created_time` than old segments depending on overlord's wall clock time.\r\n\r\nIf you want to make the derived dataSource supervisor stateless, I think it should be something different from the proposed one. One possible solution is triggering updates on derived dataSources whenever a base dataSource segment is published. I already commented [here](https://github.com/druid-io/druid/issues/5218#issuecomment-361138361) about this idea even though it was too rough. So, I'll explain more details. Publishing segments is completed only after an overlord updates the metadata of those segments in metastore. Tasks should use `SegmentTransactionalInsertAction` to do it. I think we can add a something new feature like `triggerAction` which is triggered upon a successful segment insertion in `SegmentTransactionalInsertAction`. The `triggerAction` should be a general abstraction of any action. To update derived dataSources, tasks can specify a `triggerAction` which notifies the published segment information to derived dataSource supervisors. Once a supervisor receives an event from the `triggerAction`, it can submit a task to update its derived dataSource. Since the segment management is done by coordinators, the `triggerAction` should be able to be called in coordinators too. In this way, the supervisors don't have to check any state like comparing the `created_date` of base dataSource segments and the `version` of derived dataSource segments.\r\n\r\nBut, I think it's quite complicated and it's always a good idea to start with a simple implementation. If you want to implement a good stateless system for derived dataSource, it would be great. However, if it's not easy, I would say it's better to start with a simpler one which can be easily improved in the future. IMO, using `created_date` as the segment version might be simple to implement, but is not easy to improve in the future because it adds an assumption that the ordering of `created_date` of segments is guaranteed. I don't think this assumption should be guaranteed.\r\n\r\n> Could you please explain why using TaskLockBox to management segment version is better than use existing tasks.\r\n\r\nAll types of tasks use `LockTryAcquireAction` or `LockAcquireAction` which internally get a lock using `TaskLockBox`. And the acquired lock has a valid segment version. All task types are supposed to use this version.\r\n\r\nSpecifying a user-customized version in tasks (like Hadoop task) is dangerous. The result segments might not be visible or, even worse, overwrite existing segments unexpectedly. As a result, this should be used very carefully.\r\n\r\nMaybe this is not an issue for derived dataSources if they can be created/updated/deleted via only their supervisors (BTW, is this the assumption you have?). However, I'm still not sure about using the `created_time` as the segment version.\r\n\r\n> Maybe we should implement one materialized-view-task to support both kinds of ingestion and use the existing version system in the next version.\r\n\r\nThat makes sense if needed. Would you elaborate a little bit more on the new task type you think?\r\n\r\n> If the base datasource segments are generated by kafka-index-service, using the original dataSource version as the derived dataSource version may have some problems. This is because kafka-index-task can generate new segments with the same version. These new segments with the same version would not trigger derived datasource rebuilding.\r\n\r\nThanks. I missed Kafka indexing service.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376661571/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376667061","html_url":"https://github.com/apache/druid/pull/5440#issuecomment-376667061","issue_url":"https://api.github.com/repos/apache/druid/issues/5440","id":376667061,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjY2NzA2MQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T20:38:28Z","updated_at":"2018-03-27T20:38:28Z","author_association":"CONTRIBUTOR","body":"Got it, thanks for making that clear.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376667061/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376685482","html_url":"https://github.com/apache/druid/pull/5492#issuecomment-376685482","issue_url":"https://api.github.com/repos/apache/druid/issues/5492","id":376685482,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjY4NTQ4Mg==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T21:42:23Z","updated_at":"2018-03-27T21:42:23Z","author_association":"CONTRIBUTOR","body":"This PR is ready for review.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376685482/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376703968","html_url":"https://github.com/apache/druid/pull/5492#issuecomment-376703968","issue_url":"https://api.github.com/repos/apache/druid/issues/5492","id":376703968,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjcwMzk2OA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T23:04:27Z","updated_at":"2018-03-27T23:04:27Z","author_association":"CONTRIBUTOR","body":"@drcrallen raised https://github.com/druid-io/druid/issues/5543.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376703968/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376709226","html_url":"https://github.com/apache/druid/pull/5524#issuecomment-376709226","issue_url":"https://api.github.com/repos/apache/druid/issues/5524","id":376709226,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjcwOTIyNg==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-27T23:31:56Z","updated_at":"2018-03-27T23:31:56Z","author_association":"CONTRIBUTOR","body":"@jon-wei thanks for raising this PR. I'm reviewing it. \r\n\r\nBTW, #5492 is changed to not use taskReport anymore. It first used the taskReport to return which segments generated by worker tasks to the supervisor task. This information is temporal and doesn't have to be stored permanently in deep storage. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376709226/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376721570","html_url":"https://github.com/apache/druid/pull/5492#issuecomment-376721570","issue_url":"https://api.github.com/repos/apache/druid/issues/5492","id":376721570,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjcyMTU3MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T00:42:45Z","updated_at":"2018-03-28T00:42:45Z","author_association":"CONTRIBUTOR","body":"Currently, worker tasks don't be killed automatically even though a supervisor task is killed. I'll do in a follow-up pr.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376721570/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376726529","html_url":"https://github.com/apache/druid/pull/5471#issuecomment-376726529","issue_url":"https://api.github.com/repos/apache/druid/issues/5471","id":376726529,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjcyNjUyOQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T01:11:48Z","updated_at":"2018-03-28T01:11:48Z","author_association":"CONTRIBUTOR","body":"@samarthjain thanks. I'll take another look.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376726529/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376727126","html_url":"https://github.com/apache/druid/pull/5532#issuecomment-376727126","issue_url":"https://api.github.com/repos/apache/druid/issues/5532","id":376727126,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjcyNzEyNg==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T01:15:09Z","updated_at":"2018-03-28T01:15:09Z","author_association":"CONTRIBUTOR","body":"Fix looks good to me, would be nice if we had tests but looks like that's pretty difficult/complicated as of now","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376727126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376727489","html_url":"https://github.com/apache/druid/issues/5531#issuecomment-376727489","issue_url":"https://api.github.com/repos/apache/druid/issues/5531","id":376727489,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjcyNzQ4OQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T01:17:16Z","updated_at":"2018-03-28T01:17:16Z","author_association":"CONTRIBUTOR","body":"@clintropolis it would be great if we can add some tests to avoid this sort of issues again in the future. But, it looks not easy. Do you have any idea about this?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376727489/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376849477","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-376849477","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":376849477,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Njg0OTQ3Nw==","user":{"login":"zhangxinyu1","id":12528894,"node_id":"MDQ6VXNlcjEyNTI4ODk0","avatar_url":"https://avatars.githubusercontent.com/u/12528894?v=4","gravatar_id":"","url":"https://api.github.com/users/zhangxinyu1","html_url":"https://github.com/zhangxinyu1","followers_url":"https://api.github.com/users/zhangxinyu1/followers","following_url":"https://api.github.com/users/zhangxinyu1/following{/other_user}","gists_url":"https://api.github.com/users/zhangxinyu1/gists{/gist_id}","starred_url":"https://api.github.com/users/zhangxinyu1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhangxinyu1/subscriptions","organizations_url":"https://api.github.com/users/zhangxinyu1/orgs","repos_url":"https://api.github.com/users/zhangxinyu1/repos","events_url":"https://api.github.com/users/zhangxinyu1/events{/privacy}","received_events_url":"https://api.github.com/users/zhangxinyu1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T11:10:40Z","updated_at":"2018-03-28T11:19:15Z","author_association":"CONTRIBUTOR","body":"@jihoonson thank you so much for explaining the plan of segment version.\r\n\r\nYes, starting with a simple implementation is better, and we can impove it later. Using created_time as segment version is not good, but i can't thing of a better way to implement it.  do you have any ideas?\r\n\r\nI'm still wondering why the specified segment version is not allowed in TaskLockbox. I think it is flexible to use the version generated by TaskLockBox automatically by default and also allow users to set specified versions when they need. It can be considered as one of advanced usages. if users choose to use specified versions, they should know the results.\r\n \r\n\r\n> Maybe this is not an issue for derived dataSources if they can be created/updated/deleted via only their supervisors (BTW, is this the assumption you have?). \r\n\r\nIn current implementation, derived dataSource is normal datasource, it can be changed by setting segment rules, submit a task by users, or other operations. However, supervisor always try to keep the timeline's consistency of base datasource and derived datasource.\r\n\r\nAbout the materialized-view-task, I think it should be able to run on peon or hadoop at least. And it depends on the users' config.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376849477/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376877667","html_url":"https://github.com/apache/druid/pull/5545#issuecomment-376877667","issue_url":"https://api.github.com/repos/apache/druid/issues/5545","id":376877667,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Njg3NzY2Nw==","user":{"login":"yuppie-flu","id":6185911,"node_id":"MDQ6VXNlcjYxODU5MTE=","avatar_url":"https://avatars.githubusercontent.com/u/6185911?v=4","gravatar_id":"","url":"https://api.github.com/users/yuppie-flu","html_url":"https://github.com/yuppie-flu","followers_url":"https://api.github.com/users/yuppie-flu/followers","following_url":"https://api.github.com/users/yuppie-flu/following{/other_user}","gists_url":"https://api.github.com/users/yuppie-flu/gists{/gist_id}","starred_url":"https://api.github.com/users/yuppie-flu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yuppie-flu/subscriptions","organizations_url":"https://api.github.com/users/yuppie-flu/orgs","repos_url":"https://api.github.com/users/yuppie-flu/repos","events_url":"https://api.github.com/users/yuppie-flu/events{/privacy}","received_events_url":"https://api.github.com/users/yuppie-flu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T13:00:28Z","updated_at":"2018-03-28T13:00:28Z","author_association":"CONTRIBUTOR","body":"Integration tests failed twice for some unclear reasons. For sure, it's not related with changes.\r\nI'll try to rerun build later...","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376877667/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376904077","html_url":"https://github.com/apache/druid/pull/5413#issuecomment-376904077","issue_url":"https://api.github.com/repos/apache/druid/issues/5413","id":376904077,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjkwNDA3Nw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T14:20:00Z","updated_at":"2018-03-28T14:20:00Z","author_association":"MEMBER","body":"I'm concerned about potential performance impact of this solution. Now the executor that is supposed to be a cost-free abstraction (just execute the Runnable's run or Callable's call, passed in) does two operations with a Phaser. As the very minimum, it's a flush or read/write CPU core pipelines. And if some instance of `sameThreadExecutor()` is used widely across Threads, assuming it has no state, it could suddenly become a concurrency bottleneck. For no real business logic / correctness purpose.\r\n\r\nIt seems to me that the no-op solution doesn't have any risks and couldn't theoretically have any performance impact.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376904077/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376927036","html_url":"https://github.com/apache/druid/pull/5452#issuecomment-376927036","issue_url":"https://api.github.com/repos/apache/druid/issues/5452","id":376927036,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjkyNzAzNg==","user":{"login":"nishantmonu51","id":5023786,"node_id":"MDQ6VXNlcjUwMjM3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/5023786?v=4","gravatar_id":"","url":"https://api.github.com/users/nishantmonu51","html_url":"https://github.com/nishantmonu51","followers_url":"https://api.github.com/users/nishantmonu51/followers","following_url":"https://api.github.com/users/nishantmonu51/following{/other_user}","gists_url":"https://api.github.com/users/nishantmonu51/gists{/gist_id}","starred_url":"https://api.github.com/users/nishantmonu51/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nishantmonu51/subscriptions","organizations_url":"https://api.github.com/users/nishantmonu51/orgs","repos_url":"https://api.github.com/users/nishantmonu51/repos","events_url":"https://api.github.com/users/nishantmonu51/events{/privacy}","received_events_url":"https://api.github.com/users/nishantmonu51/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T15:24:21Z","updated_at":"2018-03-28T15:24:21Z","author_association":"MEMBER","body":"@b-slim @leventov: Any more comments here ? ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376927036/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376931423","html_url":"https://github.com/apache/druid/pull/5452#issuecomment-376931423","issue_url":"https://api.github.com/repos/apache/druid/issues/5452","id":376931423,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjkzMTQyMw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T15:35:35Z","updated_at":"2018-03-28T15:35:35Z","author_association":"MEMBER","body":"@nishantmonu51 I will continue review of this PR. Could you please continue review of my PR?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376931423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376931631","html_url":"https://github.com/apache/druid/pull/5452#issuecomment-376931631","issue_url":"https://api.github.com/repos/apache/druid/issues/5452","id":376931631,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjkzMTYzMQ==","user":{"login":"nishantmonu51","id":5023786,"node_id":"MDQ6VXNlcjUwMjM3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/5023786?v=4","gravatar_id":"","url":"https://api.github.com/users/nishantmonu51","html_url":"https://github.com/nishantmonu51","followers_url":"https://api.github.com/users/nishantmonu51/followers","following_url":"https://api.github.com/users/nishantmonu51/following{/other_user}","gists_url":"https://api.github.com/users/nishantmonu51/gists{/gist_id}","starred_url":"https://api.github.com/users/nishantmonu51/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nishantmonu51/subscriptions","organizations_url":"https://api.github.com/users/nishantmonu51/orgs","repos_url":"https://api.github.com/users/nishantmonu51/repos","events_url":"https://api.github.com/users/nishantmonu51/events{/privacy}","received_events_url":"https://api.github.com/users/nishantmonu51/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T15:36:09Z","updated_at":"2018-03-28T15:36:09Z","author_association":"MEMBER","body":"sure, will try to finish reviewing it this week. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376931631/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376961222","html_url":"https://github.com/apache/druid/pull/5413#issuecomment-376961222","issue_url":"https://api.github.com/repos/apache/druid/issues/5413","id":376961222,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Njk2MTIyMg==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T17:03:31Z","updated_at":"2018-03-28T17:03:31Z","author_association":"CONTRIBUTOR","body":"@leventov `com.google.common.util.concurrent.MoreExecutors.SameThreadExecutorService` uses a state lock whenever tasks are submitted. Are you suggesting the performance of a `Phaser` would be worse?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376961222/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376968115","html_url":"https://github.com/apache/druid/pull/5544#issuecomment-376968115","issue_url":"https://api.github.com/repos/apache/druid/issues/5544","id":376968115,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Njk2ODExNQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T17:25:16Z","updated_at":"2018-03-28T17:25:16Z","author_association":"CONTRIBUTOR","body":"LGTM. @niketh thanks for the fix! ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376968115/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376984792","html_url":"https://github.com/apache/druid/issues/5304#issuecomment-376984792","issue_url":"https://api.github.com/repos/apache/druid/issues/5304","id":376984792,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Njk4NDc5Mg==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T18:15:48Z","updated_at":"2018-03-28T18:15:48Z","author_association":"CONTRIBUTOR","body":"@zhangxinyu1 thank you for the explanation. Maybe it's better to add a restriction that only supervisors can modify derived dataSources in the future.\r\n\r\n> Using created_time as segment version is not good, but i can't thing of a better way to implement it. do you have any ideas?\r\n\r\nWell, I would say it's better to start with a stateful implementation for the supervisor even though it's not scalable. For example, the supervisor may keep all mapping information between a base dataSource and its derived dataSources in somewhere like memory, disk or metastore. Since the number of segments of a dataSource is usually several hundreds, this might not be a big overhead while the number of derived dataSources is kept small.\r\n\r\n> I'm still wondering why the specified segment version is not allowed in TaskLockbox. I think it is flexible to use the version generated by TaskLockBox automatically by default and also allow users to set specified versions when they need. It can be considered as one of advanced usages. if users choose to use specified versions, they should know the results.\r\n\r\nActually, the current implementation of TaskLockbox allows to use a specified segment version. That's how Hadoop tasks allow a user-customized version in their spec. But I don't know why it's allowed in TaskLockbox and Hadoop tasks from the first place. Maybe there were some issues like bugs in TaskLockbox in the past, but now, AFAIK, there is no such issue. \r\n\r\nIMO, when we add a new feature, we first need to check that the feature is really necessary and useful for users. For custom versions, however, it's difficult for me to imagine which kinds of applications need to specify custom versions instead of using automatically assigned always valid versions. Would you give some examples if you have?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376984792/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/376987375","html_url":"https://github.com/apache/druid/pull/5547#issuecomment-376987375","issue_url":"https://api.github.com/repos/apache/druid/issues/5547","id":376987375,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Njk4NzM3NQ==","user":{"login":"dyanarose","id":8066282,"node_id":"MDQ6VXNlcjgwNjYyODI=","avatar_url":"https://avatars.githubusercontent.com/u/8066282?v=4","gravatar_id":"","url":"https://api.github.com/users/dyanarose","html_url":"https://github.com/dyanarose","followers_url":"https://api.github.com/users/dyanarose/followers","following_url":"https://api.github.com/users/dyanarose/following{/other_user}","gists_url":"https://api.github.com/users/dyanarose/gists{/gist_id}","starred_url":"https://api.github.com/users/dyanarose/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dyanarose/subscriptions","organizations_url":"https://api.github.com/users/dyanarose/orgs","repos_url":"https://api.github.com/users/dyanarose/repos","events_url":"https://api.github.com/users/dyanarose/events{/privacy}","received_events_url":"https://api.github.com/users/dyanarose/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T18:24:09Z","updated_at":"2018-03-28T18:24:23Z","author_association":"CONTRIBUTOR","body":"@jihoonson that's done. I'm already registered with Apache as well, let me know if that needs updating to include Druid due to the incubator","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/376987375/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/377032655","html_url":"https://github.com/apache/druid/pull/5547#issuecomment-377032655","issue_url":"https://api.github.com/repos/apache/druid/issues/5547","id":377032655,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NzAzMjY1NQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T20:53:27Z","updated_at":"2018-03-28T20:53:27Z","author_association":"CONTRIBUTOR","body":"@dyanarose thanks! I think Apache ICLA is not required yet. I'll merge this PR shortly.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/377032655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/377032829","html_url":"https://github.com/apache/druid/issues/5546#issuecomment-377032829","issue_url":"https://api.github.com/repos/apache/druid/issues/5546","id":377032829,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NzAzMjgyOQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T20:53:58Z","updated_at":"2018-03-28T20:53:58Z","author_association":"CONTRIBUTOR","body":"Fixed via #5547.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/377032829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/377061668","html_url":"https://github.com/apache/druid/pull/5471#issuecomment-377061668","issue_url":"https://api.github.com/repos/apache/druid/issues/5471","id":377061668,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NzA2MTY2OA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T22:40:44Z","updated_at":"2018-03-28T22:40:44Z","author_association":"CONTRIBUTOR","body":"@samarthjain we are suffering from pretty frequent CI failures. If the CI for your PR fails, you first need to make sure the failure relates to any changes in your PR. This can be checked by running unit tests locally.\r\n\r\nUsually the memory configuration for CI shouldn't be a problem. If you found something wrong in the CI configuration, please make another PR to fix it.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/377061668/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/377072370","html_url":"https://github.com/apache/druid/pull/5490#issuecomment-377072370","issue_url":"https://api.github.com/repos/apache/druid/issues/5490","id":377072370,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NzA3MjM3MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-28T23:34:02Z","updated_at":"2018-03-28T23:34:29Z","author_association":"CONTRIBUTOR","body":"@leventov ok. The unit test failures in `LoggingRequestLoggerTest` are because of the wrong log level. I don't know why, but the log level is set to `ERROR` and `INFO` level logs are not written.\r\n\r\nThe integration tests failure looks somehow related to service discovery. I can see these logs a lot in the overlord log. I checked mysql, zookeeper, and druid coordinator were running well.\r\n\r\n```\r\n2018-03-07T20:57:02,601 ERROR [BasicAuthenticatorCacheManager-Exec--0] io.druid.curator.discovery.ServerDiscoverySelector - No server instance found for [druid/coordinator]\r\n```\r\n\r\nBTW, you should be able to reproduce the test failures locally by deleting the maven local cache and installing druid.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/377072370/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/377082218","html_url":"https://github.com/apache/druid/issues/5203#issuecomment-377082218","issue_url":"https://api.github.com/repos/apache/druid/issues/5203","id":377082218,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NzA4MjIxOA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-29T00:29:54Z","updated_at":"2018-03-29T00:29:54Z","author_association":"CONTRIBUTOR","body":"@ericgogh two PRs (#5533, #5544) have been merged to fix this issue. Would you please try again? I'm closing this issue and will open again if you still have the same problem.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/377082218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/377096234","html_url":"https://github.com/apache/druid/pull/5545#issuecomment-377096234","issue_url":"https://api.github.com/repos/apache/druid/issues/5545","id":377096234,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NzA5NjIzNA==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-29T02:01:06Z","updated_at":"2018-03-29T02:01:06Z","author_association":"CONTRIBUTOR","body":"@yuppie-flu could you please fill CLA http://druid.io/community/cla.html ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/377096234/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/377097329","html_url":"https://github.com/apache/druid/pull/5545#issuecomment-377097329","issue_url":"https://api.github.com/repos/apache/druid/issues/5545","id":377097329,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NzA5NzMyOQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-29T02:08:30Z","updated_at":"2018-03-29T02:08:30Z","author_association":"CONTRIBUTOR","body":"@b-slim he has already done.\r\n\r\nBTW, is this refactoring?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/377097329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/377110112","html_url":"https://github.com/apache/druid/pull/5545#issuecomment-377110112","issue_url":"https://api.github.com/repos/apache/druid/issues/5545","id":377110112,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NzExMDExMg==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-03-29T03:31:45Z","updated_at":"2018-03-29T03:31:45Z","author_association":"CONTRIBUTOR","body":"IMO it is refactoring but you can change it if you have other opinion. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/377110112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]