[{"url":"https://api.github.com/repos/apache/curator/issues/comments/45963768","html_url":"https://github.com/apache/curator/pull/9#issuecomment-45963768","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":45963768,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1OTYzNzY4","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-13T00:23:17Z","updated_at":"2014-06-13T00:23:17Z","author_association":"MEMBER","body":"Man - it's getting complicated huh? I guess there's no other way. I wonder if there's some simplification that can be done.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/45963768/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/45964598","html_url":"https://github.com/apache/curator/pull/9#issuecomment-45964598","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":45964598,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1OTY0NTk4","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-13T00:38:17Z","updated_at":"2014-06-13T00:38:17Z","author_association":"CONTRIBUTOR","body":"For what I originally thought was going to be a 1 line fix, yes!\n\nIt seems to me that the wait logic is cleaner to implement at the CuratorFramework level, rather than at the CuratorZooKeeperClient, just because you've got a nice ConnectionStateListener framework to deal with. The internalBlockUntilConnectedOrTimedOut() method is a bit ugly in that it has to block in 1 second increments. Is there a reason that this can't just wait until for the entire session timeout in one go?\n\nAs an aside, it's a bit inefficient too as it allocates and destroys a CountDownLatch, and Watcher each iteration of the loop.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/45964598/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/45964727","html_url":"https://github.com/apache/curator/pull/9#issuecomment-45964727","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":45964727,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1OTY0NzI3","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-13T00:41:08Z","updated_at":"2014-06-13T00:41:08Z","author_association":"MEMBER","body":"OK - I see your point. I forget why the CuratorZookeeperClient does a spin loop like that. That's some of the oldest code in the lib.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/45964727/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/45966251","html_url":"https://github.com/apache/curator/pull/9#issuecomment-45966251","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":45966251,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1OTY2MjUx","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-13T01:09:12Z","updated_at":"2014-06-13T01:09:12Z","author_association":"CONTRIBUTOR","body":"Ok, so what's the way forward? We can either refactor internalBlockUntilConnectedOrTimedOut() in CuratorZooKeeperClient to allow arbitrary timeouts, and try to remove the 1 second sleep increments. Or, we can move the wait logic to the CuratorFramework, and use the ConnectionStateListener.\n\nAssuming there's not technical reason why the CuratorZooKeeperClient can't block for arbitrary lengths of time, then it's ok to implement there. I don't really have a strong preference either way.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/45966251/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/46041824","html_url":"https://github.com/apache/curator/pull/9#issuecomment-46041824","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":46041824,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MDQxODI0","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-13T18:03:12Z","updated_at":"2014-06-13T18:03:12Z","author_association":"MEMBER","body":"I'd appreciate your opinion. I'm OK with either.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/46041824/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/46078671","html_url":"https://github.com/apache/curator/pull/9#issuecomment-46078671","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":46078671,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MDc4Njcx","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-14T05:00:01Z","updated_at":"2014-06-14T05:00:01Z","author_association":"CONTRIBUTOR","body":"Ok, I've implemented it in the CuratorZookeeperClient. Doesn't seem to be any issues with using an arbitrary sleep length. Still need to do a bit of testing. Will get something sorted early next week hopefully.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/46078671/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/46139081","html_url":"https://github.com/apache/curator/pull/9#issuecomment-46139081","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":46139081,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MTM5MDgx","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-16T03:49:25Z","updated_at":"2014-06-16T03:49:25Z","author_association":"CONTRIBUTOR","body":"Scratch that, I think that the reason that the CuratorZookeeperClient was doing a spin loop was because there's a race condition with the watchers. It's possible for the local watcher to get a 'connected' event before the ConnectionState gets its 'connected' event. This means that when you call into ConnectionState.isConnected() it returns false, even though we know it's actually true.\n\nSo, while we could return the boolean based on what we know the state to be, it's going to be inconsistent for a short period with the ConnectionState, and this has potential for knock on consequences, even though the window of inconsistency is short.\n\nSo, I think it's actually better to move this wait logic into the CuratorFramework and use the ConnectionStateListener.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/46139081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/46147361","html_url":"https://github.com/apache/curator/pull/9#issuecomment-46147361","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":46147361,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MTQ3MzYx","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-16T07:14:06Z","updated_at":"2014-06-16T07:14:06Z","author_association":"CONTRIBUTOR","body":"Latest commit has everything implemented at the CuratorFramework level. Have a look and see what you think. I still seem to have random completely unrelated tests failing occasionally which is a bit disconcerting. They work fine when I rerun them though. I'm not sure if these are due to race conditions or flakiness of the TestingServer.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/46147361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/46207798","html_url":"https://github.com/apache/curator/pull/9#issuecomment-46207798","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":46207798,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MjA3Nzk4","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-16T17:23:17Z","updated_at":"2014-06-16T17:23:17Z","author_association":"MEMBER","body":"The test are flakey because many of them have to wait \"for a bit\" for things to settle (session to fail, ephemeral to delete, etc.). But, the ZK server has essentially random behavior in terms of when it reconnects, connects, etc. If the VM is gc'ing or your system is slow, etc. it gets worse.\n\nI keep trying to tune things but it's still not perfect.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/46207798/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/46219971","html_url":"https://github.com/apache/curator/pull/9#issuecomment-46219971","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":46219971,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MjE5OTcx","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-16T19:00:53Z","updated_at":"2014-06-16T19:06:41Z","author_association":"MEMBER","body":"Interestingly, now that we have ExecuteAfterConnectionEstablished, we no longer need ConnectionState.isConnected() nor do we need the change to LeaderLatch.handleStateChange().\n\nIf you don't mind, I'll remove those changes.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/46219971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/46244024","html_url":"https://github.com/apache/curator/pull/9#issuecomment-46244024","issue_url":"https://api.github.com/repos/apache/curator/issues/9","id":46244024,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MjQ0MDI0","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-16T22:03:35Z","updated_at":"2014-06-16T22:03:35Z","author_association":"CONTRIBUTOR","body":"The ConnectionState.isConnected() is being used is in the CuratorFrameworkImpl when we're blocking for a connection. I think that leaving it in is probably not a bad idea, as it's still got potential to be useful in other places too.\n\nIn regards to the tests, I wonder if there's a way of structuring them to be more event driven rather than just waiting some arbitrary amount of time and hope an event occurs within that window? I'll have a look and see if I can find anything, but that's for another JIRA ticket.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/46244024/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708179","html_url":"https://github.com/apache/curator/issues/635#issuecomment-2604708179","issue_url":"https://api.github.com/repos/apache/curator/issues/635","id":2604708179,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgxNzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-17T03:51:23Z","updated_at":"2025-01-21T13:16:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user cammckenzie opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-114\" title=\"TestingServer should expose restart() method.\" class=\"issue-link\" data-issue-key=\"CURATOR-114\"><del>CURATOR-114</del></a> - Modified the TestingServer to expose the restart() method</p>\n\n<p>    Modified the TestingServer to expose the restart() method on the underlying TestingZooKeeperServer. Modified all unit tests that were previously using the stop() and then recreate using existing temporary directory and port approach for restarting the server, so that they now just call the restart() method.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/cammckenzie/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/cammckenzie/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-114\" title=\"TestingServer should expose restart() method.\" class=\"issue-link\" data-issue-key=\"CURATOR-114\"><del>CURATOR-114</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #11</p>\n\n<hr />\n<p>commit 27c70aab9a3d86ba9a8a20e3ae28ef5bed147300<br/>\nAuthor: Cameron McKenzie <cameron@unico.com.au><br/>\nDate:   2014-06-17T03:49:03Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-114\" title=\"TestingServer should expose restart() method.\" class=\"issue-link\" data-issue-key=\"CURATOR-114\"><del>CURATOR-114</del></a> - Modified the TestingServer to expose the restart() method<br/>\n    on the underlying TestingZooKeeperServer. Modified all unit tests that<br/>\n    were previously using the stop() and then recreate using existing<br/>\n    temporary directory and port approach for restarting the server, so that<br/>\n    they now just call the restart() method.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708179/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708186","html_url":"https://github.com/apache/curator/issues/635#issuecomment-2604708186","issue_url":"https://api.github.com/repos/apache/curator/issues/635","id":2604708186,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgxODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-17T14:00:11Z","updated_at":"2025-01-21T13:16:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user madrob commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11#discussion_r13859747\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11#discussion_r13859747</a></p>\n\n<p>    &#8212; Diff: curator-test/src/main/java/org/apache/curator/test/TestingServer.java &#8212;<br/>\n    @@ -104,6 +171,17 @@ public void stop() throws IOException<br/>\n }</p>\n\n<p> /**<br/>\n    +     * Restart the server. This is only valid if the server has previously been<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Why only make this valid if the server had already been stopped? Just for consistency with the internal TestingZookeeperServer behaviour?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708186/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604707575","html_url":"https://github.com/apache/curator/issues/631#issuecomment-2604707575","issue_url":"https://api.github.com/repos/apache/curator/issues/631","id":2604707575,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDc1NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-17T19:36:16Z","updated_at":"2025-01-21T13:15:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>FYI - I made a few changes:</p>\n\n<p><a href=\"https://github.com/apache/curator/compare/CURATOR-110\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/compare/CURATOR-110</a></p>\n\n<ul>\n\t<li>I renamed ExecuteAfterConnectionEstablished to make it a bit more clear</li>\n\t<li>LeaderLatch's handleStateChange no longer does anything on CONNECTED as this is handled by ExecuteAfterConnectionEstablished</li>\n\t<li>Moved the connection blocking code into ConnectionManager. It's cleaner and doesn't require a connection state listener</li>\n\t<li>ExecuteAfterConnectionEstablished returns the future created by the executor. It's needed so users can cancel the operation if needed.</li>\n</ul>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604707575/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708191","html_url":"https://github.com/apache/curator/issues/635#issuecomment-2604708191","issue_url":"https://api.github.com/repos/apache/curator/issues/635","id":2604708191,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgxOTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-17T21:31:16Z","updated_at":"2025-01-21T13:16:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11#discussion_r13886728\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11#discussion_r13886728</a></p>\n\n<p>    &#8212; Diff: curator-test/src/main/java/org/apache/curator/test/TestingServer.java &#8212;<br/>\n    @@ -104,6 +171,17 @@ public void stop() throws IOException<br/>\n }</p>\n\n<p> /**<br/>\n    +     * Restart the server. This is only valid if the server has previously been<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Just following the current convention with the underlying TestingZookeeperServer. It throws an exception if restart() is called on an instance that is not in a STOPPED state. Are you suggesting that restart() should work from any state? Or just a LATENT or STOPPED state? Either way, it would require changes to the TestingZookeeperServer, but I don't think that's inherently a problem as the restart() method is only used by the TestingCluster, and I don't think modifying the behaviour would cause issues there.</p>\n\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708191/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708197","html_url":"https://github.com/apache/curator/issues/635#issuecomment-2604708197","issue_url":"https://api.github.com/repos/apache/curator/issues/635","id":2604708197,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgxOTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-17T21:35:51Z","updated_at":"2025-01-21T13:16:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user madrob commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11#discussion_r13886987\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11#discussion_r13886987</a></p>\n\n<p>    &#8212; Diff: curator-test/src/main/java/org/apache/curator/test/TestingServer.java &#8212;<br/>\n    @@ -104,6 +171,17 @@ public void stop() throws IOException<br/>\n }</p>\n\n<p> /**<br/>\n    +     * Restart the server. This is only valid if the server has previously been<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    As a user, it would make sense for restart to work from any state. My mental model is akin to Unix services where restart is simply \"stop ; start\"</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708197/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708202","html_url":"https://github.com/apache/curator/issues/635#issuecomment-2604708202","issue_url":"https://api.github.com/repos/apache/curator/issues/635","id":2604708202,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgyMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-17T21:43:45Z","updated_at":"2025-01-21T13:16:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11#discussion_r13887642\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11#discussion_r13887642</a></p>\n\n<p>    &#8212; Diff: curator-test/src/main/java/org/apache/curator/test/TestingServer.java &#8212;<br/>\n    @@ -104,6 +171,17 @@ public void stop() throws IOException<br/>\n }</p>\n\n<p> /**<br/>\n    +     * Restart the server. This is only valid if the server has previously been<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I agree, I was surprised that restart was really just 'start if you've been stopped before'. It doesn't look like any test cases are using this code at the moment, so I'll modify the restart() to do a stop() if it's running, followed by a start().</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708202/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604707583","html_url":"https://github.com/apache/curator/issues/631#issuecomment-2604707583","issue_url":"https://api.github.com/repos/apache/curator/issues/631","id":2604707583,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDc1ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-17T21:47:47Z","updated_at":"2025-01-21T13:15:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>Looks good Jordan. Not sure why (maybe because it's not a pull request?) but I can't comment against the diff in the link above. There was one minor thing that I noticed (which I probably wrote in the first place).</p>\n\n<p>In the blockUntilConnected(int maxWaitTime, TimeUnit units) method, the maxWaitTimeMS is converted into MS each time the loop iterates, when it could just be calculated once outside the loop.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604707583/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604707586","html_url":"https://github.com/apache/curator/issues/631#issuecomment-2604707586","issue_url":"https://api.github.com/repos/apache/curator/issues/631","id":2604707586,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDc1ODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-17T23:03:24Z","updated_at":"2025-01-21T13:15:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/9\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/9</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604707586/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708205","html_url":"https://github.com/apache/curator/issues/635#issuecomment-2604708205","issue_url":"https://api.github.com/repos/apache/curator/issues/635","id":2604708205,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgyMDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T04:06:57Z","updated_at":"2025-01-21T13:16:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11#discussion_r13898754\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11#discussion_r13898754</a></p>\n\n<p>    &#8212; Diff: curator-test/src/main/java/org/apache/curator/test/TestingServer.java &#8212;<br/>\n    @@ -37,47 +37,104 @@</p>\n\n<p> /**</p>\n<ul>\n\t<li>Create the server using a random port</li>\n</ul>\n<ul class=\"alternate\" type=\"square\">\n\t<li>*</li>\n\t<li>* @throws Exception errors<br/>\n    +     * <br/>\n    +     * @throws Exception<br/>\n    +     *     errors<br/>\n  */<br/>\n public TestingServer() throws Exception\n {\n    +this(true);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Create the server using a random port<br/>\n    +     * <br/>\n    +     * @param start<br/>\n    +     *    True if the server should be started, false otherwise<br/>\n    +     * @throws Exception<br/>\n    +     *     errors<br/>\n    +     */<br/>\n    +    public TestingServer(boolean start) throws Exception</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    start argument is not actually used. Is it meant to be?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708205/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705126","html_url":"https://github.com/apache/curator/issues/614#issuecomment-2604705126","issue_url":"https://api.github.com/repos/apache/curator/issues/614","id":2604705126,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDUxMjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T04:12:19Z","updated_at":"2025-01-21T13:14:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user cammckenzie opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-93\" title=\"Have TransactionCreateBuilder implement Compressible\" class=\"issue-link\" data-issue-key=\"CURATOR-93\"><del>CURATOR-93</del></a> - Added compress() option for transactions.</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/cammckenzie/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/cammckenzie/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-93\" title=\"Have TransactionCreateBuilder implement Compressible\" class=\"issue-link\" data-issue-key=\"CURATOR-93\"><del>CURATOR-93</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #12</p>\n\n<hr />\n<p>commit 30e66cfa3e8e7d09f553adbaa699edbd05993a4e<br/>\nAuthor: Cameron McKenzie <cameron@unico.com.au><br/>\nDate:   2014-06-18T01:28:23Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-93\" title=\"Have TransactionCreateBuilder implement Compressible\" class=\"issue-link\" data-issue-key=\"CURATOR-93\"><del>CURATOR-93</del></a> - Added compress() option for transactions.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708211","html_url":"https://github.com/apache/curator/issues/635#issuecomment-2604708211","issue_url":"https://api.github.com/repos/apache/curator/issues/635","id":2604708211,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgyMTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T04:15:34Z","updated_at":"2025-01-21T13:16:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11#discussion_r13898859\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11#discussion_r13898859</a></p>\n\n<p>    &#8212; Diff: curator-test/src/main/java/org/apache/curator/test/TestingServer.java &#8212;<br/>\n    @@ -37,47 +37,104 @@</p>\n\n<p> /**</p>\n<ul>\n\t<li>Create the server using a random port</li>\n</ul>\n<ul class=\"alternate\" type=\"square\">\n\t<li>*</li>\n\t<li>* @throws Exception errors<br/>\n    +     * <br/>\n    +     * @throws Exception<br/>\n    +     *     errors<br/>\n  */<br/>\n public TestingServer() throws Exception\n {\n    +this(true);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Create the server using a random port<br/>\n    +     * <br/>\n    +     * @param start<br/>\n    +     *    True if the server should be started, false otherwise<br/>\n    +     * @throws Exception<br/>\n    +     *     errors<br/>\n    +     */<br/>\n    +    public TestingServer(boolean start) throws Exception</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Good point, yes it should be passed into the other constructor, will fix this up now.</p>\n\n<p>    The start flag is not currently used in any of the unit tests, but I think that it's useful to be able to create a server without starting it. There are cases where you want to start with a server that is not started.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708211/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705131","html_url":"https://github.com/apache/curator/issues/614#issuecomment-2604705131","issue_url":"https://api.github.com/repos/apache/curator/issues/614","id":2604705131,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDUxMzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T15:32:14Z","updated_at":"2025-01-21T13:14:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user madrob commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12#discussion_r13921577\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12#discussion_r13921577</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CreateBuilderImpl.java &#8212;<br/>\n    @@ -87,16 +87,28 @@ TransactionCreateBuilder asTransactionCreateBuilder(final CuratorTransactionImpl<br/>\n     CreateBuilderImpl.this.withMode(mode);<br/>\n     return this;<br/>\n }<br/>\n    -<br/>\n    +    <br/>\n    +    @Override<br/>\n    +    public ACLPathAndBytesable<CuratorTransactionBridge> compressed()<br/>\n    +    </p>\n{\n    +CreateBuilderImpl.this.compressed();\n    +return this;\n    +    }\n<p>    +    <br/>\n @Override<br/>\n public CuratorTransactionBridge forPath(String path) throws Exception</p>\n {\n     return forPath(path, client.getDefaultData());\n    -    }\n<p>    +    }    <br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    nit: trailing whitespace</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705138","html_url":"https://github.com/apache/curator/issues/614#issuecomment-2604705138","issue_url":"https://api.github.com/repos/apache/curator/issues/614","id":2604705138,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDUxMzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T15:34:19Z","updated_at":"2025-01-21T13:14:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user madrob commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12#discussion_r13921732\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12#discussion_r13921732</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/test/java/org/apache/curator/framework/imps/TestCompressionInTransaction.java &#8212;<br/>\n    @@ -0,0 +1,61 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +package org.apache.curator.framework.imps;<br/>\n    +<br/>\n    +import org.apache.curator.test.BaseClassForTests;<br/>\n    +import org.apache.curator.utils.CloseableUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.CuratorFrameworkFactory;<br/>\n    +import org.apache.curator.framework.api.CompressionProvider;<br/>\n    +import org.apache.curator.retry.RetryOneTime;<br/>\n    +import org.testng.Assert;<br/>\n    +import org.testng.annotations.Test;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class TestCompressionInTransaction extends BaseClassForTests<br/>\n    +{<br/>\n    +    @Test<br/>\n    +    public void testSimple() throws Exception<br/>\n    +    {<br/>\n    +final String path1 = \"/a\";<br/>\n    +final String path2 = \"/a/b\";<br/>\n    +<br/>\n    +final byte[]    data1 = \"here's a string\".getBytes();<br/>\n    +final byte[]    data2 = \"here's another string\".getBytes();<br/>\n    +<br/>\n    +CuratorFrameworkclient = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));<br/>\n    +try<br/>\n    +{<br/>\n    +    client.start();<br/>\n    +<br/>\n    +    client.inTransaction().create().compressed().forPath(path1, data1).and().<br/>\n    +    create().compressed().forPath(path2, data2).and().commit();<br/>\n    +<br/>\n    +    Assert.assertNotEquals(data1, client.getData().forPath(path1));<br/>\n    +    Assert.assertEquals(data1.length, client.getData().decompressed().forPath(path1).length);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Why is this only asserting equal lengths instead of a strong assertion for equal content (after decompression?)</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705142","html_url":"https://github.com/apache/curator/issues/614#issuecomment-2604705142","issue_url":"https://api.github.com/repos/apache/curator/issues/614","id":2604705142,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDUxNDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T15:36:23Z","updated_at":"2025-01-21T13:14:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user madrob commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12#discussion_r13921881\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12#discussion_r13921881</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/api/transaction/TransactionCreateBuilder.java &#8212;<br/>\n    @@ -19,12 +19,15 @@<br/>\n     package org.apache.curator.framework.api.transaction;</p>\n\n<p>     import org.apache.curator.framework.api.ACLPathAndBytesable;<br/>\n    +import org.apache.curator.framework.api.Compressible;<br/>\n    +import org.apache.curator.framework.api.CreateBackgroundModeACLable;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    nit: unused import?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705142/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705146","html_url":"https://github.com/apache/curator/issues/614#issuecomment-2604705146","issue_url":"https://api.github.com/repos/apache/curator/issues/614","id":2604705146,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDUxNDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T15:38:00Z","updated_at":"2025-01-21T13:14:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user madrob commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12#discussion_r13922014\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12#discussion_r13922014</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/test/java/org/apache/curator/framework/imps/TestCompressionInTransaction.java &#8212;<br/>\n    @@ -0,0 +1,61 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +package org.apache.curator.framework.imps;<br/>\n    +<br/>\n    +import org.apache.curator.test.BaseClassForTests;<br/>\n    +import org.apache.curator.utils.CloseableUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.CuratorFrameworkFactory;<br/>\n    +import org.apache.curator.framework.api.CompressionProvider;<br/>\n    +import org.apache.curator.retry.RetryOneTime;<br/>\n    +import org.testng.Assert;<br/>\n    +import org.testng.annotations.Test;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class TestCompressionInTransaction extends BaseClassForTests<br/>\n    +{<br/>\n    +    @Test<br/>\n    +    public void testSimple() throws Exception<br/>\n    +    {<br/>\n    +final String path1 = \"/a\";<br/>\n    +final String path2 = \"/a/b\";<br/>\n    +<br/>\n    +final byte[]    data1 = \"here's a string\".getBytes();<br/>\n    +final byte[]    data2 = \"here's another string\".getBytes();<br/>\n    +<br/>\n    +CuratorFrameworkclient = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));<br/>\n    +try<br/>\n    +{<br/>\n    +    client.start();<br/>\n    +<br/>\n    +    client.inTransaction().create().compressed().forPath(path1, data1).and().<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Would be good to have a test case where the same client creates both compressed and uncompressed data.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705146/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708217","html_url":"https://github.com/apache/curator/issues/635#issuecomment-2604708217","issue_url":"https://api.github.com/repos/apache/curator/issues/635","id":2604708217,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgyMTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T16:59:16Z","updated_at":"2025-01-21T13:16:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/11\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/11</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708217/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/46463734","html_url":"https://github.com/apache/curator/pull/12#issuecomment-46463734","issue_url":"https://api.github.com/repos/apache/curator/issues/12","id":46463734,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2NDYzNzM0","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T17:03:12Z","updated_at":"2014-06-18T17:03:12Z","author_association":"MEMBER","body":"TransactionSetDataBuilder will need to support compressible too - from client.inTransaction().setData()\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/46463734/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705152","html_url":"https://github.com/apache/curator/issues/614#issuecomment-2604705152","issue_url":"https://api.github.com/repos/apache/curator/issues/614","id":2604705152,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDUxNTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T17:03:13Z","updated_at":"2025-01-21T13:14:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12#issuecomment-46463734\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12#issuecomment-46463734</a></p>\n\n<p>    TransactionSetDataBuilder will need to support compressible too - from client.inTransaction().setData()</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705154","html_url":"https://github.com/apache/curator/issues/614#issuecomment-2604705154","issue_url":"https://api.github.com/repos/apache/curator/issues/614","id":2604705154,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDUxNTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-18T21:29:50Z","updated_at":"2025-01-21T13:14:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12#discussion_r13941619\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12#discussion_r13941619</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/test/java/org/apache/curator/framework/imps/TestCompressionInTransaction.java &#8212;<br/>\n    @@ -0,0 +1,61 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +package org.apache.curator.framework.imps;<br/>\n    +<br/>\n    +import org.apache.curator.test.BaseClassForTests;<br/>\n    +import org.apache.curator.utils.CloseableUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.CuratorFrameworkFactory;<br/>\n    +import org.apache.curator.framework.api.CompressionProvider;<br/>\n    +import org.apache.curator.retry.RetryOneTime;<br/>\n    +import org.testng.Assert;<br/>\n    +import org.testng.annotations.Test;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class TestCompressionInTransaction extends BaseClassForTests<br/>\n    +{<br/>\n    +    @Test<br/>\n    +    public void testSimple() throws Exception<br/>\n    +    {<br/>\n    +final String path1 = \"/a\";<br/>\n    +final String path2 = \"/a/b\";<br/>\n    +<br/>\n    +final byte[]    data1 = \"here's a string\".getBytes();<br/>\n    +final byte[]    data2 = \"here's another string\".getBytes();<br/>\n    +<br/>\n    +CuratorFrameworkclient = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));<br/>\n    +try<br/>\n    +{<br/>\n    +    client.start();<br/>\n    +<br/>\n    +    client.inTransaction().create().compressed().forPath(path1, data1).and().<br/>\n    +    create().compressed().forPath(path2, data2).and().commit();<br/>\n    +<br/>\n    +    Assert.assertNotEquals(data1, client.getData().forPath(path1));<br/>\n    +    Assert.assertEquals(data1.length, client.getData().decompressed().forPath(path1).length);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Good question, I just copied this test from the other non transactional compression tests and modified to be in a transaction. I will update to compare the actual data.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708336","html_url":"https://github.com/apache/curator/issues/636#issuecomment-2604708336","issue_url":"https://api.github.com/repos/apache/curator/issues/636","id":2604708336,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgzMzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-19T01:12:51Z","updated_at":"2025-01-21T13:16:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>Pretty sure this is occurring because the sortChildren() method does a comparison using the current time which will change as the sort is occurring. This means that it will be possible for the Comparator implementation to break it's transitivity contract (i.e If A > B and B > C then A > C). I haven't managed to reproduce the problem though, so I can't confirm that this is indeed the issue. If it is, determining the current time at the start of the sort and then using that for all comparisons should fix it.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708336/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708342","html_url":"https://github.com/apache/curator/issues/636#issuecomment-2604708342","issue_url":"https://api.github.com/repos/apache/curator/issues/636","id":2604708342,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgzNDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-19T04:09:36Z","updated_at":"2025-01-21T13:16:08Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>Also seems likely that this has not been noticed before because Curator is built against Java 6, and the TimSort implementation of Collections.sort() didn't come in until Java 7 (I think). So, this would not be an issue. As a work around, you can set the java.util.Arrays.useLegacyMergeSort system property to \"true\", and it will use a merge sort which silently ignores these inconsistencies.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708342/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705159","html_url":"https://github.com/apache/curator/issues/614#issuecomment-2604705159","issue_url":"https://api.github.com/repos/apache/curator/issues/614","id":2604705159,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDUxNTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-20T14:09:51Z","updated_at":"2025-01-21T13:14:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/12\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/12</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604705159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708348","html_url":"https://github.com/apache/curator/issues/636#issuecomment-2604708348","issue_url":"https://api.github.com/repos/apache/curator/issues/636","id":2604708348,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDgzNDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-23T18:53:23Z","updated_at":"2025-01-21T13:16:08Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=khiemu@googlemail.com\">khiemu@googlemail.com</a>:</i>\n<p>thanx for the hint, i'll try the useLegacyMergeSort() and see if it happens</p>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708348/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708500","html_url":"https://github.com/apache/curator/issues/637#issuecomment-2604708500","issue_url":"https://api.github.com/repos/apache/curator/issues/637","id":2604708500,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg1MDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-25T05:27:38Z","updated_at":"2025-01-21T13:16:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user cammckenzie opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/13\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/13</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-116\" title=\"Ordering of delayed distributed queue is inconsistent\" class=\"issue-link\" data-issue-key=\"CURATOR-116\"><del>CURATOR-116</del></a> - Modified sorting of children to be deterministic.</p>\n\n<p>    Modified sorting of children to be deterministic.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/cammckenzie/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/cammckenzie/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-116\" title=\"Ordering of delayed distributed queue is inconsistent\" class=\"issue-link\" data-issue-key=\"CURATOR-116\"><del>CURATOR-116</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/13.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/13.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #13</p>\n\n<hr />\n<p>commit 1103f476d84a53784377a96f8661bd9219e7412d<br/>\nAuthor: Cameron McKenzie <cameron@unico.com.au><br/>\nDate:   2014-06-25T01:53:00Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-116\" title=\"Ordering of delayed distributed queue is inconsistent\" class=\"issue-link\" data-issue-key=\"CURATOR-116\"><del>CURATOR-116</del></a> - Modified sorting of children to be deterministic.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708500/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708505","html_url":"https://github.com/apache/curator/issues/637#issuecomment-2604708505","issue_url":"https://api.github.com/repos/apache/curator/issues/637","id":2604708505,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg1MDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-06-25T13:41:16Z","updated_at":"2025-01-21T13:16:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/13#discussion_r14185554\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/13#discussion_r14185554</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/queue/DistributedDelayQueue.java &#8212;<br/>\n    @@ -77,14 +77,22 @@<br/>\n finalFlushMs<br/>\n     )<br/>\n     {<br/>\n    +    @Override<br/>\n protected long getDelay(String itemNode)</p>\n {\n    +return getDelay(itemNode, System.currentTimeMillis());\n    +    }\n<p>    +    <br/>\n    +    protected long getDelay(String itemNode, long sortTime)<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This can be private, right?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708505/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708510","html_url":"https://github.com/apache/curator/issues/637#issuecomment-2604708510","issue_url":"https://api.github.com/repos/apache/curator/issues/637","id":2604708510,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg1MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-08T01:26:27Z","updated_at":"2025-01-21T13:16:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/13\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/13</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708510/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708653","html_url":"https://github.com/apache/curator/issues/638#issuecomment-2604708653","issue_url":"https://api.github.com/repos/apache/curator/issues/638","id":2604708653,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg2NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-08T15:06:13Z","updated_at":"2025-01-21T13:16:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stevel@apache.org\">stevel@apache.org</a>:</i>\n<p>Stack</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"><span class=\"code-quote\">\"main\"</span> prio=5 tid=0x00007fcd5b017800 nid=0x1903 waiting on condition [0x000000010c8ff000]\n   java.lang.<span class=\"code-object\">Thread</span>.State: WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\t- parking to wait <span class=\"code-keyword\">for</span>  <0x00000007ec01ab90> (a java.util.concurrent.CountDownLatch$Sync)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:994)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1303)\n\tat java.util.concurrent.CountDownLatch.await(CountDownLatch.java:236)\n\tat org.apache.curator.test.TestingZooKeeperMain.blockUntilStarted(TestingZooKeeperMain.java:81)\n\tat org.apache.curator.test.TestingZooKeeperServer.start(TestingZooKeeperServer.java:144)\n\tat org.apache.curator.test.TestingServer.<init>(TestingServer.java:75)\n\tat org.apache.curator.test.TestingServer.<init>(TestingServer.java:68)\n\tat org.apache.hadoop.yarn.registry.AbstractZKRegistryTest.createZKServer(AbstractZKRegistryTest.java:51)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.jav\n</pre>\n</div></div>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708653/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708659","html_url":"https://github.com/apache/curator/issues/638#issuecomment-2604708659","issue_url":"https://api.github.com/repos/apache/curator/issues/638","id":2604708659,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg2NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-08T15:07:37Z","updated_at":"2025-01-21T13:16:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stevel@apache.org\">stevel@apache.org</a>:</i>\n<p>This could be done with the countdown latch waiting for a time period, but better may be for the ZK startup thread to signal the service as started even when it throws an exception -and then for <tt>TestingServer.start()</tt> to pick that up and relay it to the JUnit thread.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708659/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708798","html_url":"https://github.com/apache/curator/issues/639#issuecomment-2604708798","issue_url":"https://api.github.com/repos/apache/curator/issues/639","id":2604708798,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg3OTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-09T15:54:36Z","updated_at":"2025-01-21T13:16:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user madrob opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/14\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/14</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-118\" title=\"Streamline release process by adding configuration to the pom\" class=\"issue-link\" data-issue-key=\"CURATOR-118\"><del>CURATOR-118</del></a> Add config to release plugin</p>\n\n<p>    Auto-version submodules because they should all be the same version.<br/>\n    Add tag template to match the existing precedent.<br/>\n    Don't push tag until it's been voted on.<br/>\n    Use local checkout to save on bandwidth.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/madrob/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/madrob/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-118\" title=\"Streamline release process by adding configuration to the pom\" class=\"issue-link\" data-issue-key=\"CURATOR-118\"><del>CURATOR-118</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/14.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/14.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #14</p>\n\n<hr />\n<p>commit 6e184ca00c3f5600b7130a2a9b47834e4025ef3f<br/>\nAuthor: Mike Drob <mdrob@cloudera.com><br/>\nDate:   2014-07-09T15:52:41Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-118\" title=\"Streamline release process by adding configuration to the pom\" class=\"issue-link\" data-issue-key=\"CURATOR-118\"><del>CURATOR-118</del></a> Add config to release plugin</p>\n\n<p>    Auto-version submodules because they should all be the same version.<br/>\n    Add tag template to match the existing precedent.<br/>\n    Don't push tag until it's been voted on.<br/>\n    Use local checkout to save on bandwidth.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708798/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708927","html_url":"https://github.com/apache/curator/issues/640#issuecomment-2604708927","issue_url":"https://api.github.com/repos/apache/curator/issues/640","id":2604708927,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg5Mjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-09T16:07:37Z","updated_at":"2025-01-21T13:16:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user madrob opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/15\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/15</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-119\" title=\"Remove explicit year from Appendix in LICENSE files\" class=\"issue-link\" data-issue-key=\"CURATOR-119\"><del>CURATOR-119</del></a> Match LICENSE file to ASF 'Gold Copy'</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/madrob/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/madrob/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-119\" title=\"Remove explicit year from Appendix in LICENSE files\" class=\"issue-link\" data-issue-key=\"CURATOR-119\"><del>CURATOR-119</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/15.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/15.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #15</p>\n\n<hr />\n<p>commit 65d0fcff29948a2c182d559e26c29eb8f8f62f90<br/>\nAuthor: Mike Drob <mdrob@cloudera.com><br/>\nDate:   2014-07-09T16:06:58Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-119\" title=\"Remove explicit year from Appendix in LICENSE files\" class=\"issue-link\" data-issue-key=\"CURATOR-119\"><del>CURATOR-119</del></a> Match LICENSE file to ASF 'Gold Copy'</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709073","html_url":"https://github.com/apache/curator/issues/641#issuecomment-2604709073","issue_url":"https://api.github.com/repos/apache/curator/issues/641","id":2604709073,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkwNzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-09T21:23:32Z","updated_at":"2025-01-21T13:16:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user dragonsinth opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/16\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/16</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-120\" title=\"NodeCache and PathChildrenCache should not perform writes\" class=\"issue-link\" data-issue-key=\"CURATOR-120\"><del>CURATOR-120</del></a> NodeCache and PathChildrenCache should not write</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/dragonsinth/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/dragonsinth/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-120\" title=\"NodeCache and PathChildrenCache should not perform writes\" class=\"issue-link\" data-issue-key=\"CURATOR-120\"><del>CURATOR-120</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/16.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/16.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #16</p>\n\n<hr />\n<p>commit 32becac079d2acbaef58faea8447e7fdd66fd565<br/>\nAuthor: Scott Blum <scottb@squareup.com><br/>\nDate:   2014-07-09T21:22:01Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-120\" title=\"NodeCache and PathChildrenCache should not perform writes\" class=\"issue-link\" data-issue-key=\"CURATOR-120\"><del>CURATOR-120</del></a> NodeCache and PathChildrenCache should not write</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709073/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708936","html_url":"https://github.com/apache/curator/issues/640#issuecomment-2604708936","issue_url":"https://api.github.com/repos/apache/curator/issues/640","id":2604708936,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg5MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-09T21:25:21Z","updated_at":"2025-01-21T13:16:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/15#issuecomment-48536327\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/15#issuecomment-48536327</a></p>\n\n<p>    By the way, I think this also addresses one of the issues raised in <a href=\"https://issues.apache.org/jira/browse/CURATOR-4\" title=\"POST_INITIALIZED_EVENT race conditions / optimizations\" class=\"issue-link\" data-issue-key=\"CURATOR-4\">CURATOR-4</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708936/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/48536371","html_url":"https://github.com/apache/curator/pull/16#issuecomment-48536371","issue_url":"https://api.github.com/repos/apache/curator/issues/16","id":48536371,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NTM2Mzcx","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-09T21:25:36Z","updated_at":"2014-07-09T21:25:36Z","author_association":"CONTRIBUTOR","body":"By the way, I think this also addresses one of the issues raised in CURATOR-4\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/48536371/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709081","html_url":"https://github.com/apache/curator/issues/641#issuecomment-2604709081","issue_url":"https://api.github.com/repos/apache/curator/issues/641","id":2604709081,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkwODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-09T21:25:39Z","updated_at":"2025-01-21T13:16:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/16#issuecomment-48536371\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/16#issuecomment-48536371</a></p>\n\n<p>    By the way, I think this also addresses one of the issues raised in <a href=\"https://issues.apache.org/jira/browse/CURATOR-4\" title=\"POST_INITIALIZED_EVENT race conditions / optimizations\" class=\"issue-link\" data-issue-key=\"CURATOR-4\">CURATOR-4</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695384","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695384","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695384,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTUzODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-09T23:59:41Z","updated_at":"2025-01-21T13:10:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Is the attached patch representative of the work that's been done on this?  I downloaded it, removed all the extraneous reformats, rebased against master, and there's just not all that much there in the live code.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695384/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695389","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695389","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695389,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTUzODk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T00:03:15Z","updated_at":"2025-01-21T13:10:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Rebased patch, removed extraneous format changes.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695395","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695395","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695395,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTUzOTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T00:05:30Z","updated_at":"2025-01-21T13:10:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>I think a pretty significant amount of rework would be needed to make this go.  A lot of the internals w.r.t. how the cache data is kept, the initial set, etc, would need some rework.</p>\n\n<p>After playing with it for an hour, I'm inclined to think building a new class (TreeCache?) would be a much better way to go instead of trying to jam both behaviors into the same class.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695399","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695399","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695399,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTUzOTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T00:06:49Z","updated_at":"2025-01-21T13:10:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>That was my thought all along. A new recipe is better. However, <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\" class=\"user-hover\" rel=\"cammckenzie\">Cam McKenzie</a> is now a committer! So, he might have something to say.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695399/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695403","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695403","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695403,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T00:06:57Z","updated_at":"2025-01-21T13:10:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>The patch was definitely functional when I wrote it! It just needed some more unit tests I believe. I haven't had a chance to get back to it, was hoping to do so shortly, but if you're planning on picking it up then I'm more than happy for you to do so.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695403/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695408","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695408","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695408,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T00:17:48Z","updated_at":"2025-01-21T13:10:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>Nope, I'm happy for it to be moved to a new recipe, I think it would be cleaner. There's the possibility of a shared base class for some stuff perhaps, I'm not sure without some investigation. <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\" class=\"user-hover\" rel=\"dragonsinth\">Scott Blum</a>, are you interested in looking into this? If not, I will try and get something going.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695408/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695417","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695417","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695417,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T00:22:54Z","updated_at":"2025-01-21T13:10:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>It's possible I'm missing something serious, but in the copy of the patch I got, the new \"rebuild(String root)\" is not being called anywhere, and refresh is only getting called on the root path.</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>I don't see where child watches are getting setup on anything other than the root node; you'd need to add a child watch to every node in the entire tree.  testCacheWholeTree() is failing because it never gets a creation event for any nested subnodes, which is as I would expect due to not setting up child listeners on children.</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>I would expect that RefreshOperation would need a new \"path\" field to say what part of the tree needs to be refreshed when some subnode changes.</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>processChildren() would need some serious kung-fu to handle currentData updates on subnodes.  For example, if you got an update that node \"test/1\" has a child \"2\", the current code would remove all data for all nodes in the entire tree except for \"test/1/2\"; it needs to remove only children of \"test/1\".  This would be inefficient given that currentData is a flat hashmap rather than a tree-like structure where an entire subtree could be pruned in one go.</li>\n</ul>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695418","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695418","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695418,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T00:29:49Z","updated_at":"2025-01-21T13:10:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>Maybe something went missing when applying the patch? The testCacheWholeTree works ok on my local branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695419","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695419","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695419,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T01:46:05Z","updated_at":"2025-01-21T13:10:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Could be!  Do you have an updated patch against a current master?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695419/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695423","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695423","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695423,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T01:50:39Z","updated_at":"2025-01-21T13:10:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>You could clone my github repo</p>\n\n<p><a href=\"https://github.com/cammckenzie/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/cammckenzie/curator</a></p>\n\n<p>The <a href=\"https://issues.apache.org/jira/browse/CURATOR-33\" title=\"Recursive Node Cache\" class=\"issue-link\" data-issue-key=\"CURATOR-33\"><del>CURATOR-33</del></a> branch has the latest (as of about a week ago) master merged against it. I haven't tested it really since merging, but the unit tests are all passing.</p>\n\n<p>Your comments about performance are probably quite legitimate though, I hadn't really put much thought into that side of things.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695430","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695430","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695430,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T01:59:50Z","updated_at":"2025-01-21T13:10:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Thanks, I do see some things in there that look different from what I'd downloaded.  Hard to tell though with all the formatting diffs!  If you're still working on this, I won't jump on it.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695430/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695434","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695434","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695434,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T02:30:57Z","updated_at":"2025-01-21T13:10:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>Up to you, I'm more than happy for you to have a crack at it if you're interested, but if you're not going to have time, then I'll look into it.</p>\n\n<p>I agree with your assessment that it should probably be a separate recipe though. My implementation went for the approach with the least code changes, but it would be rather inefficient with large caches as any time the children of any zNode changes, the whole map is refreshed.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695434/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695436","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695436","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695436,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T07:03:25Z","updated_at":"2025-01-21T13:10:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Alright, we have a hack week coming up, and I want to write a ZK -> filesystem mirror, which needs this. <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/>  So I'll definitely take a crack at it then.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695436/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709088","html_url":"https://github.com/apache/curator/issues/641#issuecomment-2604709088","issue_url":"https://api.github.com/repos/apache/curator/issues/641","id":2604709088,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkwODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T17:23:56Z","updated_at":"2025-01-21T13:16:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>It goes somewhat against the grain of Curator. All of the Curator recipes use EnsurePath (or equivalent) internally. I'll look at the PR, but if anything this should be optional behavior.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709088/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709094","html_url":"https://github.com/apache/curator/issues/641#issuecomment-2604709094","issue_url":"https://api.github.com/repos/apache/curator/issues/641","id":2604709094,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkwOTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T17:39:15Z","updated_at":"2025-01-21T13:16:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Ah, rats.  We're somewhat new to Curator.  My team is trying to switch all/most of our ZK related code over to Curator and push for internal adoption, and this was a blocker for another team.  They want their observers to be truly read-only and not push any writes into ZK at all, and they want to be able to watch a non-existent tree and get notified when it comes into existence.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709094/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/48638061","html_url":"https://github.com/apache/curator/pull/16#issuecomment-48638061","issue_url":"https://api.github.com/repos/apache/curator/issues/16","id":48638061,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NjM4MDYx","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T17:39:30Z","updated_at":"2014-07-10T17:39:30Z","author_association":"CONTRIBUTOR","body":"https://issues.apache.org/jira/browse/CURATOR-120\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/48638061/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709100","html_url":"https://github.com/apache/curator/issues/641#issuecomment-2604709100","issue_url":"https://api.github.com/repos/apache/curator/issues/641","id":2604709100,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkxMDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T17:39:32Z","updated_at":"2025-01-21T13:16:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/16#issuecomment-48638061\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/16#issuecomment-48638061</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-120\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/CURATOR-120</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709100/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709104","html_url":"https://github.com/apache/curator/issues/641#issuecomment-2604709104","issue_url":"https://api.github.com/repos/apache/curator/issues/641","id":2604709104,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkxMDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T17:39:45Z","updated_at":"2025-01-21T13:16:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>BTW - you can get the behavior you want by wrapping the CuratorFramework instance and returning a stub for EnsurePath. Internally, client.newNamespaceAwareEnsurePath() is called.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709104/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709109","html_url":"https://github.com/apache/curator/issues/641#issuecomment-2604709109","issue_url":"https://api.github.com/repos/apache/curator/issues/641","id":2604709109,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkxMDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T17:42:22Z","updated_at":"2025-01-21T13:16:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>I think either wrapping CuratorFramework or just making it optional would work for everyone. Add a new constructor that takes a boolean ensurePath or something like that.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709115","html_url":"https://github.com/apache/curator/issues/641#issuecomment-2604709115","issue_url":"https://api.github.com/repos/apache/curator/issues/641","id":2604709115,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkxMTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-10T22:25:32Z","updated_at":"2025-01-21T13:16:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>I think I may need to just abandon this effort then.  Supporting both modes increases the testing burden and the number of states the caches can be in.  PathChildrenCache in particular already has a ton of constructor arguments, I don't really want to make it worse.</p>\n\n<p>So maybe I'll just work on TreeCache as a new thing and have it not autocreate the root node.  It's simple enough for any clients to manually ensure the node while constructing the recipe.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709115/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695444","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695444","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695444,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0NDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T07:08:30Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user dragonsinth opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-33\" title=\"Recursive Node Cache\" class=\"issue-link\" data-issue-key=\"CURATOR-33\"><del>CURATOR-33</del></a> recursive TreeCache recipe</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/dragonsinth/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/dragonsinth/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-33\" title=\"Recursive Node Cache\" class=\"issue-link\" data-issue-key=\"CURATOR-33\"><del>CURATOR-33</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #17</p>\n\n<hr />\n<p>commit 547a7e23eb48fece49420bbcfdc84e763bf74461<br/>\nAuthor: Scott Blum <scottb@squareup.com><br/>\nDate:   2014-07-15T00:38:07Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-33\" title=\"Recursive Node Cache\" class=\"issue-link\" data-issue-key=\"CURATOR-33\"><del>CURATOR-33</del></a> recursive TreeCache recipe</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695444/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49401772","html_url":"https://github.com/apache/curator/pull/17#issuecomment-49401772","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":49401772,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NDAxNzcy","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T07:10:53Z","updated_at":"2014-07-18T07:10:53Z","author_association":"CONTRIBUTOR","body":"CC: @cconroy @jhump\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49401772/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695450","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695450","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695450,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T07:10:55Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-49401772\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-49401772</a></p>\n\n<p>    CC: @cconroy @jhump</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695450/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695455","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695455","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695455,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T10:20:43Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ericzundel commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15104749\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15104749</a></p>\n\n<p>    &#8212; Diff: curator-client/src/main/java/org/apache/curator/utils/ZKPaths.java &#8212;<br/>\n    @@ -112,6 +113,34 @@ public static PathAndNode getPathAndNode(String path)<br/>\n }</p>\n\n<p> /**<br/>\n    +     * Given a full path, return the the individual parts, without slashes.<br/>\n    +     * The root path will return an empty list.<br/>\n    +     *<br/>\n    +     * @param path the path<br/>\n    +     * @return an array of parts<br/>\n    +     */<br/>\n    +    public static List<String> split(String path)<br/>\n    +    {<br/>\n    +PathUtils.validatePath(path);<br/>\n    +if (path.length() == 1) </p>\n{\n    +    return Collections.emptyList();\n    +}\n<p>    +int lastPos = 1;<br/>\n    +List<String> parts = new ArrayList<String>();<br/>\n    +while (true)<br/>\n    +{<br/>\n    +    int nextPos = path.indexOf('/', lastPos);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Do you want to use file.separator system property (or File.separatorChar)  </p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695455/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695459","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695459","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695459,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:30:26Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cconroy commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15123089\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15123089</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I know this comment comes form path and node cache, but I find it very unhelpful. I think it would be more clear to note that a sequence of updates to any two nodes may be delivered in any sequence by the cache. </p>\n\n<p>    But, it also seems like we should be able to offer a much stronger consistency guarantee. Watches are guaranteed to fire in order from the ZK protocol level, and therefore we should be able to give consistent delivery of e.g. a recursive delete bottom up, tree creation top-down, etc. TreeCache is potentially in a much better position to do this since it need not segment the listener for each path into its own single threaded executor. </p>\n\n<p>    The only major caveat I see here is on a disconnect/reconnect case where we have to re-read the tree, but the events could still be synthesized in correct tree order for add/remove.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695459/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695465","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695465","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695465,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:37:25Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cconroy commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15123604\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15123604</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    s/sorted order/sorted by the child names/</p>\n\n<p>    I'm trying to think of how to use this method, and it seems a bit dicey: I can't get the children and then reliably do much with it since they could get removed, added, updated, etc. behind me. In my initializing path cache I have a notion of the `currentEventData` which is the state of the cache up to the last processed event. By running this method on the single watcher thread, I can guarantee consistency between the cache and my listeners. We could do something similar here and/or expose a copy subtree operation which gives you a snapshot of that tree segment consistent with the event processing.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695465/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695470","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695470","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695470,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0NzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:40:49Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cconroy commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15123789\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15123789</a></p>\n\n<p>    &#8212; Diff: curator-client/src/main/java/org/apache/curator/utils/ZKPaths.java &#8212;<br/>\n    @@ -112,6 +113,34 @@ public static PathAndNode getPathAndNode(String path)<br/>\n }</p>\n\n<p> /**<br/>\n    +     * Given a full path, return the the individual parts, without slashes.<br/>\n    +     * The root path will return an empty list.<br/>\n    +     *<br/>\n    +     * @param path the path<br/>\n    +     * @return an array of parts<br/>\n    +     */<br/>\n    +    public static List<String> split(String path)<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    this looks fine, but use a guava splitter instead?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695470/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49459230","html_url":"https://github.com/apache/curator/pull/17#issuecomment-49459230","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":49459230,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NDU5MjMw","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:42:48Z","updated_at":"2014-07-18T17:42:48Z","author_association":"CONTRIBUTOR","body":"https://issues.apache.org/jira/browse/CURATOR-33\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49459230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695472","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695472","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695472,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:42:50Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-49459230\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-49459230</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-33\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/CURATOR-33</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695472/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695476","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695476","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695476,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0NzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:44:50Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cconroy commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15124028\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15124028</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCacheEvent.java &#8212;<br/>\n    @@ -0,0 +1,126 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +/**<br/>\n    + * POJO that abstracts a change to a path<br/>\n    + */<br/>\n    +public class TreeCacheEvent<br/>\n    +{<br/>\n    +    private final Type type;<br/>\n    +    private final ChildData data;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Type of change<br/>\n    +     */<br/>\n    +    public enum Type<br/>\n    +    {<br/>\n    +/**<br/>\n    + * A node was added.<br/>\n    + */<br/>\n    +NODE_ADDED,<br/>\n    +<br/>\n    +/**<br/>\n    + * A node's data was changed<br/>\n    + */<br/>\n    +NODE_UPDATED,<br/>\n    +<br/>\n    +/**<br/>\n    + * A node was removed from the tree<br/>\n    + */<br/>\n    +NODE_REMOVED,<br/>\n    +<br/>\n    +/**<br/>\n    + * Called when the connection has changed to </p>\n{@link org.apache.curator.framework.state.ConnectionState#SUSPENDED}\n<p>    + * <p/><br/>\n    + * This is exposed so that users of the class can be notified of issues that <b>might</b> affect normal operation.<br/>\n    + * The TreeCache is written such that listeners are not expected to do anything special on this<br/>\n    + * event, except for those people who want to cause some application-specific logic to fire when this occurs.<br/>\n    + * While the connection is down, the TreeCache will continue to have its state from before it lost<br/>\n    + * the connection and after the connection is restored, the TreeCache will emit normal child events<br/>\n    + * for all of the adds, deletes and updates that happened during the time that it was disconnected.<br/>\n    + */<br/>\n    +CONNECTION_SUSPENDED,<br/>\n    +<br/>\n    +/**<br/>\n    + * Called when the connection has changed to </p>\n{@link org.apache.curator.framework.state.ConnectionState#RECONNECTED}\n<p>    + * <p/><br/>\n    + * This is exposed so that users of the class can be notified of issues that <b>might</b> affect normal operation.<br/>\n    + * The TreeCache is written such that listeners are not expected to do anything special on this<br/>\n    + * event, except for those people who want to cause some application-specific logic to fire when this occurs.<br/>\n    + * While the connection is down, the TreeCache will continue to have its state from before it lost<br/>\n    + * the connection and after the connection is restored, the TreeCache will emit normal child events<br/>\n    + * for all of the adds, deletes and updates that happened during the time that it was disconnected.<br/>\n    + */<br/>\n    +CONNECTION_RECONNECTED,<br/>\n    +<br/>\n    +/**<br/>\n    + * Called when the connection has changed to </p>\n{@link org.apache.curator.framework.state.ConnectionState#LOST}\n<p>    + * <p/><br/>\n    + * This is exposed so that users of the class can be notified of issues that <b>might</b> affect normal operation.<br/>\n    + * The TreeCache is written such that listeners are not expected to do anything special on this<br/>\n    + * event, except for those people who want to cause some application-specific logic to fire when this occurs.<br/>\n    + * While the connection is down, the TreeCache will continue to have its state from before it lost<br/>\n    + * the connection and after the connection is restored, the TreeCache will emit normal child events<br/>\n    + * for all of the adds, deletes and updates that happened during the time that it was disconnected.<br/>\n    + */<br/>\n    +CONNECTION_LOST,<br/>\n    +<br/>\n    +/**<br/>\n    + * Posted when the initial cache has been populated.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    is this the same behavior as the `PathChildrenCache` (e.g. events fire during initialization, and then initialization marks that the tree has been built?)</p>\n\n<p>    I can see arguments for structuring this both ways, but it's easy enough to compose the path children cache kind of behavior if you need to just block for the initialized event. In either case, I think the doc should be more clear about what's going on here. (And in `PathChildrenCache`)</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695476/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695482","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695482","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695482,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0ODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:45:33Z","updated_at":"2025-01-21T13:10:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15124056\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15124056</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yeah, I especially wanted feedback on the data access.  I could return a `SortedMap<String, ChildData>` here, that would be more useful right?</p>\n\n<p>    In general trying to snapshot any particular point in time is kind of dicey.  I wouldn't want to block updates coming in waiting on a lock; and the only other real option is to make the entire tree COW which seems kind of overkill.</p>\n\n<p>    That said I could add an accessor to pull an entire subtree, in simple map from fullPath -> data.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695482/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695488","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695488","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695488,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:46:31Z","updated_at":"2025-01-21T13:10:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15124118\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15124118</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    They actually do wind up in correct up-to-down order on a re-sync.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695488/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695495","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695495","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695495,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU0OTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T17:47:36Z","updated_at":"2025-01-21T13:10:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15124193\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15124193</a></p>\n\n<p>    &#8212; Diff: curator-client/src/main/java/org/apache/curator/utils/ZKPaths.java &#8212;<br/>\n    @@ -112,6 +113,34 @@ public static PathAndNode getPathAndNode(String path)<br/>\n }</p>\n\n<p> /**<br/>\n    +     * Given a full path, return the the individual parts, without slashes.<br/>\n    +     * The root path will return an empty list.<br/>\n    +     *<br/>\n    +     * @param path the path<br/>\n    +     * @return an array of parts<br/>\n    +     */<br/>\n    +    public static List<String> split(String path)<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will look at that</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695495/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695501","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695501","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695501,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T18:50:04Z","updated_at":"2025-01-21T13:10:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cconroy commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15127380\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15127380</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Worth doing more than just tree-order on re-sync but also giving zkId order? Probably not since I can think of edge cases where interleaved creations and deletions would cause pure mzkid ordering to conflict with tree order...</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695510","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695510","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695510,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T18:52:05Z","updated_at":"2025-01-21T13:10:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cconroy commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15127457\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15127457</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think it depends on the use case, but you already have to potentially endure delayed updates due to connection issues. </p>\n\n<p>    Keep in mind that one of the motivating issues for the tree cache is that doing the consistency dance amongst multiple path and node caches is difficult. </p>\n\n<p>    Otherwise, it would be equivalent to just wrapping the existing path children cache and create child path caches when children are added, etc..</p>\n\n<p>    Having e.g. a child update event only to find its parent removed when you go to read data seems like something most clients would rather not have to deal with. </p>\n\n<p>    We probably want to expose both a fast lock-free inconsistent read API, and a slower consistent one that executes on the background executor. (I currently do this in a hacky way with the `PathChildrenCache` by not using the default executor service and abusing the one I pass in for this purpose)</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695510/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695513","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695513","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695513,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1MTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T18:52:47Z","updated_at":"2025-01-21T13:10:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15127479\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15127479</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCacheEvent.java &#8212;<br/>\n    @@ -0,0 +1,126 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +/**<br/>\n    + * POJO that abstracts a change to a path<br/>\n    + */<br/>\n    +public class TreeCacheEvent<br/>\n    +{<br/>\n    +    private final Type type;<br/>\n    +    private final ChildData data;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Type of change<br/>\n    +     */<br/>\n    +    public enum Type<br/>\n    +    {<br/>\n    +/**<br/>\n    + * A node was added.<br/>\n    + */<br/>\n    +NODE_ADDED,<br/>\n    +<br/>\n    +/**<br/>\n    + * A node's data was changed<br/>\n    + */<br/>\n    +NODE_UPDATED,<br/>\n    +<br/>\n    +/**<br/>\n    + * A node was removed from the tree<br/>\n    + */<br/>\n    +NODE_REMOVED,<br/>\n    +<br/>\n    +/**<br/>\n    + * Called when the connection has changed to </p>\n{@link org.apache.curator.framework.state.ConnectionState#SUSPENDED}\n<p>    + * <p/><br/>\n    + * This is exposed so that users of the class can be notified of issues that <b>might</b> affect normal operation.<br/>\n    + * The TreeCache is written such that listeners are not expected to do anything special on this<br/>\n    + * event, except for those people who want to cause some application-specific logic to fire when this occurs.<br/>\n    + * While the connection is down, the TreeCache will continue to have its state from before it lost<br/>\n    + * the connection and after the connection is restored, the TreeCache will emit normal child events<br/>\n    + * for all of the adds, deletes and updates that happened during the time that it was disconnected.<br/>\n    + */<br/>\n    +CONNECTION_SUSPENDED,<br/>\n    +<br/>\n    +/**<br/>\n    + * Called when the connection has changed to </p>\n{@link org.apache.curator.framework.state.ConnectionState#RECONNECTED}\n<p>    + * <p/><br/>\n    + * This is exposed so that users of the class can be notified of issues that <b>might</b> affect normal operation.<br/>\n    + * The TreeCache is written such that listeners are not expected to do anything special on this<br/>\n    + * event, except for those people who want to cause some application-specific logic to fire when this occurs.<br/>\n    + * While the connection is down, the TreeCache will continue to have its state from before it lost<br/>\n    + * the connection and after the connection is restored, the TreeCache will emit normal child events<br/>\n    + * for all of the adds, deletes and updates that happened during the time that it was disconnected.<br/>\n    + */<br/>\n    +CONNECTION_RECONNECTED,<br/>\n    +<br/>\n    +/**<br/>\n    + * Called when the connection has changed to </p>\n{@link org.apache.curator.framework.state.ConnectionState#LOST}\n<p>    + * <p/><br/>\n    + * This is exposed so that users of the class can be notified of issues that <b>might</b> affect normal operation.<br/>\n    + * The TreeCache is written such that listeners are not expected to do anything special on this<br/>\n    + * event, except for those people who want to cause some application-specific logic to fire when this occurs.<br/>\n    + * While the connection is down, the TreeCache will continue to have its state from before it lost<br/>\n    + * the connection and after the connection is restored, the TreeCache will emit normal child events<br/>\n    + * for all of the adds, deletes and updates that happened during the time that it was disconnected.<br/>\n    + */<br/>\n    +CONNECTION_LOST,<br/>\n    +<br/>\n    +/**<br/>\n    + * Posted when the initial cache has been populated.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yeah, exactly the same.  It fires events as it builds the tree, followed by an initialized event when the first pass is complete.  The test code should be fairly illuminating, but it needs to be in javadoc too since the tests don't ship.</p>\n\n<p>    The only difference is TreeCache doesn't have the startup mode options, I just wanted to simplify things and make it work the way that made the most sense.  So you can either just stream events from TreeCache and build your own representation without worry about the details, responding to add/remove/update events; or else you can wait for the initialized event and then pull the tree data.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695513/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695518","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695518","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695518,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T18:57:33Z","updated_at":"2025-01-21T13:10:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15127735\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15127735</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I haven't looked into zxid order at all; I wish that all event callbacks including a zxid but they don't.  I had consider that perhaps the UPDATE case should compare the mzxid of the incoming event to the mzxid recorded on the existing node, but in practice I don't think events can come in such an out of order fashion.</p>\n\n<p>    Given that PathChildren doesn't utilize mzxid's at all, it seems like it'd be more of an assertion than actually useful.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695518/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695523","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695523","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695523,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T19:06:21Z","updated_at":"2025-01-21T13:10:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15128164\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15128164</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    To be fair, if you get a child update event it actually includes the data with the event; but you're right, there's no possible way to ensure the node hasn't been subsequently deleted by the time you go to query the tree (even in the event callback).</p>\n\n<p>    I don't quite see what you're getting at with a slower consistent API short of COW.  Locking on the consumer side won't do any good unless you're also locking on the mutation side, which means you're allowing user code to block tree updates-- which seems really bad and could cause queuing problems on the mutation side while arbitrary callback code is running.</p>\n\n<p>    I think the only solution if you really want to see a consistent view is an immutable copy-on-write tree.  Every update would produce a new root node, and new nodes down to the point of change, so updates would be O(lg n).  Most of the nodes would be shared between each tree revision.  Once the new tree is constructed you atomically update the root reference.  You could actually attach the entire tree state to every event if you wanted.</p>\n\n<p>    I agree it's kind of an appealing story, but the reason it seems like overkill to me is that you can't (generally) get a consistent view of ZK anyway, and I worry about GC pressure of creating so many objects.  But I could be convince to take a crack at this approach.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695528","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695528","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695528,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T19:09:00Z","updated_at":"2025-01-21T13:10:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15128271\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15128271</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Worth mentioning: it would be totally possible (and perhaps even cleaner) to build consistent COW snapshots as a layer on top of TreeCache.  You'd just listen to all the events coming from TreeCache and use it to drive your COW tree.  Maybe that would be an interesting follow on?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695528/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695533","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695533","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695533,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1MzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T20:10:12Z","updated_at":"2025-01-21T13:10:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cconroy commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15131069\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15131069</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yeah i don't think full COW is the way to go: in the normal case it's far less costly to just copy the state of the tree in the executor when you need to read it.</p>\n\n<p>    Offering a consistent view w.r.t. events on top seems a reasonable approach.</p>\n\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695533/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709540","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709540","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709540,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-18T23:27:25Z","updated_at":"2025-01-21T13:16:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benjamin.jaton\">benjamin.jaton</a>:</i>\n<p>Sample code used to reproduce the bug</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709540/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709218","html_url":"https://github.com/apache/curator/issues/642#issuecomment-2604709218","issue_url":"https://api.github.com/repos/apache/curator/issues/642","id":2604709218,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkyMTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-19T06:17:28Z","updated_at":"2025-01-21T13:16:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>When you say 'I intermittently receive an InterruptedException like the following', you mean that this is appearing in your logs? Or that your code is receiving the exception.</p>\n\n<p>I presume that it's the former. It appears to be because the PathChildrenCache's offerOperation method interprets all exceptions in the same manner (just logs them).</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709221","html_url":"https://github.com/apache/curator/issues/642#issuecomment-2604709221","issue_url":"https://api.github.com/repos/apache/curator/issues/642","id":2604709221,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkyMjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-20T23:42:18Z","updated_at":"2025-01-21T13:16:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user Randgalt opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/18\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/18</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-121\" title=\"PathChildrenCache is throwing an InterruptedException when being closed\" class=\"issue-link\" data-issue-key=\"CURATOR-121\"><del>CURATOR-121</del></a> - Modified exception handling on the operation queue</p>\n\n<p>    Modified exception handling on the operation queue to ignore InterruptedException during shutdown. Added additional unit test for this case.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/apache/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-121\" title=\"PathChildrenCache is throwing an InterruptedException when being closed\" class=\"issue-link\" data-issue-key=\"CURATOR-121\"><del>CURATOR-121</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/18.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/18.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #18</p>\n\n<hr />\n<p>commit 51109813ebd3104b74181be26532c3692f41bb02<br/>\nAuthor: Cam McKenzie <cammckenzie@apache.org><br/>\nDate:   2014-07-19T18:10:32Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-121\" title=\"PathChildrenCache is throwing an InterruptedException when being closed\" class=\"issue-link\" data-issue-key=\"CURATOR-121\"><del>CURATOR-121</del></a> - Modified exception handling on the operation queue to<br/>\n    ignore InterruptedException during shutdown. Added additional unit test<br/>\n    for this case.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709221/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709230","html_url":"https://github.com/apache/curator/issues/642#issuecomment-2604709230","issue_url":"https://api.github.com/repos/apache/curator/issues/642","id":2604709230,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkyMzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-20T23:43:13Z","updated_at":"2025-01-21T13:16:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/18#discussion_r15152791\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/18#discussion_r15152791</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/PathChildrenCache.java &#8212;<br/>\n    @@ -761,6 +761,15 @@ public void run()<br/>\n operationsQuantizer.remove(operation);<br/>\n operation.invoke();<br/>\n     }<br/>\n    +catch ( InterruptedException e )<br/>\n    +{<br/>\n    +    //We expect to get interrupted during shutdown,<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    when catching InterruptedException, the thread interrupted status must be reset via:</p>\n\n<p>    ```java<br/>\n    Thread.currentThread().interrupt()<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49563625","html_url":"https://github.com/apache/curator/pull/18#issuecomment-49563625","issue_url":"https://api.github.com/repos/apache/curator/issues/18","id":49563625,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NTYzNjI1","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-20T23:43:46Z","updated_at":"2014-07-20T23:43:46Z","author_association":"MEMBER","body":"Other than my comment, LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49563625/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709238","html_url":"https://github.com/apache/curator/issues/642#issuecomment-2604709238","issue_url":"https://api.github.com/repos/apache/curator/issues/642","id":2604709238,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkyMzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-20T23:43:51Z","updated_at":"2025-01-21T13:16:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/18#issuecomment-49563625\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/18#issuecomment-49563625</a></p>\n\n<p>    Other than my comment, LGTM</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709238/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709246","html_url":"https://github.com/apache/curator/issues/642#issuecomment-2604709246","issue_url":"https://api.github.com/repos/apache/curator/issues/642","id":2604709246,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkyNDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-21T00:30:34Z","updated_at":"2025-01-21T13:16:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/18\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/18</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49566348","html_url":"https://github.com/apache/curator/pull/17#issuecomment-49566348","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":49566348,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NTY2MzQ4","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-21T01:35:53Z","updated_at":"2014-07-21T01:35:53Z","author_association":"MEMBER","body":"Thanks for this. I'll review when I can. Hopefully cameron can look too.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49566348/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695541","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695541","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695541,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-21T01:35:59Z","updated_at":"2025-01-21T13:10:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-49566348\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-49566348</a></p>\n\n<p>    Thanks for this. I'll review when I can. Hopefully cameron can look too.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695541/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708806","html_url":"https://github.com/apache/curator/issues/639#issuecomment-2604708806","issue_url":"https://api.github.com/repos/apache/curator/issues/639","id":2604708806,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDg4MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-21T01:47:41Z","updated_at":"2025-01-21T13:16:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/14\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/14</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604708806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695545","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695545","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695545,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1NDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-21T15:38:10Z","updated_at":"2025-01-21T13:10:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jhump commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15175830\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15175830</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    <a href=\"https://github.com/nbronson/snaptree\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/nbronson/snaptree</a></p>\n\n<p>    Trees can be used as persistent data structures by doing path-copying on updates. The one above is a concurrent tree map with O(1) clone whose performance meets or exceeds the JRE's `ConcurrentSkipListMap`.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695545/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709705","html_url":"https://github.com/apache/curator/issues/645#issuecomment-2604709705","issue_url":"https://api.github.com/repos/apache/curator/issues/645","id":2604709705,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk3MDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-22T17:31:14Z","updated_at":"2025-01-21T13:16:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user pperalta opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/19\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/19</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-124\" title=\"PathChildrenCache StartMode documentation improvement\" class=\"issue-link\" data-issue-key=\"CURATOR-124\"><del>CURATOR-124</del></a> - PathChildrenCache StartMode documentation improvement</p>\n\n<p>    Updated `PathChildrenCache.StartMode.NORMAL` JavaDoc to accurately depict the cache startup behavior.</p>\n\n<p>    Added test `testChildrenInitializedNormal` to assert the startup behavior indicated in the JavaDoc.</p>\n\n<p>    My IDE is also configured to remove trailing white space by default. If this is a problem I can remove those changes and resubmit.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/pperalta/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/pperalta/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-124\" title=\"PathChildrenCache StartMode documentation improvement\" class=\"issue-link\" data-issue-key=\"CURATOR-124\"><del>CURATOR-124</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/19.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/19.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #19</p>\n\n<hr />\n<p>commit e2eed55985b1d5efbc74ca04afcdac28c8400fe6<br/>\nAuthor: Patrick Peralta <pperalta@gopivotal.com><br/>\nDate:   2014-07-22T17:23:43Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-124\" title=\"PathChildrenCache StartMode documentation improvement\" class=\"issue-link\" data-issue-key=\"CURATOR-124\"><del>CURATOR-124</del></a> - PathChildrenCache StartMode doc</p>\n\n<p>    Updated PathChildrenCache.StartMode.NORMAL JavaDoc to<br/>\n    accurately depict the cache startup behavior.</p>\n\n<p>    Added test testChildrenInitializedNormal to assert<br/>\n    the startup behavior indicated in the JavaDoc.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709705/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709711","html_url":"https://github.com/apache/curator/issues/645#issuecomment-2604709711","issue_url":"https://api.github.com/repos/apache/curator/issues/645","id":2604709711,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk3MTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-22T17:31:32Z","updated_at":"2025-01-21T13:16:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=pperalta\">pperalta</a>:</i>\n<p>PR: <a href=\"https://github.com/apache/curator/pull/19\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/19</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709711/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709542","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709542","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709542,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1NDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-22T21:04:59Z","updated_at":"2025-01-21T13:16:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>OK - I have a reproducible case and a fix. However, should CONNECTED ever be returned in this case or should READ_ONLY take the place of CONNECTED? I can make it work either way.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709542/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709386","html_url":"https://github.com/apache/curator/issues/643#issuecomment-2604709386","issue_url":"https://api.github.com/repos/apache/curator/issues/643","id":2604709386,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkzODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-22T21:08:49Z","updated_at":"2025-01-21T13:16:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>How is this different than <a href=\"https://issues.apache.org/jira/browse/CURATOR-123\" title=\"ConnectionStateListener advertises READ_ONLY instead of CONNECTED the first time around\" class=\"issue-link\" data-issue-key=\"CURATOR-123\"><del>CURATOR-123</del></a>?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709386/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]