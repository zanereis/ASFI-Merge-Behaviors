[{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2466792074","html_url":"https://github.com/apache/lucenenet/pull/1014#issuecomment-2466792074","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1014","id":2466792074,"node_id":"IC_kwDOAAJ06c6TCEKK","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-10T16:08:51Z","updated_at":"2024-11-10T16:08:51Z","author_association":"CONTRIBUTOR","body":"IndexWriter and ByteBlockPool have some public const changes. I can revert those if we'd rather do them as part of a separate sweep.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2466792074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2466793124","html_url":"https://github.com/apache/lucenenet/pull/1014#issuecomment-2466793124","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1014","id":2466793124,"node_id":"IC_kwDOAAJ06c6TCEak","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-10T16:11:45Z","updated_at":"2024-11-10T16:11:45Z","author_association":"CONTRIBUTOR","body":"> IndexWriter and ByteBlockPool have some public const changes. I can revert those if we'd rather do them as part of a separate sweep.\r\n\r\nI see 'em. I have 7 files left to review and those 2 are at the bottom.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2466793124/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2466795362","html_url":"https://github.com/apache/lucenenet/pull/1014#issuecomment-2466795362","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1014","id":2466795362,"node_id":"IC_kwDOAAJ06c6TCE9i","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-10T16:18:31Z","updated_at":"2024-11-10T16:18:31Z","author_association":"CONTRIBUTOR","body":"If these are made const, that means they will be compiled as metadata in the consuming assembly. So any changes to the values will not be seen unless the consuming app is recompiled. \r\n\r\nThis may or may not be a problem, though. Technically, we should never update the values on these unless porting a new version of Lucene. It would be helpful to know if Lucene ever changes values during minor or patch version bumps, though, because we will eventually catch up with them. The safest bet without knowing that is to leave them `static`. That said, I have been guilty of changing many of these to `const` recently.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2466795362/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2468566808","html_url":"https://github.com/apache/lucenenet/pull/1014#issuecomment-2468566808","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1014","id":2468566808,"node_id":"IC_kwDOAAJ06c6TI1cY","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-11T16:24:06Z","updated_at":"2024-11-11T16:24:06Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 All feedback items should be addressed now. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2468566808/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2468676668","html_url":"https://github.com/apache/lucenenet/issues/662#issuecomment-2468676668","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/662","id":2468676668,"node_id":"IC_kwDOAAJ06c6TJQQ8","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-11T17:19:43Z","updated_at":"2024-11-11T17:19:43Z","author_association":"CONTRIBUTOR","body":"Bumping this to beta 18 in light of #1014 feedback.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2468676668/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2468678029","html_url":"https://github.com/apache/lucenenet/issues/679#issuecomment-2468678029","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/679","id":2468678029,"node_id":"IC_kwDOAAJ06c6TJQmN","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-11T17:20:28Z","updated_at":"2024-11-11T17:20:28Z","author_association":"CONTRIBUTOR","body":"Note: Related to #662","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2468678029/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2468780257","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2468780257","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2468780257,"node_id":"IC_kwDOAAJ06c6TJpjh","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-11T18:20:18Z","updated_at":"2024-11-11T18:20:18Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Found that ReusableStringReader should also implement this proposed ICloseable interface instead of IDisposable, especially given that its design to be reused is right there in the name.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2468780257/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2470732526","html_url":"https://github.com/apache/lucenenet/pull/1000#issuecomment-2470732526","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1000","id":2470732526,"node_id":"IC_kwDOAAJ06c6TRGLu","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-12T14:46:43Z","updated_at":"2024-11-12T14:46:43Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Thanks! Great info, as always. Also related: #1001 to upgrade to 4.x hopefully someday.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2470732526/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2472110238","html_url":"https://github.com/apache/lucenenet/issues/1020#issuecomment-2472110238","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1020","id":2472110238,"node_id":"IC_kwDOAAJ06c6TWWie","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-13T01:22:16Z","updated_at":"2024-11-13T01:22:16Z","author_association":"CONTRIBUTOR","body":"Note that once we drop the `net6.0` target, we can use `net6.0` for testing `netstandard2.1` instead of `net5.0`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2472110238/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2480873757","html_url":"https://github.com/apache/lucenenet/pull/1028#issuecomment-2480873757","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1028","id":2480873757,"node_id":"IC_kwDOAAJ06c6T3yEd","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-17T00:52:01Z","updated_at":"2024-11-17T00:52:01Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I intend to mark this ready for review once #1018 is merged, leaving as draft for now. I'll also likely have to resolve a merge conflict at that point too.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2480873757/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2481081472","html_url":"https://github.com/apache/lucenenet/pull/956#issuecomment-2481081472","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/956","id":2481081472,"node_id":"IC_kwDOAAJ06c6T4kyA","user":{"login":"MarkCiliaVincenti","id":25120736,"node_id":"MDQ6VXNlcjI1MTIwNzM2","avatar_url":"https://avatars.githubusercontent.com/u/25120736?v=4","gravatar_id":"","url":"https://api.github.com/users/MarkCiliaVincenti","html_url":"https://github.com/MarkCiliaVincenti","followers_url":"https://api.github.com/users/MarkCiliaVincenti/followers","following_url":"https://api.github.com/users/MarkCiliaVincenti/following{/other_user}","gists_url":"https://api.github.com/users/MarkCiliaVincenti/gists{/gist_id}","starred_url":"https://api.github.com/users/MarkCiliaVincenti/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarkCiliaVincenti/subscriptions","organizations_url":"https://api.github.com/users/MarkCiliaVincenti/orgs","repos_url":"https://api.github.com/users/MarkCiliaVincenti/repos","events_url":"https://api.github.com/users/MarkCiliaVincenti/events{/privacy}","received_events_url":"https://api.github.com/users/MarkCiliaVincenti/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-17T09:37:29Z","updated_at":"2024-11-17T09:37:29Z","author_association":"NONE","body":"@paulirwin meanwhile a new version of Backport.System.Threading.Lock has come out that acts as a source generator and basically dropping the DLL as a dependency.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2481081472/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2481347982","html_url":"https://github.com/apache/lucenenet/pull/956#issuecomment-2481347982","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/956","id":2481347982,"node_id":"IC_kwDOAAJ06c6T5l2O","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-17T16:22:47Z","updated_at":"2024-11-17T16:22:47Z","author_association":"CONTRIBUTOR","body":"That is good to know about, thank you. At this time, however, we are still not planning on adding a .NET 9 target. Each new target requires quite a bit of effort and resources to support, and we haven't even launched with a LTS version yet. We can't have this be a moving target (literally).\r\n\r\nWe need the community's help on finishing up the 4.8 release items first, which is all the difficult work of fixing failing unit tests, doing API reviews to ensure compatibility, tracking down performance issues demonstrated with benchmarks, things like UTF-8 byte-order marks, etc. It's not the easy/fun stuff like this, but it's important work. If you'd like to contribute there, please check out the 4.8.0-beta00018 milestone in issues, and comment if you'd like to take one of the items so we can follow up on it. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2481347982/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2481366477","html_url":"https://github.com/apache/lucenenet/pull/956#issuecomment-2481366477","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/956","id":2481366477,"node_id":"IC_kwDOAAJ06c6T5qXN","user":{"login":"MarkCiliaVincenti","id":25120736,"node_id":"MDQ6VXNlcjI1MTIwNzM2","avatar_url":"https://avatars.githubusercontent.com/u/25120736?v=4","gravatar_id":"","url":"https://api.github.com/users/MarkCiliaVincenti","html_url":"https://github.com/MarkCiliaVincenti","followers_url":"https://api.github.com/users/MarkCiliaVincenti/followers","following_url":"https://api.github.com/users/MarkCiliaVincenti/following{/other_user}","gists_url":"https://api.github.com/users/MarkCiliaVincenti/gists{/gist_id}","starred_url":"https://api.github.com/users/MarkCiliaVincenti/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarkCiliaVincenti/subscriptions","organizations_url":"https://api.github.com/users/MarkCiliaVincenti/orgs","repos_url":"https://api.github.com/users/MarkCiliaVincenti/repos","events_url":"https://api.github.com/users/MarkCiliaVincenti/events{/privacy}","received_events_url":"https://api.github.com/users/MarkCiliaVincenti/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-17T16:47:26Z","updated_at":"2024-11-17T16:47:26Z","author_association":"NONE","body":"OK @paulirwin, I'd appreciate if you'd let me know once .NET 9.0 is officially supported, so that we can revisit this.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2481366477/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484084451","html_url":"https://github.com/apache/lucenenet/pull/1018#issuecomment-2484084451","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1018","id":2484084451,"node_id":"IC_kwDOAAJ06c6UEB7j","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-18T20:40:17Z","updated_at":"2024-11-18T20:40:17Z","author_association":"CONTRIBUTOR","body":"Reverted breaking change and removed label, will put in a separate PR with that label. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484084451/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484096951","html_url":"https://github.com/apache/lucenenet/issues/259#issuecomment-2484096951","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/259","id":2484096951,"node_id":"IC_kwDOAAJ06c6UEE-3","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-18T20:46:47Z","updated_at":"2024-11-18T20:46:47Z","author_association":"CONTRIBUTOR","body":"Over 5 years later, I'm happy to say that this issue is now complete 😄 ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484096951/reactions","total_count":2,"+1":1,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484101230","html_url":"https://github.com/apache/lucenenet/pull/1030#issuecomment-2484101230","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1030","id":2484101230,"node_id":"IC_kwDOAAJ06c6UEGBu","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-18T20:49:20Z","updated_at":"2024-11-18T20:49:20Z","author_association":"CONTRIBUTOR","body":"Merging without review as this was already approved by @NightOwl888 in #1018, just split out as a separate PR/issue due to the breaking change.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484101230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484161963","html_url":"https://github.com/apache/lucenenet/issues/258#issuecomment-2484161963","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/258","id":2484161963,"node_id":"IC_kwDOAAJ06c6UEU2r","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-18T21:24:47Z","updated_at":"2024-11-18T21:24:47Z","author_association":"CONTRIBUTOR","body":"Split apart testing on iOS and Android as #1031, given that is specific to those OSes and not MAUI itself. Closing this issue as otherwise effectively completed.\r\n\r\nAs far as target frameworks go, MAUI can use OS-specific TFMs like `net8.0-ios`, but this is a superset of the functionality in its base TFM (`net8.0` for `net8.0-ios`). And given that Lucene.NET does not target any OS-specific TFMs, we should have no API compatibility issues there. More info: https://learn.microsoft.com/en-us/dotnet/standard/frameworks#net-5-os-specific-tfms\r\n\r\nWe also do not use any MAUI APIs, so that is not a concern with tests.\r\n\r\nIf it is feasible for us to use xharness to run tests on iOS and Android, and someone has the bandwidth to help contribute support for that, we can evaluate that for 4.8, but until then I think we can consider the Lucene.NET API surface that would run under MAUI generally tested for Windows, Linux, and macOS via our existing tests with the base TFMs.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484161963/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484168822","html_url":"https://github.com/apache/lucenenet/issues/430#issuecomment-2484168822","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/430","id":2484168822,"node_id":"IC_kwDOAAJ06c6UEWh2","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-18T21:28:58Z","updated_at":"2024-11-18T21:28:58Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Can you please review the state of this issue and make a list of what is remaining? Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484168822/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484695098","html_url":"https://github.com/apache/lucenenet/issues/615#issuecomment-2484695098","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/615","id":2484695098,"node_id":"IC_kwDOAAJ06c6UGXA6","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T04:41:41Z","updated_at":"2024-11-19T04:41:41Z","author_association":"CONTRIBUTOR","body":"Looking at the two files listed, one of them is in Demo, and the other is in unit tests. The Demo one still matches latest Lucene. (I can't find the other test file quickly in latest Lucene, might have been renamed.) The latter isn't even referenced in Lucene.NET anyways and probably just serves as example code. I think these cases can be fixed so I'll leave this open, but I don't think this is high priority. As @NightOwl888 noted, #265 would serve as a good review of this solution-wide. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2484695098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2485569504","html_url":"https://github.com/apache/lucenenet/issues/1031#issuecomment-2485569504","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1031","id":2485569504,"node_id":"IC_kwDOAAJ06c6UJsfg","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T12:22:31Z","updated_at":"2024-11-19T12:22:31Z","author_association":"CONTRIBUTOR","body":"The xharness project sounds promising.\r\n\r\nIt allows implementing custom test runners, which is an issue we had on J2N when adding tests for Xamarin.Android. The official XUnit test runner would not scale to run 70,000+ tests, and the official NUnit runner used NUnitLite (which is going to be an issue for the Lucene.Net test framework which depends on NUnit), so we had to make our own runners. Debugging was also very manual. You basically had to add a filter with the name of the test you want to run and then set a breakpoint in that test.\r\n\r\nSee https://github.com/NightOwl888/J2N/pull/96/files to see the configuration of Xamarin tests before they were removed - it took about 4 months of trial and error to get the tests to run on Azure DevOps being that documentation on testing class libraries was scarce. We could still use this approach if xharness doesn't pan out, the only thing we would need to do is replace the projects that build the `.apk` to side load into the Android emulator and update the test runners to run on MAUI.\r\n\r\nNote that there were several limitations with Xamarin.Android that made testing worth it, though:\r\n\r\n1. Mono has incomplete generics. We had compilation problems with both `LurchTable<TKey, TValue>` and with `EqualityComparer<T>` that required breaking API changes in J2N to fix.\r\n2. There were limitations with memory mapped files. See: https://github.com/dotnet/android/issues/5423. These didn't affect Lucene.Net, but did cause some of the Harmony tests to fail in J2N.\r\n3. There were several problems with the way globalization was implemented in Xamarin.Android. See: https://github.com/dotnet/android/issues/5425.\r\n4. Some other APIs in Xamarin.Android threw `PlatformNotSupportedException` that made it necessary to find alternatives and/or conditionally suppress tests.\r\n\r\nAs these issues were left open until Xamarin went out of support, I don't have high confidence that they have been addressed in MAUI, and may need to be re-reported. So, I agree that this is required before we can release 4.8.0 because there may be more breaking changes required to fully support MAUI.\r\n\r\nI did a little experimentation and got the tests to run on `Lucene.Net.Analysis.Common` on Xamarin.Android at one point, but it has never been done for all of the Lucene.NET tests.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2485569504/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486313181","html_url":"https://github.com/apache/lucenenet/issues/846#issuecomment-2486313181","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/846","id":2486313181,"node_id":"IC_kwDOAAJ06c6UMiDd","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T17:22:09Z","updated_at":"2024-11-19T17:22:09Z","author_association":"CONTRIBUTOR","body":"I got another failure. This time on Linux: https://dev.azure.com/shad0962/Experiments/_build/results?buildId=2528&view=ms.vss-test-web.build-test-results-tab&runId=1006431&resultId=100248&paneView=debug.\r\n\r\nReposing the repeat data here, since the CI environment will eventually be cleaned up.\r\n\r\n```\r\nExpected: 1, Actual: 0\r\n\r\n\r\nQuery <+INT32:{\"0\" TO \"554807661\"] +INT64:{\"0\" TO \"4750245968736588800\"] +SINGLE:{\"0\" TO \"0.55612606\"] +DOUBLE:{\"0\" TO \"0.27287609303204485\"] +date:{\"1970年1月1日 星期四 4:00 西元 0 +04:00 1970\" TO \"1993年9月30日 星期四 9:15 西元 14 +04:00 1993\"]> retrieved 0 document(s), 1 document(s) expected.\r\n\r\n\r\nTo reproduce this test result:\r\n\r\n\r\nOption 1:\r\n\r\n\r\nApply the following assembly-level attributes:\r\n\r\n\r\n[assembly: Lucene.Net.Util.RandomSeed(\"0xb19ea259d1e18b66\")]\r\n[assembly: NUnit.Framework.SetCulture(\"es-BZ\")]\r\n\r\n\r\nOption 2:\r\n\r\n\r\nUse the following .runsettings file:\r\n\r\n\r\n<RunSettings>\r\n  <TestRunParameters>\r\n    <Parameter name=\"tests:seed\" value=\"0xb19ea259d1e18b66\" />\r\n    <Parameter name=\"tests:culture\" value=\"es-BZ\" />\r\n  </TestRunParameters>\r\n</RunSettings>\r\nOption 3:\r\n\r\n\r\nCreate the following lucene.testsettings.json file somewhere between the test assembly and the root of your drive:\r\n\r\n\r\n{\r\n\"tests\": {\r\n\"seed\": \"0xb19ea259d1e18b66\",\r\n\"culture\": \"es-BZ\"\r\n}\r\n}\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486313181/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486322570","html_url":"https://github.com/apache/lucenenet/issues/1031#issuecomment-2486322570","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1031","id":2486322570,"node_id":"IC_kwDOAAJ06c6UMkWK","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T17:25:33Z","updated_at":"2024-11-19T17:29:20Z","author_association":"CONTRIBUTOR","body":"> So, I agree that this is required before we can release 4.8.0 because there may be more breaking changes required to fully support MAUI.\r\n\r\nI, for one, do not think this is _required_ before we can release 4.8.0 unless the community demands it. I put it on the 4.8.0 milestone for investigation and to not lose track of this issue, but I would certainly vote to cut it if needed. If we hear radio silence about needing to ensure full tests passing on iOS and Android, and no one wants to step up to do the work, I personally do not feel like we need to go through this effort, and certainly not if it means several months of delay in the release. It's very possible that it will work as-is sufficiently for most/all iOS and Android use cases, and we welcome issues being filed if there are incompatibilities. I am not aware of _any_ other open-source third-party (meaning, not Microsoft) projects that are going to this extent for these platforms, but if anyone has references that could make our job easier please share. But I don't think we need to spend a ton of effort and energy from our limited time available if no one speaks up about this being important, or is willing to help contribute.\r\n\r\nI'm not saying that's the case yet (I just filed the issue yesterday), but I'd say this issue is a call to action for the community. We've only had 1 reported issue on MAUI and it was already fixed in beta 17. If you include Xamarin, we've had only ~2~ a few issues reported in over 3 years. (edit: my apologies, the number is more like ~3 for Xamarin) That implies that either it is working well apart from the issues we've fixed, or not many people are using it for that purpose. If anyone needs 4.8.0 to have full test coverage (or any specific test coverage) on iOS and Android, please speak up! Better yet, volunteer to take on this issue. @NightOwl888 and I have enough on our plates. Meanwhile, please install beta00017 in your MAUI apps and let us know if there are any issues, and _also_ please let us know if it works well and what platform(s) you're using it on so we can gauge interest. Let us know what kinds of analysis, query parsing, directories, etc. you're using so we can better understand real-world workloads on mobile devices.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486322570/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486410584","html_url":"https://github.com/apache/lucenenet/issues/1034#issuecomment-2486410584","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1034","id":2486410584,"node_id":"IC_kwDOAAJ06c6UM51Y","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T18:07:53Z","updated_at":"2024-11-19T18:07:53Z","author_association":"CONTRIBUTOR","body":"This is a bit worse than I thought. Not only are there intermittent test failures on .NET Framework, but there are frequent crashes when testing .NET Core, x86 on Windows (it failed on both `net6.0` and `net5.0` and I haven't yet had a successful run).\r\n\r\nHere is the stderr output from the `net6.0` run:\r\n\r\n```\r\nThe active test run was aborted. Reason: Test host process crashed :    at Lucene.Net.Expressions.JS.TestCustomFunctions.StaticThrowingException.Method() in /_/src/Lucene.Net.Tests.Expressions/JS/TestCustomFunctions.cs:line 215\r\n   at Lucene.Net.Expressions.CompiledExpression.Evaluate(Int32 , FunctionValues[] )\r\n   at Lucene.Net.Expressions.JS.TestCustomFunctions.TestThrowingException() in /_/src/Lucene.Net.Tests.Expressions/JS/TestCustomFunctions.cs:line 231\r\nFatal error. 0xC0000005\r\n   at Lucene.Net.Expressions.CompiledExpression.Evaluate(Int32, Lucene.Net.Queries.Function.FunctionValues[])\r\n   at Lucene.Net.Expressions.JS.TestJavascriptOperations.AssertEvaluatesTo(System.String, Int64)\r\n   at Lucene.Net.Expressions.JS.TestJavascriptOperations.TestBitShiftLeft()\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Span`1<System.Object> ByRef, System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n   at NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo, System.Object, System.Object[])\r\n   at NUnit.Framework.Internal.MethodWrapper.Invoke(System.Object, System.Object[])\r\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.InvokeTestMethod(NUnit.Framework.Internal.TestExecutionContext)\r\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.RunTestMethod(NUnit.Framework.Internal.TestExecutionContext)\r\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)\r\n   at NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand+<>c__DisplayClass1_0.<Execute>b__0()\r\n   at NUnit.Framework.Internal.Commands.DelegatingTestCommand.RunTestMethodInThreadAbortSafeZone(NUnit.Framework.Internal.TestExecutionContext, System.Action)\r\n   at NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)\r\n   at NUnit.Framework.Internal.Commands.TimeoutCommand+<>c__DisplayClass5_0.<RunTestOnSeparateThread>b__0()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__272_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\n\r\nTest Run Aborted.\r\nThe active Test Run was aborted because the host process exited unexpectedly. Please inspect the call stack above, if available, to get more information about where the exception originated from.\r\nThe test running when the crash occurred: \r\nLucene.Net.Expressions.JS.TestJavascriptOperations.TestBitShiftLeft\r\n\r\nThis test may, or may not be the source of the crash.\r\n\r\n```\r\n\r\nHere are links to the runs where logs and other artifacts can be downloaded:\r\n\r\nhttps://dev.azure.com/LuceneNET-Temp/Lucene.NET/_build/results?buildId=2375&view=results\r\nhttps://dev.azure.com/lucene-net-temp2/Lucene.NET/_build/results?buildId=1073&view=results\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486410584/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486448267","html_url":"https://github.com/apache/lucenenet/pull/1036#issuecomment-2486448267","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1036","id":2486448267,"node_id":"IC_kwDOAAJ06c6UNDCL","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T18:27:35Z","updated_at":"2024-11-19T18:27:35Z","author_association":"CONTRIBUTOR","body":"> Looks good, unless we wanted to share EncodingProviderInitializer between the projects in Lucene.Net core.\r\n\r\nYeah, I thought of that, but it requires a dependency on `System.Text.Encoding.CodePages`. So, the best we can do to share this is to make it a linked file that does not a belong to any project.\r\n\r\nThere is quite a bit of duplicated code in these analysis projects (for example CSVUtil in kuromoji and nori), so this seems like the trend.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486448267/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486452898","html_url":"https://github.com/apache/lucenenet/issues/1034#issuecomment-2486452898","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1034","id":2486452898,"node_id":"IC_kwDOAAJ06c6UNEKi","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T18:30:02Z","updated_at":"2024-11-19T18:30:02Z","author_association":"CONTRIBUTOR","body":"Thanks for the details, since this was my PR I'll take this one.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486452898/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486862471","html_url":"https://github.com/apache/lucenenet/pull/1039#issuecomment-2486862471","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1039","id":2486862471,"node_id":"IC_kwDOAAJ06c6UOoKH","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T22:15:25Z","updated_at":"2024-11-19T22:15:25Z","author_association":"CONTRIBUTOR","body":"ADO build failed; will investigate. Marking as draft for now.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486862471/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486924374","html_url":"https://github.com/apache/lucenenet/pull/1039#issuecomment-2486924374","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1039","id":2486924374,"node_id":"IC_kwDOAAJ06c6UO3RW","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T23:01:40Z","updated_at":"2024-11-19T23:01:40Z","author_association":"CONTRIBUTOR","body":"Build succeeds on ADO now except for the known #1034 issue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486924374/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486996350","html_url":"https://github.com/apache/lucenenet/issues/1022#issuecomment-2486996350","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1022","id":2486996350,"node_id":"IC_kwDOAAJ06c6UPI1-","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-19T23:47:09Z","updated_at":"2024-11-19T23:47:09Z","author_association":"CONTRIBUTOR","body":"I wanted to provide an update on this. I've been experimenting with creating a Java tool called lucene-api-extractor, which will live in the Lucene.NET repo, that downloads the specified Lucene jars you wish to extract, loads them and reflects over them, and outputs the API surface as JSON. Then, I've got a new .NET console app (Lucene.Net.ApiCheck) that calls this tool, and loads in the JSON. So far all of that is working. Next up, ApiCheck will load and reflect over the matching .NET assemblies and compare the API surface to what it loaded from Java. This will of course be the hardest part. \r\n\r\nMy current thinking is once the diff between Lucene and Lucene.NET is generated, it will support saving this diff as JSON for programmatic/tool analysis, as well as generating an HTML report from this JSON. \r\n\r\nThere will be a config file to handle known mapping discrepancies, such as Int32Field vs IntField, along with a justification for each, and with enough massaging this config file will effectively represent the known differences between Lucene and Lucene.NET, and should be checked into git to evolve and be versioned alongside the code. Many discrepancies we can handle via convention, such as starting interfaces with \"I,\" capitalizing method names, IDisposable vs ICloseable, etc. It will be interesting to see how the early results look once I get the diff logic working.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2486996350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2487406460","html_url":"https://github.com/apache/lucenenet/issues/1040#issuecomment-2487406460","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1040","id":2487406460,"node_id":"IC_kwDOAAJ06c6UQs98","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-20T04:33:11Z","updated_at":"2024-11-20T04:33:11Z","author_association":"CONTRIBUTOR","body":"Given the fact that\r\n\r\n- FEATURE_CONDITIONALWEAKTABLE_ENUMERATOR\r\n- FEATURE_CONDITIONALWEAKTABLE_ADDORUPDATE\r\n\r\nare pretty crucial to ensuring the GC cleans up properly and also impact performance quite a bit, I wouldn't wish `netstandard2.0` on anybody who doesn't absolutely require it. If I had to choose a target to eliminate, it would be `netstandard2.0`, since it has the least number of optimizations and the most hacks in it.\r\n\r\nThe only real impacts of doing so would be:\r\n\r\n- Dropping UWP support completely\r\n- Requiring higher versions of most other platforms that are still in support\r\n- Breaking compatibility with any library that depends on the `netstarndard2.0` target so they don't have to multi-target (but we should discourage this practice because of the performance degradation on `netstandard2.0` vs `net462` or `net8.0`)\r\n\r\nIf using NuGet, the `netstandard2.0` target will never be installed in a .NET Framework application, since it will prefer `net462`.\r\n\r\nThe System.Memory APIs in that list are also important for performance (and this gap is likely to grow as we add support for System.Memory, since `netstandard2.1` supports it much better than older platforms).\r\n\r\n- FEATURE_NUMBER_PARSE_READONLYSPAN\r\n- FEATURE_STREAM_READ_SPAN\r\n- FEATURE_STRINGBUILDER_APPEND_READONLYSPAN","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2487406460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2487445824","html_url":"https://github.com/apache/lucenenet/issues/1040#issuecomment-2487445824","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1040","id":2487445824,"node_id":"IC_kwDOAAJ06c6UQ2lA","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-20T04:51:01Z","updated_at":"2024-11-20T04:51:01Z","author_association":"CONTRIBUTOR","body":"So should we extend this issue to dropping netstandard2.0 as well? I'd be open to that.\r\n\r\n> Requiring higher versions of most other platforms that are still in support\r\n\r\nWhat do you mean by this? As you point out, which is a really good point, .NET Framework isn't going to use our netstandard2.0 build anyways. UWP was deprecated in 2021, and is only expected to receive bug fixes, so I assume you're not referring to that. Xamarin is no longer in support, and the supported versions of .NET (8 and 9) will use our net8.0 build. So the only question mark would be Unity and Mono.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2487445824/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2487619240","html_url":"https://github.com/apache/lucenenet/issues/1040#issuecomment-2487619240","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1040","id":2487619240,"node_id":"IC_kwDOAAJ06c6URg6o","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-20T06:36:32Z","updated_at":"2024-11-20T06:36:32Z","author_association":"CONTRIBUTOR","body":"Well, dropping them both is something to consider. Most of the issues we have with testing .NET Standard are because as you stated, there are not very many platforms where they are still supported. It certainly would make testing easier if we didn't have to apply `SetTargetFramework` to override the target under test with a platform that is no longer officially supported. Not to mention, if we transition to testing NuGet packages instead of publishing binaries it will mean we don't need to pack extra NuGet packages that only have the target under test in it just so it will be resolved with the right target under test. `PackageReference` doesn't have an equivalent to `SetTargetFramework`, so that is the best we can do.\r\n\r\nThat being said, I am not sure about dropping support for Unity just yet. They [are still working on supporting .NET Core](https://discussions.unity.com/t/unity-future-net-development-status/836646). According to ChatGPT there have only been a few previews released, but so far no RTM release. So, keeping a `netstandard2.1` target until that transition is complete is probably a good idea.\r\n\r\nAs for Mono, I don't think it is such a big concern as it is being phased out in favor of .NET Core in most cases, but keeping `netstandard2.1` would also allow those who are still in the process of transitioning time to finish their migration.\r\n\r\n>> Requiring higher versions of most other platforms that are still in support\r\n\r\n> What do you mean by this? As you point out, which is a really good point, .NET Framework isn't going to use our netstandard2.0 build anyways. UWP was deprecated in 2021, and is only expected to receive bug fixes, so I assume you're not referring to that. Xamarin is no longer in support, and the supported versions of .NET (8 and 9) will use our net8.0 build. So the only question mark would be Unity and Mono.\r\n\r\nYes, as you astutely pointed out, all that are really left are Unity and Mono. Modern versions of these are both supported on `netstandard2.1`, which makes the supported audience for `netstandard2.0` effectively zero. That is, other than the convenience of having a single target framework for libraries that depend on us (which comes at a significant performance cost) and any stragglers that are still supporting UWP.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2487619240/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2488300616","html_url":"https://github.com/apache/lucenenet/issues/1022#issuecomment-2488300616","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1022","id":2488300616,"node_id":"IC_kwDOAAJ06c6UUHRI","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-20T11:13:57Z","updated_at":"2024-11-20T11:13:57Z","author_association":"CONTRIBUTOR","body":"Thanks for putting this tool together. I am glad to see you picking up the torch and running with it. It will definitely help with the long-term maintenance of the project. We will need an arsenal of automation and this is a good addition to our war chest.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2488300616/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2488748661","html_url":"https://github.com/apache/lucenenet/issues/1040#issuecomment-2488748661","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1040","id":2488748661,"node_id":"IC_kwDOAAJ06c6UV0p1","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-20T14:34:39Z","updated_at":"2024-11-20T14:34:39Z","author_association":"CONTRIBUTOR","body":"It looks like Unity won't get .NET 8+ until a 2025 beta and (presumably) a 2026+ Unity 7 release: https://discussions.unity.com/t/coreclr-and-net-modernization-unite-2024/1519272\r\n\r\nIt would certainly be frustrating if we're keeping this target around and there are no Unity users using it. It would be nice if NuGet could somehow give us usage numbers per platform. To the community reading this, is anyone out there using the netstandard2.1 target?\r\n\r\nAlso, I split out dropping .NET Standard 2.0 as #1041.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2488748661/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2489158993","html_url":"https://github.com/apache/lucenenet/issues/943#issuecomment-2489158993","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/943","id":2489158993,"node_id":"IC_kwDOAAJ06c6UXY1R","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-20T17:19:25Z","updated_at":"2024-11-20T17:19:25Z","author_association":"CONTRIBUTOR","body":"Fixed in #946 (did not auto-close due to formatting)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2489158993/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2489161818","html_url":"https://github.com/apache/lucenenet/issues/947#issuecomment-2489161818","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/947","id":2489161818,"node_id":"IC_kwDOAAJ06c6UXZha","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-20T17:20:56Z","updated_at":"2024-11-20T17:20:56Z","author_association":"CONTRIBUTOR","body":"Fixed in #948 (did not auto-close due to formatting)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2489161818/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2489282982","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-2489282982","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":2489282982,"node_id":"IC_kwDOAAJ06c6UX3Gm","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-20T18:28:40Z","updated_at":"2024-11-20T18:28:40Z","author_association":"CONTRIBUTOR","body":"> However, looking at the commit history, it looks like there was some work on this earlier this year (May 7) that is still on one of my branches. I don't know whether that work has been merged yet. This will need to be reviewed before we can close this.\r\n\r\n@NightOwl888 do you mind taking this one to close it out? I could split out the obsolete removals into a separate ticket. It would be awesome to close out this issue after (*checks notes*) 14 years 😆 ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2489282982/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2490057432","html_url":"https://github.com/apache/lucenenet/issues/678#issuecomment-2490057432","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/678","id":2490057432,"node_id":"IC_kwDOAAJ06c6Ua0LY","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T04:34:31Z","updated_at":"2024-11-21T04:34:31Z","author_association":"CONTRIBUTOR","body":"I reviewed _all 206_ of these issues, and of those, only 15 were ones we should fix. The remaining were the same as in Lucene, so we should not fix it as it is too risky, as noted in this original issue text. I've marked the 191 items we won't fix as \"Accepted\" with a reason of \"Matches Lucene.\" After discussion with @NightOwl888, we feel this is preferable to littering our code with suppressions. The remaining I'll get a PR for.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2490057432/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2490125364","html_url":"https://github.com/apache/lucenenet/pull/1042#issuecomment-2490125364","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1042","id":2490125364,"node_id":"IC_kwDOAAJ06c6UbEw0","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T05:41:06Z","updated_at":"2024-11-21T05:41:06Z","author_association":"CONTRIBUTOR","body":"After reviewing the changes again, I don't think the SortedSet code was actually buggy, the methods were just misnamed which caused confusion. Having the correct names will help avoid confusion in the future.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2490125364/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2491638802","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2491638802","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2491638802,"node_id":"IC_kwDOAAJ06c6Ug2QS","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T16:01:34Z","updated_at":"2024-11-21T16:02:59Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 in light of #1041, should this target the individual targets that our other projects support instead?\r\n\r\nEdit: after I posted this, I realized I should research what Microsoft recommends. They recommend targeting .NET Standard 2.0, so these would be an exception to #1041. Docs: https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/tutorials/how-to-write-csharp-analyzer-code-fix","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2491638802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2491743622","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2491743622","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2491743622,"node_id":"IC_kwDOAAJ06c6UhP2G","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T16:42:44Z","updated_at":"2024-11-21T16:42:44Z","author_association":"CONTRIBUTOR","body":"Right. These code analyzers are to support IDEs as well as MSBuild, so they should have broad support. The reason why we downgraded to `netstandard1.3` was to support VS2017 (something Microsoft needed). I am not sure whether that is still the case. But I also don't see any real need to change it. We can test netstandard1.3 with the latest .NET core and always keep it up to date. So, perhaps it would be better to suppress the warning on these projects.\r\n\r\nWe have several open tasks that involve making new code analyzers, but for those we will need a separate assembly. The existing analyzers are specifically for end users and we will need a different assembly for supporting Lucene.NET development. I was originally thinking of making an installer for the development analyzers, but it makes more sense to version it and put it on NuGet. It can then be a dependency of all Lucene.Net projects declared as `PrivateAssets=analyzers`. Ideally, we would create a different repo (similar to lucenenet-site) where it is developed and versioned, since it will have a different release schedule than Lucene.NET. I created a repo here: https://github.com/NightOwl888/lucenenet-codeanalysis-dev. But some of those analyzers probably shouldn't be enabled by default. It is named that way to be migrated to Apache. But, maybe we shouldn't because then we would have to comply with their release policy (having a release vote) for things that we need to develop Lucene.NET.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2491743622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2491951182","html_url":"https://github.com/apache/lucenenet/issues/667#issuecomment-2491951182","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/667","id":2491951182,"node_id":"IC_kwDOAAJ06c6UiChO","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T18:16:57Z","updated_at":"2024-11-21T18:19:05Z","author_association":"CONTRIBUTOR","body":"Better yet, I think we now can do pattern matching to clean this up further, instead of `as`. The top example linked above, instead of:\r\n\r\n```c#\r\nif (o is string)\r\n{\r\n    j += ((string)o).Length;\r\n    ...\r\n}\r\n```\r\n\r\nshould be (without bikeshedding the variable name):\r\n\r\n```c#\r\nif (o is string oStr)\r\n{\r\n    j += oStr.Length; // LUCENENET: use pattern matching variable instead of cast\r\n    ...\r\n}\r\n```\r\n\r\nI think this is cleaner than:\r\n\r\n```c#\r\nvar oStr = o as string; // LUCENENET: use `as` instead of casting\r\nif (oStr != null)\r\n{\r\n    j += oStr.Length; \r\n    ...\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2491951182/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2491964153","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2491964153","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2491964153,"node_id":"IC_kwDOAAJ06c6UiFr5","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T18:23:12Z","updated_at":"2024-11-21T18:23:12Z","author_association":"CONTRIBUTOR","body":"Is there a good reason to keep it on netstandard1.x? I don't think those older IDE versions would even support our codebase currently. Microsoft recommends netstandard2.0 at the link above (see my edit), so I would suggest we go with that instead of suppressing the warning.\r\n\r\nAs for the dev-targeted analyzers, my current thought is I think those should be versioned in our repo if at all possible. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2491964153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492070440","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2492070440","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2492070440,"node_id":"IC_kwDOAAJ06c6Uifoo","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T19:20:02Z","updated_at":"2024-11-21T19:20:02Z","author_association":"CONTRIBUTOR","body":"> Is there a good reason to keep it on netstandard1.x? I don't think those older IDE versions would even support our codebase currently. Microsoft recommends netstandard2.0 at the link above (see my edit), so I would suggest we go with that instead of suppressing the warning.\r\n\r\nThese analyzers are for users, not for our codebase. There is no reason why someone who is stuck on VS2017 couldn't load our library, but they will get a bunch of load failures if they don't suppress the analyzers when they are on an IDE that isn't compatible.\r\n\r\n- #394\r\n\r\nSo, this may create usability issues if we upgrade again. Microsoft also specifically requested this feature (although I couldn't find the conversation when I searched) and I don't know whether they still need it or not.\r\n\r\nIMO, it is less trouble to suppress an irrelevant warning than to deal with usability issues (again). Not to mention, I think there may be more to it than just changing the target framework.\r\n\r\n> As for the dev-targeted analyzers, my current thought is I think those should be versioned in our repo if at all possible.\r\n\r\nIf there were an exception to the 72 hour vote rule, we could. Otherwise, this would become an obstacle for releasing our analyzer changes in a reasonable timeframe.\r\n\r\nThese dev analyzers won't be embedded in our .nupkg like the user analyzers are. The IDE requires a different assembly version for each release due to caching, so it is easier to deal with as a package reference than trying to bootstrap the latest version into the current build. It will need to be a publicly available package reference so anyone who wants to contribute can depend on it. We would also need to have independent versioning and releases from Lucene.NET so we can update the analyzers between Lucene.NET releases easily. So, it will require an independent build from our current one. It just seems like it would be easier to keep this in a separate repo so we can push it out to NuGet and then bump the dependency version in this repo much like we would for RandomizedTesting or Spatial4n.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492070440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492090391","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2492090391","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2492090391,"node_id":"IC_kwDOAAJ06c6UikgX","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T19:30:47Z","updated_at":"2024-11-21T19:30:47Z","author_association":"CONTRIBUTOR","body":"Regarding Visual Studio 2017, unfortunately that is still under extended support until 2027. https://learn.microsoft.com/en-us/visualstudio/productinfo/vs-servicing#older-versions-of-visual-studio\r\n\r\nI feel bad for anyone still having to use that, but I guess theoretically it is possible to still be using 2017 when 4.8 launches with our netfx target. So I updated the title and description of this item to suppress the warning instead.\r\n\r\nAs far as the dev analyzers go, we can create a separate issue for that, but it is possible to install analyzers within your project without having them be NuGet packages, and just regular project references instead. Then that way we don't need to worry about releases or versioning, and they will evolve with the code base, since they are intended for use by Lucene.NET developers working on this codebase. Say we put in #985 into a dev-focused analyzer referenced by all of our projects. Then that will help prevent future contributors from making that mistake. I tested this with the Roslyn sample analyzer and it just uses a local project reference just fine.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492090391/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492102385","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2492102385","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2492102385,"node_id":"IC_kwDOAAJ06c6Uinbx","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T19:36:49Z","updated_at":"2024-11-21T19:36:49Z","author_association":"CONTRIBUTOR","body":"Also #985 might be a user-focused analyzer rule... might be a bad example. I just picked one.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492102385/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492150167","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2492150167","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2492150167,"node_id":"IC_kwDOAAJ06c6UizGX","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T20:00:40Z","updated_at":"2024-11-21T20:00:40Z","author_association":"CONTRIBUTOR","body":">I tested this with the Roslyn sample analyzer and it just uses a local project reference just fine.\r\n\r\nYes, it works fine the first time you try it. And then when you try to update it, it doesn't. It requires a new assembly version or it won't override the old version (at least in Visual Studio). Maybe there is a way to make it work locally and refresh for updates, but a NuGet package and a separate build with the versioning setup correctly will save from having to reinvent the wheel just to make it happen. And there is also a simple way to roll back if the latest version doesn't load for some reason.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492150167/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492292163","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2492292163","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2492292163,"node_id":"IC_kwDOAAJ06c6UjVxD","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T20:45:39Z","updated_at":"2024-11-21T20:45:39Z","author_association":"CONTRIBUTOR","body":"I think that might have been an older Visual Studio bug that's now (at least somewhat) fixed. I tried changing a rule's behavior, and in Rider it updates if you clean and rebuild. In Visual Studio 2022 latest, if you clean/rebuild and then close and reopen VS it picks up on the new change without needing to change the version number.\r\n\r\nThat might be a minor annoyance to someone actively developing the analyzer rules or switching to an older branch where those rules might be outdated (at least in Visual Studio), but I'd imagine those won't change often enough for that to warrant needing to publish them to nuget just for working around that. I think the common case would be that the rules, once developed, will not be changing often enough for this to matter that much, and that there's a fairly easy workaround (clean, rebuild, and reopen if using VS).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492292163/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492312866","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2492312866","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2492312866,"node_id":"IC_kwDOAAJ06c6Uja0i","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T20:56:14Z","updated_at":"2024-11-21T20:56:14Z","author_association":"CONTRIBUTOR","body":"Also, now that [Rider is free for non-commercial use](https://blog.jetbrains.com/blog/2024/10/24/webstorm-and-rider-are-now-free-for-non-commercial-use/), we could just suggest in the CONTRIBUTING file that if you're wanting to work on the dev analyzers, just use Rider 😄 ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492312866/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492353624","html_url":"https://github.com/apache/lucenenet/issues/1037#issuecomment-2492353624","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1037","id":2492353624,"node_id":"IC_kwDOAAJ06c6UjkxY","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-21T21:16:14Z","updated_at":"2024-11-21T21:16:14Z","author_association":"CONTRIBUTOR","body":"> That might be a minor annoyance to someone actively developing the analyzer rules or switching to an older branch where those rules might be outdated (at least in Visual Studio), but I'd imagine those won't change often enough for that to warrant needing to publish them to nuget just for working around that. I think the common case would be that the rules, once developed, will not be changing often enough for this to matter that much, and that there's a fairly easy workaround (clean, rebuild, and reopen if using VS).\r\n\r\nNot exactly. If someone pulls down the branch with changed rules in it and builds locally, it won't load the rules for that developer. They may not even be aware the rules have changed, but the rules don't take effect until the IDE is restarted. That is more than a minor annoyance. I often keep the IDE open for weeks at a time and would not get these updates that entire time.\r\n\r\nA NuGet package avoids this hassle entirely. The developer pulls down a branch and NuGet restore will install the new analyzer with the rest of the dependencies. No restart required and the developer doesn't even have to be aware that it updated.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2492353624/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2496052764","html_url":"https://github.com/apache/lucenenet/issues/615#issuecomment-2496052764","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/615","id":2496052764,"node_id":"IC_kwDOAAJ06c6Uxr4c","user":{"login":"stesee","id":168659,"node_id":"MDQ6VXNlcjE2ODY1OQ==","avatar_url":"https://avatars.githubusercontent.com/u/168659?v=4","gravatar_id":"","url":"https://api.github.com/users/stesee","html_url":"https://github.com/stesee","followers_url":"https://api.github.com/users/stesee/followers","following_url":"https://api.github.com/users/stesee/following{/other_user}","gists_url":"https://api.github.com/users/stesee/gists{/gist_id}","starred_url":"https://api.github.com/users/stesee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stesee/subscriptions","organizations_url":"https://api.github.com/users/stesee/orgs","repos_url":"https://api.github.com/users/stesee/repos","events_url":"https://api.github.com/users/stesee/events{/privacy}","received_events_url":"https://api.github.com/users/stesee/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-24T15:16:13Z","updated_at":"2024-11-24T15:17:22Z","author_association":"CONTRIBUTOR","body":"Missing dispose calls can also be found by the NETAnalyzers that integrate into your local dev env. Are you interested in [activating](https://github.com/apache/lucenenet/compare/master...stesee:lucenenet:EnableAnalyzer) them in the whole solution? \r\n\r\nSeems like there are a lot more missing dispose calls - 28 CA2000 warnings in the main project \"Lucene.Net\".","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2496052764/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2496337039","html_url":"https://github.com/apache/lucenenet/issues/269#issuecomment-2496337039","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/269","id":2496337039,"node_id":"IC_kwDOAAJ06c6UyxSP","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-24T23:38:08Z","updated_at":"2024-11-24T23:38:08Z","author_association":"CONTRIBUTOR","body":"FYI, after many days of effort, we finally found the cause of the TestRandomStrings/TestRandomHugeStrings failures, in ICU4N. We should be able to get these tests re-enabled once an ICU4N release with https://github.com/NightOwl888/ICU4N/pull/96 is released.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2496337039/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2499104007","html_url":"https://github.com/apache/lucenenet/issues/269#issuecomment-2499104007","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/269","id":2499104007,"node_id":"IC_kwDOAAJ06c6U9U0H","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-25T21:48:02Z","updated_at":"2024-11-25T21:48:02Z","author_association":"CONTRIBUTOR","body":"With the last remaining test failures split out as separate items (#1044 and #271) and #1045 re-enabling the TestICUFoldingFilterFactory test, I'm going to close this issue as completed. Any new test failures should have their own issues filed.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2499104007/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2499110294","html_url":"https://github.com/apache/lucenenet/issues/265#issuecomment-2499110294","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/265","id":2499110294,"node_id":"IC_kwDOAAJ06c6U9WWW","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-25T21:51:51Z","updated_at":"2024-11-25T21:51:51Z","author_association":"CONTRIBUTOR","body":"From @stesee in https://github.com/apache/lucenenet/issues/615#issuecomment-2496052764 (moving over to this discussion)\r\n> Missing dispose calls can also be found by the NETAnalyzers that integrate into your local dev env. Are you interested in [activating](https://github.com/apache/lucenenet/compare/master...stesee:lucenenet:EnableAnalyzer) them in the whole solution?\r\n>\r\n> Seems like there are a lot more missing dispose calls - 28 CA2000 warnings in the main project \"Lucene.Net\".\r\n\r\nI think that's possibly a great idea. We'd want to enable them on more than just net8.0, if possible, and ensure this works with our CI builds. But I think any automated analysis we can do is worthwhile. I'd like @NightOwl888's thoughts too.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2499110294/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2499112346","html_url":"https://github.com/apache/lucenenet/issues/615#issuecomment-2499112346","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/615","id":2499112346,"node_id":"IC_kwDOAAJ06c6U9W2a","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-25T21:53:09Z","updated_at":"2024-11-25T21:53:09Z","author_association":"CONTRIBUTOR","body":"@stesee Thanks, I moved your comment over to #265 which is a ticket to do a larger sweep of IDisposable usage, where that might be useful. We'll keep this issue focused on these two particular issues.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2499112346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2501791569","html_url":"https://github.com/apache/lucenenet/issues/1050#issuecomment-2501791569","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1050","id":2501791569,"node_id":"IC_kwDOAAJ06c6VHk9R","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-26T19:49:02Z","updated_at":"2024-11-26T19:49:02Z","author_association":"CONTRIBUTOR","body":"I can reproduce with enough repeats on net8.0 macOS arm64. I'm fairly certain that what we're seeing is .NET 8's Dynamic PGO inlining this trivial method at runtime. Much more further reading, but search the page for \"inline\" to see that it does inline trivial methods if it determines that is beneficial: https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-8/\r\n\r\nWe could force prevent this with `[MethodImpl(MethodImplOptions.NoInlining)]` on CheckMaxClauseCount (and initial results in my testing shows that seems to fix it), but IMO we should not rely on that. I think we should remove this assertion, even though it exists upstream (where Java did not have anything like .NET 8's Dynamic PGO to affect this stack trace), with a LUCENENET-specific comment explaining why we're removing it:\r\n\r\n```c#\r\n//  Maybe remove this assert in later versions, when internal API changes:\r\nAssert.AreEqual(\"CheckMaxClauseCount\", new StackTrace(e, false).GetFrames()[0].GetMethod().Name); //, \"Should throw BooleanQuery.TooManyClauses with a stacktrace containing checkMaxClauseCount()\");\r\n```\r\n\r\nWe should only care that a `BooleanQuery.TooManyClausesException` is thrown here, and not which specific method throws it.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2501791569/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2501828366","html_url":"https://github.com/apache/lucenenet/issues/1050#issuecomment-2501828366","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1050","id":2501828366,"node_id":"IC_kwDOAAJ06c6VHt8O","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-26T20:11:30Z","updated_at":"2024-11-26T20:11:30Z","author_association":"CONTRIBUTOR","body":"Actually, it would be a bug if we didn't have `[MethodImpl(MethodImplOptions.NoInlining)]` on `CheckMaxClauseCount`. That is a requirement of all of the tests that check for method names in the stack (and always has been). These \"who called me\" checks exist in Lucene for a reason.\r\n\r\nThere are a few dozen of these stack trace checks in the tests. We took `[MethodImpl(MethodImplOptions.NoInlining)]` a bit too far, because it was difficult to distinguish between identically named methods as to which one was expected in the stack (see #931). So, we can remove some of these without causing problems. However, this is a case where we didn't go far enough.\r\n\r\nWhile I would like to find a better way to check these scenarios, I am having trouble coming up with a way doesn't significantly deviate from the upstream code. Checking the stack seems to be the easiest approach. And with optimizations enabled it requires `[MethodImpl(MethodImplOptions.NoInlining)]` to function.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2501828366/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2501924301","html_url":"https://github.com/apache/lucenenet/issues/1050#issuecomment-2501924301","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1050","id":2501924301,"node_id":"IC_kwDOAAJ06c6VIFXN","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-26T20:59:36Z","updated_at":"2024-11-26T20:59:36Z","author_association":"CONTRIBUTOR","body":"> These \"who called me\" checks exist in Lucene for a reason.\r\n\r\nWhat is that reason? If anything, the comment on it indicates a keenness to remove the assertion, rather than keep it, because it acknowledges that it's testing an internal API. Users should only be concerned that the exception was thrown as expected, not that a specific protected method in the call stack was the one that did the check.\r\n\r\nPerhaps we could ask the Lucene team for their thoughts, but my gut tells me that if they had anything as awesome as Dynamic PGO at the time, they would lean on the side of removing this assertion rather than harming performance by forcing it not to be inlined, just to keep the assertion in the test (which has no meaningful benefit to end users).\r\n\r\nRemember that Dynamic PGO is the runtime observing ways that it can tangibly improve performance based on real-world measured behavior, and then making those changes. By inhibiting this with NoInlining, we're choosing to harm performance just for purity with the original assertion. IMO Dynamic PGO's inlining is a feature, not a bug. And I think we should do a sweep to remove all such assertions and NoInlining that was added to make these assertions pass. Let's err on the side of letting the runtime give us better performance, than having to make sure our stack trace matches some decade+ old version of the JDK's behavior. Especially when that assertion's author was even questioning whether it should be there in the first place. We could be considered the \"later version\" of this code that is changing the internal API, at runtime, via Dynamic PGO.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2501924301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2503544366","html_url":"https://github.com/apache/lucenenet/issues/793#issuecomment-2503544366","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/793","id":2503544366,"node_id":"IC_kwDOAAJ06c6VOQ4u","user":{"login":"shuitai","id":5568406,"node_id":"MDQ6VXNlcjU1Njg0MDY=","avatar_url":"https://avatars.githubusercontent.com/u/5568406?v=4","gravatar_id":"","url":"https://api.github.com/users/shuitai","html_url":"https://github.com/shuitai","followers_url":"https://api.github.com/users/shuitai/followers","following_url":"https://api.github.com/users/shuitai/following{/other_user}","gists_url":"https://api.github.com/users/shuitai/gists{/gist_id}","starred_url":"https://api.github.com/users/shuitai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shuitai/subscriptions","organizations_url":"https://api.github.com/users/shuitai/orgs","repos_url":"https://api.github.com/users/shuitai/repos","events_url":"https://api.github.com/users/shuitai/events{/privacy}","received_events_url":"https://api.github.com/users/shuitai/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T10:46:57Z","updated_at":"2024-11-27T10:46:57Z","author_association":"NONE","body":"@turowicz could you please provide a final release version for 4.8.0-beta0017, such 4.8-rc ?\r\nIf then, we don't need to download lucene.net from pre-release channel.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2503544366/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2503694347","html_url":"https://github.com/apache/lucenenet/issues/793#issuecomment-2503694347","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/793","id":2503694347,"node_id":"IC_kwDOAAJ06c6VO1gL","user":{"login":"turowicz","id":1055391,"node_id":"MDQ6VXNlcjEwNTUzOTE=","avatar_url":"https://avatars.githubusercontent.com/u/1055391?v=4","gravatar_id":"","url":"https://api.github.com/users/turowicz","html_url":"https://github.com/turowicz","followers_url":"https://api.github.com/users/turowicz/followers","following_url":"https://api.github.com/users/turowicz/following{/other_user}","gists_url":"https://api.github.com/users/turowicz/gists{/gist_id}","starred_url":"https://api.github.com/users/turowicz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/turowicz/subscriptions","organizations_url":"https://api.github.com/users/turowicz/orgs","repos_url":"https://api.github.com/users/turowicz/repos","events_url":"https://api.github.com/users/turowicz/events{/privacy}","received_events_url":"https://api.github.com/users/turowicz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T12:00:14Z","updated_at":"2024-11-27T12:00:14Z","author_association":"NONE","body":"I am not a team member, ask anyone else","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2503694347/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504065822","html_url":"https://github.com/apache/lucenenet/issues/793#issuecomment-2504065822","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/793","id":2504065822,"node_id":"IC_kwDOAAJ06c6VQQMe","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T14:47:33Z","updated_at":"2024-11-27T14:47:33Z","author_association":"CONTRIBUTOR","body":"@shuitai A RC would still require allowing prereleases to install. But since it's been about a month since my last update... time for one anyways. We are currently working towards a beta 18 release, hopefully our last beta. We're trying to get the final breaking changes out of the way now, as users of this library expect stability, and we can't be breaking things with a point release without a really good reason. You can see our progress at https://github.com/apache/lucenenet/milestone/11 - we're 41% done with the next release at the time of writing this by issue count. There are plenty of items tagged up-for-grabs there that anyone is welcome and encouraged to submit a PR for to help us get it across the finish line, if it isn't already assigned or has an open PR. Just chime in on the issue that you'd like to work on it and we'll assign it to you.\r\n\r\nOnce we get beta 18 done, I'd expect we could have one or at most a few RC releases, to finish up some of the non-breaking changes like documentation, benchmarks, and tests before the final release. I'm working on this nights and weekends to try to get this next beta 18 done, along with the hard work of @NightOwl888, and personally I'm pushing myself hard to try to have it done by the end of 2024. It might miss that target without any other outside contributions, though.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504065822/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504549317","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2504549317","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2504549317,"node_id":"IC_kwDOAAJ06c6VSGPF","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T18:27:11Z","updated_at":"2024-11-27T18:27:11Z","author_association":"CONTRIBUTOR","body":"I'll take this one.\r\n\r\n> Add a new interface ICloseable with a single method Close().\r\n\r\n@NightOwl888 Are you good with the `Lucene.Net.Support.IO` namespace for this interface, to match the `io` in `java.io.Closeable`?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504549317/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504568742","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2504568742","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2504568742,"node_id":"IC_kwDOAAJ06c6VSK-m","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T18:40:17Z","updated_at":"2024-11-27T18:40:17Z","author_association":"CONTRIBUTOR","body":"\r\n\r\n> > Add a new interface ICloseable with a single method Close().\r\n> \r\n> @NightOwl888 Are you good with the `Lucene.Net.Support.IO` namespace for this interface, to match the `io` in `java.io.Closeable`?\r\n\r\nThere is no public Support namespace, so, no. It should be in the Support folder, but perhaps this belongs in the `Lucene.Net.Util` namespace.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504568742/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504575058","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2504575058","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2504575058,"node_id":"IC_kwDOAAJ06c6VSMhS","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T18:44:43Z","updated_at":"2024-11-27T18:44:43Z","author_association":"CONTRIBUTOR","body":"Next question: on the IOUtils restoring the `Close...` methods, do we need the unused `CloseWhileHandlingException` overloads that take an `Exception priorException` first argument? These don't exist upstream, and I'm assuming they exist here because their Disposable counterparts exist, and aren't needed. But let me know if there's a reason why we'd need them for Close.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504575058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504589185","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2504589185","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2504589185,"node_id":"IC_kwDOAAJ06c6VSP-B","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T18:54:25Z","updated_at":"2024-11-27T18:54:25Z","author_association":"CONTRIBUTOR","body":"FYI my branch for this issue is https://github.com/paulirwin/lucene.net/tree/issue/271 - note that I might occasionally force-push to rebase this against latest master as other PRs are merged, as I expect this one to take a bit to complete.\r\n\r\nI'll also be checking off @NightOwl888's checklist above as I go, but this is just an informal progress tracker.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504589185/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504608067","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2504608067","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2504608067,"node_id":"IC_kwDOAAJ06c6VSUlD","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T19:07:23Z","updated_at":"2024-11-27T19:07:23Z","author_association":"CONTRIBUTOR","body":"> Next question: on the IOUtils restoring the `Close...` methods, do we need the unused `CloseWhileHandlingException` overloads that take an `Exception priorException` first argument? These don't exist upstream, and I'm assuming they exist here because their Disposable counterparts exist, and aren't needed. But let me know if there's a reason why we'd need them for Close.\r\n\r\nI don't recall adding any overloads, just moving over the ones that existed. I see this defined upstream:\r\n\r\nhttps://github.com/apache/lucene/blob/releases/lucene-solr/4.8.0/lucene/core/src/java/org/apache/lucene/util/IOUtils.java#L82\r\n\r\nIs that not what you are referring to?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504608067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504644676","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2504644676","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2504644676,"node_id":"IC_kwDOAAJ06c6VSdhE","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T19:33:06Z","updated_at":"2024-11-27T19:33:06Z","author_association":"CONTRIBUTOR","body":"Oh interesting, I was looking at the 4.8.1 code. It looks like those were removed in 4.8.1: https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.1/lucene/core/src/java/org/apache/lucene/util/IOUtils.java\r\n\r\nShould we go ahead and remove them and target 4.8.1 compatibility?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504644676/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504674986","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2504674986","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2504674986,"node_id":"IC_kwDOAAJ06c6VSk6q","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T19:55:10Z","updated_at":"2024-11-27T19:55:10Z","author_association":"CONTRIBUTOR","body":"If they are unused, I guess we can remove them. So, clearly Lucene isn't following semantic versioning (or, at least wasn't at the time).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504674986/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504678633","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2504678633","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2504678633,"node_id":"IC_kwDOAAJ06c6VSlzp","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-27T19:57:47Z","updated_at":"2024-11-27T19:57:47Z","author_association":"CONTRIBUTOR","body":"FYI, here is the 4.8.1 commit that removed the usage of them: https://github.com/apache/lucene/commit/56ab1d110260add7f5b792ddcc6621b73aa466e3\r\n\r\nAlso note that they are currently unused because the Disposable versions are used instead; if we target 4.8.1 we can clearly remove them. If we must target 4.8.0 then I haven't yet evaluated if these will be used, or if the code will continue to use the Disposable versions (because their types would not be ICloseable).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2504678633/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2505094558","html_url":"https://github.com/apache/lucenenet/pull/1052#issuecomment-2505094558","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1052","id":2505094558,"node_id":"IC_kwDOAAJ06c6VULWe","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-28T01:31:16Z","updated_at":"2024-11-28T01:31:29Z","author_association":"CONTRIBUTOR","body":"Running tests on ADO now; need to look into GitHub test failures and add LUCENENET comments for ReadExactly usage. Converted to draft.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2505094558/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2505253814","html_url":"https://github.com/apache/lucenenet/pull/1052#issuecomment-2505253814","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1052","id":2505253814,"node_id":"IC_kwDOAAJ06c6VUyO2","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-28T04:45:33Z","updated_at":"2024-11-28T04:45:33Z","author_association":"CONTRIBUTOR","body":"This passes on ADO and GitHub fully now; ready for review. See updated PR description for an explanation on the Expressions.JS test change.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2505253814/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2507046899","html_url":"https://github.com/apache/lucenenet/issues/1013#issuecomment-2507046899","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1013","id":2507046899,"node_id":"IC_kwDOAAJ06c6Vbn_z","user":{"login":"Kiliggggg","id":50283925,"node_id":"MDQ6VXNlcjUwMjgzOTI1","avatar_url":"https://avatars.githubusercontent.com/u/50283925?v=4","gravatar_id":"","url":"https://api.github.com/users/Kiliggggg","html_url":"https://github.com/Kiliggggg","followers_url":"https://api.github.com/users/Kiliggggg/followers","following_url":"https://api.github.com/users/Kiliggggg/following{/other_user}","gists_url":"https://api.github.com/users/Kiliggggg/gists{/gist_id}","starred_url":"https://api.github.com/users/Kiliggggg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Kiliggggg/subscriptions","organizations_url":"https://api.github.com/users/Kiliggggg/orgs","repos_url":"https://api.github.com/users/Kiliggggg/repos","events_url":"https://api.github.com/users/Kiliggggg/events{/privacy}","received_events_url":"https://api.github.com/users/Kiliggggg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-29T03:55:29Z","updated_at":"2024-11-29T03:55:29Z","author_association":"NONE","body":"We are using the 4.8.0-beta00017 but the error still exists.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2507046899/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2508737496","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2508737496","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2508737496,"node_id":"IC_kwDOAAJ06c6ViEvY","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-29T23:47:15Z","updated_at":"2024-11-30T00:38:16Z","author_association":"CONTRIBUTOR","body":"I spent quite a bit of time looking at this over the past few days, and I've come to what I think is a surprising idea, or at least it would have surprised past me when I started looking into this: I think we should remove IDisposable from TokenStream and its descendants completely, in favor of ICloseable. This is, I believe, the simplest solution, as well as the one that most closely matches Lucene. Then we avoid the whole IDisposable problem completely.\r\n\r\nAs noted above, these token streams are intended to be reused after Close is called. The fact that they are stored in an Analyzer via a \"ReuseStrategy\" speaks to this. So we know that having ICloseable is the right design choice here. This has the added benefit of more closely matching Lucene. I went through and moved all reusable close logic to Close overrides, and that was pretty easy (although time-consuming to go through ~200 implementations to review them all).\r\n\r\nI made Dispose call Close, because Close is supposed to be idempotent, so it should be able to be called multiple times, i.e. if you call `.Close()` and then `.Dispose()` that is allowed. I do not think this violates anything (a concern expressed above), because any resources cleaned up by Close would thus need to be cleaned up by Dispose if Close is not called, but the opposite may not be true, so it's not violating any rules in two directions. This works, all tests pass, but there's a concern I had about object lifetimes, and who should be calling Dispose. That started down the rabbit hole that led to this proposal.\r\n\r\nThe problem with IDisposable TokenStreams is that you're expected to dispose of IDisposables when you're done, and as noted above, TokenStreams are intended to be reused by the Analyzer, per the ReuseStrategy. We cannot make ReuseStrategy disposable, because it is supposed to use the singleton instances `Analyzer.PER_FIELD_REUSE_STRATEGY` and `Analyzer.GLOBAL_REUSE_STRATEGY`. There's also no real need, as those classes just encapsulate behavior and not state. The state is stored in the Analyzer, in the `storedValue` property. Now, we could make Analyzer's `DisposableThreadLocal<T>` cascade the Dispose call to its state if its state is disposable, and create a disposable wrapper around JCG.Dictionary for the PerFieldReuseStrategy (so that it would thus dispose of all of its dictionary values), but I actually think this might be unnecessary complexity, because then we would need to make sure that Analyzers are disposed everywhere, etc.\r\n\r\nI asked myself: why is this not a problem in Lucene? And after digging, and asking ChatGPT, the answer is that Analyzers and TokenStreams are not supposed to hold state that can't be garbage collected or at least released via Close (in the case of TokenStreams). And if you do need one that has to be disposed, then you can track the lifetime of that outside of the analyzer, and dispose of it yourself, because users are usually instantiating Analyzers directly anyways. There's nothing stopping someone from adding IDisposable to their custom Tokenizer or even Analyzer... but we don't have to make Lucene.NET unnecessarily complex and divergent from Lucene in order to accommodate this.\r\n\r\n(Aside: there was a thought above that in Java, AutoCloseable means that Close is sometimes called implicitly, which implies _automatically_, and this is not exactly true. It is called implicitly when the AutoCloseable is used in a try-with-resources statement (akin to a using statement in C#), but it is not called _automatically_ as part of resource cleanup.)\r\n\r\nYou also might be asking: what about the IDisposable TextReader in Tokenizer? Well, that is already going to be disposed in Close as a result of this change, but also it is passed into the Tokenizer via SetReader, so really it's the responsibility of the caller to dispose of it if Close is not called. The only case where this realistically could be a problem (since most cases use StringReader which is safely GC-able without being disposed) is if you use a TextReader Field value to some non-GC-able implementation of TextReader, in which case you're probably already safely disposing of that in a using block/statement anyways.\r\n\r\nThere is very little good reason within the Lucene.NET code to have TokenStream be IDisposable, as there are only _two_ cases that I found in the entire codebase, after reviewing all TokenStream subclasses, where the cleanup logic is not reusable (and thus would not already have its Dispose logic moved into Close): `PrefixTreeStrategy.CellTokenStream` and `MemoryIndex.TokenStreamAnonymousClass<T>`.\r\n\r\n`PrefixTreeStrategy.CellTokenStream` has an `IEnumerator<Cell>` field that is passed into its constructor, which is why it is not reusable (the enumerator is not reassigned/reinitialized inside this class). But it is just enumerating over an in-memory list of cells, so there's no concern about leaking this (it would just be garbage collected). Slightly sloppy code, but nothing to lose sleep over. We could easily dispose of the enumerator in a Close method, even though that's not reusable, as it's only used by the encapsulating Field, and is basically a private implementation detail. We could make a LUCENENET-specific change to have this type take an IEnumerable instead in its ctor, dispose of the enumerator in Close, and re-initialize it if it's attempted to be reused. Based on the comment at the call site, this seems like it might have been what was intended. Or, we could take [the latest code](https://github.com/apache/lucene/blob/06a320a53e5ed69c382ad31498738b7b13ccfc45/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.java#L142C3-L152C4) which avoids this problem entirely (and does not need to be disposed). I think I'd prefer the latter, if possible.\r\n\r\n`MemoryIndex.TokenStreamAnonymousClass<T>` likewise holds an `IEnumerator<T>` passed into its ctor, and likewise is created from an ICollection that likely can be safely GC'ed if not disposed (although there are no usages to its caller `KeywordTokenStream<T>(ICollection<T> keywords)`, even in tests, so it's hard to tell). Upstream, latest Lucene has [a comment](https://github.com/apache/lucene/blob/06a320a53e5ed69c382ad31498738b7b13ccfc45/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java#L554) indicating that this method possibly should be deprecated. But regardless, it's apparently safe if this is not reused.\r\n\r\nSo out of the O(200) derived types from TokenStream, only _two_ have non-reusable state that needs to be cleaned up, and even then, both are private implementation details, and it appears that the only valid intended use of these is with in-memory data where it's safe to not clean up the enumerator in Dispose, and one of them even has updated code that avoids the problem. So we'd be going through the hassle of making TokenStream and its descendants IDisposable for no discernible benefit, when users that need their custom implementations to be disposable can handle that outside of our library code with a custom or anonymous Analyzer.\r\n\r\nSo if we remove IDisposable from TokenStream in favor of ICloseable, it simplifies this dramatically, and avoids a lot of the concerns expressed in the comments above. We can still have `.Close()` called in try/finally blocks where it makes sense to do so, to make sure that's called if an exception occurs, but this way we don't have to worry about someone accidentally disposing of a TokenStream via a using statement or otherwise when it's possible it might be reused. And we get the added benefit of ensuring that these types are reusable (whereas they are not always today).\r\n\r\nI'm going to prototype this approach to determine if it's viable, but I have a hard time believing it wouldn't be at this point. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2508737496/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2508982268","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2508982268","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2508982268,"node_id":"IC_kwDOAAJ06c6VjAf8","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-30T14:39:02Z","updated_at":"2024-11-30T14:39:02Z","author_association":"CONTRIBUTOR","body":"@paulirwin thanks for the detailed information, \nAfter some thoughts I tend to agree. \n\nAt the beginning of the port, it was clearly that the closable Java matches with the net disposable \n\nHowever, looks like it's not a real dispose, especially when this can be reused after dispose \n\nHow complex this might be? \nSeems like this is a big change that will break things already stabilized \n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2508982268/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2509096553","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2509096553","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2509096553,"node_id":"IC_kwDOAAJ06c6VjcZp","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-11-30T17:53:30Z","updated_at":"2024-11-30T18:06:49Z","author_association":"CONTRIBUTOR","body":"Thanks so much for the detailed analysis, Paul.\r\n\r\nSo, what I gather, you are saying a disposable class would be injected like this?\r\n\r\n```c#\r\nusing var someDisposable = new SomeDisposable();\r\n\r\nAnalyzer analyzer = Analyzer.NewAnonymous(createComponents: (fieldName, reader) =>\r\n{\r\n    var src = new StandardTokenizer(m_matchVersion, reader);\r\n    TokenStream tok = new StandardFilter(m_matchVersion, src);\r\n    tok = new LowerCaseFilter(m_matchVersion, tok);\r\n    tok = new StopFilter(m_matchVersion, tok, m_stopwords);\r\n    tok = new MyFilter(someDisposable, tok);\r\n    return new TokenStreamComponents(src, tok);\r\n});\r\n```\r\n\r\nAlternatively, the user would need to implement a whole Analyzer subclass, but they could pass the disposable instance into the constructor to accomplish the same thing. I have to admit, doing it that way hadn't crossed my mind, but I am not sure it covers everything we need to fix. It may address all usability issues, though.\r\n\r\nThe main motivation for this issue is to fix the [`BaseTokenStreamTestCase` class](https://github.com/apache/lucenenet/blob/abe75de14adb010fd4ac2b614cf5af2b8157e22b/src/Lucene.Net.TestFramework/Analysis/BaseTokenStreamTestCase.cs#L389-L400). We have added hacks to prevent cascade failures from occurring with the original design. But this has bled over into other areas, such as the two `TestRandomChains` test failures. IIRC, both of these things require the state of `ILLEGAL_STATE_READER` to be carefully managed.\r\n\r\nThere were 3 main issues we ran into with `BaseTokenStreamTestCase`:\r\n\r\n1. If an assert happened, it could leave the `TokenStream` in an inconsistent state because it would fail to fulfill the [TokenStream contract](https://lucenenet.apache.org/docs/4.8.0-beta00017/api/core/Lucene.Net.Analysis.TokenStream.html). This would in turn cause all of the remaining tests in the same test class to fail because the `TokenStream` is in an invalid state each time it is reused.\r\n2. If a `TokenStream` class owns a file handle and we skip the call `Dispose()` on it, other tests that use the same file would get a \"File in use by another process\" exception. This is probably not an issue in our tests since we embedded the data files as resources into the assemblies (which means they open using a managed stream instance), but I see no reason to impose a limitation of strictly using embedded resources for our users.\r\n3. If a `TokenStream` class owns a native resource handle (as was once the case when we were using icu-dotnet), there is also no way to clean it up using Close() since it needs to happen after all of the reuse is done.\r\n\r\nIt was the 3rd problem that made me open this issue, as using icu-dotnet with Lucene.NET was completely impossible without having a `Dispose()` method that was only called once at the end of the process. The above solution would have been very ugly to hand our users - imagine having to [instruct users to `Init()` and `Cleanup()`](https://github.com/sillsdev/icu-dotnet?tab=readme-ov-file#usage) in every piece of code that uses a particular analyzer implementation (at one point, those were required). And what if a future implementation we own requires us to call something disposable?\r\n\r\nMy thought was to separate the concepts of `Close()` from `Dispsose()` so the test framework could clean up a reusable `TokenStream` instance without modifying the `ILLEGAL_STATE_READER` so it doesn't cause all of the other tests in the class to fail along with it. But, IIRC there has never been an attempt to make a failure happen in Lucene to see if it had the same cascade failures or if there is some other hook that is supposed to clean up this state. Having those cascade failures made finding the test that was actually failing very hard. If Lucene does not have cascade failures, I am curious as to why they don't.\r\n\r\n> Of course, we have changed a lot of things since those hacks were put in place, such as fixing the error handling to work the same way it did in Lucene and switching from external resource files to embedded resources.\r\n\r\nA good proof of concept would be to ensure the `TestRandomChains` test failures can be patched with the proposed fix. I would be interested to know\r\n\r\n1. Can we make those pass without having disposable analysis components?\r\n2. Can we make the tests that use a single analyzer instance for a whole test fixture class fail independently without getting cascade failures? Even on `TextReader` implementations that own file handles?\r\n\r\nIt is that last condition that made me think there was no way out except for having disposable token stream components, since the original configuration would always leave the file handle open upon test failure.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2509096553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2510521423","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2510521423","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2510521423,"node_id":"IC_kwDOAAJ06c6Vo4RP","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-02T03:52:38Z","updated_at":"2024-12-02T03:52:38Z","author_association":"CONTRIBUTOR","body":"> So, what I gather, you are saying a disposable class would be injected like this?\r\n\r\nThat's the idea, yeah. Although your example of the icu-dotnet case is a good thought experiment. After some thinking, I think we can made TokenStream IDisposable as well as ICloseable, although the virtual `Dispose(boolean)` method would _only_ be an extension point for anyone that needs an example like that. In almost all other cases, Close should be used instead. And as I noted above, we would be able to get away with not having any of our TokenStream subclasses override Dispose.\r\n\r\nTo do this, I think we would need to make TokenStreamComponents implement IDisposable and dispose of its two fields, although we would have to note that because there is no guarantee that the sink ends up disposing of its source, that we would have to allow for Dispose to be idempotent and able to be called multiple times, because if we just i.e. not dispose of the TokenStreamComponents source field (assuming the sink would dispose it), then there's a chance that it might not, and then something could leak. We could add a trivial check to not redundantly call Dispose on the sink if it ReferenceEquals the source, but other than that I think we have to allow for Dispose to be called more than once. \r\n\r\nWe then need to change DisposableThreadLocal to dispose of all of its Values that are IDisposable. I'll prototype this and see how it goes.\r\n\r\nNote that I do not think we should do the suggestion earlier in this thread of throwing if any of the other TokenStream methods are called on it after it has been disposed. The Closeable implementation does not do this in the upstream code, and we'd have to override many methods from AttributeSource, and make IncrementToken virtual instead of abstract, which would significantly deviate from upstream, and cause a performance penalty, just to prevent someone from doing this in their custom types (as again, we would not be overriding Dispose in our code). I think we should make that the responsibility of the implementer if they care about that, and just let it be.\r\n\r\n> Can we make those [TestRandomChains] tests pass without having disposable analysis components?\r\n\r\nThey do pass, even with high iteration counts. I've removed the AwaitsFix attribute from them.\r\n\r\n> Can we make the tests that use a single analyzer instance for a whole test fixture class fail independently without getting cascade failures?\r\n\r\nThis also seems to work fine. I think it was due to wrapping the IDisposables in using statements previously like you said, and now I've replaced those with `try`/`finally` and calling `.Close()` in the finally block. This is effectively the same as a using block, which the compiler lowers to `try`/`finally` and calling `.Dispose()` in the finally block. So the behavior is basically the same, just the semantics have changed: Close means reusable, Dispose means you're done with the object. We already effectively were treating disposed objects as reusable, this just creates the distinction in meaning.\r\n\r\n> Even on TextReader implementations that own file handles?\r\n\r\nDo we have any tests that you know of that do this that I can confirm? But again, if they were passing previously, they're still passing now, as there's basically little difference in runtime behavior than before.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2510521423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2510537454","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2510537454","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2510537454,"node_id":"IC_kwDOAAJ06c6Vo8Lu","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-02T04:10:41Z","updated_at":"2024-12-02T04:10:41Z","author_association":"CONTRIBUTOR","body":"Also, I can still reproduce this test failure: https://github.com/apache/lucenenet/issues/271#issuecomment-973005744\r\n\r\nI'm going to attempt removing the try/finally from those BaseTokenStreamTestCase methods to match upstream and see what happens.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2510537454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2512385359","html_url":"https://github.com/apache/lucenenet/issues/1053#issuecomment-2512385359","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1053","id":2512385359,"node_id":"IC_kwDOAAJ06c6Vv_VP","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-02T18:34:23Z","updated_at":"2024-12-02T18:34:23Z","author_association":"CONTRIBUTOR","body":"Thanks for this issue report. Are you referring to the demo code on the homepage?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2512385359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2513217153","html_url":"https://github.com/apache/lucenenet/issues/1050#issuecomment-2513217153","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1050","id":2513217153,"node_id":"IC_kwDOAAJ06c6VzKaB","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-02T23:52:42Z","updated_at":"2024-12-02T23:52:42Z","author_association":"CONTRIBUTOR","body":"I reviewed the other cases where NoInlining was added so that the stack trace stays \"inspectable,\" and this case stands out as different. The other cases are inside test classes that change the behavior at test runtime; in this case it is only used for an assertion. Based on my rationale above, I've submitted a PR to comment out this assertion and add a comment explaining why, rather than disable PGO or force NoInlining. The assertion inside the `try` block even says what it's testing: `Assert.Fail(\"Should throw BooleanQuery.TooManyClauses\");` - the important thing here is that the exception is thrown, not who threw it.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2513217153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2513485436","html_url":"https://github.com/apache/lucenenet/issues/408#issuecomment-2513485436","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/408","id":2513485436,"node_id":"IC_kwDOAAJ06c6V0L58","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-03T03:45:43Z","updated_at":"2024-12-03T03:45:43Z","author_association":"CONTRIBUTOR","body":"It appears this was fixed by #847. @laimis @NightOwl888 please let me know if not. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2513485436/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2513505890","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2513505890","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2513505890,"node_id":"IC_kwDOAAJ06c6V0Q5i","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-03T04:09:13Z","updated_at":"2024-12-03T04:09:13Z","author_association":"CONTRIBUTOR","body":"I have this change ready to PR, as soon as #1052 is merged.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2513505890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2514307374","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2514307374","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2514307374,"node_id":"IC_kwDOAAJ06c6V3Uku","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-03T11:36:05Z","updated_at":"2024-12-03T11:47:31Z","author_association":"CONTRIBUTOR","body":"I am curious to what performance penalty a target that simply has no implementation has?.\r\nRemember, this is just a contract target, .netstandard 2.0 is not an implementation. It would have to mean we have cases where we say \"If it's .NET 4.6.1 then A or if Standard 2.0 then B\" - But do we have allot of that around?\r\n\r\nThe .netstandard 2.0 target greatly simplifies things for framework developers that develops around lucene.\r\n\r\nBefore we \"Claim\" any performance penalty, could we please prove those?\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/standard/net-standard?tabs=net-standard-2-0#net-standard-not-deprecated","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2514307374/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2514312742","html_url":"https://github.com/apache/lucenenet/pull/1055#issuecomment-2514312742","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1055","id":2514312742,"node_id":"IC_kwDOAAJ06c6V3V4m","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-03T11:38:13Z","updated_at":"2024-12-03T11:38:13Z","author_association":"CONTRIBUTOR","body":"I wonder, could https://github.com/Spatial4n/Spatial4n/issues/1 be a similar issue as this (overflow)?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2514312742/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2514892341","html_url":"https://github.com/apache/lucenenet/pull/1055#issuecomment-2514892341","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1055","id":2514892341,"node_id":"IC_kwDOAAJ06c6V5jY1","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-03T15:31:58Z","updated_at":"2024-12-03T15:31:58Z","author_association":"CONTRIBUTOR","body":"> I wonder, could [Spatial4n/Spatial4n#1](https://github.com/Spatial4n/Spatial4n/issues/1) be a similar issue as this (overflow)?\r\n\r\nI don't think so, since it's not an addition that overflows Int32. In that case, I think it could be an out of range character in the geohash. Without trying out the code, just from thinking through it, it seems like characters above the ASCII alphanumeric set could cause that issue, such as `'Ä'` (int value 196) which would result in a calculated index of `(int)'Ä' - (int)'0'` == 148 which is out of range. Just a thought there, if the caller is not validating that the input is a valid geohash.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2514892341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2515026825","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2515026825","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2515026825,"node_id":"IC_kwDOAAJ06c6V6EOJ","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-03T16:26:25Z","updated_at":"2024-12-03T16:26:25Z","author_association":"CONTRIBUTOR","body":"> The .netstandard 2.0 target greatly simplifies things for framework developers that develops around lucene.\r\n\r\nBy \"framework developers\" do you mean developers of frameworks-as-libraries that depend on Lucene.NET, or \".NET Framework\" developers? I suppose both apply, although note that we are still going to have our net462 build for .NET Framework users.\r\n\r\nI'll let @NightOwl888 speak to the performance, since he mentioned it at #1040. One challenge with having to claim a performance penalty is because of the difficulty of actually using the netstandard2.0 target directly. Any .NET Framework version is going to prefer our net462 build over netstandard2.0, and any out-of-support .NET (Core) 3.0-7 is going to prefer our netstandard2.1 build (and then of course, .NET 8+ would use our net8.0 build). I suppose we could create some benchmarks that transitively depend on us through a netstandard2.0 library to force that, which would emulate some real-world transitive scenarios that could cause this.\r\n\r\nIn either case, after thinking through it more, I do think we can reconsider this for post-4.8. One scenario is that users may be consolidating their shared logic that uses Lucene.NET into a netstandard2.0 class library to i.e. ease a transition to modern .NET from .NET Framework, which was common practice several years ago in the early days of modern .NET, even though they would likely be better served today by multi-targeting instead (or, better yet, finishing the transition to modern .NET).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2515026825/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2516457117","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2516457117","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2516457117,"node_id":"IC_kwDOAAJ06c6V_had","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T07:57:08Z","updated_at":"2024-12-04T08:04:34Z","author_association":"CONTRIBUTOR","body":"> By \"framework developers\" do you mean developers of frameworks-as-libraries that depend on Lucene.NET, or \".NET Framework\" developers? I suppose both apply, although note that we are still going to have our net462 build for .NET Framework users.\r\n\r\nThis only concerns developers that creates frameworks around Lucene, who wishes to target both a .NET 4.X and .NET 8+ Audience in a convinient way (Perhaps often in an early stage of a project). And to this date, using .netstandard 2.0 is still a thing to bridge the gap between .NET Framwork and .NET 8+ because it's still far from all tha has moved over. It's not something that was done years ago, it still happens because big businesses move slow or big solutions are not cheap to migrate but eventually I think teams does have plans to do so (I know we are still stuck on .NET 4.8 on projects and actively preparing hundred thounsand lines of code for the move, and .NET Standard is very usefull in that process. But the problem is, it's allot of work, someone has to pay etc. etc.)\r\n\r\nInterestingly enough, Taken from one .NET Framework 4.8 Web application we have going, which targets a package that is developed against .netstandard 2.0 that uses Lucene, the target keeps the package in the middle easy to develop and allows it to be used from both .NET Framework AND .NET 8+. It's however not the .netstandard 2.0 version of lucene that ends up in the final build. So the package in the middle gains the convinience here but for .NET Framwork does not suffer any penalties (If there is any). I am not sure if the same thing would happen for .NET 8+ but it's an interesting observation.\r\n\r\nSkimming compiler flags etc, I am having a very hard time figuring out what the differences is between the .NET 462 and .NET Standard 2.0 Build, And therefor where the performance penalty between the two are.\r\n\r\nIf there is not performance gains in targeting .NET 462 over .NET Standard 2.0, then I would actually advocate that it would be better to throw out the .NET 462 target. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2516457117/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2517741431","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2517741431","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2517741431,"node_id":"IC_kwDOAAJ06c6WEa93","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T15:17:50Z","updated_at":"2024-12-04T15:17:50Z","author_association":"CONTRIBUTOR","body":"I'll let @NightOwl888 chime in on this one, but for now I think there's clear enough justification to punt on this regardless of performance. Moving to the Future milestone, but keeping open for discussion and to indicate that we do hope to drop it someday in a future version of Lucene.NET. \r\n\r\nThe idea of dropping the net462 target while keeping netstandard2.0 is an interesting one that I think is worth consideration as well. That would let us just run tests on .NET Framework once for the netstandard2.0 build.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2517741431/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2517854641","html_url":"https://github.com/apache/lucenenet/pull/1056#issuecomment-2517854641","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1056","id":2517854641,"node_id":"IC_kwDOAAJ06c6WE2mx","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T15:55:30Z","updated_at":"2024-12-04T15:55:30Z","author_association":"CONTRIBUTOR","body":"This change caught a NRE bug in MutableValue 😄 Fixed.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2517854641/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2517930777","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2517930777","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2517930777,"node_id":"IC_kwDOAAJ06c6WFJMZ","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T16:23:54Z","updated_at":"2024-12-04T16:23:54Z","author_association":"CONTRIBUTOR","body":"> Before we \"Claim\" any performance penalty, could we please prove those?\r\n\r\nTo qualify this, I am referring to the original conversation when we were talking about removing `netstandard2.1`.\r\n\r\nFirst of all, `netstandard2.0` shipped before there was a [`GetEnumerator()`](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.conditionalweaktable-2.system-collections-ienumerable-getenumerator?view=net-8.0#system-runtime-compilerservices-conditionalweaktable-2-system-collections-ienumerable-getenumerator) or [`AddOrUpdate()`](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.conditionalweaktable-2.addorupdate?view=net-8.0#system-runtime-compilerservices-conditionalweaktable-2-addorupdate(-0-1)) method on `ConditionalWeakTable<TKey, TValue>`. For `GetEnumerator()` we worked around by using Prism weak events (which we [recently added to the `Support` namespace](https://github.com/apache/lucenenet/pull/875))  and for `AddOrUpdate()`, we are using a `Remove()` followed by `Add()`. During experimentation, it was clear that using `WeakReference` (which is how the Prism weak events are implemented) holds onto references longer than using purely a `ConditionalWeakTable<TKey, TValue>`. However, there is a [`WeakEventManager`](https://github.com/apache/lucenenet/issues/872#issuecomment-1752122329) (from WPF) that exists only on .NET Framework that would probably perform better that uses another `ConditionalWeakTable<TKey, TValue>` along with some native code under the hood. The Prism weak events solution we have is the best we can do for `netstandard2.0` without dropping to native code. `Remove()` followed by `Add()` is also less efficient than `AddOrUpdate()`.\r\n\r\nNote that the `netstandard2.1` target primarily exists because of the missing APIs on `ConditionalWeakTable<TKey, TValue>`.\r\n\r\nSecondly, and more importantly, when the `netstandard2.0` target is chosen, all of its dependencies can only target `netstandard2.0` or lower. If the runtime is `net8.0` or `net9.0` and Lucene.Net is `netstandard2.0`, it will no longer call the hardware intrinsics APIs that didn't exist until `net6.0` because it will load `System.Memory` and `J2N` assemblies that target `netstandard2.0`. System.Memory and J2N both use hardware intrinsics only if the target is .NET Core. And this goes well beyond those two dependencies.\r\n\r\nAs for the difference between `net462` and `netstandard2.0`, the performance advantage is not as significant in that case. Although, there are still a few optimizations with having a native runtime target over a .NET Standard target.\r\n\r\nDo I think that we should drop `netstandard2.0`? Not at this time. But I think we should consider doing it before we drop `netstandard2.1` because of the missing APIs on `ConditionalWeakTable<TKey, TValue>`. However, as long as Microsoft is still targeting `netstandard2.0` it is a strong indicator that we should be, as well.\r\n\r\nThat being said, I think we should actively discourage anyone from using `netstandard2.0` as a way to target both .NET Framework and .NET Core, because doing so loses several of the performance advantages of using .NET Core (at least for our class libraries and any class libraries we depend on). That is, unless you are swapping in the .NET Core assembly into the final build (although, there may be some minor API differences where you could get burned by doing that).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2517930777/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518027802","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2518027802","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2518027802,"node_id":"IC_kwDOAAJ06c6WFg4a","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T16:58:58Z","updated_at":"2024-12-05T07:19:15Z","author_association":"CONTRIBUTOR","body":"> Secondly, and more importantly, when the `netstandard2.0` target is chosen, all of its dependencies can only target `netstandard2.0` or lower. If the runtime is `net8.0` or `net9.0` and Lucene.Net is `netstandard2.0`, it will no longer call the hardware intrinsics APIs that didn't exist until `net6.0` because it will load `System.Memory` and `J2N` assemblies that target `netstandard2.0`. System.Memory and J2N both use hardware intrinsics only if the target is .NET Core. And this goes well beyond those two dependencies.\r\n>\r\n> As for the difference between `net462` and `netstandard2.0`, the performance advantage is not as significant in that case. Although, there are still a few optimizations with having a native runtime target over a .NET Standard target.\r\n> \r\n> Do I think that we should drop `netstandard2.0`? Not at this time. But I think we should consider doing it before we drop `netstandard2.1` because of the missing APIs on `ConditionalWeakTable<TKey, TValue>`. However, as long as Microsoft is still targeting `netstandard2.0` it is a strong indicator that we should be, as well.\r\n> \r\n> That being said, I think we should actively discourage anyone from using `netstandard2.0` as a way to target both .NET Framework and .NET Core, because doing so loses several of the performance advantages of using .NET Core (at least for our class libraries and any class libraries we depend on). That is, unless you are swapping in the .NET Core assembly into the final build (although, there may be some minor API differences where you could get burned by doing that).\r\n\r\nNo, this is not what happens. At least not in my testing. And I have tested both a .NET 8 and .NET 4.8 scenario.\r\n\r\nGiven I have a .NET 8 project that references a .NET Standard 2.0 Project or Package that references Lucene, I DON'T get the Lucene .NET Standard 2.0 image/dll, I get the one from .NET 8.0.\r\n\r\nDependency Tree:\r\n - ConsoleApp1 [.net8.0] > ClassLibrary1 [.netstandard2.0] > Lucene.Net 4.8.0-beta00017\r\n\r\nGiven I have a .NET 4.8 project that references a .NET Standard 2.0 Project or Package that references Lucene, I DON'T get the Lucene .NET Standard 2.0 image/dll, I get the one from .NET 4.6.2.\r\n\r\nDependency Tree:\r\n - ConsoleApp2 [.net4.8] > ClassLibrary1 [.netstandard2.0] > Lucene.Net 4.8.0-beta00017\r\n\r\n![image](https://github.com/user-attachments/assets/458a672d-8ab2-4999-8500-0053c393329a)\r\n\r\nI also did binary comparisons. (Well hex comparison using beyond compare). But that is technically a binary comparison just displaying the bytes in hex.\r\n\r\nYes, I WON'T say that I am not a little surprised my self >.<... But only a little... I would encurage you to try it out your self.\r\n\r\nNow this raises some other serious questions about how this can break things if you used it maliciously >.<... But... Hmmm. (I Really doubt they do some huristics to ensure that the targeted one is actually truely compatible but I don't know, all I can see is that the .netstandard2.0 output from Lucene.NET does not end up in any of the end results I tested)\r\n\r\nAs far as going for testing where ClassLibrary1 would be a Nuget packages instead, I have ONLY tested the .NET 4.8 scenario (this is what we have a couple of at work) and that gives the same experience. So I ASSUME that if I where to target that package from .NET 8 I would also replicate what I see here locally.\r\n\r\nSo my conclussion for now is that it's your \"ROOT\" project that determines which image that gets selected, not any intermediate projects or packages.\r\n\r\nSo it seems you actually essentially don't pay any penalties. And this would seem this only occur if Lucene under .net8.0 and .net462 had a \"SuperSlowAddDocument\" AND a \"SuperFastAddDocument\" where .netstandard2.0 only had \"SuperSlowAddDocument\" method due to limitations in the API surfaces. Then ClassLibrary1 could not use \"SuperFastAddDocument\" and would have to stick with the \"SuperSlowAddDocument\" implementation hence you only get to use the slow version.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518027802/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518035078","html_url":"https://github.com/apache/lucenenet/pull/1056#issuecomment-2518035078","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1056","id":2518035078,"node_id":"IC_kwDOAAJ06c6WFiqG","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T17:02:06Z","updated_at":"2024-12-04T17:02:06Z","author_association":"CONTRIBUTOR","body":"\r\n> This is a draft PR, because I'm currently unsure about whether to override Equals and GetHashCode (and if so, how exactly to do that, i.e. what to compare) for QualityQuery. @NightOwl888 - please let me know your thoughts.\r\n> \r\n\r\nWell, being that they didn't override the default behavior (which is reference equality), a direct port would be to override each and then cascade the call to the base class.\r\n\r\n--------------------\r\n\r\nBut given the fact that the comparer uses `queryID` and it says \"ID of this quality query\" for a description, it would probably be best to use that to compare for equality/hash code. It would keep the equality and compare checks exactly in sync.\r\n\r\nBTW - I noticed that the `QualityQuery.CompareTo()` implementation has an exception handler that we can remove because we can use `int.TryParse()` and fallback to string comparison if parsing either side returns `false`.\r\n\r\n```c#\r\n        public virtual int CompareTo(QualityQuery other)\r\n        {\r\n            try\r\n            {\r\n                // compare as ints when ids ints\r\n                int n = int.Parse(queryID, CultureInfo.InvariantCulture);\r\n                int nOther = int.Parse(other.queryID, CultureInfo.InvariantCulture);\r\n                return n - nOther;\r\n            }\r\n            catch (Exception e) when (e.IsNumberFormatException())\r\n            {\r\n                // fall back to string comparison\r\n                return queryID.CompareToOrdinal(other.queryID);\r\n            }\r\n        }\r\n```\r\n\r\nThe constructor could also be improved by using guard clauses on `queryID` and `nameValPairs` since there will be NREs if either is passed `null`. If we do so, we don't need to change `CompareTo()` to account for the fact that `queryID` may be `null` (which it currently doesn't handle).\r\n\r\n`#nullable enable` would catch this sort of thing.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518035078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518072642","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2518072642","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2518072642,"node_id":"IC_kwDOAAJ06c6WFr1C","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T17:18:05Z","updated_at":"2024-12-04T17:18:05Z","author_association":"CONTRIBUTOR","body":"Okay, that is a bit puzzling.\r\n\r\nIf you have a completely different API that is conditionally compiled for `netstandard2.0` vs `net462`, that would certainly break if it were the case.\r\n\r\n```c#\r\npublic class SomeClass\r\n{\r\n#if NETSTANDARD2_0\r\n    public static void SomeMethod()\r\n    {\r\n    }\r\n#else\r\n    public static void SomeMethod2()\r\n    {\r\n    }\r\n#endif\r\n}\r\n```\r\n\r\nIf your `ClassLibrary1` project targeting `netstandard2.0` called a multi-targeted assembly with this class in it, does your call to `SomeMethod()` inside of `ClassLibrary1` break?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518072642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518084671","html_url":"https://github.com/apache/lucenenet/issues/1041#issuecomment-2518084671","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1041","id":2518084671,"node_id":"IC_kwDOAAJ06c6WFuw_","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T17:23:47Z","updated_at":"2024-12-04T17:33:54Z","author_association":"CONTRIBUTOR","body":"> Okay, that is a bit puzzling.\r\n> \r\n> If you have a completely different API that is conditionally compiled for `netstandard2.0` vs `net462`, that would certainly break if it were the case.\r\n> \r\n> ```cs\r\n> public class SomeClass\r\n> {\r\n> #if NETSTANDARD2_0\r\n>     public static void SomeMethod()\r\n>     {\r\n>     }\r\n> #else\r\n>     public static void SomeMethod2()\r\n>     {\r\n>     }\r\n> #endif\r\n> }\r\n> ```\r\n> \r\n> If your `ClassLibrary1` project targeting `netstandard2.0` called a multi-targeted assembly with this class in it, does your call to `SomeMethod()` inside of `ClassLibrary1` break?\r\n\r\nYes, that was what I was refering to when I said it would seem that you could certainly be malicious here. (It could also happen unintentionally). Unless they do some crazy huristic scan and pick based on that but I REALLY doubt that.\r\n\r\nIt would be a bit more complicated to set up an example to test that I think and I don't feel like I have the time for that right now, although I am currious.\r\n\r\nBut if you think about the intention of NET Standard, and stick with that intention, the output targeting NET Standard SHOULD be the common subset that is shared between you NET 8 and NET 462 output (From your public API's/Contracts perspective that is, implementations can ofc differ), it should not add ADDITIONAL stuff.\r\n\r\nYour example would violate that pritty hard.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518084671/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518793577","html_url":"https://github.com/apache/lucenenet/issues/1024#issuecomment-2518793577","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1024","id":2518793577,"node_id":"IC_kwDOAAJ06c6WIb1p","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-04T23:53:09Z","updated_at":"2024-12-04T23:53:09Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Can you point me to where \"It is caught in several places to do a fallback\"? I reviewed all usages of `UTF8toUTF16(byte[], int, int, CharsRef)`, as well as `UTF8toUTF16(BytesRef, CharsRef)` that calls it, and `BytesRef.Utf8ToString()` that calls it as well, and the only case I see is in `BlockTreeTermsWriter.PendingBlock.PendingBlocksFormatter` which catches `IndexOutOfRangeException` if thrown by `PendingBlock.ToString()`. I have fixed that case, but since you mentioned \"several\" I want to make sure I'm not missing some.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2518793577/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2519110001","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2519110001","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2519110001,"node_id":"IC_kwDOAAJ06c6WJpFx","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-05T04:57:35Z","updated_at":"2024-12-05T04:57:35Z","author_association":"CONTRIBUTOR","body":"I don't have a solution to that failing test, but I've created a draft PR with my work on this: #1058. It worked out pretty well I think to have TokenStreamComponents be IDisposable, and to create a disposable wrapper around JCG.Dictionary for PerFieldReuseStrategy. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2519110001/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2519228615","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2519228615","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2519228615,"node_id":"IC_kwDOAAJ06c6WKGDH","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-05T05:40:18Z","updated_at":"2024-12-05T05:40:18Z","author_association":"CONTRIBUTOR","body":"> I don't have a solution to that failing test\r\n\r\nAs [pointed out above](https://github.com/apache/lucenenet/issues/271#issuecomment-973005744), the backported test failed in Java as well. \r\n\r\n> And after translating it to Java, **it still fails**\r\n\r\nHowever, IIRC there were still some problems with managing the state of the `TokenStream` where the execution paths diverge between .NET and Java. when stepping through. I think it had something to do with whether `WordDelimiterFlags.CATENATE_NUMBERS` is included in the test, which was controlled by another condition (this may have been fixed in a later version of Lucene).\r\n\r\n> I discovered this is primarily due to the fact that some flags are not supported during indexing: https://stackoverflow.com/a/66478863/, and confirmed that removing the `WordDelimiterFlags.CATENATE_NUMBERS` flag makes the test pass.\r\n>\r\n> In `TestRandomChains`, `WordDelimiterFilter` is added to the `brokenOffsetsConstructors` dictionary. This causes [`offsetsAreCorrect` to be set to `true`](https://github.com/apache/lucenenet/blob/03bc03bb5bcb74d12524cc9c0d85e501473a4445/src/Lucene.Net.Tests.Analysis.Common/Analysis/Core/TestRandomChains.cs#L1028), which [`BaseTokenStreamTestCase.CheckAnalysisConsistency`](https://github.com/apache/lucenenet/blob/03bc03bb5bcb74d12524cc9c0d85e501473a4445/src/Lucene.Net.TestFramework/Analysis/BaseTokenStreamTestCase.cs#L1014) is supposed to handle. `BaseTokenStreamTestCase` has been changed from its original implementation to include try-finally and using blocks (both in [`CheckAnalysisConsistency()`](https://github.com/apache/lucenenet/blob/03bc03bb5bcb74d12524cc9c0d85e501473a4445/src/Lucene.Net.TestFramework/Analysis/BaseTokenStreamTestCase.cs#L1038) and in [`AssertTokenStreamContents()`](https://github.com/apache/lucenenet/blob/03bc03bb5bcb74d12524cc9c0d85e501473a4445/src/Lucene.Net.TestFramework/Analysis/BaseTokenStreamTestCase.cs#L144-L148) and that is where we are running into trouble.\r\n>\r\n> Long story short, this circles back to the fact that we converted the `Closable` interface in Java to `IDisposable` in .NET on `TokenStream`. But `TokenStream`'s `close()` method has preconditions that must be met or it will throw an exception. The exception doesn't play well when you are trying to close open `TextReader`s successfully. Before these finally blocks were put into place to call `Dispose()` one failing analysis test would cause nearly all of them to fail.\r\n\r\nThere is some context that I failed to document between the last two paragraphs, but it shouldn't be too hard to figure out why I thought this was failing due to the addition of the try-finally blocks.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2519228615/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2520173569","html_url":"https://github.com/apache/lucenenet/issues/1053#issuecomment-2520173569","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1053","id":2520173569,"node_id":"IC_kwDOAAJ06c6WNswB","user":{"login":"klacol","id":10479772,"node_id":"MDQ6VXNlcjEwNDc5Nzcy","avatar_url":"https://avatars.githubusercontent.com/u/10479772?v=4","gravatar_id":"","url":"https://api.github.com/users/klacol","html_url":"https://github.com/klacol","followers_url":"https://api.github.com/users/klacol/followers","following_url":"https://api.github.com/users/klacol/following{/other_user}","gists_url":"https://api.github.com/users/klacol/gists{/gist_id}","starred_url":"https://api.github.com/users/klacol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/klacol/subscriptions","organizations_url":"https://api.github.com/users/klacol/orgs","repos_url":"https://api.github.com/users/klacol/repos","events_url":"https://api.github.com/users/klacol/events{/privacy}","received_events_url":"https://api.github.com/users/klacol/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-05T12:22:23Z","updated_at":"2024-12-05T12:22:23Z","author_association":"NONE","body":"> Thanks for this issue report. Are you referring to the demo code on the homepage?\r\n\r\nI am referring to this page: https://lucenenet.apache.org/\r\n\r\nIt only worked for me with this \r\n\r\n```\r\ndotnet add package Lucene.Net --prerelease\r\ndotnet add package Lucene.Net.Analysis.Common --prerelease\r\n```\r\n\r\nI think the content in the black box should reflect this.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2520173569/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2520553616","html_url":"https://github.com/apache/lucenenet/issues/1053#issuecomment-2520553616","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1053","id":2520553616,"node_id":"IC_kwDOAAJ06c6WPJiQ","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-05T14:58:46Z","updated_at":"2024-12-05T14:58:46Z","author_association":"CONTRIBUTOR","body":"Great point, thank you for clarifying. We also intend on adding a demo template, but I think we can improve the instructions here about the other packages required.\r\n\r\nI'm also wondering if it would be helpful to create a \"Lucene.Net.StarterPack\" NuGet package that has no code itself but brings in common Lucene.NET packages like Analysis.Common, and possibly some common others like QueryParser, Facet, and Highlighter... we could then use this single package in the quick start on the homepage.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2520553616/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2520840302","html_url":"https://github.com/apache/lucenenet/issues/827#issuecomment-2520840302","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/827","id":2520840302,"node_id":"IC_kwDOAAJ06c6WQPhu","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-05T16:29:21Z","updated_at":"2024-12-05T16:29:21Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Can you provide more information on how to reproduce this one? As written, I inferred this to mean that if you have an environment variable named `tests:crashmode` that it would throw an exception, and I don't experience that behavior. The environment variable is just ignored, since it doesn't have the `lucene:` prefix. It also doesn't seem to be an issue if you accidentally request a SystemProperties key _with_ the prefix (where it should not have the prefix in code), it just won't have the value. Can you provide a stack trace of where this is coming from, or steps to reproduce? Maybe I'm just not understanding something.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2520840302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2521096150","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2521096150","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2521096150,"node_id":"IC_kwDOAAJ06c6WRN_W","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-05T18:14:18Z","updated_at":"2024-12-05T18:14:18Z","author_association":"CONTRIBUTOR","body":"This is awesome analysis and well-written, thanks @NightOwl888. I might take this one after I finish up a few others I'm working on, if no one else jumps on it in the meantime.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2521096150/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2523882295","html_url":"https://github.com/apache/lucenenet/issues/669#issuecomment-2523882295","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/669","id":2523882295,"node_id":"IC_kwDOAAJ06c6Wb2M3","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-06T18:08:46Z","updated_at":"2024-12-06T18:08:46Z","author_association":"CONTRIBUTOR","body":"There are many remaining unused private methods and properties at the sonar link in the original description. I've updated the title to indicate that those should be removed as well.\r\n\r\n@NightOwl888 let me know if you disagree.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2523882295/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]