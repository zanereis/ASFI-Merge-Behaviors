[{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612873815","html_url":"https://github.com/apache/storm/issues/5393#issuecomment-2612873815","issue_url":"https://api.github.com/repos/apache/storm/issues/5393","id":2612873815,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzM4MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T08:45:16Z","updated_at":"2025-01-24T16:02:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=arunmahadevan\">arunmahadevan</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Cody\" class=\"user-hover\" rel=\"Cody\">Cody</a> merged to master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612873815/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647186","html_url":"https://github.com/apache/storm/issues/5082#issuecomment-2612647186","issue_url":"https://api.github.com/repos/apache/storm/issues/5082","id":2612647186,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDcxODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T08:46:39Z","updated_at":"2025-01-24T14:21:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1069#discussion_r53750693\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1069#discussion_r53750693</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -0,0 +1,127 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.task.OutputCollector;<br/>\n    +import org.apache.storm.task.TopologyContext;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.TupleUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class Acker implements IBolt {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Acker.class);<br/>\n    +<br/>\n    +    private static final long serialVersionUID = 4430906880683183091L;<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = \"__acker\";<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = \"__ack_init\";<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = \"__ack_ack\";<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = \"__ack_fail\";<br/>\n    +<br/>\n    +    public static final int TIMEOUT_BUCKET_NUM = 3;<br/>\n    +<br/>\n    +    private OutputCollector collector;<br/>\n    +    private RotatingMap<Object, AckObject> pending;<br/>\n    +<br/>\n    +    private class AckObject {<br/>\n    +public long val = 0L;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Actually, in clojure code, it also uses 0 as default value since the val will be xor with the value get from tuple.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647186/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874975","html_url":"https://github.com/apache/storm/issues/5401#issuecomment-2612874975","issue_url":"https://api.github.com/repos/apache/storm/issues/5401","id":2612874975,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzQ5NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T08:46:41Z","updated_at":"2025-01-24T16:03:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=arunmahadevan\">arunmahadevan</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=satish.duggana\" class=\"user-hover\" rel=\"satish.duggana\">Satish Duggana</a> merged to master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604204","html_url":"https://github.com/apache/storm/issues/4903#issuecomment-2612604204","issue_url":"https://api.github.com/repos/apache/storm/issues/4903","id":2612604204,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDQyMDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T10:36:17Z","updated_at":"2025-01-24T14:02:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user lujinhong opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1140\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1140</a></p>\n\n<p>     <a href=\"https://issues.apache.org/jira/browse/STORM-1065\" title=\"storm-kafka : kafka-partition can not find leader in zookeeper \" class=\"issue-link\" data-issue-key=\"STORM-1065\"><del>STORM-1065</del></a> kafka-partition can not find leader in zookeeper #1132 </p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/lujinhong/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/lujinhong/storm</a> master</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1140.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1140.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1140</p>\n\n<hr />\n<p>commit f01f0c1953500d2b23b5f0b6c0fa1083a46a984f<br/>\nAuthor: lujinhong <lujinhong2@gmail.com><br/>\nDate:   2016-02-23T10:23:23Z</p>\n\n<p>    Update KafkaUtils.java</p>\n\n<p>    add checkLeader() to check if the leader is active.</p>\n\n<p>commit ad610ee71149f793f986e6ad8085f1370c1317c0<br/>\nAuthor: lujinhong <lujinhong2@gmail.com><br/>\nDate:   2016-02-23T10:25:22Z</p>\n\n<p>    Update ZkCoordinator.java</p>\n\n<p>    if leader of the patition is not active, do not add to _manager.</p>\n\n<p>commit 020ef1d1cf87fe19ca0e26f3043bf05d0d4f95b7<br/>\nAuthor: lujinhong <lujinhong2@gmail.com><br/>\nDate:   2016-02-23T10:30:17Z</p>\n\n<p>    Update PartitionManager.java</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604208","html_url":"https://github.com/apache/storm/issues/4903#issuecomment-2612604208","issue_url":"https://api.github.com/repos/apache/storm/issues/4903","id":2612604208,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDQyMDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T10:38:50Z","updated_at":"2025-01-24T14:02:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user lujinhong closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1132\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1132</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604208/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875442","html_url":"https://github.com/apache/storm/issues/5405#issuecomment-2612875442","issue_url":"https://api.github.com/repos/apache/storm/issues/5405","id":2612875442,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU0NDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T12:34:11Z","updated_at":"2025-01-24T16:03:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user arunmahadevan opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1141\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1141</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1570\" title=\"Support nested field lookup in Storm sql\" class=\"issue-link\" data-issue-key=\"STORM-1570\"><del>STORM-1570</del></a> Storm SQL support for nested fields and UDF</p>\n\n<p>    Added support to handle array, map and nested field lookups and user defined functions<br/>\n    in Storm SQL.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/arunmahadevan/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/arunmahadevan/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1570\" title=\"Support nested field lookup in Storm sql\" class=\"issue-link\" data-issue-key=\"STORM-1570\"><del>STORM-1570</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1141.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1141.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1141</p>\n\n<hr />\n<p>commit e6464f7d89439c807c901a4dba4d88a5a7d9d4f7<br/>\nAuthor: Arun Mahadevan <aiyer@hortonworks.com><br/>\nDate:   2016-02-20T06:28:59Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1570\" title=\"Support nested field lookup in Storm sql\" class=\"issue-link\" data-issue-key=\"STORM-1570\"><del>STORM-1570</del></a> Storm SQL support for nested fields and UDF</p>\n\n<p>    Added support to handle array, map and nested field lookups and user defined functions<br/>\n    in Storm SQL.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875709","html_url":"https://github.com/apache/storm/issues/5407#issuecomment-2612875709","issue_url":"https://api.github.com/repos/apache/storm/issues/5407","id":2612875709,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU3MDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T15:18:46Z","updated_at":"2025-01-24T16:03:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user hustfxj opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1142\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1142</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1572\" title=\"throw NPE when parsing the command line arguments by CLI\" class=\"issue-link\" data-issue-key=\"STORM-1572\"><del>STORM-1572</del></a> throw NPE when parsing the command line arguments by CLI</p>\n\n<p>    $ storm kill test<br/>\n    Running: /data/nfs_share/soft/jdk1.7.0_79/bin/java -client -Ddaemon.name= -Dstorm.options= -Dstorm.home=/data/nfs_share/soft/storm -Dstorm.log.dir=/home/admin/storm_logs -Djava.library.path=/usr/local/lib -Dstorm.conf.file= -cp /data/nfs_share/soft/storm/lib/servlet-api-2.5.jar:/data/nfs_share/soft/storm/lib/slf4j-api-1.7.7.jar:/data/nfs_share/soft/storm/lib/log4j-over-slf4j-1.6.6.jar:/data/nfs_share/soft/storm/lib/reflectasm-1.07-shaded.jar:/data/nfs_share/soft/storm/lib/log4j-api-2.1.jar:/data/nfs_share/soft/storm/lib/storm-core-2.0.0-SNAPSHOT.jar:/data/nfs_share/soft/storm/lib/log4j-core-2.1.jar:/data/nfs_share/soft/storm/lib/kryo-2.21.jar:/data/nfs_share/soft/storm/lib/clojure-1.7.0.jar:/data/nfs_share/soft/storm/lib/log4j-slf4j-impl-2.1.jar:/data/nfs_share/soft/storm/lib/minlog-1.2.jar:/data/nfs_share/soft/storm/lib/disruptor-3.3.2.jar:/data/nfs_share/soft/storm/lib/asm-4.0.jar:/home/admin/.storm:/data/nfs_share/soft/storm/bin org.apache.storm.command.KillTopology test<br/>\n    Exception in thread \"main\" java.lang.NullPointerException<br/>\n    at org.apache.storm.command.CLI$CLIBuilder.parse(CLI.java:243)<br/>\n    at org.apache.storm.command.KillTopology.main(KillTopology.java:33)</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/hustfxj/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/hustfxj/storm</a> 0223</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1142.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1142.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1142</p>\n\n<hr />\n<p>commit 3af457f8cd3dec53af969a70f7f5238b4502dada<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-23T15:11:44Z</p>\n\n<p>    fix CLI about parsing the command line arguments</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875709/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187738243","html_url":"https://github.com/apache/storm/pull/1142#issuecomment-187738243","issue_url":"https://api.github.com/repos/apache/storm/issues/1142","id":187738243,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NzczODI0Mw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T15:20:15Z","updated_at":"2016-02-23T15:20:15Z","author_association":"CONTRIBUTOR","body":"+1 I guess I never did test without a -w option.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187738243/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875711","html_url":"https://github.com/apache/storm/issues/5407#issuecomment-2612875711","issue_url":"https://api.github.com/repos/apache/storm/issues/5407","id":2612875711,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU3MTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T15:20:16Z","updated_at":"2025-01-24T16:03:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1142#issuecomment-187738243\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1142#issuecomment-187738243</a></p>\n\n<p>    +1 I guess I never did test without a -w option.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875711/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653888","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653888","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653888,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM4ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:01:14Z","updated_at":"2025-01-24T14:24:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53800916\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53800916</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java &#8212;<br/>\n    @@ -0,0 +1,261 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.ClusterWorkerHeartbeat;<br/>\n    +import org.apache.storm.generated.ExecutorInfo;<br/>\n    +import org.apache.storm.generated.ExecutorStats;<br/>\n    +import org.apache.storm.generated.ProfileAction;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.zookeeper.ZooDefs;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Id;<br/>\n    +import org.apache.zookeeper.server.auth.DigestAuthenticationProvider;<br/>\n    +<br/>\n    +import java.io.PrintWriter;<br/>\n    +import java.io.StringWriter;<br/>\n    +import java.io.UnsupportedEncodingException;<br/>\n    +import java.net.URLEncoder;<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class ClusterUtils {<br/>\n    +<br/>\n    +    public static final String ZK_SEPERATOR = \"/\";<br/>\n    +<br/>\n    +    public static final String ASSIGNMENTS_ROOT = \"assignments\";<br/>\n    +    public static final String CODE_ROOT = \"code\";<br/>\n    +    public static final String STORMS_ROOT = \"storms\";<br/>\n    +    public static final String SUPERVISORS_ROOT = \"supervisors\";<br/>\n    +    public static final String WORKERBEATS_ROOT = \"workerbeats\";<br/>\n    +    public static final String BACKPRESSURE_ROOT = \"backpressure\";<br/>\n    +    public static final String ERRORS_ROOT = \"errors\";<br/>\n    +    public static final String BLOBSTORE_ROOT = \"blobstore\";<br/>\n    +    public static final String BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_ROOT = \"blobstoremaxkeysequencenumber\";<br/>\n    +    public static final String NIMBUSES_ROOT = \"nimbuses\";<br/>\n    +    public static final String CREDENTIALS_ROOT = \"credentials\";<br/>\n    +    public static final String LOGCONFIG_ROOT = \"logconfigs\";<br/>\n    +    public static final String PROFILERCONFIG_ROOT = \"profilerconfigs\";<br/>\n    +<br/>\n    +    public static final String ASSIGNMENTS_SUBTREE = ZK_SEPERATOR + ASSIGNMENTS_ROOT;<br/>\n    +    public static final String STORMS_SUBTREE = ZK_SEPERATOR + STORMS_ROOT;<br/>\n    +    public static final String SUPERVISORS_SUBTREE = ZK_SEPERATOR + SUPERVISORS_ROOT;<br/>\n    +    public static final String WORKERBEATS_SUBTREE = ZK_SEPERATOR + WORKERBEATS_ROOT;<br/>\n    +    public static final String BACKPRESSURE_SUBTREE = ZK_SEPERATOR + BACKPRESSURE_ROOT;<br/>\n    +    public static final String ERRORS_SUBTREE = ZK_SEPERATOR + ERRORS_ROOT;<br/>\n    +    public static final String BLOBSTORE_SUBTREE = ZK_SEPERATOR + BLOBSTORE_ROOT;<br/>\n    +    public static final String BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_SUBTREE = ZK_SEPERATOR + BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_ROOT;<br/>\n    +    public static final String NIMBUSES_SUBTREE = ZK_SEPERATOR + NIMBUSES_ROOT;<br/>\n    +    public static final String CREDENTIALS_SUBTREE = ZK_SEPERATOR + CREDENTIALS_ROOT;<br/>\n    +    public static final String LOGCONFIG_SUBTREE = ZK_SEPERATOR + LOGCONFIG_ROOT;<br/>\n    +    public static final String PROFILERCONFIG_SUBTREE = ZK_SEPERATOR + PROFILERCONFIG_ROOT;<br/>\n    +<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static final ClusterUtils INSTANCE = new ClusterUtils();<br/>\n    +    private static ClusterUtils _instance = INSTANCE;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use. To mock out delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     *<br/>\n    +     * @param u a Cluster instance<br/>\n    +     */<br/>\n    +    public static void setInstance(ClusterUtils u) </p>\n{\n    +_instance = u;\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Resets the singleton instance to the default. This is helpful to reset the class to its original functionality when mocking is no longer desired.<br/>\n    +     */<br/>\n    +    public static void resetInstance() </p>\n{\n    +_instance = INSTANCE;\n    +    }\n<p>    +<br/>\n    +    public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {<br/>\n    +List<ACL> aclList = null;<br/>\n    +String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);<br/>\n    +if (Utils.isZkAuthenticationConfiguredTopology(topoConf)) </p>\n{\n    +    aclList = new ArrayList<>();\n    +    ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);\n    +    aclList.add(acl1);\n    +    ACL acl2 = new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(payload)));\n    +    aclList.add(acl2);\n    +}\n<p>    +return aclList;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorPath(String id) </p>\n{\n    +return SUPERVISORS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String assignmentPath(String id) </p>\n{\n    +return ASSIGNMENTS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String blobstorePath(String key) </p>\n{\n    +return BLOBSTORE_SUBTREE + ZK_SEPERATOR + key;\n    +    }\n<p>    +<br/>\n    +    public static String blobstoreMaxKeySequenceNumberPath(String key) </p>\n{\n    +return BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_SUBTREE + ZK_SEPERATOR + key;\n    +    }\n<p>    +<br/>\n    +    public static String nimbusPath(String id) </p>\n{\n    +return NIMBUSES_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String stormPath(String id) </p>\n{\n    +return STORMS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String workerbeatStormRoot(String stormId) </p>\n{\n    +return WORKERBEATS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String workerbeatPath(String stormId, String node, Long port) </p>\n{\n    +return workerbeatStormRoot(stormId) + ZK_SEPERATOR + node + \"-\" + port;\n    +    }\n<p>    +<br/>\n    +    public static String backpressureStormRoot(String stormId) </p>\n{\n    +return BACKPRESSURE_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String backpressurePath(String stormId, String node, Long port) </p>\n{\n    +return backpressureStormRoot(stormId) + ZK_SEPERATOR + node + \"-\" + port;\n    +    }\n<p>    +<br/>\n    +    public static String errorStormRoot(String stormId) </p>\n{\n    +return ERRORS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String errorPath(String stormId, String componentId) {<br/>\n    +try </p>\n{\n    +    return errorStormRoot(stormId) + ZK_SEPERATOR + URLEncoder.encode(componentId, \"UTF-8\");\n    +}\n<p> catch (UnsupportedEncodingException e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String lastErrorPath(String stormId, String componentId) </p>\n{\n    +return errorPath(stormId, componentId) + \"-last-error\";\n    +    }\n<p>    +<br/>\n    +    public static String credentialsPath(String stormId) </p>\n{\n    +return CREDENTIALS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String logConfigPath(String stormId) </p>\n{\n    +return LOGCONFIG_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String profilerConfigPath(String stormId) </p>\n{\n    +return PROFILERCONFIG_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String profilerConfigPath(String stormId, String host, Long port, ProfileAction requestType) </p>\n{\n    +return profilerConfigPath(stormId) + ZK_SEPERATOR + host + \"_\" + port + \"_\" + requestType;\n    +    }\n<p>    +<br/>\n    +    public static <T> T maybeDeserialize(byte[] serialized, Class<T> clazz) {<br/>\n    +if (serialized != null) </p>\n{\n    +    return Utils.deserialize(serialized, clazz);\n    +}\n<p>    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Ensures that we only return heartbeats for executors assigned to this worker<br/>\n    +     * @param executors<br/>\n    +     * @param workerHeartbeat<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static Map<ExecutorInfo, ExecutorBeat> convertExecutorBeats(List<ExecutorInfo> executors, ClusterWorkerHeartbeat workerHeartbeat) {<br/>\n    +Map<ExecutorInfo, ExecutorBeat> executorWhb = new HashMap<>();<br/>\n    +Map<ExecutorInfo, ExecutorStats> executorStatsMap = workerHeartbeat.get_executor_stats();<br/>\n    +for (ExecutorInfo executor : executors) {<br/>\n    +    if (executorStatsMap.containsKey(executor)) </p>\n{\n    +int time = workerHeartbeat.get_time_secs();\n    +int uptime = workerHeartbeat.get_uptime_secs();\n    +ExecutorStats executorStats = workerHeartbeat.get_executor_stats().get(executor);\n    +ExecutorBeat executorBeat = new ExecutorBeat(time, uptime, executorStats);\n    +executorWhb.put(executor, executorBeat);\n    +    }\n<p>    +}<br/>\n    +return executorWhb;<br/>\n    +    }<br/>\n    +<br/>\n    +    public IStormClusterState mkStormClusterStateImpl(Object stateStorage, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we split this and mkStormClusterState into two methods?  The signature of each are different enough that having them be separate is preferable.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653888/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187766058","html_url":"https://github.com/apache/storm/pull/1143#issuecomment-187766058","issue_url":"https://api.github.com/repos/apache/storm/issues/1143","id":187766058,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzc2NjA1OA==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:06:54Z","updated_at":"2016-02-23T16:06:54Z","author_association":"NONE","body":"I agree that use System.currentTimeMillis() instead of System.nanoTime() will improve performance, but if the code between the timing part is very fast, say, mostly < 1ms, then we possibly won't get useful metrics using System.currentTimeMillis.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187766058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875566","html_url":"https://github.com/apache/storm/issues/5406#issuecomment-2612875566","issue_url":"https://api.github.com/repos/apache/storm/issues/5406","id":2612875566,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU1NjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:06:57Z","updated_at":"2025-01-24T16:03:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1143#issuecomment-187766058\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1143#issuecomment-187766058</a></p>\n\n<p>    I agree that use System.currentTimeMillis() instead of System.nanoTime() will improve performance, but if the code between the timing part is very fast, say, mostly < 1ms, then we possibly won't get useful metrics using System.currentTimeMillis.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875566/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653893","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653893","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653893,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM4OTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:38:35Z","updated_at":"2025-01-24T14:24:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53807669\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53807669</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java &#8212;<br/>\n    @@ -0,0 +1,261 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.ClusterWorkerHeartbeat;<br/>\n    +import org.apache.storm.generated.ExecutorInfo;<br/>\n    +import org.apache.storm.generated.ExecutorStats;<br/>\n    +import org.apache.storm.generated.ProfileAction;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.zookeeper.ZooDefs;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Id;<br/>\n    +import org.apache.zookeeper.server.auth.DigestAuthenticationProvider;<br/>\n    +<br/>\n    +import java.io.PrintWriter;<br/>\n    +import java.io.StringWriter;<br/>\n    +import java.io.UnsupportedEncodingException;<br/>\n    +import java.net.URLEncoder;<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class ClusterUtils {<br/>\n    +<br/>\n    +    public static final String ZK_SEPERATOR = \"/\";<br/>\n    +<br/>\n    +    public static final String ASSIGNMENTS_ROOT = \"assignments\";<br/>\n    +    public static final String CODE_ROOT = \"code\";<br/>\n    +    public static final String STORMS_ROOT = \"storms\";<br/>\n    +    public static final String SUPERVISORS_ROOT = \"supervisors\";<br/>\n    +    public static final String WORKERBEATS_ROOT = \"workerbeats\";<br/>\n    +    public static final String BACKPRESSURE_ROOT = \"backpressure\";<br/>\n    +    public static final String ERRORS_ROOT = \"errors\";<br/>\n    +    public static final String BLOBSTORE_ROOT = \"blobstore\";<br/>\n    +    public static final String BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_ROOT = \"blobstoremaxkeysequencenumber\";<br/>\n    +    public static final String NIMBUSES_ROOT = \"nimbuses\";<br/>\n    +    public static final String CREDENTIALS_ROOT = \"credentials\";<br/>\n    +    public static final String LOGCONFIG_ROOT = \"logconfigs\";<br/>\n    +    public static final String PROFILERCONFIG_ROOT = \"profilerconfigs\";<br/>\n    +<br/>\n    +    public static final String ASSIGNMENTS_SUBTREE = ZK_SEPERATOR + ASSIGNMENTS_ROOT;<br/>\n    +    public static final String STORMS_SUBTREE = ZK_SEPERATOR + STORMS_ROOT;<br/>\n    +    public static final String SUPERVISORS_SUBTREE = ZK_SEPERATOR + SUPERVISORS_ROOT;<br/>\n    +    public static final String WORKERBEATS_SUBTREE = ZK_SEPERATOR + WORKERBEATS_ROOT;<br/>\n    +    public static final String BACKPRESSURE_SUBTREE = ZK_SEPERATOR + BACKPRESSURE_ROOT;<br/>\n    +    public static final String ERRORS_SUBTREE = ZK_SEPERATOR + ERRORS_ROOT;<br/>\n    +    public static final String BLOBSTORE_SUBTREE = ZK_SEPERATOR + BLOBSTORE_ROOT;<br/>\n    +    public static final String BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_SUBTREE = ZK_SEPERATOR + BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_ROOT;<br/>\n    +    public static final String NIMBUSES_SUBTREE = ZK_SEPERATOR + NIMBUSES_ROOT;<br/>\n    +    public static final String CREDENTIALS_SUBTREE = ZK_SEPERATOR + CREDENTIALS_ROOT;<br/>\n    +    public static final String LOGCONFIG_SUBTREE = ZK_SEPERATOR + LOGCONFIG_ROOT;<br/>\n    +    public static final String PROFILERCONFIG_SUBTREE = ZK_SEPERATOR + PROFILERCONFIG_ROOT;<br/>\n    +<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static final ClusterUtils INSTANCE = new ClusterUtils();<br/>\n    +    private static ClusterUtils _instance = INSTANCE;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use. To mock out delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     *<br/>\n    +     * @param u a Cluster instance<br/>\n    +     */<br/>\n    +    public static void setInstance(ClusterUtils u) </p>\n{\n    +_instance = u;\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Resets the singleton instance to the default. This is helpful to reset the class to its original functionality when mocking is no longer desired.<br/>\n    +     */<br/>\n    +    public static void resetInstance() </p>\n{\n    +_instance = INSTANCE;\n    +    }\n<p>    +<br/>\n    +    public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {<br/>\n    +List<ACL> aclList = null;<br/>\n    +String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);<br/>\n    +if (Utils.isZkAuthenticationConfiguredTopology(topoConf)) </p>\n{\n    +    aclList = new ArrayList<>();\n    +    ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);\n    +    aclList.add(acl1);\n    +    ACL acl2 = new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(payload)));\n    +    aclList.add(acl2);\n    +}\n<p>    +return aclList;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorPath(String id) </p>\n{\n    +return SUPERVISORS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String assignmentPath(String id) </p>\n{\n    +return ASSIGNMENTS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String blobstorePath(String key) </p>\n{\n    +return BLOBSTORE_SUBTREE + ZK_SEPERATOR + key;\n    +    }\n<p>    +<br/>\n    +    public static String blobstoreMaxKeySequenceNumberPath(String key) </p>\n{\n    +return BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_SUBTREE + ZK_SEPERATOR + key;\n    +    }\n<p>    +<br/>\n    +    public static String nimbusPath(String id) </p>\n{\n    +return NIMBUSES_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String stormPath(String id) </p>\n{\n    +return STORMS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String workerbeatStormRoot(String stormId) </p>\n{\n    +return WORKERBEATS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String workerbeatPath(String stormId, String node, Long port) </p>\n{\n    +return workerbeatStormRoot(stormId) + ZK_SEPERATOR + node + \"-\" + port;\n    +    }\n<p>    +<br/>\n    +    public static String backpressureStormRoot(String stormId) </p>\n{\n    +return BACKPRESSURE_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String backpressurePath(String stormId, String node, Long port) </p>\n{\n    +return backpressureStormRoot(stormId) + ZK_SEPERATOR + node + \"-\" + port;\n    +    }\n<p>    +<br/>\n    +    public static String errorStormRoot(String stormId) </p>\n{\n    +return ERRORS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String errorPath(String stormId, String componentId) {<br/>\n    +try </p>\n{\n    +    return errorStormRoot(stormId) + ZK_SEPERATOR + URLEncoder.encode(componentId, \"UTF-8\");\n    +}\n<p> catch (UnsupportedEncodingException e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String lastErrorPath(String stormId, String componentId) </p>\n{\n    +return errorPath(stormId, componentId) + \"-last-error\";\n    +    }\n<p>    +<br/>\n    +    public static String credentialsPath(String stormId) </p>\n{\n    +return CREDENTIALS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String logConfigPath(String stormId) </p>\n{\n    +return LOGCONFIG_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String profilerConfigPath(String stormId) </p>\n{\n    +return PROFILERCONFIG_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String profilerConfigPath(String stormId, String host, Long port, ProfileAction requestType) </p>\n{\n    +return profilerConfigPath(stormId) + ZK_SEPERATOR + host + \"_\" + port + \"_\" + requestType;\n    +    }\n<p>    +<br/>\n    +    public static <T> T maybeDeserialize(byte[] serialized, Class<T> clazz) {<br/>\n    +if (serialized != null) </p>\n{\n    +    return Utils.deserialize(serialized, clazz);\n    +}\n<p>    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Ensures that we only return heartbeats for executors assigned to this worker<br/>\n    +     * @param executors<br/>\n    +     * @param workerHeartbeat<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static Map<ExecutorInfo, ExecutorBeat> convertExecutorBeats(List<ExecutorInfo> executors, ClusterWorkerHeartbeat workerHeartbeat) {<br/>\n    +Map<ExecutorInfo, ExecutorBeat> executorWhb = new HashMap<>();<br/>\n    +Map<ExecutorInfo, ExecutorStats> executorStatsMap = workerHeartbeat.get_executor_stats();<br/>\n    +for (ExecutorInfo executor : executors) {<br/>\n    +    if (executorStatsMap.containsKey(executor)) </p>\n{\n    +int time = workerHeartbeat.get_time_secs();\n    +int uptime = workerHeartbeat.get_uptime_secs();\n    +ExecutorStats executorStats = workerHeartbeat.get_executor_stats().get(executor);\n    +ExecutorBeat executorBeat = new ExecutorBeat(time, uptime, executorStats);\n    +executorWhb.put(executor, executorBeat);\n    +    }\n<p>    +}<br/>\n    +return executorWhb;<br/>\n    +    }<br/>\n    +<br/>\n    +    public IStormClusterState mkStormClusterStateImpl(Object stateStorage, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    +if (stateStorage instanceof IStateStorage) </p>\n{\n    +    return new StormClusterStateImpl((IStateStorage) stateStorage, acls, context, false);\n    +}\n<p> else </p>\n{\n    +    IStateStorage Storage = _instance.mkStateStorageImpl((Map) stateStorage, (Map) stateStorage, acls, context);\n    +    return new StormClusterStateImpl(Storage, acls, context, true);\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public IStateStorage mkStateStorageImpl(Map config, Map auth_conf, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    +String className = null;<br/>\n    +IStateStorage stateStorage = null;<br/>\n    +if (config.get(Config.STORM_CLUSTER_STATE_STORE) != null) </p>\n{\n    +    className = (String) config.get(Config.STORM_CLUSTER_STATE_STORE);\n    +}\n<p> else </p>\n{\n    +    className = \"org.apache.storm.cluster.ZKStateStorageFactory\";\n    +}\n<p>    +Class clazz = Class.forName(className);<br/>\n    +StateStorageFactory storageFactory = (StateStorageFactory) clazz.newInstance();<br/>\n    +stateStorage = storageFactory.mkStore(config, auth_conf, acls, context);<br/>\n    +return stateStorage;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IStateStorage mkStateStorage(Map config, Map auth_conf, List<ACL> acls, ClusterStateContext context) throws Exception </p>\n{\n    +return _instance.mkStateStorageImpl(config, auth_conf, acls, context);\n    +    }\n<p>    +<br/>\n    +    public static IStormClusterState mkStormClusterState(Object StateStorage, List<ACL> acls, ClusterStateContext context) throws Exception </p>\n{\n    +return _instance.mkStormClusterStateImpl(StateStorage, acls, context);\n    +    }\n<p>    +<br/>\n    +    public static String stringifyError(Throwable error) {<br/>\n    +String errorString = null;<br/>\n    +StringWriter result = null;<br/>\n    +PrintWriter printWriter = null;<br/>\n    +try {<br/>\n    +    result = new StringWriter();<br/>\n    +    printWriter = new PrintWriter(result);<br/>\n    +    error.printStackTrace(printWriter);<br/>\n    +    if (result != null) </p>\n{\n    +errorString = result.toString();\n    +    }\n<p>    +} finally {<br/>\n    +    try </p>\n{\n    +if (result != null)\n    +    result.close();\n    +if (printWriter != null)\n    +    printWriter.close();\n    +    }\n<p> catch (Exception e) </p>\n{\n    +    }\n<p>    +}<br/>\n    +return errorString;<br/>\n    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This can be made a lot simpler with the java 7 AutoClosable semantics.</p>\n\n<p>    ```<br/>\npublic static String stringifyError(Throwable error) {<br/>\n    try (<br/>\nStringWriter result = new StringWriter();;<br/>\nPrintWriter printWriter = new PrintWriter(result);<br/>\n    )</p>\n{\nerror.printStackTrace(printWriter);\nreturn result.toString();\n    }\n<p>}<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653893/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187782060","html_url":"https://github.com/apache/storm/pull/1143#issuecomment-187782060","issue_url":"https://api.github.com/repos/apache/storm/issues/1143","id":187782060,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzc4MjA2MA==","user":{"login":"darionyaphet","id":4414314,"node_id":"MDQ6VXNlcjQ0MTQzMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/4414314?v=4","gravatar_id":"","url":"https://api.github.com/users/darionyaphet","html_url":"https://github.com/darionyaphet","followers_url":"https://api.github.com/users/darionyaphet/followers","following_url":"https://api.github.com/users/darionyaphet/following{/other_user}","gists_url":"https://api.github.com/users/darionyaphet/gists{/gist_id}","starred_url":"https://api.github.com/users/darionyaphet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darionyaphet/subscriptions","organizations_url":"https://api.github.com/users/darionyaphet/orgs","repos_url":"https://api.github.com/users/darionyaphet/repos","events_url":"https://api.github.com/users/darionyaphet/events{/privacy}","received_events_url":"https://api.github.com/users/darionyaphet/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:40:50Z","updated_at":"2016-02-23T16:40:50Z","author_association":"CONTRIBUTOR","body":"hi @unsleepy22 this metric is use to count time interval when fetch messages from Kafka Broker . In fetchMessage() , it's building a `FetchResponse` , consumer fetch messages from broker and pick out message set . I think it won't be return in 1ms :) \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187782060/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875572","html_url":"https://github.com/apache/storm/issues/5406#issuecomment-2612875572","issue_url":"https://api.github.com/repos/apache/storm/issues/5406","id":2612875572,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU1NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:40:52Z","updated_at":"2025-01-24T16:03:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user darionyaphet commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1143#issuecomment-187782060\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1143#issuecomment-187782060</a></p>\n\n<p>    hi @unsleepy22 this metric is use to count time interval when fetch messages from Kafka Broker . In fetchMessage() , it's building a `FetchResponse` , consumer fetch messages from broker and pick out message set . I think it won't be return in 1ms <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875572/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653903","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653903","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653903,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5MDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:46:41Z","updated_at":"2025-01-24T14:24:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53809224\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53809224</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/PaceMakerStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,212 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.pacemaker.PacemakerClient;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class PaceMakerStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(PaceMakerStateStorage.class);<br/>\n    +<br/>\n    +    private PacemakerClient pacemakerClient;<br/>\n    +    private IStateStorage stateStorage;<br/>\n    +    private static final int maxRetries = 10;<br/>\n    +<br/>\n    +    public PaceMakerStateStorage(PacemakerClient pacemakerClient, IStateStorage stateStorage) throws Exception </p>\n{\n    +this.pacemakerClient = pacemakerClient;\n    +this.stateStorage = stateStorage;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String register(ZKStateChangedCallback callback) </p>\n{\n    +return stateStorage.register(callback);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void unregister(String id) </p>\n{\n    +stateStorage.unregister(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String create_sequential(String path, byte[] data, List<ACL> acls) </p>\n{\n    +return stateStorage.create_sequential(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void mkdirs(String path, List<ACL> acls) </p>\n{\n    +stateStorage.mkdirs(path, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node(String path) </p>\n{\n    +stateStorage.delete_node(path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_ephemeral_node(String path, byte[] data, List<ACL> acls) </p>\n{\n    +stateStorage.set_ephemeral_node(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Integer get_version(String path, boolean watch) throws Exception </p>\n{\n    +return stateStorage.get_version(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public boolean node_exists(String path, boolean watch) </p>\n{\n    +return stateStorage.node_exists(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_children(String path, boolean watch) </p>\n{\n    +return stateStorage.get_children(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +stateStorage.close();\n    +pacemakerClient.close();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_data(String path, byte[] data, List<ACL> acls) </p>\n{\n    +stateStorage.set_data(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_data(String path, boolean watch) </p>\n{\n    +return stateStorage.get_data(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Map get_data_with_version(String path, boolean watch) </p>\n{\n    +return stateStorage.get_data_with_version(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_worker_hb(String path, byte[] data, List<ACL> acls) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBPulse hbPulse = new HBPulse();<br/>\n    +hbPulse.set_id(path);<br/>\n    +hbPulse.set_details(data);<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.SEND_PULSE, HBMessageData.pulse(hbPulse));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.SEND_PULSE_RESPONSE) </p>\n{\n    +    throw new HBExecutionException(\"Invalid Response Type\");\n    +}\n<p>    +LOG.debug(\"Successful set_worker_hb\");<br/>\n    +break;<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +LOG.error(\"{} Failed to set_worker_hb. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Lets move decrementing retry outside of the log message.  It is too easy to delete/comment out a log message and if there are side effects it becomes a problem.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653903/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653908","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653908","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653908,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5MDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:47:19Z","updated_at":"2025-01-24T14:24:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53809357\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53809357</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/PaceMakerStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,212 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.pacemaker.PacemakerClient;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class PaceMakerStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(PaceMakerStateStorage.class);<br/>\n    +<br/>\n    +    private PacemakerClient pacemakerClient;<br/>\n    +    private IStateStorage stateStorage;<br/>\n    +    private static final int maxRetries = 10;<br/>\n    +<br/>\n    +    public PaceMakerStateStorage(PacemakerClient pacemakerClient, IStateStorage stateStorage) throws Exception </p>\n{\n    +this.pacemakerClient = pacemakerClient;\n    +this.stateStorage = stateStorage;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String register(ZKStateChangedCallback callback) </p>\n{\n    +return stateStorage.register(callback);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void unregister(String id) </p>\n{\n    +stateStorage.unregister(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String create_sequential(String path, byte[] data, List<ACL> acls) </p>\n{\n    +return stateStorage.create_sequential(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void mkdirs(String path, List<ACL> acls) </p>\n{\n    +stateStorage.mkdirs(path, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node(String path) </p>\n{\n    +stateStorage.delete_node(path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_ephemeral_node(String path, byte[] data, List<ACL> acls) </p>\n{\n    +stateStorage.set_ephemeral_node(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Integer get_version(String path, boolean watch) throws Exception </p>\n{\n    +return stateStorage.get_version(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public boolean node_exists(String path, boolean watch) </p>\n{\n    +return stateStorage.node_exists(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_children(String path, boolean watch) </p>\n{\n    +return stateStorage.get_children(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +stateStorage.close();\n    +pacemakerClient.close();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_data(String path, byte[] data, List<ACL> acls) </p>\n{\n    +stateStorage.set_data(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_data(String path, boolean watch) </p>\n{\n    +return stateStorage.get_data(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Map get_data_with_version(String path, boolean watch) </p>\n{\n    +return stateStorage.get_data_with_version(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_worker_hb(String path, byte[] data, List<ACL> acls) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBPulse hbPulse = new HBPulse();<br/>\n    +hbPulse.set_id(path);<br/>\n    +hbPulse.set_details(data);<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.SEND_PULSE, HBMessageData.pulse(hbPulse));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.SEND_PULSE_RESPONSE) </p>\n{\n    +    throw new HBExecutionException(\"Invalid Response Type\");\n    +}<br/>\n    +LOG.debug(\"Successful set_worker_hb\");<br/>\n    +break;<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) {\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +LOG.error(\"{} Failed to set_worker_hb. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_worker_hb(String path, boolean watch) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.GET_PULSE, HBMessageData.path(path));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.GET_PULSE_RESPONSE) {    +    throw new HBExecutionException(\"Invalid Response Type\");    +}\n<p>    +LOG.debug(\"Successful get_worker_hb\");<br/>\n    +return response.get_data().get_pulse().get_details();<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +LOG.error(\"{} Failed to get_worker_hb. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Same here, no side effects from a log message please.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653908/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653914","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653914","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653914,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5MTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:47:24Z","updated_at":"2025-01-24T14:24:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53809374\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53809374</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/PaceMakerStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,212 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.pacemaker.PacemakerClient;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class PaceMakerStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(PaceMakerStateStorage.class);<br/>\n    +<br/>\n    +    private PacemakerClient pacemakerClient;<br/>\n    +    private IStateStorage stateStorage;<br/>\n    +    private static final int maxRetries = 10;<br/>\n    +<br/>\n    +    public PaceMakerStateStorage(PacemakerClient pacemakerClient, IStateStorage stateStorage) throws Exception </p>\n{\n    +this.pacemakerClient = pacemakerClient;\n    +this.stateStorage = stateStorage;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String register(ZKStateChangedCallback callback) </p>\n{\n    +return stateStorage.register(callback);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void unregister(String id) </p>\n{\n    +stateStorage.unregister(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String create_sequential(String path, byte[] data, List<ACL> acls) </p>\n{\n    +return stateStorage.create_sequential(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void mkdirs(String path, List<ACL> acls) </p>\n{\n    +stateStorage.mkdirs(path, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node(String path) </p>\n{\n    +stateStorage.delete_node(path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_ephemeral_node(String path, byte[] data, List<ACL> acls) </p>\n{\n    +stateStorage.set_ephemeral_node(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Integer get_version(String path, boolean watch) throws Exception </p>\n{\n    +return stateStorage.get_version(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public boolean node_exists(String path, boolean watch) </p>\n{\n    +return stateStorage.node_exists(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_children(String path, boolean watch) </p>\n{\n    +return stateStorage.get_children(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +stateStorage.close();\n    +pacemakerClient.close();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_data(String path, byte[] data, List<ACL> acls) </p>\n{\n    +stateStorage.set_data(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_data(String path, boolean watch) </p>\n{\n    +return stateStorage.get_data(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Map get_data_with_version(String path, boolean watch) </p>\n{\n    +return stateStorage.get_data_with_version(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_worker_hb(String path, byte[] data, List<ACL> acls) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBPulse hbPulse = new HBPulse();<br/>\n    +hbPulse.set_id(path);<br/>\n    +hbPulse.set_details(data);<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.SEND_PULSE, HBMessageData.pulse(hbPulse));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.SEND_PULSE_RESPONSE) </p>\n{\n    +    throw new HBExecutionException(\"Invalid Response Type\");\n    +}<br/>\n    +LOG.debug(\"Successful set_worker_hb\");<br/>\n    +break;<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) {\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +LOG.error(\"{} Failed to set_worker_hb. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_worker_hb(String path, boolean watch) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.GET_PULSE, HBMessageData.path(path));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.GET_PULSE_RESPONSE) {    +    throw new HBExecutionException(\"Invalid Response Type\");    +}\n<p>    +LOG.debug(\"Successful get_worker_hb\");<br/>\n    +return response.get_data().get_pulse().get_details();<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +LOG.error(\"{} Failed to get_worker_hb. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_worker_hb_children(String path, boolean watch) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.GET_ALL_NODES_FOR_PATH, HBMessageData.path(path));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.GET_ALL_NODES_FOR_PATH_RESPONSE) {\n    +    throw new HBExecutionException(\"Invalid Response Type\");\n    +}<br/>\n    +LOG.debug(\"Successful get_worker_hb\");<br/>\n    +return response.get_data().get_nodes().get_pulseIds();<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +LOG.error(\"{} Failed to get_worker_hb_children. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Same here, no side effects from a log message please.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653914/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653924","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653924","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653924,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5MjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:47:30Z","updated_at":"2025-01-24T14:24:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53809385\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53809385</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/PaceMakerStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,212 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.pacemaker.PacemakerClient;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class PaceMakerStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(PaceMakerStateStorage.class);<br/>\n    +<br/>\n    +    private PacemakerClient pacemakerClient;<br/>\n    +    private IStateStorage stateStorage;<br/>\n    +    private static final int maxRetries = 10;<br/>\n    +<br/>\n    +    public PaceMakerStateStorage(PacemakerClient pacemakerClient, IStateStorage stateStorage) throws Exception </p>\n{\n    +this.pacemakerClient = pacemakerClient;\n    +this.stateStorage = stateStorage;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String register(ZKStateChangedCallback callback) </p>\n{\n    +return stateStorage.register(callback);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void unregister(String id) </p>\n{\n    +stateStorage.unregister(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String create_sequential(String path, byte[] data, List<ACL> acls) </p>\n{\n    +return stateStorage.create_sequential(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void mkdirs(String path, List<ACL> acls) </p>\n{\n    +stateStorage.mkdirs(path, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node(String path) </p>\n{\n    +stateStorage.delete_node(path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_ephemeral_node(String path, byte[] data, List<ACL> acls) </p>\n{\n    +stateStorage.set_ephemeral_node(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Integer get_version(String path, boolean watch) throws Exception </p>\n{\n    +return stateStorage.get_version(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public boolean node_exists(String path, boolean watch) </p>\n{\n    +return stateStorage.node_exists(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_children(String path, boolean watch) </p>\n{\n    +return stateStorage.get_children(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +stateStorage.close();\n    +pacemakerClient.close();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_data(String path, byte[] data, List<ACL> acls) </p>\n{\n    +stateStorage.set_data(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_data(String path, boolean watch) </p>\n{\n    +return stateStorage.get_data(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Map get_data_with_version(String path, boolean watch) </p>\n{\n    +return stateStorage.get_data_with_version(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_worker_hb(String path, byte[] data, List<ACL> acls) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBPulse hbPulse = new HBPulse();<br/>\n    +hbPulse.set_id(path);<br/>\n    +hbPulse.set_details(data);<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.SEND_PULSE, HBMessageData.pulse(hbPulse));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.SEND_PULSE_RESPONSE) </p>\n{\n    +    throw new HBExecutionException(\"Invalid Response Type\");\n    +}<br/>\n    +LOG.debug(\"Successful set_worker_hb\");<br/>\n    +break;<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) {\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +LOG.error(\"{} Failed to set_worker_hb. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_worker_hb(String path, boolean watch) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.GET_PULSE, HBMessageData.path(path));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.GET_PULSE_RESPONSE) {    +    throw new HBExecutionException(\"Invalid Response Type\");    +}\n<p>    +LOG.debug(\"Successful get_worker_hb\");<br/>\n    +return response.get_data().get_pulse().get_details();<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +LOG.error(\"{} Failed to get_worker_hb. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_worker_hb_children(String path, boolean watch) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.GET_ALL_NODES_FOR_PATH, HBMessageData.path(path));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.GET_ALL_NODES_FOR_PATH_RESPONSE) {\n    +    throw new HBExecutionException(\"Invalid Response Type\");\n    +}<br/>\n    +LOG.debug(\"Successful get_worker_hb\");<br/>\n    +return response.get_data().get_nodes().get_pulseIds();<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +LOG.error(\"{} Failed to get_worker_hb_children. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void delete_worker_hb(String path) {<br/>\n    +int retry = maxRetries;<br/>\n    +while (true) {<br/>\n    +    try {<br/>\n    +HBMessage message = new HBMessage(HBServerMessageType.DELETE_PATH, HBMessageData.path(path));<br/>\n    +HBMessage response = pacemakerClient.send(message);<br/>\n    +if (response.get_type() != HBServerMessageType.DELETE_PATH_RESPONSE) </p>\n{\n    +    throw new HBExecutionException(\"Invalid Response Type\");\n    +}\n<p>    +LOG.debug(\"Successful get_worker_hb\");<br/>\n    +break;<br/>\n    +    } catch (Exception e) {<br/>\n    +if (retry <= 0) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +LOG.error(\"{} Failed to delete_worker_hb. Will make {} more attempts.\", e.getMessage(), retry--);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Same here, no side effects from a log message please.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653924/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653931","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653931","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653931,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T16:56:27Z","updated_at":"2025-01-24T14:24:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53811031\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53811031</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/StormClusterStateImpl.java &#8212;<br/>\n    @@ -0,0 +1,687 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import clojure.lang.*;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class StormClusterStateImpl implements IStormClusterState {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(StormClusterStateImpl.class);<br/>\n    +<br/>\n    +    private IStateStorage stateStorage;<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentInfoCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentInfoWithVersionCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentVersionCallback;<br/>\n    +    private AtomicReference<Runnable> supervisorsCallback;<br/>\n    +    // we want to reigister a topo directory getChildren callback for all workers of this dir<br/>\n    +    private ConcurrentHashMap<String, Runnable> backPressureCallback;<br/>\n    +    private AtomicReference<Runnable> assignmentsCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> stormBaseCallback;<br/>\n    +    private AtomicReference<Runnable> blobstoreCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> credentialsCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> logConfigCallback;<br/>\n    +<br/>\n    +    private List<ACL> acls;<br/>\n    +    private String stateId;<br/>\n    +    private boolean solo;<br/>\n    +<br/>\n    +    public StormClusterStateImpl(IStateStorage StateStorage, List<ACL> acls, ClusterStateContext context, boolean solo) throws Exception {<br/>\n    +<br/>\n    +this.stateStorage = StateStorage;<br/>\n    +this.solo = solo;<br/>\n    +this.acls = acls;<br/>\n    +<br/>\n    +assignmentInfoCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentInfoWithVersionCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentVersionCallback = new ConcurrentHashMap<>();<br/>\n    +supervisorsCallback = new AtomicReference<>();<br/>\n    +backPressureCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentsCallback = new AtomicReference<>();<br/>\n    +stormBaseCallback = new ConcurrentHashMap<>();<br/>\n    +credentialsCallback = new ConcurrentHashMap<>();<br/>\n    +logConfigCallback = new ConcurrentHashMap<>();<br/>\n    +blobstoreCallback = new AtomicReference<>();<br/>\n    +<br/>\n    +stateId = this.stateStorage.register(new ZKStateChangedCallback() {<br/>\n    +<br/>\n    +    public void changed(Watcher.Event.EventType type, String path) {<br/>\n    +List<String> toks = Zookeeper.tokenizePath(path);<br/>\n    +int size = toks.size();<br/>\n    +if (size >= 1) {<br/>\n    +    String root = toks.get(0);<br/>\n    +    if (root.equals(ClusterUtils.ASSIGNMENTS_ROOT)) {<br/>\n    +if (size == 1) </p>\n{\n    +    // set null and get the old value\n    +    issueCallback(assignmentsCallback);\n    +}\n<p> else </p>\n{\n    +    issueMapCallback(assignmentInfoCallback, toks.get(1));\n    +    issueMapCallback(assignmentVersionCallback, toks.get(1));\n    +    issueMapCallback(assignmentInfoWithVersionCallback, toks.get(1));\n    +}\n<p>    +<br/>\n    +    } else if (root.equals(ClusterUtils.SUPERVISORS_ROOT)) </p>\n{\n    +issueCallback(supervisorsCallback);\n    +    }\n<p> else if (root.equals(ClusterUtils.BLOBSTORE_ROOT)) </p>\n{\n    +issueCallback(blobstoreCallback);\n    +    }\n<p> else if (root.equals(ClusterUtils.STORMS_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(stormBaseCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.CREDENTIALS_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(credentialsCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.LOGCONFIG_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(logConfigCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.BACKPRESSURE_ROOT) && size > 1) {<br/>\n    +issueMapCallback(logConfigCallback, toks.get(1));<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This should be backpressureCallback.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653939","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653939","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653939,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T17:16:15Z","updated_at":"2025-01-24T14:24:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53814415\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53814415</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/StormClusterStateImpl.java &#8212;<br/>\n    @@ -0,0 +1,687 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import clojure.lang.*;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class StormClusterStateImpl implements IStormClusterState {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(StormClusterStateImpl.class);<br/>\n    +<br/>\n    +    private IStateStorage stateStorage;<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentInfoCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentInfoWithVersionCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentVersionCallback;<br/>\n    +    private AtomicReference<Runnable> supervisorsCallback;<br/>\n    +    // we want to reigister a topo directory getChildren callback for all workers of this dir<br/>\n    +    private ConcurrentHashMap<String, Runnable> backPressureCallback;<br/>\n    +    private AtomicReference<Runnable> assignmentsCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> stormBaseCallback;<br/>\n    +    private AtomicReference<Runnable> blobstoreCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> credentialsCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> logConfigCallback;<br/>\n    +<br/>\n    +    private List<ACL> acls;<br/>\n    +    private String stateId;<br/>\n    +    private boolean solo;<br/>\n    +<br/>\n    +    public StormClusterStateImpl(IStateStorage StateStorage, List<ACL> acls, ClusterStateContext context, boolean solo) throws Exception {<br/>\n    +<br/>\n    +this.stateStorage = StateStorage;<br/>\n    +this.solo = solo;<br/>\n    +this.acls = acls;<br/>\n    +<br/>\n    +assignmentInfoCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentInfoWithVersionCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentVersionCallback = new ConcurrentHashMap<>();<br/>\n    +supervisorsCallback = new AtomicReference<>();<br/>\n    +backPressureCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentsCallback = new AtomicReference<>();<br/>\n    +stormBaseCallback = new ConcurrentHashMap<>();<br/>\n    +credentialsCallback = new ConcurrentHashMap<>();<br/>\n    +logConfigCallback = new ConcurrentHashMap<>();<br/>\n    +blobstoreCallback = new AtomicReference<>();<br/>\n    +<br/>\n    +stateId = this.stateStorage.register(new ZKStateChangedCallback() {<br/>\n    +<br/>\n    +    public void changed(Watcher.Event.EventType type, String path) {<br/>\n    +List<String> toks = Zookeeper.tokenizePath(path);<br/>\n    +int size = toks.size();<br/>\n    +if (size >= 1) {<br/>\n    +    String root = toks.get(0);<br/>\n    +    if (root.equals(ClusterUtils.ASSIGNMENTS_ROOT)) {<br/>\n    +if (size == 1) </p>\n{\n    +    // set null and get the old value\n    +    issueCallback(assignmentsCallback);\n    +}\n<p> else </p>\n{\n    +    issueMapCallback(assignmentInfoCallback, toks.get(1));\n    +    issueMapCallback(assignmentVersionCallback, toks.get(1));\n    +    issueMapCallback(assignmentInfoWithVersionCallback, toks.get(1));\n    +}\n<p>    +<br/>\n    +    } else if (root.equals(ClusterUtils.SUPERVISORS_ROOT)) </p>\n{\n    +issueCallback(supervisorsCallback);\n    +    }\n<p> else if (root.equals(ClusterUtils.BLOBSTORE_ROOT)) </p>\n{\n    +issueCallback(blobstoreCallback);\n    +    }\n<p> else if (root.equals(ClusterUtils.STORMS_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(stormBaseCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.CREDENTIALS_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(credentialsCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.LOGCONFIG_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(logConfigCallback, toks.get(1));\n    +    } else if (root.equals(ClusterUtils.BACKPRESSURE_ROOT) && size > 1) {    +issueMapCallback(logConfigCallback, toks.get(1));    +    }\n<p> else {<br/>\n    +LOG.error(\"{} Unknown callback for subtree {}\", new RuntimeException(\"Unknown callback for this path\"), path);<br/>\n    +Runtime.getRuntime().exit(30);<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +});<br/>\n    +<br/>\n    +String[] pathlist = </p>\n{ ClusterUtils.ASSIGNMENTS_SUBTREE, ClusterUtils.STORMS_SUBTREE, ClusterUtils.SUPERVISORS_SUBTREE, ClusterUtils.WORKERBEATS_SUBTREE,\n    +ClusterUtils.ERRORS_SUBTREE, ClusterUtils.BLOBSTORE_SUBTREE, ClusterUtils.NIMBUSES_SUBTREE, ClusterUtils.LOGCONFIG_SUBTREE }\n<p>;<br/>\n    +for (String path : pathlist) </p>\n{\n    +    this.stateStorage.mkdirs(path, acls);\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    protected void issueCallback(AtomicReference<Runnable> cb) </p>\n{\n    +Runnable callback = cb.getAndSet(null);\n    +if (callback != null)\n    +    callback.run();\n    +    }\n<p>    +<br/>\n    +    protected void issueMapCallback(ConcurrentHashMap<String, Runnable> callbackConcurrentHashMap, String key) {<br/>\n    +Runnable callback = callbackConcurrentHashMap.remove(key);<br/>\n    +if (callback != null)<br/>\n    +    callback.run();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In the previous code issue-map-callback passed in a parameter.  The key.  We are not doing that any more, but it looked like everywhere that was ignored.  This is fine, but for clarity we should just remove the `& ignored` everywhere in the callback functions.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653943","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653943","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653943,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T17:32:34Z","updated_at":"2025-01-24T14:24:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53816724\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53816724</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/IStormClusterState.java &#8212;<br/>\n    @@ -0,0 +1,122 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public interface IStormClusterState {<br/>\n    +    public List<String> assignments(Runnable callback);<br/>\n    +<br/>\n    +    public Assignment assignmentInfo(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public Map assignmentInfoWithVersion(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public Integer assignmentVersion(String stormId, Runnable callback) throws Exception;<br/>\n    +<br/>\n    +    public List<String> blobstoreInfo(String blobKey);<br/>\n    +<br/>\n    +    public List nimbuses();<br/>\n    +<br/>\n    +    public void addNimbusHost(String nimbusId, NimbusSummary nimbusSummary);<br/>\n    +<br/>\n    +    public List<String> activeStorms();<br/>\n    +<br/>\n    +    public StormBase stormBase(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public ClusterWorkerHeartbeat getWorkerHeartbeat(String stormId, String node, Long port);<br/>\n    +<br/>\n    +    public List<ProfileRequest> getWorkerProfileRequests(String stormId, NodeInfo nodeInfo, boolean isThrift);<br/>\n    +<br/>\n    +    public List<ProfileRequest> getTopologyProfileRequests(String stormId, boolean isThrift);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The isThrift is ignored by all of the implementations.  We should just remove it if we are not going to support it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653946","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653946","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653946,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5NDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T17:34:09Z","updated_at":"2025-01-24T14:24:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53816996\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53816996</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/IStormClusterState.java &#8212;<br/>\n    @@ -0,0 +1,122 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public interface IStormClusterState {<br/>\n    +    public List<String> assignments(Runnable callback);<br/>\n    +<br/>\n    +    public Assignment assignmentInfo(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public Map assignmentInfoWithVersion(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public Integer assignmentVersion(String stormId, Runnable callback) throws Exception;<br/>\n    +<br/>\n    +    public List<String> blobstoreInfo(String blobKey);<br/>\n    +<br/>\n    +    public List nimbuses();<br/>\n    +<br/>\n    +    public void addNimbusHost(String nimbusId, NimbusSummary nimbusSummary);<br/>\n    +<br/>\n    +    public List<String> activeStorms();<br/>\n    +<br/>\n    +    public StormBase stormBase(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public ClusterWorkerHeartbeat getWorkerHeartbeat(String stormId, String node, Long port);<br/>\n    +<br/>\n    +    public List<ProfileRequest> getWorkerProfileRequests(String stormId, NodeInfo nodeInfo, boolean isThrift);<br/>\n    +<br/>\n    +    public List<ProfileRequest> getTopologyProfileRequests(String stormId, boolean isThrift);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Actually it looks like it is true in some places and false in others.  We need to either implement it or make it so it is always true and remove it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653946/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875319","html_url":"https://github.com/apache/storm/issues/5404#issuecomment-2612875319","issue_url":"https://api.github.com/repos/apache/storm/issues/5404","id":2612875319,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzUzMTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T18:29:09Z","updated_at":"2025-01-24T16:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user Parth-Brahmbhatt opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1144\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1144</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1569\" title=\"Allowing users to specify the nimbus thrift server queue size.\" class=\"issue-link\" data-issue-key=\"STORM-1569\"><del>STORM-1569</del></a>: Adding option in nimbus to specify request queue size in …</p>\n\n<p>    …config.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/Parth-Brahmbhatt/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/Parth-Brahmbhatt/incubator-storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1569\" title=\"Allowing users to specify the nimbus thrift server queue size.\" class=\"issue-link\" data-issue-key=\"STORM-1569\"><del>STORM-1569</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1144.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1144.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1144</p>\n\n<hr />\n<p>commit 24a87af2c4a1aa6f03c0ccdabccde8ecb322bd99<br/>\nAuthor: Parth Brahmbhatt <brahmbhatt.parth@gmail.com><br/>\nDate:   2016-02-23T18:28:05Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1569\" title=\"Allowing users to specify the nimbus thrift server queue size.\" class=\"issue-link\" data-issue-key=\"STORM-1569\"><del>STORM-1569</del></a>: Adding option in nimbus to specify request queue size in config.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875319/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653951","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653951","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653951,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5NTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T18:37:31Z","updated_at":"2025-01-24T14:24:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53826300\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53826300</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/IStormClusterState.java &#8212;<br/>\n    @@ -0,0 +1,122 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public interface IStormClusterState {<br/>\n    +    public List<String> assignments(Runnable callback);<br/>\n    +<br/>\n    +    public Assignment assignmentInfo(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public Map assignmentInfoWithVersion(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public Integer assignmentVersion(String stormId, Runnable callback) throws Exception;<br/>\n    +<br/>\n    +    public List<String> blobstoreInfo(String blobKey);<br/>\n    +<br/>\n    +    public List nimbuses();<br/>\n    +<br/>\n    +    public void addNimbusHost(String nimbusId, NimbusSummary nimbusSummary);<br/>\n    +<br/>\n    +    public List<String> activeStorms();<br/>\n    +<br/>\n    +    public StormBase stormBase(String stormId, Runnable callback);<br/>\n    +<br/>\n    +    public ClusterWorkerHeartbeat getWorkerHeartbeat(String stormId, String node, Long port);<br/>\n    +<br/>\n    +    public List<ProfileRequest> getWorkerProfileRequests(String stormId, NodeInfo nodeInfo, boolean isThrift);<br/>\n    +<br/>\n    +    public List<ProfileRequest> getTopologyProfileRequests(String stormId, boolean isThrift);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK I see that it is not needed in either of the places it is called, so yes, lets remove it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653951/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653956","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653956","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653956,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T18:44:59Z","updated_at":"2025-01-24T14:24:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53827548\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53827548</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/StormClusterStateImpl.java &#8212;<br/>\n    @@ -0,0 +1,687 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import clojure.lang.*;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class StormClusterStateImpl implements IStormClusterState {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(StormClusterStateImpl.class);<br/>\n    +<br/>\n    +    private IStateStorage stateStorage;<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentInfoCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentInfoWithVersionCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentVersionCallback;<br/>\n    +    private AtomicReference<Runnable> supervisorsCallback;<br/>\n    +    // we want to reigister a topo directory getChildren callback for all workers of this dir<br/>\n    +    private ConcurrentHashMap<String, Runnable> backPressureCallback;<br/>\n    +    private AtomicReference<Runnable> assignmentsCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> stormBaseCallback;<br/>\n    +    private AtomicReference<Runnable> blobstoreCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> credentialsCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> logConfigCallback;<br/>\n    +<br/>\n    +    private List<ACL> acls;<br/>\n    +    private String stateId;<br/>\n    +    private boolean solo;<br/>\n    +<br/>\n    +    public StormClusterStateImpl(IStateStorage StateStorage, List<ACL> acls, ClusterStateContext context, boolean solo) throws Exception {<br/>\n    +<br/>\n    +this.stateStorage = StateStorage;<br/>\n    +this.solo = solo;<br/>\n    +this.acls = acls;<br/>\n    +<br/>\n    +assignmentInfoCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentInfoWithVersionCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentVersionCallback = new ConcurrentHashMap<>();<br/>\n    +supervisorsCallback = new AtomicReference<>();<br/>\n    +backPressureCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentsCallback = new AtomicReference<>();<br/>\n    +stormBaseCallback = new ConcurrentHashMap<>();<br/>\n    +credentialsCallback = new ConcurrentHashMap<>();<br/>\n    +logConfigCallback = new ConcurrentHashMap<>();<br/>\n    +blobstoreCallback = new AtomicReference<>();<br/>\n    +<br/>\n    +stateId = this.stateStorage.register(new ZKStateChangedCallback() {<br/>\n    +<br/>\n    +    public void changed(Watcher.Event.EventType type, String path) {<br/>\n    +List<String> toks = Zookeeper.tokenizePath(path);<br/>\n    +int size = toks.size();<br/>\n    +if (size >= 1) {<br/>\n    +    String root = toks.get(0);<br/>\n    +    if (root.equals(ClusterUtils.ASSIGNMENTS_ROOT)) {<br/>\n    +if (size == 1) </p>\n{\n    +    // set null and get the old value\n    +    issueCallback(assignmentsCallback);\n    +}\n<p> else </p>\n{\n    +    issueMapCallback(assignmentInfoCallback, toks.get(1));\n    +    issueMapCallback(assignmentVersionCallback, toks.get(1));\n    +    issueMapCallback(assignmentInfoWithVersionCallback, toks.get(1));\n    +}\n<p>    +<br/>\n    +    } else if (root.equals(ClusterUtils.SUPERVISORS_ROOT)) </p>\n{\n    +issueCallback(supervisorsCallback);\n    +    }\n<p> else if (root.equals(ClusterUtils.BLOBSTORE_ROOT)) </p>\n{\n    +issueCallback(blobstoreCallback);\n    +    }\n<p> else if (root.equals(ClusterUtils.STORMS_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(stormBaseCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.CREDENTIALS_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(credentialsCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.LOGCONFIG_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(logConfigCallback, toks.get(1));\n    +    } else if (root.equals(ClusterUtils.BACKPRESSURE_ROOT) && size > 1) {    +issueMapCallback(logConfigCallback, toks.get(1));    +    }\n<p> else {<br/>\n    +LOG.error(\"{} Unknown callback for subtree {}\", new RuntimeException(\"Unknown callback for this path\"), path);<br/>\n    +Runtime.getRuntime().exit(30);<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +});<br/>\n    +<br/>\n    +String[] pathlist = </p>\n{ ClusterUtils.ASSIGNMENTS_SUBTREE, ClusterUtils.STORMS_SUBTREE, ClusterUtils.SUPERVISORS_SUBTREE, ClusterUtils.WORKERBEATS_SUBTREE,\n    +ClusterUtils.ERRORS_SUBTREE, ClusterUtils.BLOBSTORE_SUBTREE, ClusterUtils.NIMBUSES_SUBTREE, ClusterUtils.LOGCONFIG_SUBTREE }\n<p>;<br/>\n    +for (String path : pathlist) </p>\n{\n    +    this.stateStorage.mkdirs(path, acls);\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    protected void issueCallback(AtomicReference<Runnable> cb) </p>\n{\n    +Runnable callback = cb.getAndSet(null);\n    +if (callback != null)\n    +    callback.run();\n    +    }\n<p>    +<br/>\n    +    protected void issueMapCallback(ConcurrentHashMap<String, Runnable> callbackConcurrentHashMap, String key) </p>\n{\n    +Runnable callback = callbackConcurrentHashMap.remove(key);\n    +if (callback != null)\n    +    callback.run();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> assignments(Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    assignmentsCallback.set(callback);\n    +}\n<p>    +return stateStorage.get_children(ClusterUtils.ASSIGNMENTS_SUBTREE, callback != null);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Assignment assignmentInfo(String stormId, Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    assignmentInfoCallback.put(stormId, callback);\n    +}\n<p>    +byte[] serialized = stateStorage.get_data(ClusterUtils.assignmentPath(stormId), callback != null);<br/>\n    +return ClusterUtils.maybeDeserialize(serialized, Assignment.class);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Map assignmentInfoWithVersion(String stormId, Runnable callback) {<br/>\n    +Map map = new HashMap();<br/>\n    +if (callback != null) </p>\n{\n    +    assignmentInfoWithVersionCallback.put(stormId, callback);\n    +}\n<p>    +Assignment assignment = null;<br/>\n    +Integer version = 0;<br/>\n    +Map dataWithVersionMap = stateStorage.get_data_with_version(ClusterUtils.assignmentPath(stormId), callback != null);<br/>\n    +if (dataWithVersionMap != null) </p>\n{\n    +    assignment = ClusterUtils.maybeDeserialize((byte[]) dataWithVersionMap.get(IStateStorage.DATA), Assignment.class);\n    +    version = (Integer) dataWithVersionMap.get(IStateStorage.VERSION);\n    +}\n<p>    +map.put(IStateStorage.DATA, assignment);<br/>\n    +map.put(IStateStorage.VERSION, version);<br/>\n    +return map;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Integer assignmentVersion(String stormId, Runnable callback) throws Exception {<br/>\n    +if (callback != null) </p>\n{\n    +    assignmentVersionCallback.put(stormId, callback);\n    +}\n<p>    +return stateStorage.get_version(ClusterUtils.assignmentPath(stormId), callback != null);<br/>\n    +    }<br/>\n    +<br/>\n    +    // blobstore state<br/>\n    +    @Override<br/>\n    +    public List<String> blobstoreInfo(String blobKey) </p>\n{\n    +String path = ClusterUtils.blobstorePath(blobKey);\n    +stateStorage.sync_path(path);\n    +return stateStorage.get_children(path, false);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List nimbuses() {<br/>\n    +List<NimbusSummary> nimbusSummaries = new ArrayList<>();<br/>\n    +List<String> nimbusIds = stateStorage.get_children(ClusterUtils.NIMBUSES_SUBTREE, false);<br/>\n    +for (String nimbusId : nimbusIds) </p>\n{\n    +    byte[] serialized = stateStorage.get_data(ClusterUtils.nimbusPath(nimbusId), false);\n    +    NimbusSummary nimbusSummary = ClusterUtils.maybeDeserialize(serialized, NimbusSummary.class);\n    +    nimbusSummaries.add(nimbusSummary);\n    +}\n<p>    +return nimbusSummaries;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void addNimbusHost(final String nimbusId, final NimbusSummary nimbusSummary) {<br/>\n    +// explicit delete for ephmeral node to ensure this session creates the entry.<br/>\n    +stateStorage.delete_node(ClusterUtils.nimbusPath(nimbusId));<br/>\n    +stateStorage.add_listener(new ConnectionStateListener() {<br/>\n    +    @Override<br/>\n    +    public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {<br/>\n    +LOG.info(\"Connection state listener invoked, zookeeper connection state has changed to {}\", connectionState);<br/>\n    +if (connectionState.equals(ConnectionState.RECONNECTED)) </p>\n{\n    +    LOG.info(\"Connection state has changed to reconnected so setting nimbuses entry one more time\");\n    +    stateStorage.set_ephemeral_node(ClusterUtils.nimbusPath(nimbusId), Utils.serialize(nimbusSummary), acls);\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +<br/>\n    +stateStorage.set_ephemeral_node(ClusterUtils.nimbusPath(nimbusId), Utils.serialize(nimbusSummary), acls);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> activeStorms() </p>\n{\n    +return stateStorage.get_children(ClusterUtils.STORMS_SUBTREE, false);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public StormBase stormBase(String stormId, Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    stormBaseCallback.put(stormId, callback);\n    +}\n<p>    +return ClusterUtils.maybeDeserialize(stateStorage.get_data(ClusterUtils.stormPath(stormId), callback != null), StormBase.class);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public ClusterWorkerHeartbeat getWorkerHeartbeat(String stormId, String node, Long port) </p>\n{\n    +byte[] bytes = stateStorage.get_worker_hb(ClusterUtils.workerbeatPath(stormId, node, port), false);\n    +return ClusterUtils.maybeDeserialize(bytes, ClusterWorkerHeartbeat.class);\n    +\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<ProfileRequest> getWorkerProfileRequests(String stormId, NodeInfo nodeInfo, boolean isThrift) {<br/>\n    +List<ProfileRequest> requests = new ArrayList<>();<br/>\n    +List<ProfileRequest> profileRequests = getTopologyProfileRequests(stormId, isThrift);<br/>\n    +for (ProfileRequest profileRequest : profileRequests) </p>\n{\n    +    NodeInfo nodeInfo1 = profileRequest.get_nodeInfo();\n    +    if (nodeInfo1.equals(nodeInfo))\n    +requests.add(profileRequest);\n    +}\n<p>    +return requests;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<ProfileRequest> getTopologyProfileRequests(String stormId, boolean isThrift) {<br/>\n    +List<ProfileRequest> profileRequests = new ArrayList<>();<br/>\n    +String path = ClusterUtils.profilerConfigPath(stormId);<br/>\n    +if (stateStorage.node_exists(path, false)) {<br/>\n    +    List<String> strs = stateStorage.get_children(path, false);<br/>\n    +    for (String str : strs) </p>\n{\n    +String childPath = path + ClusterUtils.ZK_SEPERATOR + str;\n    +byte[] raw = stateStorage.get_data(childPath, false);\n    +ProfileRequest request = ClusterUtils.maybeDeserialize(raw, ProfileRequest.class);\n    +if (request != null)\n    +    profileRequests.add(request);\n    +    }\n<p>    +}<br/>\n    +return profileRequests;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void setWorkerProfileRequest(String stormId, ProfileRequest profileRequest) </p>\n{\n    +ProfileAction profileAction = profileRequest.get_action();\n    +String host = profileRequest.get_nodeInfo().get_node();\n    +Long port = profileRequest.get_nodeInfo().get_port_iterator().next();\n    +String path = ClusterUtils.profilerConfigPath(stormId, host, port, profileAction);\n    +stateStorage.set_data(path, Utils.serialize(profileRequest), acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void deleteTopologyProfileRequests(String stormId, ProfileRequest profileRequest) </p>\n{\n    +ProfileAction profileAction = profileRequest.get_action();\n    +String host = profileRequest.get_nodeInfo().get_node();\n    +Long port = profileRequest.get_nodeInfo().get_port_iterator().next();\n    +String path = ClusterUtils.profilerConfigPath(stormId, host, port, profileAction);\n    +stateStorage.delete_node(path);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * need to take executor->node+port in explicitly so that we don't run into a situation where a long dead worker with a skewed clock overrides all the<br/>\n    +     * timestamps. By only checking heartbeats with an assigned node+port, and only reading executors from that heartbeat that are actually assigned, we avoid<br/>\n    +     * situations like that<br/>\n    +     * <br/>\n    +     * @param stormId<br/>\n    +     * @param executorNodePort<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public Map<ExecutorInfo, ExecutorBeat> executorBeats(String stormId, Map<List<Long>, NodeInfo> executorNodePort) {<br/>\n    +Map<ExecutorInfo, ExecutorBeat> executorWhbs = new HashMap<>();<br/>\n    +<br/>\n    +Map<NodeInfo, List<List<Long>>> nodePortExecutors = Utils.reverseMap(executorNodePort);<br/>\n    +<br/>\n    +for (Map.Entry<NodeInfo, List<List<Long>>> entry : nodePortExecutors.entrySet()) {<br/>\n    +<br/>\n    +    String node = entry.getKey().get_node();<br/>\n    +    Long port = entry.getKey().get_port_iterator().next();<br/>\n    +    ClusterWorkerHeartbeat whb = getWorkerHeartbeat(stormId, node, port);<br/>\n    +    List<ExecutorInfo> executorInfoList = new ArrayList<>();<br/>\n    +    for (List<Long> list : entry.getValue()) </p>\n{\n    +executorInfoList.add(new ExecutorInfo(list.get(0).intValue(), list.get(list.size() - 1).intValue()));\n    +    }\n<p>    +    if (whb != null)<br/>\n    +executorWhbs.putAll(ClusterUtils.convertExecutorBeats(executorInfoList, whb));<br/>\n    +}<br/>\n    +return executorWhbs;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> supervisors(Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    supervisorsCallback.set(callback);\n    +}\n<p>    +return stateStorage.get_children(ClusterUtils.SUPERVISORS_SUBTREE, callback != null);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public SupervisorInfo supervisorInfo(String supervisorId) </p>\n{\n    +String path = ClusterUtils.supervisorPath(supervisorId);\n    +return ClusterUtils.maybeDeserialize(stateStorage.get_data(path, false), SupervisorInfo.class);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void setupHeatbeats(String stormId) </p>\n{\n    +stateStorage.mkdirs(ClusterUtils.workerbeatStormRoot(stormId), acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void teardownHeartbeats(String stormId) {<br/>\n    +try </p>\n{\n    +    stateStorage.delete_worker_hb(ClusterUtils.workerbeatStormRoot(stormId));\n    +}\n<p> catch (Exception e) {<br/>\n    +    if (Utils.exceptionCauseIsInstanceOf(KeeperException.class, e)) {<br/>\n    +// do nothing<br/>\n    +LOG.warn(\"Could not teardown heartbeats for {}.\", stormId);<br/>\n    +    } else </p>\n{\n    +throw e;\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void teardownTopologyErrors(String stormId) {<br/>\n    +try {\n    +    stateStorage.delete_node(ClusterUtils.errorStormRoot(stormId));\n    +} catch (Exception e) {<br/>\n    +    if (Utils.exceptionCauseIsInstanceOf(KeeperException.class, e)) {<br/>\n    +// do nothing<br/>\n    +LOG.warn(\"Could not teardown errors for {}.\", stormId);<br/>\n    +    } else {    +throw e;    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> heartbeatStorms() </p>\n{\n    +return stateStorage.get_worker_hb_children(ClusterUtils.WORKERBEATS_SUBTREE, false);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> errorTopologies() </p>\n{\n    +return stateStorage.get_children(ClusterUtils.ERRORS_SUBTREE, false);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void setTopologyLogConfig(String stormId, LogConfig logConfig) </p>\n{\n    +stateStorage.set_data(ClusterUtils.logConfigPath(stormId), Utils.serialize(logConfig), acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public LogConfig topologyLogConfig(String stormId, Runnable cb) {<br/>\n    +String path = ClusterUtils.logConfigPath(stormId);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    cb is never stored to be called back.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653956/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653960","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653960","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653960,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T18:57:28Z","updated_at":"2025-01-24T14:24:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53829764\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53829764</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/StormClusterStateImpl.java &#8212;<br/>\n    @@ -0,0 +1,687 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import clojure.lang.*;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class StormClusterStateImpl implements IStormClusterState {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(StormClusterStateImpl.class);<br/>\n    +<br/>\n    +    private IStateStorage stateStorage;<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentInfoCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentInfoWithVersionCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> assignmentVersionCallback;<br/>\n    +    private AtomicReference<Runnable> supervisorsCallback;<br/>\n    +    // we want to reigister a topo directory getChildren callback for all workers of this dir<br/>\n    +    private ConcurrentHashMap<String, Runnable> backPressureCallback;<br/>\n    +    private AtomicReference<Runnable> assignmentsCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> stormBaseCallback;<br/>\n    +    private AtomicReference<Runnable> blobstoreCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> credentialsCallback;<br/>\n    +    private ConcurrentHashMap<String, Runnable> logConfigCallback;<br/>\n    +<br/>\n    +    private List<ACL> acls;<br/>\n    +    private String stateId;<br/>\n    +    private boolean solo;<br/>\n    +<br/>\n    +    public StormClusterStateImpl(IStateStorage StateStorage, List<ACL> acls, ClusterStateContext context, boolean solo) throws Exception {<br/>\n    +<br/>\n    +this.stateStorage = StateStorage;<br/>\n    +this.solo = solo;<br/>\n    +this.acls = acls;<br/>\n    +<br/>\n    +assignmentInfoCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentInfoWithVersionCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentVersionCallback = new ConcurrentHashMap<>();<br/>\n    +supervisorsCallback = new AtomicReference<>();<br/>\n    +backPressureCallback = new ConcurrentHashMap<>();<br/>\n    +assignmentsCallback = new AtomicReference<>();<br/>\n    +stormBaseCallback = new ConcurrentHashMap<>();<br/>\n    +credentialsCallback = new ConcurrentHashMap<>();<br/>\n    +logConfigCallback = new ConcurrentHashMap<>();<br/>\n    +blobstoreCallback = new AtomicReference<>();<br/>\n    +<br/>\n    +stateId = this.stateStorage.register(new ZKStateChangedCallback() {<br/>\n    +<br/>\n    +    public void changed(Watcher.Event.EventType type, String path) {<br/>\n    +List<String> toks = Zookeeper.tokenizePath(path);<br/>\n    +int size = toks.size();<br/>\n    +if (size >= 1) {<br/>\n    +    String root = toks.get(0);<br/>\n    +    if (root.equals(ClusterUtils.ASSIGNMENTS_ROOT)) {<br/>\n    +if (size == 1) </p>\n{\n    +    // set null and get the old value\n    +    issueCallback(assignmentsCallback);\n    +}\n<p> else </p>\n{\n    +    issueMapCallback(assignmentInfoCallback, toks.get(1));\n    +    issueMapCallback(assignmentVersionCallback, toks.get(1));\n    +    issueMapCallback(assignmentInfoWithVersionCallback, toks.get(1));\n    +}\n<p>    +<br/>\n    +    } else if (root.equals(ClusterUtils.SUPERVISORS_ROOT)) </p>\n{\n    +issueCallback(supervisorsCallback);\n    +    }\n<p> else if (root.equals(ClusterUtils.BLOBSTORE_ROOT)) </p>\n{\n    +issueCallback(blobstoreCallback);\n    +    }\n<p> else if (root.equals(ClusterUtils.STORMS_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(stormBaseCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.CREDENTIALS_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(credentialsCallback, toks.get(1));\n    +    }\n<p> else if (root.equals(ClusterUtils.LOGCONFIG_ROOT) && size > 1) </p>\n{\n    +issueMapCallback(logConfigCallback, toks.get(1));\n    +    } else if (root.equals(ClusterUtils.BACKPRESSURE_ROOT) && size > 1) {    +issueMapCallback(logConfigCallback, toks.get(1));    +    }\n<p> else {<br/>\n    +LOG.error(\"{} Unknown callback for subtree {}\", new RuntimeException(\"Unknown callback for this path\"), path);<br/>\n    +Runtime.getRuntime().exit(30);<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +<br/>\n    +return;<br/>\n    +    }<br/>\n    +<br/>\n    +});<br/>\n    +<br/>\n    +String[] pathlist = </p>\n{ ClusterUtils.ASSIGNMENTS_SUBTREE, ClusterUtils.STORMS_SUBTREE, ClusterUtils.SUPERVISORS_SUBTREE, ClusterUtils.WORKERBEATS_SUBTREE,\n    +ClusterUtils.ERRORS_SUBTREE, ClusterUtils.BLOBSTORE_SUBTREE, ClusterUtils.NIMBUSES_SUBTREE, ClusterUtils.LOGCONFIG_SUBTREE }\n<p>;<br/>\n    +for (String path : pathlist) </p>\n{\n    +    this.stateStorage.mkdirs(path, acls);\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    protected void issueCallback(AtomicReference<Runnable> cb) </p>\n{\n    +Runnable callback = cb.getAndSet(null);\n    +if (callback != null)\n    +    callback.run();\n    +    }\n<p>    +<br/>\n    +    protected void issueMapCallback(ConcurrentHashMap<String, Runnable> callbackConcurrentHashMap, String key) </p>\n{\n    +Runnable callback = callbackConcurrentHashMap.remove(key);\n    +if (callback != null)\n    +    callback.run();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> assignments(Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    assignmentsCallback.set(callback);\n    +}\n<p>    +return stateStorage.get_children(ClusterUtils.ASSIGNMENTS_SUBTREE, callback != null);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Assignment assignmentInfo(String stormId, Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    assignmentInfoCallback.put(stormId, callback);\n    +}\n<p>    +byte[] serialized = stateStorage.get_data(ClusterUtils.assignmentPath(stormId), callback != null);<br/>\n    +return ClusterUtils.maybeDeserialize(serialized, Assignment.class);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Map assignmentInfoWithVersion(String stormId, Runnable callback) {<br/>\n    +Map map = new HashMap();<br/>\n    +if (callback != null) </p>\n{\n    +    assignmentInfoWithVersionCallback.put(stormId, callback);\n    +}\n<p>    +Assignment assignment = null;<br/>\n    +Integer version = 0;<br/>\n    +Map dataWithVersionMap = stateStorage.get_data_with_version(ClusterUtils.assignmentPath(stormId), callback != null);<br/>\n    +if (dataWithVersionMap != null) </p>\n{\n    +    assignment = ClusterUtils.maybeDeserialize((byte[]) dataWithVersionMap.get(IStateStorage.DATA), Assignment.class);\n    +    version = (Integer) dataWithVersionMap.get(IStateStorage.VERSION);\n    +}\n<p>    +map.put(IStateStorage.DATA, assignment);<br/>\n    +map.put(IStateStorage.VERSION, version);<br/>\n    +return map;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Integer assignmentVersion(String stormId, Runnable callback) throws Exception {<br/>\n    +if (callback != null) </p>\n{\n    +    assignmentVersionCallback.put(stormId, callback);\n    +}\n<p>    +return stateStorage.get_version(ClusterUtils.assignmentPath(stormId), callback != null);<br/>\n    +    }<br/>\n    +<br/>\n    +    // blobstore state<br/>\n    +    @Override<br/>\n    +    public List<String> blobstoreInfo(String blobKey) </p>\n{\n    +String path = ClusterUtils.blobstorePath(blobKey);\n    +stateStorage.sync_path(path);\n    +return stateStorage.get_children(path, false);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List nimbuses() {<br/>\n    +List<NimbusSummary> nimbusSummaries = new ArrayList<>();<br/>\n    +List<String> nimbusIds = stateStorage.get_children(ClusterUtils.NIMBUSES_SUBTREE, false);<br/>\n    +for (String nimbusId : nimbusIds) </p>\n{\n    +    byte[] serialized = stateStorage.get_data(ClusterUtils.nimbusPath(nimbusId), false);\n    +    NimbusSummary nimbusSummary = ClusterUtils.maybeDeserialize(serialized, NimbusSummary.class);\n    +    nimbusSummaries.add(nimbusSummary);\n    +}\n<p>    +return nimbusSummaries;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void addNimbusHost(final String nimbusId, final NimbusSummary nimbusSummary) {<br/>\n    +// explicit delete for ephmeral node to ensure this session creates the entry.<br/>\n    +stateStorage.delete_node(ClusterUtils.nimbusPath(nimbusId));<br/>\n    +stateStorage.add_listener(new ConnectionStateListener() {<br/>\n    +    @Override<br/>\n    +    public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {<br/>\n    +LOG.info(\"Connection state listener invoked, zookeeper connection state has changed to {}\", connectionState);<br/>\n    +if (connectionState.equals(ConnectionState.RECONNECTED)) </p>\n{\n    +    LOG.info(\"Connection state has changed to reconnected so setting nimbuses entry one more time\");\n    +    stateStorage.set_ephemeral_node(ClusterUtils.nimbusPath(nimbusId), Utils.serialize(nimbusSummary), acls);\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +<br/>\n    +stateStorage.set_ephemeral_node(ClusterUtils.nimbusPath(nimbusId), Utils.serialize(nimbusSummary), acls);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> activeStorms() </p>\n{\n    +return stateStorage.get_children(ClusterUtils.STORMS_SUBTREE, false);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public StormBase stormBase(String stormId, Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    stormBaseCallback.put(stormId, callback);\n    +}\n<p>    +return ClusterUtils.maybeDeserialize(stateStorage.get_data(ClusterUtils.stormPath(stormId), callback != null), StormBase.class);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public ClusterWorkerHeartbeat getWorkerHeartbeat(String stormId, String node, Long port) </p>\n{\n    +byte[] bytes = stateStorage.get_worker_hb(ClusterUtils.workerbeatPath(stormId, node, port), false);\n    +return ClusterUtils.maybeDeserialize(bytes, ClusterWorkerHeartbeat.class);\n    +\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<ProfileRequest> getWorkerProfileRequests(String stormId, NodeInfo nodeInfo, boolean isThrift) {<br/>\n    +List<ProfileRequest> requests = new ArrayList<>();<br/>\n    +List<ProfileRequest> profileRequests = getTopologyProfileRequests(stormId, isThrift);<br/>\n    +for (ProfileRequest profileRequest : profileRequests) </p>\n{\n    +    NodeInfo nodeInfo1 = profileRequest.get_nodeInfo();\n    +    if (nodeInfo1.equals(nodeInfo))\n    +requests.add(profileRequest);\n    +}\n<p>    +return requests;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<ProfileRequest> getTopologyProfileRequests(String stormId, boolean isThrift) {<br/>\n    +List<ProfileRequest> profileRequests = new ArrayList<>();<br/>\n    +String path = ClusterUtils.profilerConfigPath(stormId);<br/>\n    +if (stateStorage.node_exists(path, false)) {<br/>\n    +    List<String> strs = stateStorage.get_children(path, false);<br/>\n    +    for (String str : strs) </p>\n{\n    +String childPath = path + ClusterUtils.ZK_SEPERATOR + str;\n    +byte[] raw = stateStorage.get_data(childPath, false);\n    +ProfileRequest request = ClusterUtils.maybeDeserialize(raw, ProfileRequest.class);\n    +if (request != null)\n    +    profileRequests.add(request);\n    +    }\n<p>    +}<br/>\n    +return profileRequests;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void setWorkerProfileRequest(String stormId, ProfileRequest profileRequest) </p>\n{\n    +ProfileAction profileAction = profileRequest.get_action();\n    +String host = profileRequest.get_nodeInfo().get_node();\n    +Long port = profileRequest.get_nodeInfo().get_port_iterator().next();\n    +String path = ClusterUtils.profilerConfigPath(stormId, host, port, profileAction);\n    +stateStorage.set_data(path, Utils.serialize(profileRequest), acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void deleteTopologyProfileRequests(String stormId, ProfileRequest profileRequest) </p>\n{\n    +ProfileAction profileAction = profileRequest.get_action();\n    +String host = profileRequest.get_nodeInfo().get_node();\n    +Long port = profileRequest.get_nodeInfo().get_port_iterator().next();\n    +String path = ClusterUtils.profilerConfigPath(stormId, host, port, profileAction);\n    +stateStorage.delete_node(path);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * need to take executor->node+port in explicitly so that we don't run into a situation where a long dead worker with a skewed clock overrides all the<br/>\n    +     * timestamps. By only checking heartbeats with an assigned node+port, and only reading executors from that heartbeat that are actually assigned, we avoid<br/>\n    +     * situations like that<br/>\n    +     * <br/>\n    +     * @param stormId<br/>\n    +     * @param executorNodePort<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public Map<ExecutorInfo, ExecutorBeat> executorBeats(String stormId, Map<List<Long>, NodeInfo> executorNodePort) {<br/>\n    +Map<ExecutorInfo, ExecutorBeat> executorWhbs = new HashMap<>();<br/>\n    +<br/>\n    +Map<NodeInfo, List<List<Long>>> nodePortExecutors = Utils.reverseMap(executorNodePort);<br/>\n    +<br/>\n    +for (Map.Entry<NodeInfo, List<List<Long>>> entry : nodePortExecutors.entrySet()) {<br/>\n    +<br/>\n    +    String node = entry.getKey().get_node();<br/>\n    +    Long port = entry.getKey().get_port_iterator().next();<br/>\n    +    ClusterWorkerHeartbeat whb = getWorkerHeartbeat(stormId, node, port);<br/>\n    +    List<ExecutorInfo> executorInfoList = new ArrayList<>();<br/>\n    +    for (List<Long> list : entry.getValue()) </p>\n{\n    +executorInfoList.add(new ExecutorInfo(list.get(0).intValue(), list.get(list.size() - 1).intValue()));\n    +    }\n<p>    +    if (whb != null)<br/>\n    +executorWhbs.putAll(ClusterUtils.convertExecutorBeats(executorInfoList, whb));<br/>\n    +}<br/>\n    +return executorWhbs;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> supervisors(Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    supervisorsCallback.set(callback);\n    +}\n<p>    +return stateStorage.get_children(ClusterUtils.SUPERVISORS_SUBTREE, callback != null);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public SupervisorInfo supervisorInfo(String supervisorId) </p>\n{\n    +String path = ClusterUtils.supervisorPath(supervisorId);\n    +return ClusterUtils.maybeDeserialize(stateStorage.get_data(path, false), SupervisorInfo.class);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void setupHeatbeats(String stormId) </p>\n{\n    +stateStorage.mkdirs(ClusterUtils.workerbeatStormRoot(stormId), acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void teardownHeartbeats(String stormId) {<br/>\n    +try </p>\n{\n    +    stateStorage.delete_worker_hb(ClusterUtils.workerbeatStormRoot(stormId));\n    +}\n<p> catch (Exception e) {<br/>\n    +    if (Utils.exceptionCauseIsInstanceOf(KeeperException.class, e)) {<br/>\n    +// do nothing<br/>\n    +LOG.warn(\"Could not teardown heartbeats for {}.\", stormId);<br/>\n    +    } else </p>\n{\n    +throw e;\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void teardownTopologyErrors(String stormId) {<br/>\n    +try {\n    +    stateStorage.delete_node(ClusterUtils.errorStormRoot(stormId));\n    +} catch (Exception e) {<br/>\n    +    if (Utils.exceptionCauseIsInstanceOf(KeeperException.class, e)) {<br/>\n    +// do nothing<br/>\n    +LOG.warn(\"Could not teardown errors for {}.\", stormId);<br/>\n    +    } else {    +throw e;    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> heartbeatStorms() </p>\n{\n    +return stateStorage.get_worker_hb_children(ClusterUtils.WORKERBEATS_SUBTREE, false);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> errorTopologies() </p>\n{\n    +return stateStorage.get_children(ClusterUtils.ERRORS_SUBTREE, false);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void setTopologyLogConfig(String stormId, LogConfig logConfig) </p>\n{\n    +stateStorage.set_data(ClusterUtils.logConfigPath(stormId), Utils.serialize(logConfig), acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public LogConfig topologyLogConfig(String stormId, Runnable cb) </p>\n{\n    +String path = ClusterUtils.logConfigPath(stormId);\n    +return ClusterUtils.maybeDeserialize(stateStorage.get_data(path, cb != null), LogConfig.class);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void workerHeartbeat(String stormId, String node, Long port, ClusterWorkerHeartbeat info) {<br/>\n    +if (info != null) </p>\n{\n    +    String path = ClusterUtils.workerbeatPath(stormId, node, port);\n    +    stateStorage.set_worker_hb(path, Utils.serialize(info), acls);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void removeWorkerHeartbeat(String stormId, String node, Long port) </p>\n{\n    +String path = ClusterUtils.workerbeatPath(stormId, node, port);\n    +stateStorage.delete_worker_hb(path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void supervisorHeartbeat(String supervisorId, SupervisorInfo info) </p>\n{\n    +String path = ClusterUtils.supervisorPath(supervisorId);\n    +stateStorage.set_ephemeral_node(path, Utils.serialize(info), acls);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * if znode exists and to be not on?, delete; if exists and on?, do nothing; if not exists and to be on?, create; if not exists and not on?, do nothing;<br/>\n    +     * <br/>\n    +     * @param stormId<br/>\n    +     * @param node<br/>\n    +     * @param port<br/>\n    +     * @param on<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void workerBackpressure(String stormId, String node, Long port, boolean on) {<br/>\n    +String path = ClusterUtils.backpressurePath(stormId, node, port);<br/>\n    +boolean existed = stateStorage.node_exists(path, false);<br/>\n    +if (existed) </p>\n{\n    +    if (on == false)\n    +stateStorage.delete_node(path);\n    +\n    +}\n<p> else {<br/>\n    +    if (on == true) </p>\n{\n    +stateStorage.set_ephemeral_node(path, null, acls);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * if the backpresure/storm-id dir is empty, this topology has throttle-on, otherwise not.<br/>\n    +     * <br/>\n    +     * @param stormId<br/>\n    +     * @param callback<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public boolean topologyBackpressure(String stormId, Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    backPressureCallback.put(stormId, callback);\n    +}\n<p>    +String path = ClusterUtils.backpressureStormRoot(stormId);<br/>\n    +List<String> childrens = stateStorage.get_children(path, callback != null);<br/>\n    +return childrens.size() > 0;<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void setupBackpressure(String stormId) </p>\n{\n    +stateStorage.mkdirs(ClusterUtils.backpressureStormRoot(stormId), acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void removeWorkerBackpressure(String stormId, String node, Long port) </p>\n{\n    +stateStorage.delete_node(ClusterUtils.backpressurePath(stormId, node, port));\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void activateStorm(String stormId, StormBase stormBase) </p>\n{\n    +String path = ClusterUtils.stormPath(stormId);\n    +stateStorage.set_data(path, Utils.serialize(stormBase), acls);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * To update this function due to APersistentMap/APersistentSet is clojure's structure<br/>\n    +     * <br/>\n    +     * @param stormId<br/>\n    +     * @param newElems<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void updateStorm(String stormId, StormBase newElems) {<br/>\n    +<br/>\n    +StormBase stormBase = stormBase(stormId, null);<br/>\n    +if (stormBase.get_component_executors() != null) {<br/>\n    +<br/>\n    +    Map<String, Integer> newComponentExecutors = new HashMap<>();<br/>\n    +    Map<String, Integer> componentExecutors = newElems.get_component_executors();<br/>\n    +    // componentExecutors maybe be APersistentMap, which don't support \"put\"<br/>\n    +    for (Map.Entry<String, Integer> entry : componentExecutors.entrySet()) </p>\n{\n    +newComponentExecutors.put(entry.getKey(), entry.getValue());\n    +    }\n<p>    +    for (Map.Entry<String, Integer> entry : stormBase.get_component_executors().entrySet()) {<br/>\n    +if (!componentExecutors.containsKey(entry.getKey())) </p>\n{\n    +    newComponentExecutors.put(entry.getKey(), entry.getValue());\n    +}\n<p>    +    }<br/>\n    +    if (newComponentExecutors.size() > 0)<br/>\n    +newElems.set_component_executors(newComponentExecutors);<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, DebugOptions> ComponentDebug = new HashMap<>();<br/>\n    +Map<String, DebugOptions> oldComponentDebug = stormBase.get_component_debug();<br/>\n    +<br/>\n    +Map<String, DebugOptions> newComponentDebug = newElems.get_component_debug();<br/>\n    +/// oldComponentDebug.keySet()/ newComponentDebug.keySet() maybe be APersistentSet, which don't support addAll<br/>\n    +Set<String> debugOptionsKeys = new HashSet<>();<br/>\n    +debugOptionsKeys.addAll(oldComponentDebug.keySet());<br/>\n    +debugOptionsKeys.addAll(newComponentDebug.keySet());<br/>\n    +for (String key : debugOptionsKeys) {<br/>\n    +    boolean enable = false;<br/>\n    +    double samplingpct = 0;<br/>\n    +    if (oldComponentDebug.containsKey(key)) </p>\n{\n    +enable = oldComponentDebug.get(key).is_enable();\n    +samplingpct = oldComponentDebug.get(key).get_samplingpct();\n    +    }\n<p>    +    if (newComponentDebug.containsKey(key)) </p>\n{\n    +enable = newComponentDebug.get(key).is_enable();\n    +samplingpct += newComponentDebug.get(key).get_samplingpct();\n    +    }\n<p>    +    DebugOptions debugOptions = new DebugOptions();<br/>\n    +    debugOptions.set_enable(enable);<br/>\n    +    debugOptions.set_samplingpct(samplingpct);<br/>\n    +    ComponentDebug.put(key, debugOptions);<br/>\n    +}<br/>\n    +if (ComponentDebug.size() > 0) </p>\n{\n    +    newElems.set_component_debug(ComponentDebug);\n    +}\n<p>    +<br/>\n    +if (StringUtils.isBlank(newElems.get_name())) </p>\n{\n    +    newElems.set_name(stormBase.get_name());\n    +}\n<p>    +if (newElems.get_status() == null) </p>\n{\n    +    newElems.set_status(stormBase.get_status());\n    +}<br/>\n    +if (newElems.get_num_workers() == 0) {\n    +    newElems.set_num_workers(stormBase.get_num_workers());\n    +}<br/>\n    +if (newElems.get_launch_time_secs() == 0) {\n    +    newElems.set_launch_time_secs(stormBase.get_launch_time_secs());\n    +}<br/>\n    +if (StringUtils.isBlank(newElems.get_owner())) {\n    +    newElems.set_owner(stormBase.get_owner());\n    +}<br/>\n    +if (newElems.get_topology_action_options() == null) {\n    +    newElems.set_topology_action_options(stormBase.get_topology_action_options());\n    +}<br/>\n    +if (newElems.get_status() == null) {    +    newElems.set_status(stormBase.get_status());    +}\n<p>    +stateStorage.set_data(ClusterUtils.stormPath(stormId), Utils.serialize(newElems), acls);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void removeStormBase(String stormId) </p>\n{\n    +stateStorage.delete_node(ClusterUtils.stormPath(stormId));\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void setAssignment(String stormId, Assignment info) </p>\n{\n    +stateStorage.set_data(ClusterUtils.assignmentPath(stormId), Utils.serialize(info), acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void setupBlobstore(String key, NimbusInfo nimbusInfo, Integer versionInfo) {<br/>\n    +String path = ClusterUtils.blobstorePath(key) + ClusterUtils.ZK_SEPERATOR + nimbusInfo.toHostPortString() + \"-\" + versionInfo;<br/>\n    +LOG.info(\"set-path: {}\", path);<br/>\n    +stateStorage.mkdirs(ClusterUtils.blobstorePath(key), acls);<br/>\n    +stateStorage.delete_node_blobstore(ClusterUtils.blobstorePath(key), nimbusInfo.toHostPortString());<br/>\n    +stateStorage.set_ephemeral_node(path, null, acls);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<String> activeKeys() </p>\n{\n    +return stateStorage.get_children(ClusterUtils.BLOBSTORE_SUBTREE, false);\n    +    }\n<p>    +<br/>\n    +    // blobstore state<br/>\n    +    @Override<br/>\n    +    public List<String> blobstore(Runnable callback) {<br/>\n    +if (callback != null) </p>\n{\n    +    blobstoreCallback.set(callback);\n    +}\n<p>    +stateStorage.sync_path(ClusterUtils.BLOBSTORE_SUBTREE);<br/>\n    +return stateStorage.get_children(ClusterUtils.BLOBSTORE_SUBTREE, callback != null);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void removeStorm(String stormId) </p>\n{\n    +stateStorage.delete_node(ClusterUtils.assignmentPath(stormId));\n    +stateStorage.delete_node(ClusterUtils.credentialsPath(stormId));\n    +stateStorage.delete_node(ClusterUtils.logConfigPath(stormId));\n    +stateStorage.delete_node(ClusterUtils.profilerConfigPath(stormId));\n    +removeStormBase(stormId);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void removeBlobstoreKey(String blobKey) {<br/>\n    +LOG.debug(\"remove key {}\", blobKey);<br/>\n    +stateStorage.delete_node(ClusterUtils.blobstorePath(blobKey));<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void removeKeyVersion(String blobKey) </p>\n{\n    +stateStorage.delete_node(ClusterUtils.blobstoreMaxKeySequenceNumberPath(blobKey));\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void reportError(String stormId, String componentId, String node, Long port, Throwable error) {<br/>\n    +<br/>\n    +String path = ClusterUtils.errorPath(stormId, componentId);<br/>\n    +String lastErrorPath = ClusterUtils.lastErrorPath(stormId, componentId);<br/>\n    +ErrorInfo errorInfo = new ErrorInfo(ClusterUtils.stringifyError(error), Time.currentTimeSecs());<br/>\n    +errorInfo.set_host(node);<br/>\n    +errorInfo.set_port(port.intValue());<br/>\n    +byte[] serData = Utils.serialize(errorInfo);<br/>\n    +stateStorage.mkdirs(path, acls);<br/>\n    +stateStorage.create_sequential(path + ClusterUtils.ZK_SEPERATOR + \"e\", serData, acls);<br/>\n    +stateStorage.set_data(lastErrorPath, serData, acls);<br/>\n    +List<String> childrens = stateStorage.get_children(path, false);<br/>\n    +<br/>\n    +Collections.sort(childrens, new Comparator<String>() {<br/>\n    +    public int compare(String arg0, String arg1) </p>\n{\n    +return Long.compare(Long.parseLong(arg0.substring(1)), Long.parseLong(arg1.substring(1)));\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +while (childrens.size() > 10) </p>\n{\n    +    stateStorage.delete_node(path + ClusterUtils.ZK_SEPERATOR + childrens.remove(0));\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<ErrorInfo> errors(String stormId, String componentId) {<br/>\n    +List<ErrorInfo> errorInfos = new ArrayList<>();<br/>\n    +try {<br/>\n    +    String path = ClusterUtils.errorPath(stormId, componentId);<br/>\n    +    if (stateStorage.node_exists(path, false)) {<br/>\n    +List<String> childrens = stateStorage.get_children(path, false);<br/>\n    +for (String child : childrens) </p>\n{\n    +    String childPath = path + ClusterUtils.ZK_SEPERATOR + child;\n    +    ErrorInfo errorInfo = ClusterUtils.maybeDeserialize(stateStorage.get_data(childPath, false), ErrorInfo.class);\n    +    if (errorInfo != null)\n    +errorInfos.add(errorInfo);\n    +}\n<p>    +    }<br/>\n    +    Collections.sort(errorInfos, new Comparator<ErrorInfo>() {<br/>\n    +public int compare(ErrorInfo arg0, ErrorInfo arg1) </p>\n{\n    +    return Integer.compare(arg1.get_error_time_secs(), arg0.get_error_time_secs());\n    +}\n<p>    +    });<br/>\n    +} catch (Exception e) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The original code was not wrapping the Exception in a RuntimeException</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653960/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653970","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653970","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653970,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5NzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T19:02:03Z","updated_at":"2025-01-24T14:24:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53830685\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53830685</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ZKStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,270 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.UUID;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class ZKStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ZKStateStorage.class);<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, ZKStateChangedCallback> callbacks = new ConcurrentHashMap<String, ZKStateChangedCallback>();<br/>\n    +    private CuratorFramework zkWriter;<br/>\n    +    private CuratorFramework zkReader;<br/>\n    +    private AtomicBoolean active;<br/>\n    +<br/>\n    +    private boolean isNimbus;<br/>\n    +    private Map authConf;<br/>\n    +    private Map<Object, Object> conf;<br/>\n    +<br/>\n    +    public ZKStateStorage(Map<Object, Object> conf, Map authConf, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    +this.conf = conf;<br/>\n    +this.authConf = authConf;<br/>\n    +if (context.getDaemonType().equals(DaemonType.NIMBUS))<br/>\n    +    this.isNimbus = true;<br/>\n    +<br/>\n    +// just mkdir STORM_ZOOKEEPER_ROOT dir<br/>\n    +CuratorFramework zkTemp = mkZk();<br/>\n    +String rootPath = String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT));<br/>\n    +Zookeeper.mkdirs(zkTemp, rootPath, acls);<br/>\n    +zkTemp.close();<br/>\n    +<br/>\n    +active = new AtomicBoolean(true);<br/>\n    +zkWriter = mkZk(new WatcherCallBack() {<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +if (active.get()) {<br/>\n    +    if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +    } else {<br/>\n    +LOG.info(\"Received event {} : {} : {}\", state, type, path);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This info message was not logged before. Could we at least make it debug.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653970/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653981","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653981","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653981,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T19:03:35Z","updated_at":"2025-01-24T14:24:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53830934\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53830934</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ZKStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,270 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.UUID;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class ZKStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ZKStateStorage.class);<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, ZKStateChangedCallback> callbacks = new ConcurrentHashMap<String, ZKStateChangedCallback>();<br/>\n    +    private CuratorFramework zkWriter;<br/>\n    +    private CuratorFramework zkReader;<br/>\n    +    private AtomicBoolean active;<br/>\n    +<br/>\n    +    private boolean isNimbus;<br/>\n    +    private Map authConf;<br/>\n    +    private Map<Object, Object> conf;<br/>\n    +<br/>\n    +    public ZKStateStorage(Map<Object, Object> conf, Map authConf, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    +this.conf = conf;<br/>\n    +this.authConf = authConf;<br/>\n    +if (context.getDaemonType().equals(DaemonType.NIMBUS))<br/>\n    +    this.isNimbus = true;<br/>\n    +<br/>\n    +// just mkdir STORM_ZOOKEEPER_ROOT dir<br/>\n    +CuratorFramework zkTemp = mkZk();<br/>\n    +String rootPath = String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT));<br/>\n    +Zookeeper.mkdirs(zkTemp, rootPath, acls);<br/>\n    +zkTemp.close();<br/>\n    +<br/>\n    +active = new AtomicBoolean(true);<br/>\n    +zkWriter = mkZk(new WatcherCallBack() {<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +if (active.get()) {<br/>\n    +    if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +    } else {<br/>\n    +LOG.info(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +    }<br/>\n    +<br/>\n    +    if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +    ZKStateChangedCallback fn = e.getValue();\n    +    fn.changed(type, path);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +});<br/>\n    +if (isNimbus) {<br/>\n    +    zkReader = mkZk(new WatcherCallBack() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    It might be nice to reuse the same watcher callback instance, just so we don't have two identical anonymous classes.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653981/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653984","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653984","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653984,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T19:06:43Z","updated_at":"2025-01-24T14:24:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53831437\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53831437</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ZKStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,270 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.UUID;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class ZKStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ZKStateStorage.class);<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, ZKStateChangedCallback> callbacks = new ConcurrentHashMap<String, ZKStateChangedCallback>();<br/>\n    +    private CuratorFramework zkWriter;<br/>\n    +    private CuratorFramework zkReader;<br/>\n    +    private AtomicBoolean active;<br/>\n    +<br/>\n    +    private boolean isNimbus;<br/>\n    +    private Map authConf;<br/>\n    +    private Map<Object, Object> conf;<br/>\n    +<br/>\n    +    public ZKStateStorage(Map<Object, Object> conf, Map authConf, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    +this.conf = conf;<br/>\n    +this.authConf = authConf;<br/>\n    +if (context.getDaemonType().equals(DaemonType.NIMBUS))<br/>\n    +    this.isNimbus = true;<br/>\n    +<br/>\n    +// just mkdir STORM_ZOOKEEPER_ROOT dir<br/>\n    +CuratorFramework zkTemp = mkZk();<br/>\n    +String rootPath = String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT));<br/>\n    +Zookeeper.mkdirs(zkTemp, rootPath, acls);<br/>\n    +zkTemp.close();<br/>\n    +<br/>\n    +active = new AtomicBoolean(true);<br/>\n    +zkWriter = mkZk(new WatcherCallBack() {<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +if (active.get()) {<br/>\n    +    if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +    } else {<br/>\n    +LOG.info(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +    }<br/>\n    +<br/>\n    +    if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +    ZKStateChangedCallback fn = e.getValue();\n    +    fn.changed(type, path);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +});<br/>\n    +if (isNimbus) {<br/>\n    +    zkReader = mkZk(new WatcherCallBack() {<br/>\n    +@Override<br/>\n    +public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +    if (active.get()) {<br/>\n    +if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +    LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +} else {<br/>\n    +    LOG.debug(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +}<br/>\n    +<br/>\n    +if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +    for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +ZKStateChangedCallback fn = e.getValue();\n    +fn.changed(type, path);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    });<br/>\n    +} else </p>\n{\n    +    zkReader = zkWriter;\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    private CuratorFramework mkZk() throws IOException </p>\n{\n    +return Zookeeper.mkClient(conf, (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS), conf.get(Config.STORM_ZOOKEEPER_PORT), \"\",\n    +new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    private CuratorFramework mkZk(WatcherCallBack watcher) throws NumberFormatException, IOException </p>\n{\n    +return Zookeeper.mkClient(conf, (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS), conf.get(Config.STORM_ZOOKEEPER_PORT),\n    +String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT)), watcher, authConf);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node_blobstore(String path, String nimbusHostPortInfo) </p>\n{\n    +Zookeeper.deleteNodeBlobstore(zkWriter, path, nimbusHostPortInfo);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String register(ZKStateChangedCallback callback) </p>\n{\n    +String id = UUID.randomUUID().toString();\n    +this.callbacks.put(id, callback);\n    +return id;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void unregister(String id) </p>\n{\n    +this.callbacks.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String create_sequential(String path, byte[] data, List<ACL> acls) </p>\n{\n    +return Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL_SEQUENTIAL, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void mkdirs(String path, List<ACL> acls) </p>\n{\n    +Zookeeper.mkdirs(zkWriter, path, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node(String path) </p>\n{\n    +Zookeeper.deleteNode(zkWriter, path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_ephemeral_node(String path, byte[] data, List<ACL> acls) {<br/>\n    +Zookeeper.mkdirs(zkWriter, parentPath(path), acls);<br/>\n    +if (Zookeeper.exists(zkWriter, path, false)) {<br/>\n    +    try </p>\n{\n    +Zookeeper.setData(zkWriter, path, data);\n    +    }\n<p> catch (Exception e) {<br/>\n    +if (Utils.exceptionCauseIsInstanceOf(KeeperException.NoNodeException.class, e)) </p>\n{\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL, acls);\n    +}\n<p> else {<br/>\n    +    throw Utils.wrapInRuntime(e);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The original code did not wrap this in a Runtime Exception</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653988","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653988","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653988,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T19:07:35Z","updated_at":"2025-01-24T14:24:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53831586\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53831586</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ZKStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,270 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.UUID;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class ZKStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ZKStateStorage.class);<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, ZKStateChangedCallback> callbacks = new ConcurrentHashMap<String, ZKStateChangedCallback>();<br/>\n    +    private CuratorFramework zkWriter;<br/>\n    +    private CuratorFramework zkReader;<br/>\n    +    private AtomicBoolean active;<br/>\n    +<br/>\n    +    private boolean isNimbus;<br/>\n    +    private Map authConf;<br/>\n    +    private Map<Object, Object> conf;<br/>\n    +<br/>\n    +    public ZKStateStorage(Map<Object, Object> conf, Map authConf, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    +this.conf = conf;<br/>\n    +this.authConf = authConf;<br/>\n    +if (context.getDaemonType().equals(DaemonType.NIMBUS))<br/>\n    +    this.isNimbus = true;<br/>\n    +<br/>\n    +// just mkdir STORM_ZOOKEEPER_ROOT dir<br/>\n    +CuratorFramework zkTemp = mkZk();<br/>\n    +String rootPath = String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT));<br/>\n    +Zookeeper.mkdirs(zkTemp, rootPath, acls);<br/>\n    +zkTemp.close();<br/>\n    +<br/>\n    +active = new AtomicBoolean(true);<br/>\n    +zkWriter = mkZk(new WatcherCallBack() {<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +if (active.get()) {<br/>\n    +    if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +    } else {<br/>\n    +LOG.info(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +    }<br/>\n    +<br/>\n    +    if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +    ZKStateChangedCallback fn = e.getValue();\n    +    fn.changed(type, path);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +});<br/>\n    +if (isNimbus) {<br/>\n    +    zkReader = mkZk(new WatcherCallBack() {<br/>\n    +@Override<br/>\n    +public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +    if (active.get()) {<br/>\n    +if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +    LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +} else {<br/>\n    +    LOG.debug(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +}<br/>\n    +<br/>\n    +if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +    for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +ZKStateChangedCallback fn = e.getValue();\n    +fn.changed(type, path);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    });<br/>\n    +} else </p>\n{\n    +    zkReader = zkWriter;\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    private CuratorFramework mkZk() throws IOException </p>\n{\n    +return Zookeeper.mkClient(conf, (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS), conf.get(Config.STORM_ZOOKEEPER_PORT), \"\",\n    +new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    private CuratorFramework mkZk(WatcherCallBack watcher) throws NumberFormatException, IOException </p>\n{\n    +return Zookeeper.mkClient(conf, (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS), conf.get(Config.STORM_ZOOKEEPER_PORT),\n    +String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT)), watcher, authConf);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node_blobstore(String path, String nimbusHostPortInfo) </p>\n{\n    +Zookeeper.deleteNodeBlobstore(zkWriter, path, nimbusHostPortInfo);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String register(ZKStateChangedCallback callback) </p>\n{\n    +String id = UUID.randomUUID().toString();\n    +this.callbacks.put(id, callback);\n    +return id;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void unregister(String id) </p>\n{\n    +this.callbacks.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String create_sequential(String path, byte[] data, List<ACL> acls) </p>\n{\n    +return Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL_SEQUENTIAL, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void mkdirs(String path, List<ACL> acls) </p>\n{\n    +Zookeeper.mkdirs(zkWriter, path, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node(String path) </p>\n{\n    +Zookeeper.deleteNode(zkWriter, path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_ephemeral_node(String path, byte[] data, List<ACL> acls) {<br/>\n    +Zookeeper.mkdirs(zkWriter, parentPath(path), acls);<br/>\n    +if (Zookeeper.exists(zkWriter, path, false)) {<br/>\n    +    try </p>\n{\n    +Zookeeper.setData(zkWriter, path, data);\n    +    }\n<p> catch (Exception e) {<br/>\n    +if (Utils.exceptionCauseIsInstanceOf(KeeperException.NoNodeException.class, e)) </p>\n{\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL, acls);\n    +}\n<p> else </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +} else </p>\n{\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL, acls);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Integer get_version(String path, boolean watch) throws Exception </p>\n{\n    +Integer ret = Zookeeper.getVersion(zkReader, path, watch);\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public boolean node_exists(String path, boolean watch) {<br/>\n    +return Zookeeper.existsNode(zkWriter, path, watch);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This should be zkReader, not zkWriter</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653995","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612653995","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612653995,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTM5OTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T19:10:56Z","updated_at":"2025-01-24T14:24:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53832190\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53832190</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ZKStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,270 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.UUID;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class ZKStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ZKStateStorage.class);<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, ZKStateChangedCallback> callbacks = new ConcurrentHashMap<String, ZKStateChangedCallback>();<br/>\n    +    private CuratorFramework zkWriter;<br/>\n    +    private CuratorFramework zkReader;<br/>\n    +    private AtomicBoolean active;<br/>\n    +<br/>\n    +    private boolean isNimbus;<br/>\n    +    private Map authConf;<br/>\n    +    private Map<Object, Object> conf;<br/>\n    +<br/>\n    +    public ZKStateStorage(Map<Object, Object> conf, Map authConf, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    +this.conf = conf;<br/>\n    +this.authConf = authConf;<br/>\n    +if (context.getDaemonType().equals(DaemonType.NIMBUS))<br/>\n    +    this.isNimbus = true;<br/>\n    +<br/>\n    +// just mkdir STORM_ZOOKEEPER_ROOT dir<br/>\n    +CuratorFramework zkTemp = mkZk();<br/>\n    +String rootPath = String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT));<br/>\n    +Zookeeper.mkdirs(zkTemp, rootPath, acls);<br/>\n    +zkTemp.close();<br/>\n    +<br/>\n    +active = new AtomicBoolean(true);<br/>\n    +zkWriter = mkZk(new WatcherCallBack() {<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +if (active.get()) {<br/>\n    +    if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +    } else {<br/>\n    +LOG.info(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +    }<br/>\n    +<br/>\n    +    if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +    ZKStateChangedCallback fn = e.getValue();\n    +    fn.changed(type, path);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +});<br/>\n    +if (isNimbus) {<br/>\n    +    zkReader = mkZk(new WatcherCallBack() {<br/>\n    +@Override<br/>\n    +public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +    if (active.get()) {<br/>\n    +if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +    LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +} else {<br/>\n    +    LOG.debug(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +}<br/>\n    +<br/>\n    +if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +    for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +ZKStateChangedCallback fn = e.getValue();\n    +fn.changed(type, path);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    });<br/>\n    +} else </p>\n{\n    +    zkReader = zkWriter;\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    private CuratorFramework mkZk() throws IOException </p>\n{\n    +return Zookeeper.mkClient(conf, (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS), conf.get(Config.STORM_ZOOKEEPER_PORT), \"\",\n    +new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    private CuratorFramework mkZk(WatcherCallBack watcher) throws NumberFormatException, IOException </p>\n{\n    +return Zookeeper.mkClient(conf, (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS), conf.get(Config.STORM_ZOOKEEPER_PORT),\n    +String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT)), watcher, authConf);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node_blobstore(String path, String nimbusHostPortInfo) </p>\n{\n    +Zookeeper.deleteNodeBlobstore(zkWriter, path, nimbusHostPortInfo);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String register(ZKStateChangedCallback callback) </p>\n{\n    +String id = UUID.randomUUID().toString();\n    +this.callbacks.put(id, callback);\n    +return id;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void unregister(String id) </p>\n{\n    +this.callbacks.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String create_sequential(String path, byte[] data, List<ACL> acls) </p>\n{\n    +return Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL_SEQUENTIAL, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void mkdirs(String path, List<ACL> acls) </p>\n{\n    +Zookeeper.mkdirs(zkWriter, path, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node(String path) </p>\n{\n    +Zookeeper.deleteNode(zkWriter, path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_ephemeral_node(String path, byte[] data, List<ACL> acls) {<br/>\n    +Zookeeper.mkdirs(zkWriter, parentPath(path), acls);<br/>\n    +if (Zookeeper.exists(zkWriter, path, false)) {<br/>\n    +    try </p>\n{\n    +Zookeeper.setData(zkWriter, path, data);\n    +    }\n<p> catch (Exception e) {<br/>\n    +if (Utils.exceptionCauseIsInstanceOf(KeeperException.NoNodeException.class, e)) </p>\n{\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL, acls);\n    +}\n<p> else </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +} else </p>\n{\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL, acls);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Integer get_version(String path, boolean watch) throws Exception </p>\n{\n    +Integer ret = Zookeeper.getVersion(zkReader, path, watch);\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public boolean node_exists(String path, boolean watch) </p>\n{\n    +return Zookeeper.existsNode(zkWriter, path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_children(String path, boolean watch) </p>\n{\n    +return Zookeeper.getChildren(zkReader, path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void close() {<br/>\n    +this.active.set(false);<br/>\n    +zkWriter.close();<br/>\n    +if (isNimbus) </p>\n{\n    +    zkReader.close();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void set_data(String path, byte[] data, List<ACL> acls) {<br/>\n    +if (Zookeeper.exists(zkWriter, path, false)) </p>\n{\n    +    Zookeeper.setData(zkWriter, path, data);\n    +}\n<p> else </p>\n{\n    +    Zookeeper.mkdirs(zkWriter, parentPath(path), acls);\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.PERSISTENT, acls);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_data(String path, boolean watch) </p>\n{\n    +byte[] ret = null;\n    +\n    +ret = Zookeeper.getData(zkReader, path, watch);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Map get_data_with_version(String path, boolean watch) </p>\n{\n    +return Zookeeper.getDataWithVersion(zkReader, path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_worker_hb(String path, byte[] data, List<ACL> acls) </p>\n{\n    +set_data(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_worker_hb(String path, boolean watch) </p>\n{\n    +return Zookeeper.getData(zkReader, path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_worker_hb_children(String path, boolean watch) </p>\n{\n    +return get_children(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_worker_hb(String path) </p>\n{\n    +delete_node(path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void add_listener(final ConnectionStateListener listener) {<br/>\n    +Zookeeper.addListener(zkReader, new ConnectionStateListener() {<br/>\n    +    @Override<br/>\n    +    public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) </p>\n{\n    +listener.stateChanged(curatorFramework, connectionState);\n    +    }\n<p>    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void sync_path(String path) </p>\n{\n    +Zookeeper.syncPath(zkWriter, path);\n    +    }\n<p>    +<br/>\n    +    // To be remove when finished port Util.clj<br/>\n    +    public static String parentPath(String path) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This can be removed now.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653995/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187846619","html_url":"https://github.com/apache/storm/pull/1081#issuecomment-187846619","issue_url":"https://api.github.com/repos/apache/storm/issues/1081","id":187846619,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzg0NjYxOQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T19:12:51Z","updated_at":"2016-02-23T19:12:51Z","author_association":"CONTRIBUTOR","body":"OK I made it all of the way through.  Things look fairly good, but there are a few places that need to be updated/fixed.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187846619/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654000","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612654000","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612654000,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQwMDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T19:12:53Z","updated_at":"2025-01-24T14:24:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#issuecomment-187846619\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#issuecomment-187846619</a></p>\n\n<p>    OK I made it all of the way through.  Things look fairly good, but there are a few places that need to be updated/fixed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187881681","html_url":"https://github.com/apache/storm/pull/1114#issuecomment-187881681","issue_url":"https://api.github.com/repos/apache/storm/issues/1114","id":187881681,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzg4MTY4MQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:07:40Z","updated_at":"2016-02-23T20:07:40Z","author_association":"CONTRIBUTOR","body":"+1 looks good to me\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187881681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649579","html_url":"https://github.com/apache/storm/issues/5092#issuecomment-2612649579","issue_url":"https://api.github.com/repos/apache/storm/issues/5092","id":2612649579,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk1Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:07:41Z","updated_at":"2025-01-24T14:22:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1114#issuecomment-187881681\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1114#issuecomment-187881681</a></p>\n\n<p>    +1 looks good to me</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649579/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649583","html_url":"https://github.com/apache/storm/issues/5092#issuecomment-2612649583","issue_url":"https://api.github.com/repos/apache/storm/issues/5092","id":2612649583,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk1ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:20:17Z","updated_at":"2025-01-24T14:22:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1114\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1114</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649583/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649589","html_url":"https://github.com/apache/storm/issues/5092#issuecomment-2612649589","issue_url":"https://api.github.com/repos/apache/storm/issues/5092","id":2612649589,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk1ODk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:20:36Z","updated_at":"2025-01-24T14:22:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellina\" class=\"user-hover\" rel=\"abellina\">Alessandro Bellina</a>,</p>\n\n<p>I merged this into master.  Keep up the good work.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649589/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702344","html_url":"https://github.com/apache/storm/issues/5314#issuecomment-2612702344","issue_url":"https://api.github.com/repos/apache/storm/issues/5314","id":2612702344,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDIzNDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:32:25Z","updated_at":"2025-01-24T14:45:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1021\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1021</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702349","html_url":"https://github.com/apache/storm/issues/5314#issuecomment-2612702349","issue_url":"https://api.github.com/repos/apache/storm/issues/5314","id":2612702349,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDIzNDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:32:42Z","updated_at":"2025-01-24T14:45:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vesense\" class=\"user-hover\" rel=\"vesense\">Xin Wang</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702349/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187899371","html_url":"https://github.com/apache/storm/pull/1127#issuecomment-187899371","issue_url":"https://api.github.com/repos/apache/storm/issues/1127","id":187899371,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzg5OTM3MQ==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:53:56Z","updated_at":"2016-02-23T20:53:56Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187899371/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872802","html_url":"https://github.com/apache/storm/issues/5387#issuecomment-2612872802","issue_url":"https://api.github.com/repos/apache/storm/issues/5387","id":2612872802,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzI4MDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:53:58Z","updated_at":"2025-01-24T16:02:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1127#issuecomment-187899371\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1127#issuecomment-187899371</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872805","html_url":"https://github.com/apache/storm/issues/5387#issuecomment-2612872805","issue_url":"https://api.github.com/repos/apache/storm/issues/5387","id":2612872805,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzI4MDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T20:54:12Z","updated_at":"2025-01-24T16:02:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1127\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1127</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872805/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187905337","html_url":"https://github.com/apache/storm/pull/1143#issuecomment-187905337","issue_url":"https://api.github.com/repos/apache/storm/issues/1143","id":187905337,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NzkwNTMzNw==","user":{"login":"roshannaik","id":2366541,"node_id":"MDQ6VXNlcjIzNjY1NDE=","avatar_url":"https://avatars.githubusercontent.com/u/2366541?v=4","gravatar_id":"","url":"https://api.github.com/users/roshannaik","html_url":"https://github.com/roshannaik","followers_url":"https://api.github.com/users/roshannaik/followers","following_url":"https://api.github.com/users/roshannaik/following{/other_user}","gists_url":"https://api.github.com/users/roshannaik/gists{/gist_id}","starred_url":"https://api.github.com/users/roshannaik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/roshannaik/subscriptions","organizations_url":"https://api.github.com/users/roshannaik/orgs","repos_url":"https://api.github.com/users/roshannaik/repos","events_url":"https://api.github.com/users/roshannaik/events{/privacy}","received_events_url":"https://api.github.com/users/roshannaik/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T21:07:18Z","updated_at":"2016-02-23T21:07:18Z","author_association":"CONTRIBUTOR","body":"Also people may not care much about numbers less than 1 ms. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187905337/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875576","html_url":"https://github.com/apache/storm/issues/5406#issuecomment-2612875576","issue_url":"https://api.github.com/repos/apache/storm/issues/5406","id":2612875576,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU1NzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T21:07:19Z","updated_at":"2025-01-24T16:03:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user roshannaik commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1143#issuecomment-187905337\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1143#issuecomment-187905337</a></p>\n\n<p>    Also people may not care much about numbers less than 1 ms. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875576/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649256","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649256","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649256,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyNTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:22:14Z","updated_at":"2025-01-24T14:22:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#discussion_r53860859\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#discussion_r53860859</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/ui/helpers.clj &#8212;<br/>\n    @@ -46,197 +46,3 @@<br/>\n       (fn <span class=\"error\">&#91;req&#93;</span><br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Should we move this someplace else?  Or perhaps inline it into the servers that use it?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649256/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649261","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649261","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649261,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyNjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:25:00Z","updated_at":"2025-01-24T14:22:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#discussion_r53861204\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#discussion_r53861204</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ui/UIHelpers.java &#8212;<br/>\n    @@ -0,0 +1,319 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p/><br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + * <p/><br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.ui;<br/>\n    +<br/>\n    +import clojure.lang.Keyword;<br/>\n    +import clojure.lang.RT;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    We should not depend on clojure internals.  For keywords we should have something that can translate clojure maps/keywords into java objects, or just use those java object directly.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649261/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649267","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649267","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649267,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:27:49Z","updated_at":"2025-01-24T14:22:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#discussion_r53861576\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#discussion_r53861576</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ui/UIHelpers.java &#8212;<br/>\n    @@ -0,0 +1,319 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p/><br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + * <p/><br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.ui;<br/>\n    +<br/>\n    +import clojure.lang.Keyword;<br/>\n    +import clojure.lang.RT;<br/>\n    +import com.google.common.base.Joiner;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import org.apache.commons.lang.StringEscapeUtils;<br/>\n    +import org.apache.storm.generated.ExecutorInfo;<br/>\n    +import org.apache.storm.logging.filters.AccessLoggingFilter;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.eclipse.jetty.server.Connector;<br/>\n    +import org.eclipse.jetty.server.DispatcherType;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.eclipse.jetty.server.nio.SelectChannelConnector;<br/>\n    +import org.eclipse.jetty.server.ssl.SslSocketConnector;<br/>\n    +import org.eclipse.jetty.servlet.FilterHolder;<br/>\n    +import org.eclipse.jetty.servlet.FilterMapping;<br/>\n    +import org.eclipse.jetty.servlet.ServletContextHandler;<br/>\n    +import org.eclipse.jetty.servlet.ServletHolder;<br/>\n    +import org.eclipse.jetty.servlets.CrossOriginFilter;<br/>\n    +import org.eclipse.jetty.util.ssl.SslContextFactory;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.io.PrintWriter;<br/>\n    +import java.io.StringWriter;<br/>\n    +import java.net.URLEncoder;<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class UIHelpers {<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_SEC_DIVIDERS = {<br/>\n    +    new String[]</p>\n{\"s\", \"60\"},<br/>\n    +    new String[]{\"m\", \"60\"},<br/>\n    +    new String[]{\"h\", \"24\"},<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_MS_DIVIDERS = {<br/>\n    +    new String[]{\"ms\", \"1000\"},<br/>\n    +    new String[]{\"s\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"m\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"h\", \"24\"}\n<p>,<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    public static String prettyUptimeStr(String val, String[][] dividers) {<br/>\n    +int uptime = Integer.parseInt(val);<br/>\n    +LinkedList<String> tmp = new LinkedList<>();<br/>\n    +for (String[] divider : dividers) {<br/>\n    +    if (uptime > 0) {<br/>\n    +if (divider<span class=\"error\">&#91;1&#93;</span> != null) {<br/>\n    +    int div = Integer.parseInt(divider<span class=\"error\">&#91;1&#93;</span>);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    It seems really odd to parse an int out of a Constant that we are setting.  I think this is OK, but just really odd.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649267/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649275","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649275","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649275,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyNzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:30:43Z","updated_at":"2025-01-24T14:22:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#discussion_r53861999\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#discussion_r53861999</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ui/UIHelpers.java &#8212;<br/>\n    @@ -0,0 +1,319 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p/><br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + * <p/><br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.ui;<br/>\n    +<br/>\n    +import clojure.lang.Keyword;<br/>\n    +import clojure.lang.RT;<br/>\n    +import com.google.common.base.Joiner;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import org.apache.commons.lang.StringEscapeUtils;<br/>\n    +import org.apache.storm.generated.ExecutorInfo;<br/>\n    +import org.apache.storm.logging.filters.AccessLoggingFilter;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.eclipse.jetty.server.Connector;<br/>\n    +import org.eclipse.jetty.server.DispatcherType;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.eclipse.jetty.server.nio.SelectChannelConnector;<br/>\n    +import org.eclipse.jetty.server.ssl.SslSocketConnector;<br/>\n    +import org.eclipse.jetty.servlet.FilterHolder;<br/>\n    +import org.eclipse.jetty.servlet.FilterMapping;<br/>\n    +import org.eclipse.jetty.servlet.ServletContextHandler;<br/>\n    +import org.eclipse.jetty.servlet.ServletHolder;<br/>\n    +import org.eclipse.jetty.servlets.CrossOriginFilter;<br/>\n    +import org.eclipse.jetty.util.ssl.SslContextFactory;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.io.PrintWriter;<br/>\n    +import java.io.StringWriter;<br/>\n    +import java.net.URLEncoder;<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class UIHelpers {<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_SEC_DIVIDERS = {<br/>\n    +    new String[]</p>\n{\"s\", \"60\"},<br/>\n    +    new String[]{\"m\", \"60\"},<br/>\n    +    new String[]{\"h\", \"24\"},<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_MS_DIVIDERS = {<br/>\n    +    new String[]{\"ms\", \"1000\"},<br/>\n    +    new String[]{\"s\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"m\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"h\", \"24\"}\n<p>,<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    public static String prettyUptimeStr(String val, String[][] dividers) {<br/>\n    +int uptime = Integer.parseInt(val);<br/>\n    +LinkedList<String> tmp = new LinkedList<>();<br/>\n    +for (String[] divider : dividers) {<br/>\n    +    if (uptime > 0) {<br/>\n    +if (divider<span class=\"error\">&#91;1&#93;</span> != null) </p>\n{\n    +    int div = Integer.parseInt(divider[1]);\n    +    tmp.addFirst(uptime % div + divider[0]);\n    +    uptime = uptime / div;\n    +}\n<p> else </p>\n{\n    +    tmp.addFirst(uptime + divider[0]);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return Joiner.on(\" \").join(tmp);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String prettyUptimeSec(String sec) </p>\n{\n    +return prettyUptimeStr(sec, PRETTY_SEC_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeSec(int secs) </p>\n{\n    +return prettyUptimeStr(String.valueOf(secs), PRETTY_SEC_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeMs(String ms) </p>\n{\n    +return prettyUptimeStr(ms, PRETTY_MS_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeMs(int ms) </p>\n{\n    +return prettyUptimeStr(String.valueOf(ms), PRETTY_MS_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +<br/>\n    +    public static String urlFormat(String fmt, Object... args) {<br/>\n    +String[] argsEncoded = new String<span class=\"error\">&#91;args.length&#93;</span>;<br/>\n    +for (int i = 0; i < args.length; i++) </p>\n{\n    +    argsEncoded[i] = URLEncoder.encode(String.valueOf(args[i]));\n    +}\n<p>    +return String.format(fmt, argsEncoded);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String prettyExecutorInfo(ExecutorInfo e) </p>\n{\n    +return \"[\" + e.get_task_start() + \"-\" + e.get_task_end() + \"]\";\n    +    }\n<p>    +<br/>\n    +    public static Map unauthorizedUserJson(String user) </p>\n{\n    +return ImmutableMap.of(\n    +\"error\", \"No Authorization\",\n    +\"errorMessage\", String.format(\"User %s is not authorized.\", user)\n    +);\n    +    }\n<p>    +<br/>\n    +    public static List unauthorizedUserHtml(String user) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is very hiccup specific and is now only used by logviewer.  I would prefer to see this removed and the original function placed in logviewer so when we redo the logviewer code and replace hiccup we can remove this code entirely.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649278","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649278","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649278,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyNzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:32:46Z","updated_at":"2025-01-24T14:22:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#discussion_r53862294\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#discussion_r53862294</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ui/UIHelpers.java &#8212;<br/>\n    @@ -0,0 +1,319 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p/><br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + * <p/><br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.ui;<br/>\n    +<br/>\n    +import clojure.lang.Keyword;<br/>\n    +import clojure.lang.RT;<br/>\n    +import com.google.common.base.Joiner;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import org.apache.commons.lang.StringEscapeUtils;<br/>\n    +import org.apache.storm.generated.ExecutorInfo;<br/>\n    +import org.apache.storm.logging.filters.AccessLoggingFilter;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.eclipse.jetty.server.Connector;<br/>\n    +import org.eclipse.jetty.server.DispatcherType;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.eclipse.jetty.server.nio.SelectChannelConnector;<br/>\n    +import org.eclipse.jetty.server.ssl.SslSocketConnector;<br/>\n    +import org.eclipse.jetty.servlet.FilterHolder;<br/>\n    +import org.eclipse.jetty.servlet.FilterMapping;<br/>\n    +import org.eclipse.jetty.servlet.ServletContextHandler;<br/>\n    +import org.eclipse.jetty.servlet.ServletHolder;<br/>\n    +import org.eclipse.jetty.servlets.CrossOriginFilter;<br/>\n    +import org.eclipse.jetty.util.ssl.SslContextFactory;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.io.PrintWriter;<br/>\n    +import java.io.StringWriter;<br/>\n    +import java.net.URLEncoder;<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class UIHelpers {<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_SEC_DIVIDERS = {<br/>\n    +    new String[]</p>\n{\"s\", \"60\"},<br/>\n    +    new String[]{\"m\", \"60\"},<br/>\n    +    new String[]{\"h\", \"24\"},<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_MS_DIVIDERS = {<br/>\n    +    new String[]{\"ms\", \"1000\"},<br/>\n    +    new String[]{\"s\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"m\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"h\", \"24\"}\n<p>,<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    public static String prettyUptimeStr(String val, String[][] dividers) {<br/>\n    +int uptime = Integer.parseInt(val);<br/>\n    +LinkedList<String> tmp = new LinkedList<>();<br/>\n    +for (String[] divider : dividers) {<br/>\n    +    if (uptime > 0) {<br/>\n    +if (divider<span class=\"error\">&#91;1&#93;</span> != null) </p>\n{\n    +    int div = Integer.parseInt(divider[1]);\n    +    tmp.addFirst(uptime % div + divider[0]);\n    +    uptime = uptime / div;\n    +}\n<p> else </p>\n{\n    +    tmp.addFirst(uptime + divider[0]);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return Joiner.on(\" \").join(tmp);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String prettyUptimeSec(String sec) </p>\n{\n    +return prettyUptimeStr(sec, PRETTY_SEC_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeSec(int secs) </p>\n{\n    +return prettyUptimeStr(String.valueOf(secs), PRETTY_SEC_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeMs(String ms) </p>\n{\n    +return prettyUptimeStr(ms, PRETTY_MS_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeMs(int ms) </p>\n{\n    +return prettyUptimeStr(String.valueOf(ms), PRETTY_MS_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +<br/>\n    +    public static String urlFormat(String fmt, Object... args) {<br/>\n    +String[] argsEncoded = new String<span class=\"error\">&#91;args.length&#93;</span>;<br/>\n    +for (int i = 0; i < args.length; i++) </p>\n{\n    +    argsEncoded[i] = URLEncoder.encode(String.valueOf(args[i]));\n    +}\n<p>    +return String.format(fmt, argsEncoded);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String prettyExecutorInfo(ExecutorInfo e) </p>\n{\n    +return \"[\" + e.get_task_start() + \"-\" + e.get_task_end() + \"]\";\n    +    }\n<p>    +<br/>\n    +    public static Map unauthorizedUserJson(String user) </p>\n{\n    +return ImmutableMap.of(\n    +\"error\", \"No Authorization\",\n    +\"errorMessage\", String.format(\"User %s is not authorized.\", user)\n    +);\n    +    }\n<p>    +<br/>\n    +    public static List unauthorizedUserHtml(String user) </p>\n{\n    +return Lists.newArrayList(\n    +keyword(\"h1\"),\n    +\"User '\",\n    +StringEscapeUtils.escapeHtml(user),\n    +\"' is not authorized.\");\n    +    }\n<p>    +<br/>\n    +    private static SslSocketConnector mkSslConnector(Integer port, String ksPath, String ksPassword, String ksType,<br/>\n    +     String keyPassword, String tsPath, String tsPassword, String tsType,<br/>\n    +     Boolean needClientAuth, Boolean wantClientAuth) {<br/>\n    +SslContextFactory factory = new SslContextFactory();<br/>\n    +factory.setExcludeCipherSuites(\"SSL_RSA_WITH_RC4_128_MD5\", \"SSL_RSA_WITH_RC4_128_SHA\");<br/>\n    +factory.setExcludeProtocols(\"SSLv3\");<br/>\n    +factory.setAllowRenegotiate(false);<br/>\n    +factory.setKeyStorePath(ksPath);<br/>\n    +factory.setKeyStoreType(ksType);<br/>\n    +factory.setKeyStorePassword(ksPassword);<br/>\n    +factory.setKeyManagerPassword(keyPassword);<br/>\n    +<br/>\n    +if (tsPath != null && tsPassword != null && tsType != null) </p>\n{\n    +    factory.setTrustStore(tsPath);\n    +    factory.setTrustStoreType(tsType);\n    +    factory.setTrustStorePassword(tsPassword);\n    +}\n<p>    +<br/>\n    +if (needClientAuth != null && needClientAuth) </p>\n{\n    +    factory.setNeedClientAuth(true);\n    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    This should be an `else if`.  cond stops as soon as a condition is true.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649282","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649282","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649282,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:35:38Z","updated_at":"2025-01-24T14:22:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#discussion_r53862671\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#discussion_r53862671</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ui/UIHelpers.java &#8212;<br/>\n    @@ -0,0 +1,319 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p/><br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + * <p/><br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.ui;<br/>\n    +<br/>\n    +import clojure.lang.Keyword;<br/>\n    +import clojure.lang.RT;<br/>\n    +import com.google.common.base.Joiner;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import org.apache.commons.lang.StringEscapeUtils;<br/>\n    +import org.apache.storm.generated.ExecutorInfo;<br/>\n    +import org.apache.storm.logging.filters.AccessLoggingFilter;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.eclipse.jetty.server.Connector;<br/>\n    +import org.eclipse.jetty.server.DispatcherType;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.eclipse.jetty.server.nio.SelectChannelConnector;<br/>\n    +import org.eclipse.jetty.server.ssl.SslSocketConnector;<br/>\n    +import org.eclipse.jetty.servlet.FilterHolder;<br/>\n    +import org.eclipse.jetty.servlet.FilterMapping;<br/>\n    +import org.eclipse.jetty.servlet.ServletContextHandler;<br/>\n    +import org.eclipse.jetty.servlet.ServletHolder;<br/>\n    +import org.eclipse.jetty.servlets.CrossOriginFilter;<br/>\n    +import org.eclipse.jetty.util.ssl.SslContextFactory;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.io.PrintWriter;<br/>\n    +import java.io.StringWriter;<br/>\n    +import java.net.URLEncoder;<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class UIHelpers {<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_SEC_DIVIDERS = {<br/>\n    +    new String[]</p>\n{\"s\", \"60\"},<br/>\n    +    new String[]{\"m\", \"60\"},<br/>\n    +    new String[]{\"h\", \"24\"},<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_MS_DIVIDERS = {<br/>\n    +    new String[]{\"ms\", \"1000\"},<br/>\n    +    new String[]{\"s\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"m\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"h\", \"24\"}\n<p>,<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    public static String prettyUptimeStr(String val, String[][] dividers) {<br/>\n    +int uptime = Integer.parseInt(val);<br/>\n    +LinkedList<String> tmp = new LinkedList<>();<br/>\n    +for (String[] divider : dividers) {<br/>\n    +    if (uptime > 0) {<br/>\n    +if (divider<span class=\"error\">&#91;1&#93;</span> != null) </p>\n{\n    +    int div = Integer.parseInt(divider[1]);\n    +    tmp.addFirst(uptime % div + divider[0]);\n    +    uptime = uptime / div;\n    +}\n<p> else </p>\n{\n    +    tmp.addFirst(uptime + divider[0]);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return Joiner.on(\" \").join(tmp);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String prettyUptimeSec(String sec) </p>\n{\n    +return prettyUptimeStr(sec, PRETTY_SEC_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeSec(int secs) </p>\n{\n    +return prettyUptimeStr(String.valueOf(secs), PRETTY_SEC_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeMs(String ms) </p>\n{\n    +return prettyUptimeStr(ms, PRETTY_MS_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeMs(int ms) </p>\n{\n    +return prettyUptimeStr(String.valueOf(ms), PRETTY_MS_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +<br/>\n    +    public static String urlFormat(String fmt, Object... args) {<br/>\n    +String[] argsEncoded = new String<span class=\"error\">&#91;args.length&#93;</span>;<br/>\n    +for (int i = 0; i < args.length; i++) </p>\n{\n    +    argsEncoded[i] = URLEncoder.encode(String.valueOf(args[i]));\n    +}\n<p>    +return String.format(fmt, argsEncoded);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String prettyExecutorInfo(ExecutorInfo e) </p>\n{\n    +return \"[\" + e.get_task_start() + \"-\" + e.get_task_end() + \"]\";\n    +    }\n<p>    +<br/>\n    +    public static Map unauthorizedUserJson(String user) </p>\n{\n    +return ImmutableMap.of(\n    +\"error\", \"No Authorization\",\n    +\"errorMessage\", String.format(\"User %s is not authorized.\", user)\n    +);\n    +    }\n<p>    +<br/>\n    +    public static List unauthorizedUserHtml(String user) </p>\n{\n    +return Lists.newArrayList(\n    +keyword(\"h1\"),\n    +\"User '\",\n    +StringEscapeUtils.escapeHtml(user),\n    +\"' is not authorized.\");\n    +    }\n<p>    +<br/>\n    +    private static SslSocketConnector mkSslConnector(Integer port, String ksPath, String ksPassword, String ksType,<br/>\n    +     String keyPassword, String tsPath, String tsPassword, String tsType,<br/>\n    +     Boolean needClientAuth, Boolean wantClientAuth) {<br/>\n    +SslContextFactory factory = new SslContextFactory();<br/>\n    +factory.setExcludeCipherSuites(\"SSL_RSA_WITH_RC4_128_MD5\", \"SSL_RSA_WITH_RC4_128_SHA\");<br/>\n    +factory.setExcludeProtocols(\"SSLv3\");<br/>\n    +factory.setAllowRenegotiate(false);<br/>\n    +factory.setKeyStorePath(ksPath);<br/>\n    +factory.setKeyStoreType(ksType);<br/>\n    +factory.setKeyStorePassword(ksPassword);<br/>\n    +factory.setKeyManagerPassword(keyPassword);<br/>\n    +<br/>\n    +if (tsPath != null && tsPassword != null && tsType != null) </p>\n{\n    +    factory.setTrustStore(tsPath);\n    +    factory.setTrustStoreType(tsType);\n    +    factory.setTrustStorePassword(tsPassword);\n    +}\n<p>    +<br/>\n    +if (needClientAuth != null && needClientAuth) </p>\n{\n    +    factory.setNeedClientAuth(true);\n    +}\n<p>    +if (wantClientAuth != null && wantClientAuth) </p>\n{\n    +    factory.setWantClientAuth(true);\n    +}\n<p>    +<br/>\n    +SslSocketConnector sslConnector = new SslSocketConnector(factory);<br/>\n    +sslConnector.setPort(port);<br/>\n    +return sslConnector;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void configSsl(Server server, Integer port, String ksPath, String ksPassword, String ksType,<br/>\n    + String keyPassword, String tsPath, String tsPassword, String tsType, Boolean needClientAuth, Boolean wantClientAuth) {<br/>\n    +if (port > 0) </p>\n{\n    +    server.addConnector(mkSslConnector(port, ksPath, ksPassword, ksType, keyPassword,\n    +    tsPath, tsPassword, tsType, needClientAuth, wantClientAuth));\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static FilterHolder corsFilterHandle() </p>\n{\n    +FilterHolder filterHolder = new FilterHolder(new CrossOriginFilter());\n    +filterHolder.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, \"*\");\n    +filterHolder.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, \"GET, POST, PUT\");\n    +filterHolder.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, \"X-Requested-With, X-Requested-By, Access-Control-Allow-Origin, Content-Type, Content-Length, Accept, Origin\");\n    +filterHolder.setInitParameter(CrossOriginFilter.ACCESS_CONTROL_ALLOW_ORIGIN_HEADER, \"*\");\n    +return filterHolder;\n    +    }\n<p>    +<br/>\n    +    public static FilterHolder mkAccessLoggingFilterHandle() </p>\n{\n    +return new FilterHolder(new AccessLoggingFilter());\n    +    }\n<p>    +<br/>\n    +    public static void configFilter(Server server, Servlet servlet, List filtersConfs) {<br/>\n    +if (filtersConfs != null) {<br/>\n    +    ServletHolder servletHolder = new ServletHolder(servlet);<br/>\n    +    ServletContextHandler context = new ServletContextHandler(server, \"/\");<br/>\n    +    context.addServlet(servletHolder, \"/\");<br/>\n    +    context.addFilter(corsFilterHandle(), \"/*\", EnumSet.allOf(DispatcherType.class));<br/>\n    +    for (Object obj : filtersConfs) {<br/>\n    +Map filterConf = (Map) obj;<br/>\n    +String filterName = (String) filterConf.get(keyword(\"filter-name\"));<br/>\n    +String filterClass = (String) filterConf.get(keyword(\"filter-class\"));<br/>\n    +Map filterParams = (Map) filterConf.get(keyword(\"filter-params\"));<br/>\n    +if (filterClass != null) {<br/>\n    +    FilterHolder filterHolder = new FilterHolder();<br/>\n    +    filterHolder.setClassName(filterClass);<br/>\n    +    if (filterName != null) </p>\n{\n    +filterHolder.setName(filterName);\n    +    }\n<p> else </p>\n{\n    +filterHolder.setName(filterClass);\n    +    }\n<p>    +    if (filterParams != null) </p>\n{\n    +filterHolder.setInitParameters(filterParams);\n    +    }\n<p> else </p>\n{\n    +filterHolder.setInitParameters(new HashMap<String, String>());\n    +    }\n<p>    +    context.addFilter(filterHolder, \"/*\", FilterMapping.ALL);<br/>\n    +}<br/>\n    +    }<br/>\n    +    context.addFilter(mkAccessLoggingFilterHandle(), \"/*\", EnumSet.allOf(DispatcherType.class));<br/>\n    +    server.setHandler(context);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map ringResponseFromException(Exception ex) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    We should probably leave this in clojure and inline it in the files that use it, so when they move to new technology it can go away or the appropriate replacement code can be written. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649282/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649286","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649286","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649286,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:40:24Z","updated_at":"2025-01-24T14:22:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#discussion_r53863268\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#discussion_r53863268</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ui/UIHelpers.java &#8212;<br/>\n    @@ -0,0 +1,319 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p/><br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + * <p/><br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.ui;<br/>\n    +<br/>\n    +import clojure.lang.Keyword;<br/>\n    +import clojure.lang.RT;<br/>\n    +import com.google.common.base.Joiner;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +import org.apache.commons.lang.StringEscapeUtils;<br/>\n    +import org.apache.storm.generated.ExecutorInfo;<br/>\n    +import org.apache.storm.logging.filters.AccessLoggingFilter;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.eclipse.jetty.server.Connector;<br/>\n    +import org.eclipse.jetty.server.DispatcherType;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.eclipse.jetty.server.nio.SelectChannelConnector;<br/>\n    +import org.eclipse.jetty.server.ssl.SslSocketConnector;<br/>\n    +import org.eclipse.jetty.servlet.FilterHolder;<br/>\n    +import org.eclipse.jetty.servlet.FilterMapping;<br/>\n    +import org.eclipse.jetty.servlet.ServletContextHandler;<br/>\n    +import org.eclipse.jetty.servlet.ServletHolder;<br/>\n    +import org.eclipse.jetty.servlets.CrossOriginFilter;<br/>\n    +import org.eclipse.jetty.util.ssl.SslContextFactory;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.io.PrintWriter;<br/>\n    +import java.io.StringWriter;<br/>\n    +import java.net.URLEncoder;<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class UIHelpers {<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_SEC_DIVIDERS = {<br/>\n    +    new String[]</p>\n{\"s\", \"60\"},<br/>\n    +    new String[]{\"m\", \"60\"},<br/>\n    +    new String[]{\"h\", \"24\"},<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    private static final String[][] PRETTY_MS_DIVIDERS = {<br/>\n    +    new String[]{\"ms\", \"1000\"},<br/>\n    +    new String[]{\"s\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"m\", \"60\"}\n<p>,<br/>\n    +    new String[]</p>\n{\"h\", \"24\"}\n<p>,<br/>\n    +    new String[]{\"d\", null}};<br/>\n    +<br/>\n    +    public static String prettyUptimeStr(String val, String[][] dividers) {<br/>\n    +int uptime = Integer.parseInt(val);<br/>\n    +LinkedList<String> tmp = new LinkedList<>();<br/>\n    +for (String[] divider : dividers) {<br/>\n    +    if (uptime > 0) {<br/>\n    +if (divider<span class=\"error\">&#91;1&#93;</span> != null) </p>\n{\n    +    int div = Integer.parseInt(divider[1]);\n    +    tmp.addFirst(uptime % div + divider[0]);\n    +    uptime = uptime / div;\n    +}\n<p> else </p>\n{\n    +    tmp.addFirst(uptime + divider[0]);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return Joiner.on(\" \").join(tmp);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String prettyUptimeSec(String sec) </p>\n{\n    +return prettyUptimeStr(sec, PRETTY_SEC_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeSec(int secs) </p>\n{\n    +return prettyUptimeStr(String.valueOf(secs), PRETTY_SEC_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeMs(String ms) </p>\n{\n    +return prettyUptimeStr(ms, PRETTY_MS_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +    public static String prettyUptimeMs(int ms) </p>\n{\n    +return prettyUptimeStr(String.valueOf(ms), PRETTY_MS_DIVIDERS);\n    +    }\n<p>    +<br/>\n    +<br/>\n    +    public static String urlFormat(String fmt, Object... args) {<br/>\n    +String[] argsEncoded = new String<span class=\"error\">&#91;args.length&#93;</span>;<br/>\n    +for (int i = 0; i < args.length; i++) </p>\n{\n    +    argsEncoded[i] = URLEncoder.encode(String.valueOf(args[i]));\n    +}\n<p>    +return String.format(fmt, argsEncoded);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String prettyExecutorInfo(ExecutorInfo e) </p>\n{\n    +return \"[\" + e.get_task_start() + \"-\" + e.get_task_end() + \"]\";\n    +    }\n<p>    +<br/>\n    +    public static Map unauthorizedUserJson(String user) </p>\n{\n    +return ImmutableMap.of(\n    +\"error\", \"No Authorization\",\n    +\"errorMessage\", String.format(\"User %s is not authorized.\", user)\n    +);\n    +    }\n<p>    +<br/>\n    +    public static List unauthorizedUserHtml(String user) </p>\n{\n    +return Lists.newArrayList(\n    +keyword(\"h1\"),\n    +\"User '\",\n    +StringEscapeUtils.escapeHtml(user),\n    +\"' is not authorized.\");\n    +    }\n<p>    +<br/>\n    +    private static SslSocketConnector mkSslConnector(Integer port, String ksPath, String ksPassword, String ksType,<br/>\n    +     String keyPassword, String tsPath, String tsPassword, String tsType,<br/>\n    +     Boolean needClientAuth, Boolean wantClientAuth) {<br/>\n    +SslContextFactory factory = new SslContextFactory();<br/>\n    +factory.setExcludeCipherSuites(\"SSL_RSA_WITH_RC4_128_MD5\", \"SSL_RSA_WITH_RC4_128_SHA\");<br/>\n    +factory.setExcludeProtocols(\"SSLv3\");<br/>\n    +factory.setAllowRenegotiate(false);<br/>\n    +factory.setKeyStorePath(ksPath);<br/>\n    +factory.setKeyStoreType(ksType);<br/>\n    +factory.setKeyStorePassword(ksPassword);<br/>\n    +factory.setKeyManagerPassword(keyPassword);<br/>\n    +<br/>\n    +if (tsPath != null && tsPassword != null && tsType != null) </p>\n{\n    +    factory.setTrustStore(tsPath);\n    +    factory.setTrustStoreType(tsType);\n    +    factory.setTrustStorePassword(tsPassword);\n    +}\n<p>    +<br/>\n    +if (needClientAuth != null && needClientAuth) </p>\n{\n    +    factory.setNeedClientAuth(true);\n    +}\n<p>    +if (wantClientAuth != null && wantClientAuth) </p>\n{\n    +    factory.setWantClientAuth(true);\n    +}\n<p>    +<br/>\n    +SslSocketConnector sslConnector = new SslSocketConnector(factory);<br/>\n    +sslConnector.setPort(port);<br/>\n    +return sslConnector;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void configSsl(Server server, Integer port, String ksPath, String ksPassword, String ksType,<br/>\n    + String keyPassword, String tsPath, String tsPassword, String tsType, Boolean needClientAuth, Boolean wantClientAuth) {<br/>\n    +if (port > 0) </p>\n{\n    +    server.addConnector(mkSslConnector(port, ksPath, ksPassword, ksType, keyPassword,\n    +    tsPath, tsPassword, tsType, needClientAuth, wantClientAuth));\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static FilterHolder corsFilterHandle() </p>\n{\n    +FilterHolder filterHolder = new FilterHolder(new CrossOriginFilter());\n    +filterHolder.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, \"*\");\n    +filterHolder.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, \"GET, POST, PUT\");\n    +filterHolder.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, \"X-Requested-With, X-Requested-By, Access-Control-Allow-Origin, Content-Type, Content-Length, Accept, Origin\");\n    +filterHolder.setInitParameter(CrossOriginFilter.ACCESS_CONTROL_ALLOW_ORIGIN_HEADER, \"*\");\n    +return filterHolder;\n    +    }\n<p>    +<br/>\n    +    public static FilterHolder mkAccessLoggingFilterHandle() </p>\n{\n    +return new FilterHolder(new AccessLoggingFilter());\n    +    }\n<p>    +<br/>\n    +    public static void configFilter(Server server, Servlet servlet, List filtersConfs) {<br/>\n    +if (filtersConfs != null) {<br/>\n    +    ServletHolder servletHolder = new ServletHolder(servlet);<br/>\n    +    ServletContextHandler context = new ServletContextHandler(server, \"/\");<br/>\n    +    context.addServlet(servletHolder, \"/\");<br/>\n    +    context.addFilter(corsFilterHandle(), \"/*\", EnumSet.allOf(DispatcherType.class));<br/>\n    +    for (Object obj : filtersConfs) {<br/>\n    +Map filterConf = (Map) obj;<br/>\n    +String filterName = (String) filterConf.get(keyword(\"filter-name\"));<br/>\n    +String filterClass = (String) filterConf.get(keyword(\"filter-class\"));<br/>\n    +Map filterParams = (Map) filterConf.get(keyword(\"filter-params\"));<br/>\n    +if (filterClass != null) {<br/>\n    +    FilterHolder filterHolder = new FilterHolder();<br/>\n    +    filterHolder.setClassName(filterClass);<br/>\n    +    if (filterName != null) </p>\n{\n    +filterHolder.setName(filterName);\n    +    }\n<p> else </p>\n{\n    +filterHolder.setName(filterClass);\n    +    }\n<p>    +    if (filterParams != null) </p>\n{\n    +filterHolder.setInitParameters(filterParams);\n    +    }\n<p> else </p>\n{\n    +filterHolder.setInitParameters(new HashMap<String, String>());\n    +    }\n<p>    +    context.addFilter(filterHolder, \"/*\", FilterMapping.ALL);<br/>\n    +}<br/>\n    +    }<br/>\n    +    context.addFilter(mkAccessLoggingFilterHandle(), \"/*\", EnumSet.allOf(DispatcherType.class));<br/>\n    +    server.setHandler(context);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map ringResponseFromException(Exception ex) </p>\n{\n    +return ImmutableMap.of(\n    +keyword(\"headers\"), new HashMap<>(),\n    +keyword(\"status\"), 400,\n    +keyword(\"body\"), ex.getMessage()\n    +);\n    +    }\n<p>    +<br/>\n    +    private static Server removeNonSslConnector(Server server) {<br/>\n    +for (Connector c : server.getConnectors()) {<br/>\n    +    if (c != null && !(c instanceof SslSocketConnector)) </p>\n{\n    +server.removeConnector(c);\n    +    }\n<p>    +}<br/>\n    +return server;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Construct a Jetty Server instance.<br/>\n    +     */<br/>\n    +    private static Server jettyCreateServer(Integer port, String host, Integer httpsPort) {<br/>\n    +SelectChannelConnector connector = new SelectChannelConnector();<br/>\n    +connector.setPort(Utils.getInt(port, 80));<br/>\n    +connector.setHost(host);<br/>\n    +connector.setMaxIdleTime(200000);<br/>\n    +<br/>\n    +Server server = new Server();<br/>\n    +server.addConnector(connector);<br/>\n    +server.setSendDateHeader(true);<br/>\n    +<br/>\n    +if (httpsPort != null && httpsPort > 0) </p>\n{\n    +    removeNonSslConnector(server);\n    +}\n<p>    +return server;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Modified version of run-jetty<br/>\n    +     * Assumes configurator sets handler.<br/>\n    +     */<br/>\n    +    public static void stormRunJetty(Integer port, String host, Integer httpsPort, IConfigurator configurator) throws Exception {<br/>\n    +Server s = jettyCreateServer(port, host, httpsPort);<br/>\n    +if (configurator != null) </p>\n{\n    +    configurator.execute(s);\n    +}\n<p>    +s.start();<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void stormRunJetty(Integer port, IConfigurator configurator) throws Exception </p>\n{\n    +stormRunJetty(port, null, null, configurator);\n    +    }\n<p>    +<br/>\n    +    public static String wrapJsonInCallback(String callback, String response) </p>\n{\n    +return callback + \"(\" + response + \");\";\n    +    }\n<p>    +<br/>\n    +    public static Map jsonResponse(Object data, String callback) </p>\n{\n    +return jsonResponse(data, callback, true, null, null);\n    +    }\n<p>    +<br/>\n    +    public static Map jsonResponse(Object data, String callback, Long status) </p>\n{\n    +return jsonResponse(data, callback, true, status, null);\n    +    }\n<p>    +<br/>\n    +    public static Map jsonResponse(Object data, String callback, Map headers) </p>\n{\n    +return jsonResponse(data, callback, true, null, headers);\n    +    }\n<p>    +<br/>\n    +    public static Map jsonResponse(Object data, String callback, boolean needSerialize, Long status, Map headers) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we please split some of this up?</p>\n\n<p>    The final result is ring specific and not really what we want.  Can we have one function for getting the headers, and another function for creating the body.  Then creating the final map can still be in clojure and placed in each of the files that use it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649286/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187946863","html_url":"https://github.com/apache/storm/pull/1139#issuecomment-187946863","issue_url":"https://api.github.com/repos/apache/storm/issues/1139","id":187946863,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzk0Njg2Mw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:41:37Z","updated_at":"2016-02-23T22:41:37Z","author_association":"CONTRIBUTOR","body":"A lot of this looks good, But it needs a little bit of work to move the clojure/ring/hiccup specific parts where they need to be.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187946863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649290","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649290","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649290,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyOTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T22:41:39Z","updated_at":"2025-01-24T14:22:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#issuecomment-187946863\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#issuecomment-187946863</a></p>\n\n<p>    A lot of this looks good, But it needs a little bit of work to move the clojure/ring/hiccup specific parts where they need to be.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649290/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/187957776","html_url":"https://github.com/apache/storm/pull/1145#issuecomment-187957776","issue_url":"https://api.github.com/repos/apache/storm/issues/1145","id":187957776,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzk1Nzc3Ng==","user":{"login":"Parth-Brahmbhatt","id":6914358,"node_id":"MDQ6VXNlcjY5MTQzNTg=","avatar_url":"https://avatars.githubusercontent.com/u/6914358?v=4","gravatar_id":"","url":"https://api.github.com/users/Parth-Brahmbhatt","html_url":"https://github.com/Parth-Brahmbhatt","followers_url":"https://api.github.com/users/Parth-Brahmbhatt/followers","following_url":"https://api.github.com/users/Parth-Brahmbhatt/following{/other_user}","gists_url":"https://api.github.com/users/Parth-Brahmbhatt/gists{/gist_id}","starred_url":"https://api.github.com/users/Parth-Brahmbhatt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Parth-Brahmbhatt/subscriptions","organizations_url":"https://api.github.com/users/Parth-Brahmbhatt/orgs","repos_url":"https://api.github.com/users/Parth-Brahmbhatt/repos","events_url":"https://api.github.com/users/Parth-Brahmbhatt/events{/privacy}","received_events_url":"https://api.github.com/users/Parth-Brahmbhatt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-23T23:10:24Z","updated_at":"2016-02-23T23:10:24Z","author_association":"CONTRIBUTOR","body":"+1.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/187957776/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188003867","html_url":"https://github.com/apache/storm/pull/1143#issuecomment-188003867","issue_url":"https://api.github.com/repos/apache/storm/issues/1143","id":188003867,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODAwMzg2Nw==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T01:44:07Z","updated_at":"2016-02-24T01:44:07Z","author_association":"NONE","body":"+1, but there're 2 occurrences of System.nanoTime in storm-kafka, @darionyaphet would you please change the other?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188003867/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875580","html_url":"https://github.com/apache/storm/issues/5406#issuecomment-2612875580","issue_url":"https://api.github.com/repos/apache/storm/issues/5406","id":2612875580,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU1ODA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T01:44:08Z","updated_at":"2025-01-24T16:03:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1143#issuecomment-188003867\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1143#issuecomment-188003867</a></p>\n\n<p>    +1, but there're 2 occurrences of System.nanoTime in storm-kafka, @darionyaphet would you please change the other?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875580/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654003","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612654003","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612654003,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQwMDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T02:38:27Z","updated_at":"2025-01-24T14:24:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53886541\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53886541</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ZKStateStorage.java &#8212;<br/>\n    @@ -0,0 +1,270 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.state.*;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.callback.ZKStateChangedCallback;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.zookeeper.Zookeeper;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.UUID;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +public class ZKStateStorage implements IStateStorage {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ZKStateStorage.class);<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, ZKStateChangedCallback> callbacks = new ConcurrentHashMap<String, ZKStateChangedCallback>();<br/>\n    +    private CuratorFramework zkWriter;<br/>\n    +    private CuratorFramework zkReader;<br/>\n    +    private AtomicBoolean active;<br/>\n    +<br/>\n    +    private boolean isNimbus;<br/>\n    +    private Map authConf;<br/>\n    +    private Map<Object, Object> conf;<br/>\n    +<br/>\n    +    public ZKStateStorage(Map<Object, Object> conf, Map authConf, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    +this.conf = conf;<br/>\n    +this.authConf = authConf;<br/>\n    +if (context.getDaemonType().equals(DaemonType.NIMBUS))<br/>\n    +    this.isNimbus = true;<br/>\n    +<br/>\n    +// just mkdir STORM_ZOOKEEPER_ROOT dir<br/>\n    +CuratorFramework zkTemp = mkZk();<br/>\n    +String rootPath = String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT));<br/>\n    +Zookeeper.mkdirs(zkTemp, rootPath, acls);<br/>\n    +zkTemp.close();<br/>\n    +<br/>\n    +active = new AtomicBoolean(true);<br/>\n    +zkWriter = mkZk(new WatcherCallBack() {<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +if (active.get()) {<br/>\n    +    if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +    } else {<br/>\n    +LOG.info(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +    }<br/>\n    +<br/>\n    +    if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +    ZKStateChangedCallback fn = e.getValue();\n    +    fn.changed(type, path);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +});<br/>\n    +if (isNimbus) {<br/>\n    +    zkReader = mkZk(new WatcherCallBack() {<br/>\n    +@Override<br/>\n    +public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +    if (active.get()) {<br/>\n    +if (!(state.equals(Watcher.Event.KeeperState.SyncConnected))) {<br/>\n    +    LOG.warn(\"Received event {} : {}: {} with disconnected Zookeeper.\", state, type, path);<br/>\n    +} else {<br/>\n    +    LOG.debug(\"Received event {} : {} : {}\", state, type, path);<br/>\n    +}<br/>\n    +<br/>\n    +if (!type.equals(Watcher.Event.EventType.None)) {<br/>\n    +    for (Map.Entry<String, ZKStateChangedCallback> e : callbacks.entrySet()) </p>\n{\n    +ZKStateChangedCallback fn = e.getValue();\n    +fn.changed(type, path);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    });<br/>\n    +} else </p>\n{\n    +    zkReader = zkWriter;\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    private CuratorFramework mkZk() throws IOException </p>\n{\n    +return Zookeeper.mkClient(conf, (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS), conf.get(Config.STORM_ZOOKEEPER_PORT), \"\",\n    +new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    @SuppressWarnings(\"unchecked\")<br/>\n    +    private CuratorFramework mkZk(WatcherCallBack watcher) throws NumberFormatException, IOException </p>\n{\n    +return Zookeeper.mkClient(conf, (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS), conf.get(Config.STORM_ZOOKEEPER_PORT),\n    +String.valueOf(conf.get(Config.STORM_ZOOKEEPER_ROOT)), watcher, authConf);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node_blobstore(String path, String nimbusHostPortInfo) </p>\n{\n    +Zookeeper.deleteNodeBlobstore(zkWriter, path, nimbusHostPortInfo);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String register(ZKStateChangedCallback callback) </p>\n{\n    +String id = UUID.randomUUID().toString();\n    +this.callbacks.put(id, callback);\n    +return id;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void unregister(String id) </p>\n{\n    +this.callbacks.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String create_sequential(String path, byte[] data, List<ACL> acls) </p>\n{\n    +return Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL_SEQUENTIAL, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void mkdirs(String path, List<ACL> acls) </p>\n{\n    +Zookeeper.mkdirs(zkWriter, path, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_node(String path) </p>\n{\n    +Zookeeper.deleteNode(zkWriter, path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_ephemeral_node(String path, byte[] data, List<ACL> acls) {<br/>\n    +Zookeeper.mkdirs(zkWriter, parentPath(path), acls);<br/>\n    +if (Zookeeper.exists(zkWriter, path, false)) {<br/>\n    +    try </p>\n{\n    +Zookeeper.setData(zkWriter, path, data);\n    +    }\n<p> catch (Exception e) {<br/>\n    +if (Utils.exceptionCauseIsInstanceOf(KeeperException.NoNodeException.class, e)) </p>\n{\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL, acls);\n    +}\n<p> else </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +} else </p>\n{\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.EPHEMERAL, acls);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Integer get_version(String path, boolean watch) throws Exception </p>\n{\n    +Integer ret = Zookeeper.getVersion(zkReader, path, watch);\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public boolean node_exists(String path, boolean watch) </p>\n{\n    +return Zookeeper.existsNode(zkWriter, path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_children(String path, boolean watch) </p>\n{\n    +return Zookeeper.getChildren(zkReader, path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void close() {<br/>\n    +this.active.set(false);<br/>\n    +zkWriter.close();<br/>\n    +if (isNimbus) </p>\n{\n    +    zkReader.close();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void set_data(String path, byte[] data, List<ACL> acls) {<br/>\n    +if (Zookeeper.exists(zkWriter, path, false)) </p>\n{\n    +    Zookeeper.setData(zkWriter, path, data);\n    +}\n<p> else </p>\n{\n    +    Zookeeper.mkdirs(zkWriter, parentPath(path), acls);\n    +    Zookeeper.createNode(zkWriter, path, data, CreateMode.PERSISTENT, acls);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_data(String path, boolean watch) </p>\n{\n    +byte[] ret = null;\n    +\n    +ret = Zookeeper.getData(zkReader, path, watch);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public Map get_data_with_version(String path, boolean watch) </p>\n{\n    +return Zookeeper.getDataWithVersion(zkReader, path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void set_worker_hb(String path, byte[] data, List<ACL> acls) </p>\n{\n    +set_data(path, data, acls);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public byte[] get_worker_hb(String path, boolean watch) </p>\n{\n    +return Zookeeper.getData(zkReader, path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public List<String> get_worker_hb_children(String path, boolean watch) </p>\n{\n    +return get_children(path, watch);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void delete_worker_hb(String path) </p>\n{\n    +delete_node(path);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void add_listener(final ConnectionStateListener listener) {<br/>\n    +Zookeeper.addListener(zkReader, new ConnectionStateListener() {<br/>\n    +    @Override<br/>\n    +    public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) </p>\n{\n    +listener.stateChanged(curatorFramework, connectionState);\n    +    }\n<p>    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void sync_path(String path) </p>\n{\n    +Zookeeper.syncPath(zkWriter, path);\n    +    }\n<p>    +<br/>\n    +    // To be remove when finished port Util.clj<br/>\n    +    public static String parentPath(String path) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Don't transalte parentPath at Utils.clj. So I will move the func to Utils.clj</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654003/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612662327","html_url":"https://github.com/apache/storm/issues/5156#issuecomment-2612662327","issue_url":"https://api.github.com/repos/apache/storm/issues/5156","id":2612662327,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NjIzMjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T02:52:02Z","updated_at":"2025-01-24T14:28:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vesense\">vesense</a>:</i>\n<p>The load balance issue stated in pdf(<em>2 Balance load of topology and cluster</em>) has been fixed in prior release (see: <a href=\"https://issues.apache.org/jira/browse/STORM-132\" class=\"external-link\" rel=\"nofollow\">STORM-132</a>).</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612662327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188035152","html_url":"https://github.com/apache/storm/pull/1145#issuecomment-188035152","issue_url":"https://api.github.com/repos/apache/storm/issues/1145","id":188035152,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODAzNTE1Mg==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T03:03:42Z","updated_at":"2016-02-24T03:03:42Z","author_association":"NONE","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188035152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188035678","html_url":"https://github.com/apache/storm/pull/1145#issuecomment-188035678","issue_url":"https://api.github.com/repos/apache/storm/issues/1145","id":188035678,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODAzNTY3OA==","user":{"login":"vesense","id":6711230,"node_id":"MDQ6VXNlcjY3MTEyMzA=","avatar_url":"https://avatars.githubusercontent.com/u/6711230?v=4","gravatar_id":"","url":"https://api.github.com/users/vesense","html_url":"https://github.com/vesense","followers_url":"https://api.github.com/users/vesense/followers","following_url":"https://api.github.com/users/vesense/following{/other_user}","gists_url":"https://api.github.com/users/vesense/gists{/gist_id}","starred_url":"https://api.github.com/users/vesense/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vesense/subscriptions","organizations_url":"https://api.github.com/users/vesense/orgs","repos_url":"https://api.github.com/users/vesense/repos","events_url":"https://api.github.com/users/vesense/events{/privacy}","received_events_url":"https://api.github.com/users/vesense/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T03:06:46Z","updated_at":"2016-02-24T03:06:46Z","author_association":"MEMBER","body":"LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188035678/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654007","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612654007","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612654007,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQwMDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T03:18:11Z","updated_at":"2025-01-24T14:24:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#discussion_r53888948\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#discussion_r53888948</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java &#8212;<br/>\n    @@ -0,0 +1,261 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.cluster;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.ClusterWorkerHeartbeat;<br/>\n    +import org.apache.storm.generated.ExecutorInfo;<br/>\n    +import org.apache.storm.generated.ExecutorStats;<br/>\n    +import org.apache.storm.generated.ProfileAction;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.zookeeper.ZooDefs;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Id;<br/>\n    +import org.apache.zookeeper.server.auth.DigestAuthenticationProvider;<br/>\n    +<br/>\n    +import java.io.PrintWriter;<br/>\n    +import java.io.StringWriter;<br/>\n    +import java.io.UnsupportedEncodingException;<br/>\n    +import java.net.URLEncoder;<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class ClusterUtils {<br/>\n    +<br/>\n    +    public static final String ZK_SEPERATOR = \"/\";<br/>\n    +<br/>\n    +    public static final String ASSIGNMENTS_ROOT = \"assignments\";<br/>\n    +    public static final String CODE_ROOT = \"code\";<br/>\n    +    public static final String STORMS_ROOT = \"storms\";<br/>\n    +    public static final String SUPERVISORS_ROOT = \"supervisors\";<br/>\n    +    public static final String WORKERBEATS_ROOT = \"workerbeats\";<br/>\n    +    public static final String BACKPRESSURE_ROOT = \"backpressure\";<br/>\n    +    public static final String ERRORS_ROOT = \"errors\";<br/>\n    +    public static final String BLOBSTORE_ROOT = \"blobstore\";<br/>\n    +    public static final String BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_ROOT = \"blobstoremaxkeysequencenumber\";<br/>\n    +    public static final String NIMBUSES_ROOT = \"nimbuses\";<br/>\n    +    public static final String CREDENTIALS_ROOT = \"credentials\";<br/>\n    +    public static final String LOGCONFIG_ROOT = \"logconfigs\";<br/>\n    +    public static final String PROFILERCONFIG_ROOT = \"profilerconfigs\";<br/>\n    +<br/>\n    +    public static final String ASSIGNMENTS_SUBTREE = ZK_SEPERATOR + ASSIGNMENTS_ROOT;<br/>\n    +    public static final String STORMS_SUBTREE = ZK_SEPERATOR + STORMS_ROOT;<br/>\n    +    public static final String SUPERVISORS_SUBTREE = ZK_SEPERATOR + SUPERVISORS_ROOT;<br/>\n    +    public static final String WORKERBEATS_SUBTREE = ZK_SEPERATOR + WORKERBEATS_ROOT;<br/>\n    +    public static final String BACKPRESSURE_SUBTREE = ZK_SEPERATOR + BACKPRESSURE_ROOT;<br/>\n    +    public static final String ERRORS_SUBTREE = ZK_SEPERATOR + ERRORS_ROOT;<br/>\n    +    public static final String BLOBSTORE_SUBTREE = ZK_SEPERATOR + BLOBSTORE_ROOT;<br/>\n    +    public static final String BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_SUBTREE = ZK_SEPERATOR + BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_ROOT;<br/>\n    +    public static final String NIMBUSES_SUBTREE = ZK_SEPERATOR + NIMBUSES_ROOT;<br/>\n    +    public static final String CREDENTIALS_SUBTREE = ZK_SEPERATOR + CREDENTIALS_ROOT;<br/>\n    +    public static final String LOGCONFIG_SUBTREE = ZK_SEPERATOR + LOGCONFIG_ROOT;<br/>\n    +    public static final String PROFILERCONFIG_SUBTREE = ZK_SEPERATOR + PROFILERCONFIG_ROOT;<br/>\n    +<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static final ClusterUtils INSTANCE = new ClusterUtils();<br/>\n    +    private static ClusterUtils _instance = INSTANCE;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use. To mock out delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     *<br/>\n    +     * @param u a Cluster instance<br/>\n    +     */<br/>\n    +    public static void setInstance(ClusterUtils u) </p>\n{\n    +_instance = u;\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Resets the singleton instance to the default. This is helpful to reset the class to its original functionality when mocking is no longer desired.<br/>\n    +     */<br/>\n    +    public static void resetInstance() </p>\n{\n    +_instance = INSTANCE;\n    +    }\n<p>    +<br/>\n    +    public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {<br/>\n    +List<ACL> aclList = null;<br/>\n    +String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);<br/>\n    +if (Utils.isZkAuthenticationConfiguredTopology(topoConf)) </p>\n{\n    +    aclList = new ArrayList<>();\n    +    ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);\n    +    aclList.add(acl1);\n    +    ACL acl2 = new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(payload)));\n    +    aclList.add(acl2);\n    +}\n<p>    +return aclList;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorPath(String id) </p>\n{\n    +return SUPERVISORS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String assignmentPath(String id) </p>\n{\n    +return ASSIGNMENTS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String blobstorePath(String key) </p>\n{\n    +return BLOBSTORE_SUBTREE + ZK_SEPERATOR + key;\n    +    }\n<p>    +<br/>\n    +    public static String blobstoreMaxKeySequenceNumberPath(String key) </p>\n{\n    +return BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_SUBTREE + ZK_SEPERATOR + key;\n    +    }\n<p>    +<br/>\n    +    public static String nimbusPath(String id) </p>\n{\n    +return NIMBUSES_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String stormPath(String id) </p>\n{\n    +return STORMS_SUBTREE + ZK_SEPERATOR + id;\n    +    }\n<p>    +<br/>\n    +    public static String workerbeatStormRoot(String stormId) </p>\n{\n    +return WORKERBEATS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String workerbeatPath(String stormId, String node, Long port) </p>\n{\n    +return workerbeatStormRoot(stormId) + ZK_SEPERATOR + node + \"-\" + port;\n    +    }\n<p>    +<br/>\n    +    public static String backpressureStormRoot(String stormId) </p>\n{\n    +return BACKPRESSURE_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String backpressurePath(String stormId, String node, Long port) </p>\n{\n    +return backpressureStormRoot(stormId) + ZK_SEPERATOR + node + \"-\" + port;\n    +    }\n<p>    +<br/>\n    +    public static String errorStormRoot(String stormId) </p>\n{\n    +return ERRORS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String errorPath(String stormId, String componentId) {<br/>\n    +try </p>\n{\n    +    return errorStormRoot(stormId) + ZK_SEPERATOR + URLEncoder.encode(componentId, \"UTF-8\");\n    +}\n<p> catch (UnsupportedEncodingException e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String lastErrorPath(String stormId, String componentId) </p>\n{\n    +return errorPath(stormId, componentId) + \"-last-error\";\n    +    }\n<p>    +<br/>\n    +    public static String credentialsPath(String stormId) </p>\n{\n    +return CREDENTIALS_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String logConfigPath(String stormId) </p>\n{\n    +return LOGCONFIG_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String profilerConfigPath(String stormId) </p>\n{\n    +return PROFILERCONFIG_SUBTREE + ZK_SEPERATOR + stormId;\n    +    }\n<p>    +<br/>\n    +    public static String profilerConfigPath(String stormId, String host, Long port, ProfileAction requestType) </p>\n{\n    +return profilerConfigPath(stormId) + ZK_SEPERATOR + host + \"_\" + port + \"_\" + requestType;\n    +    }\n<p>    +<br/>\n    +    public static <T> T maybeDeserialize(byte[] serialized, Class<T> clazz) {<br/>\n    +if (serialized != null) </p>\n{\n    +    return Utils.deserialize(serialized, clazz);\n    +}\n<p>    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Ensures that we only return heartbeats for executors assigned to this worker<br/>\n    +     * @param executors<br/>\n    +     * @param workerHeartbeat<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static Map<ExecutorInfo, ExecutorBeat> convertExecutorBeats(List<ExecutorInfo> executors, ClusterWorkerHeartbeat workerHeartbeat) {<br/>\n    +Map<ExecutorInfo, ExecutorBeat> executorWhb = new HashMap<>();<br/>\n    +Map<ExecutorInfo, ExecutorStats> executorStatsMap = workerHeartbeat.get_executor_stats();<br/>\n    +for (ExecutorInfo executor : executors) {<br/>\n    +    if (executorStatsMap.containsKey(executor)) </p>\n{\n    +int time = workerHeartbeat.get_time_secs();\n    +int uptime = workerHeartbeat.get_uptime_secs();\n    +ExecutorStats executorStats = workerHeartbeat.get_executor_stats().get(executor);\n    +ExecutorBeat executorBeat = new ExecutorBeat(time, uptime, executorStats);\n    +executorWhb.put(executor, executorBeat);\n    +    }\n<p>    +}<br/>\n    +return executorWhb;<br/>\n    +    }<br/>\n    +<br/>\n    +    public IStormClusterState mkStormClusterStateImpl(Object stateStorage, List<ACL> acls, ClusterStateContext context) throws Exception {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I agree with you. But it should be update into two methods after finishing some tests. Because it may happen some problems at tests  when it has two methods.For example, (.mkStormClusterStateImpl (Mockito/verify cluster-utils (Mockito/times 1)) (Mockito/any) (Mockito/eq expected-acls) (Mockito/any)) </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188041296","html_url":"https://github.com/apache/storm/pull/1081#issuecomment-188041296","issue_url":"https://api.github.com/repos/apache/storm/issues/1081","id":188041296,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODA0MTI5Ng==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T03:21:45Z","updated_at":"2016-02-24T03:21:45Z","author_association":"CONTRIBUTOR","body":"@revans2  Thank you again. I have addressed your comments.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188041296/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654009","html_url":"https://github.com/apache/storm/issues/5110#issuecomment-2612654009","issue_url":"https://api.github.com/repos/apache/storm/issues/5110","id":2612654009,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQwMDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T03:21:47Z","updated_at":"2025-01-24T14:24:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1081#issuecomment-188041296\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1081#issuecomment-188041296</a></p>\n\n<p>    @revans2  Thank you again. I have addressed your comments.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654009/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188043611","html_url":"https://github.com/apache/storm/pull/1135#issuecomment-188043611","issue_url":"https://api.github.com/repos/apache/storm/issues/1135","id":188043611,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODA0MzYxMQ==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T03:28:06Z","updated_at":"2016-02-24T03:28:06Z","author_association":"NONE","body":"LGTM.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188043611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875075","html_url":"https://github.com/apache/storm/issues/5402#issuecomment-2612875075","issue_url":"https://api.github.com/repos/apache/storm/issues/5402","id":2612875075,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzUwNzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T03:28:07Z","updated_at":"2025-01-24T16:03:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1135#issuecomment-188043611\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1135#issuecomment-188043611</a></p>\n\n<p>    LGTM.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875075/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188062656","html_url":"https://github.com/apache/storm/pull/1143#issuecomment-188062656","issue_url":"https://api.github.com/repos/apache/storm/issues/1143","id":188062656,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODA2MjY1Ng==","user":{"login":"darionyaphet","id":4414314,"node_id":"MDQ6VXNlcjQ0MTQzMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/4414314?v=4","gravatar_id":"","url":"https://api.github.com/users/darionyaphet","html_url":"https://github.com/darionyaphet","followers_url":"https://api.github.com/users/darionyaphet/followers","following_url":"https://api.github.com/users/darionyaphet/following{/other_user}","gists_url":"https://api.github.com/users/darionyaphet/gists{/gist_id}","starred_url":"https://api.github.com/users/darionyaphet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darionyaphet/subscriptions","organizations_url":"https://api.github.com/users/darionyaphet/orgs","repos_url":"https://api.github.com/users/darionyaphet/repos","events_url":"https://api.github.com/users/darionyaphet/events{/privacy}","received_events_url":"https://api.github.com/users/darionyaphet/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T04:40:05Z","updated_at":"2016-02-24T04:40:05Z","author_association":"CONTRIBUTOR","body":"sure . I push a new commit to update TridentKafkaEmitter's time interval calculation . Should merge them into one commit ?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188062656/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875583","html_url":"https://github.com/apache/storm/issues/5406#issuecomment-2612875583","issue_url":"https://api.github.com/repos/apache/storm/issues/5406","id":2612875583,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU1ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T04:40:05Z","updated_at":"2025-01-24T16:03:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user darionyaphet commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1143#issuecomment-188062656\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1143#issuecomment-188062656</a></p>\n\n<p>    sure . I push a new commit to update TridentKafkaEmitter's time interval calculation . Should merge them into one commit ?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875583/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188092004","html_url":"https://github.com/apache/storm/pull/1143#issuecomment-188092004","issue_url":"https://api.github.com/repos/apache/storm/issues/1143","id":188092004,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODA5MjAwNA==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:00:53Z","updated_at":"2016-02-24T06:00:53Z","author_association":"CONTRIBUTOR","body":"Given that the timing is measured only in the fill call, which happens per batch of messages, the relative performance improvement is very low. By the way, call could return in 1ms if fetch size is configured at a lower value for better latency. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188092004/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875590","html_url":"https://github.com/apache/storm/issues/5406#issuecomment-2612875590","issue_url":"https://api.github.com/repos/apache/storm/issues/5406","id":2612875590,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU1OTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:00:55Z","updated_at":"2025-01-24T16:03:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1143#issuecomment-188092004\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1143#issuecomment-188092004</a></p>\n\n<p>    Given that the timing is measured only in the fill call, which happens per batch of messages, the relative performance improvement is very low. By the way, call could return in 1ms if fetch size is configured at a lower value for better latency. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875590/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188095012","html_url":"https://github.com/apache/storm/pull/1143#issuecomment-188095012","issue_url":"https://api.github.com/repos/apache/storm/issues/1143","id":188095012,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODA5NTAxMg==","user":{"login":"darionyaphet","id":4414314,"node_id":"MDQ6VXNlcjQ0MTQzMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/4414314?v=4","gravatar_id":"","url":"https://api.github.com/users/darionyaphet","html_url":"https://github.com/darionyaphet","followers_url":"https://api.github.com/users/darionyaphet/followers","following_url":"https://api.github.com/users/darionyaphet/following{/other_user}","gists_url":"https://api.github.com/users/darionyaphet/gists{/gist_id}","starred_url":"https://api.github.com/users/darionyaphet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darionyaphet/subscriptions","organizations_url":"https://api.github.com/users/darionyaphet/orgs","repos_url":"https://api.github.com/users/darionyaphet/repos","events_url":"https://api.github.com/users/darionyaphet/events{/privacy}","received_events_url":"https://api.github.com/users/darionyaphet/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:08:57Z","updated_at":"2016-02-24T06:08:57Z","author_association":"CONTRIBUTOR","body":"This question doesn't focus on performance improvement . \n\nUsing System.currentTimeMillis to replace System.nanoTime is more reasonable\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188095012/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875592","html_url":"https://github.com/apache/storm/issues/5406#issuecomment-2612875592","issue_url":"https://api.github.com/repos/apache/storm/issues/5406","id":2612875592,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU1OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:08:58Z","updated_at":"2025-01-24T16:03:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user darionyaphet commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1143#issuecomment-188095012\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1143#issuecomment-188095012</a></p>\n\n<p>    This question doesn't focus on performance improvement . </p>\n\n<p>    Using System.currentTimeMillis to replace System.nanoTime is more reasonable</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875592/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647190","html_url":"https://github.com/apache/storm/issues/5082#issuecomment-2612647190","issue_url":"https://api.github.com/repos/apache/storm/issues/5082","id":2612647190,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDcxOTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:10:28Z","updated_at":"2025-01-24T14:21:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1069#discussion_r53898379\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1069#discussion_r53898379</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -0,0 +1,127 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.task.OutputCollector;<br/>\n    +import org.apache.storm.task.TopologyContext;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.TupleUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class Acker implements IBolt {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Acker.class);<br/>\n    +<br/>\n    +    private static final long serialVersionUID = 4430906880683183091L;<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = \"__acker\";<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = \"__ack_init\";<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = \"__ack_ack\";<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = \"__ack_fail\";<br/>\n    +<br/>\n    +    public static final int TIMEOUT_BUCKET_NUM = 3;<br/>\n    +<br/>\n    +    private OutputCollector collector;<br/>\n    +    private RotatingMap<Object, AckObject> pending;<br/>\n    +<br/>\n    +    private class AckObject {<br/>\n    +public long val = 0L;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    0 is assigned as default-value only in the update-ack call. let's say FAIL arrives first. `cond (= 0 (:val curr)` will return false in  the clojure code because val is nil. If val was zero instead, acker would have acked a failed message. The reason is value is checked first and failure is checked afterwards. It is not a problem in your changes since code just returns if fail comes before init. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647190/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647198","html_url":"https://github.com/apache/storm/issues/5082#issuecomment-2612647198","issue_url":"https://api.github.com/repos/apache/storm/issues/5082","id":2612647198,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDcxOTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:12:41Z","updated_at":"2025-01-24T14:21:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1069#discussion_r53898480\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1069#discussion_r53898480</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -0,0 +1,127 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.task.OutputCollector;<br/>\n    +import org.apache.storm.task.TopologyContext;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.TupleUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class Acker implements IBolt {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Acker.class);<br/>\n    +<br/>\n    +    private static final long serialVersionUID = 4430906880683183091L;<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = \"__acker\";<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = \"__ack_init\";<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = \"__ack_ack\";<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = \"__ack_fail\";<br/>\n    +<br/>\n    +    public static final int TIMEOUT_BUCKET_NUM = 3;<br/>\n    +<br/>\n    +    private OutputCollector collector;<br/>\n    +    private RotatingMap<Object, AckObject> pending;<br/>\n    +<br/>\n    +    private class AckObject {<br/>\n    +public long val = 0L;<br/>\n    +public Integer spoutTask = null;<br/>\n    +public boolean failed = false;<br/>\n    +<br/>\n    +// val xor value<br/>\n    +public void updateAck(Long value) </p>\n{\n    +    val = Utils.bitXor(val, value);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) </p>\n{\n    +this.collector = collector;\n    +this.pending = new RotatingMap<Object, AckObject>(TIMEOUT_BUCKET_NUM);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void execute(Tuple input) {<br/>\n    +if (TupleUtils.isTick(input)) {<br/>\n    +    Map<Object, AckObject> tmp = pending.rotate();<br/>\n    +    LOG.debug(\"Number of timeout tuples:{}\", tmp.size());<br/>\n    +    return;<br/>\n    +}<br/>\n    +<br/>\n    +String streamId = input.getSourceStreamId();<br/>\n    +Object id = input.getValue(0);<br/>\n    +AckObject curr = pending.get(id);<br/>\n    +if (ACKER_INIT_STREAM_ID.equals(streamId)) {<br/>\n    +    if (curr == null) </p>\n{\n    +curr = new AckObject();\n    +curr.val = input.getLong(1);\n    +curr.spoutTask = input.getInteger(2);\n    +pending.put(id, curr);\n    +    }\n<p> else </p>\n{\n    +// If receiving bolt's ack before the init message from spout, just update the xor value.\n    +curr.updateAck(input.getLong(1));\n    +curr.spoutTask = input.getInteger(2);\n    +    }\n<p>    +} else if (ACKER_ACK_STREAM_ID.equals(streamId)) {<br/>\n    +    if (curr != null) </p>\n{\n    +curr.updateAck(input.getLong(1));\n    +    }\n<p> else </p>\n{\n    +curr = new AckObject();\n    +curr.val = input.getLong(1);\n    +pending.put(id, curr);\n    +    }\n<p>    +} else if (ACKER_FAIL_STREAM_ID.equals(streamId)) {<br/>\n    +    if (curr == null) {<br/>\n    +// The tuple has been already timeout or failed. So, do nothing<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    That is correct @bastiliu. It would be rare but it is a possibility. Anyway, spout doesn't differentiate between failures and timeouts so I am fine with it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875715","html_url":"https://github.com/apache/storm/issues/5407#issuecomment-2612875715","issue_url":"https://api.github.com/repos/apache/storm/issues/5407","id":2612875715,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU3MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:18:50Z","updated_at":"2025-01-24T16:03:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user wuchong commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1142#discussion_r53898826\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1142#discussion_r53898826</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/command/CLI.java &#8212;<br/>\n    @@ -238,10 +238,13 @@ public CLIBuilder arg(String name, Parse parse, Assoc assoc) {<br/>\n DefaultParser parser = new DefaultParser();<br/>\n CommandLine cl = parser.parse(options, rawArgs);<br/>\n HashMap<String, Object> ret = new HashMap<>();</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>for (Opt opt: opts) {<br/>\n    +    for (Opt opt : opts) {<br/>\n     Object current = null;</li>\n\t<li>for (String val: cl.getOptionValues(opt.shortName)) {</li>\n\t<li>current = opt.process(current, val);<br/>\n    +String[] strings = cl.getOptionValues(opt.shortName);<br/>\n    +if (strings != null) {<br/>\n    +    for (String val : cl.getOptionValues(opt.shortName)) {\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    replace `cl.getOptionValues(opt.shortName)` with `strings` to avoid duplicate getOptionValues</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188099708","html_url":"https://github.com/apache/storm/pull/1143#issuecomment-188099708","issue_url":"https://api.github.com/repos/apache/storm/issues/1143","id":188099708,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODA5OTcwOA==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:23:19Z","updated_at":"2016-02-24T06:23:19Z","author_association":"NONE","body":"I agree with @darionyaphet . Actually I think all System.nanoTime callings in external modules should be replaced with System.currentTimeMillis since they use System.nanoTime to get a ns value and then convert the time back to ms, which is unnecessary.\n\nSystem.nanoTime should only be used in such cases that we do need high precision timing, e.g., timing certain code snippets in metrics system. If called on a critical path, this method is 5+ times slower than System.currentTimeMillis.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188099708/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875597","html_url":"https://github.com/apache/storm/issues/5406#issuecomment-2612875597","issue_url":"https://api.github.com/repos/apache/storm/issues/5406","id":2612875597,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU1OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:23:20Z","updated_at":"2025-01-24T16:03:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1143#issuecomment-188099708\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1143#issuecomment-188099708</a></p>\n\n<p>    I agree with @darionyaphet . Actually I think all System.nanoTime callings in external modules should be replaced with System.currentTimeMillis since they use System.nanoTime to get a ns value and then convert the time back to ms, which is unnecessary.</p>\n\n<p>    System.nanoTime should only be used in such cases that we do need high precision timing, e.g., timing certain code snippets in metrics system. If called on a critical path, this method is 5+ times slower than System.currentTimeMillis.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875597/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188100054","html_url":"https://github.com/apache/storm/pull/1142#issuecomment-188100054","issue_url":"https://api.github.com/repos/apache/storm/issues/1142","id":188100054,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODEwMDA1NA==","user":{"login":"wuchong","id":5378924,"node_id":"MDQ6VXNlcjUzNzg5MjQ=","avatar_url":"https://avatars.githubusercontent.com/u/5378924?v=4","gravatar_id":"","url":"https://api.github.com/users/wuchong","html_url":"https://github.com/wuchong","followers_url":"https://api.github.com/users/wuchong/followers","following_url":"https://api.github.com/users/wuchong/following{/other_user}","gists_url":"https://api.github.com/users/wuchong/gists{/gist_id}","starred_url":"https://api.github.com/users/wuchong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wuchong/subscriptions","organizations_url":"https://api.github.com/users/wuchong/orgs","repos_url":"https://api.github.com/users/wuchong/repos","events_url":"https://api.github.com/users/wuchong/events{/privacy}","received_events_url":"https://api.github.com/users/wuchong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:24:37Z","updated_at":"2016-02-24T06:24:37Z","author_association":"MEMBER","body":"+1 except a minor comment\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188100054/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875720","html_url":"https://github.com/apache/storm/issues/5407#issuecomment-2612875720","issue_url":"https://api.github.com/repos/apache/storm/issues/5407","id":2612875720,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU3MjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:24:38Z","updated_at":"2025-01-24T16:03:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user wuchong commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1142#issuecomment-188100054\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1142#issuecomment-188100054</a></p>\n\n<p>    +1 except a minor comment</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875720/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188100464","html_url":"https://github.com/apache/storm/pull/1144#issuecomment-188100464","issue_url":"https://api.github.com/repos/apache/storm/issues/1144","id":188100464,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODEwMDQ2NA==","user":{"login":"wuchong","id":5378924,"node_id":"MDQ6VXNlcjUzNzg5MjQ=","avatar_url":"https://avatars.githubusercontent.com/u/5378924?v=4","gravatar_id":"","url":"https://api.github.com/users/wuchong","html_url":"https://github.com/wuchong","followers_url":"https://api.github.com/users/wuchong/followers","following_url":"https://api.github.com/users/wuchong/following{/other_user}","gists_url":"https://api.github.com/users/wuchong/gists{/gist_id}","starred_url":"https://api.github.com/users/wuchong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wuchong/subscriptions","organizations_url":"https://api.github.com/users/wuchong/orgs","repos_url":"https://api.github.com/users/wuchong/repos","events_url":"https://api.github.com/users/wuchong/events{/privacy}","received_events_url":"https://api.github.com/users/wuchong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:25:48Z","updated_at":"2016-02-24T06:25:48Z","author_association":"MEMBER","body":"+1  LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188100464/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875322","html_url":"https://github.com/apache/storm/issues/5404#issuecomment-2612875322","issue_url":"https://api.github.com/repos/apache/storm/issues/5404","id":2612875322,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzUzMjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T06:25:50Z","updated_at":"2025-01-24T16:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user wuchong commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1144#issuecomment-188100464\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1144#issuecomment-188100464</a></p>\n\n<p>    +1  LGTM</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875322/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188110642","html_url":"https://github.com/apache/storm/pull/1140#issuecomment-188110642","issue_url":"https://api.github.com/repos/apache/storm/issues/1140","id":188110642,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODExMDY0Mg==","user":{"login":"lujinhong","id":5511758,"node_id":"MDQ6VXNlcjU1MTE3NTg=","avatar_url":"https://avatars.githubusercontent.com/u/5511758?v=4","gravatar_id":"","url":"https://api.github.com/users/lujinhong","html_url":"https://github.com/lujinhong","followers_url":"https://api.github.com/users/lujinhong/followers","following_url":"https://api.github.com/users/lujinhong/following{/other_user}","gists_url":"https://api.github.com/users/lujinhong/gists{/gist_id}","starred_url":"https://api.github.com/users/lujinhong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lujinhong/subscriptions","organizations_url":"https://api.github.com/users/lujinhong/orgs","repos_url":"https://api.github.com/users/lujinhong/repos","events_url":"https://api.github.com/users/lujinhong/events{/privacy}","received_events_url":"https://api.github.com/users/lujinhong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T07:07:33Z","updated_at":"2016-02-24T07:07:33Z","author_association":"CONTRIBUTOR","body":"refresh my fork, close this PR, I will commit another one.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188110642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604213","html_url":"https://github.com/apache/storm/issues/4903#issuecomment-2612604213","issue_url":"https://api.github.com/repos/apache/storm/issues/4903","id":2612604213,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDQyMTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T07:07:34Z","updated_at":"2025-01-24T14:02:14Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user lujinhong commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1140#issuecomment-188110642\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1140#issuecomment-188110642</a></p>\n\n<p>    refresh my fork, close this PR, I will commit another one.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604213/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604218","html_url":"https://github.com/apache/storm/issues/4903#issuecomment-2612604218","issue_url":"https://api.github.com/repos/apache/storm/issues/4903","id":2612604218,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDQyMTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T07:07:37Z","updated_at":"2025-01-24T14:02:14Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user lujinhong closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1140\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1140</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604221","html_url":"https://github.com/apache/storm/issues/4903#issuecomment-2612604221","issue_url":"https://api.github.com/repos/apache/storm/issues/4903","id":2612604221,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDQyMjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T07:09:45Z","updated_at":"2025-01-24T14:02:14Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user lujinhong opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1146\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1146</a></p>\n\n<p>     <a href=\"https://issues.apache.org/jira/browse/STORM-1065\" title=\"storm-kafka : kafka-partition can not find leader in zookeeper \" class=\"issue-link\" data-issue-key=\"STORM-1065\"><del>STORM-1065</del></a> kafka-partition can not find leader in zookeeper</p>\n\n<p>    fix  <a href=\"https://issues.apache.org/jira/browse/STORM-1065\" title=\"storm-kafka : kafka-partition can not find leader in zookeeper \" class=\"issue-link\" data-issue-key=\"STORM-1065\"><del>STORM-1065</del></a> kafka-partition can not find leader in zookeeper</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/lujinhong/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/lujinhong/storm</a> storm-1065</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1146.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1146.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1146</p>\n\n<hr />\n<p>commit 556ab52fdf9cffe39994cb601f5103d1219c4052<br/>\nAuthor: jinhong-lu <lu_jin_hong@163.com><br/>\nDate:   2016-02-24T06:49:09Z</p>\n\n<p>    fix storm-1065: kafka-partition can not find leader in zookeeper</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604221/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649296","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649296","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649296,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkyOTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T10:02:43Z","updated_at":"2025-01-24T14:22:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user wuchong commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#discussion_r53916420\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#discussion_r53916420</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/ui/helpers.clj &#8212;<br/>\n    @@ -46,197 +46,3 @@<br/>\n       (fn <span class=\"error\">&#91;req&#93;</span><br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I prefer to leave it here, so when we move to new REST framework we can remove this code or the appropriate replacement code can be written.</p>\n\n<p>    I will add a comment here.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649296/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188174878","html_url":"https://github.com/apache/storm/pull/1139#issuecomment-188174878","issue_url":"https://api.github.com/repos/apache/storm/issues/1139","id":188174878,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODE3NDg3OA==","user":{"login":"wuchong","id":5378924,"node_id":"MDQ6VXNlcjUzNzg5MjQ=","avatar_url":"https://avatars.githubusercontent.com/u/5378924?v=4","gravatar_id":"","url":"https://api.github.com/users/wuchong","html_url":"https://github.com/wuchong","followers_url":"https://api.github.com/users/wuchong/followers","following_url":"https://api.github.com/users/wuchong/following{/other_user}","gists_url":"https://api.github.com/users/wuchong/gists{/gist_id}","starred_url":"https://api.github.com/users/wuchong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wuchong/subscriptions","organizations_url":"https://api.github.com/users/wuchong/orgs","repos_url":"https://api.github.com/users/wuchong/repos","events_url":"https://api.github.com/users/wuchong/events{/privacy}","received_events_url":"https://api.github.com/users/wuchong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T10:10:07Z","updated_at":"2016-02-24T10:10:07Z","author_association":"MEMBER","body":"@revans2 @abhishekagarwal87  @hustfxj  Thanks for your review, I have addressed all the comments. \n\nCan you have a look again? \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188174878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649301","html_url":"https://github.com/apache/storm/issues/5091#issuecomment-2612649301","issue_url":"https://api.github.com/repos/apache/storm/issues/5091","id":2612649301,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDkzMDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T10:10:08Z","updated_at":"2025-01-24T14:22:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user wuchong commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1139#issuecomment-188174878\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1139#issuecomment-188174878</a></p>\n\n<p>    @revans2 @abhishekagarwal87  @hustfxj  Thanks for your review, I have addressed all the comments. </p>\n\n<p>    Can you have a look again? </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188196306","html_url":"https://github.com/apache/storm/pull/1144#issuecomment-188196306","issue_url":"https://api.github.com/repos/apache/storm/issues/1144","id":188196306,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODE5NjMwNg==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T11:07:57Z","updated_at":"2016-02-24T11:07:57Z","author_association":"MEMBER","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188196306/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875324","html_url":"https://github.com/apache/storm/issues/5404#issuecomment-2612875324","issue_url":"https://api.github.com/repos/apache/storm/issues/5404","id":2612875324,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzUzMjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T11:07:58Z","updated_at":"2025-01-24T16:03:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1144#issuecomment-188196306\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1144#issuecomment-188196306</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875324/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188215628","html_url":"https://github.com/apache/storm/pull/1144#issuecomment-188215628","issue_url":"https://api.github.com/repos/apache/storm/issues/1144","id":188215628,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODIxNTYyOA==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T11:47:27Z","updated_at":"2016-02-24T11:47:27Z","author_association":"CONTRIBUTOR","body":"LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188215628/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875328","html_url":"https://github.com/apache/storm/issues/5404#issuecomment-2612875328","issue_url":"https://api.github.com/repos/apache/storm/issues/5404","id":2612875328,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzUzMjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T11:47:29Z","updated_at":"2025-01-24T16:03:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1144#issuecomment-188215628\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1144#issuecomment-188215628</a></p>\n\n<p>    LGTM</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875328/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648234","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648234","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648234,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgyMzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T13:16:22Z","updated_at":"2025-01-24T14:21:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user unsleepy22 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1252\" title=\"port backtype.storm.stats to java\" class=\"issue-link\" data-issue-key=\"STORM-1252\"><del>STORM-1252</del></a> port backtype.storm.stats to java</p>\n\n<p>    This PR is quite large but because the defrecords are changed to java POJO's and they're used in many places, I could not break it into small PR's.</p>\n\n<p>    Almost all code in stats.clj is translated to java except only one point:<br/>\n    StatsUtil.aggTopoExecsStats (stats/agg-topo-execs-stats) needs to pass an error function, which depends on the translation of cluster.clj, so I added comments and will upmerge when cluster.clj is finished.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/unsleepy22/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/unsleepy22/storm</a> master</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1147</p>\n\n<hr />\n<p>commit afd2d525be396c6f430e6a4a13cd1f237496a473<br/>\nAuthor: 卫乐 <weiyue.wy@taobao.com><br/>\nDate:   2016-02-24T13:06:25Z</p>\n\n<p>    port backtype.storm.stats to java</p>\n\n<p>commit 52d3b587f07db7dcf66b774531e2face7247c7b6<br/>\nAuthor: 卫乐 <weiyue.wy@taobao.com><br/>\nDate:   2016-02-24T13:12:53Z</p>\n\n<p>    add translated java files</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648234/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875449","html_url":"https://github.com/apache/storm/issues/5405#issuecomment-2612875449","issue_url":"https://api.github.com/repos/apache/storm/issues/5405","id":2612875449,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU0NDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T13:26:06Z","updated_at":"2025-01-24T16:03:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1141#discussion_r53937034\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1141#discussion_r53937034</a></p>\n\n<p>    &#8212; Diff: external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/compiler/ExprCompiler.java &#8212;<br/>\n    @@ -234,14 +253,20 @@ public String translate(ExprCompiler compiler, RexCall call) {<br/>\n   pw.print(String.format(\"else if (%2$s == null) </p>\n{ %1$s = null; }\n<p>\\n\", val, arg));<br/>\n }<br/>\n       }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>String calc = printMethodCall(method.method, args);</li>\n\t<li>pw.print(String.format(\"else \n{ %1$s = %2$s; }\n<p>\\n\", val, calc));<br/>\n    +  String calc = printMethodCall(method, args);<br/>\n    +  String valCast = compiler.javaTypeName(call);<br/>\n    +  pw.print(String.format(\"else </p>\n{ %1$s = (%2$s)%3$s; }\n<p>\\n\", val, valCast, calc));</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    It seems there is no need to cast here. Tried with supported functions and UDF and it is working fine without casting. You may want to remove this as casting in generating code looks redundant. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875449/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188257212","html_url":"https://github.com/apache/storm/pull/1141#issuecomment-188257212","issue_url":"https://api.github.com/repos/apache/storm/issues/1141","id":188257212,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODI1NzIxMg==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T13:34:33Z","updated_at":"2016-02-24T13:34:33Z","author_association":"MEMBER","body":"Overall LGTM. +1 once the comment is addressed.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188257212/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875454","html_url":"https://github.com/apache/storm/issues/5405#issuecomment-2612875454","issue_url":"https://api.github.com/repos/apache/storm/issues/5405","id":2612875454,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU0NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T13:34:35Z","updated_at":"2025-01-24T16:03:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1141#issuecomment-188257212\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1141#issuecomment-188257212</a></p>\n\n<p>    Overall LGTM. +1 once the comment is addressed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188278662","html_url":"https://github.com/apache/storm/pull/1147#issuecomment-188278662","issue_url":"https://api.github.com/repos/apache/storm/issues/1147","id":188278662,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODI3ODY2Mg==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T14:32:25Z","updated_at":"2016-02-24T14:32:25Z","author_association":"CONTRIBUTOR","body":"PR is indeed quite large. StatsUtil file is too large right now. I think while we are porting from clojure, we should also shift from functional paradigm to Object oriented paradigm. In that spirit, many utility functions can go directly inside the classes on which they are invoked upon. e.g.\n\n```\npublic static void emittedTuple(CommonStats stats, String stream) {\n        stats.getEmitted().incBy(stream, stats.rate);\n    }\n```\n\ncan go to CommonStats itself\n\n```\npublic void emittedTuple(String stream) {\n        getEmitted().incBy(stream, rate);\n    }\n```\n\nSimilarly `public static Map renderStats(SpoutExecutorStats stats)` can go to SpoutExecutorStats class itself. These are few examples I could think of in a quick look. But I hope you got the gist of it. It would be good to get the opinion of the @revans2  and and other committers on this as well. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188278662/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648240","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648240","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648240,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgyNDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T14:32:26Z","updated_at":"2025-01-24T14:21:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#issuecomment-188278662\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#issuecomment-188278662</a></p>\n\n<p>    PR is indeed quite large. StatsUtil file is too large right now. I think while we are porting from clojure, we should also shift from functional paradigm to Object oriented paradigm. In that spirit, many utility functions can go directly inside the classes on which they are invoked upon. e.g.<br/>\n    ```<br/>\n    public static void emittedTuple(CommonStats stats, String stream) </p>\n{\n    stats.getEmitted().incBy(stream, stats.rate);\n}\n<p>    ```<br/>\n    can go to CommonStats itself<br/>\n    ```<br/>\n    public void emittedTuple(String stream) </p>\n{\n    getEmitted().incBy(stream, rate);\n}\n<p>    ```</p>\n\n<p>    Similarly `public static Map renderStats(SpoutExecutorStats stats)` can go to SpoutExecutorStats class itself. These are few examples I could think of in a quick look. But I hope you got the gist of it. It would be good to get the opinion of the @revans2  and and other committers on this as well. </p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648240/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/188288595","html_url":"https://github.com/apache/storm/pull/1147#issuecomment-188288595","issue_url":"https://api.github.com/repos/apache/storm/issues/1147","id":188288595,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODI4ODU5NQ==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T14:54:30Z","updated_at":"2016-02-24T14:54:30Z","author_association":"NONE","body":"@abhishekagarwal87 thanks, good point! I'll address your comments~\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/188288595/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648253","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648253","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648253,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgyNTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-24T14:54:32Z","updated_at":"2025-01-24T14:21:54Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#issuecomment-188288595\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#issuecomment-188288595</a></p>\n\n<p>    @abhishekagarwal87 thanks, good point! I'll address your comments~</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]