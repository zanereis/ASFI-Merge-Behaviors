[{"url":"https://api.github.com/repos/apache/drill/issues/comments/992496691","html_url":"https://github.com/apache/drill/pull/2282#issuecomment-992496691","issue_url":"https://api.github.com/repos/apache/drill/issues/2282","id":992496691,"node_id":"IC_kwDOAFa5xc47KEwz","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-13T13:53:05Z","updated_at":"2021-12-13T13:53:05Z","author_association":"CONTRIBUTOR","body":"Hi @paul-rogers.  We're in the throes of trying to convert this plugin to use EVF v2 / scan.v3.  This will be the first instance of this kind in the Drill code base, apart from a very simple mock plugin which supports unit tests (CompliantTextBatchReader remains based on EVF v1, from what I can see).\r\n\r\nSomething that's confusing me is that the EasyFormatPlugin base class is coded against the ManagedReader interface from EVF v1.  So I cannot see that we can both derive from EasyFormatPlugin, and also implement ManagedReader from EVF v2.  Am I missing something here?\r\n\r\nThanks, James","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/992496691/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/993368785","html_url":"https://github.com/apache/drill/pull/2398#issuecomment-993368785","issue_url":"https://api.github.com/repos/apache/drill/issues/2398","id":993368785,"node_id":"IC_kwDOAFa5xc47NZrR","user":{"login":"vvysotskyi","id":20928429,"node_id":"MDQ6VXNlcjIwOTI4NDI5","avatar_url":"https://avatars.githubusercontent.com/u/20928429?v=4","gravatar_id":"","url":"https://api.github.com/users/vvysotskyi","html_url":"https://github.com/vvysotskyi","followers_url":"https://api.github.com/users/vvysotskyi/followers","following_url":"https://api.github.com/users/vvysotskyi/following{/other_user}","gists_url":"https://api.github.com/users/vvysotskyi/gists{/gist_id}","starred_url":"https://api.github.com/users/vvysotskyi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvysotskyi/subscriptions","organizations_url":"https://api.github.com/users/vvysotskyi/orgs","repos_url":"https://api.github.com/users/vvysotskyi/repos","events_url":"https://api.github.com/users/vvysotskyi/events{/privacy}","received_events_url":"https://api.github.com/users/vvysotskyi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-14T09:59:03Z","updated_at":"2021-12-14T09:59:03Z","author_association":"MEMBER","body":"@vdiravka, sorry, forget to push the commit ðŸ˜…","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/993368785/reactions","total_count":1,"+1":0,"-1":0,"laugh":1,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/993895683","html_url":"https://github.com/apache/drill/pull/2282#issuecomment-993895683","issue_url":"https://api.github.com/repos/apache/drill/issues/2282","id":993895683,"node_id":"IC_kwDOAFa5xc47PaUD","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-14T19:12:56Z","updated_at":"2021-12-16T16:08:03Z","author_association":"CONTRIBUTOR","body":"@jnturton , thanks for pushing the EVF V2 stuff forward! The `EasyFormatPlugin` should contain \"shims\" for the original format, for EVF1 and for EVF2. Given that you said you can't find it, and that the CSV reader is still based on V1, I wonder if there is some branch that never got pushed a PR? I'll do some research to determine what's what.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/993895683/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/994918665","html_url":"https://github.com/apache/drill/pull/2384#issuecomment-994918665","issue_url":"https://api.github.com/repos/apache/drill/issues/2384","id":994918665,"node_id":"IC_kwDOAFa5xc47TUEJ","user":{"login":"luocooong","id":50079619,"node_id":"MDQ6VXNlcjUwMDc5NjE5","avatar_url":"https://avatars.githubusercontent.com/u/50079619?v=4","gravatar_id":"","url":"https://api.github.com/users/luocooong","html_url":"https://github.com/luocooong","followers_url":"https://api.github.com/users/luocooong/followers","following_url":"https://api.github.com/users/luocooong/following{/other_user}","gists_url":"https://api.github.com/users/luocooong/gists{/gist_id}","starred_url":"https://api.github.com/users/luocooong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/luocooong/subscriptions","organizations_url":"https://api.github.com/users/luocooong/orgs","repos_url":"https://api.github.com/users/luocooong/repos","events_url":"https://api.github.com/users/luocooong/events{/privacy}","received_events_url":"https://api.github.com/users/luocooong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-15T15:48:31Z","updated_at":"2021-12-15T15:48:31Z","author_association":"MEMBER","body":"@Leon-WTF Thanks for the update. Please replace the log level of test class to `debug`, then squash all the commits.\r\nI'll test the new metastore with `parquet` and `json` format in the cluster tomorrow.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/994918665/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/995115051","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-995115051","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":995115051,"node_id":"IC_kwDOAFa5xc47UEAr","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-15T19:21:44Z","updated_at":"2021-12-15T19:21:44Z","author_association":"CONTRIBUTOR","body":"> Please make all required changes in `drill-config.sh` instead.\r\n\r\ndone","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/995115051/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/995956782","html_url":"https://github.com/apache/drill/pull/2282#issuecomment-995956782","issue_url":"https://api.github.com/repos/apache/drill/issues/2282","id":995956782,"node_id":"IC_kwDOAFa5xc47XRgu","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-16T16:05:13Z","updated_at":"2021-12-16T16:05:13Z","author_association":"CONTRIBUTOR","body":"@jnturton, turns out the required changes are sitting in a branch in my private repo, `csv`, that somehow never not converted to a PR. I'll see if I can merge that stuff into a PR. ","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/995956782/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/996558800","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-996558800","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":996558800,"node_id":"IC_kwDOAFa5xc47ZkfQ","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-17T09:17:18Z","updated_at":"2021-12-17T09:17:18Z","author_association":"CONTRIBUTOR","body":"Hi @vvysotskyi, @Z0ltrix.  The two considerations,\r\n\r\n1. this change is a workaround for buggy IPv6 support in HDFS and\r\n2. the workaround is untargeted and could have side effects in some environments because Drill's JVMs get set to prefer IPv4 for every socket they open, whether to HDFS or elsewhere\r\n\r\n, make me wonder if this should really be promoted to a Drill default.  An alternative might be that we create a doc page describing this problem and showing users how to apply the workaround uncovered by @Z0ltrix to their own environments...","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/996558800/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/996602728","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-996602728","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":996602728,"node_id":"IC_kwDOAFa5xc47ZvNo","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-17T10:18:32Z","updated_at":"2021-12-17T10:18:32Z","author_association":"CONTRIBUTOR","body":"> Hi @vvysotskyi, @Z0ltrix. The two considerations,\r\n> \r\n>     1. this change is a workaround for buggy IPv6 support in HDFS and\r\n> \r\n>     2. the workaround is untargeted and could have side effects in some environments because Drill's JVMs get set to prefer IPv4 for every socket they open, whether to HDFS or elsewhere\r\n> \r\n> \r\n> , make me wonder if this should really be promoted to a Drill default. An alternative might be that we create a doc page describing this problem and showing users how to apply the workaround uncovered by @Z0ltrix to their own environments...\r\n\r\nHi @jnturton,\r\ngood Point...\r\nWhat now? How i should continue?\r\nThis PR or Docs?\r\nRegards\r\nChristian","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/996602728/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/996610838","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-996610838","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":996610838,"node_id":"IC_kwDOAFa5xc47ZxMW","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-17T10:30:33Z","updated_at":"2021-12-17T10:38:31Z","author_association":"CONTRIBUTOR","body":"Let's get at least one more opinion and see if we have a consensus, ping @vvysotskyi, @vdiravka, @luocooong, @cgivre.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/996610838/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/996875148","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-996875148","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":996875148,"node_id":"IC_kwDOAFa5xc47axuM","user":{"login":"vvysotskyi","id":20928429,"node_id":"MDQ6VXNlcjIwOTI4NDI5","avatar_url":"https://avatars.githubusercontent.com/u/20928429?v=4","gravatar_id":"","url":"https://api.github.com/users/vvysotskyi","html_url":"https://github.com/vvysotskyi","followers_url":"https://api.github.com/users/vvysotskyi/followers","following_url":"https://api.github.com/users/vvysotskyi/following{/other_user}","gists_url":"https://api.github.com/users/vvysotskyi/gists{/gist_id}","starred_url":"https://api.github.com/users/vvysotskyi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvysotskyi/subscriptions","organizations_url":"https://api.github.com/users/vvysotskyi/orgs","repos_url":"https://api.github.com/users/vvysotskyi/repos","events_url":"https://api.github.com/users/vvysotskyi/events{/privacy}","received_events_url":"https://api.github.com/users/vvysotskyi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-17T16:59:10Z","updated_at":"2021-12-17T16:59:10Z","author_association":"MEMBER","body":"Agree, good points @jnturton!\r\nSo @Z0ltrix please create a separate PR for updating documentation.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/996875148/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/996887174","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-996887174","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":996887174,"node_id":"IC_kwDOAFa5xc47a0qG","user":{"login":"vdiravka","id":11904420,"node_id":"MDQ6VXNlcjExOTA0NDIw","avatar_url":"https://avatars.githubusercontent.com/u/11904420?v=4","gravatar_id":"","url":"https://api.github.com/users/vdiravka","html_url":"https://github.com/vdiravka","followers_url":"https://api.github.com/users/vdiravka/followers","following_url":"https://api.github.com/users/vdiravka/following{/other_user}","gists_url":"https://api.github.com/users/vdiravka/gists{/gist_id}","starred_url":"https://api.github.com/users/vdiravka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vdiravka/subscriptions","organizations_url":"https://api.github.com/users/vdiravka/orgs","repos_url":"https://api.github.com/users/vdiravka/repos","events_url":"https://api.github.com/users/vdiravka/events{/privacy}","received_events_url":"https://api.github.com/users/vdiravka/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-17T17:15:57Z","updated_at":"2021-12-17T17:15:57Z","author_association":"MEMBER","body":"Agree with @jnturton and @vvysotskyi. \r\n\r\nBut possibly improvements still can be done for the algorithm of closing connections by Drill to avoid:\r\n> This leads to thousands of CLOSE_WAIT ipv6 connections from Drillbit to Datanode\r\n\r\n\r\n@Z0ltrix you can submit a separate ticket for that with details and error log","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/996887174/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/996896699","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-996896699","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":996896699,"node_id":"IC_kwDOAFa5xc47a2-7","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-17T17:30:44Z","updated_at":"2021-12-17T17:30:44Z","author_association":"CONTRIBUTOR","body":"> Hi @vvysotskyi, @Z0ltrix. The two considerations,\r\n> \r\n>     1. this change is a workaround for buggy IPv6 support in HDFS and\r\n> \r\n>     2. the workaround is untargeted and could have side effects in some environments because Drill's JVMs get set to prefer IPv4 for every socket they open, whether to HDFS or elsewhere\r\n> \r\n> \r\n> , make me wonder if this should really be promoted to a Drill default. An alternative might be that we create a doc page describing this problem and showing users how to apply the workaround uncovered by @Z0ltrix to their own environments...\r\n\r\nHi @jnturton,\r\ngood Point...\r\nWhat now? How i should continue?\r\nThis PR or Docs?\r\nRegards\r\nChristian\r\n\r\n> Agree with @jnturton and @vvysotskyi.\r\n> \r\n> But possibly improvements still can be done for the algorithm of closing connections by Drill to avoid:\r\n> \r\n> > This leads to thousands of CLOSE_WAIT ipv6 connections from Drillbit to Datanode\r\n> \r\n> @Z0ltrix you can submit a separate ticket for that with details and error log\r\n\r\nMmh... I think the ticket https://issues.apache.org/jira/browse/DRILL-8077 is fine, maybe i could change the description to specify the problem more.\r\n\r\nLogs would be a problem... All systems on the server just said they could not open a new connection because \"address already in use\" and we saw > 60k ipv6 connections to different hdfs datanodes in state CLOSE_WAIT. Took about a week or longer to occur, depends on number of queries.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/996896699/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/997184866","html_url":"https://github.com/apache/drill/pull/2409#issuecomment-997184866","issue_url":"https://api.github.com/repos/apache/drill/issues/2409","id":997184866,"node_id":"IC_kwDOAFa5xc47b9Vi","user":{"login":"pjfanning","id":11783444,"node_id":"MDQ6VXNlcjExNzgzNDQ0","avatar_url":"https://avatars.githubusercontent.com/u/11783444?v=4","gravatar_id":"","url":"https://api.github.com/users/pjfanning","html_url":"https://github.com/pjfanning","followers_url":"https://api.github.com/users/pjfanning/followers","following_url":"https://api.github.com/users/pjfanning/following{/other_user}","gists_url":"https://api.github.com/users/pjfanning/gists{/gist_id}","starred_url":"https://api.github.com/users/pjfanning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjfanning/subscriptions","organizations_url":"https://api.github.com/users/pjfanning/orgs","repos_url":"https://api.github.com/users/pjfanning/repos","events_url":"https://api.github.com/users/pjfanning/events{/privacy}","received_events_url":"https://api.github.com/users/pjfanning/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-18T10:52:32Z","updated_at":"2021-12-18T10:52:32Z","author_association":"CONTRIBUTOR","body":"@cgivre could you have a look?","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/997184866/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/997196180","html_url":"https://github.com/apache/drill/pull/2409#issuecomment-997196180","issue_url":"https://api.github.com/repos/apache/drill/issues/2409","id":997196180,"node_id":"IC_kwDOAFa5xc47cAGU","user":{"login":"pjfanning","id":11783444,"node_id":"MDQ6VXNlcjExNzgzNDQ0","avatar_url":"https://avatars.githubusercontent.com/u/11783444?v=4","gravatar_id":"","url":"https://api.github.com/users/pjfanning","html_url":"https://github.com/pjfanning","followers_url":"https://api.github.com/users/pjfanning/followers","following_url":"https://api.github.com/users/pjfanning/following{/other_user}","gists_url":"https://api.github.com/users/pjfanning/gists{/gist_id}","starred_url":"https://api.github.com/users/pjfanning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjfanning/subscriptions","organizations_url":"https://api.github.com/users/pjfanning/orgs","repos_url":"https://api.github.com/users/pjfanning/repos","events_url":"https://api.github.com/users/pjfanning/events{/privacy}","received_events_url":"https://api.github.com/users/pjfanning/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-18T12:33:39Z","updated_at":"2021-12-18T12:33:39Z","author_association":"CONTRIBUTOR","body":"the build failure was a timeout on getting a maven pom - think it was just bad luck","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/997196180/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/997212236","html_url":"https://github.com/apache/drill/pull/2407#issuecomment-997212236","issue_url":"https://api.github.com/repos/apache/drill/issues/2407","id":997212236,"node_id":"IC_kwDOAFa5xc47cEBM","user":{"login":"luocooong","id":50079619,"node_id":"MDQ6VXNlcjUwMDc5NjE5","avatar_url":"https://avatars.githubusercontent.com/u/50079619?v=4","gravatar_id":"","url":"https://api.github.com/users/luocooong","html_url":"https://github.com/luocooong","followers_url":"https://api.github.com/users/luocooong/followers","following_url":"https://api.github.com/users/luocooong/following{/other_user}","gists_url":"https://api.github.com/users/luocooong/gists{/gist_id}","starred_url":"https://api.github.com/users/luocooong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/luocooong/subscriptions","organizations_url":"https://api.github.com/users/luocooong/orgs","repos_url":"https://api.github.com/users/luocooong/repos","events_url":"https://api.github.com/users/luocooong/events{/privacy}","received_events_url":"https://api.github.com/users/luocooong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-18T14:44:48Z","updated_at":"2021-12-18T14:44:48Z","author_association":"MEMBER","body":"@cgivre The commit header is not correct.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/997212236/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/997322720","html_url":"https://github.com/apache/drill/pull/2359#issuecomment-997322720","issue_url":"https://api.github.com/repos/apache/drill/issues/2359","id":997322720,"node_id":"IC_kwDOAFa5xc47ce_g","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-19T03:23:13Z","updated_at":"2021-12-19T03:23:45Z","author_association":"CONTRIBUTOR","body":"@paul-rogers \r\nThanks for all your review.  I addressed all your comments (I think) and did the following:\r\n* Added additional unit tests\r\n* Refactored table list so that all tables are not read into memory if not requested\r\n* Added iterator classes to avoid counters in the batch reader\r\n* Moved metadata collection to separate class\r\n* Refactored to allow a pdf with no tables to return metadata if requested (And unit test)\r\n* Added config option for different extraction algorithms.\r\n* Removed extraneous test PDF files\r\n* General code cleanup\r\n\r\nI removed all but one of the `System.env` calls and I'm a little stuck on this.  The reason I added this line is that when querying a PDF with Drill in embedded mode, it opens an additional java window.  This does not occur when running unit tests which makes for difficult debugging.   I'm going to keep digging into this, but I was wondering if you could take a look at the rest of the revisions in the mean time?   The issue seems to be in either Tabula or PdfBox, which are the underlying libraries that read the PDF file. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/997322720/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/997333735","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-997333735","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":997333735,"node_id":"IC_kwDOAFa5xc47chrn","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-19T05:45:35Z","updated_at":"2021-12-19T05:46:41Z","author_association":"CONTRIBUTOR","body":"We can't, and shouldn't try to, fix an HDFS IPv6 connection management bug with changes to Drill's connection management code.  For the observed state to arise, Drill must already be closing connections on its end, and that's where its job stops.  So the existing HADOOP-xxx tickets suffice, we only need a docs PR.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/997333735/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/998910362","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-998910362","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":998910362,"node_id":"IC_kwDOAFa5xc47iima","user":{"login":"vdiravka","id":11904420,"node_id":"MDQ6VXNlcjExOTA0NDIw","avatar_url":"https://avatars.githubusercontent.com/u/11904420?v=4","gravatar_id":"","url":"https://api.github.com/users/vdiravka","html_url":"https://github.com/vdiravka","followers_url":"https://api.github.com/users/vdiravka/followers","following_url":"https://api.github.com/users/vdiravka/following{/other_user}","gists_url":"https://api.github.com/users/vdiravka/gists{/gist_id}","starred_url":"https://api.github.com/users/vdiravka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vdiravka/subscriptions","organizations_url":"https://api.github.com/users/vdiravka/orgs","repos_url":"https://api.github.com/users/vdiravka/repos","events_url":"https://api.github.com/users/vdiravka/events{/privacy}","received_events_url":"https://api.github.com/users/vdiravka/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-21T16:14:32Z","updated_at":"2021-12-21T16:14:32Z","author_association":"MEMBER","body":"@Z0ltrix Do we have https://issues.apache.org/jira/browse/HADOOP ticket for the above issue?","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/998910362/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/998999681","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-998999681","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":998999681,"node_id":"IC_kwDOAFa5xc47i4aB","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-21T18:25:55Z","updated_at":"2021-12-21T18:26:08Z","author_association":"CONTRIBUTOR","body":"> @Z0ltrix Do we have https://issues.apache.org/jira/browse/HADOOP ticket for the above issue?\r\n\r\nNot precisely for this Bug but for general ipv6 Support... https://issues.apache.org/jira/browse/HADOOP-11890","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/998999681/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/999002485","html_url":"https://github.com/apache/drill/pull/2359#issuecomment-999002485","issue_url":"https://api.github.com/repos/apache/drill/issues/2359","id":999002485,"node_id":"IC_kwDOAFa5xc47i5F1","user":{"login":"pjfanning","id":11783444,"node_id":"MDQ6VXNlcjExNzgzNDQ0","avatar_url":"https://avatars.githubusercontent.com/u/11783444?v=4","gravatar_id":"","url":"https://api.github.com/users/pjfanning","html_url":"https://github.com/pjfanning","followers_url":"https://api.github.com/users/pjfanning/followers","following_url":"https://api.github.com/users/pjfanning/following{/other_user}","gists_url":"https://api.github.com/users/pjfanning/gists{/gist_id}","starred_url":"https://api.github.com/users/pjfanning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjfanning/subscriptions","organizations_url":"https://api.github.com/users/pjfanning/orgs","repos_url":"https://api.github.com/users/pjfanning/repos","events_url":"https://api.github.com/users/pjfanning/events{/privacy}","received_events_url":"https://api.github.com/users/pjfanning/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-21T18:30:24Z","updated_at":"2021-12-21T18:30:24Z","author_association":"CONTRIBUTOR","body":"@cgivre new pdfbox release: https://downloads.apache.org/pdfbox/2.0.25/RELEASE-NOTES.txt","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/999002485/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/999058835","html_url":"https://github.com/apache/drill/pull/2406#issuecomment-999058835","issue_url":"https://api.github.com/repos/apache/drill/issues/2406","id":999058835,"node_id":"IC_kwDOAFa5xc47jG2T","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-21T20:03:15Z","updated_at":"2021-12-21T20:03:15Z","author_association":"CONTRIBUTOR","body":"> Agree, good points @jnturton! So @Z0ltrix please create a separate PR for updating documentation.\r\n\r\ndone... https://github.com/apache/drill-site/pull/21","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/999058835/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/999062953","html_url":"https://github.com/apache/drill/pull/2359#issuecomment-999062953","issue_url":"https://api.github.com/repos/apache/drill/issues/2359","id":999062953,"node_id":"IC_kwDOAFa5xc47jH2p","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-21T20:10:15Z","updated_at":"2021-12-21T20:10:15Z","author_association":"CONTRIBUTOR","body":"> @cgivre new pdfbox release: https://downloads.apache.org/pdfbox/2.0.25/RELEASE-NOTES.txt\r\n\r\nThanks @pjfanning !  Unfortunately, that didn't solve the issue with opening up the java window.  I emailed the PDFbox user list and hopefully they can give me some suggestions.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/999062953/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/999686126","html_url":"https://github.com/apache/drill/pull/2359#issuecomment-999686126","issue_url":"https://api.github.com/repos/apache/drill/issues/2359","id":999686126,"node_id":"IC_kwDOAFa5xc47lf_u","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-22T15:59:35Z","updated_at":"2021-12-22T15:59:35Z","author_association":"CONTRIBUTOR","body":"@paul-rogers \r\nThis PR is now ready for review.  I did some research into the `headless` option and why specifically I was not getting this issue when I ran unit tests, and only when I ran manual queries.  So, the issue was caused when PDFBox opens a document, it calls some AWT libraries that it needs for deciphering PDF files.  (Also probably for writing PDF files)   In any event, this is what was causing the window to open. \r\n\r\nWhen Drill runs the unit tests, we actually have the `headless` option specified as a Java option.  So, I moved this setting to `drill-config.sh` and included a comment about why it is there.  If someone wants to remove it for some reason, they can and they can disable the PDF functionality simply by not including it in the configs for the storage plugin.  This seems like the right place for this to live. \r\n\r\nI believe that I've addressed all your other comments as well.  Thank you as always for the thorough review!  It's ready for another look.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/999686126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001078129","html_url":"https://github.com/apache/drill/issues/2415#issuecomment-1001078129","issue_url":"https://api.github.com/repos/apache/drill/issues/2415","id":1001078129,"node_id":"IC_kwDOAFa5xc47qz1x","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-25T22:22:17Z","updated_at":"2021-12-25T22:22:17Z","author_association":"CONTRIBUTOR","body":"hostnames ending with xxx.internal does not look like normal hostname configuration. Is the /etc/hostname of all nodes that run the drillbits configured with a hostname you can find on a public DNS, so that your local machine could find it? Drill should use this config to store it within zookeeper.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001078129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001116007","html_url":"https://github.com/apache/drill/issues/2415#issuecomment-1001116007","issue_url":"https://api.github.com/repos/apache/drill/issues/2415","id":1001116007,"node_id":"IC_kwDOAFa5xc47q9Fn","user":{"login":"mohamedkashifuddin","id":59591190,"node_id":"MDQ6VXNlcjU5NTkxMTkw","avatar_url":"https://avatars.githubusercontent.com/u/59591190?v=4","gravatar_id":"","url":"https://api.github.com/users/mohamedkashifuddin","html_url":"https://github.com/mohamedkashifuddin","followers_url":"https://api.github.com/users/mohamedkashifuddin/followers","following_url":"https://api.github.com/users/mohamedkashifuddin/following{/other_user}","gists_url":"https://api.github.com/users/mohamedkashifuddin/gists{/gist_id}","starred_url":"https://api.github.com/users/mohamedkashifuddin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mohamedkashifuddin/subscriptions","organizations_url":"https://api.github.com/users/mohamedkashifuddin/orgs","repos_url":"https://api.github.com/users/mohamedkashifuddin/repos","events_url":"https://api.github.com/users/mohamedkashifuddin/events{/privacy}","received_events_url":"https://api.github.com/users/mohamedkashifuddin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-26T07:10:06Z","updated_at":"2021-12-26T07:10:06Z","author_association":"NONE","body":"Hi @Z0ltrix \r\nThe hostname is been automatically assign by drillbit at the time of drillbit startup script which uses drill-env.sh so this time I added the hostname in drill-env.sh. \r\n\r\ndefault setup address given by drillbit  drill-env.sh\r\n![image](https://user-images.githubusercontent.com/59591190/147401277-b1cc7cfb-0397-4b50-b2ae-8c2715f9774d.png)\r\n\r\nafter custom name given in  drill-env.sh  with hostname of the vm in drill-env.sh \r\n![image](https://user-images.githubusercontent.com/59591190/147401319-ce51027a-9bea-4c8a-b4ca-b08ca6e62a1f.png)\r\n\r\nSo now zookeeper/conf/zoo.cfg , drill/conf/drill-override.conf, and  drill/conf/drill-env.sh have a same hostname\r\n\r\nAfter that change when I try to connect with zk style I get a error : `No active Drillbit endpoint found from ZooKeeper. Check connection parameters?`\r\n\r\n![image](https://user-images.githubusercontent.com/59591190/147401397-a0a98d66-5a40-44d2-a44b-8991e562dfd6.png)\r\n\r\n\r\nAny idea why isn't it connecting with zk style but even now it connects with drillbit style ?\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001116007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001117164","html_url":"https://github.com/apache/drill/issues/2415#issuecomment-1001117164","issue_url":"https://api.github.com/repos/apache/drill/issues/2415","id":1001117164,"node_id":"IC_kwDOAFa5xc47q9Xs","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-26T07:25:29Z","updated_at":"2021-12-26T07:25:29Z","author_association":"CONTRIBUTOR","body":"Hi @mohamedkashifuddin,\r\nyou need to configure fqdn for your drillbits within your cloud provider UI and within /etc/hosts so that all systems can find each other and your local laptop can find the drillbits with the address you can see in the web UI of Drill.\r\nFor ZK connection Drill stores just its own address within zookeeper. Your client reads this entry and tries to reach it from client Side, so its important to configure real fqdn. \r\nThe drillbits do the same between them for internal communication.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001117164/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001126462","html_url":"https://github.com/apache/drill/issues/2415#issuecomment-1001126462","issue_url":"https://api.github.com/repos/apache/drill/issues/2415","id":1001126462,"node_id":"IC_kwDOAFa5xc47q_o-","user":{"login":"mohamedkashifuddin","id":59591190,"node_id":"MDQ6VXNlcjU5NTkxMTkw","avatar_url":"https://avatars.githubusercontent.com/u/59591190?v=4","gravatar_id":"","url":"https://api.github.com/users/mohamedkashifuddin","html_url":"https://github.com/mohamedkashifuddin","followers_url":"https://api.github.com/users/mohamedkashifuddin/followers","following_url":"https://api.github.com/users/mohamedkashifuddin/following{/other_user}","gists_url":"https://api.github.com/users/mohamedkashifuddin/gists{/gist_id}","starred_url":"https://api.github.com/users/mohamedkashifuddin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mohamedkashifuddin/subscriptions","organizations_url":"https://api.github.com/users/mohamedkashifuddin/orgs","repos_url":"https://api.github.com/users/mohamedkashifuddin/repos","events_url":"https://api.github.com/users/mohamedkashifuddin/events{/privacy}","received_events_url":"https://api.github.com/users/mohamedkashifuddin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-26T08:29:44Z","updated_at":"2021-12-26T08:30:20Z","author_association":"NONE","body":"Hi @Z0ltrix Thanks for the information, But it would be great if you could give example what should be within /etc/hosts. \r\nThis is my testing environment so the vms contain external IP, In our actual environment non of the vms would have a external IP so we wouldn't need to config DNS with our cloud provider.\r\n\r\n**It would be great if you give a eg to refer:**  \r\nMy current hosts file looks like this below  \r\n\r\n```\r\ncat /etc/hosts\r\n127.0.0.1 localhost\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1 ip6-localhost ip6-loopback\r\nfe00::0 ip6-localnet\r\nff00::0 ip6-mcastprefix\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\nff02::3 ip6-allhosts\r\n169.254.169.254 metadata.google.internal metadata\r\n```","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001126462/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001158038","html_url":"https://github.com/apache/drill/issues/2415#issuecomment-1001158038","issue_url":"https://api.github.com/repos/apache/drill/issues/2415","id":1001158038,"node_id":"IC_kwDOAFa5xc47rHWW","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-26T11:09:17Z","updated_at":"2021-12-26T11:10:08Z","author_association":"CONTRIBUTOR","body":"> Hi @Z0ltrix Thanks for the information, But it would be great if you could give example what should be within /etc/hosts. This is my testing environment so the vms contain external IP, In our actual environment non of the vms would have a external IP so we wouldn't need to config DNS with our cloud provider.\r\n> \r\n> **It would be great if you give a eg to refer:** My current hosts file looks like this below\r\n> \r\n> ```\r\n> cat /etc/hosts\r\n> 127.0.0.1 localhost\r\n> \r\n> # The following lines are desirable for IPv6 capable hosts\r\n> ::1 ip6-localhost ip6-loopback\r\n> fe00::0 ip6-localnet\r\n> ff00::0 ip6-mcastprefix\r\n> ff02::1 ip6-allnodes\r\n> ff02::2 ip6-allrouters\r\n> ff02::3 ip6-allhosts\r\n> 169.254.169.254 metadata.google.internal metadata\r\n> ```\r\n\r\nThis means in your production environment you do not want to connect the drillbits from outside?\r\n\r\nAn adequate example with a minimal drill/zookeeper production environment should have the following nodes:\r\n\r\n1. zookeeper1\r\n2. zookeeper2\r\n3. zookeeper3\r\n4. drillbit1\r\n5. drillbit2\r\n6. drillbit3\r\n\r\nlet's assume that we have only internal communication, so we are not in need of any DNS provider.\r\n### zookeeper1\r\n`/etc/hostname`:\r\n```\r\nzookeeper1.my.great.cluster.com\r\n```\r\n`/etc/hosts`:\r\n```\r\n127.0.0.1 localhost\r\n\r\n10.0.0.1 zookeeper1 zookeeper1.my.great.cluster.com\r\n10.0.0.2 zookeeper2 zookeeper2.my.great.cluster.com\r\n10.0.0.3 zookeeper3 zookeeper3.my.great.cluster.com\r\n10.0.1.1 drillbit1 drillbit1.my.great.cluster.com\r\n10.0.1.2 drillbit2 drillbit2.my.great.cluster.com\r\n10.0.1.3 drillbit3 drillbit3.my.great.cluster.com\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1 ip6-localhost ip6-loopback\r\nfe00::0 ip6-localnet\r\nff00::0 ip6-mcastprefix\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\nff02::3 ip6-allhosts\r\n69.254.169.254 metadata.google.internal metadata\r\n```\r\n\r\n### zookeeper2\r\n`/etc/hostname`:\r\n```\r\nzookeeper2.my.great.cluster.com\r\n```\r\n`/etc/hosts`:\r\n```\r\n127.0.0.1 localhost\r\n\r\n10.0.0.1 zookeeper1 zookeeper1.my.great.cluster.com\r\n10.0.0.2 zookeeper2 zookeeper2.my.great.cluster.com\r\n10.0.0.3 zookeeper3 zookeeper3.my.great.cluster.com\r\n10.0.1.1 drillbit1 drillbit1.my.great.cluster.com\r\n10.0.1.2 drillbit2 drillbit2.my.great.cluster.com\r\n10.0.1.3 drillbit3 drillbit3.my.great.cluster.com\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1 ip6-localhost ip6-loopback\r\nfe00::0 ip6-localnet\r\nff00::0 ip6-mcastprefix\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\nff02::3 ip6-allhosts\r\n69.254.169.254 metadata.google.internal metadata\r\n```\r\n\r\n### zookeeper3\r\n`/etc/hostname`:\r\n```\r\nzookeeper3.my.great.cluster.com\r\n```\r\n`/etc/hosts`:\r\n```\r\n127.0.0.1 localhost\r\n\r\n10.0.0.1 zookeeper1 zookeeper1.my.great.cluster.com\r\n10.0.0.2 zookeeper2 zookeeper2.my.great.cluster.com\r\n10.0.0.3 zookeeper3 zookeeper3.my.great.cluster.com\r\n10.0.1.1 drillbit1 drillbit1.my.great.cluster.com\r\n10.0.1.2 drillbit2 drillbit2.my.great.cluster.com\r\n10.0.1.3 drillbit3 drillbit3.my.great.cluster.com\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1 ip6-localhost ip6-loopback\r\nfe00::0 ip6-localnet\r\nff00::0 ip6-mcastprefix\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\nff02::3 ip6-allhosts\r\n69.254.169.254 metadata.google.internal metadata\r\n```\r\n\r\n### drillbit1\r\n`/etc/hostname`:\r\n```\r\ndrillbit1.my.great.cluster.com\r\n```\r\n`/etc/hosts`:\r\n```\r\n127.0.0.1 localhost\r\n\r\n10.0.0.1 zookeeper1 zookeeper1.my.great.cluster.com\r\n10.0.0.2 zookeeper2 zookeeper2.my.great.cluster.com\r\n10.0.0.3 zookeeper3 zookeeper3.my.great.cluster.com\r\n10.0.1.1 drillbit1 drillbit1.my.great.cluster.com\r\n10.0.1.2 drillbit2 drillbit2.my.great.cluster.com\r\n10.0.1.3 drillbit3 drillbit3.my.great.cluster.com\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1 ip6-localhost ip6-loopback\r\nfe00::0 ip6-localnet\r\nff00::0 ip6-mcastprefix\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\nff02::3 ip6-allhosts\r\n69.254.169.254 metadata.google.internal metadata\r\n```\r\n\r\n### drillbit2\r\n`/etc/hostname`:\r\n```\r\ndrillbit2.my.great.cluster.com\r\n```\r\n`/etc/hosts`:\r\n```\r\n127.0.0.1 localhost\r\n\r\n10.0.0.1 zookeeper1 zookeeper1.my.great.cluster.com\r\n10.0.0.2 zookeeper2 zookeeper2.my.great.cluster.com\r\n10.0.0.3 zookeeper3 zookeeper3.my.great.cluster.com\r\n10.0.1.1 drillbit1 drillbit1.my.great.cluster.com\r\n10.0.1.2 drillbit2 drillbit2.my.great.cluster.com\r\n10.0.1.3 drillbit3 drillbit3.my.great.cluster.com\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1 ip6-localhost ip6-loopback\r\nfe00::0 ip6-localnet\r\nff00::0 ip6-mcastprefix\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\nff02::3 ip6-allhosts\r\n69.254.169.254 metadata.google.internal metadata\r\n```\r\n\r\n### drillbit3\r\n`/etc/hostname`:\r\n```\r\ndrillbit3.my.great.cluster.com\r\n```\r\n`/etc/hosts`:\r\n```\r\n127.0.0.1 localhost\r\n\r\n10.0.0.1 zookeeper1 zookeeper1.my.great.cluster.com\r\n10.0.0.2 zookeeper2 zookeeper2.my.great.cluster.com\r\n10.0.0.3 zookeeper3 zookeeper3.my.great.cluster.com\r\n10.0.1.1 drillbit1 drillbit1.my.great.cluster.com\r\n10.0.1.2 drillbit2 drillbit2.my.great.cluster.com\r\n10.0.1.3 drillbit3 drillbit3.my.great.cluster.com\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1 ip6-localhost ip6-loopback\r\nfe00::0 ip6-localnet\r\nff00::0 ip6-mcastprefix\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\nff02::3 ip6-allhosts\r\n69.254.169.254 metadata.google.internal metadata\r\n```\r\n\r\nAs you can see, `/etc/hosts` is equal on every machine, so that all can find each other without DNS.\r\n\r\nThe internal ip's has to be changed to the real internal ip's of your cloud provider.\r\n\r\nNow Drill should register itself with `drillbit1-3.my.great.cluster.com` within zookeeper and each node can find the other ones.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001158038/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001202621","html_url":"https://github.com/apache/drill/issues/2307#issuecomment-1001202621","issue_url":"https://api.github.com/repos/apache/drill/issues/2307","id":1001202621,"node_id":"IC_kwDOAFa5xc47rSO9","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-26T15:44:43Z","updated_at":"2021-12-26T15:44:43Z","author_association":"CONTRIBUTOR","body":"@KendraKrat I don't know if you're still following this, but I am working on extending the XML reader to accept XSD and provided schemata.  I don't think it will make it for this release, but it shouldn't be too long.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001202621/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001202664","html_url":"https://github.com/apache/drill/issues/2307#issuecomment-1001202664","issue_url":"https://api.github.com/repos/apache/drill/issues/2307","id":1001202664,"node_id":"IC_kwDOAFa5xc47rSPo","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-12-26T15:44:58Z","updated_at":"2021-12-26T15:44:58Z","author_association":"CONTRIBUTOR","body":"That will also fix the other bug you reported.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1001202664/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003697039","html_url":"https://github.com/apache/drill/issues/2233#issuecomment-1003697039","issue_url":"https://api.github.com/repos/apache/drill/issues/2233","id":1003697039,"node_id":"IC_kwDOAFa5xc470zOP","user":{"login":"alvaradojl","id":3758486,"node_id":"MDQ6VXNlcjM3NTg0ODY=","avatar_url":"https://avatars.githubusercontent.com/u/3758486?v=4","gravatar_id":"","url":"https://api.github.com/users/alvaradojl","html_url":"https://github.com/alvaradojl","followers_url":"https://api.github.com/users/alvaradojl/followers","following_url":"https://api.github.com/users/alvaradojl/following{/other_user}","gists_url":"https://api.github.com/users/alvaradojl/gists{/gist_id}","starred_url":"https://api.github.com/users/alvaradojl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alvaradojl/subscriptions","organizations_url":"https://api.github.com/users/alvaradojl/orgs","repos_url":"https://api.github.com/users/alvaradojl/repos","events_url":"https://api.github.com/users/alvaradojl/events{/privacy}","received_events_url":"https://api.github.com/users/alvaradojl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-02T10:53:40Z","updated_at":"2022-01-02T10:53:40Z","author_association":"NONE","body":"It would be great to add support to additional cloud table storage such as azure table.\r\nAlso, I think the JDBC used as example in the Drill documentation to connect to SQL Server is too old (v6) and maybe that's why it has [this issue ](https://github.com/apache/drill/issues/2418). ","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003697039/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003703779","html_url":"https://github.com/apache/drill/issues/2418#issuecomment-1003703779","issue_url":"https://api.github.com/repos/apache/drill/issues/2418","id":1003703779,"node_id":"IC_kwDOAFa5xc47003j","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-02T11:53:33Z","updated_at":"2022-01-02T11:53:33Z","author_association":"CONTRIBUTOR","body":"Thanks for submitting this.  We've already promoted it to a Jira issue \r\n\r\nhttps://issues.apache.org/jira/browse/DRILL-8090\r\n\r\nso I'll close here.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003703779/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003703915","html_url":"https://github.com/apache/drill/issues/2233#issuecomment-1003703915","issue_url":"https://api.github.com/repos/apache/drill/issues/2233","id":1003703915,"node_id":"IC_kwDOAFa5xc47005r","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-02T11:54:33Z","updated_at":"2022-01-02T11:54:33Z","author_association":"CONTRIBUTOR","body":"@alvaradojl thanks for the suggestions.  The issue related to LIMIT is actually a bug which we'll tackle soon.\r\n\r\nhttps://issues.apache.org/jira/browse/DRILL-8090","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003703915/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003729078","html_url":"https://github.com/apache/drill/pull/2413#issuecomment-1003729078","issue_url":"https://api.github.com/repos/apache/drill/issues/2413","id":1003729078,"node_id":"IC_kwDOAFa5xc4707C2","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-02T15:03:18Z","updated_at":"2022-01-02T15:03:18Z","author_association":"CONTRIBUTOR","body":"@Leon-WTF I see this marked as draft, but @paul-rogers approved it.  Is this ready to merge or are you planning on adding more to this PR?  \r\n\r\nIf you are ready to merge, please remove the `draft` and we'll merge!  Thanks for the contribution and Happy New Year!!","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003729078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003831613","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1003831613","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1003831613,"node_id":"IC_kwDOAFa5xc471UE9","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T01:59:13Z","updated_at":"2022-01-03T01:59:13Z","author_association":"CONTRIBUTOR","body":"Hi @luocooong, looks like you're looking at the expression and operator code. I wonder, is there anything you're trying to improve? Execution performance, maybe?\r\n\r\nAs you know, Drill is very complicated. Drill uses code generation for expression evaluation. The code generation goes though a path that made sense for Java 5 (when Drill was written), but is now a bit awkward. We do have a way to use the native Java tools, which worked faster several years ago; that path is probably even faster now.\r\n\r\nOperator setup (another of your PRs) is impacted by code gen cost. Drill generates code for each fragment. If your query has 20 fragments, we generate code 20 times. The reason we must do that is that, in theory, every fragment can see a different schema, so the generated code could differ. By comparison, Spark generates code once, then pushes that code to all its executors.\r\n\r\nThe generated code itself can be rather awkward for large queries: the code tries to inline everything which is great for small functions, but causes optimization problems as code blocks get larger.\r\n\r\nThe mechanism to generate code, especially in the PROJECT operator, is vastly overly complex and could use a good re-think. It is so complex that it is hard to optimize because of the many assumptions and other issues embedded in the code.\r\n\r\nThe generated code is meant to be small. But, over time, some operators added lots of \"standard\" code to the code generation path. The work is more work for the compiler and \"byte code optimizer\" that adds no per-query value. We've taken several passes at refactoring to pull that code of the code gen path, but there is more to do.\r\n\r\nDrill was designed to allow vector operations (hence Value Vectors), but the code was never written. In part because there are no CPU vector instructions that work with SQL nullable data. Arrow is supposed to have figured out solutions (Gandiva, is it?) which, perhaps we could consider (but probably only for non-nullable data.)\r\n\r\nAnyway, there are many areas we can improve. I can give you more details if I know what you're trying to accomplish.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003831613/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003835781","html_url":"https://github.com/apache/drill/pull/2282#issuecomment-1003835781","issue_url":"https://api.github.com/repos/apache/drill/issues/2282","id":1003835781,"node_id":"IC_kwDOAFa5xc471VGF","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T02:16:49Z","updated_at":"2022-01-03T02:16:49Z","author_association":"CONTRIBUTOR","body":"PR [2419](https://github.com/apache/drill/pull/2419) has the EVF V2 adapter for the Easy Format Plugin. I suggest that you use that code, and follow the example there, to add EVF V2 support here.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003835781/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003840525","html_url":"https://github.com/apache/drill/pull/2419#issuecomment-1003840525","issue_url":"https://api.github.com/repos/apache/drill/issues/2419","id":1003840525,"node_id":"IC_kwDOAFa5xc471WQN","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T02:39:59Z","updated_at":"2022-01-03T02:39:59Z","author_association":"NONE","body":"This pull request **introduces 3 alerts** and **fixes 1** when merging 9943990c0784ae62a647fe7c7468cd9ea7fedfc6 into ff1fc38e475892eefa812cddce4d2ae822335868 - [view on LGTM.com](https://lgtm.com/projects/g/apache/drill/rev/pr-8bcf16123279f1f9be4457092e0902d61a0decf2)\n\n**new alerts:**\n\n* 2 for Spurious Javadoc @param tags\n* 1 for Result of multiplication cast to wider type\n\n**fixed alerts:**\n\n* 1 for Result of multiplication cast to wider type","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003840525/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003928988","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1003928988","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1003928988,"node_id":"IC_kwDOAFa5xc471r2c","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T08:16:16Z","updated_at":"2022-01-03T12:43:42Z","author_association":"CONTRIBUTOR","body":"> Drill was designed to allow vector operations (hence Value Vectors), but the code was never written. In part because there are no CPU vector instructions that work with SQL nullable data. Arrow is supposed to have figured out solutions (Gandiva, is it?) which, perhaps we could consider (but probably only for non-nullable data.)\r\n\r\nHi @paul-rogers, I think that what Arrow does for computations over nullable data is store an external nullity mask and compute results for every record, including the null ones where the value vector contains either rubbish or some sentinel value.  In a second pass, a nullity mask is computed for the result.  This results in wasted arithmetic operations for null values, but in practice that's better than a branch for every value.  Quite possibly even for pretty sparse vectors.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003928988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003945110","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1003945110","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1003945110,"node_id":"IC_kwDOAFa5xc471vyW","user":{"login":"Z0ltrix","id":14264280,"node_id":"MDQ6VXNlcjE0MjY0Mjgw","avatar_url":"https://avatars.githubusercontent.com/u/14264280?v=4","gravatar_id":"","url":"https://api.github.com/users/Z0ltrix","html_url":"https://github.com/Z0ltrix","followers_url":"https://api.github.com/users/Z0ltrix/followers","following_url":"https://api.github.com/users/Z0ltrix/following{/other_user}","gists_url":"https://api.github.com/users/Z0ltrix/gists{/gist_id}","starred_url":"https://api.github.com/users/Z0ltrix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Z0ltrix/subscriptions","organizations_url":"https://api.github.com/users/Z0ltrix/orgs","repos_url":"https://api.github.com/users/Z0ltrix/repos","events_url":"https://api.github.com/users/Z0ltrix/events{/privacy}","received_events_url":"https://api.github.com/users/Z0ltrix/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T08:51:35Z","updated_at":"2022-01-03T08:51:35Z","author_association":"CONTRIBUTOR","body":"> > Drill was designed to allow vector operations (hence Value Vectors), but the code was never written. In part because there are no CPU vector instructions that work with SQL nullable data. Arrow is supposed to have figured out solutions (Gandiva, is it?) which, perhaps we could consider (but probably only for non-nullable data.)\r\n> \r\n> Hi @paul-rogers, I think that what Arrow does for computations over nullable data is store an external null mask and compute results for every record, including the null ones where the value vector contains either rubbish or some sentinel value. In a second pass, a null mask is computed for the result. This results in wasted arithmetic operations for null values, but in practice that's better than a branch for every value. Quite possibly even for pretty sparse vectors.\r\n\r\ni'm sure you have already discussed this, but i would like to know why we are not migrating to arrow and cannot find any information about this decision. As far as i know, arrow was inspired by drill and on the arrow homepage they have still the picture with drill on it but drill does not use arrow. https://arrow.apache.org/overview/ \r\nIs there any official statement from the project for the arrow support/migration?","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003945110/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003948739","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1003948739","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1003948739,"node_id":"IC_kwDOAFa5xc471wrD","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T09:00:01Z","updated_at":"2022-01-03T09:00:01Z","author_association":"CONTRIBUTOR","body":"> i'm sure you have already discussed this, but i would like to know why we are not migrating to arrow and cannot find any information about this decision. As far as i know, arrow was inspired by drill and on the arrow homepage they have still the picture with drill on it but drill does not use arrow. https://arrow.apache.org/overview/\r\n> Is there any official statement from the project for the arrow support/migration?\r\n\r\n@Z0ltrix there isn't an official statement that I know of.  It's too big a question for a comment thread answer and a good topic for a community meetup with some senior devs present.  I believe that to some extent Drill's vector engine has developed in its own direction since Arrow arrived and the best route forward for Drill is now not entirely obvious, and needs some thought.  Significant pros for Arrow are that it is maintained externally and I believe its performance is very good.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003948739/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003965555","html_url":"https://github.com/apache/drill/pull/2417#issuecomment-1003965555","issue_url":"https://api.github.com/repos/apache/drill/issues/2417","id":1003965555,"node_id":"IC_kwDOAFa5xc4710xz","user":{"login":"luocooong","id":50079619,"node_id":"MDQ6VXNlcjUwMDc5NjE5","avatar_url":"https://avatars.githubusercontent.com/u/50079619?v=4","gravatar_id":"","url":"https://api.github.com/users/luocooong","html_url":"https://github.com/luocooong","followers_url":"https://api.github.com/users/luocooong/followers","following_url":"https://api.github.com/users/luocooong/following{/other_user}","gists_url":"https://api.github.com/users/luocooong/gists{/gist_id}","starred_url":"https://api.github.com/users/luocooong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/luocooong/subscriptions","organizations_url":"https://api.github.com/users/luocooong/orgs","repos_url":"https://api.github.com/users/luocooong/repos","events_url":"https://api.github.com/users/luocooong/events{/privacy}","received_events_url":"https://api.github.com/users/luocooong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T09:27:53Z","updated_at":"2022-01-03T09:27:53Z","author_association":"MEMBER","body":"Before that, there was an issue that the Travis CI was frozen :\r\n```\r\nWe are unable to start your build at this time.\r\nYou exceeded the number of users allowed for your plan. Please review your plan details and follow the steps to resolution.\r\n```\r\nI have contacted their tech support today and they seem to have solved the issue for us.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1003965555/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004154855","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1004154855","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1004154855,"node_id":"IC_kwDOAFa5xc472i_n","user":{"login":"luocooong","id":50079619,"node_id":"MDQ6VXNlcjUwMDc5NjE5","avatar_url":"https://avatars.githubusercontent.com/u/50079619?v=4","gravatar_id":"","url":"https://api.github.com/users/luocooong","html_url":"https://github.com/luocooong","followers_url":"https://api.github.com/users/luocooong/followers","following_url":"https://api.github.com/users/luocooong/following{/other_user}","gists_url":"https://api.github.com/users/luocooong/gists{/gist_id}","starred_url":"https://api.github.com/users/luocooong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/luocooong/subscriptions","organizations_url":"https://api.github.com/users/luocooong/orgs","repos_url":"https://api.github.com/users/luocooong/repos","events_url":"https://api.github.com/users/luocooong/events{/privacy}","received_events_url":"https://api.github.com/users/luocooong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T15:07:20Z","updated_at":"2022-01-03T15:07:20Z","author_association":"MEMBER","body":"@paul-rogers Hello, thanks for the information. I just have a few questions I'd like to know..\r\n- **Code gen path** :  Are you talking about the `Code Generation Workflow`? If we are going to use the native java tools, is there anything we can do for this?\r\n- **Use provided-schema** : If we provide the schema at query time, does it mean that we can also generate code once like Spark?\r\n- **Refactors and changes** : Is there any reference old tickets were used to rewrite and improve the CG path?\r\n- **Vectorization** : As I understand, Drill only implements vector storage, but had not implemented the vectorization base on these vector value, is that correct?","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004154855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004186672","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1004186672","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1004186672,"node_id":"IC_kwDOAFa5xc472qww","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T15:56:54Z","updated_at":"2022-01-03T15:56:54Z","author_association":"CONTRIBUTOR","body":"@luocooong @paul-rogers I've always thought of Drill's code gen as being an effort to present a good target for the JVM's auto-vectorisation.  Not that this is likely to get the same results as the new SIMD intrinsics in the JVM, or a nice way to code.  Is this on the mark?  A reference:\r\n\r\nhttps://cr.openjdk.java.net/~vlivanov/talks/2019_CodeOne_MTE_Vectors.pdf","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004186672/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004274089","html_url":"https://github.com/apache/drill/pull/2420#issuecomment-1004274089","issue_url":"https://api.github.com/repos/apache/drill/issues/2420","id":1004274089,"node_id":"IC_kwDOAFa5xc473AGp","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T18:26:27Z","updated_at":"2022-01-03T18:26:27Z","author_association":"CONTRIBUTOR","body":"One other thing, I'd like to add UTs for MS-SQL to the JDBC plugin for both reading and writing.  But not in this task ;-)","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004274089/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004328836","html_url":"https://github.com/apache/drill/pull/2420#issuecomment-1004328836","issue_url":"https://api.github.com/repos/apache/drill/issues/2420","id":1004328836,"node_id":"IC_kwDOAFa5xc473NeE","user":{"login":"vvysotskyi","id":20928429,"node_id":"MDQ6VXNlcjIwOTI4NDI5","avatar_url":"https://avatars.githubusercontent.com/u/20928429?v=4","gravatar_id":"","url":"https://api.github.com/users/vvysotskyi","html_url":"https://github.com/vvysotskyi","followers_url":"https://api.github.com/users/vvysotskyi/followers","following_url":"https://api.github.com/users/vvysotskyi/following{/other_user}","gists_url":"https://api.github.com/users/vvysotskyi/gists{/gist_id}","starred_url":"https://api.github.com/users/vvysotskyi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvysotskyi/subscriptions","organizations_url":"https://api.github.com/users/vvysotskyi/orgs","repos_url":"https://api.github.com/users/vvysotskyi/repos","events_url":"https://api.github.com/users/vvysotskyi/events{/privacy}","received_events_url":"https://api.github.com/users/vvysotskyi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T20:09:37Z","updated_at":"2022-01-03T20:09:37Z","author_association":"MEMBER","body":"@cgivre, yes, it is a good idea. I've noticed that we have a lot of common test cases for different databases. It would be good to refactor those tests to avoid copying them.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004328836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004366424","html_url":"https://github.com/apache/drill/pull/2420#issuecomment-1004366424","issue_url":"https://api.github.com/repos/apache/drill/issues/2420","id":1004366424,"node_id":"IC_kwDOAFa5xc473WpY","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T21:19:42Z","updated_at":"2022-01-03T21:19:42Z","author_association":"CONTRIBUTOR","body":"> @cgivre, yes, it is a good idea. I've noticed that we have a lot of common test cases for different databases. It would be good to refactor those tests to avoid copying them.\r\n\r\nHow did you have in mind?  When I wrote the JDBC reader, I added tests for Postgres and one other.  I duplicated all the writer tests for a bunch of databases.  Is there a more efficient way?","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004366424/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004379219","html_url":"https://github.com/apache/drill/pull/2420#issuecomment-1004379219","issue_url":"https://api.github.com/repos/apache/drill/issues/2420","id":1004379219,"node_id":"IC_kwDOAFa5xc473ZxT","user":{"login":"vvysotskyi","id":20928429,"node_id":"MDQ6VXNlcjIwOTI4NDI5","avatar_url":"https://avatars.githubusercontent.com/u/20928429?v=4","gravatar_id":"","url":"https://api.github.com/users/vvysotskyi","html_url":"https://github.com/vvysotskyi","followers_url":"https://api.github.com/users/vvysotskyi/followers","following_url":"https://api.github.com/users/vvysotskyi/following{/other_user}","gists_url":"https://api.github.com/users/vvysotskyi/gists{/gist_id}","starred_url":"https://api.github.com/users/vvysotskyi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvysotskyi/subscriptions","organizations_url":"https://api.github.com/users/vvysotskyi/orgs","repos_url":"https://api.github.com/users/vvysotskyi/repos","events_url":"https://api.github.com/users/vvysotskyi/events{/privacy}","received_events_url":"https://api.github.com/users/vvysotskyi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T21:43:20Z","updated_at":"2022-01-03T21:43:20Z","author_association":"MEMBER","body":"@cgivre, I think something like [Parameterized tests](https://github.com/junit-team/junit4/wiki/parameterized-tests) could help to do that.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004379219/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004406533","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1004406533","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1004406533,"node_id":"IC_kwDOAFa5xc473gcF","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-03T22:41:47Z","updated_at":"2022-01-03T22:41:47Z","author_association":"CONTRIBUTOR","body":"@luocooong, here are answers to your questions:\r\n\r\n**Code gen**: Drill already supports \"plain Java\" code gen and use of the standard compiler without byte code fixup. It is what is used when you set the magic flag in each operator, then ask to save code for debugging. In the tests I did way back when, he \"plain Java\" path performed at least as well as the Janino/byte-code-fixup path.\r\n\r\nIf you are not familiar with the \"save code for debugging\" mechanism, you should be if you want to look at optimization. I'd by happy to describe it (or hunt down to see if it is already described in the Wiki.)\r\n\r\n**Provided schema**: There are three cases to consider.\r\n\r\n1. Explicit SELECT: `SELECT a, b, c FROM ...`. In this case, if we have a schema, then all operators will use exactly the same code and we can generate once.\r\n2. \"Lenient\" wildcard: `SELECT * FROM ...`, where the file (such as JSON or CSV) may have more columns than described by the \"provided schema\". In this case, each reader is free to add the extra columns. Since each file may be different, each reader will produce a different schema, and downstream operators must deal with schema-on-read; the code cannot be shared.\r\n3. \"Strict\" wildcard: readers include only those columns defined in the schema. For this option, we can also generate code once. \r\n\r\n**Refactors**: there are probably some random assortment of tickets filed as various people looked into this area. However, this is more than a \"change this, improve that\" kind of thing, it probably needs someone to spend time to fully understand what we have today and to do some research to see if there are ways to improve the execution model. Hence, this discussion.\r\n\r\n**Vectorization**: that is a complex discussion. I'll tackle that in another note. ","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004406533/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004438817","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1004438817","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1004438817,"node_id":"IC_kwDOAFa5xc473oUh","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T00:08:01Z","updated_at":"2022-01-04T00:45:27Z","author_association":"CONTRIBUTOR","body":"All: so I've kicked the hornet's nest with the mention of value vectors and Arrow. I'm going to put on my flame-proof suit and debunk some myths.\r\n\r\nThe columnar format is great for storage, for all the usual reasons. This is why Parquet uses it, Druid uses it for segment files, and various DBs use it for storage. The question we want to ask is, do those benefits apply to the format within the Drill execution engine? I'm here to suggest that columnar has no advantage, and many disadvantages, when used as the *internal* format of an execution engine. \"Thems is fighting words\", so let's bring it on.\r\n\r\nI've had the pleasure of working with several query engines: Drill (columnar) and Impala (row-based) are two well-known examples. This has given me a unique opportunity to see if all the marketing claims for columnar (which still appear in the videos on Drill's website) actually hold up in practice. Spoiler: they don't.\r\n\r\nThis is a PR about optimization. A good rule in optimization is to start with the biggest issues, then work toward the details. So, rather than tinker with the details of vector execution, let's look at the fundamental issues. I hope this will help us avoid confusing Drill's (and Arrow's) marketing with reality.\r\n\r\n**Myth: Vectorized execution**: The biggest myth is around vectorized execution. Of course, a minor myth is that Drill uses such execution (it doesn't.) The bigger myth is that, if we invested enough, it could.\r\n\r\nVectorized execution is great when we have a simple operation we apply to a large amount of data. Think the dot-product operation for neural networks, or data compression, or image transforms, or graphics. In all cases, we apply a simple operation (rescale, say) to a large amount of homogeneous data (the pixels in an image.)\r\n\r\nSo, the question is, does typical, real-world SQL fit this pattern? I've now seen enough crufty, complex, messy real-world queries to suggest that, no, SQL is not a good candidate for vectorization. `SELECT` and `WHERE` clauses embed business logic, and that logic is based on messy human rules, not crisp, clean mathematics. The resulting SQL tends to have conditionals (`WHEN` or `IF()`, etc.), lots of function calls (all those cool UDFs which @cgivre has written), and so on. Plus, as noted above, SQL deals with NULL values, which must short-circuit entire execution paths.\r\n\r\nHence, even if we could vectorize simple operations, we'd find that, in most queries, we could not actually use that code.\r\n\r\n**Myth: Vectors are CPU Cache Friendly**: The second big myth is that vectors are somehow more \"friendly\" to the CPU L1 cache than a row format. The idea is that one can load a vector into the L1 cache, then zip through many values in one go. This myth is related to the above one.\r\n\r\nFirst, SQL expressions are not based on columns, they are based on rows. Each calculation tends to involve multiple columns: `net_receipts = sales + taxes - returns`. Here each calculation touches four vectors, so we need all four to be in the CPU cache to benefit.\r\n\r\nSecond, SQL is row based: that above calculation is just one of perhaps many that occur on each row. In the ideal case, the calculations for independent groups: `SELECT a + b AS x, c - d + e AS y, f / g AS z, ...`. In this case, we could load vectors ``a, `b`, `x` into the L1 cache, do the calcs, then load `c`, `d`, `e` and y in the cache and so on. Of course, Drill doesn't work this way (it does all the calculations for a single row before moving to the next), but it could, and it would have to to benefit from vectorization.\r\n\r\nA more typical case is that the same column is used in multiple expressions: `SELECT a + b AS x, a / c AS y, (a - d) * e AS z, ...` In this case, we must load the `a` vector into the L1 cache multiple times. (Or, more properly, its values would continually be bumped out of the cache, then reloaded.)\r\n\r\n**Myth: Bigger Vectors are Better**: Drill went though a phase when everyone bought into the \"L1 cache\" myth. To get better performance everyone wanted ever larger vectors. In the code, you'll see that we started with 1K-row batches, then it grew to 4K, then other code would create 64K row batches. It got so bad we'd allocate vectors larger than 16MB, which caused memory fragmentation and OOM errors. (This is the original reason for what evolved to be \"EVF\": to control vector sizes to prevent memory fragmentation - very basic DB stuff.)\r\n\r\nRemember, the CPU L1 cache is only about 256K in size. A 4MB vector is already 16x the L1 cache size. Combine that with real-world expressions and we end up with a \"working set\" of 10s of MB in size: 20x or more the L1 cache size. The result is lots of cache misses. (This stuff is really hard to measure, would be great for someone to do the experiments to show this happening in practice.)\r\n\r\n**Myth: Vectors are Efficient**: A related, minor myth is that writing to vectors is more efficient than writing to rows. This is not true in general. In Drill, it is especially false. Originally, vectors were allocated at some small initial size (256K? Something like that.) Vectors grow as we add data. (That's one of the things that make working with them difficult.) Fill the 256K vector? We double it to 512K and copy across the data. We do again at 1MB, 2MB, 4MB, ... In the end, to grow to 4MB, copy about 4MB of data. That is 4MB of reads, 4MB of writes, in addition to the 4MB of writes needed to create the data.\r\n\r\nLater, a bunch of ad-hoc \"batch sizing\" code was added to try to guess a good initial size for vectors. Not too hard or fixed-width vectors (`INT`, say), but rather tricky for variable-width vectors (`VARCHAR`).\r\n\r\nRemember that each vector is sized and grows independently. So, to create a batch, we have to track the size of every vector, grow those that need growing, but not over-allocate all the vectors because the space is not fungible: vector `a` can't \"borrow\" unused space from vector `b`.\r\n\r\nThe point is, Drill needs a large amount of complex, add-on code just to work around the fact that every vector will grow, and copy data, if not sized correctly, and, in general, we don't know ahead of time what the size should be. The result is inefficiency.\r\n\r\n**Myth: Vectors Allow Efficient Parquet Integration**: The idea here is that Parquet is columnar, vectors are columnar, so we just read Parquet directly into vectors. The reality is that Parquet is a highly-encoded format that requires a large amount of complex code to decode. Drill does the decoding value-by-value, there is no \"direct copy\", nor could there be. Parquet works with Drill's value vectors, Arrow vectors, or Impala rows equally well: in each case, the Parquet data has to be decoded value-by-value, then written to the target format.\r\n\r\n**Single Data Format for In-Memory and Over-the-Wire**: One of Drills' claims to fame is that value vectors (and, later Arrow vectors) use the same layout in memory as over the wire, leading to efficient exchanges via RPC. This myth is true, as far as it goes. But, if you look at the code, the truth is much more complex. On the sender side, vectors are independent buffers (as explained above.) On the receiver side, the whole message comes in as one big buffer. Special code slices up that buffer to recover vectors. A vast amount of complex code is needed to handle the accounting. (Thanks to Chris, a one-time Drill contributor who wrote all that code well enough that it \"just works\". It would be hell to fix otherwise.)\r\n\r\n**Complex Client Code**: All DB clients work a row at a time. Whether it is JDBC, Sql Alchemy, your home grown code, or whatever, a client consumes data a row at a time. All DB APIs (except Drill) are row-based. The client asks for the next row (or, more typically, the next *n* rows), then reads them one-by-one. Super simple and has worked for decades.\r\n\r\nWith Drill, a client has to include all of Drill's complex vector logic so it can read a batch of a 1K (or 4K or more) rows split across vectors. The client then has to walk the vectors to assemble the row that the client really wants. The result is that Java clients (such as JDBC) pull in a vast amount of Drill code. The C++ ODBC client was a nightmare: pretty much only one person ever could make it work (thanks, Parth!).\r\n\r\nThe complexity of this simple client operation has led clients to use the REST API instead. But, Drill is session-based (needed to set Drill's zillions of session options), but REST is not. Drill works for \"big data\", but REST delivers the results in one big blob. The result is that that the vector-based client is so hard to use that folks want to use the REST client, which doesn't work in the general case either. We've shot ourselves in the foot. Yet, every other DB on the planet has a simple row-based client API.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004438817/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004442320","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1004442320","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1004442320,"node_id":"IC_kwDOAFa5xc473pLQ","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T00:17:32Z","updated_at":"2022-01-04T00:17:32Z","author_association":"CONTRIBUTOR","body":"The last topic is so complex that no myth has grown up around it, and the issue is not at all well understood. Vectors (and batches) are hell for distributed system performance. This gets pretty techie, so hang on.\r\n\r\n**Vectors are Hell for Exchanges**:  This comes from a real-world case in which a large cluster worked no faster than a single thread of execution. We've discussed how Drill wants to create large batches (per the myth) to benefit from vectorization (which we don't have) and to optimize L1 cache usage (which, as we've seen, we don't actually do.) Let's assume \"small\" batches of 1K rows.\r\n\r\nDrill also wants the single format for in-memory and over-the-wire usage. This means we want to transfer 1K record batches so that the receiver gets batches of the optimal in-memory size.\r\n\r\nNow, what happens in a distributed system? Assume you have 100 fragments running. (Maybe 10 machines with 10 cores each.) Let's think about one fragment, call it \"f0.0\". Let's assume f.0.0 runs a scan and a network sender. The scan builds up its 1K batches, because those are \"efficient\" (according to the myths we've discussed.)\r\n\r\nWhat does f0.0's network sender do? Let's assume the target is a hash join. So, the sender hashes the keys into 100 buckets. Now, the sender follows Drill's rule: send 1K record batches. Since there are 100 targets, the sender has to create 100 buffered batches, fill them each to 1K records, then send them. To visualize:\r\n\r\n`f0.0 (reader --> sender) - - > f1.x (receiver --> hash-join --> ...) ...`\r\n\r\nThere are 100 f0 fragments: f0.0, ... f0.99, we're looking just at one of them: f0.0. The f0 \"slice\" sends to the \"f1\" slice that consists of 100 additional fragments: f1.0, ... f1.99.\r\n\r\nSo, what happens in our sender? Assuming even hash distribution, we have to fill all our 100 outgoing batches before we can send them. This means we have to read 100 * 1K = 100K input records before we send the first outgoing batch. The result is a huge memory usage (those 100 batches), plus all the vector resizes and copies we discussed (as we grow those batches.)\r\n\r\nIf that we not bad enough, this occurs in all our other 99 f0 fragments: we've got 100 * 100 = 10K buffered batches waiting to send. Yikes!\r\n\r\nNow, what happens in f1? It is sitting around waiting for data. No f0 will send until if fills its first outgoing batch for that receiver. If we assume an even distribution of data, then the outgoing batches fill at about the same rate. None can be sent until one of them reaches the target, at which point most of them are near-full. Once the first hits the 1K mark, off it goes to f1 who can filly start processing. This is bad because Drill claims to be highly distributed, but we just described is a serial way of working.\r\n\r\nBut, it gets worse! Now, assume we're deeper in the DAG, at a sort:\r\n\r\n`f4: (receiver --> sort --> sender) - - > f4: (receiver --> merge --> ...)`\r\n\r\nThe sort sorts its slice of records, and sends it to the merge fragment which merges all the partial sorts. Classic distributed systems stuff. Again, the f4 (sort) sender waits to fill its outgoing batches, then it sends. The merge can't start until it sees batches from all 100 inputs. So, it proceeds at the rate of the slowest sort.\r\n\r\nNow what happens? The merge uses up one of the 100 input batches, and needs another before it can proceed. But, here things get really nasty.\r\n\r\nOn the f4 side, f4.0, say, sent the first batch to get full. It then sent the others as they filled. Meanwhile, the first batch started refilling and eventually will need to be sent again. Since the merges can't read a new batch until its used up the previous one, it blocks the f4 sender. As a result, f4 can't send to *any* other merge.\r\n\r\nThe downstream fragment throttles the upstream, and visa versa. Not quite deadlock, but the entire system becomes serialized: the sort can't ship batches until the slowest merge can receive them. The merge can't make progress until the slowest sort provides the next batch. Every fragment depends on every other. Disaster!\r\n\r\nAgain, we spent hours trying to figure this out on a customer cluster. We could see the effect, but we could not get in to work out the details. Would be great for someone to do the experiments.\r\n\r\n**Summary**: The above has debunked the major myths around columnar storage within a query engine. Note that **none** of the above changes if we use Arrow. We'd do a huge amount of work to switch, and be stuck with the same fundamental problems.\r\n\r\nHence, we have to think deeply about this issue, not just by the snake oil that \"vectors are good for an execution engine.\" Good old solid engineering and experimentation will tell us what's what.\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004442320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004444084","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1004444084","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1004444084,"node_id":"IC_kwDOAFa5xc473pm0","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T00:22:43Z","updated_at":"2022-01-04T00:22:43Z","author_association":"CONTRIBUTOR","body":"OK, so the above raise the issues we have to consider when thinking about vectors (Drill's or Arrow's.) What is the alternative?\r\n\r\nHere, I think Impala got it right. Impala uses Parquet (columnar) for *storage*, but rows for *internal* processing. Impala is like an Italian sports car of old: spends lots of time in the shop, but when it works, it is very fast.\r\n\r\nOne of the reasons that Impala is fast is because of the row format.  First, let's describe what \"row-based\" means. It means that columns appear together, as in a C `struct`, with rows packed one after another as in an array of `structs`. This means that the data for a given row is contiguous. There is only one buffer to size. Classic DB stuff that seems unusual only because we're all used to Drill's vector format.\r\n\r\nLet's look at the same issues above, but from a row-based perspective.\r\n\r\n**Expression Execution**: With a row-based model, the CPU can easily load a single row into the L1 cache. All our crufty-real-world expression logic works on that single row. So, no matter how messy the expressions, from the CPU's perspective, all the data is in that single row, which fits nicely into the cache.\r\n\r\nRows can be small (a few dozen bytes) or large (maybe a 10s of K for long VARCHARs). In either case, they are far smaller than the L1 cache. The row is loaded. Once we move onto the next row, we'll never visit the previous one, so we don't care if the CPU flushes it from the cache.\r\n\r\n**Memory Allocation**: Rows reside in buffers (AKA \"pages\"), typically of a fixed size. A reader \"pours\" data into a row. When the page is full, that last record is copied to the next page. Only that one row is copied, not all the existing data. So, we eliminate the 1X copy + 1X load problem in Drill. Since there is only one page to allocate, memory is simpler. Since pages are of fixed size, memory management is simpler as well.\r\n\r\n**Exchanges**: Network exchanges are row-based. Rows are self-contained. A network sender can send single rows, if that is efficient, or batches of rows. In our 100-senders-100-receiver example, we could send rows as soon as they are available. The receiver starts working as soon as the first row is available. There is no near-deadlock from excessive buffering.\r\n\r\nYes, we would want to buffer rows (into pages) for efficiency. But, in extreme cases, we can send small numbers of rows to keep the DAG flowing.\r\n\r\n**Clients**: As noted above, row-based clients are the classic solution and are simple to write. We could easily support proper clients in Python, Go, Rust and anything else if we used a row-based format.\r\n\r\n**Conclusion**: We tend to focus on the \"value vector vs. Arrow\" discussion. I'm here to say that that is the wrong question: it buys into myths which have hurt Drill for years. The *correct* question is: what is the most efficient format for the use cases where Drill wants to excel? The above suggests that, rather than Arrow, a better solution is to adopt a row-based internal format.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004444084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004444610","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1004444610","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1004444610,"node_id":"IC_kwDOAFa5xc473pvC","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T00:24:14Z","updated_at":"2022-01-04T00:24:14Z","author_association":"CONTRIBUTOR","body":"One last note. Let's assume we wanted to adopt the row-based format (or, the myths being strong, we want to adopt Arrow.) How would we go about it?\r\n\r\nThe \"brute force\" approach is to rewrite all the operators. Must deal with low-level vector code, so we'd rewrite that with low-level row (or Arrow) code. Since we can't really test until all operators are converted, we'd have to do the entire conversion in one huge effort. Then, we get to debug. I hope this approach is setting off alarm bells: it is high cost and high risk. This is why Drill never seriously entertained the change.\r\n\r\nBut, there is another solution. The scan readers all used to work directly with vectors. (Parquet still does.) Because of the memory reasons explained above, we converted most of them to use EVF. As a result, we could swap vectors for row pages (or Arrow) by changing the low-level code. Readers would be blissfully ignorant of such changes because the higher-level abstractions would be unchanged.\r\n\r\nSo, a more sane way to approach a change of in-memory representations is to first convert the other operators to use an EVF-like approach. (EVF for writing new batches, a \"Result Set Loader\" for reading exiting batches.) Such a change can be done gradually, operator-by-operator, and is fully compatible with other, non-converted operators. No big bang.\r\n\r\nOnce everything is upgraded to EVF, then we can swap out the in-memory format. Maybe try Arrow. Try a row-based format. Run tests. Pick the winner.\r\n\r\nThis is *not* a trivial exercise, but it is doable over time, if we see value and can muster the resources.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004444610/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004533251","html_url":"https://github.com/apache/drill/pull/2419#issuecomment-1004533251","issue_url":"https://api.github.com/repos/apache/drill/issues/2419","id":1004533251,"node_id":"IC_kwDOAFa5xc473_YD","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T05:10:57Z","updated_at":"2022-01-04T05:10:57Z","author_association":"NONE","body":"This pull request **fixes 1 alert** when merging 661a16cc28339ba7e6fee47195301a77d030a583 into fa2cb0f4937c0d8e797a675d8d6c13c316e48d4c - [view on LGTM.com](https://lgtm.com/projects/g/apache/drill/rev/pr-5b136f7448b97826cf5f30a9248832ea4b7f2f3b)\n\n**fixed alerts:**\n\n* 1 for Result of multiplication cast to wider type","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004533251/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004701505","html_url":"https://github.com/apache/drill/pull/2412#issuecomment-1004701505","issue_url":"https://api.github.com/repos/apache/drill/issues/2412","id":1004701505,"node_id":"IC_kwDOAFa5xc474odB","user":{"login":"luocooong","id":50079619,"node_id":"MDQ6VXNlcjUwMDc5NjE5","avatar_url":"https://avatars.githubusercontent.com/u/50079619?v=4","gravatar_id":"","url":"https://api.github.com/users/luocooong","html_url":"https://github.com/luocooong","followers_url":"https://api.github.com/users/luocooong/followers","following_url":"https://api.github.com/users/luocooong/following{/other_user}","gists_url":"https://api.github.com/users/luocooong/gists{/gist_id}","starred_url":"https://api.github.com/users/luocooong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/luocooong/subscriptions","organizations_url":"https://api.github.com/users/luocooong/orgs","repos_url":"https://api.github.com/users/luocooong/repos","events_url":"https://api.github.com/users/luocooong/events{/privacy}","received_events_url":"https://api.github.com/users/luocooong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T10:42:57Z","updated_at":"2022-01-04T10:42:57Z","author_association":"MEMBER","body":"@paul-rogers Thanks for your knowledge base. For the vectorization and Arrow, I may need to keep pouring cold water for everyone. I think we need to figure out what we need here is, not just see it as powerful, then say it's really powerful.\r\n\r\n**SQL, NoSQL and NewSQL**\r\nIn my work, I went through these three databases architecture. Initially, we had performance bottlenecks, so choose the NoSQL database, eg : mongo, es and redis. After entering the production environment, most developers were not good at using the API(clients) designed for these databases. The key is that developers do not have the patience to learn the advanced syntax of each database(NoSQL). So we come back to use the SQL-style database : NewSQL. But, we found that NewSQL also has many bottlenecks(once you don't think need any optimization), especially once you comes to deploy a private cluster, you'll get complex operation and maintenance conditions and user complaints.\r\n\r\nHere, the lesson is that choosing the right one is better than choosing it blindly.\r\n\r\n**OLTP, OLAP and HTAP**\r\nThe row format is good for OLTP, because need to insert / update / delete and batch fetch entire rows as soon as possible. The columnar format is good for OLAP, because need to analyze large amounts of data. To keep low latency, need to filter data size from the disk and reduce network IO bottlenecks. What does HTAP look like? let's see that Internal implementation of TiDB :\r\n\r\n<img src=\"https://download.pingcap.com/images/docs/tiflash/tiflash-architecture.png\" width=\"50%\" height=\"50%\">\r\n\r\n```\r\nTiFlash provides the columnar storage, it conducts real-time replication of data in the TiKV nodes \r\nat a low cost that does not block writes in TiKV. Meanwhile, it provides the same read consistency \r\nas in TiKV and ensures that the latest data is read.\r\n```\r\n\r\nAs is well known, database vendors prefer to use row format to apply in OLTP and columnar format to support OLAP. However, they are well aware that there is no perfect data format. So that, I agree with Paul that the row format is better for Drill.\r\n\r\n**CPU Cache miss**\r\n- N-ary Storage Model\r\n<img src=\"https://user-images.githubusercontent.com/50079619/148023833-dcd92d2c-38ae-41fa-a80f-97496f50e647.png\" width=\"50%\" height=\"50%\">\r\n\r\n- Cache miss\r\n<img src=\"https://user-images.githubusercontent.com/50079619/148022521-f623b105-9057-4286-8ee4-3a2231b8bc68.png\" width=\"50%\" height=\"50%\">\r\n\r\nThe figure shows the processing of CPU caches, and we can see that a lot of invalid data is being filled into the cache, crowding out data that would otherwise have been reusable.\r\n\r\n- Decomposition Storage Mode\r\n<img src=\"https://user-images.githubusercontent.com/50079619/148023968-6f0db55b-63d1-448a-9165-2001a59aea01.png\" width=\"50%\" height=\"50%\">\r\n\r\nReduce cache-miss is one of the advantages of the columnar format, but note that Paul has explained that there will also be cache-miss(calculation based in SQL syntax) in the columnar format. So that, we cannot expect the maximum performance with Arrow.\r\n\r\n**Write amplification**\r\nAvoid becoming a database system, but Drill has several key points on the read-write path.\r\n- Drill support split vector value to disk.\r\n- Drill is an engine, isn't a database, unable to unify the initial source format(made in the database vendor).\r\n- Complex read-write path :\r\n  - (1) Read from a variety of data sources.\r\n  - (2) Write to vector value or split to disk.\r\n  - (3) Combined to row sets.\r\n  - (4) Client side.\r\n\r\nAs noted above, Impossible to avoid read and write multiple times in a query, and the write amplification will increase latency. So that, there's a lot to optimize, not only the columnar format.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004701505/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004748290","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004748290","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004748290,"node_id":"IC_kwDOAFa5xc474z4C","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T11:59:05Z","updated_at":"2022-01-04T11:59:05Z","author_association":"CONTRIBUTOR","body":"Charles Givre wrote:\r\n\r\nHello all, \r\nThere was a discussion in a recently closed PR [1] with a discussion between z0ltrix, James Turton and a few others about integrating Drill with Apache Arrow and wondering why it was never done.  I'd like to share my perspective as someone who has been around Drill for some time but also as someone who never worked for MapR or Dremio.  This just represents my understanding of events as an outsider, and I could be wrong about some or all of this.   Please forgive (or correct) any inaccuracies. \r\n\r\nWhen I first learned of Arrow and the idea of integrating Arrow with Drill, the thing that interested me the most was the ability to move data between platforms without having to serialize/deserialize the data.  From my understanding, MapR did some research and didn't find a significant performance advantage and hence didn't really pursue the integration.  The other side of it was that it would require a significant amount of work to refactor major parts of Drill. \r\n\r\nI don't know the internal politics, but this was one of the major points of diversion between Dremio and Drill.\r\n\r\nWith that said, there was a renewed discussion on the list [2] where Paul Rogers proposed what he described as a \"Crude but Effective\" approach to an Arrow integration.  \r\n\r\nThis is in the email link but here was a part of Paul's email:\r\n\r\n> Charles, just brainstorming a bit, I think the easiest way to start is to create a simple, stand-alone server that speaks Arrow to the client, and uses the native Drill client to speak to Drill. The native Drill client exposes Drill value vectors. One trick would be to convert Drill vectors to the Arrow format. I think that data vectors are the same format. Possibly offset vectors. I think Arrow went its own way with null-value (Drill's is-set) vectors. So, some conversion might be a no-op, others might need to rewrite a vector. Good thing, this is purely at the vector level, so would be easy to write. The next issue is the one that Parth has long pointed out: Drill and Arrow each have their own memory allocators. How could we share a data vector between the two? The simplest initial solution is just to copy the data from Drill to Arrow. Slow, but transparent to the client. A crude first-approximation of the development steps:\r\n>\r\n> A crude first-approximation of the development steps: \r\n> 1. Create the client shell server. \r\n> 2. Implement the Arrow client protocol. Need some way to accept a query and return batches of results. \r\n> 3. Forward the query to Drill using the native Drill client. \r\n> 4. As a first pass, copy vectors from Drill to Arrow and return them to the client. \r\n> 5. Then, solve that memory allocator problem to pass data without copying.\r\n\r\nOne point that Paul made was that these pieces are fairly discrete and could be implemented without refactoring major components of Drill.  Of course, this could be something for Drill 2.0.  At a minimum, could we take the conversation off of the PR and put it in the email list? \r\n\r\nLet's discuss... All ideas are welcome!\r\n\r\nBest,\r\n-- C\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004748290/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004748679","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004748679","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004748679,"node_id":"IC_kwDOAFa5xc474z-H","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T11:59:47Z","updated_at":"2022-01-04T11:59:47Z","author_association":"CONTRIBUTOR","body":"Ted Dunning wrote:\r\n\r\nAs a little bit of perspective from somebody who *was* at MapR at the time,\r\nhere are my recollections.\r\n\r\nArrow is pretty much the value vectors from Drill with some lessons learned\r\nand all dependencies removed so that Arrow can be consumed separately from\r\nDrill.\r\n\r\nThe spinout of the Dremio team didn't happen because of the lack of\r\nintegration with Arrow ... it was more the other way around ... because a\r\nsignificant chunk of the Drill team left to form Dremio, the driving force\r\nthat could have pushed for integration just wasn't around any more because\r\nthey were off doing Dremio and weren't working on Drill any more very much.\r\nThe motive for the spinout had mostly to do with the fact that Tomer and\r\nJacques recognized the opportunity to build a largely in-memory analytical\r\nengine based on zero serialization techniques and also recognized that this\r\ncould never be a priority for MapR because it was outside the center of\r\nmass there. Once the Dremio team was out, though, they had a huge need for\r\ninteroperability with systems like Spark and Cassandra, and they needed to\r\nnot impose all of Drill as a dependency if they wanted these other systems\r\nto take on Arrow.\r\n\r\nThis history doesn't really impact the merits or methods of integrating\r\npresent-day Drill with Arrow, but it is nice to get the story the right way\r\naround.\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004748679/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004748894","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004748894","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004748894,"node_id":"IC_kwDOAFa5xc4740Be","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:00:09Z","updated_at":"2022-01-04T12:00:09Z","author_association":"CONTRIBUTOR","body":"Charles Givre wrote:\r\n\r\nThanks Ted for the perspective!  I had always wished to be a \"fly on the wall\" in those conversations.  \r\n-- C\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004748894/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004749229","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004749229","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004749229,"node_id":"IC_kwDOAFa5xc4740Gt","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:00:41Z","updated_at":"2022-01-04T12:00:41Z","author_association":"CONTRIBUTOR","body":"Christian Pfarr wrote:\r\n\r\nHi Charles, Ted, and the others here,\r\n\r\nit is very interesting to hear the evolution of Drill, Dremio and Arrow in that context and thank you Charles for restarting that discussion.\r\n\r\nI think, and James mentioned this in the PR as well, that Drill could benefit from the continues progress, the Arrow project has made since its separation from Drill. And the arrow Community seems to be large, so i assume this goes on and on with improvements, new features, etc. but i have not enough experience in Drill internals to have an Idea in which mass of refactoring this would lead.\r\n\r\nIn addition to that, im not aware of the current roadmap of Arrow and if these would fit into Drills roadmap. Maybe Arrow would go into a different direction than Drill and what should we do, if Drill is bound to Arrow then?\r\n\r\nOn the other hand, Arrow could help Drill to a wider adoption with clients like pyarrow, arrow-flight, various other programming languages etc. and (im not sure about that) maybe its a performance benefit if Drill use Arrow to read Data from HDFS(example), useses Arrow to work with it during execution and gives the vectors directly to my Python(example) programm via arrow-flight so that i can Play around with Pandas, etc.\r\n\r\nJust some thoughts i have since i have used Dremio with pyarrow and Drill with odbc connections.\r\n\r\nRegards\r\nChristian","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004749229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004749364","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004749364","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004749364,"node_id":"IC_kwDOAFa5xc4740I0","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:00:53Z","updated_at":"2022-01-04T12:00:53Z","author_association":"CONTRIBUTOR","body":"Ted Dunning wrote:\r\n\r\nChristian,\r\n\r\nYour thoughts are very helpful. I find Arrow very nice (I use it in Agstack\r\nwith Julia and Python).\r\n\r\nI don't think anybody is saying that Drill wouldn't be well set with a\r\nswitch to Arrow or even just interfaces to Arrow. But it is a lot of work\r\nto make it all happen.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004749364/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004749499","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004749499","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004749499,"node_id":"IC_kwDOAFa5xc4740K7","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:01:07Z","updated_at":"2022-01-04T12:01:07Z","author_association":"CONTRIBUTOR","body":"Paul Rogers wrote:\r\n\r\nHi All,\r\n\r\nThanks Charles for dredging up that old discussion, your memory is better\r\nthan mine! And, thanks Ted for that summary of MapR history. As one of the\r\n\"replacement crew\" brought in after the original folks left, your\r\ndescription is consistent with my memory of events. Moreover, as we looked\r\nat what was needed to run Drill in production, an Arrow port was far down\r\non the list: it would not have solved actual customer problems.\r\n\r\nBefore we get too excited about Arrow, I think we should have a discussion\r\nabout what we want in an internal storage format. I added a long (sorry)\r\nset of comments in that PR that Charles mentioned that tries to debunk the\r\nmyths that have grown up around using a columnar format as the internal\r\nrepresentation for a query engine. (Columnar is great for storage.) The\r\nnote presents the many issues we've encountered over the years that have\r\ncaused us to layer ever more code on top of vectors to solve various\r\nproblems. It also highlights a distributed-systems problem which vectors\r\nmake far worse.\r\n\r\nArrow is meant to be portable, as Ted discussed, but it is still columnar,\r\nand this is the source of endless problems in an execution engine. So, we\r\nwant to ask, what is the optimal format for what Drill actually does? I'm\r\nnow of the opinion that Drill might actually better benefit  from a\r\nrow-based format, similar to what Impala uses. The notes even paint a path\r\nforward.\r\n\r\nTed's description of the goal for Demio suggests that Arrow might be the\r\nright answer for that market. Drill, however, tends to be used to query\r\nmyriad data sources at scale and as a \"query integrator\" across systems.\r\nThis use case has different needs, which may be better served with a\r\nrow-based format.\r\n\r\nThe upshot is that \"value vectors vs. Arrow\" is the wrong place to start\r\nthe discussion. The right place is \"what does our many years of experience\r\nwith Drill suggest is the most efficient format for how Drill is actually\r\nused?\"\r\n\r\nNote that Drill could have an Arrow-based API independent of the internal\r\nformat. The quote from Charles explains how we could do that.\r\n\r\nThanks,\r\n\r\n- Paul\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004749499/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004750707","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004750707","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004750707,"node_id":"IC_kwDOAFa5xc4740dz","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:03:10Z","updated_at":"2022-01-04T12:03:10Z","author_association":"CONTRIBUTOR","body":"Paul Rogers wrote:\r\n\r\nAll: so I've kicked the hornet's nest with the mention of value vectors and Arrow. I'm going to put on my flame-proof suit and debunk some myths.\r\n\r\nThe columnar format is great for storage, for all the usual reasons. This is why Parquet uses it, Druid uses it for segment files, and various DBs use it for storage. The question we want to ask is, do those benefits apply to the format within the Drill execution engine? I'm here to suggest that columnar has no advantage, and many disadvantages, when used as the *internal* format of an execution engine. \"Thems is fighting words\", so let's bring it on.\r\n\r\nI've had the pleasure of working with several query engines: Drill (columnar) and Impala (row-based) are two well-known examples. This has given me a unique opportunity to see if all the marketing claims for columnar (which still appear in the videos on Drill's website) actually hold up in practice. Spoiler: they don't.\r\n\r\nThis is a PR about optimization. A good rule in optimization is to start with the biggest issues, then work toward the details. So, rather than tinker with the details of vector execution, let's look at the fundamental issues. I hope this will help us avoid confusing Drill's (and Arrow's) marketing with reality.\r\n\r\n**Myth: Vectorized execution**: The biggest myth is around vectorized execution. Of course, a minor myth is that Drill uses such execution (it doesn't.) The bigger myth is that, if we invested enough, it could.\r\n\r\nVectorized execution is great when we have a simple operation we apply to a large amount of data. Think the dot-product operation for neural networks, or data compression, or image transforms, or graphics. In all cases, we apply a simple operation (rescale, say) to a large amount of homogeneous data (the pixels in an image.)\r\n\r\nSo, the question is, does typical, real-world SQL fit this pattern? I've now seen enough crufty, complex, messy real-world queries to suggest that, no, SQL is not a good candidate for vectorization. `SELECT` and `WHERE` clauses embed business logic, and that logic is based on messy human rules, not crisp, clean mathematics. The resulting SQL tends to have conditionals (`WHEN` or `IF()`, etc.), lots of function calls (all those cool UDFs which @cgivre has written), and so on. Plus, as noted above, SQL deals with NULL values, which must short-circuit entire execution paths.\r\n\r\nHence, even if we could vectorize simple operations, we'd find that, in most queries, we could not actually use that code.\r\n\r\n**Myth: Vectors are CPU Cache Friendly**: The second big myth is that vectors are somehow more \"friendly\" to the CPU L1 cache than a row format. The idea is that one can load a vector into the L1 cache, then zip through many values in one go. This myth is related to the above one.\r\n\r\nFirst, SQL expressions are not based on columns, they are based on rows. Each calculation tends to involve multiple columns: `net_receipts = sales + taxes - returns`. Here each calculation touches four vectors, so we need all four to be in the CPU cache to benefit.\r\n\r\nSecond, SQL is row based: that above calculation is just one of perhaps many that occur on each row. In the ideal case, the calculations for independent groups: `SELECT a + b AS x, c - d + e AS y, f / g AS z, ...`. In this case, we could load vectors ``a, `b`, `x` into the L1 cache, do the calcs, then load `c`, `d`, `e` and y in the cache and so on. Of course, Drill doesn't work this way (it does all the calculations for a single row before moving to the next), but it could, and it would have to to benefit from vectorization.\r\n\r\nA more typical case is that the same column is used in multiple expressions: `SELECT a + b AS x, a / c AS y, (a - d) * e AS z, ...` In this case, we must load the `a` vector into the L1 cache multiple times. (Or, more properly, its values would continually be bumped out of the cache, then reloaded.)\r\n\r\n**Myth: Bigger Vectors are Better**: Drill went though a phase when everyone bought into the \"L1 cache\" myth. To get better performance everyone wanted ever larger vectors. In the code, you'll see that we started with 1K-row batches, then it grew to 4K, then other code would create 64K row batches. It got so bad we'd allocate vectors larger than 16MB, which caused memory fragmentation and OOM errors. (This is the original reason for what evolved to be \"EVF\": to control vector sizes to prevent memory fragmentation - very basic DB stuff.)\r\n\r\nRemember, the CPU L1 cache is only about 256K in size. A 4MB vector is already 16x the L1 cache size. Combine that with real-world expressions and we end up with a \"working set\" of 10s of MB in size: 20x or more the L1 cache size. The result is lots of cache misses. (This stuff is really hard to measure, would be great for someone to do the experiments to show this happening in practice.)\r\n\r\n**Myth: Vectors are Efficient**: A related, minor myth is that writing to vectors is more efficient than writing to rows. This is not true in general. In Drill, it is especially false. Originally, vectors were allocated at some small initial size (256K? Something like that.) Vectors grow as we add data. (That's one of the things that make working with them difficult.) Fill the 256K vector? We double it to 512K and copy across the data. We do again at 1MB, 2MB, 4MB, ... In the end, to grow to 4MB, copy about 4MB of data. That is 4MB of reads, 4MB of writes, in addition to the 4MB of writes needed to create the data.\r\n\r\nLater, a bunch of ad-hoc \"batch sizing\" code was added to try to guess a good initial size for vectors. Not too hard or fixed-width vectors (`INT`, say), but rather tricky for variable-width vectors (`VARCHAR`).\r\n\r\nRemember that each vector is sized and grows independently. So, to create a batch, we have to track the size of every vector, grow those that need growing, but not over-allocate all the vectors because the space is not fungible: vector `a` can't \"borrow\" unused space from vector `b`.\r\n\r\nThe point is, Drill needs a large amount of complex, add-on code just to work around the fact that every vector will grow, and copy data, if not sized correctly, and, in general, we don't know ahead of time what the size should be. The result is inefficiency.\r\n\r\n**Myth: Vectors Allow Efficient Parquet Integration**: The idea here is that Parquet is columnar, vectors are columnar, so we just read Parquet directly into vectors. The reality is that Parquet is a highly-encoded format that requires a large amount of complex code to decode. Drill does the decoding value-by-value, there is no \"direct copy\", nor could there be. Parquet works with Drill's value vectors, Arrow vectors, or Impala rows equally well: in each case, the Parquet data has to be decoded value-by-value, then written to the target format.\r\n\r\n**Single Data Format for In-Memory and Over-the-Wire**: One of Drills' claims to fame is that value vectors (and, later Arrow vectors) use the same layout in memory as over the wire, leading to efficient exchanges via RPC. This myth is true, as far as it goes. But, if you look at the code, the truth is much more complex. On the sender side, vectors are independent buffers (as explained above.) On the receiver side, the whole message comes in as one big buffer. Special code slices up that buffer to recover vectors. A vast amount of complex code is needed to handle the accounting. (Thanks to Chris, a one-time Drill contributor who wrote all that code well enough that it \"just works\". It would be hell to fix otherwise.)\r\n\r\n**Complex Client Code**: All DB clients work a row at a time. Whether it is JDBC, Sql Alchemy, your home grown code, or whatever, a client consumes data a row at a time. All DB APIs (except Drill) are row-based. The client asks for the next row (or, more typically, the next *n* rows), then reads them one-by-one. Super simple and has worked for decades.\r\n\r\nWith Drill, a client has to include all of Drill's complex vector logic so it can read a batch of a 1K (or 4K or more) rows split across vectors. The client then has to walk the vectors to assemble the row that the client really wants. The result is that Java clients (such as JDBC) pull in a vast amount of Drill code. The C++ ODBC client was a nightmare: pretty much only one person ever could make it work (thanks, Parth!).\r\n\r\nThe complexity of this simple client operation has led clients to use the REST API instead. But, Drill is session-based (needed to set Drill's zillions of session options), but REST is not. Drill works for \"big data\", but REST delivers the results in one big blob. The result is that that the vector-based client is so hard to use that folks want to use the REST client, which doesn't work in the general case either. We've shot ourselves in the foot. Yet, every other DB on the planet has a simple row-based client API.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004750707/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004751035","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004751035","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004751035,"node_id":"IC_kwDOAFa5xc4740i7","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:03:42Z","updated_at":"2022-01-04T12:03:42Z","author_association":"CONTRIBUTOR","body":"Paul Rogers wrote:\r\n\r\nThe last topic is so complex that no myth has grown up around it, and the issue is not at all well understood. Vectors (and batches) are hell for distributed system performance. This gets pretty techie, so hang on.\r\n\r\n**Vectors are Hell for Exchanges**:  This comes from a real-world case in which a large cluster worked no faster than a single thread of execution. We've discussed how Drill wants to create large batches (per the myth) to benefit from vectorization (which we don't have) and to optimize L1 cache usage (which, as we've seen, we don't actually do.) Let's assume \"small\" batches of 1K rows.\r\n\r\nDrill also wants the single format for in-memory and over-the-wire usage. This means we want to transfer 1K record batches so that the receiver gets batches of the optimal in-memory size.\r\n\r\nNow, what happens in a distributed system? Assume you have 100 fragments running. (Maybe 10 machines with 10 cores each.) Let's think about one fragment, call it \"f0.0\". Let's assume f.0.0 runs a scan and a network sender. The scan builds up its 1K batches, because those are \"efficient\" (according to the myths we've discussed.)\r\n\r\nWhat does f0.0's network sender do? Let's assume the target is a hash join. So, the sender hashes the keys into 100 buckets. Now, the sender follows Drill's rule: send 1K record batches. Since there are 100 targets, the sender has to create 100 buffered batches, fill them each to 1K records, then send them. To visualize:\r\n\r\n`f0.0 (reader --> sender) - - > f1.x (receiver --> hash-join --> ...) ...`\r\n\r\nThere are 100 f0 fragments: f0.0, ... f0.99, we're looking just at one of them: f0.0. The f0 \"slice\" sends to the \"f1\" slice that consists of 100 additional fragments: f1.0, ... f1.99.\r\n\r\nSo, what happens in our sender? Assuming even hash distribution, we have to fill all our 100 outgoing batches before we can send them. This means we have to read 100 * 1K = 100K input records before we send the first outgoing batch. The result is a huge memory usage (those 100 batches), plus all the vector resizes and copies we discussed (as we grow those batches.)\r\n\r\nIf that we not bad enough, this occurs in all our other 99 f0 fragments: we've got 100 * 100 = 10K buffered batches waiting to send. Yikes!\r\n\r\nNow, what happens in f1? It is sitting around waiting for data. No f0 will send until if fills its first outgoing batch for that receiver. If we assume an even distribution of data, then the outgoing batches fill at about the same rate. None can be sent until one of them reaches the target, at which point most of them are near-full. Once the first hits the 1K mark, off it goes to f1 who can filly start processing. This is bad because Drill claims to be highly distributed, but we just described is a serial way of working.\r\n\r\nBut, it gets worse! Now, assume we're deeper in the DAG, at a sort:\r\n\r\n`f4: (receiver --> sort --> sender) - - > f4: (receiver --> merge --> ...)`\r\n\r\nThe sort sorts its slice of records, and sends it to the merge fragment which merges all the partial sorts. Classic distributed systems stuff. Again, the f4 (sort) sender waits to fill its outgoing batches, then it sends. The merge can't start until it sees batches from all 100 inputs. So, it proceeds at the rate of the slowest sort.\r\n\r\nNow what happens? The merge uses up one of the 100 input batches, and needs another before it can proceed. But, here things get really nasty.\r\n\r\nOn the f4 side, f4.0, say, sent the first batch to get full. It then sent the others as they filled. Meanwhile, the first batch started refilling and eventually will need to be sent again. Since the merges can't read a new batch until its used up the previous one, it blocks the f4 sender. As a result, f4 can't send to *any* other merge.\r\n\r\nThe downstream fragment throttles the upstream, and visa versa. Not quite deadlock, but the entire system becomes serialized: the sort can't ship batches until the slowest merge can receive them. The merge can't make progress until the slowest sort provides the next batch. Every fragment depends on every other. Disaster!\r\n\r\nAgain, we spent hours trying to figure this out on a customer cluster. We could see the effect, but we could not get in to work out the details. Would be great for someone to do the experiments.\r\n\r\n**Summary**: The above has debunked the major myths around columnar storage within a query engine. Note that **none** of the above changes if we use Arrow. We'd do a huge amount of work to switch, and be stuck with the same fundamental problems.\r\n\r\nHence, we have to think deeply about this issue, not just by the snake oil that \"vectors are good for an execution engine.\" Good old solid engineering and experimentation will tell us what's what.\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004751035/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004751317","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004751317","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004751317,"node_id":"IC_kwDOAFa5xc4740nV","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:04:10Z","updated_at":"2022-01-04T12:04:10Z","author_association":"CONTRIBUTOR","body":"Paul Rogers wrote:\r\n\r\nOK, so the above raise the issues we have to consider when thinking about vectors (Drill's or Arrow's.) What is the alternative?\r\n\r\nHere, I think Impala got it right. Impala uses Parquet (columnar) for *storage*, but rows for *internal* processing. Impala is like an Italian sports car of old: spends lots of time in the shop, but when it works, it is very fast.\r\n\r\nOne of the reasons that Impala is fast is because of the row format.  First, let's describe what \"row-based\" means. It means that columns appear together, as in a C `struct`, with rows packed one after another as in an array of `structs`. This means that the data for a given row is contiguous. There is only one buffer to size. Classic DB stuff that seems unusual only because we're all used to Drill's vector format.\r\n\r\nLet's look at the same issues above, but from a row-based perspective.\r\n\r\n**Expression Execution**: With a row-based model, the CPU can easily load a single row into the L1 cache. All our crufty-real-world expression logic works on that single row. So, no matter how messy the expressions, from the CPU's perspective, all the data is in that single row, which fits nicely into the cache.\r\n\r\nRows can be small (a few dozen bytes) or large (maybe a 10s of K for long VARCHARs). In either case, they are far smaller than the L1 cache. The row is loaded. Once we move onto the next row, we'll never visit the previous one, so we don't care if the CPU flushes it from the cache.\r\n\r\n**Memory Allocation**: Rows reside in buffers (AKA \"pages\"), typically of a fixed size. A reader \"pours\" data into a row. When the page is full, that last record is copied to the next page. Only that one row is copied, not all the existing data. So, we eliminate the 1X copy + 1X load problem in Drill. Since there is only one page to allocate, memory is simpler. Since pages are of fixed size, memory management is simpler as well.\r\n\r\n**Exchanges**: Network exchanges are row-based. Rows are self-contained. A network sender can send single rows, if that is efficient, or batches of rows. In our 100-senders-100-receiver example, we could send rows as soon as they are available. The receiver starts working as soon as the first row is available. There is no near-deadlock from excessive buffering.\r\n\r\nYes, we would want to buffer rows (into pages) for efficiency. But, in extreme cases, we can send small numbers of rows to keep the DAG flowing.\r\n\r\n**Clients**: As noted above, row-based clients are the classic solution and are simple to write. We could easily support proper clients in Python, Go, Rust and anything else if we used a row-based format.\r\n\r\n**Conclusion**: We tend to focus on the \"value vector vs. Arrow\" discussion. I'm here to say that that is the wrong question: it buys into myths which have hurt Drill for years. The *correct* question is: what is the most efficient format for the use cases where Drill wants to excel? The above suggests that, rather than Arrow, a better solution is to adopt a row-based internal format.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004751317/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004751568","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004751568","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004751568,"node_id":"IC_kwDOAFa5xc4740rQ","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:04:35Z","updated_at":"2022-01-04T12:04:35Z","author_association":"CONTRIBUTOR","body":"Paul Rogers wrote:\r\n\r\nOne last note. Let's assume we wanted to adopt the row-based format (or, the myths being strong, we want to adopt Arrow.) How would we go about it?\r\n\r\nThe \"brute force\" approach is to rewrite all the operators. Must deal with low-level vector code, so we'd rewrite that with low-level row (or Arrow) code. Since we can't really test until all operators are converted, we'd have to do the entire conversion in one huge effort. Then, we get to debug. I hope this approach is setting off alarm bells: it is high cost and high risk. This is why Drill never seriously entertained the change.\r\n\r\nBut, there is another solution. The scan readers all used to work directly with vectors. (Parquet still does.) Because of the memory reasons explained above, we converted most of them to use EVF. As a result, we could swap vectors for row pages (or Arrow) by changing the low-level code. Readers would be blissfully ignorant of such changes because the higher-level abstractions would be unchanged.\r\n\r\nSo, a more sane way to approach a change of in-memory representations is to first convert the other operators to use an EVF-like approach. (EVF for writing new batches, a \"Result Set Loader\" for reading exiting batches.) Such a change can be done gradually, operator-by-operator, and is fully compatible with other, non-converted operators. No big bang.\r\n\r\nOnce everything is upgraded to EVF, then we can swap out the in-memory format. Maybe try Arrow. Try a row-based format. Run tests. Pick the winner.\r\n\r\nThis is *not* a trivial exercise, but it is doable over time, if we see value and can muster the resources.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004751568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004751937","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1004751937","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1004751937,"node_id":"IC_kwDOAFa5xc4740xB","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T12:05:10Z","updated_at":"2022-01-04T12:05:10Z","author_association":"CONTRIBUTOR","body":"Cong Luo wrote:\r\n\r\n@paul-rogers Thanks for your knowledge base. For the vectorization and Arrow, I may need to keep pouring cold water for everyone. I think we need to figure out what we need here is, not just see it as powerful, then say it's really powerful.\r\n\r\n**SQL, NoSQL and NewSQL**\r\nIn my work, I went through these three databases architecture. Initially, we had performance bottlenecks, so choose the NoSQL database, eg : mongo, es and redis. After entering the production environment, most developers were not good at using the API(clients) designed for these databases. The key is that developers do not have the patience to learn the advanced syntax of each database(NoSQL). So we come back to use the SQL-style database : NewSQL. But, we found that NewSQL also has many bottlenecks(once you don't think need any optimization), especially once you comes to deploy a private cluster, you'll get complex operation and maintenance conditions and user complaints.\r\n\r\nHere, the lesson is that choosing the right one is better than choosing it blindly.\r\n\r\n**OLTP, OLAP and HTAP**\r\nThe row format is good for OLTP, because need to insert / update / delete and batch fetch entire rows as soon as possible. The columnar format is good for OLAP, because need to analyze large amounts of data. To keep low latency, need to filter data size from the disk and reduce network IO bottlenecks. What does HTAP look like? let's see that Internal implementation of TiDB :\r\n\r\n<img src=\"https://download.pingcap.com/images/docs/tiflash/tiflash-architecture.png\" width=\"50%\" height=\"50%\">\r\n\r\n```\r\nTiFlash provides the columnar storage, it conducts real-time replication of data in the TiKV nodes \r\nat a low cost that does not block writes in TiKV. Meanwhile, it provides the same read consistency \r\nas in TiKV and ensures that the latest data is read.\r\n```\r\n\r\nAs is well known, database vendors prefer to use row format to apply in OLTP and columnar format to support OLAP. However, they are well aware that there is no perfect data format. So that, I agree with Paul that the row format is better for Drill.\r\n\r\n**CPU Cache miss**\r\n- N-ary Storage Model\r\n<img src=\"https://user-images.githubusercontent.com/50079619/148023833-dcd92d2c-38ae-41fa-a80f-97496f50e647.png\" width=\"50%\" height=\"50%\">\r\n\r\n- Cache miss\r\n<img src=\"https://user-images.githubusercontent.com/50079619/148022521-f623b105-9057-4286-8ee4-3a2231b8bc68.png\" width=\"50%\" height=\"50%\">\r\n\r\nThe figure shows the processing of CPU caches, and we can see that a lot of invalid data is being filled into the cache, crowding out data that would otherwise have been reusable.\r\n\r\n- Decomposition Storage Mode\r\n<img src=\"https://user-images.githubusercontent.com/50079619/148023968-6f0db55b-63d1-448a-9165-2001a59aea01.png\" width=\"50%\" height=\"50%\">\r\n\r\nReduce cache-miss is one of the advantages of the columnar format, but note that Paul has explained that there will also be cache-miss(calculation based in SQL syntax) in the columnar format. So that, we cannot expect the maximum performance with Arrow.\r\n\r\n**Write amplification**\r\nAvoid becoming a database system, but Drill has several key points on the read-write path.\r\n- Drill support split vector value to disk.\r\n- Drill is an engine, isn't a database, unable to unify the initial source format(made in the database vendor).\r\n- Complex read-write path :\r\n  - (1) Read from a variety of data sources.\r\n  - (2) Write to vector value or split to disk.\r\n  - (3) Combined to row sets.\r\n  - (4) Client side.\r\n\r\nAs noted above, Impossible to avoid read and write multiple times in a query, and the write amplification will increase latency. So that, there's a lot to optimize, not only the columnar format.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004751937/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004908325","html_url":"https://github.com/apache/drill/pull/2388#issuecomment-1004908325","issue_url":"https://api.github.com/repos/apache/drill/issues/2388","id":1004908325,"node_id":"IC_kwDOAFa5xc475a8l","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2022-01-04T15:30:16Z","updated_at":"2022-01-04T15:30:16Z","author_association":"NONE","body":"This pull request **introduces 5 alerts** when merging ce046faa50fa78857640ca7546336e733cf9d965 into fa2cb0f4937c0d8e797a675d8d6c13c316e48d4c - [view on LGTM.com](https://lgtm.com/projects/g/apache/drill/rev/pr-de882f8198d8945d6a7c877a69fe541f9266856f)\n\n**new alerts:**\n\n* 5 for Spurious Javadoc @param tags","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1004908325/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005316421","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1005316421","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1005316421,"node_id":"IC_kwDOAFa5xc476-lF","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-05T01:59:12Z","updated_at":"2022-01-05T01:59:12Z","author_association":"CONTRIBUTOR","body":"@jnturton, thanks for converting the discussion to a ticket. Thanks especially for dealing with the formatting translation!\r\n \r\n@luocooong, thanks for the very impressive analysis, and the wonderful images!\r\n\r\nAs noted earlier, columnar is huge win for storage. It is less so for tools that work a row-at-a-time such as Drill or most data pipelines. It is easy to see why. A Parquet file may have 100 or more columns. Your query uses 10 of them, so that's all we read. A huge win. But, inside Drill, we'll mess with all 10 of your columns. You are probably doing filtering, calculations, aggregation, grouping, etc. There is a _reason_ you selected those columns: you want to work with them. And, Drill will do so a row at a time.\r\n\r\nHence, the use pattern _within Drill_ seems to favor a row-based layout as we get few of the advantages of a columnar format, but we get all of the cost and complexity.\r\n\r\nMost SQL operators work a row at a time. So, even if the SQL is messy, and we have touch the same column multiple times, the row itself can fit into the CPU cache and those redundant accesses are trivially fast. It would be very hard to do a similar optimization for columns.\r\n\r\nYour OLAP analysis is correct, but mostly applies to old-school Mondrian-style cubes on top of relational tables where the aggregation is clearly defined. Most of the queries I've seen for Drill (or Impala or other tools) are pretty ugly, with lots of business logic. If the user writes the SQL, they won't limit themselves to a small set of standard aggregations, they'll do whatever they need to do to get the job done. That, in fact, is why SQL endures decade after decade: as awful as it is, you can get your task done if you try hard enough.\r\n\r\nAs a result, although we could vectorize simple cube-rollup calculations, in practice, we don't get many of those. So, we need to optimize for what people actually do, not the ideal cases.\r\n\r\nLet's also remember this: if all you need are simple roll-up calculations, and you run those queries again and again (so they are worth optimizing), you have a better choice: have your data pipeline write pre-aggregated \"cubes\". Want to see sales-by-product-by-day over the last year on billions of transactions? Just build the roll-up cube. Its what Druid does and it works well. With a Spark pipeline, you can create a detail table and a roll-up table, both in Parquet, and queried by Drill. So, if we look at the broader context, we see that, the one place we'd benefit from vectorized operations, might not even happen within Drill; it would be done in Spark in the data pipeline.\r\n\r\nThat said, we should also remember operators that might benefit from columnar: computing a hash key or sort. In this case, we could have a hybrid approach: a \"row group\" with just the required fields (the keys), and a separate \"row group\" with the \"payload\" of other fields. Some DBs use a similar approach (for storage.) With a bit of pipelining, the preceding operator could produce its output rows in the format optimal for the next operator.\r\n\r\nIt would be great if we could mock up some simple test cases and try out the ideas. Doing so is not simple at present, but would be possible once we did the intermediate raw-vector-to-EVF conversion. Our experience tells us what we might expect to find, but we need to do the experiments to tell us what's actually true.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005316421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005326255","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1005326255","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1005326255,"node_id":"IC_kwDOAFa5xc477A-v","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-05T02:22:27Z","updated_at":"2022-01-05T02:22:27Z","author_association":"CONTRIBUTOR","body":"@luocooong, your picture about page layout and cache performance is helpful: it shows how some DBs lay out pages. (I did something similar way back when I wrote a DB.) However, for an in-memory format, we'd do the layout differently. There would be no header (that's a separate object). We'd ensure that all data within each row is self-contained: no pointers from the footer back into rows.\r\n\r\nImpala uses a format which, I believe, it borrowed from earlier DBs. Here is a variation, listing the various fields, in order:\r\n\r\n* Row size.\r\n* Fixed-width columns (INT, LONG, etc.) These have a fixed offset from the row start.\r\n* Offset and length of each variable-width field. These also have a fixed offset.\r\n* Variable portion with the variable-width data. (VARCHAR, etc.)\r\n\r\nNote that it doesn't matter the order in which the variable fields are written: the offset/length pairs do the right thing. Just as Drill has a `BatchSchema` to say what vectors make up a batch, each block of rows would have a \"row schema\" to map from the logical schema (i.e. names and types) to offsets. Each fixed-width fetch is thus an addition (base + offset), plus a read/write. This is about the same as for vectors. (Vector address + row * size, then read.) The row data can, of course, reside in direct memory as for vectors.\r\n\r\nThe result is that the entire row fits into the cache as a unit with no overhead cruft. In practice, each operator has an incoming and outgoing row (filter, project, probe phase of a join, hash sender, ...). Still, the rows should be small enough that both incoming and outgoing rows fit in the cache.\r\n\r\nOf course, the JVM will pull in byte code blocks, local variables, etc. So, the code has to also be designed carefully to avoid cache thrashing. That's what Drill's aggressive inlining and byte code fixups are supposed to do. Then, the number of threads has to be managed so we don't get swapped out just after we get our cache nicely set up.\r\n\r\nThis stuff is HARD. Testing is essential. A somewhat-dated, but still helpful, source is [Martin Thompson's Mechanical Sympathy Blog](https://mechanical-sympathy.blogspot.com/).","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005326255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005369347","html_url":"https://github.com/apache/drill/pull/2419#issuecomment-1005369347","issue_url":"https://api.github.com/repos/apache/drill/issues/2419","id":1005369347,"node_id":"IC_kwDOAFa5xc477LgD","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2022-01-05T04:17:23Z","updated_at":"2022-01-05T04:17:23Z","author_association":"NONE","body":"This pull request **fixes 1 alert** when merging 8bb05e22640e5eec2f2496e665402866a3fadb6b into fa2cb0f4937c0d8e797a675d8d6c13c316e48d4c - [view on LGTM.com](https://lgtm.com/projects/g/apache/drill/rev/pr-a11a55cb991c8f3078c0bb9b9c83d012fbd469ea)\n\n**fixed alerts:**\n\n* 1 for Result of multiplication cast to wider type","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005369347/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005407994","html_url":"https://github.com/apache/drill/pull/2422#issuecomment-1005407994","issue_url":"https://api.github.com/repos/apache/drill/issues/2422","id":1005407994,"node_id":"IC_kwDOAFa5xc477U76","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2022-01-05T06:06:57Z","updated_at":"2022-01-06T07:56:52Z","author_association":"NONE","body":"This pull request **introduces 1 alert** when merging 5040d117a2515677df6d4cf2c7c174edb8994a89 into fa2cb0f4937c0d8e797a675d8d6c13c316e48d4c - [view on LGTM.com](https://lgtm.com/projects/g/apache/drill/rev/pr-18b01353d3c800d75945d94dc316664ad25dc4f4)\n\n**new alerts:**\n\n* 1 for Potential database resource leak","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005407994/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005646342","html_url":"https://github.com/apache/drill/pull/2388#issuecomment-1005646342","issue_url":"https://api.github.com/repos/apache/drill/issues/2388","id":1005646342,"node_id":"IC_kwDOAFa5xc478PIG","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-05T12:31:30Z","updated_at":"2022-01-05T12:31:30Z","author_association":"CONTRIBUTOR","body":"@vvysotskyi one specific question that arises in this PR is that of closing schema objects.  Before this PR, `SchemaTreeProvider#close()` would recursively access the entire schema tree in order to call close on each schema object.  This resulted in a lookup of every storage plugin and then a call to `registerSchemas()` on it, even if the plugin did not participate in the query being run.  To avoid this I've made `SchemaTreeProvider#close()` a no-op but I'm not sure what the consequences of this might be.  IIRC the one implementation of `SchemaPlus#close()` I did check in Calcite was itself a no-op, making this change harmless.  But there could be other implementations of `SchemaPlus#close()`...","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005646342/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005676173","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1005676173","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1005676173,"node_id":"IC_kwDOAFa5xc478WaN","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-05T13:15:27Z","updated_at":"2022-01-05T14:01:42Z","author_association":"CONTRIBUTOR","body":"A few, informational notes from me.  First, I wondered how it could be that benchmark-busting Impala manages to load SIMD registers from a row oriented memory layout then found the following [in here](http://cidrdb.org/cidr2015/Papers/CIDR15_Paper28.pdf).\r\n\r\n> We are also considering switching to a columnar canonical in-memory format for data that needs to be materialized during query processing, in order to take advantage of SIMD instructions \r\n\r\nI wonder whether they switched?  I suppose I need only go over to apache/impala to find out.  EDIT: [I don't think they did](https://git-wip-us.apache.org/repos/asf?p=impala.git;a=blob;f=be/src/runtime/row-batch.cc;h=aed2e116781718e715e5ce01db996412eef0aa9f;hb=HEAD).  I can't speak for anyone else but some of my important Drill workloads actually have been bulk floating point arithmetic (statistics, probabilities) where you do get a major boost from SIMD.  That said, I probably did even more work doing filtering, sorting and aggregating the same data in Drill before it was ready for arithmetic.\r\n\r\nSecond, if you did want to do SIMD properly in Java (i.e. not praying for auto-vectorisation) then are you looking at JEP 338 and do [you have some vector types from JDK dictated to you](https://openjdk.java.net/jeps/338)?  Would these vectors work with our direct memory and Netty-based code?\r\n\r\nThird, would our direct memory code remain unchanged if we replace ValueVectors or would we want to start accessing direct memory through [JEP 393](https://openjdk.java.net/jeps/393).  Or... are [the high tech garbage collectors in recent JVMs](https://blogs.oracle.com/javamagazine/post/understanding-the-jdks-new-superfast-garbage-collectors) so good that we would laugh off the burden direct memory and its management entirely?\r\n\r\nRe. SIMD, I know there are positions like \"Forget SIMD\" that have been stated, but I wanted to note this stuff down for us anyway.\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1005676173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006287333","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1006287333","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1006287333,"node_id":"IC_kwDOAFa5xc47-rnl","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-06T05:03:46Z","updated_at":"2022-01-06T05:05:13Z","author_association":"CONTRIBUTOR","body":"Okay, @paul-rogers I've had a few swigs of the kool aid by now and I think I'm ready to forget about in-memory column orientation and SIMD in return for the benefits of row orientation.  For workflows that do involve bulk arithmetic I can imagine good interop taking care of that stage:\r\n\r\n1. Do some efficient parsing, filtering, sorting, aggregating in Drill\r\n2. Smoothly switch over to Pandas/Numpy (perhaps an Arrow exporter?) or Julia or ...\r\n3. Do bulk arithmetic using SIMD or even a GPU\r\n4. Store results or smoothly switch back to Drill\r\n\r\nI've used this workflow myself where the data interchange format was Parquet and the transport medium was the DFS (so perhaps a bit more \"clunky\" than \"smooth\", with lots of serialisation and IO incurred).\r\n\r\nGoing further, if the decoupling of Drill from its in-memory format mentioned higher up is a real possibility then can we even imagine something like this, entirely in Drill?\r\n\r\n```\r\nalter session set exec.memory_format = 'drill'; -- the default, row-oriented format\r\n\r\ncreate table as select ... -- do some efficient parsing, filtering, sorting, aggregating in Drill\r\ncreate table as select ... -- do some efficient parsing, filtering, sorting, aggregating in Drill\r\n\r\nalter session set exec.memory_format = 'arrow'; -- switch to Arrow format\r\n\r\ncreate table as select ... do some bulk arithmetic using SIMD\r\ncreate table as select ... do some bulk arithmetic using SIMD\r\n```\r\n\r\nTo my mind Drill 2.0 would not try to ship support for the latter, Arrow format, merely make design decisions which leave that door open for a motivated developer...","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006287333/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006572837","html_url":"https://github.com/apache/drill/pull/1086#issuecomment-1006572837","issue_url":"https://api.github.com/repos/apache/drill/issues/1086","id":1006572837,"node_id":"IC_kwDOAFa5xc47_xUl","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-06T13:02:51Z","updated_at":"2022-01-06T13:03:34Z","author_association":"CONTRIBUTOR","body":"I propose that we return to this after Drill 2.0 and the probable ValueVector overhaul.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006572837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006606787","html_url":"https://github.com/apache/drill/pull/2308#issuecomment-1006606787","issue_url":"https://api.github.com/repos/apache/drill/issues/2308","id":1006606787,"node_id":"IC_kwDOAFa5xc47_5nD","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-06T13:50:35Z","updated_at":"2022-01-06T13:50:35Z","author_association":"CONTRIBUTOR","body":"Hi @cgivre, did you track down the test failure?  Want any help here?","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006606787/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006654863","html_url":"https://github.com/apache/drill/pull/2308#issuecomment-1006654863","issue_url":"https://api.github.com/repos/apache/drill/issues/2308","id":1006654863,"node_id":"IC_kwDOAFa5xc48AFWP","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-06T14:56:09Z","updated_at":"2022-01-06T14:56:09Z","author_association":"CONTRIBUTOR","body":"@jnturton I thought this would be a simple update, then the test broke. :-(   I probably won't have time to dig into this any time soon, so if you want to take a look, please feel free. ","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006654863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006659507","html_url":"https://github.com/apache/drill/pull/1962#issuecomment-1006659507","issue_url":"https://api.github.com/repos/apache/drill/issues/1962","id":1006659507,"node_id":"IC_kwDOAFa5xc48AGez","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-06T15:02:10Z","updated_at":"2022-01-06T15:02:10Z","author_association":"CONTRIBUTOR","body":"I'm putting a note here, that we should not merge this as is. [ Drill-8085](https://github.com/apache/drill/pull/2419) by @paul-rogers introduces the V2 EVF.  It doesn't really make sense to merge this using the V1 EVF, while the V2 EVF is nearing completion. ","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006659507/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006730301","html_url":"https://github.com/apache/drill/pull/2308#issuecomment-1006730301","issue_url":"https://api.github.com/repos/apache/drill/issues/2308","id":1006730301,"node_id":"IC_kwDOAFa5xc48AXw9","user":{"login":"tdunning","id":250490,"node_id":"MDQ6VXNlcjI1MDQ5MA==","avatar_url":"https://avatars.githubusercontent.com/u/250490?v=4","gravatar_id":"","url":"https://api.github.com/users/tdunning","html_url":"https://github.com/tdunning","followers_url":"https://api.github.com/users/tdunning/followers","following_url":"https://api.github.com/users/tdunning/following{/other_user}","gists_url":"https://api.github.com/users/tdunning/gists{/gist_id}","starred_url":"https://api.github.com/users/tdunning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tdunning/subscriptions","organizations_url":"https://api.github.com/users/tdunning/orgs","repos_url":"https://api.github.com/users/tdunning/repos","events_url":"https://api.github.com/users/tdunning/events{/privacy}","received_events_url":"https://api.github.com/users/tdunning/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-06T16:33:35Z","updated_at":"2022-01-06T16:33:35Z","author_association":"CONTRIBUTOR","body":"The logs aren't visible right now so it is very hard to tell what's up.\n\n\n\nOn Thu, Jan 6, 2022 at 6:56 AM Charles S. Givre ***@***.***>\nwrote:\n\n> @jnturton <https://github.com/jnturton> I thought this would be a simple\n> update, then the test broke. :-( I probably won't have time to dig into\n> this any time soon, so if you want to take a look, please feel free.\n>\n> â€”\n> Reply to this email directly, view it on GitHub\n> <https://github.com/apache/drill/pull/2308#issuecomment-1006654863>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAB5E6VPHSHWUHJIV46EWILUUWURHANCNFSM5DKMVWZA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006730301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006761255","html_url":"https://github.com/apache/drill/pull/2414#issuecomment-1006761255","issue_url":"https://api.github.com/repos/apache/drill/issues/2414","id":1006761255,"node_id":"IC_kwDOAFa5xc48AfUn","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-06T17:15:16Z","updated_at":"2022-01-06T17:15:16Z","author_association":"CONTRIBUTOR","body":"@jnturton Thanks for your feedback.  I addressed all your comments and responded to the last two.  Thanks again!","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006761255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006770794","html_url":"https://github.com/apache/drill/pull/2308#issuecomment-1006770794","issue_url":"https://api.github.com/repos/apache/drill/issues/2308","id":1006770794,"node_id":"IC_kwDOAFa5xc48Ahpq","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-06T17:28:30Z","updated_at":"2022-01-06T17:28:30Z","author_association":"CONTRIBUTOR","body":"@cgivre can you trigger another CI run here? Doesn't look like I can. ","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1006770794/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007298902","html_url":"https://github.com/apache/drill/issues/2423#issuecomment-1007298902","issue_url":"https://api.github.com/repos/apache/drill/issues/2423","id":1007298902,"node_id":"IC_kwDOAFa5xc48CilW","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-07T10:24:52Z","updated_at":"2022-01-07T10:24:52Z","author_association":"CONTRIBUTOR","body":"Calcite plans queries but cannot execute those plans.  Drill adds this piece, a query execution engine.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007298902/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007301161","html_url":"https://github.com/apache/drill/issues/2423#issuecomment-1007301161","issue_url":"https://api.github.com/repos/apache/drill/issues/2423","id":1007301161,"node_id":"IC_kwDOAFa5xc48CjIp","user":{"login":"ashishmittal13","id":52992035,"node_id":"MDQ6VXNlcjUyOTkyMDM1","avatar_url":"https://avatars.githubusercontent.com/u/52992035?v=4","gravatar_id":"","url":"https://api.github.com/users/ashishmittal13","html_url":"https://github.com/ashishmittal13","followers_url":"https://api.github.com/users/ashishmittal13/followers","following_url":"https://api.github.com/users/ashishmittal13/following{/other_user}","gists_url":"https://api.github.com/users/ashishmittal13/gists{/gist_id}","starred_url":"https://api.github.com/users/ashishmittal13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashishmittal13/subscriptions","organizations_url":"https://api.github.com/users/ashishmittal13/orgs","repos_url":"https://api.github.com/users/ashishmittal13/repos","events_url":"https://api.github.com/users/ashishmittal13/events{/privacy}","received_events_url":"https://api.github.com/users/ashishmittal13/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-07T10:28:08Z","updated_at":"2022-01-07T10:28:08Z","author_association":"NONE","body":"That`s what I thought will be the difference, But here in the calcite documentation\r\nhttps://calcite.apache.org/docs/tutorial.html\r\nI see , it allows to even execute queries.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007301161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007335381","html_url":"https://github.com/apache/drill/issues/2423#issuecomment-1007335381","issue_url":"https://api.github.com/repos/apache/drill/issues/2423","id":1007335381,"node_id":"IC_kwDOAFa5xc48CrfV","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-07T11:26:58Z","updated_at":"2022-01-07T11:26:58Z","author_association":"CONTRIBUTOR","body":"It doesn't, you're looking at a tutorial based on a demo adapter. \r\n\r\n> Calcite-example-CSV is a fully functional adapter for Calcite that reads text files in CSV (comma-separated values) format.\r\n\r\nIt's a worked example to show you how you can add your own execution engine to Calcite, not production code that they ship.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007335381/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007339458","html_url":"https://github.com/apache/drill/pull/2389#issuecomment-1007339458","issue_url":"https://api.github.com/repos/apache/drill/issues/2389","id":1007339458,"node_id":"IC_kwDOAFa5xc48CsfC","user":{"login":"vvysotskyi","id":20928429,"node_id":"MDQ6VXNlcjIwOTI4NDI5","avatar_url":"https://avatars.githubusercontent.com/u/20928429?v=4","gravatar_id":"","url":"https://api.github.com/users/vvysotskyi","html_url":"https://github.com/vvysotskyi","followers_url":"https://api.github.com/users/vvysotskyi/followers","following_url":"https://api.github.com/users/vvysotskyi/following{/other_user}","gists_url":"https://api.github.com/users/vvysotskyi/gists{/gist_id}","starred_url":"https://api.github.com/users/vvysotskyi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvysotskyi/subscriptions","organizations_url":"https://api.github.com/users/vvysotskyi/orgs","repos_url":"https://api.github.com/users/vvysotskyi/repos","events_url":"https://api.github.com/users/vvysotskyi/events{/privacy}","received_events_url":"https://api.github.com/users/vvysotskyi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-07T11:34:37Z","updated_at":"2022-01-07T11:35:19Z","author_association":"MEMBER","body":"@luocooong, did you have a chance to take address my comments?\r\nI believe this issue is a blocker for the upcoming release since it breaks queries that worked previously.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007339458/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007365206","html_url":"https://github.com/apache/drill/issues/2423#issuecomment-1007365206","issue_url":"https://api.github.com/repos/apache/drill/issues/2423","id":1007365206,"node_id":"IC_kwDOAFa5xc48CyxW","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-07T12:21:04Z","updated_at":"2022-01-07T12:21:04Z","author_association":"CONTRIBUTOR","body":"P.S. please feel welcome to visit to our Slack channels or mailing lists if you'd like to chat more.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007365206/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007406418","html_url":"https://github.com/apache/drill/issues/2423#issuecomment-1007406418","issue_url":"https://api.github.com/repos/apache/drill/issues/2423","id":1007406418,"node_id":"IC_kwDOAFa5xc48C81S","user":{"login":"cgivre","id":5513150,"node_id":"MDQ6VXNlcjU1MTMxNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5513150?v=4","gravatar_id":"","url":"https://api.github.com/users/cgivre","html_url":"https://github.com/cgivre","followers_url":"https://api.github.com/users/cgivre/followers","following_url":"https://api.github.com/users/cgivre/following{/other_user}","gists_url":"https://api.github.com/users/cgivre/gists{/gist_id}","starred_url":"https://api.github.com/users/cgivre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cgivre/subscriptions","organizations_url":"https://api.github.com/users/cgivre/orgs","repos_url":"https://api.github.com/users/cgivre/repos","events_url":"https://api.github.com/users/cgivre/events{/privacy}","received_events_url":"https://api.github.com/users/cgivre/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-07T13:26:37Z","updated_at":"2022-01-07T13:26:37Z","author_association":"CONTRIBUTOR","body":"I'd add that Drill is a massively parallel processing (MPP) query layer which can interact with MANY different file formats and storage systems.  As @jnturton said, Calcite is a query planner and lacks that execution engine.  Drill in fact does use Calcite for it's query planning, but if you're looking to actually query data out of the box, you'll need Drill or some other tool.  \r\n\r\nDrill can also parallelize queries so it can query data at scale.  Bottom line, to actually query data, you'll need a query engine, not just the planner.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007406418/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007464143","html_url":"https://github.com/apache/drill/issues/2423#issuecomment-1007464143","issue_url":"https://api.github.com/repos/apache/drill/issues/2423","id":1007464143,"node_id":"IC_kwDOAFa5xc48DK7P","user":{"login":"ashishmittal13","id":52992035,"node_id":"MDQ6VXNlcjUyOTkyMDM1","avatar_url":"https://avatars.githubusercontent.com/u/52992035?v=4","gravatar_id":"","url":"https://api.github.com/users/ashishmittal13","html_url":"https://github.com/ashishmittal13","followers_url":"https://api.github.com/users/ashishmittal13/followers","following_url":"https://api.github.com/users/ashishmittal13/following{/other_user}","gists_url":"https://api.github.com/users/ashishmittal13/gists{/gist_id}","starred_url":"https://api.github.com/users/ashishmittal13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashishmittal13/subscriptions","organizations_url":"https://api.github.com/users/ashishmittal13/orgs","repos_url":"https://api.github.com/users/ashishmittal13/repos","events_url":"https://api.github.com/users/ashishmittal13/events{/privacy}","received_events_url":"https://api.github.com/users/ashishmittal13/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-07T14:47:20Z","updated_at":"2022-01-07T14:47:35Z","author_association":"NONE","body":"Got it, Thanks for the detailed explanation. I would join slack channel, I have some more things which I want to discuss.\r\n","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007464143/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007611673","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1007611673","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1007611673,"node_id":"IC_kwDOAFa5xc48Du8Z","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-07T17:57:07Z","updated_at":"2022-01-10T02:31:12Z","author_association":"CONTRIBUTOR","body":"@jnturton,  one could do something like what you described. However, to have all of Drill work with Arrow would be a huge amount of work. Optimizations made for one format would be sub-optimal for the other. (Example: exchanges.) Furthermore, your use case would benefit from vectors only in the project and grouping operators.\r\n\r\nSo, I wonder if we might think about the problem operator-by-operator. If you have a compute-heavy phase, might that first transform data to vectors, apply the compute, then send data along in row format? Every fragment does a network exchange: data is read/written anyway. So, perhaps there is something that can be done to transform formats at fragment boundaries (he says, waving hands wildly...)\r\n\r\nYou'll also get speed only for queries without joins. If you have joins, then the joins are likely to take the vast amount of the runtime, leaving your projection and grouping in the noise. I'm not sure how vectorization can help joins; certainly in Drill today, vectors make the join code atrociously complex.\r\n\r\nThis is why DBs (and compiler optimizers) are hard: the answers change based on use case...","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007611673/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007883829","html_url":"https://github.com/apache/drill/pull/2419#issuecomment-1007883829","issue_url":"https://api.github.com/repos/apache/drill/issues/2419","id":1007883829,"node_id":"IC_kwDOAFa5xc48ExY1","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T04:32:09Z","updated_at":"2022-01-08T04:32:09Z","author_association":"NONE","body":"This pull request **fixes 1 alert** when merging fb7d8e44e25669a295cd7c1a2b024a1a7b68275d into 31b1274b6beddd191bee9c1d0ab2c827296b0353 - [view on LGTM.com](https://lgtm.com/projects/g/apache/drill/rev/pr-74703e26462c64592538b077868219ac05cfd9c4)\n\n**fixed alerts:**\n\n* 1 for Result of multiplication cast to wider type","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007883829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007915690","html_url":"https://github.com/apache/drill/pull/2419#issuecomment-1007915690","issue_url":"https://api.github.com/repos/apache/drill/issues/2419","id":1007915690,"node_id":"IC_kwDOAFa5xc48E5Kq","user":{"login":"lgtm-com[bot]","id":43144390,"node_id":"MDM6Qm90NDMxNDQzOTA=","avatar_url":"https://avatars.githubusercontent.com/in/17324?v=4","gravatar_id":"","url":"https://api.github.com/users/lgtm-com%5Bbot%5D","html_url":"https://github.com/apps/lgtm-com","followers_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/followers","following_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/repos","events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/lgtm-com%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T08:36:30Z","updated_at":"2022-01-08T08:36:30Z","author_association":"NONE","body":"This pull request **fixes 1 alert** when merging 5e022349e21dac8c6606e4226451c20c072c66f5 into 31b1274b6beddd191bee9c1d0ab2c827296b0353 - [view on LGTM.com](https://lgtm.com/projects/g/apache/drill/rev/pr-c9ae71403bf203254d33d196d3b51af3e44a16ee)\n\n**fixed alerts:**\n\n* 1 for Result of multiplication cast to wider type","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007915690/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007917677","html_url":"https://github.com/apache/drill/pull/2413#issuecomment-1007917677","issue_url":"https://api.github.com/repos/apache/drill/issues/2413","id":1007917677,"node_id":"IC_kwDOAFa5xc48E5pt","user":{"login":"Leon-WTF","id":25920008,"node_id":"MDQ6VXNlcjI1OTIwMDA4","avatar_url":"https://avatars.githubusercontent.com/u/25920008?v=4","gravatar_id":"","url":"https://api.github.com/users/Leon-WTF","html_url":"https://github.com/Leon-WTF","followers_url":"https://api.github.com/users/Leon-WTF/followers","following_url":"https://api.github.com/users/Leon-WTF/following{/other_user}","gists_url":"https://api.github.com/users/Leon-WTF/gists{/gist_id}","starred_url":"https://api.github.com/users/Leon-WTF/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Leon-WTF/subscriptions","organizations_url":"https://api.github.com/users/Leon-WTF/orgs","repos_url":"https://api.github.com/users/Leon-WTF/repos","events_url":"https://api.github.com/users/Leon-WTF/events{/privacy}","received_events_url":"https://api.github.com/users/Leon-WTF/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T08:49:13Z","updated_at":"2022-01-08T08:49:13Z","author_association":"CONTRIBUTOR","body":"> @Leon-WTF I see this marked as draft, but @paul-rogers approved it. Is this ready to merge or are you planning on adding more to this PR?\r\n> \r\n> If you are ready to merge, please remove the `draft` and we'll merge! Thanks for the contribution and Happy New Year!!\r\n@cgivre Done!","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007917677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007949898","html_url":"https://github.com/apache/drill/pull/2389#issuecomment-1007949898","issue_url":"https://api.github.com/repos/apache/drill/issues/2389","id":1007949898,"node_id":"IC_kwDOAFa5xc48FBhK","user":{"login":"luocooong","id":50079619,"node_id":"MDQ6VXNlcjUwMDc5NjE5","avatar_url":"https://avatars.githubusercontent.com/u/50079619?v=4","gravatar_id":"","url":"https://api.github.com/users/luocooong","html_url":"https://github.com/luocooong","followers_url":"https://api.github.com/users/luocooong/followers","following_url":"https://api.github.com/users/luocooong/following{/other_user}","gists_url":"https://api.github.com/users/luocooong/gists{/gist_id}","starred_url":"https://api.github.com/users/luocooong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/luocooong/subscriptions","organizations_url":"https://api.github.com/users/luocooong/orgs","repos_url":"https://api.github.com/users/luocooong/repos","events_url":"https://api.github.com/users/luocooong/events{/privacy}","received_events_url":"https://api.github.com/users/luocooong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T10:29:20Z","updated_at":"2022-01-08T10:29:20Z","author_association":"MEMBER","body":"@vvysotskyi Thanks for the information. The previous decision to add Input Conversion was due to a new ERROR with the addition of unit tests, refer to :\r\n```\r\nCaused by: java.lang.AssertionError: rowtype mismatches expressions\r\n  at org.apache.calcite.util.Litmus$1.fail(Litmus.java:31)\r\n  at org.apache.calcite.rex.RexUtil.compatibleTypes(RexUtil.java:967)\r\n  at org.apache.calcite.rel.core.Project.isValid(Project.java:185)\r\n  at org.apache.calcite.rel.core.Project.<init>(Project.java:83)\r\n  at org.apache.drill.exec.planner.common.DrillProjectRelBase.<init>(DrillProjectRelBase.java:67)\r\n  at org.apache.drill.exec.store.plan.rel.PluginProjectRel.<init>(PluginProjectRel.java:43)\r\n  at org.apache.drill.exec.store.plan.rule.PluginProjectRule.createPluginProject(PluginProjectRule.java:93)\r\n  at org.apache.drill.exec.store.plan.rule.PluginProjectRule.convert(PluginProjectRule.java:68)\r\n  at org.apache.calcite.rel.convert.ConverterRule.onMatch(ConverterRule.java:144)\r\n  at org.apache.calcite.plan.volcano.VolcanoRuleCall.onMatch(VolcanoRuleCall.java:208)\r\n  at org.apache.calcite.plan.volcano.VolcanoPlanner.findBestExp(VolcanoPlanner.java:633)\r\n  at org.apache.calcite.tools.Programs$RuleSetProgram.run(Programs.java:327)\r\n  at org.apache.drill.exec.planner.sql.handlers.DefaultSqlHandler.transform(DefaultSqlHandler.java:405)\r\n  at org.apache.drill.exec.planner.sql.handlers.DefaultSqlHandler.transform(DefaultSqlHandler.java:351)\r\n  at org.apache.drill.exec.planner.sql.handlers.DefaultSqlHandler.convertToRawDrel(DefaultSqlHandler.java:245)\r\n  at org.apache.drill.exec.planner.sql.handlers.DefaultSqlHandler.convertToDrel(DefaultSqlHandler.java:308)\r\n  at org.apache.drill.exec.planner.sql.handlers.DefaultSqlHandler.getPlan(DefaultSqlHandler.java:173)\r\n  at org.apache.drill.exec.planner.sql.DrillSqlWorker.getQueryPlan(DrillSqlWorker.java:283)\r\n  at org.apache.drill.exec.planner.sql.DrillSqlWorker.getPhysicalPlan(DrillSqlWorker.java:163)\r\n  at org.apache.drill.exec.planner.sql.DrillSqlWorker.convertPlan(DrillSqlWorker.java:128)\r\n  at org.apache.drill.exec.planner.sql.DrillSqlWorker.getPlan(DrillSqlWorker.java:93)\r\n  at org.apache.drill.exec.work.foreman.Foreman.runSQL(Foreman.java:593)\r\n  at org.apache.drill.exec.work.foreman.Foreman.run(Foreman.java:274)\r\n  ... 1 more\r\n```\r\nIf there is a way to not rely on Input Conversion, that might be better, please let me know, thank you.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007949898/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007978635","html_url":"https://github.com/apache/drill/pull/2389#issuecomment-1007978635","issue_url":"https://api.github.com/repos/apache/drill/issues/2389","id":1007978635,"node_id":"IC_kwDOAFa5xc48FIiL","user":{"login":"vvysotskyi","id":20928429,"node_id":"MDQ6VXNlcjIwOTI4NDI5","avatar_url":"https://avatars.githubusercontent.com/u/20928429?v=4","gravatar_id":"","url":"https://api.github.com/users/vvysotskyi","html_url":"https://github.com/vvysotskyi","followers_url":"https://api.github.com/users/vvysotskyi/followers","following_url":"https://api.github.com/users/vvysotskyi/following{/other_user}","gists_url":"https://api.github.com/users/vvysotskyi/gists{/gist_id}","starred_url":"https://api.github.com/users/vvysotskyi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvysotskyi/subscriptions","organizations_url":"https://api.github.com/users/vvysotskyi/orgs","repos_url":"https://api.github.com/users/vvysotskyi/repos","events_url":"https://api.github.com/users/vvysotskyi/events{/privacy}","received_events_url":"https://api.github.com/users/vvysotskyi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T12:37:08Z","updated_at":"2022-01-08T12:37:08Z","author_association":"MEMBER","body":"@luocooong, it looks like an issue with `PluginProjectRule`. Please fix it to pass the correct row type that matches the expressions it has.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1007978635/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008104082","html_url":"https://github.com/apache/drill/pull/2425#issuecomment-1008104082","issue_url":"https://api.github.com/repos/apache/drill/issues/2425","id":1008104082,"node_id":"IC_kwDOAFa5xc48FnKS","user":{"login":"vvysotskyi","id":20928429,"node_id":"MDQ6VXNlcjIwOTI4NDI5","avatar_url":"https://avatars.githubusercontent.com/u/20928429?v=4","gravatar_id":"","url":"https://api.github.com/users/vvysotskyi","html_url":"https://github.com/vvysotskyi","followers_url":"https://api.github.com/users/vvysotskyi/followers","following_url":"https://api.github.com/users/vvysotskyi/following{/other_user}","gists_url":"https://api.github.com/users/vvysotskyi/gists{/gist_id}","starred_url":"https://api.github.com/users/vvysotskyi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvysotskyi/subscriptions","organizations_url":"https://api.github.com/users/vvysotskyi/orgs","repos_url":"https://api.github.com/users/vvysotskyi/repos","events_url":"https://api.github.com/users/vvysotskyi/events{/privacy}","received_events_url":"https://api.github.com/users/vvysotskyi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T18:55:54Z","updated_at":"2022-01-08T18:55:54Z","author_association":"MEMBER","body":"Please also update protobuf version in `.github/workflows/ci.yml`","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008104082/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008148926","html_url":"https://github.com/apache/drill/pull/2419#issuecomment-1008148926","issue_url":"https://api.github.com/repos/apache/drill/issues/2419","id":1008148926,"node_id":"IC_kwDOAFa5xc48FyG-","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T20:47:17Z","updated_at":"2022-01-08T20:47:17Z","author_association":"CONTRIBUTOR","body":"@luocooong, @jnturton , finally got a clean build. (The recently-added plugins for Splunk and Casandra won't run on my machine, blocking me from the modules that can run. We really should fix that.) Anyway, all the tests pass so please have a look. There is quite a bit here: see the description for what the various bits do. Thanks! ","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008148926/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008149366","html_url":"https://github.com/apache/drill/issues/2423#issuecomment-1008149366","issue_url":"https://api.github.com/repos/apache/drill/issues/2423","id":1008149366,"node_id":"IC_kwDOAFa5xc48FyN2","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T20:49:23Z","updated_at":"2022-01-08T20:49:23Z","author_association":"CONTRIBUTOR","body":"Here's another way to look at it. Many engines use Calcite: Drill, Druid, Hive, ... Calcite handles the parsing and planning part. Each of those tools has their own way to run a query, as needed by the environment in which they run.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008149366/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008150715","html_url":"https://github.com/apache/drill/pull/1962#issuecomment-1008150715","issue_url":"https://api.github.com/repos/apache/drill/issues/1962","id":1008150715,"node_id":"IC_kwDOAFa5xc48Fyi7","user":{"login":"paul-rogers","id":3248881,"node_id":"MDQ6VXNlcjMyNDg4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/3248881?v=4","gravatar_id":"","url":"https://api.github.com/users/paul-rogers","html_url":"https://github.com/paul-rogers","followers_url":"https://api.github.com/users/paul-rogers/followers","following_url":"https://api.github.com/users/paul-rogers/following{/other_user}","gists_url":"https://api.github.com/users/paul-rogers/gists{/gist_id}","starred_url":"https://api.github.com/users/paul-rogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paul-rogers/subscriptions","organizations_url":"https://api.github.com/users/paul-rogers/orgs","repos_url":"https://api.github.com/users/paul-rogers/repos","events_url":"https://api.github.com/users/paul-rogers/events{/privacy}","received_events_url":"https://api.github.com/users/paul-rogers/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T20:54:50Z","updated_at":"2022-01-08T20:54:50Z","author_association":"CONTRIBUTOR","body":"The EVF V2 PR is ready for review. I think you'll find that all the changes made here for EVF V1 will be reusable. The only change is how you set up the framework in your easy format plugin code. There is an example in the EVF V2 PR. You can also rip out any \"manual\" limit code: the new PR handles limits internally. Ping me if you have questions.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008150715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008183488","html_url":"https://github.com/apache/drill/pull/2425#issuecomment-1008183488","issue_url":"https://api.github.com/repos/apache/drill/issues/2425","id":1008183488,"node_id":"IC_kwDOAFa5xc48F6jA","user":{"login":"kingswanwho","id":15710469,"node_id":"MDQ6VXNlcjE1NzEwNDY5","avatar_url":"https://avatars.githubusercontent.com/u/15710469?v=4","gravatar_id":"","url":"https://api.github.com/users/kingswanwho","html_url":"https://github.com/kingswanwho","followers_url":"https://api.github.com/users/kingswanwho/followers","following_url":"https://api.github.com/users/kingswanwho/following{/other_user}","gists_url":"https://api.github.com/users/kingswanwho/gists{/gist_id}","starred_url":"https://api.github.com/users/kingswanwho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kingswanwho/subscriptions","organizations_url":"https://api.github.com/users/kingswanwho/orgs","repos_url":"https://api.github.com/users/kingswanwho/repos","events_url":"https://api.github.com/users/kingswanwho/events{/privacy}","received_events_url":"https://api.github.com/users/kingswanwho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-08T23:43:05Z","updated_at":"2022-01-08T23:43:05Z","author_association":"CONTRIBUTOR","body":"> Please also update protobuf version in `.github/workflows/ci.yml`\r\n\r\nThank you so much for your reminder, resolved.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008183488/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008235930","html_url":"https://github.com/apache/drill/issues/2421#issuecomment-1008235930","issue_url":"https://api.github.com/repos/apache/drill/issues/2421","id":1008235930,"node_id":"IC_kwDOAFa5xc48GHWa","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-09T05:55:55Z","updated_at":"2022-01-09T06:33:03Z","author_association":"CONTRIBUTOR","body":"@paul-rogers I can imagine vectorisation helping hash joins because of all the hashing to be crunched. I haven't got a good paper to cite but a search from my phone did turn up at least one story on these lines. \n\nhttps://www.cockroachlabs.com/blog/vectorized-hash-joiner/\n\nRegarding pivoting between row and column orientation depending on the operator, I would expect that all the ensuing memory copying would outweigh any gain but again I bring no references or data.\n\nEDIT: There are quite a few open access papers returned by \"sql join SIMD\". I've got some bedtime reading to do.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008235930/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008238421","html_url":"https://github.com/apache/drill/pull/2424#issuecomment-1008238421","issue_url":"https://api.github.com/repos/apache/drill/issues/2424","id":1008238421,"node_id":"IC_kwDOAFa5xc48GH9V","user":{"login":"jnturton","id":9107319,"node_id":"MDQ6VXNlcjkxMDczMTk=","avatar_url":"https://avatars.githubusercontent.com/u/9107319?v=4","gravatar_id":"","url":"https://api.github.com/users/jnturton","html_url":"https://github.com/jnturton","followers_url":"https://api.github.com/users/jnturton/followers","following_url":"https://api.github.com/users/jnturton/following{/other_user}","gists_url":"https://api.github.com/users/jnturton/gists{/gist_id}","starred_url":"https://api.github.com/users/jnturton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnturton/subscriptions","organizations_url":"https://api.github.com/users/jnturton/orgs","repos_url":"https://api.github.com/users/jnturton/repos","events_url":"https://api.github.com/users/jnturton/events{/privacy}","received_events_url":"https://api.github.com/users/jnturton/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-01-09T06:20:16Z","updated_at":"2022-01-09T06:20:16Z","author_association":"CONTRIBUTOR","body":"@paul-rogers yes, of course. I'll see if I can expand the scope of this refactoring PR to add that in.","reactions":{"url":"https://api.github.com/repos/apache/drill/issues/comments/1008238421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]