[{"url":"https://api.github.com/repos/apache/storm/issues/comments/193478032","html_url":"https://github.com/apache/storm/pull/407#issuecomment-193478032","issue_url":"https://api.github.com/repos/apache/storm/issues/407","id":193478032,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ3ODAzMg==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:09:13Z","updated_at":"2016-03-07T22:09:13Z","author_association":"CONTRIBUTOR","body":"Closing\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193478032/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612515269","html_url":"https://github.com/apache/storm/issues/4431#issuecomment-2612515269","issue_url":"https://api.github.com/repos/apache/storm/issues/4431","id":2612515269,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MTUyNjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:09:14Z","updated_at":"2025-01-24T13:19:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/407#issuecomment-193478032\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/407#issuecomment-193478032</a></p>\n\n<p>    Closing</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612515269/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612515276","html_url":"https://github.com/apache/storm/issues/4431#issuecomment-2612515276","issue_url":"https://api.github.com/repos/apache/storm/issues/4431","id":2612515276,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MTUyNzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:09:45Z","updated_at":"2025-01-24T13:19:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/407\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/407</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612515276/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193481184","html_url":"https://github.com/apache/storm/pull/250#issuecomment-193481184","issue_url":"https://api.github.com/repos/apache/storm/issues/250","id":193481184,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ4MTE4NA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:19:39Z","updated_at":"2016-03-07T22:22:24Z","author_association":"CONTRIBUTOR","body":"@RaghavendraNandagopal \nClosing this. We still like the functionality, so feel free to reopen if you have time to address the comments.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193481184/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612480896","html_url":"https://github.com/apache/storm/issues/4272#issuecomment-2612480896","issue_url":"https://api.github.com/repos/apache/storm/issues/4272","id":2612480896,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0ODA4OTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:19:41Z","updated_at":"2025-01-24T13:01:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/250#issuecomment-193481184\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/250#issuecomment-193481184</a></p>\n\n<p>    @RaghavendraNandagopal <br/>\n    Closing this. We still like the functionality, so free to reopen if you have time to address the comments.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612480896/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612480901","html_url":"https://github.com/apache/storm/issues/4272#issuecomment-2612480901","issue_url":"https://api.github.com/repos/apache/storm/issues/4272","id":2612480901,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0ODA5MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:20:22Z","updated_at":"2025-01-24T13:01:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/250\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/250</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612480901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652021","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652021","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652021,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwMjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:21:12Z","updated_at":"2025-01-24T14:23:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55283304\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55283304</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"task-info\", \"data-points\"));\n    +common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addSystemStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"event\"));\n    +common.put_to_streams(SYSTEM_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> eventLoggerBoltFields() </p>\n{\n    +List<String> fields = Arrays.asList(EventLoggerBolt.FIELD_COMPONENT_ID, EventLoggerBolt.FIELD_MESSAGE_ID, EventLoggerBolt.FIELD_TS,\n    +EventLoggerBolt.FIELD_VALUES);\n    +return fields;\n    +    }\n<p>    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> eventLoggerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> allIds = new HashSet<String>();<br/>\n    +allIds.addAll(topology.get_bolts().keySet());<br/>\n    +allIds.addAll(topology.get_spouts().keySet());<br/>\n    +<br/>\n    +for(String id : allIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, EVENTLOGGER_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"component-id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addEventLogger(Map conf, StormTopology topology) {<br/>\n    +Integer numExecutors = Utils.getInt(conf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +HashMap<String, Object> componentConf = new HashMap<String, Object>();<br/>\n    +componentConf.put(Config.TOPOLOGY_TASKS, numExecutors);<br/>\n    +componentConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +Bolt eventLoggerBolt = Thrift.prepareSerializedBoltDetails(eventLoggerInputs(topology), new EventLoggerBolt(), null, numExecutors, componentConf);<br/>\n    +<br/>\n    +for(Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +common.put_to_streams(EVENTLOGGER_STREAM_ID, Thrift.outputFields(eventLoggerBoltFields()));\n    +    }\n<p>    +}<br/>\n    +topology.put_to_bolts(EVENTLOGGER_COMPONENT_ID, eventLoggerBolt);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, Bolt> metricsConsumerBoltSpecs(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = new HashMap<String, Bolt>();<br/>\n    +<br/>\n    +Set<String> componentIdsEmitMetrics = new HashSet<String>();<br/>\n    +componentIdsEmitMetrics.addAll(allComponents(topology).keySet());<br/>\n    +componentIdsEmitMetrics.add(Constants.SYSTEM_COMPONENT_ID);<br/>\n    +<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +for (String componentId : componentIdsEmitMetrics) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(componentId, Constants.METRICS_STREAM_ID), Thrift.prepareShuffleGrouping());\n    +}\n<p>    +<br/>\n    +List<Map<String, Object>> registerInfo = (List<Map<String, Object>>) conf.get(Config.TOPOLOGY_METRICS_CONSUMER_REGISTER);<br/>\n    +if (registerInfo != null) {<br/>\n    +    Map<String, Integer> classOccurrencesMap = new HashMap<String, Integer>();<br/>\n    +    for (Map<String, Object> info : registerInfo) {<br/>\n    +String className = (String) info.get(\"class\");<br/>\n    +Object argument = info.get(\"argument\");<br/>\n    +Integer phintNum = Utils.getInt(info.get(\"parallelism.hint\"), 1);<br/>\n    +Map<String, Object> metricsConsumerConf = new HashMap<String, Object>();<br/>\n    +metricsConsumerConf.put(Config.TOPOLOGY_TASKS, phintNum);<br/>\n    +Bolt metricsConsumerBolt = Thrift.prepareSerializedBoltDetails(inputs, new MetricsConsumerBolt(className, argument), null, phintNum, metricsConsumerConf);<br/>\n    +<br/>\n    +String id = className;<br/>\n    +if (classOccurrencesMap.containsKey(className)) </p>\n{\n    +    // e.g. [\\\"a\\\", \\\"b\\\", \\\"a\\\"]) => [\\\"a\\\", \\\"b\\\", \\\"a#2\\\"]\"\n    +    int occurrenceNum = classOccurrencesMap.get(className);\n    +    occurrenceNum++;\n    +    classOccurrencesMap.put(className, occurrenceNum);\n    +    id = Constants.METRICS_COMPONENT_ID_PREFIX + className + \"#\" + occurrenceNum;\n    +}\n<p> else </p>\n{\n    +    classOccurrencesMap.put(className, 1);\n    +}\n<p>    +metricsConsumerBolts.put(id, metricsConsumerBolt);<br/>\n    +    }<br/>\n    +}<br/>\n    +return metricsConsumerBolts;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricComponents(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = metricsConsumerBoltSpecs(conf, topology);<br/>\n    +for (Map.Entry<String, Bolt> entry : metricsConsumerBolts.entrySet()) </p>\n{\n    +    topology.put_to_bolts(entry.getKey(), entry.getValue());\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addSystemComponents(Map conf, StormTopology topology) </p>\n{\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();\n    +outputStreams.put(Constants.SYSTEM_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"rate_secs\")));\n    +outputStreams.put(Constants.METRICS_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"interval\")));\n    +outputStreams.put(Constants.CREDENTIALS_CHANGED_STREAM_ID, Thrift.outputFields(Arrays.asList(\"creds\")));\n    +\n    +Map<String, Object> boltConf = new HashMap<String, Object>();\n    +boltConf.put(Config.TOPOLOGY_TASKS, 0);\n    +\n    +Bolt systemBoltSpec = Thrift.prepareSerializedBoltDetails(null, new SystemBolt(), outputStreams, 0, boltConf);\n    +topology.put_to_bolts(Constants.SYSTEM_COMPONENT_ID, systemBoltSpec);\n    +    }\n<p>    +<br/>\n    +    public static StormTopology systemTopology(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +return _instance.systemTopologyImpl(stormConf, topology);\n    +    }\n<p>    +<br/>\n    +    protected StormTopology systemTopologyImpl(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +validateBasic(topology);\n    +\n    +StormTopology ret = topology.deepCopy();\n    +addAcker(stormConf, ret);\n    +addEventLogger(stormConf, ret);\n    +addMetricComponents(stormConf, ret);\n    +addSystemComponents(stormConf, ret);\n    +addMetricStreams(ret);\n    +addSystemStreams(ret);\n    +\n    +validateStructure(ret);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static boolean hasAckers(Map stormConf) {<br/>\n    +Object ackerNum = stormConf.get(Config.TOPOLOGY_ACKER_EXECUTORS);<br/>\n    +if (ackerNum == null || Utils.getInt(ackerNum) > 0) </p>\n{\n    +    return true;\n    +} else {\n    +    return false;\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static boolean hasEventLoggers(Map stormConf) {<br/>\n    +Object eventLoggerNum = stormConf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS);<br/>\n    +if (eventLoggerNum == null || Utils.getInt(eventLoggerNum) > 0) {    +    return true;    +}\n<p> else </p>\n{\n    +    return false;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static int numStartExecutors(Object component) throws InvalidTopologyException {<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common == null) </p>\n{\n    +    throw new InvalidTopologyException(\"unknown component type \" + component.getClass().getName());\n    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    This null check didn't exist in the original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652021/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193483183","html_url":"https://github.com/apache/storm/pull/651#issuecomment-193483183","issue_url":"https://api.github.com/repos/apache/storm/issues/651","id":193483183,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ4MzE4Mw==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:24:47Z","updated_at":"2016-03-07T22:24:47Z","author_association":"CONTRIBUTOR","body":"Closing this. Feel free to reopen with updates.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193483183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597078","html_url":"https://github.com/apache/storm/issues/4866#issuecomment-2612597078","issue_url":"https://api.github.com/repos/apache/storm/issues/4866","id":2612597078,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTcwNzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:24:47Z","updated_at":"2025-01-24T13:59:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/651#issuecomment-193483183\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/651#issuecomment-193483183</a></p>\n\n<p>    Closing this. Feel free to reopen with updates.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652027","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652027","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652027,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwMjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:25:07Z","updated_at":"2025-01-24T14:23:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55283874\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55283874</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"task-info\", \"data-points\"));\n    +common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addSystemStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"event\"));\n    +common.put_to_streams(SYSTEM_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> eventLoggerBoltFields() </p>\n{\n    +List<String> fields = Arrays.asList(EventLoggerBolt.FIELD_COMPONENT_ID, EventLoggerBolt.FIELD_MESSAGE_ID, EventLoggerBolt.FIELD_TS,\n    +EventLoggerBolt.FIELD_VALUES);\n    +return fields;\n    +    }\n<p>    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> eventLoggerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> allIds = new HashSet<String>();<br/>\n    +allIds.addAll(topology.get_bolts().keySet());<br/>\n    +allIds.addAll(topology.get_spouts().keySet());<br/>\n    +<br/>\n    +for(String id : allIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, EVENTLOGGER_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"component-id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addEventLogger(Map conf, StormTopology topology) {<br/>\n    +Integer numExecutors = Utils.getInt(conf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +HashMap<String, Object> componentConf = new HashMap<String, Object>();<br/>\n    +componentConf.put(Config.TOPOLOGY_TASKS, numExecutors);<br/>\n    +componentConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +Bolt eventLoggerBolt = Thrift.prepareSerializedBoltDetails(eventLoggerInputs(topology), new EventLoggerBolt(), null, numExecutors, componentConf);<br/>\n    +<br/>\n    +for(Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +common.put_to_streams(EVENTLOGGER_STREAM_ID, Thrift.outputFields(eventLoggerBoltFields()));\n    +    }\n<p>    +}<br/>\n    +topology.put_to_bolts(EVENTLOGGER_COMPONENT_ID, eventLoggerBolt);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, Bolt> metricsConsumerBoltSpecs(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = new HashMap<String, Bolt>();<br/>\n    +<br/>\n    +Set<String> componentIdsEmitMetrics = new HashSet<String>();<br/>\n    +componentIdsEmitMetrics.addAll(allComponents(topology).keySet());<br/>\n    +componentIdsEmitMetrics.add(Constants.SYSTEM_COMPONENT_ID);<br/>\n    +<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +for (String componentId : componentIdsEmitMetrics) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(componentId, Constants.METRICS_STREAM_ID), Thrift.prepareShuffleGrouping());\n    +}\n<p>    +<br/>\n    +List<Map<String, Object>> registerInfo = (List<Map<String, Object>>) conf.get(Config.TOPOLOGY_METRICS_CONSUMER_REGISTER);<br/>\n    +if (registerInfo != null) {<br/>\n    +    Map<String, Integer> classOccurrencesMap = new HashMap<String, Integer>();<br/>\n    +    for (Map<String, Object> info : registerInfo) {<br/>\n    +String className = (String) info.get(\"class\");<br/>\n    +Object argument = info.get(\"argument\");<br/>\n    +Integer phintNum = Utils.getInt(info.get(\"parallelism.hint\"), 1);<br/>\n    +Map<String, Object> metricsConsumerConf = new HashMap<String, Object>();<br/>\n    +metricsConsumerConf.put(Config.TOPOLOGY_TASKS, phintNum);<br/>\n    +Bolt metricsConsumerBolt = Thrift.prepareSerializedBoltDetails(inputs, new MetricsConsumerBolt(className, argument), null, phintNum, metricsConsumerConf);<br/>\n    +<br/>\n    +String id = className;<br/>\n    +if (classOccurrencesMap.containsKey(className)) </p>\n{\n    +    // e.g. [\\\"a\\\", \\\"b\\\", \\\"a\\\"]) => [\\\"a\\\", \\\"b\\\", \\\"a#2\\\"]\"\n    +    int occurrenceNum = classOccurrencesMap.get(className);\n    +    occurrenceNum++;\n    +    classOccurrencesMap.put(className, occurrenceNum);\n    +    id = Constants.METRICS_COMPONENT_ID_PREFIX + className + \"#\" + occurrenceNum;\n    +}\n<p> else </p>\n{\n    +    classOccurrencesMap.put(className, 1);\n    +}\n<p>    +metricsConsumerBolts.put(id, metricsConsumerBolt);<br/>\n    +    }<br/>\n    +}<br/>\n    +return metricsConsumerBolts;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricComponents(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = metricsConsumerBoltSpecs(conf, topology);<br/>\n    +for (Map.Entry<String, Bolt> entry : metricsConsumerBolts.entrySet()) </p>\n{\n    +    topology.put_to_bolts(entry.getKey(), entry.getValue());\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addSystemComponents(Map conf, StormTopology topology) </p>\n{\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();\n    +outputStreams.put(Constants.SYSTEM_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"rate_secs\")));\n    +outputStreams.put(Constants.METRICS_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"interval\")));\n    +outputStreams.put(Constants.CREDENTIALS_CHANGED_STREAM_ID, Thrift.outputFields(Arrays.asList(\"creds\")));\n    +\n    +Map<String, Object> boltConf = new HashMap<String, Object>();\n    +boltConf.put(Config.TOPOLOGY_TASKS, 0);\n    +\n    +Bolt systemBoltSpec = Thrift.prepareSerializedBoltDetails(null, new SystemBolt(), outputStreams, 0, boltConf);\n    +topology.put_to_bolts(Constants.SYSTEM_COMPONENT_ID, systemBoltSpec);\n    +    }\n<p>    +<br/>\n    +    public static StormTopology systemTopology(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +return _instance.systemTopologyImpl(stormConf, topology);\n    +    }\n<p>    +<br/>\n    +    protected StormTopology systemTopologyImpl(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +validateBasic(topology);\n    +\n    +StormTopology ret = topology.deepCopy();\n    +addAcker(stormConf, ret);\n    +addEventLogger(stormConf, ret);\n    +addMetricComponents(stormConf, ret);\n    +addSystemComponents(stormConf, ret);\n    +addMetricStreams(ret);\n    +addSystemStreams(ret);\n    +\n    +validateStructure(ret);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static boolean hasAckers(Map stormConf) {<br/>\n    +Object ackerNum = stormConf.get(Config.TOPOLOGY_ACKER_EXECUTORS);<br/>\n    +if (ackerNum == null || Utils.getInt(ackerNum) > 0) </p>\n{\n    +    return true;\n    +} else {\n    +    return false;\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static boolean hasEventLoggers(Map stormConf) {<br/>\n    +Object eventLoggerNum = stormConf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS);<br/>\n    +if (eventLoggerNum == null || Utils.getInt(eventLoggerNum) > 0) {    +    return true;    +}\n<p> else </p>\n{\n    +    return false;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static int numStartExecutors(Object component) throws InvalidTopologyException {<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common == null) </p>\n{\n    +    throw new InvalidTopologyException(\"unknown component type \" + component.getClass().getName());\n    +}\n<p>    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +return parallelismHintNum;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map stormTaskInfo(StormTopology userTopology, Map stormConf) throws InvalidTopologyException </p>\n{\n    +return _instance.stormTaskInfoImpl(userTopology, stormConf);\n    +    }\n<p>    +    /*<br/>\n    +     * Returns map from task -> componentId<br/>\n    +     */<br/>\n    +    protected Map stormTaskInfoImpl(StormTopology userTopology, Map stormConf) throws InvalidTopologyException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we add the generics to the return type?<br/>\n    ```<br/>\n    Map<Integer, String><br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652027/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597083","html_url":"https://github.com/apache/storm/issues/4866#issuecomment-2612597083","issue_url":"https://api.github.com/repos/apache/storm/issues/4866","id":2612597083,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTcwODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:25:16Z","updated_at":"2025-01-24T13:59:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/651\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/651</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597083/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652030","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652030","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652030,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwMzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:27:04Z","updated_at":"2025-01-24T14:23:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55284177\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55284177</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"task-info\", \"data-points\"));\n    +common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addSystemStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"event\"));\n    +common.put_to_streams(SYSTEM_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> eventLoggerBoltFields() </p>\n{\n    +List<String> fields = Arrays.asList(EventLoggerBolt.FIELD_COMPONENT_ID, EventLoggerBolt.FIELD_MESSAGE_ID, EventLoggerBolt.FIELD_TS,\n    +EventLoggerBolt.FIELD_VALUES);\n    +return fields;\n    +    }\n<p>    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> eventLoggerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> allIds = new HashSet<String>();<br/>\n    +allIds.addAll(topology.get_bolts().keySet());<br/>\n    +allIds.addAll(topology.get_spouts().keySet());<br/>\n    +<br/>\n    +for(String id : allIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, EVENTLOGGER_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"component-id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addEventLogger(Map conf, StormTopology topology) {<br/>\n    +Integer numExecutors = Utils.getInt(conf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +HashMap<String, Object> componentConf = new HashMap<String, Object>();<br/>\n    +componentConf.put(Config.TOPOLOGY_TASKS, numExecutors);<br/>\n    +componentConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +Bolt eventLoggerBolt = Thrift.prepareSerializedBoltDetails(eventLoggerInputs(topology), new EventLoggerBolt(), null, numExecutors, componentConf);<br/>\n    +<br/>\n    +for(Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +common.put_to_streams(EVENTLOGGER_STREAM_ID, Thrift.outputFields(eventLoggerBoltFields()));\n    +    }\n<p>    +}<br/>\n    +topology.put_to_bolts(EVENTLOGGER_COMPONENT_ID, eventLoggerBolt);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, Bolt> metricsConsumerBoltSpecs(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = new HashMap<String, Bolt>();<br/>\n    +<br/>\n    +Set<String> componentIdsEmitMetrics = new HashSet<String>();<br/>\n    +componentIdsEmitMetrics.addAll(allComponents(topology).keySet());<br/>\n    +componentIdsEmitMetrics.add(Constants.SYSTEM_COMPONENT_ID);<br/>\n    +<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +for (String componentId : componentIdsEmitMetrics) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(componentId, Constants.METRICS_STREAM_ID), Thrift.prepareShuffleGrouping());\n    +}\n<p>    +<br/>\n    +List<Map<String, Object>> registerInfo = (List<Map<String, Object>>) conf.get(Config.TOPOLOGY_METRICS_CONSUMER_REGISTER);<br/>\n    +if (registerInfo != null) {<br/>\n    +    Map<String, Integer> classOccurrencesMap = new HashMap<String, Integer>();<br/>\n    +    for (Map<String, Object> info : registerInfo) {<br/>\n    +String className = (String) info.get(\"class\");<br/>\n    +Object argument = info.get(\"argument\");<br/>\n    +Integer phintNum = Utils.getInt(info.get(\"parallelism.hint\"), 1);<br/>\n    +Map<String, Object> metricsConsumerConf = new HashMap<String, Object>();<br/>\n    +metricsConsumerConf.put(Config.TOPOLOGY_TASKS, phintNum);<br/>\n    +Bolt metricsConsumerBolt = Thrift.prepareSerializedBoltDetails(inputs, new MetricsConsumerBolt(className, argument), null, phintNum, metricsConsumerConf);<br/>\n    +<br/>\n    +String id = className;<br/>\n    +if (classOccurrencesMap.containsKey(className)) </p>\n{\n    +    // e.g. [\\\"a\\\", \\\"b\\\", \\\"a\\\"]) => [\\\"a\\\", \\\"b\\\", \\\"a#2\\\"]\"\n    +    int occurrenceNum = classOccurrencesMap.get(className);\n    +    occurrenceNum++;\n    +    classOccurrencesMap.put(className, occurrenceNum);\n    +    id = Constants.METRICS_COMPONENT_ID_PREFIX + className + \"#\" + occurrenceNum;\n    +}\n<p> else </p>\n{\n    +    classOccurrencesMap.put(className, 1);\n    +}\n<p>    +metricsConsumerBolts.put(id, metricsConsumerBolt);<br/>\n    +    }<br/>\n    +}<br/>\n    +return metricsConsumerBolts;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricComponents(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = metricsConsumerBoltSpecs(conf, topology);<br/>\n    +for (Map.Entry<String, Bolt> entry : metricsConsumerBolts.entrySet()) </p>\n{\n    +    topology.put_to_bolts(entry.getKey(), entry.getValue());\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addSystemComponents(Map conf, StormTopology topology) </p>\n{\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();\n    +outputStreams.put(Constants.SYSTEM_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"rate_secs\")));\n    +outputStreams.put(Constants.METRICS_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"interval\")));\n    +outputStreams.put(Constants.CREDENTIALS_CHANGED_STREAM_ID, Thrift.outputFields(Arrays.asList(\"creds\")));\n    +\n    +Map<String, Object> boltConf = new HashMap<String, Object>();\n    +boltConf.put(Config.TOPOLOGY_TASKS, 0);\n    +\n    +Bolt systemBoltSpec = Thrift.prepareSerializedBoltDetails(null, new SystemBolt(), outputStreams, 0, boltConf);\n    +topology.put_to_bolts(Constants.SYSTEM_COMPONENT_ID, systemBoltSpec);\n    +    }\n<p>    +<br/>\n    +    public static StormTopology systemTopology(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +return _instance.systemTopologyImpl(stormConf, topology);\n    +    }\n<p>    +<br/>\n    +    protected StormTopology systemTopologyImpl(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +validateBasic(topology);\n    +\n    +StormTopology ret = topology.deepCopy();\n    +addAcker(stormConf, ret);\n    +addEventLogger(stormConf, ret);\n    +addMetricComponents(stormConf, ret);\n    +addSystemComponents(stormConf, ret);\n    +addMetricStreams(ret);\n    +addSystemStreams(ret);\n    +\n    +validateStructure(ret);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static boolean hasAckers(Map stormConf) {<br/>\n    +Object ackerNum = stormConf.get(Config.TOPOLOGY_ACKER_EXECUTORS);<br/>\n    +if (ackerNum == null || Utils.getInt(ackerNum) > 0) </p>\n{\n    +    return true;\n    +} else {\n    +    return false;\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static boolean hasEventLoggers(Map stormConf) {<br/>\n    +Object eventLoggerNum = stormConf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS);<br/>\n    +if (eventLoggerNum == null || Utils.getInt(eventLoggerNum) > 0) {    +    return true;    +}\n<p> else </p>\n{\n    +    return false;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static int numStartExecutors(Object component) throws InvalidTopologyException {<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common == null) </p>\n{\n    +    throw new InvalidTopologyException(\"unknown component type \" + component.getClass().getName());\n    +}\n<p>    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +return parallelismHintNum;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map stormTaskInfo(StormTopology userTopology, Map stormConf) throws InvalidTopologyException </p>\n{\n    +return _instance.stormTaskInfoImpl(userTopology, stormConf);\n    +    }\n<p>    +    /*<br/>\n    +     * Returns map from task -> componentId<br/>\n    +     */<br/>\n    +    protected Map stormTaskInfoImpl(StormTopology userTopology, Map stormConf) throws InvalidTopologyException {<br/>\n    +Map<Integer, String> taskIdToComponentId = new HashMap<Integer, String>();<br/>\n    +<br/>\n    +StormTopology systemTopology = systemTopology(stormConf, userTopology);<br/>\n    +Map<String, Object> components = allComponents(systemTopology);<br/>\n    +Map<String, Integer> componentIdToTaskNum = new TreeMap<String, Integer>();<br/>\n    +for (Map.Entry<String, Object> entry : components.entrySet()) {<br/>\n    +    Map conf = componentConf(entry.getValue());<br/>\n    +    Object taskNum = conf.get(Config.TOPOLOGY_TASKS);<br/>\n    +    if (taskNum != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This null check was not in the original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652030/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193484745","html_url":"https://github.com/apache/storm/pull/667#issuecomment-193484745","issue_url":"https://api.github.com/repos/apache/storm/issues/667","id":193484745,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ4NDc0NQ==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:28:16Z","updated_at":"2016-03-07T22:28:16Z","author_association":"CONTRIBUTOR","body":"JStorm's cgroups merged with #1053. Closing this PR.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193484745/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652035","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652035","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652035,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwMzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:30:11Z","updated_at":"2025-01-24T14:23:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55284650\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55284650</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"task-info\", \"data-points\"));\n    +common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addSystemStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"event\"));\n    +common.put_to_streams(SYSTEM_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> eventLoggerBoltFields() </p>\n{\n    +List<String> fields = Arrays.asList(EventLoggerBolt.FIELD_COMPONENT_ID, EventLoggerBolt.FIELD_MESSAGE_ID, EventLoggerBolt.FIELD_TS,\n    +EventLoggerBolt.FIELD_VALUES);\n    +return fields;\n    +    }\n<p>    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> eventLoggerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> allIds = new HashSet<String>();<br/>\n    +allIds.addAll(topology.get_bolts().keySet());<br/>\n    +allIds.addAll(topology.get_spouts().keySet());<br/>\n    +<br/>\n    +for(String id : allIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, EVENTLOGGER_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"component-id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addEventLogger(Map conf, StormTopology topology) {<br/>\n    +Integer numExecutors = Utils.getInt(conf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +HashMap<String, Object> componentConf = new HashMap<String, Object>();<br/>\n    +componentConf.put(Config.TOPOLOGY_TASKS, numExecutors);<br/>\n    +componentConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +Bolt eventLoggerBolt = Thrift.prepareSerializedBoltDetails(eventLoggerInputs(topology), new EventLoggerBolt(), null, numExecutors, componentConf);<br/>\n    +<br/>\n    +for(Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +common.put_to_streams(EVENTLOGGER_STREAM_ID, Thrift.outputFields(eventLoggerBoltFields()));\n    +    }\n<p>    +}<br/>\n    +topology.put_to_bolts(EVENTLOGGER_COMPONENT_ID, eventLoggerBolt);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, Bolt> metricsConsumerBoltSpecs(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = new HashMap<String, Bolt>();<br/>\n    +<br/>\n    +Set<String> componentIdsEmitMetrics = new HashSet<String>();<br/>\n    +componentIdsEmitMetrics.addAll(allComponents(topology).keySet());<br/>\n    +componentIdsEmitMetrics.add(Constants.SYSTEM_COMPONENT_ID);<br/>\n    +<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +for (String componentId : componentIdsEmitMetrics) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(componentId, Constants.METRICS_STREAM_ID), Thrift.prepareShuffleGrouping());\n    +}\n<p>    +<br/>\n    +List<Map<String, Object>> registerInfo = (List<Map<String, Object>>) conf.get(Config.TOPOLOGY_METRICS_CONSUMER_REGISTER);<br/>\n    +if (registerInfo != null) {<br/>\n    +    Map<String, Integer> classOccurrencesMap = new HashMap<String, Integer>();<br/>\n    +    for (Map<String, Object> info : registerInfo) {<br/>\n    +String className = (String) info.get(\"class\");<br/>\n    +Object argument = info.get(\"argument\");<br/>\n    +Integer phintNum = Utils.getInt(info.get(\"parallelism.hint\"), 1);<br/>\n    +Map<String, Object> metricsConsumerConf = new HashMap<String, Object>();<br/>\n    +metricsConsumerConf.put(Config.TOPOLOGY_TASKS, phintNum);<br/>\n    +Bolt metricsConsumerBolt = Thrift.prepareSerializedBoltDetails(inputs, new MetricsConsumerBolt(className, argument), null, phintNum, metricsConsumerConf);<br/>\n    +<br/>\n    +String id = className;<br/>\n    +if (classOccurrencesMap.containsKey(className)) </p>\n{\n    +    // e.g. [\\\"a\\\", \\\"b\\\", \\\"a\\\"]) => [\\\"a\\\", \\\"b\\\", \\\"a#2\\\"]\"\n    +    int occurrenceNum = classOccurrencesMap.get(className);\n    +    occurrenceNum++;\n    +    classOccurrencesMap.put(className, occurrenceNum);\n    +    id = Constants.METRICS_COMPONENT_ID_PREFIX + className + \"#\" + occurrenceNum;\n    +}\n<p> else </p>\n{\n    +    classOccurrencesMap.put(className, 1);\n    +}\n<p>    +metricsConsumerBolts.put(id, metricsConsumerBolt);<br/>\n    +    }<br/>\n    +}<br/>\n    +return metricsConsumerBolts;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricComponents(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = metricsConsumerBoltSpecs(conf, topology);<br/>\n    +for (Map.Entry<String, Bolt> entry : metricsConsumerBolts.entrySet()) </p>\n{\n    +    topology.put_to_bolts(entry.getKey(), entry.getValue());\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addSystemComponents(Map conf, StormTopology topology) </p>\n{\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();\n    +outputStreams.put(Constants.SYSTEM_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"rate_secs\")));\n    +outputStreams.put(Constants.METRICS_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"interval\")));\n    +outputStreams.put(Constants.CREDENTIALS_CHANGED_STREAM_ID, Thrift.outputFields(Arrays.asList(\"creds\")));\n    +\n    +Map<String, Object> boltConf = new HashMap<String, Object>();\n    +boltConf.put(Config.TOPOLOGY_TASKS, 0);\n    +\n    +Bolt systemBoltSpec = Thrift.prepareSerializedBoltDetails(null, new SystemBolt(), outputStreams, 0, boltConf);\n    +topology.put_to_bolts(Constants.SYSTEM_COMPONENT_ID, systemBoltSpec);\n    +    }\n<p>    +<br/>\n    +    public static StormTopology systemTopology(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +return _instance.systemTopologyImpl(stormConf, topology);\n    +    }\n<p>    +<br/>\n    +    protected StormTopology systemTopologyImpl(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +validateBasic(topology);\n    +\n    +StormTopology ret = topology.deepCopy();\n    +addAcker(stormConf, ret);\n    +addEventLogger(stormConf, ret);\n    +addMetricComponents(stormConf, ret);\n    +addSystemComponents(stormConf, ret);\n    +addMetricStreams(ret);\n    +addSystemStreams(ret);\n    +\n    +validateStructure(ret);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static boolean hasAckers(Map stormConf) {<br/>\n    +Object ackerNum = stormConf.get(Config.TOPOLOGY_ACKER_EXECUTORS);<br/>\n    +if (ackerNum == null || Utils.getInt(ackerNum) > 0) </p>\n{\n    +    return true;\n    +} else {\n    +    return false;\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static boolean hasEventLoggers(Map stormConf) {<br/>\n    +Object eventLoggerNum = stormConf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS);<br/>\n    +if (eventLoggerNum == null || Utils.getInt(eventLoggerNum) > 0) {    +    return true;    +}\n<p> else </p>\n{\n    +    return false;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static int numStartExecutors(Object component) throws InvalidTopologyException {<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common == null) </p>\n{\n    +    throw new InvalidTopologyException(\"unknown component type \" + component.getClass().getName());\n    +}\n<p>    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +return parallelismHintNum;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map stormTaskInfo(StormTopology userTopology, Map stormConf) throws InvalidTopologyException </p>\n{\n    +return _instance.stormTaskInfoImpl(userTopology, stormConf);\n    +    }\n<p>    +    /*<br/>\n    +     * Returns map from task -> componentId<br/>\n    +     */<br/>\n    +    protected Map stormTaskInfoImpl(StormTopology userTopology, Map stormConf) throws InvalidTopologyException {<br/>\n    +Map<Integer, String> taskIdToComponentId = new HashMap<Integer, String>();<br/>\n    +<br/>\n    +StormTopology systemTopology = systemTopology(stormConf, userTopology);<br/>\n    +Map<String, Object> components = allComponents(systemTopology);<br/>\n    +Map<String, Integer> componentIdToTaskNum = new TreeMap<String, Integer>();<br/>\n    +for (Map.Entry<String, Object> entry : components.entrySet()) {<br/>\n    +    Map conf = componentConf(entry.getValue());<br/>\n    +    Object taskNum = conf.get(Config.TOPOLOGY_TASKS);<br/>\n    +    if (taskNum != null) </p>\n{\n    +componentIdToTaskNum.put(entry.getKey(), Utils.getInt(taskNum));\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +int taskId = 1;<br/>\n    +for (Map.Entry<String, Integer> entry : componentIdToTaskNum.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    Integer taskNum = entry.getValue();<br/>\n    +    while (taskNum > 0) </p>\n{\n    +taskIdToComponentId.put(taskId, componentId);\n    +taskNum--;\n    +taskId++;\n    +    }\n<p>    +}<br/>\n    +return taskIdToComponentId;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<Integer> executorIdToTasks(List<Long> executorId) {<br/>\n    +List<Integer> taskIds = new ArrayList<Integer>();<br/>\n    +int taskId = executorId.get(0).intValue();<br/>\n    +while (taskId <= executorId.get(1).intValue()) </p>\n{\n    +    taskIds.add(taskId);\n    +    taskId++;\n    +}\n<p>    +return taskIds;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<Integer, NodeInfo> taskToNodeport(Map<List<Long>, NodeInfo> executorToNodeport) {<br/>\n    +Map<Integer, NodeInfo> tasksToNodeport = new HashMap<Integer, NodeInfo>();<br/>\n    +for (Map.Entry<List<Long>, NodeInfo> entry : executorToNodeport.entrySet()) {<br/>\n    +    List<Integer> taskIds = executorIdToTasks(entry.getKey());<br/>\n    +    for (Integer taskId : taskIds) </p>\n{\n    +tasksToNodeport.put(taskId, entry.getValue());\n    +    }\n<p>    +}<br/>\n    +return tasksToNodeport;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static IAuthorizer mkAuthorizationHandler(String klassName, Map conf) </p>\n{\n    +return _instance.mkAuthorizationHandlerImpl(klassName, conf);\n    +    }\n<p>    +<br/>\n    +    protected IAuthorizer mkAuthorizationHandlerImpl(String klassName, Map conf) {<br/>\n    +IAuthorizer aznHandler = null;<br/>\n    +try {<br/>\n    +    if (klassName != null) {<br/>\n    +Class aznClass = Class.forName(klassName);<br/>\n    +if (aznClass != null) {<br/>\n    +    aznHandler = (IAuthorizer) aznClass.newInstance();<br/>\n    +    if (aznHandler != null) </p>\n{\n    +aznHandler.prepare(conf);\n    +    }\n<p>    +    LOG.debug(\"authorization class name:{}, class:{}, handler:{}\",klassName, aznClass, aznHandler);<br/>\n    +}<br/>\n    +    }<br/>\n    +} catch (Exception e) {<br/>\n    +    LOG.error(\"Failed to make authorization handler, klassName:{}\", klassName);<br/>\n    +}<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The original code did not catch any exceptions it just threw them.  We should do the same.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652035/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652039","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652039","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652039,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwMzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:31:44Z","updated_at":"2025-01-24T14:23:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55284861\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55284861</a></p>\n\n<p>    &#8212; Diff: storm-core/test/clj/org/apache/storm/messaging/netty_integration_test.clj &#8212;<br/>\n    @@ -1,4 +1,3 @@<br/>\n    -<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Please revert the change to this file.  Not needed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652039/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193485875","html_url":"https://github.com/apache/storm/pull/296#issuecomment-193485875","issue_url":"https://api.github.com/repos/apache/storm/issues/296","id":193485875,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ4NTg3NQ==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:31:47Z","updated_at":"2016-03-07T22:31:47Z","author_association":"CONTRIBUTOR","body":"Closing this. Feel free to reopen with updates.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193485875/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504846","html_url":"https://github.com/apache/storm/issues/4374#issuecomment-2612504846","issue_url":"https://api.github.com/repos/apache/storm/issues/4374","id":2612504846,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MDQ4NDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:31:48Z","updated_at":"2025-01-24T13:14:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/296#issuecomment-193485875\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/296#issuecomment-193485875</a></p>\n\n<p>    Closing this. Feel free to reopen with updates.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504846/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504850","html_url":"https://github.com/apache/storm/issues/4374#issuecomment-2612504850","issue_url":"https://api.github.com/repos/apache/storm/issues/4374","id":2612504850,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MDQ4NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:32:15Z","updated_at":"2025-01-24T13:14:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/296\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/296</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504850/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652043","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652043","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652043,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwNDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:33:38Z","updated_at":"2025-01-24T14:23:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55285131\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55285131</a></p>\n\n<p>    &#8212; Diff: storm-core/test/jvm/org/apache/storm/utils/staticmocking/CommonInstaller.java &#8212;<br/>\n    @@ -0,0 +1,38 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one or more<br/>\n    + * contributor license agreements.  See the NOTICE file distributed with<br/>\n    + * this work for additional information regarding copyright ownership.<br/>\n    + * The ASF licenses this file to you under the Apache License, Version<br/>\n    + * 2.0 (the \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.utils.staticmocking;<br/>\n    +<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +<br/>\n    +public class CommonInstaller implements AutoCloseable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Do we need this and StormCommonInstaller???</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652043/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193486500","html_url":"https://github.com/apache/storm/pull/352#issuecomment-193486500","issue_url":"https://api.github.com/repos/apache/storm/issues/352","id":193486500,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ4NjUwMA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:33:58Z","updated_at":"2016-03-07T22:33:58Z","author_association":"CONTRIBUTOR","body":"Closing this. Feel free to reopen with updates.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193486500/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612515384","html_url":"https://github.com/apache/storm/issues/4432#issuecomment-2612515384","issue_url":"https://api.github.com/repos/apache/storm/issues/4432","id":2612515384,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MTUzODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:33:59Z","updated_at":"2025-01-24T13:19:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/352#issuecomment-193486500\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/352#issuecomment-193486500</a></p>\n\n<p>    Closing this. Feel free to reopen with updates.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612515384/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612515390","html_url":"https://github.com/apache/storm/issues/4432#issuecomment-2612515390","issue_url":"https://api.github.com/repos/apache/storm/issues/4432","id":2612515390,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MTUzOTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:34:38Z","updated_at":"2025-01-24T13:19:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/352\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/352</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612515390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612481329","html_url":"https://github.com/apache/storm/issues/4275#issuecomment-2612481329","issue_url":"https://api.github.com/repos/apache/storm/issues/4275","id":2612481329,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0ODEzMjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:35:09Z","updated_at":"2025-01-24T13:01:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/236\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/236</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612481329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652050","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652050","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652050,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwNTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:35:59Z","updated_at":"2025-01-24T14:23:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55285470\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55285470</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/executor.clj &#8212;<br/>\n    @@ -536,17 +536,17 @@<br/>\n (throw (RuntimeException. (str \"Fatal error, mismatched task ids: \" task-id \" \" stored-task-id))))<br/>\n       (let <span class=\"error\">&#91;time-delta (if start-time-ms (Time/deltaMs start-time-ms))&#93;</span><br/>\n (condp = stream-id</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>ACKER-ACK-STREAM-ID (ack-spout-msg executor-data (get task-datas task-id)<br/>\n    +      StormCommon/ACKER_ACK_STREAM_ID (ack-spout-msg executor-data (get task-datas task-id)<br/>\n      spout-id tuple-finished-info time-delta id)</li>\n\t<li>ACKER-FAIL-STREAM-ID (fail-spout-msg executor-data (get task-datas task-id)<br/>\n    +      StormCommon/ACKER_FAIL_STREAM_ID (fail-spout-msg executor-data (get task-datas task-id)<br/>\nspout-id tuple-finished-info time-delta \"FAIL-STREAM\" id)<br/>\n   )))<br/>\n     ;; TODO: on failure, emit tuple to failure stream<br/>\n     ))))<br/>\n     receive-queue (:receive-queue executor-data)<br/>\n     event-handler (mk-task-receiver executor-data tuple-action-fn)</li>\n\t<li>has-ackers? (has-ackers? storm-conf)</li>\n\t<li>has-eventloggers? (has-eventloggers? storm-conf)<br/>\n    +has-ackers? (clojurify-structure (StormCommon/hasAckers storm-conf))<br/>\n    +has-eventloggers? (clojurify-structure (StormCommon/hasEventLoggers storm-conf))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    I don't think these should need the `clojurify-structure` calls.  Were you seeing errors without it?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652050/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652055","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652055","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652055,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwNTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:36:42Z","updated_at":"2025-01-24T14:23:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55285564\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55285564</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/executor.clj &#8212;<br/>\n    @@ -742,7 +742,7 @@<br/>\n    (.getSourceComponent tuple)<br/>\n    (.getSourceStreamId tuple)<br/>\n    delta)))))))</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>has-eventloggers? (has-eventloggers? storm-conf)<br/>\n    +has-eventloggers? (clojurify-structure (StormCommon/hasEventLoggers storm-conf))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Here too I don't think `clojurify-structure` is needed.  Were you seeing errors without it?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652059","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652059","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652059,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwNTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:39:59Z","updated_at":"2025-01-24T14:23:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55285995\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55285995</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/worker.clj &#8212;<br/>\n    @@ -254,6 +254,9 @@<br/>\n     (log-error e \"Error when processing event\")<br/>\n     (Utils/exitProcess 20 \"Error when processing an event\")))))</p>\n\n<p>    +(defn executor->tasks <span class=\"error\">&#91;executor-id&#93;</span><br/>\n    +  clojurify-structure (StormCommon/executorIdToTasks executor-id))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Either we need to actually call `clojurify-structure` or we need to remove it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652059/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193488599","html_url":"https://github.com/apache/storm/pull/406#issuecomment-193488599","issue_url":"https://api.github.com/repos/apache/storm/issues/406","id":193488599,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ4ODU5OQ==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:40:19Z","updated_at":"2016-03-07T22:40:19Z","author_association":"CONTRIBUTOR","body":"Closing. Feel free to reopen with updates.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193488599/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193489321","html_url":"https://github.com/apache/storm/pull/396#issuecomment-193489321","issue_url":"https://api.github.com/repos/apache/storm/issues/396","id":193489321,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ4OTMyMQ==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:42:38Z","updated_at":"2016-03-07T22:42:38Z","author_association":"CONTRIBUTOR","body":"Closing this.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193489321/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612521715","html_url":"https://github.com/apache/storm/issues/4479#issuecomment-2612521715","issue_url":"https://api.github.com/repos/apache/storm/issues/4479","id":2612521715,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MjE3MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:42:41Z","updated_at":"2025-01-24T13:22:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/396#issuecomment-193489321\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/396#issuecomment-193489321</a></p>\n\n<p>    Closing this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612521715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612521717","html_url":"https://github.com/apache/storm/issues/4479#issuecomment-2612521717","issue_url":"https://api.github.com/repos/apache/storm/issues/4479","id":2612521717,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MjE3MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:42:56Z","updated_at":"2025-01-24T13:22:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/396\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/396</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612521717/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193489974","html_url":"https://github.com/apache/storm/pull/553#issuecomment-193489974","issue_url":"https://api.github.com/repos/apache/storm/issues/553","id":193489974,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ4OTk3NA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:44:50Z","updated_at":"2016-03-07T22:44:50Z","author_association":"CONTRIBUTOR","body":"Closing this. Feel free to reopen with updates.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193489974/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612531302","html_url":"https://github.com/apache/storm/issues/4551#issuecomment-2612531302","issue_url":"https://api.github.com/repos/apache/storm/issues/4551","id":2612531302,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MzEzMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:44:51Z","updated_at":"2025-01-24T13:27:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/553#issuecomment-193489974\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/553#issuecomment-193489974</a></p>\n\n<p>    Closing this. Feel free to reopen with updates.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612531302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612531308","html_url":"https://github.com/apache/storm/issues/4551#issuecomment-2612531308","issue_url":"https://api.github.com/repos/apache/storm/issues/4551","id":2612531308,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MzEzMDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:45:19Z","updated_at":"2025-01-24T13:27:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/553\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/553</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612531308/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193490519","html_url":"https://github.com/apache/storm/pull/1185#issuecomment-193490519","issue_url":"https://api.github.com/repos/apache/storm/issues/1185","id":193490519,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzQ5MDUxOQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:46:43Z","updated_at":"2016-03-07T22:46:43Z","author_association":"CONTRIBUTOR","body":"For the most part things look really good.  Just a lots of null checks that were not in the original code.  In these cases where we are validating the structure of the topology I really would prefer to see the code blow up with an NPE in those cases instead of silently skip over them.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193490519/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652066","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652066","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652066,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwNjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-07T22:46:44Z","updated_at":"2025-01-24T14:23:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#issuecomment-193490519\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#issuecomment-193490519</a></p>\n\n<p>    For the most part things look really good.  Just a lots of null checks that were not in the original code.  In these cases where we are validating the structure of the topology I really would prefer to see the code blow up with an NPE in those cases instead of silently skip over them.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652066/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645036","html_url":"https://github.com/apache/storm/issues/5070#issuecomment-2612645036","issue_url":"https://api.github.com/repos/apache/storm/issues/5070","id":2612645036,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDUwMzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T01:24:59Z","updated_at":"2025-01-24T14:20:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191#discussion_r55303331\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191#discussion_r55303331</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/AuthUtils.java &#8212;<br/>\n    @@ -81,35 +80,88 @@ public static Configuration GetConfiguration(Map storm_conf) {<br/>\n }</p>\n\n<p> /**</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>* Pull a set of keys out of a Configuration.</li>\n\t<li>* @param conf The config to pull the key/value pairs out of.</li>\n\t<li>* @param conf_entry The app configuration entry name to get stuff from.</li>\n\t<li>* @return Return a map of the configs in conf.<br/>\n    +     * Get configurations for a section<br/>\n    +     * @param configuration The config to pull the key/value pairs out of.<br/>\n    +     * @param section The app configuration entry name to get stuff from.<br/>\n    +     * @return Return array of config entries or null if configuration is null<br/>\n  */</li>\n\t<li>public static SortedMap<String, ?> PullConfig(Configuration conf,</li>\n\t<li>String conf_entry) throws IOException {</li>\n\t<li>if(conf == null) {<br/>\n    +    public static AppConfigurationEntry[] getEntries(Configuration configuration, <br/>\n    +String section) throws IOException {<br/>\n    +if (configuration == null) \n{\n return null;\n     }</li>\n\t<li>AppConfigurationEntry configurationEntries[] = conf.getAppConfigurationEntry(conf_entry);</li>\n\t<li>if(configurationEntries == null) {</li>\n\t<li>String errorMessage = \"Could not find a '\" + conf_entry</li>\n\t<li>+ \"' entry in this configuration: Client cannot start.\";<br/>\n    +<br/>\n    +AppConfigurationEntry configurationEntries[] = configuration.getAppConfigurationEntry(section);<br/>\n    +if (configurationEntries == null) \n{\n    +    String errorMessage = \"Could not find a '\"+ section + \"' entry in this configuration.\";\n throw new IOException(errorMessage);\n     }\n<p>    +return configurationEntries;<br/>\n    +    }</p></li>\n</ul>\n\n\n<p>    +    /**<br/>\n    +     * Pull a set of keys out of a Configuration.<br/>\n    +     * @param configuration The config to pull the key/value pairs out of.<br/>\n    +     * @param section The app configuration entry name to get stuff from.<br/>\n    +     * @return Return a map of the configs in conf.<br/>\n    +     */<br/>\n    +    public static SortedMap<String, ?> pullConfig(Configuration configuration,<br/>\n    +    String section) throws IOException {<br/>\n    +AppConfigurationEntry[] configurationEntries = AuthUtils.getEntries(configuration, section);<br/>\n    +<br/>\n    +if (configurationEntries == null) </p>\n{\n    +    return null;\n    +}<br/>\n    +<br/>\n     TreeMap<String, Object> results = new TreeMap<>();<br/>\n     <br/>\n    -for(AppConfigurationEntry entry: configurationEntries) {<br/>\n    +for (AppConfigurationEntry entry: configurationEntries) {<br/>\n Map<String, ?> options = entry.getOptions();<br/>\n    -    for(String key : options.keySet()) {<br/>\n    +    for (String key : options.keySet()) {\n     results.put(key, options.get(key));\n }<br/>\n     }<br/>\n    +<br/>\n     return results;<br/>\n }<br/>\n     <br/>\n /**<br/>\n    +     * Pull a the value given section and key from Configuration<br/>\n    +     * @param configuration The config to pull the key/value pairs out of.<br/>\n    +     * @param section The app configuration entry name to get stuff from.<br/>\n    +     * @param key The key to look up inside of the section<br/>\n    +     * @return Return a the String value of the configuration value<br/>\n    +     */<br/>\n    +    public static String get(Configuration configuration, String section, String key) throws IOException {<br/>\n    +AppConfigurationEntry[] configurationEntries = AuthUtils.getEntries(configuration, section);<br/>\n    +<br/>\n    +if (configurationEntries == null){    +    return null;    +}\n<p>    +<br/>\n    +for (AppConfigurationEntry entry: configurationEntries) </p>\n{\n    +    Object val = entry.getOptions().get(key);\n    +    if (val != null)\n    +return (String)val;\n    +}\n<p>    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Instantiate class with klassName and return instance<br/>\n    +     * @param klassName The class name<br/>\n    +     * @return Instance of type T<br/>\n    +     */<br/>\n    +    private static <T> T makeClass(String klassName) {<br/>\n    +try </p>\n{\n    +    Class klass = Class.forName(klassName);\n    +    return (T)klass.newInstance();\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw new RuntimeException(e);\n    +}\n<p>    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think it's better to replace this method by  Utils.newInstance</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645036/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193545149","html_url":"https://github.com/apache/storm/pull/1183#issuecomment-193545149","issue_url":"https://api.github.com/repos/apache/storm/issues/1183","id":193545149,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzU0NTE0OQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T01:27:49Z","updated_at":"2016-03-08T01:27:49Z","author_association":"CONTRIBUTOR","body":"@knusbaum STORM-1463 is just one of them.\nI can't find other issues which affect this since history for supervisor.clj is gone when moving package.\nDo we want to just sync up with supervisor.clj in 1.x-branch (only log related) disregarding the history (finding whole issues and change fix versions)?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193545149/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880179","html_url":"https://github.com/apache/storm/issues/5438#issuecomment-2612880179","issue_url":"https://api.github.com/repos/apache/storm/issues/5438","id":2612880179,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODAxNzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T01:27:52Z","updated_at":"2025-01-24T16:05:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1183#issuecomment-193545149\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1183#issuecomment-193545149</a></p>\n\n<p>    @knusbaum <a href=\"https://issues.apache.org/jira/browse/STORM-1463\" title=\"log4j dir uri should always have file schema\" class=\"issue-link\" data-issue-key=\"STORM-1463\"><del>STORM-1463</del></a> is just one of them.<br/>\n    I can't find other issues which affect this since history for supervisor.clj is gone when moving package.<br/>\n    Do we want to just sync up with supervisor.clj in 1.x-branch (only log related) disregarding the history (finding whole issues and change fix versions)?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880179/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645041","html_url":"https://github.com/apache/storm/issues/5070#issuecomment-2612645041","issue_url":"https://api.github.com/repos/apache/storm/issues/5070","id":2612645041,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDUwNDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T01:53:54Z","updated_at":"2025-01-24T14:20:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191#discussion_r55305746\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191#discussion_r55305746</a></p>\n\n<p>    &#8212; Diff: storm-core/test/jvm/org/apache/storm/security/auth/AuthUtilsTest.java &#8212;<br/>\n    @@ -0,0 +1,227 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.io.File;<br/>\n    +import java.security.MessageDigest;<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.Arrays;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import javax.security.auth.login.AppConfigurationEntry;<br/>\n    +import javax.security.auth.login.Configuration;<br/>\n    +import javax.security.auth.Subject;<br/>\n    +<br/>\n    +import org.apache.commons.codec.binary.Hex;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.junit.Assert;<br/>\n    +import org.junit.Rule;<br/>\n    +import org.junit.rules.TemporaryFolder;<br/>\n    +import org.junit.Test;<br/>\n    +import org.mockito.Mockito;<br/>\n    +<br/>\n    +public class AuthUtilsTest {<br/>\n    +<br/>\n    +    @Test(expected=IOException.class)<br/>\n    +    public void getOptionsThrowsOnMissingSectionTest() throws IOException </p>\n{\n    +Configuration mockConfig = Mockito.mock(Configuration.class);\n    +AuthUtils.get(mockConfig, \"bogus-section\", \"\");\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void getNonExistentSectionTest() throws IOException {<br/>\n    +Map<String, String> optionMap = new HashMap<String, String>();<br/>\n    +AppConfigurationEntry entry = Mockito.mock(AppConfigurationEntry.class);<br/>\n    +<br/>\n    +Mockito.<Map<String, ?>>when(entry.getOptions()).thenReturn(optionMap);<br/>\n    +String section = \"bogus-section\";<br/>\n    +Configuration mockConfig = Mockito.mock(Configuration.class);<br/>\n    +Mockito.when(mockConfig.getAppConfigurationEntry(section))<br/>\n    +       .thenReturn(new AppConfigurationEntry[] </p>\n{entry});<br/>\n    +Assert.assertNull(<br/>\n    +AuthUtils.get(mockConfig, section, \"nonexistent-key\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    @Test<br/>\n    +    public void getFirstValueForValidKeyTest() throws IOException {<br/>\n    +Map<String, String> optionMap = new HashMap<String, String>();<br/>\n    +optionMap.put(\"existent-key\", \"foo\");<br/>\n    +AppConfigurationEntry entry = Mockito.mock(AppConfigurationEntry.class);<br/>\n    +<br/>\n    +Mockito.<Map<String, ?>>when(entry.getOptions()).thenReturn(optionMap);<br/>\n    +String section = \"bogus-section\";<br/>\n    +Configuration mockConfig = Mockito.mock(Configuration.class);<br/>\n    +Mockito.when(mockConfig.getAppConfigurationEntry(section))<br/>\n    +       .thenReturn(new AppConfigurationEntry[] {entry}\n<p>);<br/>\n    +Assert.assertEquals(<br/>\n    +AuthUtils.get(mockConfig, section, \"existent-key\"), \"foo\");<br/>\n    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The test logic is different with clojure's test-returns-first-value-for-valid-key</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645047","html_url":"https://github.com/apache/storm/issues/5070#issuecomment-2612645047","issue_url":"https://api.github.com/repos/apache/storm/issues/5070","id":2612645047,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDUwNDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T03:01:06Z","updated_at":"2025-01-24T14:20:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abellina commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191#discussion_r55310666\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191#discussion_r55310666</a></p>\n\n<p>    &#8212; Diff: storm-core/test/jvm/org/apache/storm/security/auth/AuthUtilsTest.java &#8212;<br/>\n    @@ -0,0 +1,227 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.io.File;<br/>\n    +import java.security.MessageDigest;<br/>\n    +import java.security.NoSuchAlgorithmException;<br/>\n    +import java.util.Arrays;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import javax.security.auth.login.AppConfigurationEntry;<br/>\n    +import javax.security.auth.login.Configuration;<br/>\n    +import javax.security.auth.Subject;<br/>\n    +<br/>\n    +import org.apache.commons.codec.binary.Hex;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.junit.Assert;<br/>\n    +import org.junit.Rule;<br/>\n    +import org.junit.rules.TemporaryFolder;<br/>\n    +import org.junit.Test;<br/>\n    +import org.mockito.Mockito;<br/>\n    +<br/>\n    +public class AuthUtilsTest {<br/>\n    +<br/>\n    +    @Test(expected=IOException.class)<br/>\n    +    public void getOptionsThrowsOnMissingSectionTest() throws IOException </p>\n{\n    +Configuration mockConfig = Mockito.mock(Configuration.class);\n    +AuthUtils.get(mockConfig, \"bogus-section\", \"\");\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void getNonExistentSectionTest() throws IOException {<br/>\n    +Map<String, String> optionMap = new HashMap<String, String>();<br/>\n    +AppConfigurationEntry entry = Mockito.mock(AppConfigurationEntry.class);<br/>\n    +<br/>\n    +Mockito.<Map<String, ?>>when(entry.getOptions()).thenReturn(optionMap);<br/>\n    +String section = \"bogus-section\";<br/>\n    +Configuration mockConfig = Mockito.mock(Configuration.class);<br/>\n    +Mockito.when(mockConfig.getAppConfigurationEntry(section))<br/>\n    +       .thenReturn(new AppConfigurationEntry[] </p>\n{entry});<br/>\n    +Assert.assertNull(<br/>\n    +AuthUtils.get(mockConfig, section, \"nonexistent-key\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    @Test<br/>\n    +    public void getFirstValueForValidKeyTest() throws IOException {<br/>\n    +Map<String, String> optionMap = new HashMap<String, String>();<br/>\n    +optionMap.put(\"existent-key\", \"foo\");<br/>\n    +AppConfigurationEntry entry = Mockito.mock(AppConfigurationEntry.class);<br/>\n    +<br/>\n    +Mockito.<Map<String, ?>>when(entry.getOptions()).thenReturn(optionMap);<br/>\n    +String section = \"bogus-section\";<br/>\n    +Configuration mockConfig = Mockito.mock(Configuration.class);<br/>\n    +Mockito.when(mockConfig.getAppConfigurationEntry(section))<br/>\n    +       .thenReturn(new AppConfigurationEntry[] {entry}\n<p>);<br/>\n    +Assert.assertEquals(<br/>\n    +AuthUtils.get(mockConfig, section, \"existent-key\"), \"foo\");<br/>\n    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Thanks @hustfxj, fixed that.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645047/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880425","html_url":"https://github.com/apache/storm/issues/5439#issuecomment-2612880425","issue_url":"https://api.github.com/repos/apache/storm/issues/5439","id":2612880425,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA0MjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T04:20:11Z","updated_at":"2025-01-24T16:05:57Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abellina commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1188#discussion_r55314671\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1188#discussion_r55314671</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/nimbus.clj &#8212;<br/>\n    @@ -1334,7 +1334,7 @@<br/>\n  (.unset_reset_log_level_timeout_epoch log-config))))</p>\n\n<p>     (defmethod blob-sync :distributed <span class=\"error\">&#91;conf nimbus&#93;</span></p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(if (not (is-leader nimbus :throw-exception false))<br/>\n    +  (if (not (is-leader nimbus :throw-exception false\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Looks like a missing parenthesis</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880425/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645050","html_url":"https://github.com/apache/storm/issues/5070#issuecomment-2612645050","issue_url":"https://api.github.com/repos/apache/storm/issues/5070","id":2612645050,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDUwNTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T05:08:05Z","updated_at":"2025-01-24T14:20:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191#discussion_r55316972\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191#discussion_r55316972</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/AuthUtils.java &#8212;<br/>\n    @@ -240,8 +290,8 @@ public static Subject populateSubject(Subject subject, Collection<IAutoCredentia</p>\n<ul>\n\t<li>@param credentials the credentials to pull from<br/>\n  */<br/>\n public static void updateSubject(Subject subject, Collection<IAutoCredentials> autos, Map<String,String> credentials) {</li>\n</ul>\n<ul class=\"alternate\" type=\"square\">\n\t<li>if (subject == null) {</li>\n\t<li>throw new RuntimeException(\"The subject cannot be null when updating a subject with credentials\");<br/>\n    +if (subject == null || autos == null) {<br/>\n    +    throw new RuntimeException(\"Both subject and auto credentials cannot be null when updating a subject with credentials\");\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Minor. \"The subject or auto credentials..\"</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645050/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193616307","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-193616307","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":193616307,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzYxNjMwNw==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T05:31:52Z","updated_at":"2016-03-08T05:36:23Z","author_association":"CONTRIBUTOR","body":"@revans2 anchoring/acking in enforced for stateful & non-stateful bolts in a stateful topology to provide at-least once guarantee for the state updates. For the stateful bolts, the tuples that were part of the last state update are automatically acked after that state update is committed. Non-stateful bolts need to either extend the BaseBasicBolt or do the acking themselves.\n\nThe state checkpointing mechanism and the guarantee is documented [here](https://github.com/apache/storm/blob/asf-site/documentation/State-checkpointing.md). This does not explicitly mention whether the bolt is expected to ack or not. I can add that to the doc and the javadocs.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193616307/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881091","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881091","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881091,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEwOTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T05:31:55Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-193616307\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-193616307</a></p>\n\n<p>    @revans2 anchoring/acking in enforced for stateful & non-stateful bolts in a stateful topology to provide at-least once guarantee for the state updates. For the stateful bolts, the tuples that were part of the last state update are automatically acked after that state update is committed. Non-stateful bolts need to either extend the BaseBasicBolt or do the acking themselves.</p>\n\n<p>    The state checkpointing mechanism and the guarantee is documented <span class=\"error\">&#91;here&#93;</span>(<a href=\"https://github.com/apache/storm/blob/asf-site/documentation/State-checkpointing.mdl\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/asf-site/documentation/State-checkpointing.mdl</a>). This does not explicitly mention whether the bolt is expected to ack or not. I can add that to the doc and the javadocs.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881091/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881483","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881483","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881483,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE0ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T10:55:43Z","updated_at":"2025-01-24T16:06:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user hustfxj opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1610\" title=\"port pacemaker-state-factory-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1610\"><del>STORM-1610</del></a> port pacemaker_state_factory_test.clj to java</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/hustfxj/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/hustfxj/storm</a> pacemaker-state-factory-test</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1192</p>\n\n<hr />\n<p>commit c1a240cd6f76fa4ac4db2c26c28b4dd8fd1c3d24<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-03-08T10:52:47Z</p>\n\n<p>    port pacemaker_state_factory_test.clj to java</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881483/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193738634","html_url":"https://github.com/apache/storm/pull/1184#issuecomment-193738634","issue_url":"https://api.github.com/repos/apache/storm/issues/1184","id":193738634,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzczODYzNA==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T11:29:31Z","updated_at":"2016-03-08T11:29:31Z","author_association":"CONTRIBUTOR","body":"@zhuoliu @abhishekagarwal87  Thank you. I will consider your suggestions, and adjust class hierarchy. Of course, I hope others can help review the supervisor and give me some comments. Then I will revise the codes together in order to avoid to different suggestions and repeat modifications. Thank you again.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193738634/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193758244","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-193758244","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":193758244,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzc1ODI0NA==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T12:11:13Z","updated_at":"2016-03-08T12:11:13Z","author_association":"CONTRIBUTOR","body":"@revans2 @abhishekagarwal87 could you take a look?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193758244/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652618","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652618","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652618,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T12:11:14Z","updated_at":"2025-01-24T14:23:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-193758244\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-193758244</a></p>\n\n<p>    @revans2 @abhishekagarwal87 could you take a look?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652618/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652625","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652625","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652625,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2MjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T12:21:12Z","updated_at":"2025-01-24T14:23:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55351778\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55351778</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/supervisor.clj &#8212;<br/>\n    @@ -1297,7 +1297,7 @@<br/>\n   (.readBlobTo blob-store (ConfigUtils/masterStormConfKey storm-id) (FileOutputStream. (ConfigUtils/supervisorStormConfPath tmproot)) nil)<br/>\n   (finally<br/>\n     (.shutdown blob-store)))</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(FileUtils/moveDirectory (File. tmproot) (File. stormroot))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    this file can be reverted. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652625/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193767423","html_url":"https://github.com/apache/storm/pull/1184#issuecomment-193767423","issue_url":"https://api.github.com/repos/apache/storm/issues/1184","id":193767423,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzc2NzQyMw==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T12:37:41Z","updated_at":"2016-03-08T12:37:41Z","author_association":"CONTRIBUTOR","body":"Sure @hustfxj  Makes sense\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193767423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652629","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652629","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652629,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2Mjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T12:47:25Z","updated_at":"2025-01-24T14:23:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55354139\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55354139</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, InternalRequest> e : outstandingRequests.entrySet()) {<br/>\n    +    InternalRequest internalRequest = e.getValue();<br/>\n    +    if (Time.deltaSecs(internalRequest.startTimeSecs) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS))) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = internalRequest.sem;<br/>\n    +if (sem != null) {<br/>\n    +    String func = internalRequest.function;<br/>\n    +    acquireQueue(func).remove(internalRequest.request);<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer() throws Exception {<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +initThrift();<br/>\n    +initHttp();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +outstandingRequests.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} ({}) at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int newid = 0;<br/>\n    +int orig = 0;<br/>\n    +do </p>\n{\n    +    orig = ctr.get();\n    +    newid = (orig + 1) % 1000000000;\n    +}\n<p> while (!ctr.compareAndSet(orig, newid));<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +InternalRequest internalRequest = new InternalRequest(functionName, req);<br/>\n    +this.outstandingRequests.put(strid, internalRequest);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    internalRequest.sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = internalRequest.result;<br/>\n    +<br/>\n    +LOG.debug(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return (String) result;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +InternalRequest internalRequest = this.outstandingRequests.get(id);<br/>\n    +if (internalRequest != null) {<br/>\n    +    Map<String, String> map = ImmutableMap.of(DRPCAuthorizerBase.FUNCTION_NAME, internalRequest.function);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = internalRequest.sem;<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +internalRequest.result = result;\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +InternalRequest internalRequest = this.outstandingRequests.get(id);<br/>\n    +if (internalRequest != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, internalRequest.function);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = internalRequest.sem;<br/>\n    +    if (sem != null) </p>\n{\n    +internalRequest.result = new DRPCExecutionException(\"Request failed\");\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) {<br/>\n    +    reqQueue = new ConcurrentLinkedQueue<>();<br/>\n    +    ConcurrentLinkedQueue<DRPCRequest> old = requestQueues.putIfAbsent(function, reqQueue);<br/>\n    +    if (old != null) </p>\n{\n    +reqQueue = old;\n    +    }\n<p>    +}<br/>\n    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is not called in this class and has been marked private. So it can be removed I believe. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652629/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652635","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652635","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652635,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T12:55:29Z","updated_at":"2025-01-24T14:23:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55354774\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55354774</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, InternalRequest> e : outstandingRequests.entrySet()) {<br/>\n    +    InternalRequest internalRequest = e.getValue();<br/>\n    +    if (Time.deltaSecs(internalRequest.startTimeSecs) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS))) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = internalRequest.sem;<br/>\n    +if (sem != null) {<br/>\n    +    String func = internalRequest.function;<br/>\n    +    acquireQueue(func).remove(internalRequest.request);<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer() throws Exception {<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +initThrift();<br/>\n    +initHttp();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +outstandingRequests.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} ({}) at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int newid = 0;<br/>\n    +int orig = 0;<br/>\n    +do </p>\n{\n    +    orig = ctr.get();\n    +    newid = (orig + 1) % 1000000000;\n    +}\n<p> while (!ctr.compareAndSet(orig, newid));<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +InternalRequest internalRequest = new InternalRequest(functionName, req);<br/>\n    +this.outstandingRequests.put(strid, internalRequest);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    internalRequest.sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = internalRequest.result;<br/>\n    +<br/>\n    +LOG.debug(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return (String) result;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +InternalRequest internalRequest = this.outstandingRequests.get(id);<br/>\n    +if (internalRequest != null) {<br/>\n    +    Map<String, String> map = ImmutableMap.of(DRPCAuthorizerBase.FUNCTION_NAME, internalRequest.function);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = internalRequest.sem;<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +internalRequest.result = result;\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +InternalRequest internalRequest = this.outstandingRequests.get(id);<br/>\n    +if (internalRequest != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, internalRequest.function);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    It would be good to have operation names declared as public static variables. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652635/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193776807","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-193776807","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":193776807,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzc3NjgwNw==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T12:58:47Z","updated_at":"2016-03-08T12:58:47Z","author_association":"CONTRIBUTOR","body":"Thanks @hustfxj . Looks good to me.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193776807/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652641","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652641","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652641,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T12:58:48Z","updated_at":"2025-01-24T14:23:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-193776807\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-193776807</a></p>\n\n<p>    Thanks @hustfxj . Looks good to me.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652641/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193779060","html_url":"https://github.com/apache/storm/pull/1192#issuecomment-193779060","issue_url":"https://api.github.com/repos/apache/storm/issues/1192","id":193779060,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzc3OTA2MA==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T13:08:53Z","updated_at":"2016-03-08T13:08:53Z","author_association":"CONTRIBUTOR","body":"You can put \n\n```\nPaceMakerClientProxy clientProxy = new PaceMakerClientProxy(response, null);\nPaceMakerStateStorage stateStorage = new PaceMakerStateStorage(clientProxy, null);\n```\n\nin a method annotated with @Before of Junit and declare stateStorage as global variable. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193779060/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881492","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881492","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881492,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE0OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T13:08:54Z","updated_at":"2025-01-24T16:06:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192#issuecomment-193779060\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192#issuecomment-193779060</a></p>\n\n<p>    You can put <br/>\n    ```<br/>\n    PaceMakerClientProxy clientProxy = new PaceMakerClientProxy(response, null);<br/>\n    PaceMakerStateStorage stateStorage = new PaceMakerStateStorage(clientProxy, null);<br/>\n    ```<br/>\n    in a method annotated with @Before of Junit and declare stateStorage as global variable. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881492/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193779382","html_url":"https://github.com/apache/storm/pull/1147#issuecomment-193779382","issue_url":"https://api.github.com/repos/apache/storm/issues/1147","id":193779382,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzc3OTM4Mg==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T13:10:12Z","updated_at":"2016-03-08T13:10:12Z","author_association":"NONE","body":"@revans2 I've changed according to your opinion, still, the code in StatsUtil might be quite rough and clojure-way, I just want to make sure it's the right move, hope you can take a quick look.\nMy changes are:\n1. changed executor heartbeat structure to java HashMap instead of clojure map (and yes there's still a Map anyway)\n2. moved update-heartbeat-cache method into StatsUtil.java, because of the change to clojure structure to HashMap, they should be moved back when translating nimbus.clj, I added TODO in methods.\n3. because the HashMap structure is quite mixed, e.g., it may store \"rate\" of stats which is a double, and store \"emitted\" which is a HashMap, so in many methods, I used Map<String, Object>.\n4. for structures like \"executor->host+port\", I still used the original clojure structure because I think they might be used somewhere else, I only want to change stats related with this PR \n\nBTW. about your test last time, it's actually a bug of my code, I fixed this, sorry for the confusion.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193779382/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648401","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648401","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648401,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg0MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T13:10:13Z","updated_at":"2025-01-24T14:21:57Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#issuecomment-193779382\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#issuecomment-193779382</a></p>\n\n<p>    @revans2 I've changed according to your opinion, still, the code in StatsUtil might be quite rough and clojure-way, I just want to make sure it's the right move, hope you can take a quick look.<br/>\n    My changes are:<br/>\n    1. changed executor heartbeat structure to java HashMap instead of clojure map (and yes there's still a Map anyway)<br/>\n    2. moved update-heartbeat-cache method into StatsUtil.java, because of the change to clojure structure to HashMap, they should be moved back when translating nimbus.clj, I added TODO in methods.<br/>\n    3. because the HashMap structure is quite mixed, e.g., it may store \"rate\" of stats which is a double, and store \"emitted\" which is a HashMap, so in many methods, I used Map<String, Object>.<br/>\n    4. for structures like \"executor->host+port\", I still used the original clojure structure because I think they might be used somewhere else, I only want to change stats related with this PR </p>\n\n<p>    BTW. about your test last time, it's actually a bug of my code, I fixed this, sorry for the confusion.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648401/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193793125","html_url":"https://github.com/apache/storm/pull/1192#issuecomment-193793125","issue_url":"https://api.github.com/repos/apache/storm/issues/1192","id":193793125,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzc5MzEyNQ==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T13:53:32Z","updated_at":"2016-03-08T13:53:32Z","author_association":"MEMBER","body":"@abhishekagarwal87 @hustfxj \nI do not think @Before annotation can be used here as it needs to create storage for different HBServerMessageType instances in test methods.\n\nYou may want to extract methods like below and use it in respective test methods.  \n\n``` java\npublic PaceMakerStateStorage createPaceMakerStateStorage(HBServerMessageType messageType) {\n  return createPaceMakerStateStorage(createPaceMakerStateStorage, null);\n}\n\npublic PaceMakerStateStorage createPaceMakerStateStorage(HBServerMessageType messageType, HBMessageData messageData) {\n  HBMessage response = new HBMessage(messageType, messageData);\n  PaceMakerClientProxy clientProxy = new PaceMakerClientProxy(response, null);\n  PaceMakerStateStorage stateStorage = new PaceMakerStateStorage(clientProxy, null);\n```\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193793125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881497","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881497","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881497,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE0OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T13:53:33Z","updated_at":"2025-01-24T16:06:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192#issuecomment-193793125\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192#issuecomment-193793125</a></p>\n\n<p>    @abhishekagarwal87 @hustfxj <br/>\n    I do not think @Before annotation can be used here as it needs to create storage for different HBServerMessageType instances in test methods.</p>\n\n<p>    You may want to extract methods like below and use it in respective test methods.  <br/>\n    ``` java<br/>\n    public PaceMakerStateStorage createPaceMakerStateStorage(HBServerMessageType messageType) </p>\n{\n      return createPaceMakerStateStorage(createPaceMakerStateStorage, null);\n    }\n\n<p>    public PaceMakerStateStorage createPaceMakerStateStorage(HBServerMessageType messageType, HBMessageData messageData) {<br/>\n      HBMessage response = new HBMessage(messageType, messageData);<br/>\n      PaceMakerClientProxy clientProxy = new PaceMakerClientProxy(response, null);<br/>\n      PaceMakerStateStorage stateStorage = new PaceMakerStateStorage(clientProxy, null);<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881497/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193803584","html_url":"https://github.com/apache/storm/pull/1192#issuecomment-193803584","issue_url":"https://api.github.com/repos/apache/storm/issues/1192","id":193803584,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzgwMzU4NA==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T14:27:54Z","updated_at":"2016-03-08T14:27:54Z","author_association":"CONTRIBUTOR","body":"@satishd I missed that. +1 to what you have suggested\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193803584/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881502","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881502","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881502,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE1MDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T14:27:55Z","updated_at":"2025-01-24T16:06:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192#issuecomment-193803584\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192#issuecomment-193803584</a></p>\n\n<p>    @satishd I missed that. +1 to what you have suggested</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881502/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645051","html_url":"https://github.com/apache/storm/issues/5070#issuecomment-2612645051","issue_url":"https://api.github.com/repos/apache/storm/issues/5070","id":2612645051,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDUwNTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T15:13:14Z","updated_at":"2025-01-24T14:20:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abellina closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645051/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645064","html_url":"https://github.com/apache/storm/issues/5070#issuecomment-2612645064","issue_url":"https://api.github.com/repos/apache/storm/issues/5070","id":2612645064,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDUwNjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T15:13:15Z","updated_at":"2025-01-24T14:20:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user abellina reopened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1233\" title=\"port backtype.storm.security.auth.AuthUtils-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1233\"><del>STORM-1233</del></a>: Port AuthUtilsTest to java</p>\n\n<p>    I did a little bit of refactoring in AuthUtils:</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>Using Hex.encodeHexString in makeDigestPayload instead of StringBuilder and String.format</li>\n\t<li>Factored out the reflective class instantiations as a generic functions.</li>\n\t<li>Added a null check in updateSubject</li>\n</ul>\n\n\n<p>    I am also using JUnit TemporaryFolder to create temp folders which should be deleted after the test runs.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/abellina/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/abellina/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1233\" title=\"port backtype.storm.security.auth.AuthUtils-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1233\"><del>STORM-1233</del></a>_port_AuthUtils_test_to_java</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1191</p>\n\n<hr />\n<p>commit b795bd7e47e79f1e6b063db543b6d8fbfd3620f3<br/>\nAuthor: Alessandro Bellina <abellina@yahoo-inc.com><br/>\nDate:   2016-02-29T13:49:07Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1233\" title=\"port backtype.storm.security.auth.AuthUtils-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1233\"><del>STORM-1233</del></a>: Port AuthUtilsTest to java</p>\n\n<p>commit 087bf71cc1c15dac454ec729401fabfec2df9a5e<br/>\nAuthor: Alessandro Bellina <abellina@yahoo-inc.com><br/>\nDate:   2016-03-08T02:59:55Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1233\" title=\"port backtype.storm.security.auth.AuthUtils-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1233\"><del>STORM-1233</del></a>: use Utils.newInstance and port correct logic for test-returns-first-value-for-valid-key</p>\n\n<p>commit fd02a09a75abb8afaeca8d5b6606e49051288c34<br/>\nAuthor: Alessandro Bellina <abellina@gmail.com><br/>\nDate:   2016-03-08T14:04:38Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1233\" title=\"port backtype.storm.security.auth.AuthUtils-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1233\"><del>STORM-1233</del></a>: update exception wording</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645064/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881943","html_url":"https://github.com/apache/storm/issues/5447#issuecomment-2612881943","issue_url":"https://api.github.com/repos/apache/storm/issues/5447","id":2612881943,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE5NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T15:36:31Z","updated_at":"2025-01-24T16:06:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user ppoulosk opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1193\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1193</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1612\" title=\"netty_unity_test uses hardcoded port \" class=\"issue-link\" data-issue-key=\"STORM-1612\"><del>STORM-1612</del></a> Remove hardcoded port, and unreferenced global from netty_unit_test</p>\n\n<p>    Just remove the unnecessary hardcoded port, so that the call will return an ephemeral port, and remove unused global \"port\".</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/ppoulosk/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/ppoulosk/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1612\" title=\"netty_unity_test uses hardcoded port \" class=\"issue-link\" data-issue-key=\"STORM-1612\"><del>STORM-1612</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1193.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1193.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1193</p>\n\n<hr />\n<p>commit 54a501e04254b06baf58e86c4767c925ce7f9d80<br/>\nAuthor: Paul Poulosky <ppoulosk@thenperfect-lm.champ.corp.yahoo.com><br/>\nDate:   2016-03-08T15:29:15Z</p>\n\n<p>    Remove hardcoded port, and unreferenced global from netty_unit_test</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193839237","html_url":"https://github.com/apache/storm/pull/1147#issuecomment-193839237","issue_url":"https://api.github.com/repos/apache/storm/issues/1147","id":193839237,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzgzOTIzNw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T16:00:29Z","updated_at":"2016-03-08T16:00:29Z","author_association":"CONTRIBUTOR","body":"@unsleepy22 It looks a lot better.  I don't care as much about the exact API.  we can change that in the future the important part is removing the dependency on clojure.  I have one minor issue, but overall it looks good and I am +1 for merging it in.\n\nStatsUtils.java 2045-2046: in weightAvgAndSum\nThe reason for having the productOr0 function is because the inputs could be null, and if they were null we didn't want to blow up with an NPE.  The current code will throw an NPE.  it should probably look more like.\n\n```\nret += productOr0(entry.getValue(), id2num.get(k));\n```\n\nI plan to do a bit of testing myself, but great work.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193839237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648406","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648406","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648406,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg0MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T16:00:30Z","updated_at":"2025-01-24T14:21:57Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#issuecomment-193839237\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#issuecomment-193839237</a></p>\n\n<p>    @unsleepy22 It looks a lot better.  I don't care as much about the exact API.  we can change that in the future the important part is removing the dependency on clojure.  I have one minor issue, but overall it looks good and I am +1 for merging it in.</p>\n\n<p>    StatsUtils.java 2045-2046: in weightAvgAndSum<br/>\n    The reason for having the productOr0 function is because the inputs could be null, and if they were null we didn't want to blow up with an NPE.  The current code will throw an NPE.  it should probably look more like.</p>\n\n<p>    ```<br/>\n    ret += productOr0(entry.getValue(), id2num.get(k));<br/>\n    ```</p>\n\n<p>    I plan to do a bit of testing myself, but great work.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648406/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193869016","html_url":"https://github.com/apache/storm/pull/1193#issuecomment-193869016","issue_url":"https://api.github.com/repos/apache/storm/issues/1193","id":193869016,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzg2OTAxNg==","user":{"login":"ppoulosk","id":4550393,"node_id":"MDQ6VXNlcjQ1NTAzOTM=","avatar_url":"https://avatars.githubusercontent.com/u/4550393?v=4","gravatar_id":"","url":"https://api.github.com/users/ppoulosk","html_url":"https://github.com/ppoulosk","followers_url":"https://api.github.com/users/ppoulosk/followers","following_url":"https://api.github.com/users/ppoulosk/following{/other_user}","gists_url":"https://api.github.com/users/ppoulosk/gists{/gist_id}","starred_url":"https://api.github.com/users/ppoulosk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppoulosk/subscriptions","organizations_url":"https://api.github.com/users/ppoulosk/orgs","repos_url":"https://api.github.com/users/ppoulosk/repos","events_url":"https://api.github.com/users/ppoulosk/events{/privacy}","received_events_url":"https://api.github.com/users/ppoulosk/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:02:36Z","updated_at":"2016-03-08T17:02:36Z","author_association":"CONTRIBUTOR","body":"It falls back to ephemeral if preferred is bound, so this is not needed.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193869016/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881946","html_url":"https://github.com/apache/storm/issues/5447#issuecomment-2612881946","issue_url":"https://api.github.com/repos/apache/storm/issues/5447","id":2612881946,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE5NDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:02:37Z","updated_at":"2025-01-24T16:06:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ppoulosk commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1193#issuecomment-193869016\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1193#issuecomment-193869016</a></p>\n\n<p>    It falls back to ephemeral if preferred is bound, so this is not needed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881946/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881951","html_url":"https://github.com/apache/storm/issues/5447#issuecomment-2612881951","issue_url":"https://api.github.com/repos/apache/storm/issues/5447","id":2612881951,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE5NTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:02:38Z","updated_at":"2025-01-24T16:06:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ppoulosk closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1193\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1193</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881951/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652647","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652647","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652647,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:19:18Z","updated_at":"2025-01-24T14:23:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55392686\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55392686</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, InternalRequest> e : outstandingRequests.entrySet()) {<br/>\n    +    InternalRequest internalRequest = e.getValue();<br/>\n    +    if (Time.deltaSecs(internalRequest.startTimeSecs) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS))) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = internalRequest.sem;<br/>\n    +if (sem != null) {<br/>\n    +    String func = internalRequest.function;<br/>\n    +    acquireQueue(func).remove(internalRequest.request);<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer() throws Exception {<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +initThrift();<br/>\n    +initHttp();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +outstandingRequests.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} ({}) at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int newid = 0;<br/>\n    +int orig = 0;<br/>\n    +do </p>\n{\n    +    orig = ctr.get();\n    +    newid = (orig + 1) % 1000000000;\n    +}\n<p> while (!ctr.compareAndSet(orig, newid));<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +InternalRequest internalRequest = new InternalRequest(functionName, req);<br/>\n    +this.outstandingRequests.put(strid, internalRequest);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    internalRequest.sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = internalRequest.result;<br/>\n    +<br/>\n    +LOG.debug(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return (String) result;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +InternalRequest internalRequest = this.outstandingRequests.get(id);<br/>\n    +if (internalRequest != null) {<br/>\n    +    Map<String, String> map = ImmutableMap.of(DRPCAuthorizerBase.FUNCTION_NAME, internalRequest.function);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = internalRequest.sem;<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +internalRequest.result = result;\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +InternalRequest internalRequest = this.outstandingRequests.get(id);<br/>\n    +if (internalRequest != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, internalRequest.function);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = internalRequest.sem;<br/>\n    +    if (sem != null) </p>\n{\n    +internalRequest.result = new DRPCExecutionException(\"Request failed\");\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) {<br/>\n    +    reqQueue = new ConcurrentLinkedQueue<>();<br/>\n    +    ConcurrentLinkedQueue<DRPCRequest> old = requestQueues.putIfAbsent(function, reqQueue);<br/>\n    +    if (old != null) </p>\n{\n    +reqQueue = old;\n    +    }\n<p>    +}<br/>\n    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    It is called, on line 337<br/>\n    ```<br/>\n     private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\ncheckAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    }\n<p>    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652647/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652655","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652655","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652655,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:19:26Z","updated_at":"2025-01-24T14:23:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55392710\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55392710</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) </p>\n{\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();\n    +    requestQueues.put(function, reqQueue);\n    +}\n<p>    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    +if (reqContext != null) </p>\n{\n    +    ThriftAccessLogger.logAccess(reqContext.requestID(), reqContext.remoteAddress(), reqContext.principal(), operation);\n    +}\n<p>    +if (aclHandler != null) {<br/>\n    +    if (reqContext == null)<br/>\n    +reqContext = ReqContext.context();<br/>\n    +    if (!aclHandler.permit(reqContext, operation, mapping)) </p>\n{\n    +Principal principal = reqContext.principal();\n    +String user = (principal != null) ? principal.getName() : \"unknown\";\n    +throw new AuthorizationException(\"DRPC request '\" + operation + \"' for '\" + user + \"' user is not authorized\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\n    +checkAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    +    }\n<p>    +<br/>\n    +    // TO be replaced by Common.mkAuthorizationHandler<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193876941","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-193876941","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":193876941,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzg3Njk0MQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:22:33Z","updated_at":"2016-03-08T17:22:33Z","author_association":"CONTRIBUTOR","body":"@hustfxj looks good to me I am +1 on this.  @abhishekagarwal87 are you OK with merging this in as is.  The comments you had looked relatively minor.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193876941/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652661","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652661","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652661,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:22:34Z","updated_at":"2025-01-24T14:23:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-193876941\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-193876941</a></p>\n\n<p>    @hustfxj looks good to me I am +1 on this.  @abhishekagarwal87 are you OK with merging this in as is.  The comments you had looked relatively minor.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652661/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193887585","html_url":"https://github.com/apache/storm/pull/1183#issuecomment-193887585","issue_url":"https://api.github.com/repos/apache/storm/issues/1183","id":193887585,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzg4NzU4NQ==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:48:51Z","updated_at":"2016-03-08T17:48:51Z","author_association":"CONTRIBUTOR","body":"@HeartSaVioR \nThat depends on how big the diff is. If it's a large diff, I don't think we want to do that. I would much prefer to pull individual patches in to ensure we're not adding features or creating regressions. \n\nThis conversation probably belongs on the mailing list, though, so others can weigh in. For now, I think we can merge this and treat backporting fixes to 10.x as a separate issue.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193887585/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880191","html_url":"https://github.com/apache/storm/issues/5438#issuecomment-2612880191","issue_url":"https://api.github.com/repos/apache/storm/issues/5438","id":2612880191,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODAxOTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T17:48:52Z","updated_at":"2025-01-24T16:05:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1183#issuecomment-193887585\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1183#issuecomment-193887585</a></p>\n\n<p>    @HeartSaVioR <br/>\n    That depends on how big the diff is. If it's a large diff, I don't think we want to do that. I would much prefer to pull individual patches in to ensure we're not adding features or creating regressions. </p>\n\n<p>    This conversation probably belongs on the mailing list, though, so others can weigh in. For now, I think we can merge this and treat backporting fixes to 10.x as a separate issue.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880191/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193899840","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-193899840","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":193899840,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzg5OTg0MA==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T18:20:50Z","updated_at":"2016-03-08T18:20:50Z","author_association":"CONTRIBUTOR","body":"Yes. +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193899840/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652665","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652665","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652665,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T18:20:51Z","updated_at":"2025-01-24T14:23:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-193899840\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-193899840</a></p>\n\n<p>    Yes. +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652665/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652669","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652669","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652669,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2Njk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T18:24:17Z","updated_at":"2025-01-24T14:23:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55402763\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55402763</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, InternalRequest> e : outstandingRequests.entrySet()) {<br/>\n    +    InternalRequest internalRequest = e.getValue();<br/>\n    +    if (Time.deltaSecs(internalRequest.startTimeSecs) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS))) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = internalRequest.sem;<br/>\n    +if (sem != null) {<br/>\n    +    String func = internalRequest.function;<br/>\n    +    acquireQueue(func).remove(internalRequest.request);<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer() throws Exception {<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +initThrift();<br/>\n    +initHttp();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +outstandingRequests.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} ({}) at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int newid = 0;<br/>\n    +int orig = 0;<br/>\n    +do </p>\n{\n    +    orig = ctr.get();\n    +    newid = (orig + 1) % 1000000000;\n    +}\n<p> while (!ctr.compareAndSet(orig, newid));<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +InternalRequest internalRequest = new InternalRequest(functionName, req);<br/>\n    +this.outstandingRequests.put(strid, internalRequest);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    internalRequest.sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = internalRequest.result;<br/>\n    +<br/>\n    +LOG.debug(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return (String) result;<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +InternalRequest internalRequest = this.outstandingRequests.get(id);<br/>\n    +if (internalRequest != null) {<br/>\n    +    Map<String, String> map = ImmutableMap.of(DRPCAuthorizerBase.FUNCTION_NAME, internalRequest.function);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = internalRequest.sem;<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +internalRequest.result = result;\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +InternalRequest internalRequest = this.outstandingRequests.get(id);<br/>\n    +if (internalRequest != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, internalRequest.function);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = internalRequest.sem;<br/>\n    +    if (sem != null) </p>\n{\n    +internalRequest.result = new DRPCExecutionException(\"Request failed\");\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) {<br/>\n    +    reqQueue = new ConcurrentLinkedQueue<>();<br/>\n    +    ConcurrentLinkedQueue<DRPCRequest> old = requestQueues.putIfAbsent(function, reqQueue);<br/>\n    +    if (old != null) </p>\n{\n    +reqQueue = old;\n    +    }\n<p>    +}<br/>\n    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @revans2 I meant there is no need of overloading function as only one signature is being called. But its fine to merge still. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652669/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878908","html_url":"https://github.com/apache/storm/issues/5430#issuecomment-2612878908","issue_url":"https://api.github.com/repos/apache/storm/issues/5430","id":2612878908,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg5MDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T18:35:14Z","updated_at":"2025-01-24T16:05:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\">abhishek.agarwal</a>:</i>\n<p>Hi <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knusbaum\" class=\"user-hover\" rel=\"knusbaum\">Kyle Nusbaum</a>  can you add the topology configuration here?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878908/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193907421","html_url":"https://github.com/apache/storm/pull/1168#issuecomment-193907421","issue_url":"https://api.github.com/repos/apache/storm/issues/1168","id":193907421,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzkwNzQyMQ==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T18:38:44Z","updated_at":"2016-03-08T18:38:44Z","author_association":"MEMBER","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193907421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193915278","html_url":"https://github.com/apache/storm/pull/1192#issuecomment-193915278","issue_url":"https://api.github.com/repos/apache/storm/issues/1192","id":193915278,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzkxNTI3OA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T18:58:36Z","updated_at":"2016-03-08T18:58:36Z","author_association":"CONTRIBUTOR","body":"+1 LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193915278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881507","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881507","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881507,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE1MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T18:58:37Z","updated_at":"2025-01-24T16:06:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192#issuecomment-193915278\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192#issuecomment-193915278</a></p>\n\n<p>    +1 LGTM</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881507/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881199","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881199","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881199,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODExOTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T19:09:49Z","updated_at":"2025-01-24T16:06:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user redsanket opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1609\" title=\"Netty Client is not best effort delivery on failed Connection\" class=\"issue-link\" data-issue-key=\"STORM-1609\"><del>STORM-1609</del></a> Netty Client is not best effort delivery on failed Connection</p>\n\n<p>    If Worker-A has connection to Worker-B that is unused ( and if Worker-B restarted), we drop messages because Channel is not in good state. Can we avoid message drop until we succeed in making new connection or a timeout?</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/redsanket/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/redsanket/storm</a> netty-best-effort</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1194</p>\n\n<hr />\n<p>commit 54b6ac4975582bb6b3ef3511369e52ad81db05b3<br/>\nAuthor: Sanket <schintap@untilservice-lm><br/>\nDate:   2016-03-08T19:06:39Z</p>\n\n<p>    netty loss of messages resolution</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881199/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193934901","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-193934901","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":193934901,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MzkzNDkwMQ==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T19:32:41Z","updated_at":"2016-03-08T19:32:41Z","author_association":"MEMBER","body":"@arunmahadevan Can you document the behavior of non-stateful bolts in a topology with stateful bolts?\n\nIn a traditional topology (i.e. one that does not include stateful bolts), for `IBasicBolt` instances input tuples are automatically ack'ed and output tuples are automatically anchored to the input tuple. For `IRichBolt` instances, anchoring and ack'ing is left to the implementation.\n\nI feel (and I think @revans2 is alluding to the same) that that contract must be maintained when adding stateful bolts to a topology. (I believe with this patch it is, please correct me if I'm wrong).\n\nThe seconds question is what are `IStatefulBolt` implementations expected to do in terms of ack'ing/anchoring? Since the output collector handed to `IStatefulBolt` is an instance of `OutputCollector` (as opposed to `BasicOutputCollector`) one would assume that ack'ing/anchoring is the responsibility of the implementation (the `ack()` and `fail()` methods are visible in `OutputCollector` but not `BasicOutputCollector`).\n\nIf that is not the case (i.e. if stateful bolts are not expected to handle ack'ing/anchoring) it would be best to give `IStatefulBolt`s an output collector implementation that does not expose the ack'ing/anchoring API, similar to the relationship of `IBasicBolt`/`BasicOutputCollector`.\n\nDoes that make sense?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193934901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881096","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881096","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881096,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEwOTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T19:32:43Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-193934901\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-193934901</a></p>\n\n<p>    @arunmahadevan Can you document the behavior of non-stateful bolts in a topology with stateful bolts?</p>\n\n<p>    In a traditional topology (i.e. one that does not include stateful bolts), for `IBasicBolt` instances input tuples are automatically ack'ed and output tuples are automatically anchored to the input tuple. For `IRichBolt` instances, anchoring and ack'ing is left to the implementation.</p>\n\n<p>    I feel (and I think @revans2 is alluding to the same) that that contract must be maintained when adding stateful bolts to a topology. (I believe with this patch it is, please correct me if I'm wrong).</p>\n\n<p>    The seconds question is what are `IStatefulBolt` implementations expected to do in terms of ack'ing/anchoring? Since the output collector handed to `IStatefulBolt` is an instance of `OutputCollector` (as opposed to `BasicOutputCollector`) one would assume that ack'ing/anchoring is the responsibility of the implementation (the `ack()` and `fail()` methods are visible in `OutputCollector` but not `BasicOutputCollector`).</p>\n\n<p>    If that is not the case (i.e. if stateful bolts are not expected to handle ack'ing/anchoring) it would be best to give `IStatefulBolt`s an output collector implementation that does not expose the ack'ing/anchoring API, similar to the relationship of `IBasicBolt`/`BasicOutputCollector`.</p>\n\n<p>    Does that make sense?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881096/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193941111","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-193941111","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":193941111,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzk0MTExMQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T19:53:29Z","updated_at":"2016-03-08T19:53:29Z","author_association":"CONTRIBUTOR","body":"@arunmahadevan I agree mostly with @ptgoetz I wanted to understand the contract (thanks for the link), and that the new contract is consistent with our current contract.  On the acking side it feels like it now is consistent, but not on the anchoring side.  AnchoringOutputCollector in CheckpointTupleForwarder will anchor non-anchored tuples to the last inputTuple.  I can see lots of situations where this is neither expected nor correct for an IRichBolt. A shell bolt for example would totally get this wrong because it does ansync processing.  If we really want to disallow tuples that are not tracked I would prefer to have an exception thrown rather than \"fix\" the issue on the fly and possibly get it wrong.\n\nPart of my confusion came from me assuming that we supported state checkpointing without requiring at least once processing.  It feels like we should be able to support that with some kind of a best effort state checkpointing, but now I understand the current limitations and that it would be a separate feature.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193941111/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881102","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881102","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881102,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODExMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T19:53:30Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-193941111\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-193941111</a></p>\n\n<p>    @arunmahadevan I agree mostly with @ptgoetz I wanted to understand the contract (thanks for the link), and that the new contract is consistent with our current contract.  On the acking side it feels like it now is consistent, but not on the anchoring side.  AnchoringOutputCollector in CheckpointTupleForwarder will anchor non-anchored tuples to the last inputTuple.  I can see lots of situations where this is neither expected nor correct for an IRichBolt. A shell bolt for example would totally get this wrong because it does ansync processing.  If we really want to disallow tuples that are not tracked I would prefer to have an exception thrown rather than \"fix\" the issue on the fly and possibly get it wrong.</p>\n\n<p>    Part of my confusion came from me assuming that we supported state checkpointing without requiring at least once processing.  It feels like we should be able to support that with some kind of a best effort state checkpointing, but now I understand the current limitations and that it would be a separate feature.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193948629","html_url":"https://github.com/apache/storm/pull/1194#issuecomment-193948629","issue_url":"https://api.github.com/repos/apache/storm/issues/1194","id":193948629,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzk0ODYyOQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T20:12:38Z","updated_at":"2016-03-08T20:12:38Z","author_association":"CONTRIBUTOR","body":"+1 looks good to me.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193948629/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881203","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881203","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881203,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T20:12:39Z","updated_at":"2025-01-24T16:06:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#issuecomment-193948629\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#issuecomment-193948629</a></p>\n\n<p>    +1 looks good to me.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881203/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870306","html_url":"https://github.com/apache/storm/issues/5372#issuecomment-2612870306","issue_url":"https://api.github.com/repos/apache/storm/issues/5372","id":2612870306,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzAzMDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T20:16:27Z","updated_at":"2025-01-24T16:01:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\">abhishek.agarwal</a>:</i>\n<p>I tried out Storm with newer versions of kryo and carbonite. All the tests passed. <br/>\nHere are the changes <br/>\n<a href=\"https://github.com/apache/storm/compare/1.x-branch...abhishekagarwal87:kryo3-1.x?expand=1\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/compare/1.x-branch...abhishekagarwal87:kryo3-1.x?expand=1</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870306/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652681","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652681","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652681,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:00:14Z","updated_at":"2025-01-24T14:23:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55426379\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55426379</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Sorry I missed this before.  In the previous code this was the very last thing that happened on the main thread, because this is a blocking call.  With this happening before initHttp the HTTP server is never initialized even when it is configured.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193971785","html_url":"https://github.com/apache/storm/pull/1179#issuecomment-193971785","issue_url":"https://api.github.com/repos/apache/storm/issues/1179","id":193971785,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzk3MTc4NQ==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:17:17Z","updated_at":"2016-03-08T21:17:17Z","author_association":"MEMBER","body":"+1. The travis failures seem like a red herring. All tests passed in my environment.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193971785/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700973","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700973","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700973,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5NzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:17:18Z","updated_at":"2025-01-24T14:44:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1179#issuecomment-193971785\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1179#issuecomment-193971785</a></p>\n\n<p>    +1. The travis failures seem like a red herring. All tests passed in my environment.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700973/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652684","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652684","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652684,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:18:20Z","updated_at":"2025-01-24T14:23:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55429090\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55429090</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Looks like you can just switch the order of doing the init and put initHttp() first in launchServer, but I am getting some problems with using HTTP with the following.</p>\n\n<p>    ```<br/>\n    $ cat ./conf/storm.yaml<br/>\n    drpc.http.port: 9090<br/>\n    drpc.servers:</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>\"localhost\"<br/>\n    $ ./bin/storm jar ./examples/storm-starter/storm-starter-topologies-2.0.0-SNAPSHOT.jar org.apache.storm.starter.BasicDRPCTopology drpc-test<br/>\n    ... wait for to come all the way up<br/>\n    $ curl <a href=\"http://localhost:9090/exclamation/hi\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://localhost:9090/exclamation/hi</a><br/>\n    ... Error ...<br/>\n    ```</li>\n</ul>\n\n\n<p>    from the logs I see<br/>\n    ```<br/>\n    2016-03-08 15:17:49.528 o.a.s.s.o.e.j.s.ServletHandler <span class=\"error\">&#91;WARN&#93;</span> /exclamation/hi<br/>\n    java.lang.NullPointerException: Handler returned nil<br/>\n    at org.apache.storm.shade.ring.util.servlet$make_service_method$fn__7738.invoke(servlet.clj:128)<br/>\n    at org.apache.storm.shade.ring.util.servlet$servlet$fn__7742.invoke(servlet.clj:136)<br/>\n    at org.apache.storm.shade.ring.util.servlet.proxy$javax.servlet.http.HttpServlet$ff19274a.service(Unknown Source)<br/>\n    at org.apache.storm.shade.org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:654)<br/>\n    at org.apache.storm.shade.org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1320)<br/>\n    at org.apache.storm.logging.filters.AccessLoggingFilter.handle(AccessLoggingFilter.java:47)<br/>\n    at org.apache.storm.logging.filters.AccessLoggingFilter.doFilter(AccessLoggingFilter.java:39)<br/>\n    at org.apache.storm.shade.org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)<br/>\n    at org.apache.storm.shade.org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:247)<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652684/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193972568","html_url":"https://github.com/apache/storm/pull/1194#issuecomment-193972568","issue_url":"https://api.github.com/repos/apache/storm/issues/1194","id":193972568,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzk3MjU2OA==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:20:06Z","updated_at":"2016-03-08T21:20:06Z","author_association":"MEMBER","body":"+1. We should also apply this to 1.x-branch.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193972568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881210","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881210","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881210,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:20:07Z","updated_at":"2025-01-24T16:06:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#issuecomment-193972568\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#issuecomment-193972568</a></p>\n\n<p>    +1. We should also apply this to 1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193972813","html_url":"https://github.com/apache/storm/pull/1179#issuecomment-193972813","issue_url":"https://api.github.com/repos/apache/storm/issues/1179","id":193972813,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzk3MjgxMw==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:20:38Z","updated_at":"2016-03-08T21:20:38Z","author_association":"NONE","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193972813/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700977","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700977","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700977,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5Nzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:20:39Z","updated_at":"2025-01-24T14:44:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1179#issuecomment-193972813\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1179#issuecomment-193972813</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700977/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652691","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652691","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652691,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:25:28Z","updated_at":"2025-01-24T14:23:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55430274\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55430274</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK So the issue with http not working is that the handler is never set for the http server to have access to.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652691/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]