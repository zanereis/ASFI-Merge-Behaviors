[{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648310","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648310","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648310,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzMTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T14:42:32Z","updated_at":"2025-01-24T14:21:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54250787\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54250787</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/ui/core.clj &#8212;<br/>\n    @@ -1231,7 +1238,7 @@<br/>\n(json-response </p>\n{\"status\" \"ok\"\n\"id\" host-port}\n<p>       (m \"callback\")))))<br/>\n    -<br/>\n    +  <br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    White space change not needed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648310/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648314","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648314","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648314,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzMTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T14:48:01Z","updated_at":"2025-01-24T14:21:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54251465\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54251465</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/stats/CommonStats.java &#8212;<br/>\n    @@ -0,0 +1,105 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.stats;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiCountStatAndMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiLatencyStatAndMetric;<br/>\n    +<br/>\n    +@SuppressWarnings(\"unchecked\")<br/>\n    +public class CommonStats {<br/>\n    +    public static final int NUM_STAT_BUCKETS = 20;<br/>\n    +<br/>\n    +    public static final String RATE = \"rate\";<br/>\n    +<br/>\n    +    public static final String EMITTED = \"emitted\";<br/>\n    +    public static final String TRANSFERRED = \"transferred\";<br/>\n    +    public static final String[] COMMON_FIELDS = </p>\n{EMITTED, TRANSFERRED}\n<p>;<br/>\n    +<br/>\n    +    protected int rate;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I would prefer this to be a final int and set in the constructor.  Changing it in the middle of operation would require a coordinated effort with external code that does the sampling.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648317","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648317","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648317,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzMTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T14:48:07Z","updated_at":"2025-01-24T14:21:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54251482\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54251482</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/stats/CommonStats.java &#8212;<br/>\n    @@ -0,0 +1,105 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.stats;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiCountStatAndMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiLatencyStatAndMetric;<br/>\n    +<br/>\n    +@SuppressWarnings(\"unchecked\")<br/>\n    +public class CommonStats {<br/>\n    +    public static final int NUM_STAT_BUCKETS = 20;<br/>\n    +<br/>\n    +    public static final String RATE = \"rate\";<br/>\n    +<br/>\n    +    public static final String EMITTED = \"emitted\";<br/>\n    +    public static final String TRANSFERRED = \"transferred\";<br/>\n    +    public static final String[] COMMON_FIELDS = </p>\n{EMITTED, TRANSFERRED}\n<p>;<br/>\n    +<br/>\n    +    protected int rate;<br/>\n    +    protected final Map metricMap = new HashMap();<br/>\n    +<br/>\n    +    public CommonStats() </p>\n{\n    +put(EMITTED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(TRANSFERRED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +    }\n<p>    +<br/>\n    +    public int getRate() </p>\n{\n    +return this.rate;\n    +    }\n<p>    +<br/>\n    +    public void setRate(int rate) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This should be removed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648317/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648320","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648320","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648320,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzMjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T14:51:35Z","updated_at":"2025-01-24T14:21:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54251940\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54251940</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/stats/CommonStats.java &#8212;<br/>\n    @@ -0,0 +1,105 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.stats;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +import org.apache.storm.metric.api.IMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiCountStatAndMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiLatencyStatAndMetric;<br/>\n    +<br/>\n    +@SuppressWarnings(\"unchecked\")<br/>\n    +public class CommonStats {<br/>\n    +    public static final int NUM_STAT_BUCKETS = 20;<br/>\n    +<br/>\n    +    public static final String RATE = \"rate\";<br/>\n    +<br/>\n    +    public static final String EMITTED = \"emitted\";<br/>\n    +    public static final String TRANSFERRED = \"transferred\";<br/>\n    +    public static final String[] COMMON_FIELDS = </p>\n{EMITTED, TRANSFERRED}\n<p>;<br/>\n    +<br/>\n    +    protected int rate;<br/>\n    +    protected final Map metricMap = new HashMap();<br/>\n    +<br/>\n    +    public CommonStats() </p>\n{\n    +put(EMITTED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(TRANSFERRED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +    }\n<p>    +<br/>\n    +    public int getRate() </p>\n{\n    +return this.rate;\n    +    }\n<p>    +<br/>\n    +    public void setRate(int rate) </p>\n{\n    +this.rate = rate;\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getEmitted() </p>\n{\n    +return (MultiCountStatAndMetric) get(EMITTED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getTransferred() </p>\n{\n    +return (MultiCountStatAndMetric) get(TRANSFERRED);\n    +    }\n<p>    +<br/>\n    +    public IMetric get(String field) </p>\n{\n    +return (IMetric) StatsUtil.getByKeyword(metricMap, field);\n    +    }\n<p>    +<br/>\n    +    protected void put(String field, Object value) </p>\n{\n    +StatsUtil.putRawKV(metricMap, field, value);\n    +    }\n<p>    +<br/>\n    +    public void emittedTuple(String stream) </p>\n{\n    +this.getEmitted().incBy(stream, this.rate);\n    +    }\n<p>    +<br/>\n    +    public void transferredTuples(String stream, int amount) </p>\n{\n    +this.getTransferred().incBy(stream, this.rate * amount);\n    +    }\n<p>    +<br/>\n    +    protected void cleanupStats() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This could be updated to just go off of all of the keys in metricMap.  There would be no need for subclasses to override this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648323","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648323","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648323,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzMjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T15:05:49Z","updated_at":"2025-01-24T14:21:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54253882\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54253882</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/stats/SpoutExecutorStats.java &#8212;<br/>\n    @@ -0,0 +1,84 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.stats;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +import org.apache.storm.metric.internal.MultiCountStatAndMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiLatencyStatAndMetric;<br/>\n    +<br/>\n    +@SuppressWarnings(\"unchecked\")<br/>\n    +public class SpoutExecutorStats extends CommonStats {<br/>\n    +<br/>\n    +    public static final String ACKED = \"acked\";<br/>\n    +    public static final String FAILED = \"failed\";<br/>\n    +    public static final String COMPLETE_LATENCIES = \"complete-latencies\";<br/>\n    +<br/>\n    +    public static final String[] SPOUT_FIELDS = </p>\n{ACKED, FAILED, COMPLETE_LATENCIES}\n<p>;<br/>\n    +<br/>\n    +    public SpoutExecutorStats() </p>\n{\n    +super();\n    +this.put(ACKED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +this.put(FAILED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +this.put(COMPLETE_LATENCIES, new MultiLatencyStatAndMetric(NUM_STAT_BUCKETS));\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getAcked() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(ACKED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getFailed() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(FAILED);\n    +    }\n<p>    +<br/>\n    +    public MultiLatencyStatAndMetric getCompleteLatencies() </p>\n{\n    +return (MultiLatencyStatAndMetric) this.get(COMPLETE_LATENCIES);\n    +    }\n<p>    +<br/>\n    +    public void spoutAckedTuple(String stream, long latencyMs) </p>\n{\n    +this.getAcked().incBy(stream, this.rate);\n    +this.getCompleteLatencies().record(stream, latencyMs);\n    +    }\n<p>    +<br/>\n    +    public void spoutFailedTuple(String stream, long latencyMs) </p>\n{\n    +this.getFailed().incBy(stream, this.rate);\n    +    }\n<p>    +<br/>\n    +    public Map renderStats() {<br/>\n    +cleanupStats();<br/>\n    +Map ret = new HashMap();<br/>\n    +ret.putAll(valueStats(CommonStats.COMMON_FIELDS));<br/>\n    +ret.putAll(valueStats(SpoutExecutorStats.SPOUT_FIELDS));<br/>\n    +StatsUtil.putRawKV(ret, StatsUtil.TYPE, StatsUtil.KW_SPOUT);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Again we cannot have new java code depending on clojure.  The return of this is not touched except in thriftify-zk-worker-hb, which is trying to turn it into a thrift object anyways.  Lets just return the thrift ExecutorStats object we ultimately care about, and update the thriftify code to deal with it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648332","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648332","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648332,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzMzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T15:06:42Z","updated_at":"2025-01-24T14:21:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54253995\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54253995</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/stats/SpoutExecutorStats.java &#8212;<br/>\n    @@ -0,0 +1,84 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.stats;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +import org.apache.storm.metric.internal.MultiCountStatAndMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiLatencyStatAndMetric;<br/>\n    +<br/>\n    +@SuppressWarnings(\"unchecked\")<br/>\n    +public class SpoutExecutorStats extends CommonStats {<br/>\n    +<br/>\n    +    public static final String ACKED = \"acked\";<br/>\n    +    public static final String FAILED = \"failed\";<br/>\n    +    public static final String COMPLETE_LATENCIES = \"complete-latencies\";<br/>\n    +<br/>\n    +    public static final String[] SPOUT_FIELDS = </p>\n{ACKED, FAILED, COMPLETE_LATENCIES}\n<p>;<br/>\n    +<br/>\n    +    public SpoutExecutorStats() </p>\n{\n    +super();\n    +this.put(ACKED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +this.put(FAILED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +this.put(COMPLETE_LATENCIES, new MultiLatencyStatAndMetric(NUM_STAT_BUCKETS));\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getAcked() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(ACKED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getFailed() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(FAILED);\n    +    }\n<p>    +<br/>\n    +    public MultiLatencyStatAndMetric getCompleteLatencies() </p>\n{\n    +return (MultiLatencyStatAndMetric) this.get(COMPLETE_LATENCIES);\n    +    }\n<p>    +<br/>\n    +    public void spoutAckedTuple(String stream, long latencyMs) </p>\n{\n    +this.getAcked().incBy(stream, this.rate);\n    +this.getCompleteLatencies().record(stream, latencyMs);\n    +    }\n<p>    +<br/>\n    +    public void spoutFailedTuple(String stream, long latencyMs) </p>\n{\n    +this.getFailed().incBy(stream, this.rate);\n    +    }\n<p>    +<br/>\n    +    public Map renderStats() </p>\n{\n    +cleanupStats();\n    +Map ret = new HashMap();\n    +ret.putAll(valueStats(CommonStats.COMMON_FIELDS));\n    +ret.putAll(valueStats(SpoutExecutorStats.SPOUT_FIELDS));\n    +StatsUtil.putRawKV(ret, StatsUtil.TYPE, StatsUtil.KW_SPOUT);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public void cleanupStats() {<br/>\n    +super.cleanupStats();<br/>\n    +for (String field : SpoutExecutorStats.SPOUT_FIELDS) </p>\n{\n    +    cleanupStat(this.get(field));\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static SpoutExecutorStats mkSpoutStats(int rate) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we just have the constructor have the rate, and remove this entirely?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648332/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648336","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648336","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648336,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzMzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T15:07:23Z","updated_at":"2025-01-24T14:21:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54254078\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54254078</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/stats/BoltExecutorStats.java &#8212;<br/>\n    @@ -0,0 +1,107 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.stats;<br/>\n    +<br/>\n    +import clojure.lang.PersistentVector;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +import org.apache.storm.metric.internal.MultiCountStatAndMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiLatencyStatAndMetric;<br/>\n    +<br/>\n    +@SuppressWarnings(\"unchecked\")<br/>\n    +public class BoltExecutorStats extends CommonStats {<br/>\n    +<br/>\n    +    public static final String ACKED = \"acked\";<br/>\n    +    public static final String FAILED = \"failed\";<br/>\n    +    public static final String EXECUTED = \"executed\";<br/>\n    +    public static final String PROCESS_LATENCIES = \"process-latencies\";<br/>\n    +    public static final String EXECUTE_LATENCIES = \"execute-latencies\";<br/>\n    +<br/>\n    +    public static final String[] BOLT_FIELDS = </p>\n{ACKED, FAILED, EXECUTED, PROCESS_LATENCIES, EXECUTE_LATENCIES}\n<p>;<br/>\n    +<br/>\n    +    public BoltExecutorStats() </p>\n{\n    +super();\n    +\n    +put(ACKED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(FAILED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(EXECUTED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(PROCESS_LATENCIES, new MultiLatencyStatAndMetric(NUM_STAT_BUCKETS));\n    +put(EXECUTE_LATENCIES, new MultiLatencyStatAndMetric(NUM_STAT_BUCKETS));\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getAcked() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(ACKED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getFailed() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(FAILED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getExecuted() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(EXECUTED);\n    +    }\n<p>    +<br/>\n    +    public MultiLatencyStatAndMetric getProcessLatencies() </p>\n{\n    +return (MultiLatencyStatAndMetric) this.get(PROCESS_LATENCIES);\n    +    }\n<p>    +<br/>\n    +    public MultiLatencyStatAndMetric getExecuteLatencies() </p>\n{\n    +return (MultiLatencyStatAndMetric) this.get(EXECUTE_LATENCIES);\n    +    }\n<p>    +<br/>\n    +    public void boltExecuteTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getExecuted().incBy(key, this.rate);\n    +this.getExecuteLatencies().record(key, latencyMs);\n    +    }\n<p>    +<br/>\n    +    public void boltAckedTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getAcked().incBy(key, this.rate);\n    +this.getProcessLatencies().record(key, latencyMs);\n    +    }\n<p>    +<br/>\n    +    public void boltFailedTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getFailed().incBy(key, this.rate);\n    +\n    +    }\n<p>    +<br/>\n    +    public Map renderStats() </p>\n{\n    +cleanupStats();\n    +Map ret = new HashMap();\n    +ret.putAll(valueStats(CommonStats.COMMON_FIELDS));\n    +ret.putAll(valueStats(BoltExecutorStats.BOLT_FIELDS));\n    +StatsUtil.putRawKV(ret, StatsUtil.TYPE, StatsUtil.KW_BOLT);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public void cleanupStats() {<br/>\n    +super.cleanupStats();<br/>\n    +for (String field : BOLT_FIELDS) </p>\n{\n    +    cleanupStat(this.get(field));\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static BoltExecutorStats mkBoltStats(int rate) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Similar here the constructor should take the rate and this should be removed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648336/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648342","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648342","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648342,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzNDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T15:08:37Z","updated_at":"2025-01-24T14:21:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54254248\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54254248</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/stats/BoltExecutorStats.java &#8212;<br/>\n    @@ -0,0 +1,107 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.stats;<br/>\n    +<br/>\n    +import clojure.lang.PersistentVector;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +import org.apache.storm.metric.internal.MultiCountStatAndMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiLatencyStatAndMetric;<br/>\n    +<br/>\n    +@SuppressWarnings(\"unchecked\")<br/>\n    +public class BoltExecutorStats extends CommonStats {<br/>\n    +<br/>\n    +    public static final String ACKED = \"acked\";<br/>\n    +    public static final String FAILED = \"failed\";<br/>\n    +    public static final String EXECUTED = \"executed\";<br/>\n    +    public static final String PROCESS_LATENCIES = \"process-latencies\";<br/>\n    +    public static final String EXECUTE_LATENCIES = \"execute-latencies\";<br/>\n    +<br/>\n    +    public static final String[] BOLT_FIELDS = </p>\n{ACKED, FAILED, EXECUTED, PROCESS_LATENCIES, EXECUTE_LATENCIES}\n<p>;<br/>\n    +<br/>\n    +    public BoltExecutorStats() </p>\n{\n    +super();\n    +\n    +put(ACKED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(FAILED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(EXECUTED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(PROCESS_LATENCIES, new MultiLatencyStatAndMetric(NUM_STAT_BUCKETS));\n    +put(EXECUTE_LATENCIES, new MultiLatencyStatAndMetric(NUM_STAT_BUCKETS));\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getAcked() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(ACKED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getFailed() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(FAILED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getExecuted() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(EXECUTED);\n    +    }\n<p>    +<br/>\n    +    public MultiLatencyStatAndMetric getProcessLatencies() </p>\n{\n    +return (MultiLatencyStatAndMetric) this.get(PROCESS_LATENCIES);\n    +    }\n<p>    +<br/>\n    +    public MultiLatencyStatAndMetric getExecuteLatencies() </p>\n{\n    +return (MultiLatencyStatAndMetric) this.get(EXECUTE_LATENCIES);\n    +    }\n<p>    +<br/>\n    +    public void boltExecuteTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getExecuted().incBy(key, this.rate);\n    +this.getExecuteLatencies().record(key, latencyMs);\n    +    }\n<p>    +<br/>\n    +    public void boltAckedTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getAcked().incBy(key, this.rate);\n    +this.getProcessLatencies().record(key, latencyMs);\n    +    }\n<p>    +<br/>\n    +    public void boltFailedTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getFailed().incBy(key, this.rate);\n    +\n    +    }\n<p>    +<br/>\n    +    public Map renderStats() {<br/>\n    +cleanupStats();<br/>\n    +Map ret = new HashMap();<br/>\n    +ret.putAll(valueStats(CommonStats.COMMON_FIELDS));<br/>\n    +ret.putAll(valueStats(BoltExecutorStats.BOLT_FIELDS));<br/>\n    +StatsUtil.putRawKV(ret, StatsUtil.TYPE, StatsUtil.KW_BOLT);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    And similar here too.  This should return an ExecutorStats, not a Map with clojure specific things in it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648342/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652285","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652285","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652285,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIyODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T15:17:32Z","updated_at":"2025-01-24T14:23:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user hustfxj opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1270\" title=\"port backtype.storm.daemon.drpc to java\" class=\"issue-link\" data-issue-key=\"STORM-1270\"><del>STORM-1270</del></a>  <a href=\"https://issues.apache.org/jira/browse/STORM-1274\" title=\"port backtype.storm.LocalDRPC to java\" class=\"issue-link\" data-issue-key=\"STORM-1274\"><del>STORM-1274</del></a> port drpc&LocalDRPC  to java </p>\n\n<p>    1. Port \"org.apache.storm.daemon.drpc\" to java at \"org.apache.storm.daemon.DrpcServer\".<br/>\n    2. Port \"org.apache.storm.LocalDRPC\" to java at \"org.apache.storm.LocalDRPC\".<br/>\n    3. I keep the \"webapp\" of drpc.clj , as it's hard to translate and we will move ring to other REST framework. </p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/hustfxj/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/hustfxj/storm</a> DRPC</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1156</p>\n\n<hr />\n<p>commit 2040fee56e9a3c0614cd50e30a93389ea2843a77<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-19T00:59:43Z</p>\n\n<p>    port drpc.clj to java</p>\n\n<p>commit 2854d9ee357bf2b03af5801ffe64b3380bd621b6<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-23T04:18:31Z</p>\n\n<p>    rename DrpcProcess</p>\n\n<p>commit 9178b1c8fb7a77dde0608a285d9adc8d0b767867<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-26T06:13:23Z</p>\n\n<p>    Merge branch 'master' into LocalDRPC</p>\n\n<p>commit 802d28e607ce953664fcea7356eac98fb354683f<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-26T12:32:29Z</p>\n\n<p>    update some tests about drpc</p>\n\n<p>commit 8e350d1cf1f16b0101d699de0016bb762061f1e3<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-26T14:59:02Z</p>\n\n<p>    let ManualDRPC throw Exception</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652285/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877098","html_url":"https://github.com/apache/storm/issues/5416#issuecomment-2612877098","issue_url":"https://api.github.com/repos/apache/storm/issues/5416","id":2612877098,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzcwOTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T15:22:33Z","updated_at":"2025-01-24T16:04:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user abhishekagarwal87 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1157\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1157</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1581\" title=\"Repair github links in the storm documentation\" class=\"issue-link\" data-issue-key=\"STORM-1581\"><del>STORM-1581</del></a>: Repair github links in storm documentation</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/abhishekagarwal87/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/abhishekagarwal87/storm</a> asf-site2</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1157.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1157.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1157</p>\n\n<hr />\n<p>commit 40bf0c8a687a910cfa12adaffd27970c90ebe321<br/>\nAuthor: Abhishek Agarwal <abhishek.agarwal@inmobi.com><br/>\nDate:   2016-02-26T15:20:49Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1581\" title=\"Repair github links in the storm documentation\" class=\"issue-link\" data-issue-key=\"STORM-1581\"><del>STORM-1581</del></a>: Repair github links in storm documentation</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189325267","html_url":"https://github.com/apache/storm/pull/1157#issuecomment-189325267","issue_url":"https://api.github.com/repos/apache/storm/issues/1157","id":189325267,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTMyNTI2Nw==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T15:35:23Z","updated_at":"2016-02-26T15:35:23Z","author_association":"CONTRIBUTOR","body":"It turned out to be more complex than I thought it to be. Many links in the documentation are already broken. some github paths point to a particular commit and some point to an external repository. Many github links will still be broken as the classes are being ported over to java. Though at least many links pointing to old backtype.storm package will get corrected with this PR. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189325267/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877101","html_url":"https://github.com/apache/storm/issues/5416#issuecomment-2612877101","issue_url":"https://api.github.com/repos/apache/storm/issues/5416","id":2612877101,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzcxMDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T15:35:25Z","updated_at":"2025-01-24T16:04:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1157#issuecomment-189325267\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1157#issuecomment-189325267</a></p>\n\n<p>    It turned out to be more complex than I thought it to be. Many links in the documentation are already broken. some github paths point to a particular commit and some point to an external repository. Many github links will still be broken as the classes are being ported over to java. Though at least many links pointing to old backtype.storm package will get corrected with this PR. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877101/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189345949","html_url":"https://github.com/apache/storm/pull/1147#issuecomment-189345949","issue_url":"https://api.github.com/repos/apache/storm/issues/1147","id":189345949,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTM0NTk0OQ==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T16:09:39Z","updated_at":"2016-02-26T16:09:39Z","author_association":"NONE","body":"Thanks @revans2 , I'll address all your comments~\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189345949/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648353","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648353","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648353,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzNTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T16:09:41Z","updated_at":"2025-01-24T14:21:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#issuecomment-189345949\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#issuecomment-189345949</a></p>\n\n<p>    Thanks @revans2 , I'll address all your comments~</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648353/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189351785","html_url":"https://github.com/apache/storm/pull/1134#issuecomment-189351785","issue_url":"https://api.github.com/repos/apache/storm/issues/1134","id":189351785,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTM1MTc4NQ==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T16:20:40Z","updated_at":"2016-02-26T16:20:40Z","author_association":"NONE","body":"can we close this duplicate one?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189351785/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189362515","html_url":"https://github.com/apache/storm/pull/1158#issuecomment-189362515","issue_url":"https://api.github.com/repos/apache/storm/issues/1158","id":189362515,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTM2MjUxNQ==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T16:37:11Z","updated_at":"2016-02-26T16:37:11Z","author_association":"NONE","body":"Manual test passed. Could @kishorvpatil and @revans2 also look at this one? Mostly the same as [1149](https://github.com/apache/storm/pull/1149)\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189362515/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876515","html_url":"https://github.com/apache/storm/issues/5411#issuecomment-2612876515","issue_url":"https://api.github.com/repos/apache/storm/issues/5411","id":2612876515,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzY1MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T17:04:38Z","updated_at":"2025-01-24T16:04:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1151\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1151</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876515/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189378341","html_url":"https://github.com/apache/storm/pull/1158#issuecomment-189378341","issue_url":"https://api.github.com/repos/apache/storm/issues/1158","id":189378341,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTM3ODM0MQ==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T17:16:07Z","updated_at":"2016-02-26T17:16:07Z","author_association":"NONE","body":"jdk8 test passed, jdk7 test failure seems unrelated.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189378341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876518","html_url":"https://github.com/apache/storm/issues/5411#issuecomment-2612876518","issue_url":"https://api.github.com/repos/apache/storm/issues/5411","id":2612876518,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzY1MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T17:31:10Z","updated_at":"2025-01-24T16:04:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user arunmahadevan opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1159\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1159</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1576\" title=\"TopologyBuilder fails with ConcurrentModification in addCheckPointInputs for stateful topologies\" class=\"issue-link\" data-issue-key=\"STORM-1576\"><del>STORM-1576</del></a> fix ConcurrentModificationException in addCheckpointInputs</p>\n\n<p>    Proposed patch addresses the ConcurrentModificationException while<br/>\n    creating a topology with an IStatefulBolt having more than one<br/>\n    input.</p>\n\n<p>    Note: Submitting the changes merged in <a href=\"https://github.com/apache/storm/pull/1151\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1151</a> against 1.x-branch</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/arunmahadevan/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/arunmahadevan/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1576\" title=\"TopologyBuilder fails with ConcurrentModification in addCheckPointInputs for stateful topologies\" class=\"issue-link\" data-issue-key=\"STORM-1576\"><del>STORM-1576</del></a>-1.x</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1159.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1159.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1159</p>\n\n<hr />\n<p>commit 98bc3ae9b6ba1c03d33d7bb1ec61af920ca4659c<br/>\nAuthor: Arun Mahadevan <aiyer@hortonworks.com><br/>\nDate:   2016-02-25T19:26:11Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1576\" title=\"TopologyBuilder fails with ConcurrentModification in addCheckPointInputs for stateful topologies\" class=\"issue-link\" data-issue-key=\"STORM-1576\"><del>STORM-1576</del></a> fix ConcurrentModificationException in addCheckpointInputs</p>\n\n<p>    Proposed patch addresses the ConcurrentModificationException while<br/>\n    creating a topology with an IStatefulBolt having more than one<br/>\n    input.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876518/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189391991","html_url":"https://github.com/apache/storm/pull/1159#issuecomment-189391991","issue_url":"https://api.github.com/repos/apache/storm/issues/1159","id":189391991,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTM5MTk5MQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T17:51:28Z","updated_at":"2016-02-26T17:51:28Z","author_association":"CONTRIBUTOR","body":"+1. It's identical to #1151 so I'm curious we need to wait for 24 hr to merge. \nIf my memory is right, @ptgoetz stated that merging backport (explicitly, or implicitly) is at the discression of the committer.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189391991/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876528","html_url":"https://github.com/apache/storm/issues/5411#issuecomment-2612876528","issue_url":"https://api.github.com/repos/apache/storm/issues/5411","id":2612876528,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzY1Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T17:51:30Z","updated_at":"2025-01-24T16:04:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1159#issuecomment-189391991\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1159#issuecomment-189391991</a></p>\n\n<p>    +1. It's identical to #1151 so I'm curious we need to wait for 24 hr to merge. <br/>\n    If my memory is right, @ptgoetz stated that merging backport (explicitly, or implicitly) is at the discression of the committer.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876528/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189401885","html_url":"https://github.com/apache/storm/pull/1082#issuecomment-189401885","issue_url":"https://api.github.com/repos/apache/storm/issues/1082","id":189401885,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTQwMTg4NQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T18:08:20Z","updated_at":"2016-02-26T18:08:20Z","author_association":"CONTRIBUTOR","body":"@wuchong \nYou're right. Actually this PR just tries to address weird behavior when users leave the setting to default.\n\nBtw, there're more to cover if we want to address this to more ideal way.\nFor example, canonical host name for each machine can be overwritten by setting storm.local.hostname.\nPlease refer NimbusConf#fromConf for details.\n\nIn result, every nimbuses should know what's the return value of NimbusConf#fromConf for other nimbuses, and every nimbuses should match nimbus.seeds and corresponding values by 1 on 1.\nI don't have an idea how to do it for now, and I really appreciate ideas which address this.\n\nOtherwise users should describe the same value which NimbusConf#fromConf will return, for nimbus.seeds.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189401885/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704647","html_url":"https://github.com/apache/storm/issues/5327#issuecomment-2612704647","issue_url":"https://api.github.com/repos/apache/storm/issues/5327","id":2612704647,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDQ2NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T18:08:21Z","updated_at":"2025-01-24T14:46:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1082#issuecomment-189401885\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1082#issuecomment-189401885</a></p>\n\n<p>    @wuchong <br/>\n    You're right. Actually this PR just tries to address weird behavior when users leave the setting to default.</p>\n\n<p>    Btw, there're more to cover if we want to address this to more ideal way.<br/>\n    For example, canonical host name for each machine can be overwritten by setting storm.local.hostname.<br/>\n    Please refer NimbusConf#fromConf for details.</p>\n\n<p>    In result, every nimbuses should know what's the return value of NimbusConf#fromConf for other nimbuses, and every nimbuses should match nimbus.seeds and corresponding values by 1 on 1.<br/>\n    I don't have an idea how to do it for now, and I really appreciate ideas which address this.</p>\n\n<p>    Otherwise users should describe the same value which NimbusConf#fromConf will return, for nimbus.seeds.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704647/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612869162","html_url":"https://github.com/apache/storm/issues/5365#issuecomment-2612869162","issue_url":"https://api.github.com/repos/apache/storm/issues/5365","id":2612869162,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjkxNjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T18:22:30Z","updated_at":"2025-01-24T16:00:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=satish.duggana\" class=\"user-hover\" rel=\"satish.duggana\">Satish Duggana</a> Could you please take care of it? Or want others to address this issue?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612869162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874031","html_url":"https://github.com/apache/storm/issues/5395#issuecomment-2612874031","issue_url":"https://api.github.com/repos/apache/storm/issues/5395","id":2612874031,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzQwMzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T18:56:24Z","updated_at":"2025-01-24T16:02:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\" class=\"user-hover\" rel=\"ptgoetz\">P. Taylor Goetz</a> <br/>\nProviding more log lines may be helpful to determine what things were occurred.<br/>\nFor example, is there any log messages \"connection attempt %s to %s failed\" before \"closing Netty Client\"?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874031/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652290","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652290","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652290,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIyOTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T19:08:16Z","updated_at":"2025-01-24T14:23:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54287032\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54287032</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    you can rename it to DRPCServer for consistency.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652290/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652298","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652298","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652298,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIyOTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T19:12:20Z","updated_at":"2025-01-24T14:23:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54287568\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54287568</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Duplicate log statement</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652298/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700706","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700706","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700706,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T19:22:25Z","updated_at":"2025-01-24T14:44:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagit\">dagit</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rudra.sharma\" class=\"user-hover\" rel=\"rudra.sharma\">Rudra Sharma</a>, if this was seen on master, was the topology submitted using an old client?  I had thought in the latest version of storm the StormSubmitter submits topology jars in chunks of about 30kb at a time.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700706/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652304","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652304","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652304,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzMDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T19:45:23Z","updated_at":"2025-01-24T14:23:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54291910\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54291910</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) </p>\n{\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();\n    +    requestQueues.put(function, reqQueue);\n    +}\n<p>    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    +if (reqContext != null) </p>\n{\n    +    ThriftAccessLogger.logAccess(reqContext.requestID(), reqContext.remoteAddress(), reqContext.principal(), operation);\n    +}\n<p>    +if (aclHandler != null) {<br/>\n    +    if (reqContext == null)<br/>\n    +reqContext = ReqContext.context();<br/>\n    +    if (!aclHandler.permit(reqContext, operation, mapping)) </p>\n{\n    +Principal principal = reqContext.principal();\n    +String user = (principal != null) ? principal.getName() : \"unknown\";\n    +throw new AuthorizationException(\"DRPC request '\" + operation + \"' for '\" + user + \"' user is not authorized\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\n    +checkAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    +    }\n<p>    +<br/>\n    +    // TO be replaced by Common.mkAuthorizationHandler<br/>\n    +    private IAuthorizer mkAuthorizationHandler(String klassname, Map conf) {<br/>\n    +IAuthorizer authorizer = null;<br/>\n    +Class aznClass = null;<br/>\n    +if (StringUtils.isNotBlank(klassname)) {<br/>\n    +    try {<br/>\n    +aznClass = Class.forName(klassname);<br/>\n    +authorizer = (IAuthorizer) aznClass.newInstance();<br/>\n    +if (authorizer != null) </p>\n{\n    +    authorizer.prepare(conf);\n    +}\n<p>    +    } catch (Exception e) </p>\n{\n    +LOG.error(\"mkAuthorizationHandler failed!\", e);\n    +    }\n<p>    +}<br/>\n    +LOG.debug(\"authorization class name: {} class: {} handler: {}\", klassname, aznClass, authorizer);<br/>\n    +return authorizer;<br/>\n    +    }<br/>\n    +<br/>\n    +    public Map getConf() </p>\n{\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static void main(String[] args) throws Exception {<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    There are extra lines in some places which you can remove. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652304/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652310","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652310","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652310,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzMTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T19:48:21Z","updated_at":"2025-01-24T14:23:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54292304\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54292304</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) {<br/>\n    +    reporter.prepare(new MetricRegistry(), conf);<br/>\n    +    reporter.start();<br/>\n    +    LOG.info(\"Started statistics report plugin...\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This will be logged multiple times or you can add the reporter class</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652310/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652316","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652316","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652316,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzMTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T19:55:15Z","updated_at":"2025-01-24T14:23:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54293244\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54293244</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    You can separate out the implementation of DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable to a class DRPCService. This service class will only contain the business logic and server logic can be inside DRPCServer. Also AutoCloseable should be the interface than Shutdownable. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652316/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189457987","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-189457987","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":189457987,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTQ1Nzk4Nw==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:01:17Z","updated_at":"2016-02-26T20:01:17Z","author_association":"CONTRIBUTOR","body":"@tgravescs @revans2 I am just finalizing some testing and I will push in the patch after lunch. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189457987/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652321","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652321","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652321,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzMjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:31:21Z","updated_at":"2025-01-24T14:23:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54297736\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54297736</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    minor. can you rename idtoStart to idToStart and similarly other idto* variables. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652321/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652328","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652328","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652328,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzMjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:32:03Z","updated_at":"2025-01-24T14:23:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54297857\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54297857</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    this should be LOG.debug</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652328/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652336","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652336","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652336,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzMzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:35:04Z","updated_at":"2025-01-24T14:23:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54298226\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54298226</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) </p>\n{\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();\n    +    requestQueues.put(function, reqQueue);\n    +}\n<p>    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    +if (reqContext != null) </p>\n{\n    +    ThriftAccessLogger.logAccess(reqContext.requestID(), reqContext.remoteAddress(), reqContext.principal(), operation);\n    +}\n<p>    +if (aclHandler != null) {<br/>\n    +    if (reqContext == null)<br/>\n    +reqContext = ReqContext.context();<br/>\n    +    if (!aclHandler.permit(reqContext, operation, mapping)) </p>\n{\n    +Principal principal = reqContext.principal();\n    +String user = (principal != null) ? principal.getName() : \"unknown\";\n    +throw new AuthorizationException(\"DRPC request '\" + operation + \"' for '\" + user + \"' user is not authorized\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\n    +checkAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    +    }\n<p>    +<br/>\n    +    // TO be replaced by Common.mkAuthorizationHandler<br/>\n    +    private IAuthorizer mkAuthorizationHandler(String klassname, Map conf) {<br/>\n    +IAuthorizer authorizer = null;<br/>\n    +Class aznClass = null;<br/>\n    +if (StringUtils.isNotBlank(klassname)) {<br/>\n    +    try {<br/>\n    +aznClass = Class.forName(klassname);<br/>\n    +authorizer = (IAuthorizer) aznClass.newInstance();<br/>\n    +if (authorizer != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    newInstance shouldn't return null</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652336/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652345","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652345","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652345,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzNDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:36:28Z","updated_at":"2025-01-24T14:23:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54298391\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54298391</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    this variable is not used</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652353","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652353","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652353,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzNTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:38:39Z","updated_at":"2025-01-24T14:23:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54298663\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54298663</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    shouldn't it try to stop both of them</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652353/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652361","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652361","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652361,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzNjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:44:57Z","updated_at":"2025-01-24T14:23:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54299455\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54299455</a></p>\n\n<p>    &#8212; Diff: examples/storm-starter/src/jvm/org/apache/storm/starter/ManualDRPC.java &#8212;<br/>\n    @@ -30,39 +30,37 @@<br/>\n     import org.apache.storm.tuple.Tuple;<br/>\n     import org.apache.storm.tuple.Values;</p>\n\n<p>    -<br/>\n     public class ManualDRPC {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>public static class ExclamationBolt extends BaseBasicBolt {<br/>\n    -</li>\n\t<li>@Override</li>\n\t<li>public void declareOutputFields(OutputFieldsDeclarer declarer) \n{\n    -      declarer.declare(new Fields(\"result\", \"return-info\"));\n    -    }\n<p>    +    public static class ExclamationBolt extends BaseBasicBolt {</p></li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>@Override</li>\n\t<li>public void execute(Tuple tuple, BasicOutputCollector collector) \n{\n    -      String arg = tuple.getString(0);\n    -      Object retInfo = tuple.getValue(1);\n    -      collector.emit(new Values(arg + \"!!!\", retInfo));\n    -    }\n<p>    +@Override<br/>\n    +public void declareOutputFields(OutputFieldsDeclarer declarer) </p>\n{\n    +    declarer.declare(new Fields(\"result\", \"return-info\"));\n    +}</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>}<br/>\n    +@Override<br/>\n    +public void execute(Tuple tuple, BasicOutputCollector collector) \n{\n    +    String arg = tuple.getString(0);\n    +    Object retInfo = tuple.getValue(1);\n    +    collector.emit(new Values(arg + \"!!!\", retInfo));\n    +}</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>public static void main(String[] args) \n{\n    -    TopologyBuilder builder = new TopologyBuilder();\n    -    LocalDRPC drpc = new LocalDRPC();\n    +    }</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>DRPCSpout spout = new DRPCSpout(\"exclamation\", drpc);</li>\n\t<li>builder.setSpout(\"drpc\", spout);</li>\n\t<li>builder.setBolt(\"exclaim\", new ExclamationBolt(), 3).shuffleGrouping(\"drpc\");</li>\n\t<li>builder.setBolt(\"return\", new ReturnResults(), 3).shuffleGrouping(\"exclaim\");<br/>\n    +    public static void main(String[] args) throws Exception\n{\n    +TopologyBuilder builder = new TopologyBuilder();\n    +LocalDRPC drpc = new LocalDRPC();\n     \n    -    LocalCluster cluster = new LocalCluster();\n    -    Config conf = new Config();\n    -    cluster.submitTopology(\"exclaim\", conf, builder.createTopology());\n    +DRPCSpout spout = new DRPCSpout(\"exclamation\", drpc);\n    +builder.setSpout(\"drpc\", spout);\n    +builder.setBolt(\"exclaim\", new ExclamationBolt(), 3).shuffleGrouping(\"drpc\");\n    +builder.setBolt(\"return\", new ReturnResults(), 3).shuffleGrouping(\"exclaim\");\n     \n    -    System.out.println(drpc.execute(\"exclamation\", \"aaa\"));\n    -    System.out.println(drpc.execute(\"exclamation\", \"bbb\"));\n    +LocalCluster cluster = new LocalCluster();\n    +Config conf = new Config();\n    +cluster.submitTopology(\"exclaim\", conf, builder.createTopology());\n     \n    -  }\n<p>    +System.out.println(drpc.execute(\"exclamation\", \"aaa\"));<br/>\n    +System.out.println(drpc.execute(\"exclamation\", \"bbb\"));<br/>\n    +    }<br/>\n     }</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Please don't change the spacing/formatting for files you didn't touch otherwise.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652368","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652368","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652368,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzNjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:47:48Z","updated_at":"2025-01-24T14:23:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54299761\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54299761</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/drpc.clj &#8212;<br/>\n    @@ -210,67 +63,19 @@<br/>\n (wrap-reload '<span class=\"error\">&#91;org.apache.storm.daemon.drpc&#93;</span>)<br/>\n handle-request))</p>\n\n<p>    +<br/>\n     (defn launch-server!<br/>\n       ([]</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(log-message \"Starting drpc server for storm version '\" STORM-VERSION \"'\")<br/>\n (let [conf (clojurify-structure (ConfigUtils/readStormConfig))</li>\n\t<li>worker-threads (int (conf DRPC-WORKER-THREADS))</li>\n\t<li>queue-size (int (conf DRPC-QUEUE-SIZE))<br/>\n       drpc-http-port (int (conf DRPC-HTTP-PORT))</li>\n\t<li>drpc-port (int (conf DRPC-PORT))</li>\n\t<li>drpc-service-handler (service-handler conf)</li>\n\t<li>;; requests and returns need to be on separate thread pools, since calls to</li>\n\t<li>;; \"execute\" don't unblock until other thrift methods are called. So if</li>\n\t<li>;; 64 threads are calling execute, the server won't accept the result</li>\n\t<li>;; invocations that will unblock those threads</li>\n\t<li>handler-server (when (> drpc-port 0)</li>\n\t<li>(ThriftServer. conf</li>\n\t<li>(DistributedRPC$Processor. drpc-service-handler)</li>\n\t<li>ThriftConnectionType/DRPC))</li>\n\t<li>invoke-server (ThriftServer. conf</li>\n\t<li>(DistributedRPCInvocations$Processor. drpc-service-handler)</li>\n\t<li>ThriftConnectionType/DRPC_INVOCATIONS)<br/>\n    +  drpc-server (DrpcServer.)<br/>\n       http-creds-handler (AuthUtils/GetDrpcHttpCredentialsPlugin conf)]</li>\n\t<li>(Utils/addShutdownHookWithForceKillIn1Sec (fn []</li>\n\t<li>(if handler-server (.stop handler-server))</li>\n\t<li>(.stop invoke-server)))</li>\n\t<li>(log-message \"Starting Distributed RPC servers...\")</li>\n\t<li>(future (.serve invoke-server))<br/>\n   (when (> drpc-http-port 0)</li>\n\t<li>(let [app (-> (webapp drpc-service-handler http-creds-handler)</li>\n\t<li>requests-middleware)</li>\n\t<li>filter-class (conf DRPC-HTTP-FILTER)</li>\n\t<li>filter-params (conf DRPC-HTTP-FILTER-PARAMS)</li>\n\t<li>filters-confs <span class=\"error\">&#91;(FilterConfiguration. filter-class filter-params)&#93;</span></li>\n\t<li>https-port (int (or (conf DRPC-HTTPS-PORT) 0))</li>\n\t<li>https-ks-path (conf DRPC-HTTPS-KEYSTORE-PATH)</li>\n\t<li>https-ks-password (conf DRPC-HTTPS-KEYSTORE-PASSWORD)</li>\n\t<li>https-ks-type (conf DRPC-HTTPS-KEYSTORE-TYPE)</li>\n\t<li>https-key-password (conf DRPC-HTTPS-KEY-PASSWORD)</li>\n\t<li>https-ts-path (conf DRPC-HTTPS-TRUSTSTORE-PATH)</li>\n\t<li>https-ts-password (conf DRPC-HTTPS-TRUSTSTORE-PASSWORD)</li>\n\t<li>https-ts-type (conf DRPC-HTTPS-TRUSTSTORE-TYPE)</li>\n\t<li>https-want-client-auth (conf DRPC-HTTPS-WANT-CLIENT-AUTH)</li>\n\t<li>https-need-client-auth (conf DRPC-HTTPS-NEED-CLIENT-AUTH)]<br/>\n    -</li>\n\t<li>(UIHelpers/stormRunJetty</li>\n\t<li>(int drpc-http-port)</li>\n\t<li>(reify IConfigurator (execute <span class=\"error\">&#91;this server&#93;</span></li>\n\t<li>(UIHelpers/configSsl server</li>\n\t<li>https-port</li>\n\t<li>https-ks-path</li>\n\t<li>https-ks-password</li>\n\t<li>https-ks-type</li>\n\t<li>https-key-password</li>\n\t<li>https-ts-path</li>\n\t<li>https-ts-password</li>\n\t<li>https-ts-type</li>\n\t<li>https-need-client-auth</li>\n\t<li>https-want-client-auth)</li>\n\t<li>(UIHelpers/configFilter server (ring.util.servlet/servlet app) filters-confs))))))</li>\n\t<li>(start-metrics-reporters conf)</li>\n\t<li>(when handler-server</li>\n\t<li>(.serve handler-server)))))<br/>\n    +(let [app (-> (webapp drpc-server http-creds-handler)\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Can we please have a follow on JIRA to port the webapp portion over to java too?  Until it is done I don't consider DRPC moved to java.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652368/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652372","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652372","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652372,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzNzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:50:06Z","updated_at":"2025-01-24T14:23:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54300044\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54300044</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    To make code more clean, can we have methods like below<br/>\n    ```<br/>\n    String registerRequest(functionName, functionArgs) - Creates a new id with the function name<br/>\n    awaitOnResult(id) - blocks on the semaphore associated with the id<br/>\n    notifyOnResult(id) - releases the semaphore associated with the id<br/>\n    updateResult(id, Object result) - update the result <br/>\n    removeRequest(id) - Cleanup the request<br/>\n    ```<br/>\n    The above four methods can go into a class named DRPCState/DRPCRequestRegistry. what do you think?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652372/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652377","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652377","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652377,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzNzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:50:13Z","updated_at":"2025-01-24T14:23:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54300063\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54300063</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    We should not be using com.sun internal classes.  We didn't use them before we should not use them now.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652377/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652379","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652379","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652379,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzNzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:55:13Z","updated_at":"2025-01-24T14:23:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54300776\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54300776</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    All the semaphore/queue related logic will sit together in one class and not dispersed across. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652379/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700710","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700710","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700710,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T20:59:47Z","updated_at":"2025-01-24T14:44:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagit\">dagit</a>:</i>\n<p>OK, looking at this some more: It is not the size of the jar file that matters here, it is the size of the topology config and the topology instance when serialized. If those are too big, then as <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kishorvpatil\" class=\"user-hover\" rel=\"kishorvpatil\">Kishor Patil</a> noted, there is a 16MB max limit in thrift that we are not correctly overriding with the config mentioned above. Nimbus should launch with a thrift server that has the max buffer size configured correctly, instead of always using the default of 16MB.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700710/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652387","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652387","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652387,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:05:38Z","updated_at":"2025-01-24T14:23:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54302011\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54302011</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is a perfect place to actually improve things to make them more object oriented.  The key to almost all of these maps is the same thing.  Why not remove all of the special ordering that we have to do on setup and cleanup.</p>\n\n<p>    ```<br/>\n    private static class InternalRequest {<br/>\npublic final Semaphore sem;<br/>\npublic final long startTimeSecs;<br/>\npublic final string function;<br/>\npublic final DRPCRequest request;<br/>\npublic volatile Object result;</p>\n\n<p>public InternalRequest(String function, DRPCRequest request) </p>\n{\n    sem = new Semaphore(0);\n    startTimeSecs = Time.currentTimeSecs();\n    this.function = function;\n    this.request = request;\n}\n<p>    }</p>\n\n<p>    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652387/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652395","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652395","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652395,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIzOTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:08:22Z","updated_at":"2025-01-24T14:23:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54302312\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54302312</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    We cannot just create a new MetricRegistry each time.  The metrics will be lost.  In the clojure code there is a default registry that is used by all of the metrics.  We need a similar one everywhere for all of our code to use (including the clojure code)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652402","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652402","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652402,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0MDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:10:24Z","updated_at":"2025-01-24T14:23:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54302536\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54302536</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    This is never used and should be removed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652402/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652410","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652410","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652410,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:11:13Z","updated_at":"2025-01-24T14:23:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54302621\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54302621</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    the set and get of HttpCredsHandler is never used.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652410/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652420","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652420","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652420,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0MjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:13:35Z","updated_at":"2025-01-24T14:23:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54302915\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54302915</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) </p>\n{\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();\n    +    requestQueues.put(function, reqQueue);\n    +}\n<p>    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    +if (reqContext != null) </p>\n{\n    +    ThriftAccessLogger.logAccess(reqContext.requestID(), reqContext.remoteAddress(), reqContext.principal(), operation);\n    +}\n<p>    +if (aclHandler != null) {<br/>\n    +    if (reqContext == null)<br/>\n    +reqContext = ReqContext.context();<br/>\n    +    if (!aclHandler.permit(reqContext, operation, mapping)) </p>\n{\n    +Principal principal = reqContext.principal();\n    +String user = (principal != null) ? principal.getName() : \"unknown\";\n    +throw new AuthorizationException(\"DRPC request '\" + operation + \"' for '\" + user + \"' user is not authorized\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\n    +checkAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    +    }\n<p>    +<br/>\n    +    // TO be replaced by Common.mkAuthorizationHandler<br/>\n    +    private IAuthorizer mkAuthorizationHandler(String klassname, Map conf) {<br/>\n    +IAuthorizer authorizer = null;<br/>\n    +Class aznClass = null;<br/>\n    +if (StringUtils.isNotBlank(klassname)) {<br/>\n    +    try {<br/>\n    +aznClass = Class.forName(klassname);<br/>\n    +authorizer = (IAuthorizer) aznClass.newInstance();<br/>\n    +if (authorizer != null) </p>\n{\n    +    authorizer.prepare(conf);\n    +}\n<p>    +    } catch (Exception e) </p>\n{\n    +LOG.error(\"mkAuthorizationHandler failed!\", e);\n    +    }\n<p>    +}<br/>\n    +LOG.debug(\"authorization class name: {} class: {} handler: {}\", klassname, aznClass, authorizer);<br/>\n    +return authorizer;<br/>\n    +    }<br/>\n    +<br/>\n    +    public Map getConf() </p>\n{\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static void main(String[] args) throws Exception {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This main does not work if we are using HTTP.  The servlet is not setup.  We should probably remove this until it actually works.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652420/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652425","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652425","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652425,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0MjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:13:50Z","updated_at":"2025-01-24T14:23:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54302948\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54302948</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) </p>\n{\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();\n    +    requestQueues.put(function, reqQueue);\n    +}\n<p>    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    +if (reqContext != null) </p>\n{\n    +    ThriftAccessLogger.logAccess(reqContext.requestID(), reqContext.remoteAddress(), reqContext.principal(), operation);\n    +}\n<p>    +if (aclHandler != null) {<br/>\n    +    if (reqContext == null)<br/>\n    +reqContext = ReqContext.context();<br/>\n    +    if (!aclHandler.permit(reqContext, operation, mapping)) </p>\n{\n    +Principal principal = reqContext.principal();\n    +String user = (principal != null) ? principal.getName() : \"unknown\";\n    +throw new AuthorizationException(\"DRPC request '\" + operation + \"' for '\" + user + \"' user is not authorized\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\n    +checkAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    +    }\n<p>    +<br/>\n    +    // TO be replaced by Common.mkAuthorizationHandler<br/>\n    +    private IAuthorizer mkAuthorizationHandler(String klassname, Map conf) {<br/>\n    +IAuthorizer authorizer = null;<br/>\n    +Class aznClass = null;<br/>\n    +if (StringUtils.isNotBlank(klassname)) {<br/>\n    +    try {<br/>\n    +aznClass = Class.forName(klassname);<br/>\n    +authorizer = (IAuthorizer) aznClass.newInstance();<br/>\n    +if (authorizer != null) </p>\n{\n    +    authorizer.prepare(conf);\n    +}\n<p>    +    } catch (Exception e) </p>\n{\n    +LOG.error(\"mkAuthorizationHandler failed!\", e);\n    +    }\n<p>    +}<br/>\n    +LOG.debug(\"authorization class name: {} class: {} handler: {}\", klassname, aznClass, authorizer);<br/>\n    +return authorizer;<br/>\n    +    }<br/>\n    +<br/>\n    +    public Map getConf() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is never used.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652425/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652428","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652428","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652428,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:24:50Z","updated_at":"2025-01-24T14:23:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54304122\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54304122</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Why did we combine service-handler and launch-server! into a single launchServer method?  The only thing that was missing in local mode that this adds is the clearThread to time out missed tuples.  Did you run into issues with testing when this was not included?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652428/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652431","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652431","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652431,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:27:21Z","updated_at":"2025-01-24T14:23:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54304399\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54304399</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Never mind the old code launched the clear-thread in service-handler.  To me it feels cleaner to have the Constructor act like service-handler and launchServer to start up the thrift servers and HTTP Server.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652431/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652439","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652439","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652439,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:28:17Z","updated_at":"2025-01-24T14:23:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54304501\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54304501</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    minor nit. There were parens around the funcArgs</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652439/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652442","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652442","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652442,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0NDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:31:37Z","updated_at":"2025-01-24T14:23:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54304928\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54304928</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Does Guava have a way to create this map cleaner?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652445","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652445","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652445,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0NDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:41:29Z","updated_at":"2025-01-24T14:23:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54305940\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54305940</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    This does not actually do the same thing.  what happens if the compareAndSet fails?  If you want it the same we have to loop around and try again until it succeeds.</p>\n\n<p>    ```<br/>\n    int newid = 0;<br/>\n    do </p>\n{\n      int orig = ctr.get();\n      newid = (orig + 1) % 1000000000;\n    }\n<p> while (!ctr.compareAndSet(orig, newid));<br/>\n    String strid = String.valueOf(newid);<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652445/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652450","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652450","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652450,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:42:18Z","updated_at":"2025-01-24T14:23:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54306040\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54306040</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    ImmutableMap.of(DRPCAuthorizerBase.FUNCTION_NAME, functionName)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652450/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652455","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652455","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652455,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:45:26Z","updated_at":"2025-01-24T14:23:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54306434\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54306434</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Just cast result to a String, if it is not a String we have an internal error that we need to fix.</p>\n\n<p>    Or better yet, in that class I was suggesting we create.  Instead of having an Object for the result lets split it into an Exception and a String result. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652455/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652456","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652456","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652456,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:53:41Z","updated_at":"2025-01-24T14:23:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54307415\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54307415</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) {<br/>\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();<br/>\n    +    requestQueues.put(function, reqQueue);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This should be a putIfAbsent.</p>\n\n<p>    ```<br/>\n    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n      ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n      if (reqQueue == null) {<br/>\nreqQueue = new ConcurrentLinkedQueue<>();<br/>\nConcurrentLinkedQueue<DRPCRequest> old = requestQueues.putIfAbsent(function, reqQueue);<br/>\nif (old != null) </p>\n{\n  reqQueue = old;\n}\n<p>      }<br/>\n      return reqQueue;<br/>\n    }<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652456/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652464","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652464","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652464,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0NjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:55:42Z","updated_at":"2025-01-24T14:23:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54307644\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54307644</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) </p>\n{\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();\n    +    requestQueues.put(function, reqQueue);\n    +}\n<p>    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    +if (reqContext != null) </p>\n{\n    +    ThriftAccessLogger.logAccess(reqContext.requestID(), reqContext.remoteAddress(), reqContext.principal(), operation);\n    +}\n<p>    +if (aclHandler != null) {<br/>\n    +    if (reqContext == null)<br/>\n    +reqContext = ReqContext.context();<br/>\n    +    if (!aclHandler.permit(reqContext, operation, mapping)) </p>\n{\n    +Principal principal = reqContext.principal();\n    +String user = (principal != null) ? principal.getName() : \"unknown\";\n    +throw new AuthorizationException(\"DRPC request '\" + operation + \"' for '\" + user + \"' user is not authorized\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\n    +checkAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    +    }\n<p>    +<br/>\n    +    // TO be replaced by Common.mkAuthorizationHandler<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Then lets create the file and just put it in there now, so the next person does not have to do it later.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652464/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189500334","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-189500334","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":189500334,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTUwMDMzNA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:58:04Z","updated_at":"2016-02-26T21:58:04Z","author_association":"CONTRIBUTOR","body":"Done with my first pass through the code.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189500334/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652471","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652471","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652471,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:58:05Z","updated_at":"2025-01-24T14:23:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-189500334\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-189500334</a></p>\n\n<p>    Done with my first pass through the code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652471/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189501174","html_url":"https://github.com/apache/storm/pull/1158#issuecomment-189501174","issue_url":"https://api.github.com/repos/apache/storm/issues/1158","id":189501174,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTUwMTE3NA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T21:59:32Z","updated_at":"2016-02-26T21:59:32Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189501174/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189522481","html_url":"https://github.com/apache/storm/pull/1141#issuecomment-189522481","issue_url":"https://api.github.com/repos/apache/storm/issues/1141","id":189522481,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTUyMjQ4MQ==","user":{"login":"haohui","id":1192828,"node_id":"MDQ6VXNlcjExOTI4Mjg=","avatar_url":"https://avatars.githubusercontent.com/u/1192828?v=4","gravatar_id":"","url":"https://api.github.com/users/haohui","html_url":"https://github.com/haohui","followers_url":"https://api.github.com/users/haohui/followers","following_url":"https://api.github.com/users/haohui/following{/other_user}","gists_url":"https://api.github.com/users/haohui/gists{/gist_id}","starred_url":"https://api.github.com/users/haohui/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haohui/subscriptions","organizations_url":"https://api.github.com/users/haohui/orgs","repos_url":"https://api.github.com/users/haohui/repos","events_url":"https://api.github.com/users/haohui/events{/privacy}","received_events_url":"https://api.github.com/users/haohui/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T23:17:17Z","updated_at":"2016-02-26T23:17:17Z","author_association":"NONE","body":"Thanks for updating the patch!\n\n> In some cases like true AND null the query was still returning results, hence I had changed StormSqlFunctions.eq and StormSqlFunctions.ne to return false if either arg was null. \n\nThat sounds like a bug to me. Can you please create a jira and post the query?\n\nPosted inlined comment. I think the first commit is pretty good. Let's separate the second commit to another jira.\n\nThere are some pending tasks. I think we need to expose array / UDF in the DDL as well, my suggestion is to closely follow the syntax of Hive. I think both work can be done in separate jiras.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189522481/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875460","html_url":"https://github.com/apache/storm/issues/5405#issuecomment-2612875460","issue_url":"https://api.github.com/repos/apache/storm/issues/5405","id":2612875460,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU0NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T23:17:19Z","updated_at":"2025-01-24T16:03:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user haohui commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1141#issuecomment-189522481\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1141#issuecomment-189522481</a></p>\n\n<p>    Thanks for updating the patch!</p>\n\n<p>    > In some cases like true AND null the query was still returning results, hence I had changed StormSqlFunctions.eq and StormSqlFunctions.ne to return false if either arg was null. </p>\n\n<p>    That sounds like a bug to me. Can you please create a jira and post the query?</p>\n\n<p>    Posted inlined comment. I think the first commit is pretty good. Let's separate the second commit to another jira.</p>\n\n<p>    There are some pending tasks. I think we need to expose array / UDF in the DDL as well, my suggestion is to closely follow the syntax of Hive. I think both work can be done in separate jiras.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874035","html_url":"https://github.com/apache/storm/issues/5395#issuecomment-2612874035","issue_url":"https://api.github.com/repos/apache/storm/issues/5395","id":2612874035,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzQwMzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-26T23:23:01Z","updated_at":"2025-01-24T16:02:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Strange... Let's focus that Client seems to be closed but worker still call send() to that Client.<br/>\nThere're methods which closes the Client...</p>\n\n<p>1.  mk-refresh-connection</p>\n\n<p>mk-refresh-connection replaces cached-task->node+port first, and closes remove-connections, so send() shouldn't be called to that Client.</p>\n\n<p>2. Context.term()</p>\n\n<p>It means that worker is in progress of shutdown, so eventually send() shouldn't be called.</p>\n\n<p>3. Connect.run()</p>\n\n<p>Connect.run() only calls Client.close() when closing is true, which means that either 1 or 2 should occur before this one.</p>\n\n<p>Please comment new paths here which I'm missing.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874035/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876871","html_url":"https://github.com/apache/storm/issues/5414#issuecomment-2612876871","issue_url":"https://api.github.com/repos/apache/storm/issues/5414","id":2612876871,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzY4NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T01:04:03Z","updated_at":"2025-01-24T16:04:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Cody\" class=\"user-hover\" rel=\"Cody\">Cody</a><br/>\nI also can see the issue you stated from test-report.</p>\n\n<p>Maybe the change comes from this commit, <a href=\"https://github.com/apache/storm/commit/0fc58437badb0f6b464141889d532dea87ff4457\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/commit/0fc58437badb0f6b464141889d532dea87ff4457</a></p>\n\n<p>Related configuration are here.</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>storm.log.dir</li>\n\t<li>storm.home</li>\n\t<li>storm.workers.artifacts.dir</li>\n</ul>\n\n\n<p>You can refer ConfigUtils.workerArtifactsRoot() to track down why your test tried to write \"events.log\" file to \"/logs/workers-artifacts/<topology id>/<port>/events.log\". </p>\n\n<p>Unfortunately if we doesn't set any of these root dir of worker artifacts is set to /logs/workers-artifacts.<br/>\nThe user account we normally use doesn't have permission to create /logs, so mkdirs() fails \"quitely\" and we see NoSuchFileException when creating or append actual file.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876873","html_url":"https://github.com/apache/storm/issues/5414#issuecomment-2612876873","issue_url":"https://api.github.com/repos/apache/storm/issues/5414","id":2612876873,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzY4NzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T01:14:01Z","updated_at":"2025-01-24T16:04:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Running </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">sudo mvn install</pre>\n</div></div>\n<p> resolves this issue, but we need to make it clear that it's OK to set log dir to /logs when three params are default.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876873/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877237","html_url":"https://github.com/apache/storm/issues/5417#issuecomment-2612877237","issue_url":"https://api.github.com/repos/apache/storm/issues/5417","id":2612877237,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzcyMzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T01:37:13Z","updated_at":"2025-01-24T16:04:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>I think it is intended behavior, since afn is originally required to return number of seconds to sleep.<br/>\nOther way we can throw RuntimeException if afn doesn't meet the contract.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652478","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652478","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652478,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T01:42:20Z","updated_at":"2025-01-24T14:23:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54324937\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54324937</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think we can rename DRPCServer to DRPC later</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652478/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652486","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652486","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652486,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0ODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T01:48:41Z","updated_at":"2025-01-24T14:23:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54325117\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54325117</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    meterHttpRequests is not used as drpc.clj has meter for httpRequests. But we can use this meter after we remove drpc.clj</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652486/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652490","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652490","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652490,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0OTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T01:52:41Z","updated_at":"2025-01-24T14:23:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54325228\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54325228</a></p>\n\n<p>    &#8212; Diff: examples/storm-starter/src/jvm/org/apache/storm/starter/ManualDRPC.java &#8212;<br/>\n    @@ -30,39 +30,37 @@<br/>\n     import org.apache.storm.tuple.Tuple;<br/>\n     import org.apache.storm.tuple.Values;</p>\n\n<p>    -<br/>\n     public class ManualDRPC {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>public static class ExclamationBolt extends BaseBasicBolt {<br/>\n    -</li>\n\t<li>@Override</li>\n\t<li>public void declareOutputFields(OutputFieldsDeclarer declarer) \n{\n    -      declarer.declare(new Fields(\"result\", \"return-info\"));\n    -    }\n<p>    +    public static class ExclamationBolt extends BaseBasicBolt {</p></li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>@Override</li>\n\t<li>public void execute(Tuple tuple, BasicOutputCollector collector) \n{\n    -      String arg = tuple.getString(0);\n    -      Object retInfo = tuple.getValue(1);\n    -      collector.emit(new Values(arg + \"!!!\", retInfo));\n    -    }\n<p>    +@Override<br/>\n    +public void declareOutputFields(OutputFieldsDeclarer declarer) </p>\n{\n    +    declarer.declare(new Fields(\"result\", \"return-info\"));\n    +}</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>}<br/>\n    +@Override<br/>\n    +public void execute(Tuple tuple, BasicOutputCollector collector) \n{\n    +    String arg = tuple.getString(0);\n    +    Object retInfo = tuple.getValue(1);\n    +    collector.emit(new Values(arg + \"!!!\", retInfo));\n    +}</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>public static void main(String[] args) \n{\n    -    TopologyBuilder builder = new TopologyBuilder();\n    -    LocalDRPC drpc = new LocalDRPC();\n    +    }</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>DRPCSpout spout = new DRPCSpout(\"exclamation\", drpc);</li>\n\t<li>builder.setSpout(\"drpc\", spout);</li>\n\t<li>builder.setBolt(\"exclaim\", new ExclamationBolt(), 3).shuffleGrouping(\"drpc\");</li>\n\t<li>builder.setBolt(\"return\", new ReturnResults(), 3).shuffleGrouping(\"exclaim\");<br/>\n    +    public static void main(String[] args) throws Exception\n{\n    +TopologyBuilder builder = new TopologyBuilder();\n    +LocalDRPC drpc = new LocalDRPC();\n     \n    -    LocalCluster cluster = new LocalCluster();\n    -    Config conf = new Config();\n    -    cluster.submitTopology(\"exclaim\", conf, builder.createTopology());\n    +DRPCSpout spout = new DRPCSpout(\"exclamation\", drpc);\n    +builder.setSpout(\"drpc\", spout);\n    +builder.setBolt(\"exclaim\", new ExclamationBolt(), 3).shuffleGrouping(\"drpc\");\n    +builder.setBolt(\"return\", new ReturnResults(), 3).shuffleGrouping(\"exclaim\");\n     \n    -    System.out.println(drpc.execute(\"exclamation\", \"aaa\"));\n    -    System.out.println(drpc.execute(\"exclamation\", \"bbb\"));\n    +LocalCluster cluster = new LocalCluster();\n    +Config conf = new Config();\n    +cluster.submitTopology(\"exclaim\", conf, builder.createTopology());\n     \n    -  }\n<p>    +System.out.println(drpc.execute(\"exclamation\", \"aaa\"));<br/>\n    +System.out.println(drpc.execute(\"exclamation\", \"bbb\"));<br/>\n    +    }<br/>\n     }</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    I will pay attention to this，Thank you for reminding me</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652490/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652497","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652497","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652497,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI0OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T01:52:53Z","updated_at":"2025-01-24T14:23:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54325240\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54325240</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/drpc.clj &#8212;<br/>\n    @@ -210,67 +63,19 @@<br/>\n (wrap-reload '<span class=\"error\">&#91;org.apache.storm.daemon.drpc&#93;</span>)<br/>\n handle-request))</p>\n\n<p>    +<br/>\n     (defn launch-server!<br/>\n       ([]</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(log-message \"Starting drpc server for storm version '\" STORM-VERSION \"'\")<br/>\n (let [conf (clojurify-structure (ConfigUtils/readStormConfig))</li>\n\t<li>worker-threads (int (conf DRPC-WORKER-THREADS))</li>\n\t<li>queue-size (int (conf DRPC-QUEUE-SIZE))<br/>\n       drpc-http-port (int (conf DRPC-HTTP-PORT))</li>\n\t<li>drpc-port (int (conf DRPC-PORT))</li>\n\t<li>drpc-service-handler (service-handler conf)</li>\n\t<li>;; requests and returns need to be on separate thread pools, since calls to</li>\n\t<li>;; \"execute\" don't unblock until other thrift methods are called. So if</li>\n\t<li>;; 64 threads are calling execute, the server won't accept the result</li>\n\t<li>;; invocations that will unblock those threads</li>\n\t<li>handler-server (when (> drpc-port 0)</li>\n\t<li>(ThriftServer. conf</li>\n\t<li>(DistributedRPC$Processor. drpc-service-handler)</li>\n\t<li>ThriftConnectionType/DRPC))</li>\n\t<li>invoke-server (ThriftServer. conf</li>\n\t<li>(DistributedRPCInvocations$Processor. drpc-service-handler)</li>\n\t<li>ThriftConnectionType/DRPC_INVOCATIONS)<br/>\n    +  drpc-server (DrpcServer.)<br/>\n       http-creds-handler (AuthUtils/GetDrpcHttpCredentialsPlugin conf)]</li>\n\t<li>(Utils/addShutdownHookWithForceKillIn1Sec (fn []</li>\n\t<li>(if handler-server (.stop handler-server))</li>\n\t<li>(.stop invoke-server)))</li>\n\t<li>(log-message \"Starting Distributed RPC servers...\")</li>\n\t<li>(future (.serve invoke-server))<br/>\n   (when (> drpc-http-port 0)</li>\n\t<li>(let [app (-> (webapp drpc-service-handler http-creds-handler)</li>\n\t<li>requests-middleware)</li>\n\t<li>filter-class (conf DRPC-HTTP-FILTER)</li>\n\t<li>filter-params (conf DRPC-HTTP-FILTER-PARAMS)</li>\n\t<li>filters-confs <span class=\"error\">&#91;(FilterConfiguration. filter-class filter-params)&#93;</span></li>\n\t<li>https-port (int (or (conf DRPC-HTTPS-PORT) 0))</li>\n\t<li>https-ks-path (conf DRPC-HTTPS-KEYSTORE-PATH)</li>\n\t<li>https-ks-password (conf DRPC-HTTPS-KEYSTORE-PASSWORD)</li>\n\t<li>https-ks-type (conf DRPC-HTTPS-KEYSTORE-TYPE)</li>\n\t<li>https-key-password (conf DRPC-HTTPS-KEY-PASSWORD)</li>\n\t<li>https-ts-path (conf DRPC-HTTPS-TRUSTSTORE-PATH)</li>\n\t<li>https-ts-password (conf DRPC-HTTPS-TRUSTSTORE-PASSWORD)</li>\n\t<li>https-ts-type (conf DRPC-HTTPS-TRUSTSTORE-TYPE)</li>\n\t<li>https-want-client-auth (conf DRPC-HTTPS-WANT-CLIENT-AUTH)</li>\n\t<li>https-need-client-auth (conf DRPC-HTTPS-NEED-CLIENT-AUTH)]<br/>\n    -</li>\n\t<li>(UIHelpers/stormRunJetty</li>\n\t<li>(int drpc-http-port)</li>\n\t<li>(reify IConfigurator (execute <span class=\"error\">&#91;this server&#93;</span></li>\n\t<li>(UIHelpers/configSsl server</li>\n\t<li>https-port</li>\n\t<li>https-ks-path</li>\n\t<li>https-ks-password</li>\n\t<li>https-ks-type</li>\n\t<li>https-key-password</li>\n\t<li>https-ts-path</li>\n\t<li>https-ts-password</li>\n\t<li>https-ts-type</li>\n\t<li>https-need-client-auth</li>\n\t<li>https-want-client-auth)</li>\n\t<li>(UIHelpers/configFilter server (ring.util.servlet/servlet app) filters-confs))))))</li>\n\t<li>(start-metrics-reporters conf)</li>\n\t<li>(when handler-server</li>\n\t<li>(.serve handler-server)))))<br/>\n    +(let [app (-> (webapp drpc-server http-creds-handler)\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    ok</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652497/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652503","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652503","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652503,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1MDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T01:57:37Z","updated_at":"2025-01-24T14:23:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54325384\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54325384</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @abhishekagarwal87  DRPC have already result fetchRequest execute failRequest， and these are override. I don't want to add some other methods. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652503/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652508","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652508","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652508,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1MDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T03:09:52Z","updated_at":"2025-01-24T14:23:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54326847\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54326847</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    perfect   thank you</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652508/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652512","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652512","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652512,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T03:21:42Z","updated_at":"2025-01-24T14:23:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54327041\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54327041</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we  follow up a JIRA to port a default registry over to java too? I will do it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652512/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644067","html_url":"https://github.com/apache/storm/issues/5065#issuecomment-2612644067","issue_url":"https://api.github.com/repos/apache/storm/issues/5065","id":2612644067,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQwNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T05:16:07Z","updated_at":"2025-01-24T14:19:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user abellina opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1160\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1160</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1228\" title=\"port  backtype.storm.fields-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1228\"><del>STORM-1228</del></a>: port fields_test to java</p>\n\n<p>    Fields::select can currently throw a null pointer exception. Apparently this happens when _index.get(\"x\") cannot find the field \"x\" returning null. Since it's being used as an integer in tuple.get, the null value attempts but can't unbox to integer. </p>\n\n<p>    Should it call Fields::fieldIndex, which will throw an IllegalArgumentException if the field does not exist?</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/abellina/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/abellina/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1228\" title=\"port  backtype.storm.fields-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1228\"><del>STORM-1228</del></a>_port_fields_test_to_java</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1160.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1160.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1160</p>\n\n<hr />\n<p>commit 251b4d26ba5aa993254be014647a4c14a0f36bc0<br/>\nAuthor: Alessandro Bellina <abellina@yahoo-inc.com><br/>\nDate:   2016-02-27T04:42:59Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1228\" title=\"port  backtype.storm.fields-test to java\" class=\"issue-link\" data-issue-key=\"STORM-1228\"><del>STORM-1228</del></a>: port fields_test to java</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652517","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652517","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652517,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T08:13:25Z","updated_at":"2025-01-24T14:23:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54330354\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54330354</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    You can add them in the InternalRequest class suggested by Robert. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652517/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874041","html_url":"https://github.com/apache/storm/issues/5395#issuecomment-2612874041","issue_url":"https://api.github.com/repos/apache/storm/issues/5395","id":2612874041,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzQwNDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T10:32:18Z","updated_at":"2025-01-24T16:02:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\">abhishek.agarwal</a>:</i>\n<p>I also checked without any success. One possible cause could be context returning a stale value of client. (host-port --> connections) map inside the context class is not thread safe. There are synchronized blocks but they do not guarantee visibility consistency. <br/>\nHowever, other than shutdown, I could not see any scenario wherein the put and get to this map is called from different thread. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612874041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189629712","html_url":"https://github.com/apache/storm/pull/1155#issuecomment-189629712","issue_url":"https://api.github.com/repos/apache/storm/issues/1155","id":189629712,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTYyOTcxMg==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T12:37:14Z","updated_at":"2016-02-27T12:37:14Z","author_association":"NONE","body":"My change was quite simple: just adding back the logic to check \"storm.local.dir\" property/conf, but there're 3 test failures in \"org.apache.storm.supervisor-test\" (all the others pass without exceptions), I've no idea why, can someone please help take a look?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189629712/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652523","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652523","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652523,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T13:15:54Z","updated_at":"2025-01-24T14:23:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54333182\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54333182</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) </p>\n{\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();\n    +    requestQueues.put(function, reqQueue);\n    +}\n<p>    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    +if (reqContext != null) </p>\n{\n    +    ThriftAccessLogger.logAccess(reqContext.requestID(), reqContext.remoteAddress(), reqContext.principal(), operation);\n    +}\n<p>    +if (aclHandler != null) {<br/>\n    +    if (reqContext == null)<br/>\n    +reqContext = ReqContext.context();<br/>\n    +    if (!aclHandler.permit(reqContext, operation, mapping)) </p>\n{\n    +Principal principal = reqContext.principal();\n    +String user = (principal != null) ? principal.getName() : \"unknown\";\n    +throw new AuthorizationException(\"DRPC request '\" + operation + \"' for '\" + user + \"' user is not authorized\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\n    +checkAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    +    }\n<p>    +<br/>\n    +    // TO be replaced by Common.mkAuthorizationHandler<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    common.clj maybe submit soon</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189637237","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-189637237","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":189637237,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTYzNzIzNw==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T13:17:21Z","updated_at":"2016-02-27T13:17:21Z","author_association":"CONTRIBUTOR","body":"@revans2 @abhishekagarwal87 Than you ver much. I are addressing your comments. But I may not understand what you mean about launchServer method, although I update the method. Can you help me review again?  I want to follow up a JIRA to port the webapp portion over to java about webapp,\nAnd I want to follow up a JIRA to port a default registry over to java for all of our code to use;\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189637237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652526","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652526","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652526,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1MjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T13:17:22Z","updated_at":"2025-01-24T14:23:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-189637237\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-189637237</a></p>\n\n<p>    @revans2 @abhishekagarwal87 Than you ver much. I are addressing your comments. But I may not understand what you mean about launchServer method, although I update the method. Can you help me review again?  I want to follow up a JIRA to port the webapp portion over to java about webapp,<br/>\n    And I want to follow up a JIRA to port a default registry over to java for all of our code to use;</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652526/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877239","html_url":"https://github.com/apache/storm/issues/5417#issuecomment-2612877239","issue_url":"https://api.github.com/repos/apache/storm/issues/5417","id":2612877239,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzcyMzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T13:22:41Z","updated_at":"2025-01-24T16:04:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=johnbaba\">johnbaba</a>:</i>\n<p>Thank you <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a> . I are confused with the return, because sometimes the afn which is created by myself maybe return Interger.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189735905","html_url":"https://github.com/apache/storm/pull/1152#issuecomment-189735905","issue_url":"https://api.github.com/repos/apache/storm/issues/1152","id":189735905,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTczNTkwNQ==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T22:00:48Z","updated_at":"2016-02-27T22:00:48Z","author_association":"NONE","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189735905/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612403198","html_url":"https://github.com/apache/storm/issues/3873#issuecomment-2612403198","issue_url":"https://api.github.com/repos/apache/storm/issues/3873","id":2612403198,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0MDMxOTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-27T23:22:46Z","updated_at":"2025-01-24T12:22:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=525_user\">525_user</a>:</i>\n<p>Hi, </p>\n\n<p>I understand that max.spout.pending is a simple way to achieve back-pressure with acking-enabled.</p>\n\n<p>I want to understand, do we still need max.spout.pending to throttle the spout now that the back-pressure has been implemented? </p>\n\n<p>Thanks!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612403198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652527","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652527","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652527,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1Mjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-28T03:12:23Z","updated_at":"2025-01-24T14:23:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652527/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652537","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652537","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652537,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1Mzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-28T03:12:27Z","updated_at":"2025-01-24T14:23:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user hustfxj reopened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1270\" title=\"port backtype.storm.daemon.drpc to java\" class=\"issue-link\" data-issue-key=\"STORM-1270\"><del>STORM-1270</del></a>  <a href=\"https://issues.apache.org/jira/browse/STORM-1274\" title=\"port backtype.storm.LocalDRPC to java\" class=\"issue-link\" data-issue-key=\"STORM-1274\"><del>STORM-1274</del></a> port drpc&LocalDRPC  to java </p>\n\n<p>    1. Port \"org.apache.storm.daemon.drpc\" to java at \"org.apache.storm.daemon.DrpcServer\".<br/>\n    2. Port \"org.apache.storm.LocalDRPC\" to java at \"org.apache.storm.LocalDRPC\".<br/>\n    3. I keep the \"webapp\" of drpc.clj , as it's hard to translate and we will move ring to other REST framework. </p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/hustfxj/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/hustfxj/storm</a> DRPC</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1156</p>\n\n<hr />\n<p>commit 2040fee56e9a3c0614cd50e30a93389ea2843a77<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-19T00:59:43Z</p>\n\n<p>    port drpc.clj to java</p>\n\n<p>commit 2854d9ee357bf2b03af5801ffe64b3380bd621b6<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-23T04:18:31Z</p>\n\n<p>    rename DrpcProcess</p>\n\n<p>commit 9178b1c8fb7a77dde0608a285d9adc8d0b767867<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-26T06:13:23Z</p>\n\n<p>    Merge branch 'master' into LocalDRPC</p>\n\n<p>commit 802d28e607ce953664fcea7356eac98fb354683f<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-26T12:32:29Z</p>\n\n<p>    update some tests about drpc</p>\n\n<p>commit 8e350d1cf1f16b0101d699de0016bb762061f1e3<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-26T14:59:02Z</p>\n\n<p>    let ManualDRPC throw Exception</p>\n\n<p>commit 491ff9856eaaa8bc0bab6dbc073016b920500216<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-02-27T03:59:05Z</p>\n\n<p>    update DrpcServer code based on revans2  and abhishekagarwal87</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647218","html_url":"https://github.com/apache/storm/issues/5082#issuecomment-2612647218","issue_url":"https://api.github.com/repos/apache/storm/issues/5082","id":2612647218,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDcyMTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-28T13:23:11Z","updated_at":"2025-01-24T14:21:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1069#discussion_r54349604\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1069#discussion_r54349604</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -0,0 +1,127 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.task.OutputCollector;<br/>\n    +import org.apache.storm.task.TopologyContext;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.TupleUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class Acker implements IBolt {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Acker.class);<br/>\n    +<br/>\n    +    private static final long serialVersionUID = 4430906880683183091L;<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = \"__acker\";<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = \"__ack_init\";<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = \"__ack_ack\";<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = \"__ack_fail\";<br/>\n    +<br/>\n    +    public static final int TIMEOUT_BUCKET_NUM = 3;<br/>\n    +<br/>\n    +    private OutputCollector collector;<br/>\n    +    private RotatingMap<Object, AckObject> pending;<br/>\n    +<br/>\n    +    private class AckObject {<br/>\n    +public long val = 0L;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Just checked the implementation of clojure code again. Before sending failure to spout, acker wil check if target spout task id is null first. If target spout task is nil, acker will not send out failure. So, for the case of FAIL arriving first, acker will hold on the failure response untill it receives INIT.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647222","html_url":"https://github.com/apache/storm/issues/5082#issuecomment-2612647222","issue_url":"https://api.github.com/repos/apache/storm/issues/5082","id":2612647222,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDcyMjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-28T13:23:23Z","updated_at":"2025-01-24T14:21:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1069#discussion_r54349608\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1069#discussion_r54349608</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -0,0 +1,127 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.task.OutputCollector;<br/>\n    +import org.apache.storm.task.TopologyContext;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.apache.storm.tuple.Values;<br/>\n    +import org.apache.storm.utils.RotatingMap;<br/>\n    +import org.apache.storm.utils.TupleUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public class Acker implements IBolt {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Acker.class);<br/>\n    +<br/>\n    +    private static final long serialVersionUID = 4430906880683183091L;<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = \"__acker\";<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = \"__ack_init\";<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = \"__ack_ack\";<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = \"__ack_fail\";<br/>\n    +<br/>\n    +    public static final int TIMEOUT_BUCKET_NUM = 3;<br/>\n    +<br/>\n    +    private OutputCollector collector;<br/>\n    +    private RotatingMap<Object, AckObject> pending;<br/>\n    +<br/>\n    +    private class AckObject {<br/>\n    +public long val = 0L;<br/>\n    +public Integer spoutTask = null;<br/>\n    +public boolean failed = false;<br/>\n    +<br/>\n    +// val xor value<br/>\n    +public void updateAck(Long value) </p>\n{\n    +    val = Utils.bitXor(val, value);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) </p>\n{\n    +this.collector = collector;\n    +this.pending = new RotatingMap<Object, AckObject>(TIMEOUT_BUCKET_NUM);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void execute(Tuple input) {<br/>\n    +if (TupleUtils.isTick(input)) {<br/>\n    +    Map<Object, AckObject> tmp = pending.rotate();<br/>\n    +    LOG.debug(\"Number of timeout tuples:{}\", tmp.size());<br/>\n    +    return;<br/>\n    +}<br/>\n    +<br/>\n    +String streamId = input.getSourceStreamId();<br/>\n    +Object id = input.getValue(0);<br/>\n    +AckObject curr = pending.get(id);<br/>\n    +if (ACKER_INIT_STREAM_ID.equals(streamId)) {<br/>\n    +    if (curr == null) </p>\n{\n    +curr = new AckObject();\n    +curr.val = input.getLong(1);\n    +curr.spoutTask = input.getInteger(2);\n    +pending.put(id, curr);\n    +    }\n<p> else </p>\n{\n    +// If receiving bolt's ack before the init message from spout, just update the xor value.\n    +curr.updateAck(input.getLong(1));\n    +curr.spoutTask = input.getInteger(2);\n    +    }\n<p>    +} else if (ACKER_ACK_STREAM_ID.equals(streamId)) {<br/>\n    +    if (curr != null) </p>\n{\n    +curr.updateAck(input.getLong(1));\n    +    }\n<p> else </p>\n{\n    +curr = new AckObject();\n    +curr.val = input.getLong(1);\n    +pending.put(id, curr);\n    +    }\n<p>    +} else if (ACKER_FAIL_STREAM_ID.equals(streamId)) {<br/>\n    +    if (curr == null) {<br/>\n    +// The tuple has been already timeout or failed. So, do nothing<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK. I will update the code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647222/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872817","html_url":"https://github.com/apache/storm/issues/5387#issuecomment-2612872817","issue_url":"https://api.github.com/repos/apache/storm/issues/5387","id":2612872817,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzI4MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-28T14:33:55Z","updated_at":"2025-01-24T16:02:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1155\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1155</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872817/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872820","html_url":"https://github.com/apache/storm/issues/5387#issuecomment-2612872820","issue_url":"https://api.github.com/repos/apache/storm/issues/5387","id":2612872820,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzI4MjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-28T14:43:49Z","updated_at":"2025-01-24T16:02:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user unsleepy22 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1161\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1161</a></p>\n\n<p>    <span class=\"error\">&#91;Storm-1579&#93;</span> Fix NoSuchFileException when running tests in storm-core</p>\n\n<p>    The old code takes \"storm.local.dir\" property as logDir while changes in <a href=\"https://issues.apache.org/jira/browse/STORM-1552\" title=\"Fix topology event sampling log directory \" class=\"issue-link\" data-issue-key=\"STORM-1552\"><del>STORM-1552</del></a> used ConfigUtils.getLogDir, which doesn't take this property, causing the ultimate event log directory to be \"/logs/xxxx\" and resulting in NoSuchFileException because permission is denied to create /logs directory.</p>\n\n<p>    The change of code causes 3 test cases to fail in supervisor_test, so I changed them accordingly to make all tests pass.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/unsleepy22/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/unsleepy22/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1579\" title=\"Got NoSuchFileException when running tests in storm-core\" class=\"issue-link\" data-issue-key=\"STORM-1579\"><del>STORM-1579</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1161.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1161.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1161</p>\n\n<hr />\n<p>commit 034f0cf107403100650d6eb65e7168f62133864a<br/>\nAuthor: 卫乐 <weiyue.wy@taobao.com><br/>\nDate:   2016-02-28T14:33:21Z</p>\n\n<p>    fix <a href=\"https://issues.apache.org/jira/browse/STORM-1579\" title=\"Got NoSuchFileException when running tests in storm-core\" class=\"issue-link\" data-issue-key=\"STORM-1579\"><del>STORM-1579</del></a>, checks storm.local.dir property/conf when getting storm log dir</p>\n\n<p>commit 504c11b8ead80e186ff0de83dbdece2337cd1162<br/>\nAuthor: 卫乐 <weiyue.wy@taobao.com><br/>\nDate:   2016-02-28T14:42:56Z</p>\n\n<p>    append \"/logs\" to \"storm.local.dir\" property when non-null</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872820/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/189923836","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-189923836","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":189923836,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTkyMzgzNg==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-28T19:09:01Z","updated_at":"2016-02-28T19:09:01Z","author_association":"CONTRIBUTOR","body":"@tgravescs @revans2 I have pushed the latest changes. Please let me know of any feedback or further requirements you may have. Thanks.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/189923836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877242","html_url":"https://github.com/apache/storm/issues/5417#issuecomment-2612877242","issue_url":"https://api.github.com/repos/apache/storm/issues/5417","id":2612877242,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzcyNDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T02:03:51Z","updated_at":"2025-01-24T16:04:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jark\">jark</a>:</i>\n<p>I think it's for compatible to clojure as Clojure deals only with long integers internally. So  you can make your afn return a Long instead of Integer.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877242/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876879","html_url":"https://github.com/apache/storm/issues/5414#issuecomment-2612876879","issue_url":"https://api.github.com/repos/apache/storm/issues/5414","id":2612876879,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzY4Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T02:21:42Z","updated_at":"2025-01-24T16:04:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cody\">cody</a>:</i>\n<p>Yes this will resolve the issue, but not natural, I've changed and opened a PR <a href=\"https://github.com/apache/storm/pull/1161\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1161</a>, would you please help review?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876879/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190003786","html_url":"https://github.com/apache/storm/pull/1161#issuecomment-190003786","issue_url":"https://api.github.com/repos/apache/storm/issues/1161","id":190003786,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDAwMzc4Ng==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T02:23:07Z","updated_at":"2016-02-29T02:23:07Z","author_association":"NONE","body":"Build failure looks odd, I have all tests pass locally.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190003786/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648356","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648356","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648356,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDgzNTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T02:55:29Z","updated_at":"2025-01-24T14:21:56Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#discussion_r54365079\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#discussion_r54365079</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/stats/BoltExecutorStats.java &#8212;<br/>\n    @@ -0,0 +1,107 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.stats;<br/>\n    +<br/>\n    +import clojure.lang.PersistentVector;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +import org.apache.storm.metric.internal.MultiCountStatAndMetric;<br/>\n    +import org.apache.storm.metric.internal.MultiLatencyStatAndMetric;<br/>\n    +<br/>\n    +@SuppressWarnings(\"unchecked\")<br/>\n    +public class BoltExecutorStats extends CommonStats {<br/>\n    +<br/>\n    +    public static final String ACKED = \"acked\";<br/>\n    +    public static final String FAILED = \"failed\";<br/>\n    +    public static final String EXECUTED = \"executed\";<br/>\n    +    public static final String PROCESS_LATENCIES = \"process-latencies\";<br/>\n    +    public static final String EXECUTE_LATENCIES = \"execute-latencies\";<br/>\n    +<br/>\n    +    public static final String[] BOLT_FIELDS = </p>\n{ACKED, FAILED, EXECUTED, PROCESS_LATENCIES, EXECUTE_LATENCIES}\n<p>;<br/>\n    +<br/>\n    +    public BoltExecutorStats() </p>\n{\n    +super();\n    +\n    +put(ACKED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(FAILED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(EXECUTED, new MultiCountStatAndMetric(NUM_STAT_BUCKETS));\n    +put(PROCESS_LATENCIES, new MultiLatencyStatAndMetric(NUM_STAT_BUCKETS));\n    +put(EXECUTE_LATENCIES, new MultiLatencyStatAndMetric(NUM_STAT_BUCKETS));\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getAcked() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(ACKED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getFailed() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(FAILED);\n    +    }\n<p>    +<br/>\n    +    public MultiCountStatAndMetric getExecuted() </p>\n{\n    +return (MultiCountStatAndMetric) this.get(EXECUTED);\n    +    }\n<p>    +<br/>\n    +    public MultiLatencyStatAndMetric getProcessLatencies() </p>\n{\n    +return (MultiLatencyStatAndMetric) this.get(PROCESS_LATENCIES);\n    +    }\n<p>    +<br/>\n    +    public MultiLatencyStatAndMetric getExecuteLatencies() </p>\n{\n    +return (MultiLatencyStatAndMetric) this.get(EXECUTE_LATENCIES);\n    +    }\n<p>    +<br/>\n    +    public void boltExecuteTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getExecuted().incBy(key, this.rate);\n    +this.getExecuteLatencies().record(key, latencyMs);\n    +    }\n<p>    +<br/>\n    +    public void boltAckedTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getAcked().incBy(key, this.rate);\n    +this.getProcessLatencies().record(key, latencyMs);\n    +    }\n<p>    +<br/>\n    +    public void boltFailedTuple(String component, String stream, long latencyMs) </p>\n{\n    +Object key = PersistentVector.create(component, stream);\n    +this.getFailed().incBy(key, this.rate);\n    +\n    +    }\n<p>    +<br/>\n    +    public Map renderStats() {<br/>\n    +cleanupStats();<br/>\n    +Map ret = new HashMap();<br/>\n    +ret.putAll(valueStats(CommonStats.COMMON_FIELDS));<br/>\n    +ret.putAll(valueStats(BoltExecutorStats.BOLT_FIELDS));<br/>\n    +StatsUtil.putRawKV(ret, StatsUtil.TYPE, StatsUtil.KW_BOLT);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @revans2 I've changed all the others according to your comments, my only problem is renderStats, do you mean that I only need to maintain ExecutorStats in memory without any stats Maps while running? Although renderStats is only used in thriftify-zk-worker-hb, when workers do heartbeats(see worker/do-executor-heartbeats method), it will use a clojure PersistentMap data structure, which messes with ExecutorStats, should I turn it into ExecutorStats too?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648356/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612869167","html_url":"https://github.com/apache/storm/issues/5365#issuecomment-2612869167","issue_url":"https://api.github.com/repos/apache/storm/issues/5365","id":2612869167,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjkxNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T05:00:14Z","updated_at":"2025-01-24T16:00:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=satish.duggana\">satish.duggana</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a> I will raise PR for this JIRA. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612869167/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190040776","html_url":"https://github.com/apache/storm/pull/1141#issuecomment-190040776","issue_url":"https://api.github.com/repos/apache/storm/issues/1141","id":190040776,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDA0MDc3Ng==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T05:09:31Z","updated_at":"2016-02-29T05:09:31Z","author_association":"CONTRIBUTOR","body":"- Removed the second commit. I will raise follow up JIRAs to support UDF and expose it via DDL.\n- Removed guava test dep from storm-sql-runtime (not sure why this was a concern since storm-sql-core tests already uses guava classes).\n- Added test cases to test the semantics for AND and OR with nullable on both sides.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190040776/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875464","html_url":"https://github.com/apache/storm/issues/5405#issuecomment-2612875464","issue_url":"https://api.github.com/repos/apache/storm/issues/5405","id":2612875464,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzU0NjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T05:09:32Z","updated_at":"2025-01-24T16:03:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1141#issuecomment-190040776\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1141#issuecomment-190040776</a></p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>Removed the second commit. I will raise follow up JIRAs to support UDF and expose it via DDL.</li>\n\t<li>Removed guava test dep from storm-sql-runtime (not sure why this was a concern since storm-sql-core tests already uses guava classes).</li>\n\t<li>Added test cases to test the semantics for AND and OR with nullable on both sides.</li>\n</ul>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612875464/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877472","html_url":"https://github.com/apache/storm/issues/5419#issuecomment-2612877472","issue_url":"https://api.github.com/repos/apache/storm/issues/5419","id":2612877472,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzc0NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T05:15:53Z","updated_at":"2025-01-24T16:04:39Z","author_association":"COLLABORATOR","body":"Subtasks:\n\n- STORM-1585\n- STORM-1586\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877472/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877571","html_url":"https://github.com/apache/storm/issues/5420#issuecomment-2612877571","issue_url":"https://api.github.com/repos/apache/storm/issues/5420","id":2612877571,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzc1NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-29T05:19:26Z","updated_at":"2025-01-24T16:04:42Z","author_association":"COLLABORATOR","body":"Subtask of parent task STORM-1584","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877571/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]