[{"url":"https://api.github.com/repos/apache/celix/issues/comments/1913683227","html_url":"https://github.com/apache/celix/issues/723#issuecomment-1913683227","issue_url":"https://api.github.com/repos/apache/celix/issues/723","id":1913683227,"node_id":"IC_kwDOAVuczs5yEH0b","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-01-28T18:28:11Z","updated_at":"2024-01-28T18:28:11Z","author_association":"CONTRIBUTOR","body":"Is like the `dynType_isPreallocatable` approach :)","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1913683227/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1913683356","html_url":"https://github.com/apache/celix/pull/699#issuecomment-1913683356","issue_url":"https://api.github.com/repos/apache/celix/issues/699","id":1913683356,"node_id":"IC_kwDOAVuczs5yEH2c","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-01-28T18:28:35Z","updated_at":"2024-01-28T18:28:35Z","author_association":"CONTRIBUTOR","body":"I will try to find to time to review this PR, this week. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1913683356/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1918558221","html_url":"https://github.com/apache/celix/pull/699#issuecomment-1918558221","issue_url":"https://api.github.com/repos/apache/celix/issues/699","id":1918558221,"node_id":"IC_kwDOAVuczs5yWuAN","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-01-31T07:45:17Z","updated_at":"2024-01-31T07:50:47Z","author_association":"CONTRIBUTOR","body":"> It has been a while since I looked into this code, so reviewing will take some days.\r\nI do remember that I really liked creating libdfi; It is quite a powerful concept, complex to implement and wrap your head around (ffi with a pointer to a argument array, where the argument entries are pointers to the argument values and the argument values can be pointers or even a double output pointers) , but it possible to nice split up the parsing and usage in small functions.\r\n\r\n> Originally my idea was also to allow optional usage of libdfi in the framework so that it would be possible to (e.g.) use a service struct of version 1.0.0 while the provided service is 1.1.0. With libdfi is should be possible to ad-hoc create a 1.0.0 version based on the 1.0.0 and 1.1.0 descriptor (assuming correct usage of semver). But I digress.\r\n\r\nThanks for sharing the background with me. I pretended to be cool, but let me admit it: the libdfi work is eyeopening, which leads to another \"WOW, things could really be done like this\" awe. \r\n\r\nInspired by the Rust POC, to be more concrete, the `build.rs` and procedural macro, I think clang/libclang integrated with the build system is worth trying for framework side code generation/transformation. RSA descriptor is an ideal code generation target.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1918558221/reactions","total_count":1,"+1":0,"-1":0,"laugh":1,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1922894621","html_url":"https://github.com/apache/celix/issues/96#issuecomment-1922894621","issue_url":"https://api.github.com/repos/apache/celix/issues/96","id":1922894621,"node_id":"IC_kwDOAVuczs5ynQsd","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-02T06:03:41Z","updated_at":"2024-02-02T06:03:41Z","author_association":"CONTRIBUTOR","body":"This has been addressed by #711.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1922894621/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1922970135","html_url":"https://github.com/apache/celix/issues/675#issuecomment-1922970135","issue_url":"https://api.github.com/repos/apache/celix/issues/675","id":1922970135,"node_id":"IC_kwDOAVuczs5ynjIX","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-02T06:23:28Z","updated_at":"2024-02-02T06:23:28Z","author_association":"CONTRIBUTOR","body":"This has been addressed by #707.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1922970135/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1923536557","html_url":"https://github.com/apache/celix/pull/722#issuecomment-1923536557","issue_url":"https://api.github.com/repos/apache/celix/issues/722","id":1923536557,"node_id":"IC_kwDOAVuczs5yptat","user":{"login":"rlenferink","id":10008950,"node_id":"MDQ6VXNlcjEwMDA4OTUw","avatar_url":"https://avatars.githubusercontent.com/u/10008950?v=4","gravatar_id":"","url":"https://api.github.com/users/rlenferink","html_url":"https://github.com/rlenferink","followers_url":"https://api.github.com/users/rlenferink/followers","following_url":"https://api.github.com/users/rlenferink/following{/other_user}","gists_url":"https://api.github.com/users/rlenferink/gists{/gist_id}","starred_url":"https://api.github.com/users/rlenferink/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rlenferink/subscriptions","organizations_url":"https://api.github.com/users/rlenferink/orgs","repos_url":"https://api.github.com/users/rlenferink/repos","events_url":"https://api.github.com/users/rlenferink/events{/privacy}","received_events_url":"https://api.github.com/users/rlenferink/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-02T10:39:14Z","updated_at":"2024-02-02T10:39:14Z","author_association":"MEMBER","body":"Just as a reference and that we need to fix this: the ASF infra team has a policy that all external actions **must** be pinned to a specific git hash, instead of a tag.\r\n\r\nSee https://infra.apache.org/github-actions-policy.html (section \"External actions\") for more information on this.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1923536557/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1923850948","html_url":"https://github.com/apache/celix/pull/721#issuecomment-1923850948","issue_url":"https://api.github.com/repos/apache/celix/issues/721","id":1923850948,"node_id":"IC_kwDOAVuczs5yq6LE","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-02T13:51:09Z","updated_at":"2024-02-02T13:51:09Z","author_association":"CONTRIBUTOR","body":"> The first round review finished. I noticed code duplications in `celix_properties`, and thus suggest an alternative design:\r\n> \r\n> * Add only one type to `celix_properties`, i.e. ArrayList\r\n> * Add only four (or more?) methods `setArrayList`/`assignArrayList`/`getArrayList`/`getAsArrayList`\r\n> * Move element type information into `celix_array_list`, so that we can have the right copy operation for them.\r\n> \r\n> This way:\r\n> \r\n> * We don't need to check arrayList's element types, which is totally left to arrayList\r\n> * The dangling pointer issue is solved naturally by the right copy operation in arrayList\r\n> * The code duplication in `celix_properties` is eliminated.\r\n> \r\n> WDYT?\r\n\r\nSounds good and I will look into this. I am bit uncertain how this impact celix_array_list and its current usage. \r\n\r\nCurrently the array list implementation has no notion a an element type and just provided access to a union element entry.  \r\nA logically way to specify the array list entry type is during creations, but this impact all usage of `celix_arrayList_create` and `celix_arrayList_createWithOptions`. \r\n\r\nAn other options could be to set the element type when entries are added, so a call to `celix_arrayList_addLong` will make the array list element type long and a followup call to `celix_arrayList_setDouble` or `celix_arrayList_getDouble`, etc will fail. \r\n\r\nOr maybe mixed element types should be allowed, but I do no think this is a valid use case. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1923850948/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1924015474","html_url":"https://github.com/apache/celix/pull/722#issuecomment-1924015474","issue_url":"https://api.github.com/repos/apache/celix/issues/722","id":1924015474,"node_id":"IC_kwDOAVuczs5yriVy","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-02T14:37:43Z","updated_at":"2024-02-02T14:37:43Z","author_association":"CONTRIBUTOR","body":"> Just as a reference and that we need to fix this: the ASF infra team has a policy that all external actions **must** be pinned to a specific git hash, instead of a tag.\r\n> \r\n> See https://infra.apache.org/github-actions-policy.html (section \"External actions\") for more information on this.\r\n\r\nThanks for reminding. I'll fix this.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1924015474/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1925867164","html_url":"https://github.com/apache/celix/pull/721#issuecomment-1925867164","issue_url":"https://api.github.com/repos/apache/celix/issues/721","id":1925867164,"node_id":"IC_kwDOAVuczs5yymac","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-04T18:04:48Z","updated_at":"2024-02-04T18:04:48Z","author_association":"CONTRIBUTOR","body":"> > The first round review finished. I noticed code duplications in `celix_properties`, and thus suggest an alternative design:\r\n> > \r\n> > * Add only one type to `celix_properties`, i.e. ArrayList\r\n> > * Add only four (or more?) methods `setArrayList`/`assignArrayList`/`getArrayList`/`getAsArrayList`\r\n> > * Move element type information into `celix_array_list`, so that we can have the right copy operation for them.\r\n> > \r\n> > This way:\r\n> > \r\n> > * We don't need to check arrayList's element types, which is totally left to arrayList\r\n> > * The dangling pointer issue is solved naturally by the right copy operation in arrayList\r\n> > * The code duplication in `celix_properties` is eliminated.\r\n> > \r\n> > WDYT?\r\n> \r\n> Sounds good and I will look into this. I am bit uncertain how this impact celix_array_list and its current usage.\r\n> \r\n> Currently the array list implementation has no notion a an element type and just provided access to a union element entry. A logically way to specify the array list entry type is during creations, but this impact all usage of `celix_arrayList_create` and `celix_arrayList_createWithOptions`.\r\n> \r\n> An other options could be to set the element type when entries are added, so a call to `celix_arrayList_addLong` will make the array list element type long and a followup call to `celix_arrayList_setDouble` or `celix_arrayList_getDouble`, etc will fail.\r\n> \r\n> Or maybe mixed element types should be allowed, but I do no think this is a valid use case.\r\n\r\nI will create a separate pull request to add element type support to the array list, including a array list copy function. \r\nAnd when the array list with element type pull request is merged, I will update this PR and simplify the typed array list support for properties. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1925867164/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1926084338","html_url":"https://github.com/apache/celix/pull/710#issuecomment-1926084338","issue_url":"https://api.github.com/repos/apache/celix/issues/710","id":1926084338,"node_id":"IC_kwDOAVuczs5yzbby","user":{"login":"xuzhenbao","id":43104033,"node_id":"MDQ6VXNlcjQzMTA0MDMz","avatar_url":"https://avatars.githubusercontent.com/u/43104033?v=4","gravatar_id":"","url":"https://api.github.com/users/xuzhenbao","html_url":"https://github.com/xuzhenbao","followers_url":"https://api.github.com/users/xuzhenbao/followers","following_url":"https://api.github.com/users/xuzhenbao/following{/other_user}","gists_url":"https://api.github.com/users/xuzhenbao/gists{/gist_id}","starred_url":"https://api.github.com/users/xuzhenbao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xuzhenbao/subscriptions","organizations_url":"https://api.github.com/users/xuzhenbao/orgs","repos_url":"https://api.github.com/users/xuzhenbao/repos","events_url":"https://api.github.com/users/xuzhenbao/events{/privacy}","received_events_url":"https://api.github.com/users/xuzhenbao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-05T01:52:59Z","updated_at":"2024-02-05T01:52:59Z","author_association":"CONTRIBUTOR","body":"@pnoltes \r\n\r\nI have updated the PR, it includes the following changes:\r\n\r\n1.Move the work of exporting dynamic IP endpoints to the Topology Manager, the dynamic IP endpoints contain the following specific properties.\r\n    - celix.rsa.ip.addresses\r\n       The list of dynamic IPs, the Topology Manager should set an empty celix.rsa.ip.addresses property, and DISCOVERY will fill in the dynamic IP when it detects the celix.rsa.ip.addresses property\r\n    - celix.rsa.port\r\n       The port number of the remote service, its value is filled by RSA\r\n    - celix.rsa.ifname\r\n        Network interface name, set by Topology Manager\r\n\r\n2. The endpoint listener service of Discovery adds the property celix.rsa.discovery.interface.specific.endpoints.support, which indicates whether DISCOVERY supports dynamic IP filling based on the network interface name.\r\n\r\n3. The RSA service adds the property celix.rsa.dynamic.ip.support, which indicates whether RSA supports dynamic IP. When the celix.rsa.dynamic.ip.support property is true, the Topology Manager should generate dynamic IP endpoints based on the registration exported by RSA, and notify these endpoints to the DISCOVERY implementation that supports dynamic IP.\r\n\r\n4. Add configuration property CELIX_RSA_INTERFACES_OF_PORT_<port> (e.g. CELIX_RSA_INTERFACES_OF_PORT_8080=eth0,eth1), which indicates to which network interfaces the server of the corresponding port should be bound. The Topology Manager should fill in the celix.rsa.ifname property based on these configurations when creating dynamic IP endpoints.\r\n\r\n5. Add the Facility of libcurl error codes, which is used to distinguish between http status code (CELIX_FACILITY_HTTP) and libcurl error codes in `rsa_dfi`\r\n\r\n6. Add CELIX_RSA prefix for constants in the `rsa_spi`\r\n\r\n7. celix.rsa.ip.addresses currently uses a comma-separated string, and it will use a string array (It depends on https://github.com/apache/celix/issues/674)\r\n\r\n8. Topology Manager and RSA_DFI still leave some deprecated interfaces usage, and the related code is planned to be cleaned up in other PRs.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1926084338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1926840983","html_url":"https://github.com/apache/celix/pull/726#issuecomment-1926840983","issue_url":"https://api.github.com/repos/apache/celix/issues/726","id":1926840983,"node_id":"IC_kwDOAVuczs5y2UKX","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-05T12:05:14Z","updated_at":"2024-02-05T12:05:14Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/726?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`70548d6`)](https://app.codecov.io/gh/apache/celix/commit/70548d615abb282b2b2cd9e5a67c29dc34c99b33?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) 88.85% compared to head [(`af208d8`)](https://app.codecov.io/gh/apache/celix/pull/726?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) 88.88%.\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #726      +/-   ##\n==========================================\n+ Coverage   88.85%   88.88%   +0.02%     \n==========================================\n  Files         216      217       +1     \n  Lines       24293    24376      +83     \n==========================================\n+ Hits        21585    21666      +81     \n- Misses       2708     2710       +2     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/726?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1926840983/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1927699836","html_url":"https://github.com/apache/celix/pull/710#issuecomment-1927699836","issue_url":"https://api.github.com/repos/apache/celix/issues/710","id":1927699836,"node_id":"IC_kwDOAVuczs5y5l18","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-05T18:19:29Z","updated_at":"2024-02-05T18:19:29Z","author_association":"CONTRIBUTOR","body":"> 7\\. nd it will use a string array (\r\n\r\nThanks for the trigger, I will try to find some time to review this in the coming days. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1927699836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1928958124","html_url":"https://github.com/apache/celix/pull/726#issuecomment-1928958124","issue_url":"https://api.github.com/repos/apache/celix/issues/726","id":1928958124,"node_id":"IC_kwDOAVuczs5y-ZCs","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-06T07:54:29Z","updated_at":"2024-02-06T07:54:29Z","author_association":"CONTRIBUTOR","body":"As mentioned in #612, the purpose of this netstring lib is to serialize/deserialize properties.\r\n\r\nAfter reading netstring's spec([1]),  I noticed that netstring is used to encoding byte string, for which we still lack an efficient in-memory representation like [ccan/bytestring](https://github.com/rustyrussell/ccan/tree/master/ccan/bytestring). \r\n\r\nA second issue I found is related to our current efforts to add typing support to `celix_properties`: there is no typing support in netstring. This can be fixed by adopting \"tagged netstrings\" ([2]).\r\n\r\nThen I have the third issue: by having a separate netstring library, what's the in memory representation of a tagged netstring? A bold thought turns up: what if we combine this nestring library into utils, and have `celix_array_list`, `celix_properties`, to-be-added `celix_bytestring`, and other types as the in memory representations of tagged netstrings?\r\n\r\nI just record some thoughts here, which should not be viewed as anything like request for changes. But I do think the second issue is worth considering before merging this PR. @pnoltes @xuzhenbao \r\n\r\n[1] https://cr.yp.to/proto/netstrings.txt\r\n[2] https://tnetstrings.info/\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1928958124/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1932686204","html_url":"https://github.com/apache/celix/pull/726#issuecomment-1932686204","issue_url":"https://api.github.com/repos/apache/celix/issues/726","id":1932686204,"node_id":"IC_kwDOAVuczs5zMnN8","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-07T19:02:35Z","updated_at":"2024-02-07T19:02:35Z","author_association":"CONTRIBUTOR","body":"> As mentioned in #612, the purpose of this netstring lib is to serialize/deserialize properties.\r\n> \r\n> After reading netstring's spec([1]), I noticed that netstring is used to encoding byte string, for which we still lack an efficient in-memory representation like [ccan/bytestring](https://github.com/rustyrussell/ccan/tree/master/ccan/bytestring).\r\n> \r\n> A second issue I found is related to our current efforts to add typing support to `celix_properties`: there is no typing support in netstring. This can be fixed by adopting \"tagged netstrings\" ([2]).\r\n> \r\n> Then I have the third issue: by having a separate netstring library, what's the in memory representation of a tagged netstring? A bold thought turns up: what if we combine this nestring library into utils, and have `celix_array_list`, `celix_properties`, to-be-added `celix_bytestring`, and other types as the in memory representations of tagged netstrings?\r\n> \r\n> I just record some thoughts here, which should not be viewed as anything like request for changes. But I do think the second issue is worth considering before merging this PR. @pnoltes @xuzhenbao\r\n> \r\n> [1] https://cr.yp.to/proto/netstrings.txt [2] https://tnetstrings.info/\r\n\r\ntnetstring could be a nice fitting solution, but maybe we should also reconsider using JSON are serialization format? Downside is that we then make a JSON lib (i.e. jansson) a required lib for celix_utils and therefore celix_framework, but this will save some implementation effort. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1932686204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1933414707","html_url":"https://github.com/apache/celix/pull/726#issuecomment-1933414707","issue_url":"https://api.github.com/repos/apache/celix/issues/726","id":1933414707,"node_id":"IC_kwDOAVuczs5zPZEz","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-08T06:02:48Z","updated_at":"2024-02-08T06:07:15Z","author_association":"CONTRIBUTOR","body":"> tnetstring could be a nice fitting solution, but maybe we should also reconsider using JSON are serialization format? Downside is that we then make a JSON lib (i.e. jansson) a required lib for celix_utils and therefore celix_framework, but this will save some implementation effort.\r\n\r\nI agree with the above assessment: \r\n\r\n- JSON provides a well-defined and well-known serialization format. \r\n- Using a high quality JSON implementation like jansson will save lots of implementation efforts.\r\n\r\nAs we already observed in #674, with typing support `celix_properties` will become more like JSON:\r\n\r\n> It will be nice to have array support.\r\nIf we went one step further to support embedding properties, celix properties will become json.\r\n\r\nHow about we focusing on typing support of `celix_properties` first? That is, getting #721 and #727 merged.\r\n@xuzhenbao @pnoltes ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1933414707/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1936977149","html_url":"https://github.com/apache/celix/pull/726#issuecomment-1936977149","issue_url":"https://api.github.com/repos/apache/celix/issues/726","id":1936977149,"node_id":"IC_kwDOAVuczs5zc-z9","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-10T11:16:08Z","updated_at":"2024-02-10T11:16:08Z","author_association":"CONTRIBUTOR","body":"> \r\n> How about we focusing on typing support of `celix_properties` first? That is, getting #721 and #727 merged. @xuzhenbao @pnoltes\r\n\r\n+1, After PR #721 is merged I like to pick up the properties serialization and I see if the properties store/load can be done using JSON. This breaks backwards compatibility, but that is no issue because we are working on a new major Apache Celix version. \r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1936977149/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1936981058","html_url":"https://github.com/apache/celix/pull/728#issuecomment-1936981058","issue_url":"https://api.github.com/repos/apache/celix/issues/728","id":1936981058,"node_id":"IC_kwDOAVuczs5zc_xC","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-10T11:34:20Z","updated_at":"2024-02-11T14:54:59Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/728?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: `1 lines` in your changes are missing coverage. Please review.\n> Comparison is base [(`70548d6`)](https://app.codecov.io/gh/apache/celix/commit/70548d615abb282b2b2cd9e5a67c29dc34c99b33?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) 88.85% compared to head [(`cc69c9f`)](https://app.codecov.io/gh/apache/celix/pull/728?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) 88.94%.\n\n| [Files](https://app.codecov.io/gh/apache/celix/pull/728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [libs/framework/src/manifest\\_parser.c](https://app.codecov.io/gh/apache/celix/pull/728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL21hbmlmZXN0X3BhcnNlci5j) | 83.33% | [1 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #728      +/-   ##\n==========================================\n+ Coverage   88.85%   88.94%   +0.08%     \n==========================================\n  Files         216      216              \n  Lines       24293    24200      -93     \n==========================================\n- Hits        21585    21524      -61     \n+ Misses       2708     2676      -32     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/728?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1936981058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1937012505","html_url":"https://github.com/apache/celix/issues/87#issuecomment-1937012505","issue_url":"https://api.github.com/repos/apache/celix/issues/87","id":1937012505,"node_id":"IC_kwDOAVuczs5zdHcZ","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-10T13:52:35Z","updated_at":"2024-02-10T13:52:35Z","author_association":"CONTRIBUTOR","body":"As discussed in https://lists.apache.org/thread/6gp5crw1pp408jw2fbwlg149n5rm36pv before the service tracker headers can be removed from the public API some additional tracker API in the bundle context is needed.\r\n\r\nMainly to be able to use tracked services out side of the celix event thread.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1937012505/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1937025926","html_url":"https://github.com/apache/celix/pull/727#issuecomment-1937025926","issue_url":"https://api.github.com/repos/apache/celix/issues/727","id":1937025926,"node_id":"IC_kwDOAVuczs5zdKuG","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-10T14:57:54Z","updated_at":"2024-02-10T14:57:54Z","author_association":"CONTRIBUTOR","body":"This PR touches several interesting design topics that I want to learn more about.\r\nI'm currently reviewing it, which may take a couple of days.\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1937025926/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1937828586","html_url":"https://github.com/apache/celix/pull/729#issuecomment-1937828586","issue_url":"https://api.github.com/repos/apache/celix/issues/729","id":1937828586,"node_id":"IC_kwDOAVuczs5zgOrq","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-11T18:17:26Z","updated_at":"2024-02-27T05:03:27Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: Patch coverage is `88.98072%` with `40 lines` in your changes are missing coverage. Please review.\n> Project coverage is 89.65%. Comparing base [(`423abb8`)](https://app.codecov.io/gh/apache/celix/commit/423abb8a6853ec239c4c944f194a337013c508ce?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`8ca876d`)](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n> Report is 13 commits behind head on master.\n\n| [Files](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [libs/framework/src/service\\_tracker.c](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL3NlcnZpY2VfdHJhY2tlci5j) | 78.94% | [24 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [libs/framework/src/bundle\\_context.c](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL2J1bmRsZV9jb250ZXh0LmM=) | 92.63% | [14 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [libs/framework/include/celix/Trackers.h](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvaW5jbHVkZS9jZWxpeC9UcmFja2Vycy5o) | 96.77% | [1 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [libs/framework/src/bundle.c](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL2J1bmRsZS5j) | 92.85% | [1 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #729      +/-   ##\n==========================================\n+ Coverage   89.32%   89.65%   +0.32%     \n==========================================\n  Files         216      216              \n  Lines       25153    25652     +499     \n==========================================\n+ Hits        22468    22998     +530     \n+ Misses       2685     2654      -31     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/729?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1937828586/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1937829380","html_url":"https://github.com/apache/celix/pull/727#issuecomment-1937829380","issue_url":"https://api.github.com/repos/apache/celix/issues/727","id":1937829380,"node_id":"IC_kwDOAVuczs5zgO4E","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-11T18:20:24Z","updated_at":"2024-02-11T18:20:24Z","author_association":"CONTRIBUTOR","body":"> Concerning the asserts, my preference is to remove them in the `celix_arrayList_get*` functions, but keep them in the `celix_arrayList_add*` functions. I prefer not use the `CELIX_ILLEGAL_ARGUMENT` return value, because we are then adding the need for runtime error checks on software errors. IMO Ideally the only error return for celix array list functions is ENOMEM.\r\n\r\nAnother option could be to keep the \"undefined element type\" array list as-is and introduce specific element typed array lists, e.g.: `celix_long_array_list_t`, `celix_string_array_list_t`, etc. The current array list implementation can be reused (with the element type enum private). This would ensure strong typing and prevent wrong usage of array lists. \r\n\r\nNote a simple typedef (e.g. `typedef struct celix_array_list celix_long_array_list_t;`) is not enough and something extra needs to be added to ensure that typed array list are not interchangeable. \r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1937829380/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1938702197","html_url":"https://github.com/apache/celix/pull/727#issuecomment-1938702197","issue_url":"https://api.github.com/repos/apache/celix/issues/727","id":1938702197,"node_id":"IC_kwDOAVuczs5zjj91","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-12T13:41:24Z","updated_at":"2024-02-12T13:48:03Z","author_association":"CONTRIBUTOR","body":"> Note a simple typedef (e.g. typedef struct celix_array_list celix_long_array_list_t;) is not enough and something extra needs to be added to ensure that typed array list are not interchangeable.\r\n\r\nThis PR is indeed tricky, which involves ownership management and generic container design.\r\nThough I'm currently on Chinese New Year's vocation, i.e. busy visiting my relatives following the tradition, I will manage to find time.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1938702197/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1939233131","html_url":"https://github.com/apache/celix/pull/727#issuecomment-1939233131","issue_url":"https://api.github.com/repos/apache/celix/issues/727","id":1939233131,"node_id":"IC_kwDOAVuczs5zlllr","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-12T17:48:11Z","updated_at":"2024-02-12T17:48:11Z","author_association":"CONTRIBUTOR","body":"> > Note a simple typedef (e.g. typedef struct celix_array_list celix_long_array_list_t;) is not enough and something extra needs to be added to ensure that typed array list are not interchangeable.\r\n> \r\n> This PR is indeed tricky, which involves ownership management and generic container design. Though I'm currently on Chinese New Year's vocation, i.e. busy visiting my relatives following the tradition, I will manage to find time.\r\n\r\nFor me there is no hurry, so no pressure. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1939233131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1950233280","html_url":"https://github.com/apache/celix/pull/727#issuecomment-1950233280","issue_url":"https://api.github.com/repos/apache/celix/issues/727","id":1950233280,"node_id":"IC_kwDOAVuczs50PjLA","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-17T15:14:01Z","updated_at":"2024-02-25T13:33:24Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/727?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: Patch coverage is `96.61654%` with `9 lines` in your changes are missing coverage. Please review.\n> Project coverage is 89.66%. Comparing base [(`6a550a4`)](https://app.codecov.io/gh/apache/celix/commit/6a550a448adeb205f1b0e4ccc0d96d235c5e1d6b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`9ae479e`)](https://app.codecov.io/gh/apache/celix/pull/727?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n> Report is 34 commits behind head on master.\n\n| [Files](https://app.codecov.io/gh/apache/celix/pull/727?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [libs/utils/src/array\\_list.c](https://app.codecov.io/gh/apache/celix/pull/727?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy91dGlscy9zcmMvYXJyYXlfbGlzdC5j) | 96.21% | [9 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/727?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #727      +/-   ##\n==========================================\n+ Coverage   88.93%   89.66%   +0.73%     \n==========================================\n  Files         216      217       +1     \n  Lines       24200    26131    +1931     \n==========================================\n+ Hits        21522    23431    +1909     \n- Misses       2678     2700      +22     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/727?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1950233280/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1950235016","html_url":"https://github.com/apache/celix/pull/727#issuecomment-1950235016","issue_url":"https://api.github.com/repos/apache/celix/issues/727","id":1950235016,"node_id":"IC_kwDOAVuczs50PjmI","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-17T15:21:54Z","updated_at":"2024-02-17T15:21:54Z","author_association":"CONTRIBUTOR","body":"@PengZheng : I believe a more effective solution would be to divide the array list (and potentially, in the future, the long/string hash map) into multiple unique array list types based on the element type. The current design of the array list and hash map does not support entries of different types, unlike properties. Therefore, in my opinion, it is more streamlined (albeit requiring additional implementation work) to have distinct array list types for each element type.\r\n\r\nI was considering an approach like this:\r\n\r\n```C\r\n// Headers (separate header file for each array list type)\r\ntypedef struct celix_ptr_array_list celix_ptr_array_list_t; // Allows custom types including a custom copy callback\r\ntypedef struct celix_string_array_list celix_string_array_list_t;\r\ntypedef struct celix_long_array_list celix_long_array_list_t;\r\ntypedef struct celix_double_array_list celix_double_array_list_t;\r\ntypedef struct celix_bool_array_list celix_bool_array_list_t;\r\ntypedef struct celix_version_array_list celix_version_array_list_t;\r\n\r\nvoid* celix_ptrArrayList_get(celix_ptr_array_list_t* list, int index);\r\nconst char* celix_stringArrayList_get(celix_string_array_list_t* list, int index);\r\nlong celix_longArrayList_get(celix_long_array_list_t* list, int index);\r\ndouble celix_doubleArrayList_get(celix_double_array_list_t* list, int index);\r\nbool celix_boolArrayList_get(celix_bool_array_list_t* list, int index);\r\nconst celix_version_t* celix_versionArrayList_get(celix_version_array_list_t* list, int index);\r\n\r\n// Etc. for set, size, sort...\r\n\r\n// C source\r\ntypedef struct {\r\n  ....\r\n} celix_generic_array_list_t; //<-- current array list\r\n\r\nstruct celix_ptr_array_list {\r\n    celix_generic_array_list_t* list;\r\n};\r\n\r\nstruct celix_string_array_list {\r\n    celix_generic_array_list_t* list;\r\n};\r\n\r\n// Etc.\r\n\r\n```\r\n\r\nA potential temporary solution to avoid extensive refactoring in the same pull request is to also introduce macros that leverage the C11 _Generic:\r\n\r\n```C\r\n#define celix_arrayList_get(ListT, index) _Generic((ListT), \\\r\n    celix_ptr_array_list_t*: celix_ptrArrayList_get, \\\r\n    celix_string_array_list_t*: celix_stringArrayList_get,   \\\r\n)(ListT, index)\r\n\r\n// Etc. for set, size, sort...\r\n```\r\n\r\nIf we upgrade from `-std=gnu99` to `-std=c11`, we could keep the `_Generic` approach. However, I'm uncertain if this might be too confusing for users (C has no overloading, but with `_Generic` it sort-of does).\r\n\r\nWDYT?","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1950235016/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1952060065","html_url":"https://github.com/apache/celix/pull/731#issuecomment-1952060065","issue_url":"https://api.github.com/repos/apache/celix/issues/731","id":1952060065,"node_id":"IC_kwDOAVuczs50WhKh","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-19T09:41:20Z","updated_at":"2024-02-19T09:41:20Z","author_association":"CONTRIBUTOR","body":"@rlenferink Could you have a look and see if the devcontainer setup works for you? \r\n\r\nIf you agree I would like to remove the `container` dir and gitpod badge in favor for the devcontainer setup. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1952060065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1954213705","html_url":"https://github.com/apache/celix/pull/727#issuecomment-1954213705","issue_url":"https://api.github.com/repos/apache/celix/issues/727","id":1954213705,"node_id":"IC_kwDOAVuczs50eu9J","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-20T13:25:13Z","updated_at":"2024-02-21T02:08:10Z","author_association":"CONTRIBUTOR","body":"> @PengZheng : I believe a more effective solution would be to divide the array list (and potentially, in the future, the long/string hash map) into multiple unique array list types based on the element type. The current design of the array list and hash map does not support entries of different types, unlike properties. Therefore, in my opinion, it is more streamlined (albeit requiring additional implementation work) to have distinct array list types for each element type.\r\n> \r\n> I was considering an approach like this:\r\n> \r\n> ```c\r\n> // Headers (separate header file for each array list type)\r\n> typedef struct celix_ptr_array_list celix_ptr_array_list_t; // Allows custom types including a custom copy callback\r\n> typedef struct celix_string_array_list celix_string_array_list_t;\r\n> typedef struct celix_long_array_list celix_long_array_list_t;\r\n> typedef struct celix_double_array_list celix_double_array_list_t;\r\n> typedef struct celix_bool_array_list celix_bool_array_list_t;\r\n> typedef struct celix_version_array_list celix_version_array_list_t;\r\n> \r\n> void* celix_ptrArrayList_get(celix_ptr_array_list_t* list, int index);\r\n> const char* celix_stringArrayList_get(celix_string_array_list_t* list, int index);\r\n> long celix_longArrayList_get(celix_long_array_list_t* list, int index);\r\n> double celix_doubleArrayList_get(celix_double_array_list_t* list, int index);\r\n> bool celix_boolArrayList_get(celix_bool_array_list_t* list, int index);\r\n> const celix_version_t* celix_versionArrayList_get(celix_version_array_list_t* list, int index);\r\n> \r\n> // Etc. for set, size, sort...\r\n> \r\n> // C source\r\n> typedef struct {\r\n>   ....\r\n> } celix_generic_array_list_t; //<-- current array list\r\n> \r\n> struct celix_ptr_array_list {\r\n>     celix_generic_array_list_t* list;\r\n> };\r\n> \r\n> struct celix_string_array_list {\r\n>     celix_generic_array_list_t* list;\r\n> };\r\n> \r\n> // Etc.\r\n> ```\r\n> \r\n> A potential temporary solution to avoid extensive refactoring in the same pull request is to also introduce macros that leverage the C11 _Generic:\r\n> \r\n> ```c\r\n> #define celix_arrayList_get(ListT, index) _Generic((ListT), \\\r\n>     celix_ptr_array_list_t*: celix_ptrArrayList_get, \\\r\n>     celix_string_array_list_t*: celix_stringArrayList_get,   \\\r\n> )(ListT, index)\r\n> \r\n> // Etc. for set, size, sort...\r\n> ```\r\n> \r\n> If we upgrade from `-std=gnu99` to `-std=c11`, we could keep the `_Generic` approach. However, I'm uncertain if this might be too confusing for users (C has no overloading, but with `_Generic` it sort-of does).\r\n> \r\n> WDYT?\r\n\r\nThe original intention of introducing element type is to hide them from `celix_properties` so that:\r\n\r\n* Add only one type to celix_properties, i.e. ArrayList\r\n* Add only four (or more?) methods setArrayList/assignArrayList/getArrayList/getAsArrayList\r\n* Move element type information into celix_array_list, so that we can have the right copy operation for them.\r\n\r\nTherefore, run-time polymorphism rather than compile-time polymorphism is needed, right?\r\nWhat will `celix_properties` look like with proposed design?","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1954213705/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1958769418","html_url":"https://github.com/apache/celix/pull/690#issuecomment-1958769418","issue_url":"https://api.github.com/repos/apache/celix/issues/690","id":1958769418,"node_id":"IC_kwDOAVuczs50wHMK","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-22T06:09:18Z","updated_at":"2024-02-22T06:11:22Z","author_association":"CONTRIBUTOR","body":"Given that #710 has been merged, is this PR ready now? @xuzhenbao @pnoltes \r\nNote that parts of #699 may need to be updated into this.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1958769418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1958861737","html_url":"https://github.com/apache/celix/pull/690#issuecomment-1958861737","issue_url":"https://api.github.com/repos/apache/celix/issues/690","id":1958861737,"node_id":"IC_kwDOAVuczs50wdup","user":{"login":"xuzhenbao","id":43104033,"node_id":"MDQ6VXNlcjQzMTA0MDMz","avatar_url":"https://avatars.githubusercontent.com/u/43104033?v=4","gravatar_id":"","url":"https://api.github.com/users/xuzhenbao","html_url":"https://github.com/xuzhenbao","followers_url":"https://api.github.com/users/xuzhenbao/followers","following_url":"https://api.github.com/users/xuzhenbao/following{/other_user}","gists_url":"https://api.github.com/users/xuzhenbao/gists{/gist_id}","starred_url":"https://api.github.com/users/xuzhenbao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xuzhenbao/subscriptions","organizations_url":"https://api.github.com/users/xuzhenbao/orgs","repos_url":"https://api.github.com/users/xuzhenbao/repos","events_url":"https://api.github.com/users/xuzhenbao/events{/privacy}","received_events_url":"https://api.github.com/users/xuzhenbao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-22T07:34:44Z","updated_at":"2024-02-22T07:34:44Z","author_association":"CONTRIBUTOR","body":"> Given that #710 has been merged, is this PR ready now? @xuzhenbao @pnoltes Note that parts of #699 may need to be updated into this.\r\n\r\nI will update this PR, please wait a few day.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1958861737/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1962937220","html_url":"https://github.com/apache/celix/issues/674#issuecomment-1962937220","issue_url":"https://api.github.com/repos/apache/celix/issues/674","id":1962937220,"node_id":"IC_kwDOAVuczs51AAuE","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-25T13:14:43Z","updated_at":"2024-02-25T13:14:43Z","author_association":"CONTRIBUTOR","body":"In PR #727, element types for the array list were introduced. \r\n\r\nTo ensure the introduction of array list element types is backwards compatible, a potential element type value of `CELIX_ARRAY_LIST_ELEMENT_TYPE_UNDEFINED` was added. The support for the `CELIX_ARRAY_LIST_ELEMENT_TYPE_UNDEFINED` element type is intended to be temporary. This addition allows for a separate PR that focuses solely on refactoring Celix array list usage. \r\n\r\n- [ ] Create a pull request to remove the `CELIX_ARRAY_LIST_ELEMENT_TYPE_UNDEFINED` array list element type and the `celix_arrayList_create` function. Additionally, refactor all instances where the undefined array list usage occurs.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1962937220/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1962940385","html_url":"https://github.com/apache/celix/pull/727#issuecomment-1962940385","issue_url":"https://api.github.com/repos/apache/celix/issues/727","id":1962940385,"node_id":"IC_kwDOAVuczs51ABfh","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-25T13:25:43Z","updated_at":"2024-02-25T13:25:43Z","author_association":"CONTRIBUTOR","body":"> Therefore, run-time polymorphism rather than compile-time polymorphism is needed, right? What will `celix_properties` look like with proposed design?\r\n\r\nYes, you are correct. I am struggling a bit with how to (runtime) handling wrong type usage, but indeed creating different array list types for every element type will only make the type aware properties refactoring more complex. \r\n\r\nSo I agree to keep the current approach and maybe revisit a bit later. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1962940385/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1962992068","html_url":"https://github.com/apache/celix/issues/87#issuecomment-1962992068","issue_url":"https://api.github.com/repos/apache/celix/issues/87","id":1962992068,"node_id":"IC_kwDOAVuczs51AOHE","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-25T16:30:29Z","updated_at":"2024-03-24T18:30:33Z","author_association":"CONTRIBUTOR","body":"With the addition of `celix_bundleContext_useTrackedService*` functions, the functions `celix_bundleContext_useService*`  and methods `celix::BundleContext::useService*` are functional superfluous and less ideal to use (more prone to deadlocks). \r\n\r\n - [x] Remove the  the functions `celix_bundleContext_useService*`  and methods `celix::BundleContext::useService*`  to decrease the code size and improve the maintainability. Also introduce some testing methods to replace the useService with wait timeout usecase for testing. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1962992068/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1965923910","html_url":"https://github.com/apache/celix/pull/690#issuecomment-1965923910","issue_url":"https://api.github.com/repos/apache/celix/issues/690","id":1965923910,"node_id":"IC_kwDOAVuczs51LZ5G","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-27T07:16:28Z","updated_at":"2024-02-27T07:16:28Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/690?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 89.45%. Comparing base [(`423abb8`)](https://app.codecov.io/gh/apache/celix/commit/423abb8a6853ec239c4c944f194a337013c508ce?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`7b3ea01`)](https://app.codecov.io/gh/apache/celix/pull/690?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n> Report is 13 commits behind head on master.\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #690      +/-   ##\n==========================================\n+ Coverage   89.32%   89.45%   +0.13%     \n==========================================\n  Files         216      216              \n  Lines       25153    25294     +141     \n==========================================\n+ Hits        22468    22627     +159     \n+ Misses       2685     2667      -18     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/690?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1965923910/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1966022878","html_url":"https://github.com/apache/celix/pull/690#issuecomment-1966022878","issue_url":"https://api.github.com/repos/apache/celix/issues/690","id":1966022878,"node_id":"IC_kwDOAVuczs51LyDe","user":{"login":"xuzhenbao","id":43104033,"node_id":"MDQ6VXNlcjQzMTA0MDMz","avatar_url":"https://avatars.githubusercontent.com/u/43104033?v=4","gravatar_id":"","url":"https://api.github.com/users/xuzhenbao","html_url":"https://github.com/xuzhenbao","followers_url":"https://api.github.com/users/xuzhenbao/followers","following_url":"https://api.github.com/users/xuzhenbao/following{/other_user}","gists_url":"https://api.github.com/users/xuzhenbao/gists{/gist_id}","starred_url":"https://api.github.com/users/xuzhenbao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xuzhenbao/subscriptions","organizations_url":"https://api.github.com/users/xuzhenbao/orgs","repos_url":"https://api.github.com/users/xuzhenbao/repos","events_url":"https://api.github.com/users/xuzhenbao/events{/privacy}","received_events_url":"https://api.github.com/users/xuzhenbao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-27T08:27:59Z","updated_at":"2024-02-27T08:27:59Z","author_association":"CONTRIBUTOR","body":"Hi @pnoltes \r\nI have update this PR, it includes the following changes:\r\n1. Add document for dynamic IP mechanism.\r\n2. Add document for PR #699 in libdfi README.md","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1966022878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1966404599","html_url":"https://github.com/apache/celix/issues/590#issuecomment-1966404599","issue_url":"https://api.github.com/repos/apache/celix/issues/590","id":1966404599,"node_id":"IC_kwDOAVuczs51NPP3","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-27T12:07:42Z","updated_at":"2024-02-27T12:14:57Z","author_association":"CONTRIBUTOR","body":"The aim of descriptor generation for remote services is to make service header file the single source of truth.\r\nTo this end, we need to be able to annotate service function argument (`am=pre`/`am=out`).\r\n\r\nI tried the following prototype and believe it could work:\r\n\r\n```C\r\n//calculator_service.h\r\n#ifndef CALCULATOR_SERVICE_H_\r\n#define CALCULATOR_SERVICE_H_\r\n\r\n#define CALCULATOR_SERVICE              \"org.apache.celix.calc.api.Calculator\"\r\n#define CALCULATOR_SERVICE_VERSION      \"1.3.0\"\r\n#define CALCULATOR_CONFIGURATION_TYPE   \"org.amdatu.remote.admin.http, celix.remote.admin.shm\"\r\n\r\n/*\r\n * The calculator service definition corresponds to the following Java interface:\r\n *\r\n * interface Calculator {\r\n *      double add(double a, double b);\r\n *      double sub(double a, double b);\r\n *      double sqrt(double a);\r\n * }\r\n */\r\ntypedef struct [[clang::annotate(\"celix::services\", CALCULATOR_SERVICE, CALCULATOR_SERVICE_VERSION)]] calculator_service {\r\n    void *handle;\r\n    int (*add)(void *handle, double a, double b, double *[[clang::annotate_type(\"celix::pre\")]] result);\r\n    int (*sub)(void *handle, double a, double b, double *[[clang::annotate_type(\"celix::pre\")]] result);\r\n    int (*sqrt)(void *handle, double a, double * [[clang::annotate_type(\"celix::pre\")]] result);\r\n} calculator_service_t;\r\n#endif /* CALCULATOR_SERVICE_H_ */\r\n```\r\n\r\n```C\r\n// calculator_service.c\r\n#include \"calculator_service.h\"\r\n```\r\n\r\nNote that `calculator_service.c` is only used for descriptor generation and thus is deliberately left empty.\r\n\r\n```bash\r\n$ clang-15 -Xclang -ast-dump -fsyntax-only -std=c2x calculator_service.c\r\nTranslationUnitDecl 0x559464320ec8 <<invalid sloc>> <invalid sloc>\r\n|-TypedefDecl 0x5594643216f0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'\r\n| `-BuiltinType 0x559464321490 '__int128'\r\n|-TypedefDecl 0x559464321760 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'\r\n| `-BuiltinType 0x5594643214b0 'unsigned __int128'\r\n|-TypedefDecl 0x559464321a68 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'\r\n| `-RecordType 0x559464321840 'struct __NSConstantString_tag'\r\n|   `-Record 0x5594643217b8 '__NSConstantString_tag'\r\n|-TypedefDecl 0x559464321b00 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'\r\n| `-PointerType 0x559464321ac0 'char *'\r\n|   `-BuiltinType 0x559464320f70 'char'\r\n|-TypedefDecl 0x559464321df8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag[1]'\r\n| `-ConstantArrayType 0x559464321da0 'struct __va_list_tag[1]' 1\r\n|   `-RecordType 0x559464321be0 'struct __va_list_tag'\r\n|     `-Record 0x559464321b58 '__va_list_tag'\r\n|-RecordDecl 0x55946437c3a8 <./calculator_service.h:36:9, line:41:1> line:36:103 struct calculator_service definition\r\n| |-AnnotateAttr 0x55946437c450 <col:18, col:99> \"celix::services\"\r\n| | |-ConstantExpr 0x55946437c500 <line:23:41> 'char (*)[37]'\r\n| | | |-value: LValue <todo>\r\n| | | `-ImplicitCastExpr 0x55946437c4e8 <col:41> 'char (*)[37]' <ArrayToPointerDecay>\r\n| | |   `-StringLiteral 0x55946437c308 <col:41> 'char[37]' lvalue \"org.apache.celix.calc.api.Calculator\"\r\n| | `-ConstantExpr 0x55946437c5a0 <line:24:41> 'char (*)[6]'\r\n| |   |-value: LValue <todo>\r\n| |   `-ImplicitCastExpr 0x55946437c588 <col:41> 'char (*)[6]' <ArrayToPointerDecay>\r\n| |     `-StringLiteral 0x55946437c388 <col:41> 'char[6]' lvalue \"1.3.0\"\r\n| |-FieldDecl 0x55946437c648 <line:37:5, col:11> col:11 handle 'void *'\r\n| |-FieldDecl 0x55946437cb50 <line:38:5, col:103> col:11 add 'int (*)(void *, double, double, double * [[clang::annotate_type(...)]])'\r\n| |-FieldDecl 0x55946437ce90 <line:39:5, col:103> col:11 sub 'int (*)(void *, double, double, double * [[clang::annotate_type(...)]])'\r\n| `-FieldDecl 0x55946437d258 <line:40:5, col:95> col:11 sqrt 'int (*)(void *, double, double * [[clang::annotate_type(...)]])'\r\n`-TypedefDecl 0x559464383368 <line:36:1, line:41:3> col:3 calculator_service_t 'struct calculator_service':'struct calculator_service'\r\n  `-ElaboratedType 0x559464383310 'struct calculator_service' sugar\r\n    `-RecordType 0x55946437c430 'struct calculator_service'\r\n      `-Record 0x55946437c3a8 'calculator_service'\r\n\r\n```\r\n\r\n`[[clang::annotate(\"celix::services\")]]` serves two purposes:\r\n1. Help the generator locate the root AST we are interested.\r\n2. Pass service name and version to descriptor generator. \r\n\r\nWe need `clang::annotate_type` to support per-argument annotation, which is not possible using `clang::annotate`.\r\n\r\n`clang::annotate_type` is a relatively new attribute supported by clang, which is ignored by older version of clang (like clang-14).\r\nTo use it, we need either `-std=c++11` or `-std=c2x`. Here, I prefer to treat the service header as a C header rather than C++.\r\n\r\nAnother downside of using `clang::annotate_type` is that it is not exposed by libclang, we need libTooling to finish our job.\r\nRather than `pip install libclang` and let CMake call a python script, we need to:\r\n\r\n1. Develop the generator in C++ based on libTooling.\r\n2. Build the generator first before using it to generate descriptors.\r\n3. Support cross compilation. In conan's terminology, the generator should be built in build context rather than host context.\r\n\r\nI'm still in prototyping phase. All comments are welcome. @pnoltes @xuzhenbao ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1966404599/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1967644099","html_url":"https://github.com/apache/celix/pull/729#issuecomment-1967644099","issue_url":"https://api.github.com/repos/apache/celix/issues/729","id":1967644099,"node_id":"IC_kwDOAVuczs51R93D","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-27T21:36:27Z","updated_at":"2024-02-27T21:36:27Z","author_association":"CONTRIBUTOR","body":"Currently it is not possible to call `celix_bundleContext_trackServices*` functions with a \"use tracker service\" callback (because a write lock is needed while holding a read lock). \r\nI think this can be enabled using a atomic use count, but I will do that in a separate PR. \r\n\r\nFor now I will merge this PR. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1967644099/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1967655862","html_url":"https://github.com/apache/celix/pull/690#issuecomment-1967655862","issue_url":"https://api.github.com/repos/apache/celix/issues/690","id":1967655862,"node_id":"IC_kwDOAVuczs51SAu2","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-02-27T21:41:45Z","updated_at":"2024-02-27T21:41:45Z","author_association":"CONTRIBUTOR","body":"> Hi @pnoltes I have update this PR, it includes the following changes:\r\n> \r\n>     1. Add document for dynamic IP mechanism.\r\n> \r\n>     2. Add document for PR [Feature/dfi cleanup #699](https://github.com/apache/celix/pull/699) in libdfi README.md\r\n\r\nThanks, LGTM. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1967655862/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1975253780","html_url":"https://github.com/apache/celix/pull/734#issuecomment-1975253780","issue_url":"https://api.github.com/repos/apache/celix/issues/734","id":1975253780,"node_id":"IC_kwDOAVuczs51u_sU","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-03T18:29:21Z","updated_at":"2024-03-04T04:48:14Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/734?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: Patch coverage is `87.50000%` with `5 lines` in your changes are missing coverage. Please review.\n> Project coverage is 89.58%. Comparing base [(`6c2b839`)](https://app.codecov.io/gh/apache/celix/commit/6c2b8395b0debdbdb08e34227f85582425368a8f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`3c3227a`)](https://app.codecov.io/gh/apache/celix/pull/734?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n> Report is 10 commits behind head on master.\n\n| [Files](https://app.codecov.io/gh/apache/celix/pull/734?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [libs/framework/src/bundle\\_context.c](https://app.codecov.io/gh/apache/celix/pull/734?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL2J1bmRsZV9jb250ZXh0LmM=) | 87.50% | [5 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/734?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #734      +/-   ##\n==========================================\n+ Coverage   89.57%   89.58%   +0.01%     \n==========================================\n  Files         216      216              \n  Lines       25395    25413      +18     \n==========================================\n+ Hits        22747    22766      +19     \n+ Misses       2648     2647       -1     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/734?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1975253780/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1975793940","html_url":"https://github.com/apache/celix/pull/542#issuecomment-1975793940","issue_url":"https://api.github.com/repos/apache/celix/issues/542","id":1975793940,"node_id":"IC_kwDOAVuczs51xDkU","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-04T06:03:11Z","updated_at":"2024-03-04T06:03:11Z","author_association":"CONTRIBUTOR","body":"Given that pubsub has already been removed, it this PR already done? @xuzhenbao ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1975793940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1976508814","html_url":"https://github.com/apache/celix/pull/542#issuecomment-1976508814","issue_url":"https://api.github.com/repos/apache/celix/issues/542","id":1976508814,"node_id":"IC_kwDOAVuczs51zyGO","user":{"login":"xuzhenbao","id":43104033,"node_id":"MDQ6VXNlcjQzMTA0MDMz","avatar_url":"https://avatars.githubusercontent.com/u/43104033?v=4","gravatar_id":"","url":"https://api.github.com/users/xuzhenbao","html_url":"https://github.com/xuzhenbao","followers_url":"https://api.github.com/users/xuzhenbao/followers","following_url":"https://api.github.com/users/xuzhenbao/following{/other_user}","gists_url":"https://api.github.com/users/xuzhenbao/gists{/gist_id}","starred_url":"https://api.github.com/users/xuzhenbao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xuzhenbao/subscriptions","organizations_url":"https://api.github.com/users/xuzhenbao/orgs","repos_url":"https://api.github.com/users/xuzhenbao/repos","events_url":"https://api.github.com/users/xuzhenbao/events{/privacy}","received_events_url":"https://api.github.com/users/xuzhenbao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-04T12:47:27Z","updated_at":"2024-03-04T12:47:27Z","author_association":"CONTRIBUTOR","body":"> Given that pubsub has already been removed, it this PR already done? @xuzhenbao\r\n\r\nThanks for the reminder. Maybe I need to plan a time to update this PR.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1976508814/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1981060024","html_url":"https://github.com/apache/celix/pull/735#issuecomment-1981060024","issue_url":"https://api.github.com/repos/apache/celix/issues/735","id":1981060024,"node_id":"IC_kwDOAVuczs52FJO4","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-06T14:59:39Z","updated_at":"2024-03-06T14:59:39Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/735?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 89.63%. Comparing base [(`0601f95`)](https://app.codecov.io/gh/apache/celix/commit/0601f9574dfb02bb2259202b0b18df870c20dcf8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`acabf59`)](https://app.codecov.io/gh/apache/celix/pull/735?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #735      +/-   ##\n==========================================\n+ Coverage   89.58%   89.63%   +0.05%     \n==========================================\n  Files         216      216              \n  Lines       25413    25413              \n==========================================\n+ Hits        22765    22779      +14     \n+ Misses       2648     2634      -14     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/735?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1981060024/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1988668070","html_url":"https://github.com/apache/celix/pull/738#issuecomment-1988668070","issue_url":"https://api.github.com/repos/apache/celix/issues/738","id":1988668070,"node_id":"IC_kwDOAVuczs52iKqm","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-11T15:08:48Z","updated_at":"2024-03-22T07:22:21Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/738?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: Patch coverage is `98.96907%` with `7 lines` in your changes are missing coverage. Please review.\n> Project coverage is 89.88%. Comparing base [(`d46d983`)](https://app.codecov.io/gh/apache/celix/commit/d46d98383fb60b498415bfa5c0edc5c4f8e17bad?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`1f1ba1f`)](https://app.codecov.io/gh/apache/celix/pull/738?dropdown=coverage&src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n\n| [Files](https://app.codecov.io/gh/apache/celix/pull/738?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [.../event\\_admin/event\\_admin/src/celix\\_event\\_adapter.c](https://app.codecov.io/gh/apache/celix/pull/738?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-YnVuZGxlcy9ldmVudF9hZG1pbi9ldmVudF9hZG1pbi9zcmMvY2VsaXhfZXZlbnRfYWRhcHRlci5j) | 97.56% | [4 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/738?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [...es/event\\_admin/event\\_admin/src/celix\\_event\\_admin.c](https://app.codecov.io/gh/apache/celix/pull/738?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-YnVuZGxlcy9ldmVudF9hZG1pbi9ldmVudF9hZG1pbi9zcmMvY2VsaXhfZXZlbnRfYWRtaW4uYw==) | 99.26% | [3 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/738?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #738      +/-   ##\n==========================================\n+ Coverage   89.58%   89.88%   +0.30%     \n==========================================\n  Files         216      222       +6     \n  Lines       25413    26092     +679     \n==========================================\n+ Hits        22765    23454     +689     \n+ Misses       2648     2638      -10     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/738?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1988668070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1995352717","html_url":"https://github.com/apache/celix/pull/738#issuecomment-1995352717","issue_url":"https://api.github.com/repos/apache/celix/issues/738","id":1995352717,"node_id":"IC_kwDOAVuczs527qqN","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-13T18:45:04Z","updated_at":"2024-03-13T18:45:04Z","author_association":"CONTRIBUTOR","body":"Very nice addition for Apache Celix :). I had a short look into the event_admin_api and this looks good; Clean api and well documented. I will try to find some time this week and next week to more thoroughly review this.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1995352717/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/1997133845","html_url":"https://github.com/apache/celix/issues/739#issuecomment-1997133845","issue_url":"https://api.github.com/repos/apache/celix/issues/739","id":1997133845,"node_id":"IC_kwDOAVuczs53CdgV","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-14T10:35:07Z","updated_at":"2024-03-14T10:35:07Z","author_association":"CONTRIBUTOR","body":"The unlimited spin is introduced by this commit: https://sourceware.org/git/?p=glibc.git;a=commit;h=cc25c8b4c1196a8c29e9a45b1e096b99a87b7f8c\r\n\r\nThe current glibc rwlock is completely unusable together with real time priority tasks, though it is OK to use with `SCHED_OTHER`.\r\nConsidering the current design is super complex, I don't expect a upstream fix will be available in a year or two.\r\nThe workaround in my day job is to revert it to Ulrich Drepper's original design and implementation.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/1997133845/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2008626293","html_url":"https://github.com/apache/celix/issues/515#issuecomment-2008626293","issue_url":"https://api.github.com/repos/apache/celix/issues/515","id":2008626293,"node_id":"IC_kwDOAVuczs53uTR1","user":{"login":"xuzhenbao","id":43104033,"node_id":"MDQ6VXNlcjQzMTA0MDMz","avatar_url":"https://avatars.githubusercontent.com/u/43104033?v=4","gravatar_id":"","url":"https://api.github.com/users/xuzhenbao","html_url":"https://github.com/xuzhenbao","followers_url":"https://api.github.com/users/xuzhenbao/followers","following_url":"https://api.github.com/users/xuzhenbao/following{/other_user}","gists_url":"https://api.github.com/users/xuzhenbao/gists{/gist_id}","starred_url":"https://api.github.com/users/xuzhenbao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xuzhenbao/subscriptions","organizations_url":"https://api.github.com/users/xuzhenbao/orgs","repos_url":"https://api.github.com/users/xuzhenbao/repos","events_url":"https://api.github.com/users/xuzhenbao/events{/privacy}","received_events_url":"https://api.github.com/users/xuzhenbao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-20T03:58:07Z","updated_at":"2024-03-20T03:58:07Z","author_association":"CONTRIBUTOR","body":"To remote event admin, I have the following ideas. First of all, the remote distribution provider should be pluggable, and its interface definition is as follows:\r\n~~~\r\n    typedef struct celix_event_remote_provider_service {\r\n        void *handle;\r\n        //It is used to distribute the asynchronous event\r\n        celix_status_t (*postEvent)(const char *topic, const celix_properties_t *properties);\r\n        //It is used to distribute the synchronous event\r\n        celix_status_t (*sendEvent)(const char *topic, const celix_properties_t *properties);\r\n    }celix_event_remote_provider_service_t;\r\n~~~\r\nThe service includes properties: `celix.event.subscriber.endpoint.framework.uuids, service.ranking`, and event admin selects the best `celix_event_remote_provider_service_t` service to distribute events to remote based on these properties.\r\nThe selection strategy is as follows:\r\n  - If `celix.event.subscriber.endpoint.framework.uuids` are the same, then select the one with the highest `service.ranking`.\r\n  - If `celix.event.subscriber.endpoint.framework.uuids` and `service.ranking` are the same, then select the one that was registered first (its `service.id` is smallest).\r\n  - If the set of celix.event.subscriber.endpoint.framework.uuids is a containment relationship, then select the container.\r\n  - If the set of celix.event.subscriber.endpoint.framework.uuids is an intersection relationship, then the event property $celix.event.source.framework.uuid (used to identify the event source framework) and $celix.event.source.seq (used to identify the event sequence) should be set, and they are used for event deduplication.\r\n\r\nIn addition, the event properties retain the property name with the \"$\" prefix. These properties are used to represent the specific information of the remote distribution provider or control the API behavior. The properties that control the API behavior include:\r\n- `$celix.event.remote.qos`\r\n  - QOS behavior definition: consistent with MQTT. In addition, if the remote distribution provider does not support the corresponding QOS level, it can choose to degrade and record a log.\r\n  - QOS scope: Both the published event and the subscriber can set this property. If there is a conflict between the two, then the smaller value is taken.\r\n- `$celix.event.remote.expiryInterval`: event expiration time, expired events are no longer delivered to subscribers. If this value is not set, it means never expire.\r\n- `$celix.event.remote.enable`: If the event contains the property, the event will be forwarded to the remote distribution provider. If this property is not set, it means that the event is only published locally.\r\n\r\nNote: The above event properties only take effect for remote events.\r\n\r\nIn addition, I don't intend to forward framework events to remote currently, because I am not sure about the meaning of forwarding framework events to remote. If it needs to be forwarded to remote, it should add the property \"org.osgi.framework.uuid\".\r\n\r\nI plan to implement the remote distribution provider in two ways, one is based on RSA, and the other is based on MQTT. For the implementation based on MQTT, I plan to use the mosquitto library to implement it.\r\n\r\n**The implementation based on RSA**\r\n\r\nFor the implementation based on RSA, it will add the remote interface `celix_event_handler_remote_listener_service_t` and `celix_event_remote_subscriber_service_t`. `celix_event_handler_remote_listener_service_t` is used to listen to remote subscription information, and `celix_event_remote_subscriber_service_t` is used to forward event to remote subscribers. For example, suppose there are two processes A and B in the system, process B needs to subscribe to event E1, and event E1 is published by process A, then process A needs to provide `c` service, and process B needs to provide `celix_event_remote_subscriber_service_t` service. Process B forwards its subscription information to A by calling the `celix_event_handler_remote_listener_service_t` service of process A, and process A forwards E1 to process B by calling the `celix_event_remote_subscriber_service_t` service of process B. Both `celix_event_handler_remote_listener_service_t` and `celix_event_remote_subscriber_service_t` are called remotely.\r\n\r\n **Note**:I don't consider attaching the subscription information of process B to the `celix_event_remote_subscriber_service_t` service properties, because if this is done, when updating the subscription information, process B needs to re-register the `celix_event_remote_subscriber_service_t` service, during this period, process B may lose some events published by process A. Therefore, process B forwards its subscription information to A through the `celix_event_handler_remote_listener_service_t` of process A.\r\n\r\nThe definition of `celix_event_handler_remote_listener_service_t` and `celix_event_remote_subscriber_service_t` is as follows:\r\n\r\n~~~\r\ntypedef struct celix_event_handler_remote_listener_service {\r\n    void *handle;\r\n    celix_status_t (*handlerAdded)(void* handle, const char* handlerFwUUID, long handlerSvcId, const char* topics, const char* filter, int qos);\r\n    celix_status_t (*handlerRemoved)(void* handle, const char* handlerFwUUID, long handlerSvcId, const char* topics, const char* filter);\r\n}celix_event_handler_remote_listener_service_t;\r\n\r\ntypedef struct celix_event_remote_subscriber_service {\r\n    void* handle;\r\n    celix_status_t (*receiveEventAsync)(void* handle, const char* topic, const celix_properties_t* properties);\r\n    celix_status_t (*receiveEventSync)(void* handle, const char* topic, const celix_properties_t* properties);\r\n}celix_event_remote_subscriber_service_t;\r\n~~~\r\n\r\nThe component relationship diagram is as follows:\r\n\r\n![image](https://github.com/apache/celix/assets/43104033/cdbd40ae-4c1c-4546-b8a3-7eaafdff55d7)\r\n\r\nSome other key points to consider in the implementation:\r\n- The `celix_properties_t` type will be added to dfi, which is used for the serialization and deserialization of event properties in remote calls.\r\n- The remote `celix_event_remote_subscriber_service_t` offline handling strategy: If the event QOS value is QOS1 or QOS2, it should be delivered  to online services, and then wait for offline services to online or events to expire or sessions to expire; QOS0 event are directly discarded.\r\n- Backpressure handling: considering that large payload event is not transmitted, we will discard the event when the cached event number reaches a certain value(QOS0 events are discarded first). In addition, the remote distribution provider will implement a circuit breaker mechanism for problematic subscribers (Events will be not delivered for a period of time).\r\n\r\n**The implementation based on MQTT**\r\n\r\nFor the implementation based on MQTT, I will add the remote interface `celix_mqtt_broker_info_service_t`, which is used to obtain the address information of the MQTT broker. The one of remote distribution provider obtains the address information of the MQTT broker by parsing the mosquitto.conf file, and then registers the remote service `celix_mqtt_broker_info_service`, other remote distribution provider obtains the address information from celix_mqtt_broker_info_service_t.\r\n\r\nThe definition of `celix_mqtt_broker_info_service` is as follows:\r\n\r\n~~~\r\n#define CELIX_MQTT_BROKER_INFO_SERVICE_NAME \"celix_mqtt_broker_info_service\"\r\n\r\n//The address of the MQTT broker\r\n#define CELIX_MQTT_BROKER_ADDRESSES \"celix.mqtt.broker.addresses\"\r\n//The port of the MQTT broker\r\n#define CELIX_MQTT_BROKER_PORT \"celix.mqtt.broker.port\"\r\n\r\ntypedef struct celix_mqtt_broker_info_service {\r\n    void *handle;\r\n}celix_mqtt_broker_info_service_t;\r\n~~~\r\n\r\nThe component relationship diagram is as follows:\r\n\r\n![image](https://github.com/apache/celix/assets/43104033/96fcca8f-c8e6-4523-8e6b-172573c6331a)\r\n\r\nSome other key points to consider in the implementation:\r\n- Each provider publishes its own subscription information through the message `celix/mqtt/subscriptions/<frameworkUUID>` to the broker, and obtains remote subscription information by subscribing to the message `celix/mqtt/subscriptions/*`. Then the provider should filter events based on the remote subscription information before publishing the event to the broker.\r\n- Network reconnection are automatically handled by the mosquitto library.\r\n- Use the request/respond mechanism of MQTT to implement synchronous semantics.\r\n- For synchronous events, consider using a circuit breaker mechanism (no longer deliver synchronous events to the corresponding framework for a period of time). For asynchronous events, network exceptions are automatically handled by the mosquitto library.\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2008626293/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2008672902","html_url":"https://github.com/apache/celix/issues/515#issuecomment-2008672902","issue_url":"https://api.github.com/repos/apache/celix/issues/515","id":2008672902,"node_id":"IC_kwDOAVuczs53ueqG","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-20T05:16:07Z","updated_at":"2024-03-20T05:18:44Z","author_association":"CONTRIBUTOR","body":"Considering the RSA approach, will event delivery be expensive? \r\nNote that we don't support async remote method call yet. \r\nExtending dfi to support `celix_properties_t` will be a very welcome addition. I guess we need #721 and a method to serialize/deserialize `celix_properties_t` into JSON, right?","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2008672902/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2008722849","html_url":"https://github.com/apache/celix/issues/515#issuecomment-2008722849","issue_url":"https://api.github.com/repos/apache/celix/issues/515","id":2008722849,"node_id":"IC_kwDOAVuczs53uq2h","user":{"login":"xuzhenbao","id":43104033,"node_id":"MDQ6VXNlcjQzMTA0MDMz","avatar_url":"https://avatars.githubusercontent.com/u/43104033?v=4","gravatar_id":"","url":"https://api.github.com/users/xuzhenbao","html_url":"https://github.com/xuzhenbao","followers_url":"https://api.github.com/users/xuzhenbao/followers","following_url":"https://api.github.com/users/xuzhenbao/following{/other_user}","gists_url":"https://api.github.com/users/xuzhenbao/gists{/gist_id}","starred_url":"https://api.github.com/users/xuzhenbao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xuzhenbao/subscriptions","organizations_url":"https://api.github.com/users/xuzhenbao/orgs","repos_url":"https://api.github.com/users/xuzhenbao/repos","events_url":"https://api.github.com/users/xuzhenbao/events{/privacy}","received_events_url":"https://api.github.com/users/xuzhenbao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-20T06:19:27Z","updated_at":"2024-03-20T06:19:27Z","author_association":"CONTRIBUTOR","body":"> Considering the RSA approach, will event delivery be expensive?\r\n\r\nYes, this is a weakness of RSA, maybe it can be solved by improve RSA, such as supporting long links, supporting asynchronous calls.Its advantage is that the communication method can be expanded with the expansion of RSA. If this approach is controversial, I will consider not implementing it, until the implementation of RSA meets the requirements of event admin.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2008722849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016841227","html_url":"https://github.com/apache/celix/pull/740#issuecomment-2016841227","issue_url":"https://api.github.com/repos/apache/celix/issues/740","id":2016841227,"node_id":"IC_kwDOAVuczs54No4L","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-24T15:15:15Z","updated_at":"2024-03-24T15:15:15Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/740?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 89.58%. Comparing base [(`d46d983`)](https://app.codecov.io/gh/apache/celix/commit/d46d98383fb60b498415bfa5c0edc5c4f8e17bad?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`f3a7790`)](https://app.codecov.io/gh/apache/celix/pull/740?dropdown=coverage&src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@           Coverage Diff           @@\n##           master     #740   +/-   ##\n=======================================\n  Coverage   89.58%   89.58%           \n=======================================\n  Files         216      216           \n  Lines       25413    25413           \n=======================================\n  Hits        22765    22765           \n  Misses       2648     2648           \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/740?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016841227/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016853318","html_url":"https://github.com/apache/celix/pull/721#issuecomment-2016853318","issue_url":"https://api.github.com/repos/apache/celix/issues/721","id":2016853318,"node_id":"IC_kwDOAVuczs54Nr1G","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-24T16:00:26Z","updated_at":"2024-03-24T16:00:26Z","author_association":"CONTRIBUTOR","body":"This PR has been updated so that celix array list types are used, which minimizes the celix properties functions needed for array list handling. \r\nThis PR can be reviewed again. \r\n\r\nAfter this, I will dive into properties (JSON) serialization.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016853318/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016886878","html_url":"https://github.com/apache/celix/issues/515#issuecomment-2016886878","issue_url":"https://api.github.com/repos/apache/celix/issues/515","id":2016886878,"node_id":"IC_kwDOAVuczs54N0Be","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-24T17:58:07Z","updated_at":"2024-03-24T17:58:07Z","author_association":"CONTRIBUTOR","body":"Nice detailed plan for the Remote Event Admin.\r\n\r\nI have several remarks:\r\n\r\n1) Does the Event Admin need to be aware of remote events? I was considering the possibility that a Remote Event Admin could register an EventHandler with \"event.topics=*\". This way, the Remote Event Admin can receive any local events and, perhaps, even filter for events marked for remote communication (something like \"event.filter=(celix.event.remote.enable=true)\") and send them remotely. The counterpart of the Remote Event Admin can inject messages using the local Event Admin. The downside is that, from a remote perspective, the events are always treated as a postEvent. However, considering that remote calls can lead to long blocks and possible timeouts, this approach might be preferable.\r\n\r\n2) I appreciate the addition of qos and expiryInterval. However, I am not sure if I like the $ prefix. As far as I am aware, the OSGi standard does not use a special character prefix to indicate reserved property names but instead relies on the use of more fully qualified names (celix.event.remote.*). Although we do not have to follow the OSGi specification exactly, I prefer the OSGi approach in this case.\r\n\r\n3) Originally, the idea with PubSub was to build remote services on top of it (the C++ Remote Service Admin even had an integration test based on this). For me, it also makes more sense to build a Remote Services Admin based on a Remote Event Admin concept (note, this would then be a Remote Service Admin that does not require remote discovery). Starting with a remote events implementation based on a broker backend seems more logical to me. A Remote Events based on RSA, or vice versa, can be addressed in a follow-up.\r\n\r\n3) In my opinion, one of the benefits of using a message broker, as opposed to a peer-to-peer concept, is the elimination of the need for remote discovery. Instead, a broker server can be configured. This configuration can be simple, based on config properties, or more elaborate, based on configuration dependencies. Although we do not have a Config Admin, I think the concept of a configuration dependency is already usable. Therefore, perhaps it's an idea to let an MQTT Remote Service Admin depend on something like a \"RemoteServiceAdminMqttConfiguration\". This could be a marking interface with configuration service properties or a service with some \"get\" function to retrieve MQTT configuration. An instance of \"RemoteServiceAdminMqttConfiguration\" could be realized by reading config properties, a system-wide or local (JSON) configuration file (e.g., /etc/mosquitto.conf), or even (in the future) a dynamically discovered remote service. I expect that in most cases, a static configuration will be needed, but this approach keeps the option open for a more dynamic way of providing configuration.\r\n\r\nLastly, please note that these are my thoughts. If there is an immediate need to couple a Remote Event Admin with RSA, we can, of course, more directly pursue that.\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016886878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016895628","html_url":"https://github.com/apache/celix/issues/87#issuecomment-2016895628","issue_url":"https://api.github.com/repos/apache/celix/issues/87","id":2016895628,"node_id":"IC_kwDOAVuczs54N2KM","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-24T18:30:54Z","updated_at":"2024-03-24T18:30:54Z","author_association":"CONTRIBUTOR","body":"> With the addition of `celix_bundleContext_useTrackedService*` functions, the functions `celix_bundleContext_useService*` and methods `celix::BundleContext::useService*` are functional superfluous and less ideal to use (more prone to deadlocks).\r\n> \r\n>     * [x]  Remove the  the functions `celix_bundleContext_useService*`  and methods `celix::BundleContext::useService*`  to decrease the code size and improve the maintainability. Also introduce some testing methods to replace the useService with wait timeout usecase for testing.\r\n\r\nSimplified the implementation of `celix_bundleContext_useService*`  instead.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016895628/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016898172","html_url":"https://github.com/apache/celix/pull/741#issuecomment-2016898172","issue_url":"https://api.github.com/repos/apache/celix/issues/741","id":2016898172,"node_id":"IC_kwDOAVuczs54N2x8","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-24T18:38:18Z","updated_at":"2024-03-24T18:38:18Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/741?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: Patch coverage is `93.61702%` with `3 lines` in your changes are missing coverage. Please review.\n> Project coverage is 89.52%. Comparing base [(`d46d983`)](https://app.codecov.io/gh/apache/celix/commit/d46d98383fb60b498415bfa5c0edc5c4f8e17bad?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`1c4b4de`)](https://app.codecov.io/gh/apache/celix/pull/741?dropdown=coverage&src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n\n| [Files](https://app.codecov.io/gh/apache/celix/pull/741?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [bundles/shell/shell/src/help\\_command.c](https://app.codecov.io/gh/apache/celix/pull/741?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-YnVuZGxlcy9zaGVsbC9zaGVsbC9zcmMvaGVscF9jb21tYW5kLmM=) | 88.88% | [2 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/741?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [libs/framework/src/bundle\\_context.c](https://app.codecov.io/gh/apache/celix/pull/741?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL2J1bmRsZV9jb250ZXh0LmM=) | 96.55% | [1 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/741?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #741      +/-   ##\n==========================================\n- Coverage   89.58%   89.52%   -0.06%     \n==========================================\n  Files         216      216              \n  Lines       25413    25379      -34     \n==========================================\n- Hits        22765    22720      -45     \n- Misses       2648     2659      +11     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/741?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2016898172/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2017176409","html_url":"https://github.com/apache/celix/issues/515#issuecomment-2017176409","issue_url":"https://api.github.com/repos/apache/celix/issues/515","id":2017176409,"node_id":"IC_kwDOAVuczs54O6tZ","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-25T04:11:38Z","updated_at":"2024-03-25T04:12:23Z","author_association":"CONTRIBUTOR","body":"> The downside is that, from a remote perspective, the events are always treated as a postEvent. However, considering that remote calls can lead to long blocks and possible timeouts, this approach might be preferable.\r\n\r\nIn some rare cases, where performance is not a concern, we still need sync semantics. \r\nFor example, a master machine want to make sure all slave machines are ready to handle master shutdown before it actually performs the action.\r\n\r\n> Originally, the idea with PubSub was to build remote services on top of it (the C++ Remote Service Admin even had an integration test based on this). \r\n\r\nYes, conventionally messaging middle-wire lies below RPC, i.e. RPC can be implemented with messaging middle-wire.\r\nOur EventAdmin is still not general enough to be used to implement RPC. For example `celix_properties_t' still lacks serialization mechanism.\r\nAnd our RSA lacks async interface, which makes it impossible to implement EventAdmin efficiently.\r\nEvent if RSA has such support, whether it is a good idea to go that way is still debatable.\r\n\r\nI think the main motivation is to unify the service discovery of RSA/REA(RemoteEventAdmin).\r\nCurrently an empty marking interface with its meta data can be easily advertised by service discovery of RSA.\r\nIf the resulting coupling between RSA and REA is not desirable, we could instead try to make service discovery independent of RSA.\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2017176409/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2019332332","html_url":"https://github.com/apache/celix/issues/515#issuecomment-2019332332","issue_url":"https://api.github.com/repos/apache/celix/issues/515","id":2019332332,"node_id":"IC_kwDOAVuczs54XJDs","user":{"login":"xuzhenbao","id":43104033,"node_id":"MDQ6VXNlcjQzMTA0MDMz","avatar_url":"https://avatars.githubusercontent.com/u/43104033?v=4","gravatar_id":"","url":"https://api.github.com/users/xuzhenbao","html_url":"https://github.com/xuzhenbao","followers_url":"https://api.github.com/users/xuzhenbao/followers","following_url":"https://api.github.com/users/xuzhenbao/following{/other_user}","gists_url":"https://api.github.com/users/xuzhenbao/gists{/gist_id}","starred_url":"https://api.github.com/users/xuzhenbao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xuzhenbao/subscriptions","organizations_url":"https://api.github.com/users/xuzhenbao/orgs","repos_url":"https://api.github.com/users/xuzhenbao/repos","events_url":"https://api.github.com/users/xuzhenbao/events{/privacy}","received_events_url":"https://api.github.com/users/xuzhenbao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-03-26T03:49:46Z","updated_at":"2024-03-26T03:49:46Z","author_association":"CONTRIBUTOR","body":"> Does the Event Admin need to be aware of remote events? I was considering the possibility that a Remote Event Admin could register an EventHandler with \"event.topics=*\". This way, the Remote Event Admin can receive any local events and, perhaps, even filter for events marked for remote communication (something like \"event.filter=(celix.event.remote.enable=true)\") and send them remotely. The counterpart of the Remote Event Admin can inject messages using the local Event Admin. The downside is that, from a remote perspective, the events are always treated as a postEvent. However, considering that remote calls can lead to long blocks and possible timeouts, this approach might be preferable.\r\n\r\nAccording to the EventAdmin specification:\r\n> The Event Admin service must be registered as a service with the object class org.osgi.service.event.EventAdmin. Multiple Event Admin services can be registered. Publishers should publish their event on the Event Admin service with the highest value for the SERVICE_RANKING service property. This is the service selected by the getServiceReference method.\r\n \r\nMaybe we can implement an EventAdminWrapper, which implements the Event Admin Service, and its service ranking is the highest. In this way, EventAdminWrapper can forward events to remote (use EventRemoteProvider) or to local (use EventAdmin). And EventAdmin can be unaware of remote events.\r\n\r\nIn addition, should we consider multiple EventRemoteProviders existing? If yes, EventAdminWrapper can also be used to implement a strategy to select the perfect EventRemoteProvider to forward remote events.\r\n\r\n\r\nFor the MQTT broker address information, it maybe requires dynamic discovery in my work.\r\nMaybe we can implement dynamic discovery in the following ways:\r\n1. Use the previously mentioned remote service registration mechanism. But it has the following two disadvantages:\r\n    - RSA is required\r\n    - In the case of multiple network interfaces, it can't choose which network interface the broker address information is exposed on.\r\n2. Making discovery independent of RSA and REA. The problem with this approach is that if discovery is implemented based on bonjour, then the MQTT service should have a specific service name \"_mqtt._tcp\" (https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=MQTT), which conflicts with the service name we have defined (\"_celix-rpc._udp\"). I haven't  a solution to this problem currently. Maybe we need to give up using the service name \"_mqtt._tcp\", otherwise discovery_zeroconf may expose the details of bonjour.\r\n3. Using the bonjour client to implement dynamic discovery of the MQTT broker service address.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2019332332/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2029843094","html_url":"https://github.com/apache/celix/pull/721#issuecomment-2029843094","issue_url":"https://api.github.com/repos/apache/celix/issues/721","id":2029843094,"node_id":"IC_kwDOAVuczs54_PKW","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-01T14:26:32Z","updated_at":"2024-04-01T14:26:32Z","author_association":"CONTRIBUTOR","body":"All issues have been addressed!  :rocket: \r\nPlease wait for a little last minute cleanup to be merged, which will happen tomorrow.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2029843094/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2030238454","html_url":"https://github.com/apache/celix/issues/515#issuecomment-2030238454","issue_url":"https://api.github.com/repos/apache/celix/issues/515","id":2030238454,"node_id":"IC_kwDOAVuczs55Avr2","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-01T17:48:38Z","updated_at":"2024-04-01T17:48:38Z","author_association":"CONTRIBUTOR","body":"> Maybe we can implement an EventAdminWrapper, which implements the Event Admin Service, and its service ranking is the highest. In this way, EventAdminWrapper can forward events to remote (use EventRemoteProvider) or to local (use EventAdmin). And EventAdmin can be unaware of remote events.\r\n\r\n> In addition, should we consider multiple EventRemoteProviders existing? If yes, EventAdminWrapper can also be used to implement a strategy to select the perfect EventRemoteProvider to forward remote events.\r\n\r\nRethinking this, I think the proposed solution (using a `celix_event_remote_provider_service_t`) is a cleaner setup. \r\n\r\n> For the MQTT broker address information, it maybe requires dynamic discovery in my work.Maybe we can implement dynamic discovery in the following ways\r\n\r\nIf discovery is needed, RSA indeed could be used for this. Maybe a bit an overkill, but on the other hand the code exists, is tested and can be used for this (marker interface with some configuration properties). \r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2030238454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2033959308","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2033959308","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2033959308,"node_id":"IC_kwDOAVuczs55O8GM","user":{"login":"kulst","id":60887784,"node_id":"MDQ6VXNlcjYwODg3Nzg0","avatar_url":"https://avatars.githubusercontent.com/u/60887784?v=4","gravatar_id":"","url":"https://api.github.com/users/kulst","html_url":"https://github.com/kulst","followers_url":"https://api.github.com/users/kulst/followers","following_url":"https://api.github.com/users/kulst/following{/other_user}","gists_url":"https://api.github.com/users/kulst/gists{/gist_id}","starred_url":"https://api.github.com/users/kulst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kulst/subscriptions","organizations_url":"https://api.github.com/users/kulst/orgs","repos_url":"https://api.github.com/users/kulst/repos","events_url":"https://api.github.com/users/kulst/events{/privacy}","received_events_url":"https://api.github.com/users/kulst/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-03T08:53:57Z","updated_at":"2024-04-03T08:53:57Z","author_association":"NONE","body":"Hi, awesome to see Celix is making progress towards Rust :+1: \r\n\r\nAre you open to contributions on this topic? Although I am not completely familiar with the internals of Celix yet, I would love to wrap my head around your concepts and see if we can create a nice and secure Rust API for Celix. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2033959308/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2037862920","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2037862920","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2037862920,"node_id":"IC_kwDOAVuczs55d1II","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-04T18:04:49Z","updated_at":"2024-04-04T18:04:49Z","author_association":"CONTRIBUTOR","body":"> Hi, awesome to see Celix is making progress towards Rust 👍\r\n> \r\n> Are you open to contributions on this topic? Although I am not completely familiar with the internals of Celix yet, I would love to wrap my head around your concepts and see if we can create a nice and secure Rust API for Celix.\r\n\r\nHi, \r\nFirstly thanks for the interest! Additional help is always welcome :smile: .\r\n\r\nAlthough this pull request has remained dormant for some time, I still believe that introducing Rust bindings, alongside the existing C++ bindings, would greatly benefit Apache Celix. \r\n\r\nPlease note that Rust support, as well as this pull request, is still experimental. Rust is a new for me (and, I believe, for the other committers as well), and we are all in the process of understanding how Rust concepts can be integrated into Apache Celix, or more broadly, how they fit within a dynamic, in-process, service framework.\r\n\r\nAnother point to consider is that, for now, we have decided to develop Rust support on top of the C framework, thereby leveraging the existing and stable C framework. Theoretically, this approach could be reversed, but in my opinion, that is not our current objective.\r\n\r\nA good way to start would be to try out Apache Celix and, specifically, this branch. If you have any questions, feel free to ask them here or on the Apache Celix dev mailing list (see [https://celix.apache.org/support/mailing-list.html](https://celix.apache.org/support/mailing-list.html)). And, of course, it is possible to create a pull request on top of this pull request to introduce some changes.\r\n\r\nApache Celix is part of the [Apache Software Foundation (ASF)](https://www.apache.org/), and in practice, this means that we can accept some small (code) donations, but for more or larger donations, an [ASF Contributor Agreement](https://www.apache.org/licenses/contributor-agreements.html) is needed.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2037862920/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2038429466","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2038429466","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2038429466,"node_id":"IC_kwDOAVuczs55f_ca","user":{"login":"kulst","id":60887784,"node_id":"MDQ6VXNlcjYwODg3Nzg0","avatar_url":"https://avatars.githubusercontent.com/u/60887784?v=4","gravatar_id":"","url":"https://api.github.com/users/kulst","html_url":"https://github.com/kulst","followers_url":"https://api.github.com/users/kulst/followers","following_url":"https://api.github.com/users/kulst/following{/other_user}","gists_url":"https://api.github.com/users/kulst/gists{/gist_id}","starred_url":"https://api.github.com/users/kulst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kulst/subscriptions","organizations_url":"https://api.github.com/users/kulst/orgs","repos_url":"https://api.github.com/users/kulst/repos","events_url":"https://api.github.com/users/kulst/events{/privacy}","received_events_url":"https://api.github.com/users/kulst/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-04T23:18:20Z","updated_at":"2024-04-04T23:18:20Z","author_association":"NONE","body":"Hi, thank you for the detailed explanations!\r\n\r\nI aswell think that Rust would really benefit Celix.\r\nThe exclusive use of safe Rust guarantees that memory and type conversion errors as well as undefined behavior are excluded - through compile time and runtime checks.\r\nThis should also be the goal for the Rust API of Celix. If any of these errors occur to the user of the API when using safe Rust only, it should be considered a bug in the Rust API or Celix. However, whether it is possible to offer a Celix API that consists exclusively of safe Rust is still unclear to me.\r\n\r\nI think the existing C API is a great starting point for now, as Rust interopperates usually well with C. As you already showed :)\r\n\r\nFor now I would start with making myself more familiar with Celix. I was already able to develop a basic understanding of most of the concepts of Celix. But I definitely need to further enhance this.\r\nI will start by installing Celix and trying to get your Rust examples to work, lets see if I can also make it work with the latest version 2.4.\r\n\r\nThe next step would be to get a better understanding of the invariants that need to be upheld when using the C API. I saw, that a lot of these are already documented, but I assume there are more and maybe also implicit ones.\r\nWhen this is done, the Rust API can be designed. Of course I want to leverage the Rust type system to make sure that the invariants of the C API are upheld. \r\nYour POC is also a great starting point.\r\n\r\nFor now I think this is already a lot to do. Let's see where this leads me. :) In any case, an ASF Contributor Agreement will not be an obstacle.\r\n\r\nTopics I stumbled upon but which I have put in my backlog for now:\r\n\r\n**Allocation:** by default allocating and deallocating on different sides of the ffi might lead to undefined behaviour. There are several possible solutions to this \r\n1. implementing a (global) allocator in Rust that delegates to the Celix allocator\r\n2. making sure that both happens on the same side of the FFI by the Rust type system\r\n\r\n**Type conversion:** There are various types in the C API that are similar to Rust types but can not be used as smoothly without further adjustments on the Rust side. For example the `array_list` type is similar to a vector (with some additions). \r\n1. So one solution to use such a type smoothly in Rust, you basically would have to reimplement the interface of the `std::vec` type. \r\n2. Another solution is to just copy the elements to the corresponding type before/after passing the ffi boundary. This might be inefficient however. \r\n3. A third solution might only be possible when allocation and deallocation happen on the same side of the ffi boundary. I think it could then be possible to create a `std::vec` from the internals of an `array_list` without another allocation just by using the pointer, the size and the capacity an `array_list` already provides. Together with the additions of an `array_list` this could be packaged in a simple wrapper type. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2038429466/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2041540655","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2041540655","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2041540655,"node_id":"IC_kwDOAVuczs55r3Av","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-07T17:37:41Z","updated_at":"2024-04-07T17:37:41Z","author_association":"CONTRIBUTOR","body":"Sound like a plan :+1: . \r\n \r\n> For now I would start with making myself more familiar with Celix. I was already able to develop a basic understanding of most of the concepts of Celix. But I definitely need to further enhance this. I will start by installing Celix and trying to get your Rust examples to work, lets see if I can also make it work with the latest version 2.4.\r\n> \r\n\r\nTrying Apache Celix using version 2.4 is fine, but generally speaking the master branch is also quite stable for exploring Apache Celix. \r\n1 note: We are currently working towards a Apache Celix 3.0.0, so a major update. I expect this \r\nhas no real impact on learning Apache Celix, because a major part of the backwards incompatible updates focus on dropping older APIs, which are not or not well documented anyways. For a complete overview of the backwards incompatible changes see the top level `CHANGES.md` file. \r\n\r\n> The next step would be to get a better understanding of the invariants that need to be upheld when using the C API. I saw, that a lot of these are already documented, but I assume there are more and maybe also implicit ones. When this is done, the Rust API can be designed. Of course I want to leverage the Rust type system to make sure that the invariants of the C API are upheld. Your POC is also a great starting point.\r\n\r\n\r\n> For now I think this is already a lot to do. Let's see where this leads me. :) In any case, an ASF Contributor Agreement will not be an obstacle.\r\n\r\nGreat to hear, when this is needed I will give an additional trigger.\r\n\r\n> Topics I stumbled upon but which I have put in my backlog for now:\r\n> \r\n> **Allocation:** by default allocating and deallocating on different sides of the ffi might lead to undefined behaviour. There are several possible solutions to this\r\n> \r\n>     1. implementing a (global) allocator in Rust that delegates to the Celix allocator\r\n> \r\n>     2. making sure that both happens on the same side of the FFI by the Rust type system\r\n> \r\n> \r\n> **Type conversion:** There are various types in the C API that are similar to Rust types but can not be used as smoothly without further adjustments on the Rust side. For example the `array_list` type is similar to a vector (with some additions).\r\n> \r\n>     1. So one solution to use such a type smoothly in Rust, you basically would have to reimplement the interface of the `std::vec` type.\r\n> \r\n>     2. Another solution is to just copy the elements to the corresponding type before/after passing the ffi boundary. This might be inefficient however.\r\n> \r\n>     3. A third solution might only be possible when allocation and deallocation happen on the same side of the ffi boundary. I think it could then be possible to create a `std::vec` from the internals of an `array_list` without another allocation just by using the pointer, the size and the capacity an `array_list` already provides. Together with the additions of an `array_list` this could be packaged in a simple wrapper type.\r\n\r\nGood to hear, you are already seeing some topics and I think the topics are a good starting point. I was not aware that a separate way of mem allocation was needed/desired. But as stated, I am not a Rust expert, so help is welcome :)\r\n\r\nI will also try to eventual get this PR merged. Not as a stable or even completely usable addition, but then we at least have a Rust starting point in the master branch. But I am currently focusing on something else, so I am not sure yet when I have to pick up this PR. \r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2041540655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2061147528","html_url":"https://github.com/apache/celix/pull/726#issuecomment-2061147528","issue_url":"https://api.github.com/repos/apache/celix/issues/726","id":2061147528,"node_id":"IC_kwDOAVuczs562p2I","user":{"login":"xuzhenbao","id":43104033,"node_id":"MDQ6VXNlcjQzMTA0MDMz","avatar_url":"https://avatars.githubusercontent.com/u/43104033?v=4","gravatar_id":"","url":"https://api.github.com/users/xuzhenbao","html_url":"https://github.com/xuzhenbao","followers_url":"https://api.github.com/users/xuzhenbao/followers","following_url":"https://api.github.com/users/xuzhenbao/following{/other_user}","gists_url":"https://api.github.com/users/xuzhenbao/gists{/gist_id}","starred_url":"https://api.github.com/users/xuzhenbao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xuzhenbao/subscriptions","organizations_url":"https://api.github.com/users/xuzhenbao/orgs","repos_url":"https://api.github.com/users/xuzhenbao/repos","events_url":"https://api.github.com/users/xuzhenbao/events{/privacy}","received_events_url":"https://api.github.com/users/xuzhenbao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-17T12:28:50Z","updated_at":"2024-04-17T12:28:50Z","author_association":"CONTRIBUTOR","body":"It is replaced by #743","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2061147528/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2074036563","html_url":"https://github.com/apache/celix/pull/743#issuecomment-2074036563","issue_url":"https://api.github.com/repos/apache/celix/issues/743","id":2074036563,"node_id":"IC_kwDOAVuczs57n0lT","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-24T05:05:51Z","updated_at":"2024-04-24T05:05:51Z","author_association":"CONTRIBUTOR","body":"Just begin reviewing this PR. Sorry for being late.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2074036563/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2076589287","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2076589287","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2076589287,"node_id":"IC_kwDOAVuczs57xjzn","user":{"login":"kulst","id":60887784,"node_id":"MDQ6VXNlcjYwODg3Nzg0","avatar_url":"https://avatars.githubusercontent.com/u/60887784?v=4","gravatar_id":"","url":"https://api.github.com/users/kulst","html_url":"https://github.com/kulst","followers_url":"https://api.github.com/users/kulst/followers","following_url":"https://api.github.com/users/kulst/following{/other_user}","gists_url":"https://api.github.com/users/kulst/gists{/gist_id}","starred_url":"https://api.github.com/users/kulst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kulst/subscriptions","organizations_url":"https://api.github.com/users/kulst/orgs","repos_url":"https://api.github.com/users/kulst/repos","events_url":"https://api.github.com/users/kulst/events{/privacy}","received_events_url":"https://api.github.com/users/kulst/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-25T07:54:13Z","updated_at":"2024-04-25T07:55:39Z","author_association":"NONE","body":"I wanted to give a little update on my progress :)\r\n\r\nI was able to get your POC running with the latest master branch. Only some small changes were necessary. However there were some error messages I could track down to filter compilation. In `celix_version_parse` \"Invalid version component\" gets logged. I do not know if this is intentional.\r\n\r\nI also made some progress towards the API  and wanted to share my thoughts.\r\n\r\nI heavily thought about the I think most important invariant. `celix_bundle_context_t` (and all other framework objects) must not be used when the Bundle is stopped. From my point of view this means that the activator must invalidate all Framework objects that are floating around.\r\n\r\n**POC approach using Weak and Arc**\r\nIn the POC I think this was tried to achieve by using `std::sync::Weak` pointers. However I am not sure if this is entirely sound. For example when building the Servicetracker we upgrade the `Weak` to an `Arc`. What happens if this is done in another thread and immediately after upgrading the `Weak` and before actually tracking the service the bundle gets stopped and destroyed. I think we would have a use after free situation here. \r\n\r\n**Approach using Arc<Mutex<Option<T>>>**\r\nSo I thought about a solution having two types both storing `Arc<Mutex<Option<*mut celix_bundle_context_t>>>`. One type is private to the library and invalidates each `celix_bundle_context_t` simply by taking it out of the `Option` when the bundle gets stopped. The other type is public with a private implementation and uses the stored `celix_bundle_context_t` as long as it is available. With this solution the whole API of the `PublicCelixBundleContext` would always return a `Result<T,E>`. Also for each access there is additional locking necessary because of the `Mutex`.\r\n\r\nThen I thought about using lifetimes. The problem with lifetimes is that they need a scope where the Owner lifes. But we have two (four) functions that are called after each other from the framework. The compiler does not know that these are called one after another. Also we convert the `Activator` to a raw pointer. There do no lifetimes exist for raw pointers. So what can we do about it?\r\n\r\n**First lifetime approach: Static services**\r\nThe framework provides the  `celix_bundle_context_t` in each of the four functions. We could now create a `BundleContext` in the start function from it and store it in the activator. The library user could now get a `&BundleContext`. During the start function the user could register services, track services and so on with it. This can be also stored in the activator. However he can not create a new thread with it that outlives the start function. This is because the `&BundleContext` has a non-static lifetime.\r\n\r\nIn the stop function the user simply takes its user data from the activator and undos what he did in the start function. \r\nOverall this can only be used for static handling of services.\r\n\r\n**Second lifetime approach: Spawn a thread**\r\nMy second approach is to just spawn a thread in the start function and join it in the stop function. By this we get a scope that lifes from start to stop. We send the created `BundleContext` into the thread but also here we only provide the user a `&BundleContext`. Also here the user can not spawn thread that outlive the scope. But as the scope is from start to stop it is possible to create threads that also live as long. \r\nIn the stop function we signal the thread that it must stop and join it. The user is responsible to make sure the thread stops.\r\nWith this approach we do not need to store user data in the activator. We simply put a `JoinHandle` there to join it and the `Sender` to signal the thread it must stop. \r\nOverall this method is suited for static services but dynamic services as well.\r\n\r\nIn the following repository I show how I think this could look like:\r\nhttps://github.com/kulst/celix_rust_test\r\n\r\nI hope I was able to make everything clear to you. \r\nI would be glad to get some feedback, to know if I am on the right way. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2076589287/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2081623014","html_url":"https://github.com/apache/celix/pull/743#issuecomment-2081623014","issue_url":"https://api.github.com/repos/apache/celix/issues/743","id":2081623014,"node_id":"IC_kwDOAVuczs58Ewvm","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-28T19:40:11Z","updated_at":"2024-04-28T19:40:11Z","author_association":"CONTRIBUTOR","body":"@PengZheng Thanks for the thorough review. \r\nI will not be able to rework this PR the coming, but I will pick this up somewhere next week. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2081623014/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2081638679","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2081638679","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2081638679,"node_id":"IC_kwDOAVuczs58E0kX","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-28T20:12:27Z","updated_at":"2024-04-28T20:12:27Z","author_association":"CONTRIBUTOR","body":"Thanks for the update. \r\n\r\n> \r\n> **POC approach using Weak and Arc** In the POC I think this was tried to achieve by using `std::sync::Weak` pointers. However I am not sure if this is entirely sound. For example when building the Servicetracker we upgrade the `Weak` to an `Arc`. What happens if this is done in another thread and immediately after upgrading the `Weak` and before actually tracking the service the bundle gets stopped and destroyed. I think we would have a use after free situation here.\r\n\r\nYou are correct, the usage of `Weak` mimics what is done in C++. Note that in C++ de bundle deactivates waits until all upgraded `Weak` (`std::weak_ptr`) to `Arc` (`std::shared_ptr`) are out of scope and prints an error when this takes too long. \r\n\r\nBut I agree, ideally this is improved using Rust lifecycles.\r\nAnd great to see, and impressive, that you already made some progress with Rust lifecycles and Apache Celix. \r\n\r\nThe coming week I will not have the time have a look at the code and give feedback, but when I have to time I will pick this up. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2081638679/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2082762635","html_url":"https://github.com/apache/celix/pull/743#issuecomment-2082762635","issue_url":"https://api.github.com/repos/apache/celix/issues/743","id":2082762635,"node_id":"IC_kwDOAVuczs58JG-L","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-04-29T13:31:25Z","updated_at":"2024-04-29T13:31:25Z","author_association":"CONTRIBUTOR","body":">  I will not be able to rework this PR the coming, but I will pick this up somewhere next week.\r\n\r\nNo problem. :smile: ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2082762635/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2110255869","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2110255869","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2110255869,"node_id":"IC_kwDOAVuczs59x_L9","user":{"login":"kulst","id":60887784,"node_id":"MDQ6VXNlcjYwODg3Nzg0","avatar_url":"https://avatars.githubusercontent.com/u/60887784?v=4","gravatar_id":"","url":"https://api.github.com/users/kulst","html_url":"https://github.com/kulst","followers_url":"https://api.github.com/users/kulst/followers","following_url":"https://api.github.com/users/kulst/following{/other_user}","gists_url":"https://api.github.com/users/kulst/gists{/gist_id}","starred_url":"https://api.github.com/users/kulst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kulst/subscriptions","organizations_url":"https://api.github.com/users/kulst/orgs","repos_url":"https://api.github.com/users/kulst/repos","events_url":"https://api.github.com/users/kulst/events{/privacy}","received_events_url":"https://api.github.com/users/kulst/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-14T13:31:14Z","updated_at":"2024-05-14T13:32:11Z","author_association":"NONE","body":"Two weeks have passed and I wanted to share again my progress :)\r\n\r\n**BundleContext lifetime**\r\nAnother way I came up with is to hand out a BundleContext to the bundle and having an Arc<(Condvar, Mutex<Bool>)> flag in the BundleContext (not accessible by the BundleContexts API). When the BundleContext is dropped, the flag is set and the Condvar is notified.\r\nA copy of that Arc is stored in the internal part of the activator. When the stop/delete function of the bundle is invoked the flag is checked periodically if it is set. By using the Condvar we can block between these checks (and also log an error similar to the cpp API).\r\n\r\nHowever I postponed this topic a little bit as I think there are a few feasible solutions. We can later review these solutions and settle on one of them.\r\n\r\n**Services**\r\nThe next topic I wanted to approach is services. When using a service a bundle calls the function of another bundle. Both bundles need to agree upon the the API of the service and also on the ABI of the service. \r\nIn my eyes the Celix Rust API should be safe to use for the user. This means it should not be possible to cause undefined behaviour without using unsafe code in Rust. But we can not enforce during compilation that the API and ABI of the service we want to use is the same as we think it is.\r\n\r\nSo I think we have two options here:\r\n\r\n1. Using a service is inherently unsafe and invariants must be upheld by the user. For C and C++ services this will probably be the only solution, so using these services from Rust will allways be unsafe. However for Rust services I think there is another way!\r\n2. Checking ABI and API compatibility at runtime. If we can achieve this, using a service is safe, incompatible ABI/API would not cause undefined behaviour, returning an Error would be enough. \r\n\r\n**How can we achieve ABI and API checks at runtime?**\r\nThere is one Rust crate that already tries to deal with this issue. Only a very small part of the Rust API is already stable. Most part of the API is allowed to change between compiler versions but also between different compiler runs. \r\n[abi_stable](https://docs.rs/abi_stable/latest/abi_stable/) provides ABI stability by transforming Rust types with unstable ABI into types with a stable ABI (#[repr(C)]) types. It utilizes the Rust procedural macro system for this which can transform abstract syntax trees into other abstract syntax trees.\r\nTo get API stability the crate provides type information of these types, which can be checked at runtime.\r\nTo make sure that the API and ABI of the abi_stable crate is compatible a static variable is provided which can also be checked against at runtime.\r\n\r\nI think we can utilize this crate to provide safe services. \r\n\r\n**How could this look like?**\r\nA service would be an object that implements a trait (the service interface). This is similar to C++ services. The trait is defined in an Service API crate. \r\nThe bundle that provides the service statically links against this API crate. When registering this service a pointer to the bundle-static type information and abi_stable library information is stored in the framework (for that it is necessary to implement one or two functions that are only usable internally by the Celix Rust API). \r\n\r\nWhen another bundle now wants to use the service it must statically link against the API crate as well. When using the service it is checked that the type information and abi_stable library information are compatible. \r\n\r\n**Additional opportunities**\r\nIt would be great if we could use Rust services from C and C++. For this the Service API crate must export some C/C++ header files. Luckily there is a crate that already does this: [cglue](https://docs.rs/cglue/latest/cglue/). On top of that it is compatible and works together with abi_stable. \r\nThis makes it possible to easily create services that are usable from C, C++ and Rust and provide additional guaranties. \r\n\r\n**Final hurdles**\r\nI would like to rewrite the POC in the next step to make sure all of this works. However there is one problem I could not solve yet:\r\nWhat if a service of a bundle provides a 'static reference in its interface? The reference could point to 'static data of the bundle. After unloading the providing bundle this reference would be invalid.\r\nThere should be a way to constrain the lifetimes to the lifetime of the service use callback. \r\nHowever I do not know how yet. \r\nMaybe there is a way by checking the service API with an additional proc macro. \r\n\r\n**Summary**\r\nAgain a lot of text. I hope you are fine with documenting my thoughts and progress here. There are a lot of topics that need to be considered. At the moment Rust is not perfectly well suited for dynamic linking. Its mostly unstable ABI makes it necessary to heavily use the macro system to provide a safe interface. If you want to have all of the Rust safety guaranties as well, a lot of possibilites need to be considered. \r\nBut I still think it is possible and I will continue working on it.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2110255869/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2110990398","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2110990398","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2110990398,"node_id":"IC_kwDOAVuczs590yg-","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-14T19:26:46Z","updated_at":"2024-05-14T19:26:46Z","author_association":"CONTRIBUTOR","body":"> Two weeks have passed and I wanted to share again my progress :)\r\n\r\nVery good, keep up the pace :)\r\n\r\nI did have a look at the implementation, but was struggling to find some spare time. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2110990398/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111017532","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2111017532","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2111017532,"node_id":"IC_kwDOAVuczs5905I8","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-14T19:44:34Z","updated_at":"2024-05-14T19:44:34Z","author_association":"CONTRIBUTOR","body":"> **Second lifetime approach: Spawn a thread** My second approach is to just spawn a thread in the start function and join it in the stop function. By this we get a scope that lifes from start to stop. We send the created `BundleContext` into the thread but also here we only provide the user a `&BundleContext`. Also here the user can not spawn thread that outlive the scope. But as the scope is from start to stop it is possible to create threads that also live as long. In the stop function we signal the thread that it must stop and join it. The user is responsible to make sure the thread stops. With this approach we do not need to store user data in the activator. We simply put a `JoinHandle` there to join it and the `Sender` to signal the thread it must stop. Overall this method is suited for static services but dynamic services as well.\r\n> \r\n> In the following repository I show how I think this could look like: https://github.com/kulst/celix_rust_test\r\n> \r\n\r\nIn my opinion I would be great if the BundleContext and everything created from the bundle context can be controlled by lifecycles. This could ensure that we can have static checks for correctly handling service registrations and service usage within the lifecycle of a bundle. \r\n\r\nFor now I also think it is fine to do this with spawning threads, but ideally a thread is not needed. I have experience with complex applications using about 100 bundles and this would also mean a 100 thread (including a 100 extra stack stack) purely for lifecycle management. \r\n\r\nIf I understand it correctly a thread is used to ensure a object lifecycle from BundleActivtor::start until BundleActivator::stop. Is it not possible to somehow create a rust object that outlives the celix C framework, maybe even using a custom rust celix launcher and use that rust object to store \"bundle lifecycle control\" storage objects? \r\nBut I am guessing here.. I am still learning rust. \r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111017532/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111030126","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2111030126","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2111030126,"node_id":"IC_kwDOAVuczs5908Nu","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-14T19:52:36Z","updated_at":"2024-05-14T19:52:36Z","author_association":"CONTRIBUTOR","body":"> Two weeks have passed and I wanted to share again my progress :)\r\n> \r\n> **BundleContext lifetime** Another way I came up with is to hand out a BundleContext to the bundle and having an Arc<(Condvar, Mutex)> flag in the BundleContext (not accessible by the BundleContexts API). When the BundleContext is dropped, the flag is set and the Condvar is notified. A copy of that Arc is stored in the internal part of the activator. When the stop/delete function of the bundle is invoked the flag is checked periodically if it is set. By using the Condvar we can block between these checks (and also log an error similar to the cpp API).\r\n> \r\n\r\nThis is indeed close to what C++ is doing and that case a `weak_ptr` is used during bundle stop a runtime check and wait is made to ensure there are no users of the BundleContext anymore. \r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111030126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111046448","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2111046448","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2111046448,"node_id":"IC_kwDOAVuczs591AMw","user":{"login":"kulst","id":60887784,"node_id":"MDQ6VXNlcjYwODg3Nzg0","avatar_url":"https://avatars.githubusercontent.com/u/60887784?v=4","gravatar_id":"","url":"https://api.github.com/users/kulst","html_url":"https://github.com/kulst","followers_url":"https://api.github.com/users/kulst/followers","following_url":"https://api.github.com/users/kulst/following{/other_user}","gists_url":"https://api.github.com/users/kulst/gists{/gist_id}","starred_url":"https://api.github.com/users/kulst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kulst/subscriptions","organizations_url":"https://api.github.com/users/kulst/orgs","repos_url":"https://api.github.com/users/kulst/repos","events_url":"https://api.github.com/users/kulst/events{/privacy}","received_events_url":"https://api.github.com/users/kulst/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-14T20:03:15Z","updated_at":"2024-05-14T20:05:32Z","author_association":"NONE","body":"> This is indeed close to what C++ is doing and that case a `weak_ptr` is used during bundle stop a runtime check and wait is made to ensure there are no users of the BundleContext anymore.\r\n\r\nExactly, the C++ solution is where I took inspiration from. But by doing it with an ```Arc<(Condvar, Mutex<bool>)>``` inside of the BundleContext we can utilize lifetimes and could also create the Rust API with more flexibility for the user. \r\nFor example instead of explicitly storing an ```Arc<BundleContext>``` or an ```&BundleContext``` in each data structure that depends on the BundleContext we could also store an ```T : AsRef<BundleContext>``` in the data structures and let the user decide. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111046448/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111057796","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2111057796","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2111057796,"node_id":"IC_kwDOAVuczs591C-E","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-14T20:10:28Z","updated_at":"2024-05-14T20:10:28Z","author_association":"CONTRIBUTOR","body":"> **Services** The next topic I wanted to approach is services. When using a service a bundle calls the function of another bundle. Both bundles need to agree upon the the API of the service and also on the ABI of the service. In my eyes the Celix Rust API should be safe to use for the user. This means it should not be possible to cause undefined behaviour without using unsafe code in Rust. But we can not enforce during compilation that the API and ABI of the service we want to use is the same as we think it is.\r\n> \r\n> So I think we have two options here:\r\n> \r\n>     1. Using a service is inherently unsafe and invariants must be upheld by the user. For C and C++ services this will probably be the only solution, so using these services from Rust will allways be unsafe. However for Rust services I think there is another way!\r\n\r\nFirst of, my complements about taking API **and** ABI compatibility into account. For C and C++ we currently only support source compatibility, so everything should be build with the same compiler using the same sources (include service interface headers). \r\n\r\nBut the idea to do some API compatibility checking is not new. Apache Celix also has a [`libffi` library](https://github.com/apache/celix/tree/master/libs/dfi) (recently updated for stability and documentation). \r\n\r\nAn idea back when libffi was first created, was to use the `libclang` to parse C service interface headers to create descriptors (small and easy parseable files describing C structures and interfaces). Note: using libclang as lib and not necessary also using the clang compiler. And then adding these generated dfi descriptors in bundle zips to that they can be referred to during service registration and service usage. The Celix framework could then use these descriptors and libffi to check compatibility. \r\n\r\nI still think this would be a very welcome addition to Apache Celix, but I would still require significant effort to develop, test and make user friendly. \r\n\r\n> \r\n>     2. Checking ABI and API compatibility at runtime. If we can achieve this, using a service is safe, incompatible ABI/API would not cause undefined behaviour, returning an Error would be enough.\r\n> \r\n> \r\n> **How can we achieve ABI and API checks at runtime?** There is one Rust crate that already tries to deal with this issue. Only a very small part of the Rust API is already stable. Most part of the API is allowed to change between compiler versions but also between different compiler runs. [abi_stable](https://docs.rs/abi_stable/latest/abi_stable/) provides ABI stability by transforming Rust types with unstable ABI into types with a stable ABI (#[repr(C)]) types. It utilizes the Rust procedural macro system for this which can transform abstract syntax trees into other abstract syntax trees. To get API stability the crate provides type information of these types, which can be checked at runtime. To make sure that the API and ABI of the abi_stable crate is compatible a static variable is provided which can also be checked against at runtime.\r\n> \r\n> I think we can utilize this crate to provide safe services.\r\n\r\n\r\nI have a short look at abi_stable and mainly looked for the license. Maybe I missing something, but I could not find under which license the code is provided.  \r\n\r\nBut this does indeed sound like a good addition for runtime compatibility checking. \r\n\r\n> \r\n> **How could this look like?** A service would be an object that implements a trait (the service interface). This is similar to C++ services. The trait is defined in an Service API crate. The bundle that provides the service statically links against this API crate. When registering this service a pointer to the bundle-static type information and abi_stable library information is stored in the framework (for that it is necessary to implement one or two functions that are only usable internally by the Celix Rust API).\r\n> \r\n> When another bundle now wants to use the service it must statically link against the API crate as well. When using the service it is checked that the type information and abi_stable library information are compatible.\r\n> \r\n> **Additional opportunities** It would be great if we could use Rust services from C and C++. For this the Service API crate must export some C/C++ header files. Luckily there is a crate that already does this: [cglue](https://docs.rs/cglue/latest/cglue/). On top of that it is compatible and works together with abi_stable. This makes it possible to easily create services that are usable from C, C++ and Rust and provide additional guaranties.\r\n> \r\n\r\nNice, I will have a deeper look into this. Currently when combining C and C++, it possible to use C service in C++ but not the other way around. If rust service can be more flexible that would be great. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111057796/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111071301","html_url":"https://github.com/apache/celix/pull/627#issuecomment-2111071301","issue_url":"https://api.github.com/repos/apache/celix/issues/627","id":2111071301,"node_id":"IC_kwDOAVuczs591GRF","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-14T20:18:55Z","updated_at":"2024-05-14T20:18:55Z","author_association":"CONTRIBUTOR","body":"> **Final hurdles** I would like to rewrite the POC in the next step to make sure all of this works. However there is one problem I could not solve yet: What if a service of a bundle provides a 'static reference in its interface? The reference could point to 'static data of the bundle. After unloading the providing bundle this reference would be invalid. There should be a way to constrain the lifetimes to the lifetime of the service use callback. However I do not know how yet. Maybe there is a way by checking the service API with an additional proc macro.\r\n> \r\n\r\nIndeed. The integral dynamic nature of dynamic services in Apache Celix is that they can come and go and users should be protected against misuse as much as possible. For C / C++ this is arranged by providing a \"use service\" API based on callbacks so that the framework can ensure services are kept \"alive\" during callbacks. But it can also be done by service trackers combined with set/add/remove callbacks and in that case the user is responsible for correctly using the callbacks and protection service usage. \r\n\r\nI agree that ideally in Rust this should be done in a safer way, but lack to rust experience to know how or even if this is feasible. \r\n\r\n> **Summary** Again a lot of text. I hope you are fine with documenting my thoughts and progress here. There are a lot of topics that need to be considered. At the moment Rust is not perfectly well suited for dynamic linking. Its mostly unstable ABI makes it necessary to heavily use the macro system to provide a safe interface. If you want to have all of the Rust safety guaranties as well, a lot of possibilites need to be considered. But I still think it is possible and I will continue working on it.\r\n\r\nNo worries, I find very interesting to read up your thoughts, ideas and POCs. IMO communication through PR comments are ok :)","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2111071301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2121174415","html_url":"https://github.com/apache/celix/pull/743#issuecomment-2121174415","issue_url":"https://api.github.com/repos/apache/celix/issues/743","id":2121174415,"node_id":"IC_kwDOAVuczs5-bo2P","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-20T20:42:23Z","updated_at":"2024-05-20T20:42:23Z","author_association":"CONTRIBUTOR","body":"I have processed al review comments. \r\nThe brew MacOS ci test is failing, but I think this is an issue not introduced by this PR. I will try to have a look at this later, but for now this PR can be re-reviewed. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2121174415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2122124687","html_url":"https://github.com/apache/celix/pull/743#issuecomment-2122124687","issue_url":"https://api.github.com/repos/apache/celix/issues/743","id":2122124687,"node_id":"IC_kwDOAVuczs5-fQ2P","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-21T08:58:59Z","updated_at":"2024-05-21T08:58:59Z","author_association":"CONTRIBUTOR","body":"> The brew MacOS ci test is failing, but I think this is an issue not introduced by this PR. I will try to have a look at this later, but for now this PR can be re-reviewed.\r\n\r\nIt has been addressed by #745 ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2122124687/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2132142407","html_url":"https://github.com/apache/celix/issues/739#issuecomment-2132142407","issue_url":"https://api.github.com/repos/apache/celix/issues/739","id":2132142407,"node_id":"IC_kwDOAVuczs5_FelH","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-26T08:56:34Z","updated_at":"2024-07-23T14:09:14Z","author_association":"CONTRIBUTOR","body":"It seems that the glibc upstream is not interested in fixing it, so here is my fix for glibc 2.29:\r\nhttps://github.com/PengZheng/glibc/commits/release/2.29/rw_fix/\r\n03a1fca315a07800639acc5b333d5c08cc00fba9\r\n\r\nHere is fix for glibc 2.25:\r\nhttps://github.com/PengZheng/glibc/commits/release/2.25/rw_fix","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2132142407/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2133891326","html_url":"https://github.com/apache/celix/issues/747#issuecomment-2133891326","issue_url":"https://api.github.com/repos/apache/celix/issues/747","id":2133891326,"node_id":"IC_kwDOAVuczs5_MJj-","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-27T18:00:51Z","updated_at":"2024-05-27T18:00:51Z","author_association":"CONTRIBUTOR","body":"Token-less codecov uploads is not supported anymore and we should add a token:\r\nhttps://issues.apache.org/jira/browse/INFRA-25778\r\n\r\nI think we can copy/paste the change done at Apache NIFI:\r\nhttps://github.com/apache/nifi/commit/5f9f5247d6dbb8f2206f46e49cd5f5c7ff17af37\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2133891326/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2142766173","html_url":"https://github.com/apache/celix/issues/739#issuecomment-2142766173","issue_url":"https://api.github.com/repos/apache/celix/issues/739","id":2142766173,"node_id":"IC_kwDOAVuczs5_uARd","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-31T18:19:34Z","updated_at":"2024-05-31T18:19:34Z","author_association":"CONTRIBUTOR","body":"Interesting issues. \r\n\r\nI could be good to warn users, maybe in the CHANGES.md (known issues), but this can of course also occur in already released Apache Celix versions.\r\n\r\nBut this also triggers me that we are currently not building and testing using musl or uclibc, is that something we should also consider?","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2142766173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2142793843","html_url":"https://github.com/apache/celix/issues/747#issuecomment-2142793843","issue_url":"https://api.github.com/repos/apache/celix/issues/747","id":2142793843,"node_id":"IC_kwDOAVuczs5_uHBz","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-05-31T18:36:14Z","updated_at":"2024-05-31T18:36:14Z","author_association":"CONTRIBUTOR","body":"I created a INFRA ticket to create a GitHub codecov token secret: https://issues.apache.org/jira/browse/INFRA-25836\r\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2142793843/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143310714","html_url":"https://github.com/apache/celix/issues/739#issuecomment-2143310714","issue_url":"https://api.github.com/repos/apache/celix/issues/739","id":2143310714,"node_id":"IC_kwDOAVuczs5_wFN6","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-01T05:54:30Z","updated_at":"2024-06-01T06:41:11Z","author_association":"CONTRIBUTOR","body":"> But this also triggers me that we are currently not building and testing using musl or uclibc, is that something we should also consider?\r\n\r\nYes. As for uclibc, we may use uclibc-ng instead, which is still actively maintained. IIRC, toolchains using uclibc does not have complete support of C++14.\r\n\r\nI am also considering RTOS support, before which we need to support  both static bundle and overall static build.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143310714/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143420596","html_url":"https://github.com/apache/celix/pull/748#issuecomment-2143420596","issue_url":"https://api.github.com/repos/apache/celix/issues/748","id":2143420596,"node_id":"IC_kwDOAVuczs5_wgC0","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-01T11:51:06Z","updated_at":"2024-06-02T11:54:03Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/748?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 90.20%. Comparing base [(`cb38185`)](https://app.codecov.io/gh/apache/celix/commit/cb381850835a50ab06646fc199f10faca2ec2047?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`8b30826`)](https://app.codecov.io/gh/apache/celix/commit/8b308267664148f07208b738d7240967cb316779?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n> Report is 32 commits behind head on master.\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #748      +/-   ##\n==========================================\n+ Coverage   90.17%   90.20%   +0.03%     \n==========================================\n  Files         223      225       +2     \n  Lines       26545    26393     -152     \n==========================================\n- Hits        23936    23807     -129     \n+ Misses       2609     2586      -23     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/748?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143420596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143458374","html_url":"https://github.com/apache/celix/pull/748#issuecomment-2143458374","issue_url":"https://api.github.com/repos/apache/celix/issues/748","id":2143458374,"node_id":"IC_kwDOAVuczs5_wpRG","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-01T13:57:23Z","updated_at":"2024-06-01T13:57:23Z","author_association":"CONTRIBUTOR","body":"Note the coverage also dropped to about 60%. I think is because the test sources are also includes and `make coverage` excludes the test files for coverage. I will look into this before merging this PR. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143458374/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143816065","html_url":"https://github.com/apache/celix/pull/748#issuecomment-2143816065","issue_url":"https://api.github.com/repos/apache/celix/issues/748","id":2143816065,"node_id":"IC_kwDOAVuczs5_yAmB","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-02T11:47:18Z","updated_at":"2024-06-02T11:47:18Z","author_association":"CONTRIBUTOR","body":"I am still testing some small changes to see if I can get a cleaner log. After that, I will create a new pull request with a single commit to fix codecov. In my opinion, the small trial and error commits in this PR will unnecessarily clutter the commit log.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143816065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143830918","html_url":"https://github.com/apache/celix/pull/750#issuecomment-2143830918","issue_url":"https://api.github.com/repos/apache/celix/issues/750","id":2143830918,"node_id":"IC_kwDOAVuczs5_yEOG","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-02T12:35:18Z","updated_at":"2024-06-02T12:35:18Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/750?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 90.20%. Comparing base [(`cb38185`)](https://app.codecov.io/gh/apache/celix/commit/cb381850835a50ab06646fc199f10faca2ec2047?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`f5cd4a1`)](https://app.codecov.io/gh/apache/celix/commit/f5cd4a13f2b2f7e985d1b7459a656ecedd3a00fd?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n> Report is 32 commits behind head on master.\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #750      +/-   ##\n==========================================\n+ Coverage   90.17%   90.20%   +0.03%     \n==========================================\n  Files         223      225       +2     \n  Lines       26545    26393     -152     \n==========================================\n- Hits        23936    23807     -129     \n+ Misses       2609     2586      -23     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/750?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2143830918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2150644521","html_url":"https://github.com/apache/celix/pull/751#issuecomment-2150644521","issue_url":"https://api.github.com/repos/apache/celix/issues/751","id":2150644521,"node_id":"IC_kwDOAVuczs6AMDsp","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-05T18:00:39Z","updated_at":"2024-06-09T15:09:31Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/751?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: Patch coverage is `93.53535%` with `32 lines` in your changes missing coverage. Please review.\n> Project coverage is 90.24%. Comparing base [(`fd4b138`)](https://app.codecov.io/gh/apache/celix/commit/fd4b1385abcf7e58da0e2cea50914080f81230ac?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`f237f4b`)](https://app.codecov.io/gh/apache/celix/commit/f237f4b2004a8995a226f913d63adb8d8dfd918d?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n> Report is 3 commits behind head on master.\n\n| [Files](https://app.codecov.io/gh/apache/celix/pull/751?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [libs/framework/src/framework.c](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&filepath=libs%2Fframework%2Fsrc%2Fframework.c&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL2ZyYW1ld29yay5j) | 85.47% | [26 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [libs/framework/src/celix\\_launcher.c](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&filepath=libs%2Fframework%2Fsrc%2Fcelix_launcher.c&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL2NlbGl4X2xhdW5jaGVyLmM=) | 97.76% | [3 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [...\\_service\\_admin\\_shm\\_v2/rsa\\_shm/src/rsa\\_shm\\_server.c](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&filepath=bundles%2Fremote_services%2Fremote_service_admin_shm_v2%2Frsa_shm%2Fsrc%2Frsa_shm_server.c&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-YnVuZGxlcy9yZW1vdGVfc2VydmljZXMvcmVtb3RlX3NlcnZpY2VfYWRtaW5fc2htX3YyL3JzYV9zaG0vc3JjL3JzYV9zaG1fc2VydmVyLmM=) | 66.66% | [1 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [libs/framework/src/bundle\\_archive.c](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&filepath=libs%2Fframework%2Fsrc%2Fbundle_archive.c&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL2J1bmRsZV9hcmNoaXZlLmM=) | 95.65% | [1 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [libs/framework/src/celix\\_bundle\\_cache.c](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&filepath=libs%2Fframework%2Fsrc%2Fcelix_bundle_cache.c&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-bGlicy9mcmFtZXdvcmsvc3JjL2NlbGl4X2J1bmRsZV9jYWNoZS5j) | 95.23% | [1 Missing :warning: ](https://app.codecov.io/gh/apache/celix/pull/751?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #751      +/-   ##\n==========================================\n+ Coverage   90.20%   90.24%   +0.04%     \n==========================================\n  Files         225      226       +1     \n  Lines       26393    26281     -112     \n==========================================\n- Hits        23807    23718      -89     \n+ Misses       2586     2563      -23     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/751?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2150644521/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2154831699","html_url":"https://github.com/apache/celix/pull/752#issuecomment-2154831699","issue_url":"https://api.github.com/repos/apache/celix/issues/752","id":2154831699,"node_id":"IC_kwDOAVuczs6AcB9T","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-07T13:23:29Z","updated_at":"2024-06-07T13:23:29Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/752?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 90.20%. Comparing base [(`fd4b138`)](https://app.codecov.io/gh/apache/celix/commit/fd4b1385abcf7e58da0e2cea50914080f81230ac?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`2117276`)](https://app.codecov.io/gh/apache/celix/commit/21172764c6599cfb683713056ae28ee39dfc80be?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@           Coverage Diff           @@\n##           master     #752   +/-   ##\n=======================================\n  Coverage   90.20%   90.20%           \n=======================================\n  Files         225      225           \n  Lines       26393    26393           \n=======================================\n  Hits        23807    23807           \n  Misses       2586     2586           \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/752?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2154831699/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2156800375","html_url":"https://github.com/apache/celix/pull/731#issuecomment-2156800375","issue_url":"https://api.github.com/repos/apache/celix/issues/731","id":2156800375,"node_id":"IC_kwDOAVuczs6Ajil3","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-09T21:36:29Z","updated_at":"2025-01-03T15:09:24Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/731?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 90.70%. Comparing base [(`db14807`)](https://app.codecov.io/gh/apache/celix/commit/db148071bc92c640493cd9359b727dc49ad72d74?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`3b54597`)](https://app.codecov.io/gh/apache/celix/commit/3b54597289d914d22d3f80c2ce819508d10a1579?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@           Coverage Diff           @@\n##           master     #731   +/-   ##\n=======================================\n  Coverage   90.70%   90.70%           \n=======================================\n  Files         226      226           \n  Lines       26604    26604           \n=======================================\n  Hits        24131    24131           \n  Misses       2473     2473           \n```\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/731?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2156800375/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2159011985","html_url":"https://github.com/apache/celix/pull/751#issuecomment-2159011985","issue_url":"https://api.github.com/repos/apache/celix/issues/751","id":2159011985,"node_id":"IC_kwDOAVuczs6Ar-iR","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-10T18:19:06Z","updated_at":"2024-06-10T18:19:06Z","author_association":"CONTRIBUTOR","body":"> Please note that there are remarks for launcher in hidden conversations. And I have addressed the remaining ones in `framework.c`.\r\n\r\nI forgot the launcher and global framework remarks, should be updated now. ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2159011985/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2162344223","html_url":"https://github.com/apache/celix/pull/753#issuecomment-2162344223","issue_url":"https://api.github.com/repos/apache/celix/issues/753","id":2162344223,"node_id":"IC_kwDOAVuczs6A4sEf","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-12T07:51:31Z","updated_at":"2024-06-16T04:40:06Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/753?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 90.31%. Comparing base [(`58860bb`)](https://app.codecov.io/gh/apache/celix/commit/58860bbf1075f9c1e3c40ba598e674f6425fa2a9?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`2378bac`)](https://app.codecov.io/gh/apache/celix/commit/2378bac0e31fbd346492123e9dd43bb2855960f4?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #753      +/-   ##\n==========================================\n+ Coverage   90.24%   90.31%   +0.06%     \n==========================================\n  Files         226      226              \n  Lines       26284    26316      +32     \n==========================================\n+ Hits        23721    23767      +46     \n+ Misses       2563     2549      -14     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/753?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2162344223/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2162435887","html_url":"https://github.com/apache/celix/pull/753#issuecomment-2162435887","issue_url":"https://api.github.com/repos/apache/celix/issues/753","id":2162435887,"node_id":"IC_kwDOAVuczs6A5Ccv","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-12T08:39:20Z","updated_at":"2024-06-12T10:02:53Z","author_association":"CONTRIBUTOR","body":"Here is an interesting program hang: https://github.com/apache/celix/actions/runs/9478654947/job/26115518903\r\n\r\n```\r\nWarning: 12T08:29:26] [warning] [celix_framework] [celix_scheduledEvent_waitForRemoved:237] Timeout while waiting for removal of scheduled event 'celix_shutdown_check' (id=0) for bundle id 0.\r\nWarning: 12T08:29:28] [warning] [celix_framework] [celix_scheduledEvent_waitForRemoved:237] Timeout while waiting for removal of scheduled event 'celix_shutdown_check' (id=0) for bundle id 0.\r\nWarning: 12T08:29:30] [warning] [celix_framework] [celix_scheduledEvent_waitForRemoved:237] Timeout while waiting for removal of scheduled event 'celix_shutdown_check' (id=0) for bundle id 0.\r\nWarning: 12T08:29:32] [warning] [celix_framework] [celix_scheduledEvent_waitForRemoved:237] Timeout while waiting for removal of scheduled event 'celix_shutdown_check' (id=0) for bundle id 0.\r\nWarning: 12T08:29:34] [warning] [celix_framework] [celix_scheduledEvent_waitForRemoved:237] Timeout while waiting for removal of scheduled event 'celix_shutdown_check' (id=0) for bundle id 0.\r\n```\r\n\r\nThe issue should have been fixed by d384c86. Note that `hello_bundle` in test_package is a perfect example of framework shutdown initiated by a bundle, which happens to reveal a defect in our scheduled event implementation.\r\n\r\nThere are still room for further improvements: ideally we shall not permit events (neither generic or scheduled) to be posted to an inactive dispatcher. But I will leave it for a future PR.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2162435887/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2164999835","html_url":"https://github.com/apache/celix/issues/612#issuecomment-2164999835","issue_url":"https://api.github.com/repos/apache/celix/issues/612","id":2164999835,"node_id":"IC_kwDOAVuczs6BC0ab","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-13T08:34:49Z","updated_at":"2024-06-13T08:34:49Z","author_association":"CONTRIBUTOR","body":"It is overridden by #743.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2164999835/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2169619358","html_url":"https://github.com/apache/celix/pull/753#issuecomment-2169619358","issue_url":"https://api.github.com/repos/apache/celix/issues/753","id":2169619358,"node_id":"IC_kwDOAVuczs6BUcOe","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-15T13:31:34Z","updated_at":"2024-06-15T13:31:34Z","author_association":"CONTRIBUTOR","body":"> Without making our event loop more powerful (like [libuv](https://docs.libuv.org/en/v1.x/design.html)), ...\r\n\r\nlibuv is very interesting and seems to provide a lot of the functionality we use and have implemented ourselves, including a single-thread event loop, shutdown procedure, as well as cross-platform polling, threading, locking, filesystem abstractions, etc. Since it uses an MIT license and does not have dependencies, it could be suitable for Apache Celix.\r\n\r\nThis could help in supporting more platforms and even be a step towards supporting Windows (we had some support for loading DLL libraries in the past).\r\n\r\nIn the short term, this may be a step too far, but it's at least worth a discussion.\r\n@PengZheng, any thoughts on how feasible it would be to introduce libuv, starting with our file, time, threading, and locking usage/abstractions?","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2169619358/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2171039810","html_url":"https://github.com/apache/celix/pull/753#issuecomment-2171039810","issue_url":"https://api.github.com/repos/apache/celix/issues/753","id":2171039810,"node_id":"IC_kwDOAVuczs6BZ3BC","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-16T04:20:21Z","updated_at":"2024-06-16T04:39:46Z","author_association":"CONTRIBUTOR","body":"> @PengZheng, any thoughts on how feasible it would be to introduce libuv, starting with our file, time, threading, and locking usage/abstractions?\r\n\r\n`libuv` is the central piece of an event processing framework used heavily in my day job. I have very positive experience with it, and think it can be useful in the following regards:\r\n\r\n- Besides a single-thread event loop, it also provides a thread-pool nicely integrated with the event loop: we can offload inherently blocking tasks to the thread-pool, and get notified when they are done. Therefore we can easily keep the Celix event loop totally non-blocking.\r\n- Besides networking, it provides various useful constructions,  such as `uv_timer_t`/`uv_signal_t`/`uv_process_t`/`uv_tty_t`.\r\n- As you already mentioned, it provides a general OS abstraction. Utilizing it we become more portable, and Windows support is not far away.\r\n\r\nSpecific to this PR:\r\n\r\n- `uv_async_send` is [async-signal-safe](https://man7.org/linux/man-pages/man7/signal-safety.7.html). It can be used to notify framework shutdown from a signal handler.\r\n- Or we can use `uv_signal_t` to add signal handlers called from the event loop.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2171039810/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2184936416","html_url":"https://github.com/apache/celix/pull/756#issuecomment-2184936416","issue_url":"https://api.github.com/repos/apache/celix/issues/756","id":2184936416,"node_id":"IC_kwDOAVuczs6CO3vg","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-23T10:31:22Z","updated_at":"2024-06-23T10:31:22Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/756?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 90.26%. Comparing base [(`f16b2d0`)](https://app.codecov.io/gh/apache/celix/commit/f16b2d0b601cd10b579e60bc82ced9ae15972b9f?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`63445a3`)](https://app.codecov.io/gh/apache/celix/commit/63445a3fa18109b20f8168c66a2ce536a6dbcd55?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #756      +/-   ##\n==========================================\n- Coverage   90.27%   90.26%   -0.01%     \n==========================================\n  Files         226      226              \n  Lines       26316    26319       +3     \n==========================================\n+ Hits        23756    23758       +2     \n- Misses       2560     2561       +1     \n```\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/756?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2184936416/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2185269274","html_url":"https://github.com/apache/celix/pull/731#issuecomment-2185269274","issue_url":"https://api.github.com/repos/apache/celix/issues/731","id":2185269274,"node_id":"IC_kwDOAVuczs6CQJAa","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-23T18:53:45Z","updated_at":"2024-06-23T18:53:45Z","author_association":"CONTRIBUTOR","body":"I updated the devcontainer setup to use Ubuntu 24.04. For now, this is different from the Ubuntu CI. When the GitHub Ubuntu runners for 24.04 are no longer in beta, I would like to update our Ubuntu CI to 24.04 as well.\r\n\r\nI also moved all the container setup to the `.devcontainer` directory.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2185269274/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2185979300","html_url":"https://github.com/apache/celix/pull/731#issuecomment-2185979300","issue_url":"https://api.github.com/repos/apache/celix/issues/731","id":2185979300,"node_id":"IC_kwDOAVuczs6CS2Wk","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-24T09:01:40Z","updated_at":"2024-06-24T10:17:54Z","author_association":"CONTRIBUTOR","body":"There is one remaining test failure: \r\n\r\n```\r\n26/43 Test #26: run_unit_test_discovery_zeroconf .................***Failed    0.01 sec\r\n/workspace/build/bundles/remote_services/discovery_zeroconf/gtest/unit_test_discovery_zeroconfd: /lib/x86_64-linux-gnu/libssl.so.3: version `OPENSSL_3.2.0' not found (required by /root/.conan2/p/b/libcu5cd8ac887cea2/p/lib/libcurl.so.4)\r\n```\r\n\r\nWhen the tests are run under `sudo`, the system openssl rather than the one in Conan cache will be used.\r\nWe don't need `sudo` any more in container, so I drop it.\r\n\r\nAfter dropping `sudo`, `run_unit_test_discovery_zeroconf` will hang. Please have a look, @xuzhenbao ","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2185979300/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2186190667","html_url":"https://github.com/apache/celix/pull/757#issuecomment-2186190667","issue_url":"https://api.github.com/repos/apache/celix/issues/757","id":2186190667,"node_id":"IC_kwDOAVuczs6CTp9L","user":{"login":"codecov-commenter","id":65553080,"node_id":"MDQ6VXNlcjY1NTUzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/65553080?v=4","gravatar_id":"","url":"https://api.github.com/users/codecov-commenter","html_url":"https://github.com/codecov-commenter","followers_url":"https://api.github.com/users/codecov-commenter/followers","following_url":"https://api.github.com/users/codecov-commenter/following{/other_user}","gists_url":"https://api.github.com/users/codecov-commenter/gists{/gist_id}","starred_url":"https://api.github.com/users/codecov-commenter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/codecov-commenter/subscriptions","organizations_url":"https://api.github.com/users/codecov-commenter/orgs","repos_url":"https://api.github.com/users/codecov-commenter/repos","events_url":"https://api.github.com/users/codecov-commenter/events{/privacy}","received_events_url":"https://api.github.com/users/codecov-commenter/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-24T10:14:57Z","updated_at":"2024-08-17T19:38:49Z","author_association":"NONE","body":"## [Codecov](https://app.codecov.io/gh/apache/celix/pull/757?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 90.27%. Comparing base [(`39e2282`)](https://app.codecov.io/gh/apache/celix/commit/39e2282f8fe138016c9938201cab5ce1cfcfb971?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) to head [(`f82223d`)](https://app.codecov.io/gh/apache/celix/commit/f82223d6eac01c118c62e5ae53eac814748342aa?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n> Report is 12 commits behind head on master.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@           Coverage Diff           @@\n##           master     #757   +/-   ##\n=======================================\n  Coverage   90.26%   90.27%           \n=======================================\n  Files         226      226           \n  Lines       26319    26320    +1     \n=======================================\n+ Hits        23758    23760    +2     \n+ Misses       2561     2560    -1     \n```\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/celix/pull/757?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2186190667/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2186540482","html_url":"https://github.com/apache/celix/pull/731#issuecomment-2186540482","issue_url":"https://api.github.com/repos/apache/celix/issues/731","id":2186540482,"node_id":"IC_kwDOAVuczs6CU_XC","user":{"login":"PengZheng","id":5362947,"node_id":"MDQ6VXNlcjUzNjI5NDc=","avatar_url":"https://avatars.githubusercontent.com/u/5362947?v=4","gravatar_id":"","url":"https://api.github.com/users/PengZheng","html_url":"https://github.com/PengZheng","followers_url":"https://api.github.com/users/PengZheng/followers","following_url":"https://api.github.com/users/PengZheng/following{/other_user}","gists_url":"https://api.github.com/users/PengZheng/gists{/gist_id}","starred_url":"https://api.github.com/users/PengZheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PengZheng/subscriptions","organizations_url":"https://api.github.com/users/PengZheng/orgs","repos_url":"https://api.github.com/users/PengZheng/repos","events_url":"https://api.github.com/users/PengZheng/events{/privacy}","received_events_url":"https://api.github.com/users/PengZheng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-24T13:06:07Z","updated_at":"2024-06-24T13:06:26Z","author_association":"CONTRIBUTOR","body":"Besides the `sudo` issue, there seems to be shaky tests:\r\nhttps://github.com/apache/celix/actions/runs/9644957822/job/26598173196?pr=731\r\n\r\n```\r\n[ RUN      ] DiscoveryZeroconfWatcherTestSuite.BrowseServicesFailed1\r\n[2024-06-24T12:13:10] [   info] [celix_framework] [framework_start:483] Celix framework started\r\n[2024-06-24T12:13:10] [  trace] [celix_framework] [framework_start:484] Celix framework started with uuid f82db217-e714-4955-8bf9-94a775f5fa59\r\n[2024-06-24T12:13:10] [  debug] [celix_framework] Framework started event received -> registering framework.ready condition service\r\n[2024-06-24T12:13:10] [  error] [DiscoveryZeroconf] Watcher: Failed to create watched services map.\r\n/workspace/bundles/remote_services/discovery_zeroconf/gtest/src/DiscoveryZeroconfWatcherTestSuite.cc:706: Failure\r\nValue of: timeOut\r\n  Actual: true\r\nExpected: false\r\n[2024-06-24T12:13:40] [  trace] [celix_framework] [celix_framework_shutdownAsync:1157] Start shutdown thread for framework f82db217-e714-4955-8bf9-94a775f5fa59\r\n[2024-06-24T12:13:40] [  trace] [celix_framework] [celix_bundleContext_cleanup:116] Cleaning up bundle context `celix_framework` (id=0)\r\n[2024-06-24T12:13:40] [  trace] [celix_framework] [framework_shutdown:1110] Celix framework shutting down\r\n[2024-06-24T12:13:40] [  trace] [celix_framework] [celix_framework_stopAndJoinEventQueue:1095] Stop and joining event loop thread for framework f82db217-e714-4955-8bf9-94a775f5fa59\r\n[2024-06-24T12:13:40] [  debug] [celix_framework] [celix_framework_stopAndJoinEventQueue:1104] Joined event loop thread for framework f82db217-e714-4955-8bf9-94a775f5fa59\r\n[  FAILED  ] DiscoveryZeroconfWatcherTestSuite.BrowseServicesFailed1 (30004 ms)\r\n```","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2186540482/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2195620807","html_url":"https://github.com/apache/celix/pull/731#issuecomment-2195620807","issue_url":"https://api.github.com/repos/apache/celix/issues/731","id":2195620807,"node_id":"IC_kwDOAVuczs6C3oPH","user":{"login":"pnoltes","id":1766397,"node_id":"MDQ6VXNlcjE3NjYzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/1766397?v=4","gravatar_id":"","url":"https://api.github.com/users/pnoltes","html_url":"https://github.com/pnoltes","followers_url":"https://api.github.com/users/pnoltes/followers","following_url":"https://api.github.com/users/pnoltes/following{/other_user}","gists_url":"https://api.github.com/users/pnoltes/gists{/gist_id}","starred_url":"https://api.github.com/users/pnoltes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnoltes/subscriptions","organizations_url":"https://api.github.com/users/pnoltes/orgs","repos_url":"https://api.github.com/users/pnoltes/repos","events_url":"https://api.github.com/users/pnoltes/events{/privacy}","received_events_url":"https://api.github.com/users/pnoltes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-06-27T20:32:48Z","updated_at":"2024-06-27T20:33:01Z","author_association":"CONTRIBUTOR","body":"I think this PR is ready for review again. @rlenferink and/or @Deedss If able could you have a look at this PR?","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2195620807/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/celix/issues/comments/2206386987","html_url":"https://github.com/apache/celix/pull/731#issuecomment-2206386987","issue_url":"https://api.github.com/repos/apache/celix/issues/731","id":2206386987,"node_id":"IC_kwDOAVuczs6Dgssr","user":{"login":"rlenferink","id":10008950,"node_id":"MDQ6VXNlcjEwMDA4OTUw","avatar_url":"https://avatars.githubusercontent.com/u/10008950?v=4","gravatar_id":"","url":"https://api.github.com/users/rlenferink","html_url":"https://github.com/rlenferink","followers_url":"https://api.github.com/users/rlenferink/followers","following_url":"https://api.github.com/users/rlenferink/following{/other_user}","gists_url":"https://api.github.com/users/rlenferink/gists{/gist_id}","starred_url":"https://api.github.com/users/rlenferink/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rlenferink/subscriptions","organizations_url":"https://api.github.com/users/rlenferink/orgs","repos_url":"https://api.github.com/users/rlenferink/repos","events_url":"https://api.github.com/users/rlenferink/events{/privacy}","received_events_url":"https://api.github.com/users/rlenferink/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-07-03T14:49:26Z","updated_at":"2024-07-03T14:49:26Z","author_association":"MEMBER","body":"@eyedevelop do you feel interested (with your VScode knowsledge) to review this PR?\r\n\r\n@pnoltes I’ll review it somewhere this week.","reactions":{"url":"https://api.github.com/repos/apache/celix/issues/comments/2206386987/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]