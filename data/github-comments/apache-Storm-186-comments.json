[{"url":"https://api.github.com/repos/apache/storm/issues/comments/190868282","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-190868282","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":190868282,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDg2ODI4Mg==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T19:39:50Z","updated_at":"2016-03-01T19:39:50Z","author_association":"CONTRIBUTOR","body":"@knusbaum can you please let me know how you are trying to run it. I am uploading shortly the changes addressing the code review. So, if you tell me how you are trying to run it, I can address any problems there may be. Thanks.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190868282/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652558","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652558","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652558,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1NTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T19:41:15Z","updated_at":"2025-01-24T14:23:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54622905\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54622905</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,383 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    //TODO: To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +<br/>\n    +    //TODO: to be replaced by a common registry<br/>\n    +    private final static Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() {<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In the original code clear-thread was started in the service-handler (which is the equivalent of the constructor).  I would like to see it started here too, but that will require the constructor to take the Config.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652558/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190870605","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-190870605","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":190870605,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDg3MDYwNQ==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T19:44:32Z","updated_at":"2016-03-01T19:44:32Z","author_association":"CONTRIBUTOR","body":"@jianbzhou if tuples 1-5 have been emitted, if 3 fails, currently only 2 is re-emitted. Offsets 1,2 are committed, and the offsets 3-5 are only committed once 2 is acked. \n\nI think that It should not be too hard to send again tuples 3-5, the problem is that the downstream component would receive once the tuples 4 and 5 twice. We try avoiding duplicates a much as possible, although in some failure scenarios it can still occur. \n\nThe problem that you are describing isn't well solved by trident? Isn't it one of the purposes it was built for? \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190870605/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652563","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652563","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652563,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1NjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T19:44:47Z","updated_at":"2025-01-24T14:23:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54623479\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54623479</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,383 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    //TODO: To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +<br/>\n    +    //TODO: to be replaced by a common registry<br/>\n    +    private final static Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    //TODO: to be removed<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception{<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +//TODO: To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) {<br/>\n    +    reporter.prepare(new MetricRegistry(), conf);<br/>\n    +    reporter.start();<br/>\n    +    LOG.info(\"Started statistics report plugin: {}\", reporter);<br/>\n    +}<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, InternalRequest> e : outstandingRequests.entrySet()) {<br/>\n    +    InternalRequest internalRequest = e.getValue();<br/>\n    +    if (Time.deltaSecs(internalRequest.startTimeSecs) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    There was no default of 0 in the original code and we should probably not have one here either.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652563/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652568","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652568","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652568,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T19:45:33Z","updated_at":"2025-01-24T14:23:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54623619\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54623619</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,383 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    //TODO: To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +<br/>\n    +    //TODO: to be replaced by a common registry<br/>\n    +    private final static Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    //TODO: to be removed<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception{<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +//TODO: To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) {<br/>\n    +    reporter.prepare(new MetricRegistry(), conf);<br/>\n    +    reporter.start();<br/>\n    +    LOG.info(\"Started statistics report plugin: {}\", reporter);<br/>\n    +}<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, InternalRequest> e : outstandingRequests.entrySet()) {<br/>\n    +    InternalRequest internalRequest = e.getValue();<br/>\n    +    if (Time.deltaSecs(internalRequest.startTimeSecs) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = internalRequest.sem;<br/>\n    +if (sem != null) {<br/>\n    +    String func = internalRequest.function;<br/>\n    +    acquireQueue(func).remove(internalRequest.request);<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This log did not exist in the original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652572","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652572","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652572,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T19:49:43Z","updated_at":"2025-01-24T14:23:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54624316\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54624316</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes it should the original code was more of</p>\n\n<p>    ```<br/>\n    if (handlerServer != null) handlerServer.stop();<br/>\n    invokeServer.stop();<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652572/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652575","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652575","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652575,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:04:58Z","updated_at":"2025-01-24T14:23:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54626696\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54626696</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,383 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    //TODO: To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +<br/>\n    +    //TODO: to be replaced by a common registry<br/>\n    +    private final static Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    //TODO: to be removed<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception{<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +//TODO: To be replaced by Common.StartMetricsReporters<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This should probably be moved into #1171 and just do it there.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652575/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652581","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652581","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652581,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:05:40Z","updated_at":"2025-01-24T14:23:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54626795\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54626795</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,383 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    //TODO: To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +<br/>\n    +    //TODO: to be replaced by a common registry<br/>\n    +    private final static Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    //TODO: to be removed<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception{<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +//TODO: To be replaced by Common.StartMetricsReporters<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    That way it can use the same MetricsRegistry as the others, which is the key to make this all work.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652581/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190881185","html_url":"https://github.com/apache/storm/pull/1107#issuecomment-190881185","issue_url":"https://api.github.com/repos/apache/storm/issues/1107","id":190881185,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDg4MTE4NQ==","user":{"login":"srdo","id":4324588,"node_id":"MDQ6VXNlcjQzMjQ1ODg=","avatar_url":"https://avatars.githubusercontent.com/u/4324588?v=4","gravatar_id":"","url":"https://api.github.com/users/srdo","html_url":"https://github.com/srdo","followers_url":"https://api.github.com/users/srdo/followers","following_url":"https://api.github.com/users/srdo/following{/other_user}","gists_url":"https://api.github.com/users/srdo/gists{/gist_id}","starred_url":"https://api.github.com/users/srdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/srdo/subscriptions","organizations_url":"https://api.github.com/users/srdo/orgs","repos_url":"https://api.github.com/users/srdo/repos","events_url":"https://api.github.com/users/srdo/events{/privacy}","received_events_url":"https://api.github.com/users/srdo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:08:13Z","updated_at":"2016-03-01T20:08:13Z","author_association":"CONTRIBUTOR","body":"Great. I'll make another PR when I've made these changes on master. Should I close this one?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190881185/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872263","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872263","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872263,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyNjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:08:14Z","updated_at":"2025-01-24T16:02:09Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user srdo commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1107#issuecomment-190881185\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1107#issuecomment-190881185</a></p>\n\n<p>    Great. I'll make another PR when I've made these changes on master. Should I close this one?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652584","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652584","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652584,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:10:09Z","updated_at":"2025-01-24T14:23:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54627466\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54627466</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    If we move the initClearThread to be called from the constructor, and have the constructor take a conf we can then remove the need for any parameters top be passed in here, and simply have localmode not call this method.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652584/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652587","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652587","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652587,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:15:15Z","updated_at":"2025-01-24T14:23:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54628183\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54628183</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,383 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    //TODO: To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +<br/>\n    +    //TODO: to be replaced by a common registry<br/>\n    +    private final static Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    //TODO: to be removed<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception{<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +//TODO: To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) {<br/>\n    +    reporter.prepare(new MetricRegistry(), conf);<br/>\n    +    reporter.start();<br/>\n    +    LOG.info(\"Started statistics report plugin: {}\", reporter);<br/>\n    +}<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, InternalRequest> e : outstandingRequests.entrySet()) {<br/>\n    +    InternalRequest internalRequest = e.getValue();<br/>\n    +    if (Time.deltaSecs(internalRequest.startTimeSecs) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = internalRequest.sem;<br/>\n    +if (sem != null) {<br/>\n    +    String func = internalRequest.function;<br/>\n    +    acquireQueue(func).remove(internalRequest.request);<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)</p>\n{\n    +    initThrift();\n    +    initHttp();\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void close() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +outstandingRequests.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} ({}) at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int newid = 0;<br/>\n    +int orig = 0;<br/>\n    +do </p>\n{\n    +    orig = ctr.get();\n    +    newid = (orig + 1) % 1000000000;\n    +}\n<p> while (!ctr.compareAndSet(orig, newid));<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +InternalRequest internalRequest = new InternalRequest(functionName, req);<br/>\n    +this.outstandingRequests.put(strid, internalRequest);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    internalRequest.sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = internalRequest.result;<br/>\n    +<br/>\n    +LOG.debug(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException ) </p>\n{\n    +    throw (DRPCExecutionException)result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +try </p>\n{\n    +    return String.valueOf(result);\n    +}\n<p>catch (Exception e)</p>\n{\n    +    throw new DRPCExecutionException(e.getMessage());\n    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    Lets replace this the entire try/catch with.<br/>\n    ```<br/>\n    return (String) result;<br/>\n    ```</p>\n\n<p>    If we ever have anything but a DRPCExecutorionException or a String in there we have an internal error that we need to fix.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652587/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190890638","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-190890638","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":190890638,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDg5MDYzOA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:37:37Z","updated_at":"2016-03-01T20:37:37Z","author_association":"CONTRIBUTOR","body":"@hmcl I'm copying the jar out of storm-kafka-new-consumer/target/ and trying to run `storm jar` on it.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190890638/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652590","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652590","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652590,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1OTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:46:24Z","updated_at":"2025-01-24T14:23:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54632449\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54632449</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else </p>\n{\n    +    invokeServer.stop();\n    +}\n<p>    +    }<br/>\n    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +// To be replaced by Common.StartMetricsReporters<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    reporter.prepare(new MetricRegistry(), conf);\n    +    reporter.start();\n    +    LOG.info(\"Started statistics report plugin...\");\n    +}\n<p>    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initClearThread() {<br/>\n    +clearThread = Utils.asyncLoop(new Callable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public Object call() throws Exception {<br/>\n    +for (Map.Entry<String, Integer> e : idtoStart.entrySet()) {<br/>\n    +<br/>\n    +    if (Time.deltaSecs(e.getValue()) > Utils.getInt(conf.get(Config.DRPC_REQUEST_TIMEOUT_SECS), 0)) {<br/>\n    +String id = e.getKey();<br/>\n    +Semaphore sem = idtoSem.get(id);<br/>\n    +if (sem != null) {<br/>\n    +    String func = idtoFunction.get(id);<br/>\n    +    acquireQueue(func).remove(idtoRequest.get(id));<br/>\n    +    LOG.warn(\"Timeout DRPC request id: {} start at {}\", id, e.getValue());<br/>\n    +    sem.release();<br/>\n    +}<br/>\n    +cleanup(id);<br/>\n    +LOG.info(\"Clear request \" + id);<br/>\n    +    }<br/>\n    +}<br/>\n    +return getTimeoutCheckSecs();<br/>\n    +    }<br/>\n    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public Long getTimeoutCheckSecs() </p>\n{\n    +return timeoutCheckSecs;\n    +    }\n<p>    +<br/>\n    +    public void launchServer(boolean isLocal, Map conf) throws Exception {<br/>\n    +<br/>\n    +LOG.info(\"Starting drpc server for storm version {}\", VersionInfo.getVersion());<br/>\n    +this.conf = conf;<br/>\n    +authorizer = mkAuthorizationHandler((String) (conf.get(Config.DRPC_AUTHORIZER)), conf);<br/>\n    +<br/>\n    +initClearThread();<br/>\n    +if (!isLocal)<br/>\n    +    initServer();<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void shutdown() </p>\n{\n    +meterShutdownCalls.mark();\n    +clearThread.interrupt();\n    +    }\n<p>    +<br/>\n    +    public void cleanup(String id) </p>\n{\n    +idtoSem.remove(id);\n    +idtoResult.remove(id);\n    +idtoStart.remove(id);\n    +idtoFunction.remove(id);\n    +idtoRequest.remove(id);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public String execute(String functionName, String funcArgs) throws DRPCExecutionException, AuthorizationException, org.apache.thrift.TException {<br/>\n    +meterExecuteCalls.mark();<br/>\n    +LOG.debug(\"Received DRPC request for {} {} at {} \", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"execute\");<br/>\n    +<br/>\n    +int idinc = this.ctr.incrementAndGet();<br/>\n    +int maxvalue = 1000000000;<br/>\n    +int newid = idinc % maxvalue;<br/>\n    +if (idinc != newid) </p>\n{\n    +    this.ctr.compareAndSet(idinc, newid);\n    +}\n<p>    +<br/>\n    +String strid = String.valueOf(newid);<br/>\n    +Semaphore sem = new Semaphore(0);<br/>\n    +<br/>\n    +DRPCRequest req = new DRPCRequest(funcArgs, strid);<br/>\n    +this.idtoStart.put(strid, Time.currentTimeSecs());<br/>\n    +this.idtoSem.put(strid, sem);<br/>\n    +this.idtoFunction.put(strid, functionName);<br/>\n    +this.idtoRequest.put(strid, req);<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +queue.add(req);<br/>\n    +LOG.debug(\"Waiting for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +try </p>\n{\n    +    sem.acquire();\n    +}\n<p> catch (InterruptedException e) </p>\n{\n    +    LOG.error(\"acquire fail \", e);\n    +}\n<p>    +LOG.debug(\"Acquired for DRPC request for {} {} at {}\", functionName, funcArgs, System.currentTimeMillis());<br/>\n    +<br/>\n    +Object result = this.idtoResult.get(strid);<br/>\n    +<br/>\n    +LOG.info(\"Returning for DRPC request for \" + functionName + \" \" + funcArgs + \" at \" + (System.currentTimeMillis()));<br/>\n    +<br/>\n    +this.cleanup(strid);<br/>\n    +<br/>\n    +if (result instanceof DRPCExecutionException) </p>\n{\n    +    throw (DRPCExecutionException) result;\n    +}\n<p>    +if (result == null) </p>\n{\n    +    throw new DRPCExecutionException(\"Request timed out\");\n    +}\n<p>    +return String.valueOf(result);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void result(String id, String result) throws AuthorizationException, TException {<br/>\n    +meterResultCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"result\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    LOG.debug(\"Received result {} for {} at {}\", result, id, System.currentTimeMillis());<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, result);\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public DRPCRequest fetchRequest(String functionName) throws AuthorizationException, TException {<br/>\n    +meterFetchRequestCalls.mark();<br/>\n    +Map<String, String> map = new HashMap<>();<br/>\n    +map.put(DRPCAuthorizerBase.FUNCTION_NAME, functionName);<br/>\n    +checkAuthorization(authorizer, map, \"fetchRequest\");<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> queue = acquireQueue(functionName);<br/>\n    +DRPCRequest req = queue.poll();<br/>\n    +if (req != null) {<br/>\n    +    LOG.debug(\"Fetched request for {} at {}\", functionName, System.currentTimeMillis());<br/>\n    +    return req;<br/>\n    +} else </p>\n{\n    +    return new DRPCRequest(\"\", \"\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void failRequest(String id) throws AuthorizationException, TException {<br/>\n    +meterFailRequestCalls.mark();<br/>\n    +String func = this.idtoFunction.get(id);<br/>\n    +if (func != null) {<br/>\n    +    Map<String, String> map = new HashMap<>();<br/>\n    +    map.put(DRPCAuthorizerBase.FUNCTION_NAME, func);<br/>\n    +    checkAuthorization(authorizer, map, \"failRequest\");<br/>\n    +    Semaphore sem = this.idtoSem.get(id);<br/>\n    +    if (sem != null) </p>\n{\n    +this.idtoResult.put(id, new DRPCExecutionException(\"Request failed\"));\n    +sem.release();\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    protected ConcurrentLinkedQueue<DRPCRequest> acquireQueue(String function) {<br/>\n    +ConcurrentLinkedQueue<DRPCRequest> reqQueue = requestQueues.get(function);<br/>\n    +if (reqQueue == null) </p>\n{\n    +    reqQueue = new ConcurrentLinkedQueue<DRPCRequest>();\n    +    requestQueues.put(function, reqQueue);\n    +}\n<p>    +return reqQueue;<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation, ReqContext reqContext) throws AuthorizationException {<br/>\n    +if (reqContext != null) </p>\n{\n    +    ThriftAccessLogger.logAccess(reqContext.requestID(), reqContext.remoteAddress(), reqContext.principal(), operation);\n    +}\n<p>    +if (aclHandler != null) {<br/>\n    +    if (reqContext == null)<br/>\n    +reqContext = ReqContext.context();<br/>\n    +    if (!aclHandler.permit(reqContext, operation, mapping)) </p>\n{\n    +Principal principal = reqContext.principal();\n    +String user = (principal != null) ? principal.getName() : \"unknown\";\n    +throw new AuthorizationException(\"DRPC request '\" + operation + \"' for '\" + user + \"' user is not authorized\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void checkAuthorization(IAuthorizer aclHandler, Map mapping, String operation) throws AuthorizationException </p>\n{\n    +checkAuthorization(aclHandler, mapping, operation, ReqContext.context());\n    +    }\n<p>    +<br/>\n    +    // TO be replaced by Common.mkAuthorizationHandler<br/>\n    +    private IAuthorizer mkAuthorizationHandler(String klassname, Map conf) {<br/>\n    +IAuthorizer authorizer = null;<br/>\n    +Class aznClass = null;<br/>\n    +if (StringUtils.isNotBlank(klassname)) {<br/>\n    +    try {<br/>\n    +aznClass = Class.forName(klassname);<br/>\n    +authorizer = (IAuthorizer) aznClass.newInstance();<br/>\n    +if (authorizer != null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is still an issue to be fixed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652590/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652594","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652594","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652594,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI1OTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:47:01Z","updated_at":"2025-01-24T14:23:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54632535\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54632535</a></p>\n\n<p>    &#8212; Diff: storm-core/test/clj/org/apache/storm/security/auth/auth_test.clj &#8212;<br/>\n    @@ -27,6 +27,8 @@<br/>\n       (:import <span class=\"error\">&#91;javax.security.auth Subject&#93;</span>)<br/>\n       (:import <span class=\"error\">&#91;java.net InetAddress&#93;</span>)<br/>\n       (:import <span class=\"error\">&#91;org.apache.storm Config&#93;</span>)<br/>\n    +  (:import <span class=\"error\">&#91;org.mockito Mockito&#93;</span>)<br/>\n    +  (:import <span class=\"error\">&#91;org.mockito.exceptions.base MockitoAssertionError&#93;</span>)<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Are these needed?  If not please revert.  If so how did this work before?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652594/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190894846","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-190894846","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":190894846,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDg5NDg0Ng==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:47:28Z","updated_at":"2016-03-01T20:47:28Z","author_association":"CONTRIBUTOR","body":"Done with another pass\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190894846/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652604","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652604","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652604,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2MDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T20:47:29Z","updated_at":"2025-01-24T14:23:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-190894846\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-190894846</a></p>\n\n<p>    Done with another pass</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652604/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190905862","html_url":"https://github.com/apache/storm/pull/1107#issuecomment-190905862","issue_url":"https://api.github.com/repos/apache/storm/issues/1107","id":190905862,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDkwNTg2Mg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T21:08:33Z","updated_at":"2016-03-01T21:08:33Z","author_association":"CONTRIBUTOR","body":"@srdo If you want to get the changes into 1.x keep this around.  master and 1.x have diverged enough that it is not a simple sherry-pick any more for this part of the code.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190905862/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872266","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872266","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872266,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyNjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T21:08:34Z","updated_at":"2025-01-24T16:02:09Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1107#issuecomment-190905862\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1107#issuecomment-190905862</a></p>\n\n<p>    @srdo If you want to get the changes into 1.x keep this around.  master and 1.x have diverged enough that it is not a simple sherry-pick any more for this part of the code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872266/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700718","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700718","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700718,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:30:49Z","updated_at":"2025-01-24T14:44:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user kishorvpatil opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1469\" title=\"Unable to deploy large topologies on apache storm\" class=\"issue-link\" data-issue-key=\"STORM-1469\"><del>STORM-1469</del></a> Adding Plain Sasl Transport Plugin</p>\n\n<p>    Since `org.apache.storm.security.auth.SimpleTransportPlugin` creates `TFramedTransport` with maxBufferSize, but that conflicts with serialized topology of size exceeded 16MB - default `THsHaServer` allowed max buffer size. So the better option is to implement `PlainSaslTransportPlugin` which avoids using any default values for max-buffer-size. </p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/kishorvpatil/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/kishorvpatil/incubator-storm</a> storm1469</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1173</p>\n\n<hr />\n<p>commit b1e4c94269dbcf2ba01aee89e468c744887c53de<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2016-02-29T20:44:52Z</p>\n\n<p>    Adding Plain Sasl Transport Plugin</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700718/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700724","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700724","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700724,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3MjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:47:48Z","updated_at":"2025-01-24T14:44:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54649628\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54649628</a></p>\n\n<p>    &#8212; Diff: conf/defaults.yaml &#8212;<br/>\n    @@ -39,7 +39,7 @@ storm.exhibitor.port: 8080<br/>\n     storm.exhibitor.poll.uripath: \"/exhibitor/v1/cluster/list\"<br/>\n     storm.cluster.mode: \"distributed\" # can be distributed or local<br/>\n     storm.local.mode.zmq: false<br/>\n    -storm.thrift.transport: \"org.apache.storm.security.auth.SimpleTransportPlugin\"<br/>\n    +storm.thrift.transport: \"org.apache.storm.security.auth.plain.PlainSaslTransportPlugin\"<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    What is the rationale for the `.plain` portion of this config? The class already says it is Plain.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700724/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700729","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700729","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700729,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3Mjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:50:14Z","updated_at":"2025-01-24T14:44:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54649974\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54649974</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,80 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +/**<br/>\n    + *  client side callback handler.<br/>\n    + */<br/>\n    +public class PlainClientCallbackHandler implements CallbackHandler {<br/>\n    +    private static final String USERNAME = \"username\";<br/>\n    +    private static final String PASSWORD = \"password\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainClientCallbackHandler.class);<br/>\n    +    private String _username = \"username\";<br/>\n    +    private String _password = \"password\";<br/>\n    +<br/>\n    +    /**<br/>\n    +     * This method is invoked by SASL for authentication challenges<br/>\n    +     * @param callbacks a collection of challenge callbacks <br/>\n    +     */<br/>\n    +    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {<br/>\n    +for (Callback c : callbacks) {<br/>\n    +    if (c instanceof NameCallback) </p>\n{\n    +LOG.debug(\"name callback\");\n    +NameCallback nc = (NameCallback) c;\n    +nc.setName(_username);\n    +    }\n<p> else if (c instanceof PasswordCallback) {<br/>\n    +LOG.debug(\"password callback\");<br/>\n    +PasswordCallback pc = (PasswordCallback)c;<br/>\n    +if (_password != null) </p>\n{\n    +    pc.setPassword(_password.toCharArray());\n    +}\n<p> <br/>\n    +    } else if (c instanceof AuthorizeCallback) {<br/>\n    +LOG.debug(\"authorization callback\");<br/>\n    +AuthorizeCallback ac = (AuthorizeCallback) c;<br/>\n    +String authid = ac.getAuthenticationID();<br/>\n    +String authzid = ac.getAuthorizationID();<br/>\n    +if (authid.equals(authzid)) </p>\n{\n    +    ac.setAuthorized(true);\n    +}\n<p> else </p>\n{\n    +    ac.setAuthorized(false);\n    +}\n<p>    +if (ac.isAuthorized()) </p>\n{\n    +    ac.setAuthorizedID(authzid);\n    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    We can just `setAuthorizedID` above when we `setAuthorized`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700729/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700735","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700735","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700735,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:50:53Z","updated_at":"2025-01-24T14:44:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54650057\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54650057</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,80 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +/**<br/>\n    + *  client side callback handler.<br/>\n    + */<br/>\n    +public class PlainClientCallbackHandler implements CallbackHandler {<br/>\n    +    private static final String USERNAME = \"username\";<br/>\n    +    private static final String PASSWORD = \"password\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainClientCallbackHandler.class);<br/>\n    +    private String _username = \"username\";<br/>\n    +    private String _password = \"password\";<br/>\n    +<br/>\n    +    /**<br/>\n    +     * This method is invoked by SASL for authentication challenges<br/>\n    +     * @param callbacks a collection of challenge callbacks <br/>\n    +     */<br/>\n    +    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {<br/>\n    +for (Callback c : callbacks) {<br/>\n    +    if (c instanceof NameCallback) </p>\n{\n    +LOG.debug(\"name callback\");\n    +NameCallback nc = (NameCallback) c;\n    +nc.setName(_username);\n    +    }\n<p> else if (c instanceof PasswordCallback) {<br/>\n    +LOG.debug(\"password callback\");<br/>\n    +PasswordCallback pc = (PasswordCallback)c;<br/>\n    +if (_password != null) </p>\n{\n    +    pc.setPassword(_password.toCharArray());\n    +}\n<p> <br/>\n    +    } else if (c instanceof AuthorizeCallback) {<br/>\n    +LOG.debug(\"authorization callback\");<br/>\n    +AuthorizeCallback ac = (AuthorizeCallback) c;<br/>\n    +String authid = ac.getAuthenticationID();<br/>\n    +String authzid = ac.getAuthorizationID();<br/>\n    +if (authid.equals(authzid)) </p>\n{\n    +    ac.setAuthorized(true);\n    +}\n<p> else </p>\n{\n    +    ac.setAuthorized(false);\n    +}\n<p>    +if (ac.isAuthorized()) </p>\n{\n    +    ac.setAuthorizedID(authzid);\n    +}\n<p>    +    } else if (c instanceof RealmCallback) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Minor: there is no LOG.debug here as with the other callbacks. Is that intentional?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700735/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700742","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700742","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700742,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3NDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:51:41Z","updated_at":"2025-01-24T14:44:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54650134\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54650134</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,80 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +/**<br/>\n    + *  client side callback handler.<br/>\n    + */<br/>\n    +public class PlainClientCallbackHandler implements CallbackHandler {<br/>\n    +    private static final String USERNAME = \"username\";<br/>\n    +    private static final String PASSWORD = \"password\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainClientCallbackHandler.class);<br/>\n    +    private String _username = \"username\";<br/>\n    +    private String _password = \"password\";<br/>\n    +<br/>\n    +    /**<br/>\n    +     * This method is invoked by SASL for authentication challenges<br/>\n    +     * @param callbacks a collection of challenge callbacks <br/>\n    +     */<br/>\n    +    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {<br/>\n    +for (Callback c : callbacks) {<br/>\n    +    if (c instanceof NameCallback) </p>\n{\n    +LOG.debug(\"name callback\");\n    +NameCallback nc = (NameCallback) c;\n    +nc.setName(_username);\n    +    }\n<p> else if (c instanceof PasswordCallback) {<br/>\n    +LOG.debug(\"password callback\");<br/>\n    +PasswordCallback pc = (PasswordCallback)c;<br/>\n    +if (_password != null) </p>\n{\n    +    pc.setPassword(_password.toCharArray());\n    +}\n<p> <br/>\n    +    } else if (c instanceof AuthorizeCallback) {<br/>\n    +LOG.debug(\"authorization callback\");<br/>\n    +AuthorizeCallback ac = (AuthorizeCallback) c;<br/>\n    +String authid = ac.getAuthenticationID();<br/>\n    +String authzid = ac.getAuthorizationID();<br/>\n    +if (authid.equals(authzid)) </p>\n{\n    +    ac.setAuthorized(true);\n    +}\n<p> else </p>\n{\n    +    ac.setAuthorized(false);\n    +}\n<p>    +if (ac.isAuthorized()) </p>\n{\n    +    ac.setAuthorizedID(authzid);\n    +}\n<p>    +    } else if (c instanceof RealmCallback) {<br/>\n    +RealmCallback rc = (RealmCallback) c;<br/>\n    +((RealmCallback) c).setText(rc.getDefaultText());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we not reuse `rc` instead of casting twice?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700742/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872270","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872270","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872270,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyNzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:55:38Z","updated_at":"2025-01-24T16:02:09Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user srdo opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1549\" title=\"Add support for extending tuple tree timeout\" class=\"issue-link\" data-issue-key=\"STORM-1549\"><del>STORM-1549</del></a>: <span class=\"error\">&#91;master&#93;</span> Add support for resetting tuple timeout from bolts via the OutputCollector</p>\n\n<p>    This is a port of <a href=\"https://github.com/apache/storm/pull/1107\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1107</a> to master.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/srdo/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/srdo/storm</a> master</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1174</p>\n\n<hr />\n<p>commit d36be51a39abb03ac47e01eb2e1fda31f9f9110b<br/>\nAuthor: Stig Rohde Døssing <generalbas.srd@gmail.com><br/>\nDate:   2016-02-14T01:39:42Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1549\" title=\"Add support for extending tuple tree timeout\" class=\"issue-link\" data-issue-key=\"STORM-1549\"><del>STORM-1549</del></a>: Add support for resetting tuple timeout from bolts via the OutputCollector</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700747","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700747","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700747,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:57:28Z","updated_at":"2025-01-24T14:44:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54650921\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54650921</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,80 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +/**<br/>\n    + *  client side callback handler.<br/>\n    + */<br/>\n    +public class PlainClientCallbackHandler implements CallbackHandler {<br/>\n    +    private static final String USERNAME = \"username\";<br/>\n    +    private static final String PASSWORD = \"password\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainClientCallbackHandler.class);<br/>\n    +    private String _username = \"username\";<br/>\n    +    private String _password = \"password\";<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Let's get rid of the private members and just use the constants already defined above.</p>\n\n<p>    We also want to reference these hard-coded user/pass in the other classes.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700747/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190949609","html_url":"https://github.com/apache/storm/pull/1107#issuecomment-190949609","issue_url":"https://api.github.com/repos/apache/storm/issues/1107","id":190949609,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDk0OTYwOQ==","user":{"login":"srdo","id":4324588,"node_id":"MDQ6VXNlcjQzMjQ1ODg=","avatar_url":"https://avatars.githubusercontent.com/u/4324588?v=4","gravatar_id":"","url":"https://api.github.com/users/srdo","html_url":"https://github.com/srdo","followers_url":"https://api.github.com/users/srdo/followers","following_url":"https://api.github.com/users/srdo/following{/other_user}","gists_url":"https://api.github.com/users/srdo/gists{/gist_id}","starred_url":"https://api.github.com/users/srdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/srdo/subscriptions","organizations_url":"https://api.github.com/users/srdo/orgs","repos_url":"https://api.github.com/users/srdo/repos","events_url":"https://api.github.com/users/srdo/events{/privacy}","received_events_url":"https://api.github.com/users/srdo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:57:45Z","updated_at":"2016-03-01T22:57:45Z","author_association":"CONTRIBUTOR","body":"@revans2 Sure, I'll leave this open then. Here's the master version of this PR https://github.com/apache/storm/pull/1174\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190949609/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872275","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872275","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872275,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyNzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:57:46Z","updated_at":"2025-01-24T16:02:09Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user srdo commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1107#issuecomment-190949609\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1107#issuecomment-190949609</a></p>\n\n<p>    @revans2 Sure, I'll leave this open then. Here's the master version of this PR <a href=\"https://github.com/apache/storm/pull/1174\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700754","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700754","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700754,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:58:48Z","updated_at":"2025-01-24T14:44:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54651094\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54651094</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java &#8212;<br/>\n    @@ -0,0 +1,80 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.AuthUtils;<br/>\n    +import org.apache.storm.security.auth.SaslTransportPlugin;<br/>\n    +import org.apache.storm.utils.ExtendedThreadPoolExecutor;<br/>\n    +import org.apache.thrift.TProcessor;<br/>\n    +import org.apache.thrift.protocol.TBinaryProtocol;<br/>\n    +import org.apache.thrift.server.TServer;<br/>\n    +import org.apache.thrift.server.TThreadPoolServer;<br/>\n    +import org.apache.thrift.transport.TSaslClientTransport;<br/>\n    +import org.apache.thrift.transport.TSaslServerTransport;<br/>\n    +import org.apache.thrift.transport.TServerSocket;<br/>\n    +import org.apache.thrift.transport.TTransport;<br/>\n    +import org.apache.thrift.transport.TTransportException;<br/>\n    +import org.apache.thrift.transport.TTransportFactory;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import java.io.IOException;<br/>\n    +import java.security.Security;<br/>\n    +import java.util.concurrent.ArrayBlockingQueue;<br/>\n    +import java.util.concurrent.BlockingQueue;<br/>\n    +import java.util.concurrent.SynchronousQueue;<br/>\n    +import java.util.concurrent.ThreadPoolExecutor;<br/>\n    +import java.util.concurrent.TimeUnit;<br/>\n    +<br/>\n    +public class PlainSaslTransportPlugin extends SaslTransportPlugin {<br/>\n    +    public static final String PLAIN = \"PLAIN\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainSaslTransportPlugin.class);<br/>\n    +<br/>\n    +    @Override<br/>\n    +    protected TTransportFactory getServerTransportFactory() throws IOException </p>\n{\n    +//create an authentication callback handler\n    +CallbackHandler serer_callback_handler = new PlainServerCallbackHandler();\n    +Security.addProvider(new SaslPlainServer.SecurityProvider());\n    +//create a transport factory that will invoke our auth callback for digest\n    +TSaslServerTransport.Factory factory = new TSaslServerTransport.Factory();\n    +factory.addServerDefinition(PLAIN, AuthUtils.SERVICE, \"localhost\", null, serer_callback_handler);\n    +\n    +LOG.info(\"SASL PLAIN transport factory will be used\");\n    +return factory;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public TTransport connect(TTransport transport, String serverHost, String asUser) throws IOException, TTransportException </p>\n{\n    +PlainClientCallbackHandler client_callback_handler = new PlainClientCallbackHandler();\n    +TSaslClientTransport wrapper_transport = new TSaslClientTransport(PLAIN,\n    +    null,\n    +    AuthUtils.SERVICE,\n    +    serverHost,\n    +    null,\n    +    client_callback_handler,\n    +    transport);\n    +\n    +wrapper_transport.open();\n    +LOG.debug(\"SASL PLAIN client transport has been established\");\n    +\n    +return wrapper_transport;\n    +\n    +    }\n<p>    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    nit: blank lines</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700754/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700763","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700763","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700763,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3NjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:59:25Z","updated_at":"2025-01-24T14:44:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54651160\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54651160</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,108 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.ReqContext;<br/>\n    +import org.apache.storm.security.auth.SaslTransportPlugin;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +<br/>\n    +/**<br/>\n    + * SASL server side callback handler<br/>\n    + */<br/>\n    +public class PlainServerCallbackHandler implements CallbackHandler {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainServerCallbackHandler.class);<br/>\n    +    private static final String SYSPROP_SUPER_PASSWORD = \"storm.SASLAuthenticationProvider.superPassword\";<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Do we need a superuser password?  I thought this was all hard-coded to use constants?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700763/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700768","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700768","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700768,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T22:59:50Z","updated_at":"2025-01-24T14:44:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54651204\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54651204</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,108 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.ReqContext;<br/>\n    +import org.apache.storm.security.auth.SaslTransportPlugin;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +<br/>\n    +/**<br/>\n    + * SASL server side callback handler<br/>\n    + */<br/>\n    +public class PlainServerCallbackHandler implements CallbackHandler {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainServerCallbackHandler.class);<br/>\n    +    private static final String SYSPROP_SUPER_PASSWORD = \"storm.SASLAuthenticationProvider.superPassword\";<br/>\n    +<br/>\n    +    private String userName=\"username\";<br/>\n    +    private final Map<String,String> credentials = new HashMap<>();<br/>\n    +<br/>\n    +    public PlainServerCallbackHandler() throws IOException </p>\n{\n    +credentials.put(\"username\", \"password\");\n    +    }\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    Here we probably want to reference constants.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700768/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700771","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700771","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700771,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:00:45Z","updated_at":"2025-01-24T14:44:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54651338\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54651338</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,108 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.ReqContext;<br/>\n    +import org.apache.storm.security.auth.SaslTransportPlugin;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +<br/>\n    +/**<br/>\n    + * SASL server side callback handler<br/>\n    + */<br/>\n    +public class PlainServerCallbackHandler implements CallbackHandler {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainServerCallbackHandler.class);<br/>\n    +    private static final String SYSPROP_SUPER_PASSWORD = \"storm.SASLAuthenticationProvider.superPassword\";<br/>\n    +<br/>\n    +    private String userName=\"username\";<br/>\n    +    private final Map<String,String> credentials = new HashMap<>();<br/>\n    +<br/>\n    +    public PlainServerCallbackHandler() throws IOException </p>\n{\n    +credentials.put(\"username\", \"password\");\n    +    }\n<p>    +<br/>\n    +    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {<br/>\n    +for (Callback callback : callbacks) {<br/>\n    +    if (callback instanceof NameCallback) </p>\n{\n    +handleNameCallback((NameCallback) callback);\n    +    }\n<p> else if (callback instanceof PasswordCallback) </p>\n{\n    +handlePasswordCallback((PasswordCallback) callback);\n    +    }\n<p> else if (callback instanceof RealmCallback) </p>\n{\n    +handleRealmCallback((RealmCallback) callback);\n    +    }\n<p> else if (callback instanceof AuthorizeCallback) </p>\n{\n    +handleAuthorizeCallback((AuthorizeCallback) callback);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void handleNameCallback(NameCallback nc) </p>\n{\n    +LOG.debug(\"handleNameCallback\");\n    +userName = nc.getDefaultName();\n    +nc.setName(nc.getDefaultName());\n    +    }\n<p>    +<br/>\n    +    private void handlePasswordCallback(PasswordCallback pc) {<br/>\n    +LOG.debug(\"handlePasswordCallback\");<br/>\n    +if (\"super\".equals(this.userName) && System.getProperty(SYSPROP_SUPER_PASSWORD) != null) </p>\n{\n    +    // superuser: use Java system property for password, if available.\n    +    pc.setPassword(System.getProperty(SYSPROP_SUPER_PASSWORD).toCharArray());\n    +}\n<p> else if (credentials.containsKey(userName) ) </p>\n{\n    +    pc.setPassword(credentials.get(userName).toCharArray());\n    +}\n<p> else </p>\n{\n    +    LOG.warn(\"No password found for user: \" + userName);\n    +}\n<p>    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Same question here.  Not sure we want the concept of a superuser.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700771/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700773","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700773","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700773,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3NzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:01:25Z","updated_at":"2025-01-24T14:44:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54651434\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54651434</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,108 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.ReqContext;<br/>\n    +import org.apache.storm.security.auth.SaslTransportPlugin;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +<br/>\n    +/**<br/>\n    + * SASL server side callback handler<br/>\n    + */<br/>\n    +public class PlainServerCallbackHandler implements CallbackHandler {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainServerCallbackHandler.class);<br/>\n    +    private static final String SYSPROP_SUPER_PASSWORD = \"storm.SASLAuthenticationProvider.superPassword\";<br/>\n    +<br/>\n    +    private String userName=\"username\";<br/>\n    +    private final Map<String,String> credentials = new HashMap<>();<br/>\n    +<br/>\n    +    public PlainServerCallbackHandler() throws IOException </p>\n{\n    +credentials.put(\"username\", \"password\");\n    +    }\n<p>    +<br/>\n    +    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {<br/>\n    +for (Callback callback : callbacks) {<br/>\n    +    if (callback instanceof NameCallback) </p>\n{\n    +handleNameCallback((NameCallback) callback);\n    +    }\n<p> else if (callback instanceof PasswordCallback) </p>\n{\n    +handlePasswordCallback((PasswordCallback) callback);\n    +    }\n<p> else if (callback instanceof RealmCallback) </p>\n{\n    +handleRealmCallback((RealmCallback) callback);\n    +    }\n<p> else if (callback instanceof AuthorizeCallback) </p>\n{\n    +handleAuthorizeCallback((AuthorizeCallback) callback);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void handleNameCallback(NameCallback nc) </p>\n{\n    +LOG.debug(\"handleNameCallback\");\n    +userName = nc.getDefaultName();\n    +nc.setName(nc.getDefaultName());\n    +    }\n<p>    +<br/>\n    +    private void handlePasswordCallback(PasswordCallback pc) {<br/>\n    +LOG.debug(\"handlePasswordCallback\");<br/>\n    +if (\"super\".equals(this.userName) && System.getProperty(SYSPROP_SUPER_PASSWORD) != null) </p>\n{\n    +    // superuser: use Java system property for password, if available.\n    +    pc.setPassword(System.getProperty(SYSPROP_SUPER_PASSWORD).toCharArray());\n    +}\n<p> else if (credentials.containsKey(userName) ) </p>\n{\n    +    pc.setPassword(credentials.get(userName).toCharArray());\n    +}\n<p> else </p>\n{\n    +    LOG.warn(\"No password found for user: \" + userName);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private void handleRealmCallback(RealmCallback rc) </p>\n{\n    +LOG.debug(\"handleRealmCallback: \"+ rc.getDefaultText());\n    +rc.setText(rc.getDefaultText());\n    +    }\n<p>    +<br/>\n    +    private void handleAuthorizeCallback(AuthorizeCallback ac) {<br/>\n    +String authenticationID = ac.getAuthenticationID();<br/>\n    +LOG.info(\"Successfully authenticated client: authenticationID = \" + authenticationID + \" authorizationID = \" + ac.getAuthorizationID());<br/>\n    +<br/>\n    +//if authorizationId is not set, set it to authenticationId.<br/>\n    +if(ac.getAuthorizationID() == null) </p>\n{\n    +    ac.setAuthorizedID(authenticationID);\n    +}\n<p>    +<br/>\n    +//When authNid and authZid are not equal , authNId is attempting to impersonate authZid, We<br/>\n    +//add the authNid as the real user in reqContext's subject which will be used during authorization.<br/>\n    +if(!authenticationID.equals(ac.getAuthorizationID())) {<br/>\n    +    LOG.info(\"Impersonation attempt  authenticationID = \" + ac.getAuthenticationID() + \" authorizationID = \" + ac.getAuthorizationID());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    minor: use format strings `{}` like in other log statements.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700773/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700777","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700777","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700777,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3Nzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:01:51Z","updated_at":"2025-01-24T14:44:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54651499\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54651499</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/SaslPlainServer.java &#8212;<br/>\n    @@ -0,0 +1,154 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.security.Provider;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import javax.security.auth.callback.*;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I would be nice to expand all imports.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700777/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700784","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700784","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700784,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:02:11Z","updated_at":"2025-01-24T14:44:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54651550\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54651550</a></p>\n\n<p>    &#8212; Diff: conf/defaults.yaml &#8212;<br/>\n    @@ -39,7 +39,7 @@ storm.exhibitor.port: 8080<br/>\n     storm.exhibitor.poll.uripath: \"/exhibitor/v1/cluster/list\"<br/>\n     storm.cluster.mode: \"distributed\" # can be distributed or local<br/>\n     storm.local.mode.zmq: false<br/>\n    -storm.thrift.transport: \"org.apache.storm.security.auth.SimpleTransportPlugin\"<br/>\n    +storm.thrift.transport: \"org.apache.storm.security.auth.plain.PlainSaslTransportPlugin\"<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Under `org.apache.storm.security.auth` package we have sub-package by mechanism e.g. `digest`, `kerberos`. Hence the package name `plain`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700784/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700790","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700790","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700790,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3OTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:03:09Z","updated_at":"2025-01-24T14:44:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54651672\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54651672</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/SaslPlainServer.java &#8212;<br/>\n    @@ -0,0 +1,154 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.security.Provider;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import javax.security.auth.callback.*;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.Sasl;<br/>\n    +import javax.security.sasl.SaslException;<br/>\n    +import javax.security.sasl.SaslServer;<br/>\n    +import javax.security.sasl.SaslServerFactory;<br/>\n    +<br/>\n    +public class SaslPlainServer implements SaslServer {<br/>\n    +  @SuppressWarnings(\"serial\")<br/>\n    +  public static class SecurityProvider extends Provider {<br/>\n    +    public SecurityProvider() {<br/>\n    +      super(\"SaslPlainServer\", 1.0, \"SASL PLAIN Authentication Server\");<br/>\n    +      put(\"SaslServerFactory.PLAIN\",<br/>\n    +  SaslPlainServerFactory.class.getName());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Just `\"SaslPlainServerFactory\"` ?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700790/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190954323","html_url":"https://github.com/apache/storm/pull/1173#issuecomment-190954323","issue_url":"https://api.github.com/repos/apache/storm/issues/1173","id":190954323,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDk1NDMyMw==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:06:58Z","updated_at":"2016-03-01T23:06:58Z","author_association":"NONE","body":"@kishorvpatil Some of this looks like borrowed code that is not tailored specifically to storm. Is that the case?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190954323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700794","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700794","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700794,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA3OTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:06:59Z","updated_at":"2025-01-24T14:44:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#issuecomment-190954323\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#issuecomment-190954323</a></p>\n\n<p>    @kishorvpatil Some of this looks like borrowed code that is not tailored specifically to storm. Is that the case?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700794/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190969675","html_url":"https://github.com/apache/storm/pull/1173#issuecomment-190969675","issue_url":"https://api.github.com/repos/apache/storm/issues/1173","id":190969675,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDk2OTY3NQ==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:39:28Z","updated_at":"2016-03-01T23:39:28Z","author_association":"CONTRIBUTOR","body":"@d2r That's right. The `SaslPlainServer` is implementation borrowed from [hadoop](https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslPlainServer.java). And `CallBackHandler` implementations are mostly clones from digest package with minor changes.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190969675/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700800","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700800","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700800,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4MDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-01T23:39:29Z","updated_at":"2025-01-24T14:44:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#issuecomment-190969675\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#issuecomment-190969675</a></p>\n\n<p>    @d2r That's right. The `SaslPlainServer` is implementation borrowed from <span class=\"error\">&#91;hadoop&#93;</span>(<a href=\"https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslPlainServer.java\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslPlainServer.java</a>). And `CallBackHandler` implementations are mostly clones from digest package with minor changes.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700800/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/190989626","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-190989626","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":190989626,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDk4OTYyNg==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T00:34:22Z","updated_at":"2016-03-02T00:36:16Z","author_association":"CONTRIBUTOR","body":"@revans2 I have made enable.auto.commit default to false. Please see method  KafkaSpoutConfig#getKafkaProps(..)\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/190989626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870298","html_url":"https://github.com/apache/storm/issues/5372#issuecomment-2612870298","issue_url":"https://api.github.com/repos/apache/storm/issues/5372","id":2612870298,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzAyOTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T00:51:33Z","updated_at":"2025-01-24T16:01:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=posco\">posco</a>:</i>\n<p>Any news here folks?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870298/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191002473","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-191002473","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":191002473,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTAwMjQ3Mw==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T01:04:51Z","updated_at":"2016-03-02T01:04:51Z","author_association":"CONTRIBUTOR","body":"@knusbaum you must either create a uber jar or put kafka-clients/0.9.0.0/kafka-clients-0.9.0.0.jar under extlib\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191002473/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652607","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652607","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652607,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T01:07:05Z","updated_at":"2025-01-24T14:23:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r54664622\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r54664622</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,390 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import com.sun.net.httpserver.HttpsServer;<br/>\n    +import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, Shutdownable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    // To be removed after porting drpc.clj<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, Semaphore> idtoSem = new ConcurrentHashMap<String, Semaphore>();<br/>\n    +    private ConcurrentHashMap<String, Object> idtoResult = new ConcurrentHashMap<String, Object>();<br/>\n    +    private ConcurrentHashMap<String, Integer> idtoStart = new ConcurrentHashMap<String, Integer>();<br/>\n    +    private ConcurrentHashMap<String, String> idtoFunction = new ConcurrentHashMap<String, String>();<br/>\n    +    private ConcurrentHashMap<String, DRPCRequest> idtoRequest = new ConcurrentHashMap<String, DRPCRequest>();<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private final Meter meterHttpRequests = new MetricRegistry().meter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final Meter meterExecuteCalls = new MetricRegistry().meter(\"drpc:num-execute-calls\");<br/>\n    +    private final Meter meterResultCalls = new MetricRegistry().meter(\"drpc:num-result-calls\");<br/>\n    +    private final Meter meterFailRequestCalls = new MetricRegistry().meter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final Meter meterFetchRequestCalls = new MetricRegistry().meter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final Meter meterShutdownCalls = new MetricRegistry().meter(\"drpc:num-shutdown-calls\");<br/>\n    +    <br/>\n    +    public DrpcServer() </p>\n{\n    +\n    +    }\n<p>    +<br/>\n    +    public IHttpCredentialsPlugin getHttpCredsHandler() </p>\n{\n    +return httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public void setHttpCredsHandler(IHttpCredentialsPlugin httpCredsHandler) </p>\n{\n    +this.httpCredsHandler = httpCredsHandler;\n    +    }\n<p>    +<br/>\n    +    public Servlet getHttpServlet() </p>\n{\n    +return httpServlet;\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +<br/>\n    +<br/>\n    +    private ThriftServer initHandlerServer(Map conf, final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(Map conf, final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initServer() throws Exception {<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +handlerServer = initHandlerServer(conf, this);<br/>\n    +invokeServer = initInvokeServer(conf, this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() {<br/>\n    +if (handlerServer != null) </p>\n{\n    +    handlerServer.stop();\n    +}\n<p> else {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    sorry. I make mistake</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652607/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191021959","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-191021959","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":191021959,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTAyMTk1OQ==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T02:29:58Z","updated_at":"2016-03-02T02:29:58Z","author_association":"CONTRIBUTOR","body":"@revans2  Thank you.I won't wait updating the metric codes util the #1171  about the metrics is merged master.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191021959/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652611","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652611","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652611,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2MTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T02:29:59Z","updated_at":"2025-01-24T14:23:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-191021959\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-191021959</a></p>\n\n<p>    @revans2  Thank you.I won't wait updating the metric codes util the #1171  about the metrics is merged master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191034221","html_url":"https://github.com/apache/storm/pull/1161#issuecomment-191034221","issue_url":"https://api.github.com/repos/apache/storm/issues/1161","id":191034221,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTAzNDIyMQ==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T03:16:07Z","updated_at":"2016-03-02T03:16:07Z","author_association":"NONE","body":"@abhishekagarwal87 changed according to your comments\n@revans2 added logs to .gitignore and maven-antrun-plugin to delete logs directory after tests\nplease help review again\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191034221/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191044704","html_url":"https://github.com/apache/storm/pull/1171#issuecomment-191044704","issue_url":"https://api.github.com/repos/apache/storm/issues/1171","id":191044704,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTA0NDcwNA==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T03:58:55Z","updated_at":"2016-03-02T03:58:55Z","author_association":"NONE","body":"@revans2 changed according to your comments, also changed all the other files. start-metrics-reporters in common.clj is changed to java too. Please help review again.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191044704/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191083880","html_url":"https://github.com/apache/storm/pull/1173#issuecomment-191083880","issue_url":"https://api.github.com/repos/apache/storm/issues/1173","id":191083880,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTA4Mzg4MA==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:15:11Z","updated_at":"2016-03-02T06:15:11Z","author_association":"CONTRIBUTOR","body":"@d2r i have tried to address all your comments, including refactoring two abstract classed `AbstractSaslClientCallbackHandler.java` and `AbstractSaslServerCallbackHandler.java` to place common methods for DIGEST and PLAIN in one place.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191083880/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700807","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700807","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700807,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:15:13Z","updated_at":"2025-01-24T14:44:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#issuecomment-191083880\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#issuecomment-191083880</a></p>\n\n<p>    @d2r i have tried to address all your comments, including refactoring two abstract classed `AbstractSaslClientCallbackHandler.java` and `AbstractSaslServerCallbackHandler.java` to place common methods for DIGEST and PLAIN in one place.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700807/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700813","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700813","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700813,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4MTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:28:07Z","updated_at":"2025-01-24T14:44:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700813/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700817","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700817","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700817,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:28:09Z","updated_at":"2025-01-24T14:44:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user kishorvpatil reopened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1469\" title=\"Unable to deploy large topologies on apache storm\" class=\"issue-link\" data-issue-key=\"STORM-1469\"><del>STORM-1469</del></a> Adding Plain Sasl Transport Plugin</p>\n\n<p>    Since `org.apache.storm.security.auth.SimpleTransportPlugin` creates `TFramedTransport` with maxBufferSize, but that conflicts with serialized topology of size exceeded 16MB - default `THsHaServer` allowed max buffer size. So the better option is to implement `PlainSaslTransportPlugin` which avoids using any default values for max-buffer-size. </p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/kishorvpatil/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/kishorvpatil/incubator-storm</a> storm1469</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1173</p>\n\n<hr />\n<p>commit b1e4c94269dbcf2ba01aee89e468c744887c53de<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2016-02-29T20:44:52Z</p>\n\n<p>    Adding Plain Sasl Transport Plugin</p>\n\n<p>commit cccb9766eb6b01477b44cd35e836997811464632<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2016-03-02T06:12:57Z</p>\n\n<p>    Refactoring SaslServerCallbackHandler and SaslClientCallbackHandler</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700817/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872276","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872276","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872276,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyNzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:40:43Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#discussion_r54685047\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#discussion_r54685047</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -100,6 +101,8 @@ public void execute(Tuple input) {<br/>\n }<br/>\n curr.failed = true;<br/>\n pending.put(id, curr);<br/>\n    +} else if(ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    minor space around if</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872276/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872279","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872279","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872279,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyNzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:44:11Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#discussion_r54685209\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#discussion_r54685209</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -100,6 +101,8 @@ public void execute(Tuple input) {<br/>\n }<br/>\n curr.failed = true;<br/>\n pending.put(id, curr);<br/>\n    +} else if(ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This introduces a NPE scenario because earlier in all the if blocks, if curr was null, it was getting initialized. Now curr.spoutTask will throw NPE if reset timeout comes before init or after init times out. This can be avoided by adding below just before `pending.put(id, curr)`<br/>\n    ```<br/>\n    if (curr == null) </p>\n{\n curr = new AckObject();\n    }\n<p>    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872279/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191094570","html_url":"https://github.com/apache/storm/pull/1174#issuecomment-191094570","issue_url":"https://api.github.com/repos/apache/storm/issues/1174","id":191094570,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTA5NDU3MA==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:46:07Z","updated_at":"2016-03-02T06:46:07Z","author_association":"CONTRIBUTOR","body":"Looks good to me after the possible NPE is fixed. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191094570/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872283","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872283","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872283,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:46:08Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#issuecomment-191094570\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#issuecomment-191094570</a></p>\n\n<p>    Looks good to me after the possible NPE is fixed. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872283/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191095413","html_url":"https://github.com/apache/storm/pull/1160#issuecomment-191095413","issue_url":"https://api.github.com/repos/apache/storm/issues/1160","id":191095413,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTA5NTQxMw==","user":{"login":"abellina","id":1901059,"node_id":"MDQ6VXNlcjE5MDEwNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1901059?v=4","gravatar_id":"","url":"https://api.github.com/users/abellina","html_url":"https://github.com/abellina","followers_url":"https://api.github.com/users/abellina/followers","following_url":"https://api.github.com/users/abellina/following{/other_user}","gists_url":"https://api.github.com/users/abellina/gists{/gist_id}","starred_url":"https://api.github.com/users/abellina/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abellina/subscriptions","organizations_url":"https://api.github.com/users/abellina/orgs","repos_url":"https://api.github.com/users/abellina/repos","events_url":"https://api.github.com/users/abellina/events{/privacy}","received_events_url":"https://api.github.com/users/abellina/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:48:19Z","updated_at":"2016-03-02T06:48:19Z","author_association":"CONTRIBUTOR","body":"@revans2 sounds good, addressed. Here's the JIRA for the NPE issue: https://issues.apache.org/jira/browse/STORM-1594\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191095413/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644097","html_url":"https://github.com/apache/storm/issues/5065#issuecomment-2612644097","issue_url":"https://api.github.com/repos/apache/storm/issues/5065","id":2612644097,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQwOTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:48:21Z","updated_at":"2025-01-24T14:19:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abellina commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1160#issuecomment-191095413\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1160#issuecomment-191095413</a></p>\n\n<p>    @revans2 sounds good, addressed. Here's the JIRA for the NPE issue: <a href=\"https://issues.apache.org/jira/browse/STORM-1594\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1594</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191096651","html_url":"https://github.com/apache/storm/pull/1161#issuecomment-191096651","issue_url":"https://api.github.com/repos/apache/storm/issues/1161","id":191096651,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTA5NjY1MQ==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T06:51:06Z","updated_at":"2016-03-02T06:51:06Z","author_association":"CONTRIBUTOR","body":"Thanks @unsleepy22 +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191096651/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191100334","html_url":"https://github.com/apache/storm/pull/1171#issuecomment-191100334","issue_url":"https://api.github.com/repos/apache/storm/issues/1171","id":191100334,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTEwMDMzNA==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T07:06:45Z","updated_at":"2016-03-02T07:06:45Z","author_association":"CONTRIBUTOR","body":"@revans2 @unsleepy22 - can we use (.) as separator instead of (:) in the metric names? Reason being that graphite and possibly other systems recognize dot as a separator but not (:)? It need not be done in this PR itself. I can make those changes in a separate PR. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191100334/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878234","html_url":"https://github.com/apache/storm/issues/5425#issuecomment-2612878234","issue_url":"https://api.github.com/repos/apache/storm/issues/5425","id":2612878234,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgyMzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T07:06:46Z","updated_at":"2025-01-24T16:05:00Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1171#issuecomment-191100334\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1171#issuecomment-191100334</a></p>\n\n<p>    @revans2 @unsleepy22 - can we use (.) as separator instead of (<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> in the metric names? Reason being that graphite and possibly other systems recognize dot as a separator but not (<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/>? It need not be done in this PR itself. I can make those changes in a separate PR. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878234/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877974","html_url":"https://github.com/apache/storm/issues/5423#issuecomment-2612877974","issue_url":"https://api.github.com/repos/apache/storm/issues/5423","id":2612877974,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzc5NzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T07:31:32Z","updated_at":"2025-01-24T16:04:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user abhishekagarwal87 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1175\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1175</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1588\" title=\"component page gets divide by 0 if no event loggers configured\" class=\"issue-link\" data-issue-key=\"STORM-1588\"><del>STORM-1588</del></a>: Do not add event logger details if number of event logger is zero</p>\n\n<p>    This PR is for 1.x branch</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/abhishekagarwal87/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/abhishekagarwal87/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1588\" title=\"component page gets divide by 0 if no event loggers configured\" class=\"issue-link\" data-issue-key=\"STORM-1588\"><del>STORM-1588</del></a>-1.x</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1175.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1175.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1175</p>\n\n<hr />\n<p>commit 4a75d61822dcf9e744d14e808a051e8b2379f938<br/>\nAuthor: Abhishek Agarwal <abhishek.agarwal@inmobi.com><br/>\nDate:   2016-03-02T07:28:50Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1588\" title=\"component page gets divide by 0 if no event loggers configured\" class=\"issue-link\" data-issue-key=\"STORM-1588\"><del>STORM-1588</del></a>: Do not add event logger details if number of event loggers is zero</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877974/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191110366","html_url":"https://github.com/apache/storm/pull/1170#issuecomment-191110366","issue_url":"https://api.github.com/repos/apache/storm/issues/1170","id":191110366,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTExMDM2Ng==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T07:31:46Z","updated_at":"2016-03-02T07:31:46Z","author_association":"CONTRIBUTOR","body":"https://github.com/apache/storm/pull/1175 for 1.x branch\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191110366/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877980","html_url":"https://github.com/apache/storm/issues/5423#issuecomment-2612877980","issue_url":"https://api.github.com/repos/apache/storm/issues/5423","id":2612877980,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzc5ODA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T07:31:47Z","updated_at":"2025-01-24T16:04:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1170#issuecomment-191110366\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1170#issuecomment-191110366</a></p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1175\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1175</a> for 1.x branch</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612877980/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878634","html_url":"https://github.com/apache/storm/issues/5428#issuecomment-2612878634","issue_url":"https://api.github.com/repos/apache/storm/issues/5428","id":2612878634,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg2MzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T07:38:24Z","updated_at":"2025-01-24T16:05:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\">abhishek.agarwal</a>:</i>\n<p>It sounds useful. Just to confirm the exact use case, you want to kill the topology only after all un-acked messages have been acked. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878634/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700825","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700825","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700825,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4MjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T07:47:16Z","updated_at":"2025-01-24T14:44:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54689200\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54689200</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java &#8212;<br/>\n    @@ -0,0 +1,69 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.AuthUtils;<br/>\n    +import org.apache.storm.security.auth.SaslTransportPlugin;<br/>\n    +import org.apache.thrift.transport.TSaslClientTransport;<br/>\n    +import org.apache.thrift.transport.TSaslServerTransport;<br/>\n    +import org.apache.thrift.transport.TTransport;<br/>\n    +import org.apache.thrift.transport.TTransportException;<br/>\n    +import org.apache.thrift.transport.TTransportFactory;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import java.io.IOException;<br/>\n    +import java.security.Security;<br/>\n    +<br/>\n    +public class PlainSaslTransportPlugin extends SaslTransportPlugin {<br/>\n    +    public static final String PLAIN = \"PLAIN\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainSaslTransportPlugin.class);<br/>\n    +<br/>\n    +    @Override<br/>\n    +    protected TTransportFactory getServerTransportFactory() throws IOException {<br/>\n    +//create an authentication callback handler<br/>\n    +CallbackHandler server_callback_handler = new PlainServerCallbackHandler();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    minor: could use camelCase convention. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700825/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657245","html_url":"https://github.com/apache/storm/issues/5119#issuecomment-2612657245","issue_url":"https://api.github.com/repos/apache/storm/issues/5119","id":2612657245,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTcyNDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T12:25:24Z","updated_at":"2025-01-24T14:25:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user abhishekagarwal87 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1176\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1176</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1283\" title=\"port backtype.storm.MockAutoCred to java\" class=\"issue-link\" data-issue-key=\"STORM-1283\"><del>STORM-1283</del></a>: port backtype.storm.MockAutoCred to java</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/abhishekagarwal87/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/abhishekagarwal87/storm</a> mockautocred</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1176.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1176.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1176</p>\n\n<hr />\n<p>commit 035f47a0edbffe445f642bb5c6138d776a472bff<br/>\nAuthor: Abhishek Agarwal <abhishek.agarwal@inmobi.com><br/>\nDate:   2016-03-02T12:23:54Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1283\" title=\"port backtype.storm.MockAutoCred to java\" class=\"issue-link\" data-issue-key=\"STORM-1283\"><del>STORM-1283</del></a>: port backtype.storm.MockAutoCred to java</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612657245/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878638","html_url":"https://github.com/apache/storm/issues/5428#issuecomment-2612878638","issue_url":"https://api.github.com/repos/apache/storm/issues/5428","id":2612878638,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg2Mzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:16:26Z","updated_at":"2025-01-24T16:05:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=baconseason\">baconseason</a>:</i>\n<p>Yeah, that's exactly right. I want to know when all un-acked tuples have been acked, so that I can safely kill the topology.</p>\n\n<p>Do you have any thoughts about the impl here? I was thinking of watching the queues population metrics...</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878638/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700830","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700830","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700830,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4MzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:19:47Z","updated_at":"2025-01-24T14:44:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54727772\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54727772</a></p>\n\n<p>    &#8212; Diff: conf/defaults.yaml &#8212;<br/>\n    @@ -39,7 +39,7 @@ storm.exhibitor.port: 8080<br/>\n     storm.exhibitor.poll.uripath: \"/exhibitor/v1/cluster/list\"<br/>\n     storm.cluster.mode: \"distributed\" # can be distributed or local<br/>\n     storm.local.mode.zmq: false<br/>\n    -storm.thrift.transport: \"org.apache.storm.security.auth.SimpleTransportPlugin\"<br/>\n    +storm.thrift.transport: \"org.apache.storm.security.auth.plain.PlainSaslTransportPlugin\"<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This breaks wire compatibility, so it will not be a rolling upgrade.  I am OK with that, but I want to be sure that it is documented.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700830/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700833","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700833","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700833,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4MzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:21:32Z","updated_at":"2025-01-24T14:44:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54727990\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54727990</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslClientCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,76 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +import java.io.IOException;<br/>\n    +<br/>\n    +public abstract class AbstractSaslClientCallbackHandler implements CallbackHandler {<br/>\n    +    protected static final String USERNAME = \"username\";<br/>\n    +    protected static final String PASSWORD = \"password\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(AbstractSaslClientCallbackHandler.class);<br/>\n    +    protected String _username = null;<br/>\n    +    protected String _password = null;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * This method is invoked by SASL for authentication challenges<br/>\n    +     * @param callbacks a collection of challenge callbacks<br/>\n    +     */<br/>\n    +    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {<br/>\n    +for (Callback c : callbacks) {<br/>\n    +    if (c instanceof NameCallback) {<br/>\n    +LOG.debug(\"name callback\");<br/>\n    +NameCallback nc = (NameCallback) c;<br/>\n    +nc.setName(_username);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    So we are always going to set the name to null???</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700833/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700842","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700842","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700842,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4NDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:23:24Z","updated_at":"2025-01-24T14:44:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54728287\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54728287</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslServerCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,77 @@<br/>\n    +package org.apache.storm.security.auth;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public abstract class AbstractSaslServerCallbackHandler implements CallbackHandler {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(AbstractSaslServerCallbackHandler.class);<br/>\n    +    protected final Map<String,String> credentials = new HashMap<>();<br/>\n    +    protected String userName;<br/>\n    +<br/>\n    +    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {<br/>\n    +for (Callback callback : callbacks) {<br/>\n    +    if (callback instanceof NameCallback) </p>\n{\n    +handleNameCallback((NameCallback) callback);\n    +    }\n<p> else if (callback instanceof PasswordCallback) </p>\n{\n    +handlePasswordCallback((PasswordCallback) callback);\n    +    }\n<p> else if (callback instanceof RealmCallback) </p>\n{\n    +handleRealmCallback((RealmCallback) callback);\n    +    }\n<p> else if (callback instanceof AuthorizeCallback) </p>\n{\n    +handleAuthorizeCallback((AuthorizeCallback) callback);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void handleNameCallback(NameCallback nc) </p>\n{\n    +LOG.debug(\"handleNameCallback\");\n    +userName = nc.getDefaultName();\n    +nc.setName(nc.getDefaultName());\n    +    }\n<p>    +<br/>\n    +    protected void handlePasswordCallback(PasswordCallback pc) {<br/>\n    +LOG.debug(\"handlePasswordCallback\");<br/>\n    +if (credentials.containsKey(userName) ) </p>\n{\n    +    pc.setPassword(credentials.get(userName).toCharArray());\n    +}\n<p> else </p>\n{\n    +    LOG.warn(\"No password found for user: \" + userName);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private void handleRealmCallback(RealmCallback rc) {<br/>\n    +LOG.debug(\"handleRealmCallback: \"+ rc.getDefaultText());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Lets use the \"{}\" syntax here.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700842/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700847","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700847","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700847,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:23:44Z","updated_at":"2025-01-24T14:44:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54728326\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54728326</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslServerCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,77 @@<br/>\n    +package org.apache.storm.security.auth;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.Callback;<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import javax.security.auth.callback.NameCallback;<br/>\n    +import javax.security.auth.callback.PasswordCallback;<br/>\n    +import javax.security.auth.callback.UnsupportedCallbackException;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.RealmCallback;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +public abstract class AbstractSaslServerCallbackHandler implements CallbackHandler {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(AbstractSaslServerCallbackHandler.class);<br/>\n    +    protected final Map<String,String> credentials = new HashMap<>();<br/>\n    +    protected String userName;<br/>\n    +<br/>\n    +    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {<br/>\n    +for (Callback callback : callbacks) {<br/>\n    +    if (callback instanceof NameCallback) </p>\n{\n    +handleNameCallback((NameCallback) callback);\n    +    }\n<p> else if (callback instanceof PasswordCallback) </p>\n{\n    +handlePasswordCallback((PasswordCallback) callback);\n    +    }\n<p> else if (callback instanceof RealmCallback) </p>\n{\n    +handleRealmCallback((RealmCallback) callback);\n    +    }\n<p> else if (callback instanceof AuthorizeCallback) </p>\n{\n    +handleAuthorizeCallback((AuthorizeCallback) callback);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void handleNameCallback(NameCallback nc) </p>\n{\n    +LOG.debug(\"handleNameCallback\");\n    +userName = nc.getDefaultName();\n    +nc.setName(nc.getDefaultName());\n    +    }\n<p>    +<br/>\n    +    protected void handlePasswordCallback(PasswordCallback pc) {<br/>\n    +LOG.debug(\"handlePasswordCallback\");<br/>\n    +if (credentials.containsKey(userName) ) </p>\n{\n    +    pc.setPassword(credentials.get(userName).toCharArray());\n    +}\n<p> else {<br/>\n    +    LOG.warn(\"No password found for user: \" + userName);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    \"{}\" syntax</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700847/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700853","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700853","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700853,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:27:07Z","updated_at":"2025-01-24T14:44:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54728782\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54728782</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java &#8212;<br/>\n    @@ -0,0 +1,69 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.AuthUtils;<br/>\n    +import org.apache.storm.security.auth.SaslTransportPlugin;<br/>\n    +import org.apache.thrift.transport.TSaslClientTransport;<br/>\n    +import org.apache.thrift.transport.TSaslServerTransport;<br/>\n    +import org.apache.thrift.transport.TTransport;<br/>\n    +import org.apache.thrift.transport.TTransportException;<br/>\n    +import org.apache.thrift.transport.TTransportFactory;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import java.io.IOException;<br/>\n    +import java.security.Security;<br/>\n    +<br/>\n    +public class PlainSaslTransportPlugin extends SaslTransportPlugin {<br/>\n    +    public static final String PLAIN = \"PLAIN\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainSaslTransportPlugin.class);<br/>\n    +<br/>\n    +    @Override<br/>\n    +    protected TTransportFactory getServerTransportFactory() throws IOException {<br/>\n    +//create an authentication callback handler<br/>\n    +CallbackHandler server_callback_handler = new PlainServerCallbackHandler();<br/>\n    +Security.addProvider(new SaslPlainServer.SecurityProvider());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    What happens if we add this multiple times?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700853/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700856","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700856","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700856,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:28:23Z","updated_at":"2025-01-24T14:44:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54728926\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54728926</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/SaslPlainServer.java &#8212;<br/>\n    @@ -0,0 +1,154 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import java.security.Provider;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import javax.security.auth.callback.*;<br/>\n    +import javax.security.sasl.AuthorizeCallback;<br/>\n    +import javax.security.sasl.Sasl;<br/>\n    +import javax.security.sasl.SaslException;<br/>\n    +import javax.security.sasl.SaslServer;<br/>\n    +import javax.security.sasl.SaslServerFactory;<br/>\n    +<br/>\n    +public class SaslPlainServer implements SaslServer {<br/>\n    +  @SuppressWarnings(\"serial\")<br/>\n    +  public static class SecurityProvider extends Provider {<br/>\n    +    public SecurityProvider() {<br/>\n    +      super(\"SaslPlainServer\", 1.0, \"SASL PLAIN Authentication Server\");<br/>\n    +      put(\"SaslServerFactory.PLAIN\",<br/>\n    +  SaslPlainServerFactory.class.getName());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This ensures that if the package changes or something else like it changes we get a compile error, not a runtime error.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700856/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878645","html_url":"https://github.com/apache/storm/issues/5428#issuecomment-2612878645","issue_url":"https://api.github.com/repos/apache/storm/issues/5428","id":2612878645,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg2NDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:34:30Z","updated_at":"2025-01-24T16:05:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>That sounds not too difficult to do.  We would need to add some state to the heartbeat to include the number of outstanding tuples for each spout, which would be a useful metric to have anyways.  I am not sure that I would just make it a green indicator though.  That seems very single use.  I would rather have the number of outstanding tuples currently available both through zookeeper and through a Metric.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878645/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191261944","html_url":"https://github.com/apache/storm/pull/1173#issuecomment-191261944","issue_url":"https://api.github.com/repos/apache/storm/issues/1173","id":191261944,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTI2MTk0NA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:35:42Z","updated_at":"2016-03-02T14:35:42Z","author_association":"CONTRIBUTOR","body":"Overall it looks fairly good, but you have a problem with RAT somewhere.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191261944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700859","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700859","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700859,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:35:43Z","updated_at":"2025-01-24T14:44:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#issuecomment-191261944\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#issuecomment-191261944</a></p>\n\n<p>    Overall it looks fairly good, but you have a problem with RAT somewhere.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700866","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700866","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700866,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4NjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:36:01Z","updated_at":"2025-01-24T14:44:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54730042\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54730042</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslServerCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,77 @@<br/>\n    +package org.apache.storm.security.auth;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Needs an Apache header.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700866/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878648","html_url":"https://github.com/apache/storm/issues/5428#issuecomment-2612878648","issue_url":"https://api.github.com/repos/apache/storm/issues/5428","id":2612878648,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg2NDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:38:12Z","updated_at":"2025-01-24T16:05:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=baconseason\">baconseason</a>:</i>\n<p>That's fair. A hard number is def a more global usecase. What about unanchored tuples that were/are emitted from bolts down the chain? Say a spout emitted a tuple, which a bolt then ack'd. That bolt then emitted another tuple to another bolt, but that tuple wasn't anchored to the original one from the spout...</p>\n\n<p>Does this heartbeat approach make more sense than watching the queue population metrics?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878648/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872289","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872289","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872289,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyODk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:40:01Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#discussion_r54730661\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#discussion_r54730661</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/task/OutputCollector.java &#8212;<br/>\n    @@ -218,6 +218,16 @@ public void fail(Tuple input) </p>\n{\n     _delegate.fail(input);\n }\n\n<p>    +    /**<br/>\n    +    * Resets the message timeout for any tuple trees to which the given tuple belongs.<br/>\n    +    * The timeout is reset to Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS.<br/>\n    +    * @param input the tuple to reset timeout for<br/>\n    +    */<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we add to the javadoc that this should be used sparingly?  This is not a cheap operation, so having someone do it for each tuple they receive is very expensive.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872289/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872296","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872296","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872296,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIyOTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:40:23Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#discussion_r54730716\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#discussion_r54730716</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/topology/BasicOutputCollector.java &#8212;<br/>\n    @@ -52,6 +52,10 @@ public void emitDirect(int taskId, List<Object> tuple) </p>\n{\n     emitDirect(taskId, Utils.DEFAULT_STREAM_ID, tuple);\n }\n\n<p>    +    public void resetTimeout(Tuple tuple){<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we put the javadoc here too for resetTimeout from outputCollector?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872296/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191264712","html_url":"https://github.com/apache/storm/pull/1174#issuecomment-191264712","issue_url":"https://api.github.com/repos/apache/storm/issues/1174","id":191264712,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTI2NDcxMg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:43:33Z","updated_at":"2016-03-02T14:43:33Z","author_association":"CONTRIBUTOR","body":"Overall things look good.  Just a few minor nits about javadocs and what @abhishekagarwal87 pointed out.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191264712/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872302","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872302","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872302,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIzMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:43:35Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#issuecomment-191264712\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#issuecomment-191264712</a></p>\n\n<p>    Overall things look good.  Just a few minor nits about javadocs and what @abhishekagarwal87 pointed out.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872306","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872306","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872306,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIzMDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T14:44:29Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#discussion_r54731300\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#discussion_r54731300</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/Acker.java &#8212;<br/>\n    @@ -100,6 +101,8 @@ public void execute(Tuple input) {<br/>\n }<br/>\n curr.failed = true;<br/>\n pending.put(id, curr);<br/>\n    +} else if(ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes this is very true, in the clj code the entire processing was wrapped in a null check for curr.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872306/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878653","html_url":"https://github.com/apache/storm/issues/5428#issuecomment-2612878653","issue_url":"https://api.github.com/repos/apache/storm/issues/5428","id":2612878653,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg2NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T15:02:47Z","updated_at":"2025-01-24T16:05:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Watching the queue population would work except for system tuples that never come from a spout.  We have several different \"tick\" tuples that can cause other tuples to be emitted, like metrics tuples.  It too is a very useful metric that we should have and probably should be used if someone wants to know for sure if things are done.  In local mode for a lot of our tests we wait for the topology to be idle before we take a next step.  We had to put in random waits instead of waits at set intervals because we would always somehow hit a box where the tick tuples and the polling for idle hit the same cadence and the test would time out or hang.  In this case we will be polling less frequently but over many more machines, so it feels like we would run into this situation regularly. </p>\n\n<p>Unanchored tuples of all kinds are not a part of the pending count for a spout so you probably would want to combine the two metrics as a guess for how free a topology is.  But there can also be situations where an unanchored tuple can be sitting in a bolt and not on a queue.  Think about an async web service bolt, that we have lots of.  In that case we could have lots of tuples outstanding in a bolt.  None of these are silver bullets, but better then just waiting.</p>\n\n<p>I would say that your green lite for doing an upgrade would be something like </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">topology_deactivated && sum(max_spout_pending) <= pending_threshold && sum(queue_length) <= queue_threshold</pre>\n</div></div>\n<p> where pending_threshold would probably be 0 and queue_threshold would probably be </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">count(bolt_instances) + count(spout_instances)</pre>\n</div></div>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878653/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878661","html_url":"https://github.com/apache/storm/issues/5428#issuecomment-2612878661","issue_url":"https://api.github.com/repos/apache/storm/issues/5428","id":2612878661,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg2NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T15:09:22Z","updated_at":"2025-01-24T16:05:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=baconseason\">baconseason</a>:</i>\n<p>That's super helpful! Thanks, <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\" class=\"user-hover\" rel=\"revans2\">Robert Joseph Evans</a>. I'll get something started and open a PR soon...</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878661/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700871","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700871","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700871,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T15:19:23Z","updated_at":"2025-01-24T14:44:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54736725\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54736725</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java &#8212;<br/>\n    @@ -0,0 +1,31 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.AbstractSaslClientCallbackHandler;<br/>\n    +<br/>\n    +public class PlainClientCallbackHandler extends AbstractSaslClientCallbackHandler {<br/>\n    +<br/>\n    +    /*<br/>\n    +     * For plain, using constants for a pair of user name and password.<br/>\n    +     */<br/>\n    +    public PlainClientCallbackHandler() {<br/>\n    +_username = USERNAME;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I forgot to ask before is the user this always reports to nimbus/etc now \"username\"?  If so I really would prefer to pass in the user name of the current user on this system, or even better have the server set the user to null like we were doing before.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700877","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700877","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700877,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4Nzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T15:43:29Z","updated_at":"2025-01-24T14:44:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54740640\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54740640</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java &#8212;<br/>\n    @@ -0,0 +1,69 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.security.auth.plain;<br/>\n    +<br/>\n    +import org.apache.storm.security.auth.AuthUtils;<br/>\n    +import org.apache.storm.security.auth.SaslTransportPlugin;<br/>\n    +import org.apache.thrift.transport.TSaslClientTransport;<br/>\n    +import org.apache.thrift.transport.TSaslServerTransport;<br/>\n    +import org.apache.thrift.transport.TTransport;<br/>\n    +import org.apache.thrift.transport.TTransportException;<br/>\n    +import org.apache.thrift.transport.TTransportFactory;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.security.auth.callback.CallbackHandler;<br/>\n    +import java.io.IOException;<br/>\n    +import java.security.Security;<br/>\n    +<br/>\n    +public class PlainSaslTransportPlugin extends SaslTransportPlugin {<br/>\n    +    public static final String PLAIN = \"PLAIN\";<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(PlainSaslTransportPlugin.class);<br/>\n    +<br/>\n    +    @Override<br/>\n    +    protected TTransportFactory getServerTransportFactory() throws IOException {<br/>\n    +//create an authentication callback handler<br/>\n    +CallbackHandler server_callback_handler = new PlainServerCallbackHandler();<br/>\n    +Security.addProvider(new SaslPlainServer.SecurityProvider());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I will add it to constructor with additional check on if provider is already registered.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878663","html_url":"https://github.com/apache/storm/issues/5428#issuecomment-2612878663","issue_url":"https://api.github.com/repos/apache/storm/issues/5428","id":2612878663,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg2NjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T15:49:12Z","updated_at":"2025-01-24T16:05:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Just so you know there was an old pull request to add in queue_length.  </p>\n\n<p><a href=\"https://github.com/apache/storm/pull/236\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/236</a></p>\n\n<p>You might want to look at it as a starting point, but it is out of date and <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knusbaum\" class=\"user-hover\" rel=\"knusbaum\">Kyle Nusbaum</a> hasn't found the time yet to upmerge it <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/>.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878663/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191301019","html_url":"https://github.com/apache/storm/pull/1171#issuecomment-191301019","issue_url":"https://api.github.com/repos/apache/storm/issues/1171","id":191301019,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTMwMTAxOQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T15:58:59Z","updated_at":"2016-03-02T15:58:59Z","author_association":"CONTRIBUTOR","body":"@abhishekagarwal87 I would be fine with a change like that.  Please file a JIRA for it and we can make the change everywhere.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191301019/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878237","html_url":"https://github.com/apache/storm/issues/5425#issuecomment-2612878237","issue_url":"https://api.github.com/repos/apache/storm/issues/5425","id":2612878237,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzgyMzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T15:59:00Z","updated_at":"2025-01-24T16:05:00Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1171#issuecomment-191301019\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1171#issuecomment-191301019</a></p>\n\n<p>    @abhishekagarwal87 I would be fine with a change like that.  Please file a JIRA for it and we can make the change everywhere.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700884","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700884","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700884,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA4ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T16:30:46Z","updated_at":"2025-01-24T14:44:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1173#discussion_r54749129\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1173#discussion_r54749129</a></p>\n\n<p>    &#8212; Diff: conf/defaults.yaml &#8212;<br/>\n    @@ -39,7 +39,7 @@ storm.exhibitor.port: 8080<br/>\n     storm.exhibitor.poll.uripath: \"/exhibitor/v1/cluster/list\"<br/>\n     storm.cluster.mode: \"distributed\" # can be distributed or local<br/>\n     storm.local.mode.zmq: false<br/>\n    -storm.thrift.transport: \"org.apache.storm.security.auth.SimpleTransportPlugin\"<br/>\n    +storm.thrift.transport: \"org.apache.storm.security.auth.plain.PlainSaslTransportPlugin\"<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Since there is not good place to document this. I am simply going without any chances to default on \"storm.thrift.tranport\" so we can pull this in 1.x-branch as well. I will create two separate pull requests - <br/>\n    1. to change default and deprecate  `SimpleTransportPlugin`  and configuration on 1.x-branch.<br/>\n    2. To remove `SimpleTransportPlugin` and configuration in master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700884/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191326068","html_url":"https://github.com/apache/storm/pull/1174#issuecomment-191326068","issue_url":"https://api.github.com/repos/apache/storm/issues/1174","id":191326068,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTMyNjA2OA==","user":{"login":"srdo","id":4324588,"node_id":"MDQ6VXNlcjQzMjQ1ODg=","avatar_url":"https://avatars.githubusercontent.com/u/4324588?v=4","gravatar_id":"","url":"https://api.github.com/users/srdo","html_url":"https://github.com/srdo","followers_url":"https://api.github.com/users/srdo/followers","following_url":"https://api.github.com/users/srdo/following{/other_user}","gists_url":"https://api.github.com/users/srdo/gists{/gist_id}","starred_url":"https://api.github.com/users/srdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/srdo/subscriptions","organizations_url":"https://api.github.com/users/srdo/orgs","repos_url":"https://api.github.com/users/srdo/repos","events_url":"https://api.github.com/users/srdo/events{/privacy}","received_events_url":"https://api.github.com/users/srdo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T17:01:03Z","updated_at":"2016-03-02T17:01:03Z","author_association":"CONTRIBUTOR","body":"The NPE should be fixed, I've added the missing space to the if, and added a comment to the javadoc about reset timeout being an expensive operation. The comment has also been added to the 1.x-branch version\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191326068/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872311","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872311","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872311,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIzMTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T17:01:05Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user srdo commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#issuecomment-191326068\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#issuecomment-191326068</a></p>\n\n<p>    The NPE should be fixed, I've added the missing space to the if, and added a comment to the javadoc about reset timeout being an expensive operation. The comment has also been added to the 1.x-branch version</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872311/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191330287","html_url":"https://github.com/apache/storm/pull/1161#issuecomment-191330287","issue_url":"https://api.github.com/repos/apache/storm/issues/1161","id":191330287,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTMzMDI4Nw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T17:14:38Z","updated_at":"2016-03-02T17:14:38Z","author_association":"CONTRIBUTOR","body":"One minor comment, but it is important that we get this and #1172 in, so I am fine with making the change myself as a part of the merge.  +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191330287/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/191337207","html_url":"https://github.com/apache/storm/pull/1172#issuecomment-191337207","issue_url":"https://api.github.com/repos/apache/storm/issues/1172","id":191337207,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MTMzNzIwNw==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T17:25:43Z","updated_at":"2016-03-02T17:25:43Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/191337207/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878512","html_url":"https://github.com/apache/storm/issues/5427#issuecomment-2612878512","issue_url":"https://api.github.com/repos/apache/storm/issues/5427","id":2612878512,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg1MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T17:25:44Z","updated_at":"2025-01-24T16:05:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1172#issuecomment-191337207\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1172#issuecomment-191337207</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878512/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872831","html_url":"https://github.com/apache/storm/issues/5387#issuecomment-2612872831","issue_url":"https://api.github.com/repos/apache/storm/issues/5387","id":2612872831,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzI4MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T17:27:55Z","updated_at":"2025-01-24T16:02:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1161\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1161</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876882","html_url":"https://github.com/apache/storm/issues/5414#issuecomment-2612876882","issue_url":"https://api.github.com/repos/apache/storm/issues/5414","id":2612876882,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzY4ODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T17:28:15Z","updated_at":"2025-01-24T16:04:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Cody\" class=\"user-hover\" rel=\"Cody\">Cody</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612876882/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878521","html_url":"https://github.com/apache/storm/issues/5427#issuecomment-2612878521","issue_url":"https://api.github.com/repos/apache/storm/issues/5427","id":2612878521,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Nzg1MjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-02T18:32:56Z","updated_at":"2025-01-24T16:05:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1172\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1172</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612878521/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]