[{"url":"https://api.github.com/repos/apache/druid/issues/comments/470818683","html_url":"https://github.com/apache/druid/pull/7211#issuecomment-470818683","issue_url":"https://api.github.com/repos/apache/druid/issues/7211","id":470818683,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MDgxODY4Mw==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T06:15:29Z","updated_at":"2019-03-08T06:15:29Z","author_association":"CONTRIBUTOR","body":"OK, this is passing for me now.\r\n\r\nThe first commit just adds the missing task spec lines as requested.\r\n\r\nThe second commit validates that at least one sub task got run per indexing run.  If you don't think that's necessary, feel free to drop it from the branch before merging, but it seems nice to validate the issue this PR is fixing.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/470818683/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/470828958","html_url":"https://github.com/apache/druid/pull/6092#issuecomment-470828958","issue_url":"https://api.github.com/repos/apache/druid/issues/6092","id":470828958,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MDgyODk1OA==","user":{"login":"stale[bot]","id":26384082,"node_id":"MDM6Qm90MjYzODQwODI=","avatar_url":"https://avatars.githubusercontent.com/in/1724?v=4","gravatar_id":"","url":"https://api.github.com/users/stale%5Bbot%5D","html_url":"https://github.com/apps/stale","followers_url":"https://api.github.com/users/stale%5Bbot%5D/followers","following_url":"https://api.github.com/users/stale%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stale%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/stale%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/stale%5Bbot%5D/repos","events_url":"https://api.github.com/users/stale%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/stale%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T07:08:46Z","updated_at":"2019-03-08T07:08:46Z","author_association":"NONE","body":"This pull request has been marked as stale due to 60 days of inactivity. It will be closed in 1 week if no further activity occurs. If you think that’s incorrect or this pull request requires a review, please simply write any comment. If closed, you can revive the PR at any time and @mention a reviewer or discuss it on the dev@druid.apache.org list. Thank you for your contributions.\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/470828958/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/470849098","html_url":"https://github.com/apache/druid/pull/7121#issuecomment-470849098","issue_url":"https://api.github.com/repos/apache/druid/issues/7121","id":470849098,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MDg0OTA5OA==","user":{"login":"kamaci","id":3921885,"node_id":"MDQ6VXNlcjM5MjE4ODU=","avatar_url":"https://avatars.githubusercontent.com/u/3921885?v=4","gravatar_id":"","url":"https://api.github.com/users/kamaci","html_url":"https://github.com/kamaci","followers_url":"https://api.github.com/users/kamaci/followers","following_url":"https://api.github.com/users/kamaci/following{/other_user}","gists_url":"https://api.github.com/users/kamaci/gists{/gist_id}","starred_url":"https://api.github.com/users/kamaci/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kamaci/subscriptions","organizations_url":"https://api.github.com/users/kamaci/orgs","repos_url":"https://api.github.com/users/kamaci/repos","events_url":"https://api.github.com/users/kamaci/events{/privacy}","received_events_url":"https://api.github.com/users/kamaci/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T08:36:19Z","updated_at":"2019-03-08T08:36:19Z","author_association":"MEMBER","body":"> @kamaci please don't force-push pull-request branches, use merge commits instead.\r\n\r\nI did a rebase to fix conflicts. I'll go with merge commits 👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/470849098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/470884379","html_url":"https://github.com/apache/druid/issues/4947#issuecomment-470884379","issue_url":"https://api.github.com/repos/apache/druid/issues/4947","id":470884379,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MDg4NDM3OQ==","user":{"login":"peferron","id":7009852,"node_id":"MDQ6VXNlcjcwMDk4NTI=","avatar_url":"https://avatars.githubusercontent.com/u/7009852?v=4","gravatar_id":"","url":"https://api.github.com/users/peferron","html_url":"https://github.com/peferron","followers_url":"https://api.github.com/users/peferron/followers","following_url":"https://api.github.com/users/peferron/following{/other_user}","gists_url":"https://api.github.com/users/peferron/gists{/gist_id}","starred_url":"https://api.github.com/users/peferron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peferron/subscriptions","organizations_url":"https://api.github.com/users/peferron/orgs","repos_url":"https://api.github.com/users/peferron/repos","events_url":"https://api.github.com/users/peferron/events{/privacy}","received_events_url":"https://api.github.com/users/peferron/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T10:39:00Z","updated_at":"2019-03-08T10:44:58Z","author_association":"CONTRIBUTOR","body":"> the cache key could be evicted from memcached, but stay in local cache on a historical.\r\n\r\n@leventov in this situation, this cache key will not get populated again into memcached as long as it's still present in the historicals local cache, right? Queries for this cache key will always result in a broker memcached cache miss, followed by a historical local cache hit.\r\n\r\nThis seems undesirable if queries for this cache key keep coming frequently, but might work well in practice if the ultimate goal is to cut the number of segment scans without caring where the cache hit comes from.\r\n\r\nSince this discussion is quite old, I'm referring to the configuration you described earlier:\r\n\r\n- Brokers read-only from memcached\r\n- Historicals read/write to L1 caffeine and write-only to L2 memcached\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/470884379/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/470933765","html_url":"https://github.com/apache/druid/pull/6923#issuecomment-470933765","issue_url":"https://api.github.com/repos/apache/druid/issues/6923","id":470933765,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MDkzMzc2NQ==","user":{"login":"aleksi75","id":37665177,"node_id":"MDQ6VXNlcjM3NjY1MTc3","avatar_url":"https://avatars.githubusercontent.com/u/37665177?v=4","gravatar_id":"","url":"https://api.github.com/users/aleksi75","html_url":"https://github.com/aleksi75","followers_url":"https://api.github.com/users/aleksi75/followers","following_url":"https://api.github.com/users/aleksi75/following{/other_user}","gists_url":"https://api.github.com/users/aleksi75/gists{/gist_id}","starred_url":"https://api.github.com/users/aleksi75/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aleksi75/subscriptions","organizations_url":"https://api.github.com/users/aleksi75/orgs","repos_url":"https://api.github.com/users/aleksi75/repos","events_url":"https://api.github.com/users/aleksi75/events{/privacy}","received_events_url":"https://api.github.com/users/aleksi75/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T13:47:17Z","updated_at":"2019-03-08T13:47:17Z","author_association":"CONTRIBUTOR","body":"I am looking forward to unified web console :+1:\r\n\r\nIs there a possibility to set credentials, eg. login and pwd? At the moment, everybody how knows the url ist able to stop/suspend even kill eg. kafka supervisors which is a little bit painful.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/470933765/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471045508","html_url":"https://github.com/apache/druid/pull/7088#issuecomment-471045508","issue_url":"https://api.github.com/repos/apache/druid/issues/7088","id":471045508,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTA0NTUwOA==","user":{"login":"samarthjain","id":1642180,"node_id":"MDQ6VXNlcjE2NDIxODA=","avatar_url":"https://avatars.githubusercontent.com/u/1642180?v=4","gravatar_id":"","url":"https://api.github.com/users/samarthjain","html_url":"https://github.com/samarthjain","followers_url":"https://api.github.com/users/samarthjain/followers","following_url":"https://api.github.com/users/samarthjain/following{/other_user}","gists_url":"https://api.github.com/users/samarthjain/gists{/gist_id}","starred_url":"https://api.github.com/users/samarthjain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samarthjain/subscriptions","organizations_url":"https://api.github.com/users/samarthjain/orgs","repos_url":"https://api.github.com/users/samarthjain/repos","events_url":"https://api.github.com/users/samarthjain/events{/privacy}","received_events_url":"https://api.github.com/users/samarthjain/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T19:22:28Z","updated_at":"2019-03-08T19:22:28Z","author_association":"CONTRIBUTOR","body":"> Hi @samarthjain, I just noticed this bug: #7192. I'm not sure the same problem exists in ZK-based parallel segment loading, but it would be great if you can have a chance to check it.\r\n\r\nThanks for the pointer, @jihoonson. I took a look and I can't say for sure if the bug exists with zk-based loading too. PathChildrenCache, which ```ZkCoordinator``` relies on for receiving zk node added/deleted events, uses a single thread to deliver these events. \r\n\r\nFrom what I understand, it is possible that historicals can possibly receive request to download the same segment file more than once? In http based loading could this be because there was a timeout because the historicals were not fast enough to process the segment download request resulting in coordinator making the request to historical to download the same segment file again? And somewhere in this code path, some cleanup is not happening correctly? \r\n\r\nIn parallel zk based loading I have added this check in ```CuratorLoadQueuePeon``` to detect the case of historicals not able to keep up:\r\n```\r\ncatch (KeeperException.NodeExistsException ne) {\r\n      // This is expected when historicals haven't yet picked up processing this segment and coordinator\r\n      // tries reassigning it to the same node.\r\n      log.warn(ne, \"ZK node already exists because segment change request hasn't yet been processed\");\r\n      failAssign(segmentHolder);\r\n    }\r\n```\r\n\r\n```failAssign(segmentHolder)``` in turn does:\r\n\r\n```\r\n// Act like it was completed so that the coordinator gives it to someone else\r\n    actionCompleted(segmentHolder);\r\n```\r\n ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471045508/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471045723","html_url":"https://github.com/apache/druid/pull/7088#issuecomment-471045723","issue_url":"https://api.github.com/repos/apache/druid/issues/7088","id":471045723,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTA0NTcyMw==","user":{"login":"samarthjain","id":1642180,"node_id":"MDQ6VXNlcjE2NDIxODA=","avatar_url":"https://avatars.githubusercontent.com/u/1642180?v=4","gravatar_id":"","url":"https://api.github.com/users/samarthjain","html_url":"https://github.com/samarthjain","followers_url":"https://api.github.com/users/samarthjain/followers","following_url":"https://api.github.com/users/samarthjain/following{/other_user}","gists_url":"https://api.github.com/users/samarthjain/gists{/gist_id}","starred_url":"https://api.github.com/users/samarthjain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samarthjain/subscriptions","organizations_url":"https://api.github.com/users/samarthjain/orgs","repos_url":"https://api.github.com/users/samarthjain/repos","events_url":"https://api.github.com/users/samarthjain/events{/privacy}","received_events_url":"https://api.github.com/users/samarthjain/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T19:23:12Z","updated_at":"2019-03-08T19:23:12Z","author_association":"CONTRIBUTOR","body":"@Thanks for the reviews, @gianm, @leventov and @egor-ryashin . I have addressed the review comments. Please take a look again when you get a chance.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471045723/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471056305","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-471056305","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":471056305,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTA1NjMwNQ==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T19:56:13Z","updated_at":"2019-03-08T19:56:13Z","author_association":"CONTRIBUTOR","body":"@peferron  \r\n1. How is the group by (your step 1) performed under the covers?  Hash Table?  What do you do if n or m don't fit into memory?  (or is that out of scope by definition?)\r\n2. \"per-segment results are merged on the node\".  How?  Merging of Priority Queues from each segment?  How big are the priority queues? Size k? or bigger than k?\r\n3. What exactly is passed from the node to the broker, effectively a Priority Queue? And how big is it WRT k?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471056305/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471064541","html_url":"https://github.com/apache/druid/issues/7210#issuecomment-471064541","issue_url":"https://api.github.com/repos/apache/druid/issues/7210","id":471064541,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTA2NDU0MQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T20:23:41Z","updated_at":"2019-03-08T20:23:41Z","author_association":"MEMBER","body":"Can use \"collapsible\" controls: https://gist.github.com/joyrexus/16041f2426450e73f5df9391f7f7ae5f","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471064541/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471066611","html_url":"https://github.com/apache/druid/pull/7211#issuecomment-471066611","issue_url":"https://api.github.com/repos/apache/druid/issues/7211","id":471066611,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTA2NjYxMQ==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T20:31:05Z","updated_at":"2019-03-08T20:31:05Z","author_association":"CONTRIBUTOR","body":"@jihoonson done.  (and moved it into a different function, which makes it accessible to `doReindexTest` as well, which #7048 uses)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471066611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471092369","html_url":"https://github.com/apache/druid/issues/6942#issuecomment-471092369","issue_url":"https://api.github.com/repos/apache/druid/issues/6942","id":471092369,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTA5MjM2OQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T22:06:00Z","updated_at":"2019-03-08T22:06:00Z","author_association":"MEMBER","body":"> And it gives users more control over what Guava version they run.\r\n\r\nIn the approach that I suggested, we *also* depending on Guava 16.0.1, letting users to substitute Guava for other dependencies and third-party code users combine Druid with in their private builds, but not the Druid code itself. I don't really imagine why users may want to substitute the use of latest Guava in Druid code itself with use of some older version, except that if there is some regression in the latest Guava source, but that should then be considered a bug in Druid and fixed as a normal bug (since we control the source). But this is a very, very unlikely situation.\r\n\r\n@gianm, your analysis also misses the main point and the advantage of the approach that I suggested: we are able to use latest Guava features, such as MoreCollectors, and more. I had to explain this earlier in the thread.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471092369/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471093544","html_url":"https://github.com/apache/druid/issues/7209#issuecomment-471093544","issue_url":"https://api.github.com/repos/apache/druid/issues/7209","id":471093544,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTA5MzU0NA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T22:10:36Z","updated_at":"2019-03-08T22:10:36Z","author_association":"MEMBER","body":"> I'm not sure if a generic spell check is worth it -- there might be way too many false positives and it would just get annoying -- but something that looks only for specific misspellings may be worth it. (Although, of limited usefulness, since it wouldn't be checking very much.)\r\n\r\n> I'd suggest doing something that can be applied through Maven (rather than IntelliJ inspections) since it's more accessible. Everyone working on Druid has Maven, not everyone has IntelliJ, and it's a better experience when people can verify their own stuff before submitting it up as a PR. The IntelliJ inspection errors won't be obvious until TC runs, which introduces delay in the PR cycle.\r\n\r\nYes, that's exactly what I meant - a Maven plugin which is feeded with a list of stop words (BTW we can include profanity there, too). My only concern with Checkstyle's Regexp rules is that they are regular expressions and having a lot of them to check in the whole repo may slow down the build. The stop word plugin should do simple exact match scan.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471093544/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471095916","html_url":"https://github.com/apache/druid/issues/7076#issuecomment-471095916","issue_url":"https://api.github.com/repos/apache/druid/issues/7076","id":471095916,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTA5NTkxNg==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T22:20:00Z","updated_at":"2019-03-08T22:20:00Z","author_association":"CONTRIBUTOR","body":"I ended up going for the former instead, after reading the mostly innocuous changelog between those versions. https://github.com/apache/incubator-druid/pull/7218","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471095916/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471101462","html_url":"https://github.com/apache/druid/pull/7211#issuecomment-471101462","issue_url":"https://api.github.com/repos/apache/druid/issues/7211","id":471101462,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTEwMTQ2Mg==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T22:42:01Z","updated_at":"2019-03-08T22:42:01Z","author_association":"CONTRIBUTOR","body":"CI passed.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471101462/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471106508","html_url":"https://github.com/apache/druid/pull/7088#issuecomment-471106508","issue_url":"https://api.github.com/repos/apache/druid/issues/7088","id":471106508,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTEwNjUwOA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T23:02:52Z","updated_at":"2019-03-08T23:02:52Z","author_association":"CONTRIBUTOR","body":"@samarthjain thanks for checking. In HTTP segment loading, the coordinator can assign the same segment to the same historical if the historical couldn't load the segment in time. I guess it's intended though I don't think it's good. But, in historical, `SegmentLoaderLocalCacheManager` and `BatchDataSegmentAnnouncer` are not thread-safe and it can announce the same segment on different ZooKeeper nodes.\r\n\r\nI think this problem doesn't happen if the coordinator doesn't assign the same segment to the same historical. And it looks that the coordinator doesn't according to your last comment?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471106508/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471110109","html_url":"https://github.com/apache/druid/issues/7217#issuecomment-471110109","issue_url":"https://api.github.com/repos/apache/druid/issues/7217","id":471110109,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTExMDEwOQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T23:17:18Z","updated_at":"2019-03-08T23:17:18Z","author_association":"CONTRIBUTOR","body":"Hmm, I'm not sure my comment is directly related to this proposal.. Maybe it is somehow related. Anyway, I'd like to leave some note.\r\n\r\nI understand this API can be used for UIs to show users something happened, but not sure how much it would be useful for now. In many cases, I feel the supervisor errors are not much self-descriptive. Exceptions show something happened, but it wasn't easy for me to figure out why it happened only from those exceptions. Rather, I should grep all logs of the supervisor from the overlord log file and look them through to guess what happened. \r\n\r\nSo, as well as this issue, I think we also need 1) an easy way to retrieve supervisor logs, or 2) make supervisor logs more descriptive. I'm not sure there's a good way for 1) with log4j though.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471110109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471111765","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-471111765","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":471111765,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTExMTc2NQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T23:24:13Z","updated_at":"2019-03-08T23:24:37Z","author_association":"CONTRIBUTOR","body":"> How is the group by (your step 1) performed under the covers? Hash Table? What do you do if n or m don't fit into memory? (or is that out of scope by definition?)\r\n\r\nThe TopN engine's intra-segment group-by will use either an array (if it can) or hashtable (if it can't use an array). It assumes the `m` keys will fit in memory, which is considered to be a fair assumption since the highest it could reasonably be is a few million. (Creating segments of more than a few million rows is not considered a good idea.)\r\n\r\n> \"per-segment results are merged on the node\". How? Merging of Priority Queues from each segment? How big are the priority queues? Size k? or bigger than k?\r\n\r\nAll intra-segment resultsets (which are exact) are then sorted (using a priority queue) and truncated to `max(k, 1000)`. Call that `K`. Then the historical merges all those per-segment resultsets pairwise by first combining the `2K` elements based on the aggregation key, then sorting those `2K` elements (again, using a priority queue) into a new priority queue of size `K`.\r\n\r\n> What exactly is passed from the node to the broker, effectively a Priority Queue? And how big is it WRT k?\r\n\r\nIt's a sorted resultset of size `max(k, 1000)`.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471111765/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471113841","html_url":"https://github.com/apache/druid/issues/7217#issuecomment-471113841","issue_url":"https://api.github.com/repos/apache/druid/issues/7217","id":471113841,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTExMzg0MQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-08T23:34:07Z","updated_at":"2019-03-08T23:34:07Z","author_association":"CONTRIBUTOR","body":"In-memory is a good way to go IMO. It's simple at least. And if we want to persist the error history at some point, we could layer that in the future.\r\n\r\n> I plan to achieve this behaviour by extending EmittingLogger and adding an error(Throwable t, String message, String supervisorId) method to call Logger#error() then write details about the exception to a CircularBuffer in the corresponding supervisor class.\r\n\r\nHow would this work -- how would the Logger find the right Supervisor object? I'm also not sure why it's necessary to modify the logger. Why not create a non-Logger-based method that does the same thing, that is part of the Supervisor itself and can be called directly from within the Supervisor code?\r\n\r\n> If there was a API endpoint that returned the error-level exceptions for a specific supervisor, diagnosing issues would be much easier.\r\n\r\nI think this misses one important piece of information needed for diagnostics: what the supervisor was trying to do when it encountered the error, and whether the error is blocking progress or not. Probably the most common errors for the supervisor to run into are trouble connecting to the upstream system (Kafka/Kinesis). But it's important to know: was this the _initial_ connection - meaning things are probably totally broken? Or was this not the initial connection, but a later one - meaning something that used to be working, now no longer works? Is it being retried or is it waiting for the user to do something? Also, is the error condition still ongoing? Or has it cleared? (Just looking at the most recent error won't tell you that - it also matters if the thing that encountered the error has succeeded in a later retry.)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471113841/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471121795","html_url":"https://github.com/apache/druid/issues/7217#issuecomment-471121795","issue_url":"https://api.github.com/repos/apache/druid/issues/7217","id":471121795,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTEyMTc5NQ==","user":{"login":"justinborromeo","id":9417701,"node_id":"MDQ6VXNlcjk0MTc3MDE=","avatar_url":"https://avatars.githubusercontent.com/u/9417701?v=4","gravatar_id":"","url":"https://api.github.com/users/justinborromeo","html_url":"https://github.com/justinborromeo","followers_url":"https://api.github.com/users/justinborromeo/followers","following_url":"https://api.github.com/users/justinborromeo/following{/other_user}","gists_url":"https://api.github.com/users/justinborromeo/gists{/gist_id}","starred_url":"https://api.github.com/users/justinborromeo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/justinborromeo/subscriptions","organizations_url":"https://api.github.com/users/justinborromeo/orgs","repos_url":"https://api.github.com/users/justinborromeo/repos","events_url":"https://api.github.com/users/justinborromeo/events{/privacy}","received_events_url":"https://api.github.com/users/justinborromeo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T00:13:41Z","updated_at":"2019-03-09T00:13:41Z","author_association":"CONTRIBUTOR","body":"@jihoonson I definitely agree that this change isn't very useful for determining _why_ something happened.  I think the purpose outlined in the original issue was to let users know that something happened instead of silently failing and having users wonder why their supervisor isn't doing something.  \r\n\r\nHowever, I don't mind making changes to log descriptiveness; other than the info that @gianm mentioned, do you have any other ideas on what sort of information could be included to make it more descriptive?  Streamlining the process of retrieving and searching through logs might be a good future task, though.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471121795/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471122931","html_url":"https://github.com/apache/druid/issues/7217#issuecomment-471122931","issue_url":"https://api.github.com/repos/apache/druid/issues/7217","id":471122931,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTEyMjkzMQ==","user":{"login":"justinborromeo","id":9417701,"node_id":"MDQ6VXNlcjk0MTc3MDE=","avatar_url":"https://avatars.githubusercontent.com/u/9417701?v=4","gravatar_id":"","url":"https://api.github.com/users/justinborromeo","html_url":"https://github.com/justinborromeo","followers_url":"https://api.github.com/users/justinborromeo/followers","following_url":"https://api.github.com/users/justinborromeo/following{/other_user}","gists_url":"https://api.github.com/users/justinborromeo/gists{/gist_id}","starred_url":"https://api.github.com/users/justinborromeo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/justinborromeo/subscriptions","organizations_url":"https://api.github.com/users/justinborromeo/orgs","repos_url":"https://api.github.com/users/justinborromeo/repos","events_url":"https://api.github.com/users/justinborromeo/events{/privacy}","received_events_url":"https://api.github.com/users/justinborromeo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T00:19:59Z","updated_at":"2019-03-09T00:19:59Z","author_association":"CONTRIBUTOR","body":"@gianm \r\n\r\n> How would this work -- how would the Logger find the right Supervisor object? I'm also not sure why it's necessary to modify the logger. Why not create a non-Logger-based method that does the same thing, that is part of the Supervisor itself and can be called directly from within the Supervisor code?\r\n\r\nMy thinking was that the modified Logger could accept an injected TaskMaster object (which contains a SupervisorManager object) and retrieve the correct Supervisor object based on the provided supervisorId.  However, I do agree that putting the storage logic in the Supervisor class would be a cleaner design.\r\n\r\n> I think this misses one important piece of information needed for diagnostics: what the supervisor was trying to do when it encountered the error, and whether the error is blocking progress or not. Probably the most common errors for the supervisor to run into are trouble connecting to the upstream system (Kafka/Kinesis). But it's important to know: was this the initial connection - meaning things are probably totally broken? Or was this not the initial connection, but a later one - meaning something that used to be working, now no longer works? Is it being retried or is it waiting for the user to do something? Also, is the error condition still ongoing? Or has it cleared? (Just looking at the most recent error won't tell you that - it also matters if the thing that encountered the error has succeeded in a later retry.)\r\n\r\nI agree that those would be useful but how would you determine whether an exception is blocking progress?  Also, by \"what the supervisor was trying to do\", do you mean the method the exception was thrown from or something higher-level?\r\n\r\n ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471122931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471124071","html_url":"https://github.com/apache/druid/issues/7217#issuecomment-471124071","issue_url":"https://api.github.com/repos/apache/druid/issues/7217","id":471124071,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTEyNDA3MQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T00:26:56Z","updated_at":"2019-03-09T00:26:56Z","author_association":"CONTRIBUTOR","body":"> I agree that those would be useful but how would you determine whether an exception is blocking progress? Also, by \"what the supervisor was trying to do\", do you mean the method the exception was thrown from or something higher-level?\r\n\r\nI was imagining answering both of these the same way: by having a concept of what 'state' a supervisor is in, and inferring from that whether it's blocked or not and what it was trying to do.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471124071/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471124925","html_url":"https://github.com/apache/druid/pull/7073#issuecomment-471124925","issue_url":"https://api.github.com/repos/apache/druid/issues/7073","id":471124925,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTEyNDkyNQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T00:32:37Z","updated_at":"2019-03-09T00:32:37Z","author_association":"CONTRIBUTOR","body":"I'd like to merge this now, and think it is fine to, since @fjy suggested being 'extra careful' and I think we have been. Just waiting for TC to pass successfully.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471124925/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471128027","html_url":"https://github.com/apache/druid/pull/7048#issuecomment-471128027","issue_url":"https://api.github.com/repos/apache/druid/issues/7048","id":471128027,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTEyODAyNw==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T00:53:07Z","updated_at":"2019-03-09T00:53:07Z","author_association":"CONTRIBUTOR","body":"I've added a unit test that I feel pretty good about, which takes advantage of the existing useful test cases in IngestSegmentFirehoseFactoryTimelineTest.\r\n\r\nI have two questions about the impact on CompactionTask from this change that I had added as FIXME comments earlier. The last commit now removes those comments (so that the PR could be in theoretically-mergeable state) but I'd still appreciate feedback on those questions.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471128027/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471134904","html_url":"https://github.com/apache/druid/pull/7203#issuecomment-471134904","issue_url":"https://api.github.com/repos/apache/druid/issues/7203","id":471134904,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTEzNDkwNA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T01:54:00Z","updated_at":"2019-03-09T01:54:00Z","author_association":"CONTRIBUTOR","body":"I'm going to merge this since the [second last commit](https://github.com/apache/incubator-druid/pull/7203/commits/ad6bf2d33671835f1b405f1c2f129aa6995e09c0) succeeded and I fixed only a comment in the last commit.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471134904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471140229","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-471140229","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":471140229,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTE0MDIyOQ==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T03:05:28Z","updated_at":"2019-03-09T03:05:28Z","author_association":"CONTRIBUTOR","body":"@gianm \r\nWhere in this process is the \"pre-aggregation\" performed?\r\nWhere in this process is the \"post-aggregation\" performed?\r\n\r\nAnd by \"aggregation\", I presume that means, for example, two identical items (each of weight 1) will be replaced by one of the items with a weight of 2.  Is that correct?\r\n\r\nI think you may still have a problem, but I can't prove it yet :)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471140229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471167616","html_url":"https://github.com/apache/druid/issues/7219#issuecomment-471167616","issue_url":"https://api.github.com/repos/apache/druid/issues/7219","id":471167616,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTE2NzYxNg==","user":{"login":"kamaci","id":3921885,"node_id":"MDQ6VXNlcjM5MjE4ODU=","avatar_url":"https://avatars.githubusercontent.com/u/3921885?v=4","gravatar_id":"","url":"https://api.github.com/users/kamaci","html_url":"https://github.com/kamaci","followers_url":"https://api.github.com/users/kamaci/followers","following_url":"https://api.github.com/users/kamaci/following{/other_user}","gists_url":"https://api.github.com/users/kamaci/gists{/gist_id}","starred_url":"https://api.github.com/users/kamaci/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kamaci/subscriptions","organizations_url":"https://api.github.com/users/kamaci/orgs","repos_url":"https://api.github.com/users/kamaci/repos","events_url":"https://api.github.com/users/kamaci/events{/privacy}","received_events_url":"https://api.github.com/users/kamaci/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T11:07:13Z","updated_at":"2019-03-09T11:07:13Z","author_association":"MEMBER","body":"I think that problem is not just related to `ITAppenderatorDriverRealtimeIndexTaskTest#testRealtimeIndexTask()`\r\n\r\nI get same error at my PR too:\r\n\r\nhttps://travis-ci.org/apache/incubator-druid/jobs/503941925\r\n\r\nSeems that root cause is related to `java.util.concurrent.ExecutionException: org.jboss.netty.channel.ChannelException`\r\n\r\nThis conversation may give us an insight about this problem: https://github.com/apache/incubator-druid/issues/3393","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471167616/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471212520","html_url":"https://github.com/apache/druid/issues/7219#issuecomment-471212520","issue_url":"https://api.github.com/repos/apache/druid/issues/7219","id":471212520,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTIxMjUyMA==","user":{"login":"justinborromeo","id":9417701,"node_id":"MDQ6VXNlcjk0MTc3MDE=","avatar_url":"https://avatars.githubusercontent.com/u/9417701?v=4","gravatar_id":"","url":"https://api.github.com/users/justinborromeo","html_url":"https://github.com/justinborromeo","followers_url":"https://api.github.com/users/justinborromeo/followers","following_url":"https://api.github.com/users/justinborromeo/following{/other_user}","gists_url":"https://api.github.com/users/justinborromeo/gists{/gist_id}","starred_url":"https://api.github.com/users/justinborromeo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/justinborromeo/subscriptions","organizations_url":"https://api.github.com/users/justinborromeo/orgs","repos_url":"https://api.github.com/users/justinborromeo/repos","events_url":"https://api.github.com/users/justinborromeo/events{/privacy}","received_events_url":"https://api.github.com/users/justinborromeo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T19:07:55Z","updated_at":"2019-03-09T19:07:55Z","author_association":"CONTRIBUTOR","body":"@kamaci That's definitely the issue.  The same error is popping up in #7017 .","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471212520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471230954","html_url":"https://github.com/apache/druid/pull/7213#issuecomment-471230954","issue_url":"https://api.github.com/repos/apache/druid/issues/7213","id":471230954,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTIzMDk1NA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T23:16:20Z","updated_at":"2019-03-09T23:16:20Z","author_association":"CONTRIBUTOR","body":"None of the TC inspection errors look related; I believe they are all related to running under the newer version (https://lists.apache.org/thread.html/94182bbaac276c7cca2089be1493b42c0c31c010894887453a10ba94@%3Cdev.druid.apache.org%3E). I'll go ahead and merge this.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471230954/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471232159","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-471232159","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":471232159,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTIzMjE1OQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-09T23:37:48Z","updated_at":"2019-03-09T23:37:48Z","author_association":"CONTRIBUTOR","body":"What do you mean by pre-aggregation and post-aggregation in this context?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471232159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471239640","html_url":"https://github.com/apache/druid/pull/7222#issuecomment-471239640","issue_url":"https://api.github.com/repos/apache/druid/issues/7222","id":471239640,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTIzOTY0MA==","user":{"login":"clintropolis","id":1577461,"node_id":"MDQ6VXNlcjE1Nzc0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/1577461?v=4","gravatar_id":"","url":"https://api.github.com/users/clintropolis","html_url":"https://github.com/clintropolis","followers_url":"https://api.github.com/users/clintropolis/followers","following_url":"https://api.github.com/users/clintropolis/following{/other_user}","gists_url":"https://api.github.com/users/clintropolis/gists{/gist_id}","starred_url":"https://api.github.com/users/clintropolis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintropolis/subscriptions","organizations_url":"https://api.github.com/users/clintropolis/orgs","repos_url":"https://api.github.com/users/clintropolis/repos","events_url":"https://api.github.com/users/clintropolis/events{/privacy}","received_events_url":"https://api.github.com/users/clintropolis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-10T02:06:22Z","updated_at":"2019-03-10T02:06:33Z","author_association":"MEMBER","body":"Oops, test failures is legit, fixing the `LookupIntrospectionResource` auth check error has broken `LookupIntrospectionResourceImplTest`, will fix.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471239640/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471279233","html_url":"https://github.com/apache/druid/pull/7222#issuecomment-471279233","issue_url":"https://api.github.com/repos/apache/druid/issues/7222","id":471279233,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTI3OTIzMw==","user":{"login":"clintropolis","id":1577461,"node_id":"MDQ6VXNlcjE1Nzc0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/1577461?v=4","gravatar_id":"","url":"https://api.github.com/users/clintropolis","html_url":"https://github.com/clintropolis","followers_url":"https://api.github.com/users/clintropolis/followers","following_url":"https://api.github.com/users/clintropolis/following{/other_user}","gists_url":"https://api.github.com/users/clintropolis/gists{/gist_id}","starred_url":"https://api.github.com/users/clintropolis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintropolis/subscriptions","organizations_url":"https://api.github.com/users/clintropolis/orgs","repos_url":"https://api.github.com/users/clintropolis/repos","events_url":"https://api.github.com/users/clintropolis/events{/privacy}","received_events_url":"https://api.github.com/users/clintropolis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-10T11:25:33Z","updated_at":"2019-03-10T11:25:33Z","author_association":"MEMBER","body":"Fixed and combined both `LookupIntrospectionResource` tests, reworking `LookupIntrospectionResourceImplTest` by [borrowing some ideas from past me](https://github.com/apache/incubator-druid/pull/6799/files#diff-20e188fb124810afa111d1ccaccf5f84R95) and putting into a utility class, `WebserverTestUtils`, to help make a test webserver that works with both jersey and guice injections in order to continue test API function like `LookupIntrospectionResourceImplTest` was doing. Hopefully this should make writing other tests of this manner a bit easier than requiring full integration tests.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471279233/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471281523","html_url":"https://github.com/apache/druid/issues/7207#issuecomment-471281523","issue_url":"https://api.github.com/repos/apache/druid/issues/7207","id":471281523,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTI4MTUyMw==","user":{"login":"xueyumusic","id":95261,"node_id":"MDQ6VXNlcjk1MjYx","avatar_url":"https://avatars.githubusercontent.com/u/95261?v=4","gravatar_id":"","url":"https://api.github.com/users/xueyumusic","html_url":"https://github.com/xueyumusic","followers_url":"https://api.github.com/users/xueyumusic/followers","following_url":"https://api.github.com/users/xueyumusic/following{/other_user}","gists_url":"https://api.github.com/users/xueyumusic/gists{/gist_id}","starred_url":"https://api.github.com/users/xueyumusic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xueyumusic/subscriptions","organizations_url":"https://api.github.com/users/xueyumusic/orgs","repos_url":"https://api.github.com/users/xueyumusic/repos","events_url":"https://api.github.com/users/xueyumusic/events{/privacy}","received_events_url":"https://api.github.com/users/xueyumusic/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-10T11:58:20Z","updated_at":"2019-03-10T11:58:20Z","author_association":"CONTRIBUTOR","body":"The current master codes seems to could work for this case and doesn't have this problem, maybe specific version bug...","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471281523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471391900","html_url":"https://github.com/apache/druid/issues/7207#issuecomment-471391900","issue_url":"https://api.github.com/repos/apache/druid/issues/7207","id":471391900,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTM5MTkwMA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T03:23:37Z","updated_at":"2019-03-11T03:23:37Z","author_association":"CONTRIBUTOR","body":"I can't reproduce this on the latest code either. @john-bodley could you please check if your example works in 0.13.0?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471391900/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471393932","html_url":"https://github.com/apache/druid/issues/7126#issuecomment-471393932","issue_url":"https://api.github.com/repos/apache/druid/issues/7126","id":471393932,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTM5MzkzMg==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T03:38:21Z","updated_at":"2019-03-11T03:38:21Z","author_association":"CONTRIBUTOR","body":"The notes talk about 'Maintenance mode for Historicals', which have been renamed recently (#7154).","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471393932/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471434122","html_url":"https://github.com/apache/druid/issues/7225#issuecomment-471434122","issue_url":"https://api.github.com/repos/apache/druid/issues/7225","id":471434122,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTQzNDEyMg==","user":{"login":"cpp424337111","id":21996896,"node_id":"MDQ6VXNlcjIxOTk2ODk2","avatar_url":"https://avatars.githubusercontent.com/u/21996896?v=4","gravatar_id":"","url":"https://api.github.com/users/cpp424337111","html_url":"https://github.com/cpp424337111","followers_url":"https://api.github.com/users/cpp424337111/followers","following_url":"https://api.github.com/users/cpp424337111/following{/other_user}","gists_url":"https://api.github.com/users/cpp424337111/gists{/gist_id}","starred_url":"https://api.github.com/users/cpp424337111/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpp424337111/subscriptions","organizations_url":"https://api.github.com/users/cpp424337111/orgs","repos_url":"https://api.github.com/users/cpp424337111/repos","events_url":"https://api.github.com/users/cpp424337111/events{/privacy}","received_events_url":"https://api.github.com/users/cpp424337111/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T07:39:13Z","updated_at":"2019-03-11T07:39:13Z","author_association":"NONE","body":"I am referring to kafka indexing service","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471434122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471462522","html_url":"https://github.com/apache/druid/issues/6962#issuecomment-471462522","issue_url":"https://api.github.com/repos/apache/druid/issues/6962","id":471462522,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTQ2MjUyMg==","user":{"login":"kamaci","id":3921885,"node_id":"MDQ6VXNlcjM5MjE4ODU=","avatar_url":"https://avatars.githubusercontent.com/u/3921885?v=4","gravatar_id":"","url":"https://api.github.com/users/kamaci","html_url":"https://github.com/kamaci","followers_url":"https://api.github.com/users/kamaci/followers","following_url":"https://api.github.com/users/kamaci/following{/other_user}","gists_url":"https://api.github.com/users/kamaci/gists{/gist_id}","starred_url":"https://api.github.com/users/kamaci/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kamaci/subscriptions","organizations_url":"https://api.github.com/users/kamaci/orgs","repos_url":"https://api.github.com/users/kamaci/repos","events_url":"https://api.github.com/users/kamaci/events{/privacy}","received_events_url":"https://api.github.com/users/kamaci/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T09:20:57Z","updated_at":"2019-03-11T09:20:57Z","author_association":"MEMBER","body":"Closing this issue since https://github.com/druid-io/druid-io.github.io/pull/560 is merged.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471462522/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471526501","html_url":"https://github.com/apache/druid/issues/7027#issuecomment-471526501","issue_url":"https://api.github.com/repos/apache/druid/issues/7027","id":471526501,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTUyNjUwMQ==","user":{"login":"kamaci","id":3921885,"node_id":"MDQ6VXNlcjM5MjE4ODU=","avatar_url":"https://avatars.githubusercontent.com/u/3921885?v=4","gravatar_id":"","url":"https://api.github.com/users/kamaci","html_url":"https://github.com/kamaci","followers_url":"https://api.github.com/users/kamaci/followers","following_url":"https://api.github.com/users/kamaci/following{/other_user}","gists_url":"https://api.github.com/users/kamaci/gists{/gist_id}","starred_url":"https://api.github.com/users/kamaci/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kamaci/subscriptions","organizations_url":"https://api.github.com/users/kamaci/orgs","repos_url":"https://api.github.com/users/kamaci/repos","events_url":"https://api.github.com/users/kamaci/events{/privacy}","received_events_url":"https://api.github.com/users/kamaci/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T12:53:03Z","updated_at":"2019-03-11T12:53:03Z","author_association":"MEMBER","body":"I've started to work on this issue. I have 3 possible solutions on undefined schema fields:\r\n\r\n1) If value can be convertible to `Float` than convert to `Float`, otherwise try with `Long`, otherwise go with `String`.\r\n\r\n2) If field name ends with `_l,` and is not defined at scheme, and a config value of `schemeless mode` is enabled then convert to `Long`, so on so forth.\r\n\r\n3) Create a regex defined field. Accept a regex value and make transformation on it which is a generic solution of 2. i.e.:\r\n\r\n```\r\n{ \"pattern\": \"*_l\", \"type\": \"long\" },\r\n{ \"pattern\": \"*_f\", \"type\": \"float\" }\r\n```\r\n\r\n@gianm what do you think?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471526501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471577062","html_url":"https://github.com/apache/druid/pull/7206#issuecomment-471577062","issue_url":"https://api.github.com/repos/apache/druid/issues/7206","id":471577062,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTU3NzA2Mg==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T15:04:54Z","updated_at":"2019-03-11T15:04:54Z","author_association":"MEMBER","body":"@jon-wei added.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471577062/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471577845","html_url":"https://github.com/apache/druid/pull/7206#issuecomment-471577845","issue_url":"https://api.github.com/repos/apache/druid/issues/7206","id":471577845,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTU3Nzg0NQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T15:06:39Z","updated_at":"2019-03-11T15:06:39Z","author_association":"MEMBER","body":"@asdf2014 @gianm could you please review this template?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471577845/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471618413","html_url":"https://github.com/apache/druid/issues/7027#issuecomment-471618413","issue_url":"https://api.github.com/repos/apache/druid/issues/7027","id":471618413,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTYxODQxMw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T16:36:13Z","updated_at":"2019-03-11T16:36:13Z","author_association":"CONTRIBUTOR","body":"Hi @kamaci, thank you for raising this issue. \r\nI’m not sure what solution you are considering to implement. Are you thinking to pick one of them or support all of them?\r\n\r\nAlso, would you please write a proposal before you start implementation? It would make clear what your idea is and what you want to implement. You can write a proposal by opening a new issue and choosing the proposal template. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471618413/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471619854","html_url":"https://github.com/apache/druid/issues/7207#issuecomment-471619854","issue_url":"https://api.github.com/repos/apache/druid/issues/7207","id":471619854,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTYxOTg1NA==","user":{"login":"john-bodley","id":4567245,"node_id":"MDQ6VXNlcjQ1NjcyNDU=","avatar_url":"https://avatars.githubusercontent.com/u/4567245?v=4","gravatar_id":"","url":"https://api.github.com/users/john-bodley","html_url":"https://github.com/john-bodley","followers_url":"https://api.github.com/users/john-bodley/followers","following_url":"https://api.github.com/users/john-bodley/following{/other_user}","gists_url":"https://api.github.com/users/john-bodley/gists{/gist_id}","starred_url":"https://api.github.com/users/john-bodley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/john-bodley/subscriptions","organizations_url":"https://api.github.com/users/john-bodley/orgs","repos_url":"https://api.github.com/users/john-bodley/repos","events_url":"https://api.github.com/users/john-bodley/events{/privacy}","received_events_url":"https://api.github.com/users/john-bodley/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T16:39:57Z","updated_at":"2019-03-11T16:39:57Z","author_association":"MEMBER","body":"@gianm I'll retest when we upgrade to 0.13.0.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471619854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471626803","html_url":"https://github.com/apache/druid/pull/7215#issuecomment-471626803","issue_url":"https://api.github.com/repos/apache/druid/issues/7215","id":471626803,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTYyNjgwMw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T16:56:32Z","updated_at":"2019-03-11T16:56:32Z","author_association":"CONTRIBUTOR","body":"@clintropolis - I just realized that this may not actually solve the problem. It fixes one problem (Jetty stopping before the lookups module) but, I think, introduces another one. In the \"after\" log, Jetty stops before the historical unannounces itself fully:\r\n\r\n```\r\n2019-03-08T10:33:29,371 INFO [Thread-60] org.apache.druid.server.initialization.jetty.JettyServerModule - Waiting 10000 ms for unannouncement to propagate.\r\n2019-03-08T10:33:39,371 INFO [Thread-60] org.apache.druid.server.initialization.jetty.JettyServerModule - Stopping Jetty Server...\r\n2019-03-08T10:33:39,386 INFO [Thread-60] org.eclipse.jetty.server.AbstractConnector - Stopped ServerConnector@3a0aaaf0{HTTP/1.1,[http/1.1]}{0.0.0.0:8083}\r\n2019-03-08T10:33:39,430 INFO [Thread-60] org.apache.druid.server.coordination.CuratorDataSegmentServerAnnouncer - Unannouncing self[DruidServerMetadata{name='localhost:8083', hostAndPort='localhost:8083', hostAndTlsPort='null', maxSize=10000000000, tier='_default_tier', type=historical, priority=0}] at [/druid/announcements/localhost:8083]\r\n2019-03-08T10:33:39,430 INFO [Thread-60] org.apache.druid.curator.announcement.Announcer - unannouncing [/druid/announcements/localhost:8083]\r\n2019-03-08T10:33:39,440 INFO [Thread-60] org.apache.druid.curator.announcement.Announcer - Stopping announcer\r\n2019-03-08T10:33:39,440 INFO [Thread-60] org.apache.druid.curator.announcement.Announcer - unannouncing [/druid/segments/localhost:8083/localhost:8083_historical__default_tier_2019-03-08T10:33:15.556Z_8f9ee73fede947448b9f0f687490281b0]\r\n```\r\n\r\nSince the server is still announced in a way that the Broker ServerView can see, queries will keep coming in to it even after Jetty is stopped. To address this, I believe the SegmentLoadDropHandler, which manages the `/druid/announcements` announcement, needs to stop before the Jetty server does.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471626803/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471681442","html_url":"https://github.com/apache/druid/pull/7048#issuecomment-471681442","issue_url":"https://api.github.com/repos/apache/druid/issues/7048","id":471681442,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTY4MTQ0Mg==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T19:14:05Z","updated_at":"2019-03-11T19:14:05Z","author_association":"CONTRIBUTOR","body":"Most of the TeamCity errors are in untouched code. Two of them are in new code from me but I'm not sure what changes would be useful (see my comments).","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471681442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471702977","html_url":"https://github.com/apache/druid/issues/4947#issuecomment-471702977","issue_url":"https://api.github.com/repos/apache/druid/issues/4947","id":471702977,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTcwMjk3Nw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T20:05:29Z","updated_at":"2019-03-11T20:05:29Z","author_association":"MEMBER","body":"@peferron I don't see why a local cache is needed on historicals in this setting, apart from the short period of time between the end of the execution on the historical and the moment of the population in memcached. But it seems to me that this should properly be handled by a [small \"admission\" cache](https://github.com/apache/incubator-druid/issues/7186), which is write-through by design, so there is no problem that you've described.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471702977/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471706626","html_url":"https://github.com/apache/druid/pull/7048#issuecomment-471706626","issue_url":"https://api.github.com/repos/apache/druid/issues/7048","id":471706626,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTcwNjYyNg==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T20:10:58Z","updated_at":"2019-03-11T20:10:58Z","author_association":"CONTRIBUTOR","body":"It was probably because of the [changed Intellij version](https://lists.apache.org/thread.html/94182bbaac276c7cca2089be1493b42c0c31c010894887453a10ba94@%3Cdev.druid.apache.org%3E) which is reverted back now. I restarted TemCity.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471706626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471723357","html_url":"https://github.com/apache/druid/pull/7215#issuecomment-471723357","issue_url":"https://api.github.com/repos/apache/druid/issues/7215","id":471723357,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTcyMzM1Nw==","user":{"login":"clintropolis","id":1577461,"node_id":"MDQ6VXNlcjE1Nzc0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/1577461?v=4","gravatar_id":"","url":"https://api.github.com/users/clintropolis","html_url":"https://github.com/clintropolis","followers_url":"https://api.github.com/users/clintropolis/followers","following_url":"https://api.github.com/users/clintropolis/following{/other_user}","gists_url":"https://api.github.com/users/clintropolis/gists{/gist_id}","starred_url":"https://api.github.com/users/clintropolis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintropolis/subscriptions","organizations_url":"https://api.github.com/users/clintropolis/orgs","repos_url":"https://api.github.com/users/clintropolis/repos","events_url":"https://api.github.com/users/clintropolis/events{/privacy}","received_events_url":"https://api.github.com/users/clintropolis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T20:48:01Z","updated_at":"2019-03-11T20:48:01Z","author_association":"MEMBER","body":"Yes, this is correct for curator based segment discovery, I will resolve the issue in a follow-up PR.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471723357/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471745918","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-471745918","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":471745918,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc0NTkxOA==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T21:48:19Z","updated_at":"2019-03-11T21:48:19Z","author_association":"CONTRIBUTOR","body":"From @peferron 's comment above  \"That's one example of the usefulness of accepting any Druid aggregation or post-aggregation as a metric . \"https://github.com/apache/incubator-druid/issues/7187#issuecomment-470386898.\r\n\r\nJust wondering if \"Druid Aggregation\" occurs in the node and \"post-aggregation\" occurs on the broker?\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471745918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471777001","html_url":"https://github.com/apache/druid/pull/7048#issuecomment-471777001","issue_url":"https://api.github.com/repos/apache/druid/issues/7048","id":471777001,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc3NzAwMQ==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T23:11:09Z","updated_at":"2019-03-11T23:11:09Z","author_association":"CONTRIBUTOR","body":"Good, TeamCity passed this time.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471777001/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471780934","html_url":"https://github.com/apache/druid/issues/6958#issuecomment-471780934","issue_url":"https://api.github.com/repos/apache/druid/issues/6958","id":471780934,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc4MDkzNA==","user":{"login":"pdeva","id":3190176,"node_id":"MDQ6VXNlcjMxOTAxNzY=","avatar_url":"https://avatars.githubusercontent.com/u/3190176?v=4","gravatar_id":"","url":"https://api.github.com/users/pdeva","html_url":"https://github.com/pdeva","followers_url":"https://api.github.com/users/pdeva/followers","following_url":"https://api.github.com/users/pdeva/following{/other_user}","gists_url":"https://api.github.com/users/pdeva/gists{/gist_id}","starred_url":"https://api.github.com/users/pdeva/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdeva/subscriptions","organizations_url":"https://api.github.com/users/pdeva/orgs","repos_url":"https://api.github.com/users/pdeva/repos","events_url":"https://api.github.com/users/pdeva/events{/privacy}","received_events_url":"https://api.github.com/users/pdeva/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T23:25:56Z","updated_at":"2019-03-11T23:25:56Z","author_association":"CONTRIBUTOR","body":"is this the cause of #6854 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471780934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471783754","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-471783754","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":471783754,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc4Mzc1NA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T23:37:21Z","updated_at":"2019-03-11T23:37:21Z","author_association":"CONTRIBUTOR","body":"> From @peferron 's comment above \"That's one example of the usefulness of accepting any Druid aggregation or post-aggregation as a metric . \"#7187 (comment).\r\n> \r\n> Just wondering if \"Druid Aggregation\" occurs in the node and \"post-aggregation\" occurs on the broker?\r\n\r\nAh, usually, aggregation happens on data nodes and post-aggregation happens on the broker. But if you're sorting on a post-aggregation (like an average, which in Druid is a post-aggregation division) then that particular post-aggregation is done on data nodes right before the early-limiting step. Sometimes this works great and sometimes it's wildly inaccurate. You do need to be a little careful with this particular feature.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471783754/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471783918","html_url":"https://github.com/apache/druid/issues/6958#issuecomment-471783918","issue_url":"https://api.github.com/repos/apache/druid/issues/6958","id":471783918,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc4MzkxOA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T23:38:01Z","updated_at":"2019-03-11T23:38:01Z","author_association":"CONTRIBUTOR","body":"It sounds like it probably is.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471783918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471784337","html_url":"https://github.com/apache/druid/issues/6958#issuecomment-471784337","issue_url":"https://api.github.com/repos/apache/druid/issues/6958","id":471784337,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc4NDMzNw==","user":{"login":"pdeva","id":3190176,"node_id":"MDQ6VXNlcjMxOTAxNzY=","avatar_url":"https://avatars.githubusercontent.com/u/3190176?v=4","gravatar_id":"","url":"https://api.github.com/users/pdeva","html_url":"https://github.com/pdeva","followers_url":"https://api.github.com/users/pdeva/followers","following_url":"https://api.github.com/users/pdeva/following{/other_user}","gists_url":"https://api.github.com/users/pdeva/gists{/gist_id}","starred_url":"https://api.github.com/users/pdeva/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdeva/subscriptions","organizations_url":"https://api.github.com/users/pdeva/orgs","repos_url":"https://api.github.com/users/pdeva/repos","events_url":"https://api.github.com/users/pdeva/events{/privacy}","received_events_url":"https://api.github.com/users/pdeva/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T23:39:46Z","updated_at":"2019-03-11T23:39:46Z","author_association":"CONTRIBUTOR","body":"the documentation for rolling updates should then atleast reflect this info that there can be several minutes of query downtime when doing a rolling update to the overlord.\r\nif any configuration value can be adjusted to make this downtime shorter, it should be listed in said documentation","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471784337/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471784964","html_url":"https://github.com/apache/druid/issues/6958#issuecomment-471784964","issue_url":"https://api.github.com/repos/apache/druid/issues/6958","id":471784964,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc4NDk2NA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T23:42:19Z","updated_at":"2019-03-11T23:42:19Z","author_association":"CONTRIBUTOR","body":"It looks like there is intent to fix this before the next release anyway.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471784964/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471785305","html_url":"https://github.com/apache/druid/issues/6958#issuecomment-471785305","issue_url":"https://api.github.com/repos/apache/druid/issues/6958","id":471785305,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc4NTMwNQ==","user":{"login":"pdeva","id":3190176,"node_id":"MDQ6VXNlcjMxOTAxNzY=","avatar_url":"https://avatars.githubusercontent.com/u/3190176?v=4","gravatar_id":"","url":"https://api.github.com/users/pdeva","html_url":"https://github.com/pdeva","followers_url":"https://api.github.com/users/pdeva/followers","following_url":"https://api.github.com/users/pdeva/following{/other_user}","gists_url":"https://api.github.com/users/pdeva/gists{/gist_id}","starred_url":"https://api.github.com/users/pdeva/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdeva/subscriptions","organizations_url":"https://api.github.com/users/pdeva/orgs","repos_url":"https://api.github.com/users/pdeva/repos","events_url":"https://api.github.com/users/pdeva/events{/privacy}","received_events_url":"https://api.github.com/users/pdeva/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T23:43:41Z","updated_at":"2019-03-11T23:43:41Z","author_association":"CONTRIBUTOR","body":"correct me if i am wrong, but this is scheduled for 0.15 release right?\r\nshouldn't we atleast update the 0.14 release where this issue will still exist","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471785305/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471786849","html_url":"https://github.com/apache/druid/issues/7231#issuecomment-471786849","issue_url":"https://api.github.com/repos/apache/druid/issues/7231","id":471786849,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc4Njg0OQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-11T23:50:18Z","updated_at":"2019-03-11T23:50:18Z","author_association":"CONTRIBUTOR","body":"A wrinkle to consider for anyone implementing this: some queries involve streaming results back, and the Broker does not buffer them. Meaning that it could be in the middle of running a query but unable to allow new requests to jump on board (since some portion of the results have already been returned and forgotten).","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471786849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471797380","html_url":"https://github.com/apache/druid/issues/7233#issuecomment-471797380","issue_url":"https://api.github.com/repos/apache/druid/issues/7233","id":471797380,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc5NzM4MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T00:36:38Z","updated_at":"2019-03-12T00:36:38Z","author_association":"CONTRIBUTOR","body":"Hmm, maybe `is_published` is not the best name because overshadowed segments should have been published. How about adding a new column indicating this like `is_queryable` (for non-overshadowed segments)? or `is_overshadowed`?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471797380/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471798796","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-471798796","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":471798796,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc5ODc5Ng==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T00:42:43Z","updated_at":"2019-03-12T00:42:43Z","author_association":"CONTRIBUTOR","body":"Ok, this is what I've been suspecting.  \r\n\r\nIf I understand what has been said here (and I still may be missing something), then WRT the TopN operations:\r\n\r\n- In general, anytime you do limiting prior to an aggregation step you can produce errors, and the size of the resulting error will be unknown since it is data sensitive, and there will be no warning.  This will be true whether it is performed on the node or on the broker.  \r\n\r\n- Also, the `max(k, 1000)` step may be wasteful in the absence of aggregation, and may not provide enough data in the presence of aggregation.  And, again, there will be no warning.\r\n\r\n \r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471798796/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471801522","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-471801522","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":471801522,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgwMTUyMg==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T00:54:37Z","updated_at":"2019-03-12T00:54:37Z","author_association":"CONTRIBUTOR","body":"I don't think you're missing anything. It is definitely 'well known' that the topN algorithm has data-sensitive behaviors and only works if the top things are somewhat consistent from segment to segment. (This is discussed in the documentation.) People have still found it quite useful, though. I think they would also find something FIS-based to be useful; it sounds like it's a tool that is applicable to fewer problems, but better suited for those problems it is applicable to.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471801522/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471803102","html_url":"https://github.com/apache/druid/pull/6923#issuecomment-471803102","issue_url":"https://api.github.com/repos/apache/druid/issues/6923","id":471803102,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgwMzEwMg==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:01:17Z","updated_at":"2019-03-12T01:01:17Z","author_association":"CONTRIBUTOR","body":"@aleksi75 The underlying APIs the console uses can be protected, and if you do so, then valid credentials will be needed in order to do anything useful with the console.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471803102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471803268","html_url":"https://github.com/apache/druid/pull/7020#issuecomment-471803268","issue_url":"https://api.github.com/repos/apache/druid/issues/7020","id":471803268,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgwMzI2OA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:02:00Z","updated_at":"2019-03-12T01:02:00Z","author_association":"CONTRIBUTOR","body":"This has two approvals -- merging it.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471803268/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471805799","html_url":"https://github.com/apache/druid/issues/7233#issuecomment-471805799","issue_url":"https://api.github.com/repos/apache/druid/issues/7233","id":471805799,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgwNTc5OQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:12:14Z","updated_at":"2019-03-12T01:12:14Z","author_association":"CONTRIBUTOR","body":"It might be fine to call them \"not published\" especially if we define it right (like, \"any segments that have used = true in the MD store and are not overshadowed\"). I'm thinking that is the most useful definition for what this column is likely to be used for: finding all segments active in the metadata store. (Overshadowed ones aren't really active since they don't _do_ anything)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471805799/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471808032","html_url":"https://github.com/apache/druid/issues/7193#issuecomment-471808032","issue_url":"https://api.github.com/repos/apache/druid/issues/7193","id":471808032,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgwODAzMg==","user":{"login":"justinborromeo","id":9417701,"node_id":"MDQ6VXNlcjk0MTc3MDE=","avatar_url":"https://avatars.githubusercontent.com/u/9417701?v=4","gravatar_id":"","url":"https://api.github.com/users/justinborromeo","html_url":"https://github.com/justinborromeo","followers_url":"https://api.github.com/users/justinborromeo/followers","following_url":"https://api.github.com/users/justinborromeo/following{/other_user}","gists_url":"https://api.github.com/users/justinborromeo/gists{/gist_id}","starred_url":"https://api.github.com/users/justinborromeo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/justinborromeo/subscriptions","organizations_url":"https://api.github.com/users/justinborromeo/orgs","repos_url":"https://api.github.com/users/justinborromeo/repos","events_url":"https://api.github.com/users/justinborromeo/events{/privacy}","received_events_url":"https://api.github.com/users/justinborromeo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:20:24Z","updated_at":"2019-03-12T01:20:24Z","author_association":"CONTRIBUTOR","body":"Closing: didn't notice this was already noted in #6296.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471808032/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471810520","html_url":"https://github.com/apache/druid/issues/7233#issuecomment-471810520","issue_url":"https://api.github.com/repos/apache/druid/issues/7233","id":471810520,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgxMDUyMA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:30:08Z","updated_at":"2019-03-12T01:30:08Z","author_association":"CONTRIBUTOR","body":"Do you mean adding a definition to doc? I'm afraid if ppl would check it before using the system schema.\r\nAlso, I'm not sure it's most useful. I think most ppl wouldn't care what are in metadata store, but would care what segments are currently being queried. Finally, it's not intuitive and I think it would highly likely mislead users. Why not just calling it `is_used` if you want to match it to `used` in metadata store?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471810520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471810705","html_url":"https://github.com/apache/druid/issues/7233#issuecomment-471810705","issue_url":"https://api.github.com/repos/apache/druid/issues/7233","id":471810705,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgxMDcwNQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:30:58Z","updated_at":"2019-03-12T01:30:58Z","author_association":"CONTRIBUTOR","body":"Well, it shouldn't be called just `is_used` because it's `used segments` - `overshadowed segments`.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471810705/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471811527","html_url":"https://github.com/apache/druid/pull/5789#issuecomment-471811527","issue_url":"https://api.github.com/repos/apache/druid/issues/5789","id":471811527,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgxMTUyNw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:34:37Z","updated_at":"2019-03-12T01:34:37Z","author_association":"CONTRIBUTOR","body":"@glasser Hmm, I just noticed the AggregateCombiner type is a `ObjectAggregateCombiner<String>`. I would think it should be a SerializablePairLongString. I wonder if the combiner just plain doesn't work, and the reason the repro doesn't trigger this is because it is loading too little data and doesn't actually need to combine anything from two different spill files (I believe that's when AggregateCombiners are used).","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471811527/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471814859","html_url":"https://github.com/apache/druid/issues/7233#issuecomment-471814859","issue_url":"https://api.github.com/repos/apache/druid/issues/7233","id":471814859,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgxNDg1OQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:47:11Z","updated_at":"2019-03-12T01:47:11Z","author_association":"CONTRIBUTOR","body":"`is_published` is meant to mean \"has bee published to the metadata store\" according to the docs. And to my heart, in that I do think that's a useful thing for there to be a field for. I guess the question is what does that really mean?\r\n\r\n1. All segments with `used = true` in the metadata store (what it means today)\r\n2. All segments with `used = true` in the metadata store, that are also not overshadowed by any other segments with `used = true` in the metadata store (what this proposal is suggesting changing it to)\r\n\r\nI think (2) makes sense, since as this proposal points out, (1) is unintuitive when doing an overwrite of a set of segments. The old set and new set will both have `used = true` for a while, but for all practical purposes the old set is considered overshadowed at that point.\r\n\r\n> Also, I'm not sure it's most useful. I think most ppl wouldn't care what are in metadata store, but would care what segments are currently being queried. \r\n\r\nThis is sorta like `is_available`. Except I think that one also includes some overshadowed segments, so it's not really what's \"currently being queried\". (I'm not 100% sure about that but maybe 80% sure)\r\n\r\nMaybe what is happening here is that we want versions of both `is_published` and `is_available` that take into account whether the segments have been overshadowed or not.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471814859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471815330","html_url":"https://github.com/apache/druid/pull/5789#issuecomment-471815330","issue_url":"https://api.github.com/repos/apache/druid/issues/5789","id":471815330,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgxNTMzMA==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:49:06Z","updated_at":"2019-03-12T01:49:06Z","author_association":"CONTRIBUTOR","body":"@gianm I could believe that — it would explain why some small reproductions I tried worked but running in our QA cluster didn't.  Though I don't know what a spill file is :)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471815330/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471815596","html_url":"https://github.com/apache/druid/pull/5789#issuecomment-471815596","issue_url":"https://api.github.com/repos/apache/druid/issues/5789","id":471815596,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgxNTU5Ng==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T01:50:04Z","updated_at":"2019-03-12T01:50:04Z","author_association":"CONTRIBUTOR","body":"@glasser By 'spill file' I mean the files that get written to disk every maxRowsInMemory or intermediatePersistPeriod (and are merged later into a single segment)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471815596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471819690","html_url":"https://github.com/apache/druid/pull/6953#issuecomment-471819690","issue_url":"https://api.github.com/repos/apache/druid/issues/6953","id":471819690,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgxOTY5MA==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T02:05:29Z","updated_at":"2019-03-12T02:05:29Z","author_association":"CONTRIBUTOR","body":"@gianm green now","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471819690/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471824154","html_url":"https://github.com/apache/druid/pull/7235#issuecomment-471824154","issue_url":"https://api.github.com/repos/apache/druid/issues/7235","id":471824154,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTgyNDE1NA==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T02:22:51Z","updated_at":"2019-03-12T02:22:51Z","author_association":"CONTRIBUTOR","body":"Skipping TeamCity check for non-code change","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471824154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471842698","html_url":"https://github.com/apache/druid/issues/6942#issuecomment-471842698","issue_url":"https://api.github.com/repos/apache/druid/issues/6942","id":471842698,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTg0MjY5OA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T03:35:36Z","updated_at":"2019-03-12T03:35:36Z","author_association":"CONTRIBUTOR","body":"> @gianm, your analysis also misses the main point and the advantage of the approach that I suggested: we are able to use latest Guava features, such as MoreCollectors, and more. I had to explain this earlier in the thread.\r\n\r\nWell, that's a good point. Why not merge #6948 (which works & solves a real problem) and then potentially implement a source-copying script later?\r\n\r\nAt the time we do that - probably motivated by wanting to use some new Guava features - I think ideally it only copies certain files from Guava. It's simpler to copy the entire tree, but ugly, since it would involve relocating a lot of stuff we don't use. So for tidiness purposes it seems worth it to maintain a list of files we want to copy and a script that copies just those files from a particular, provided Guava version.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471842698/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471910844","html_url":"https://github.com/apache/druid/pull/7224#issuecomment-471910844","issue_url":"https://api.github.com/repos/apache/druid/issues/7224","id":471910844,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTkxMDg0NA==","user":{"login":"asdf2014","id":8108788,"node_id":"MDQ6VXNlcjgxMDg3ODg=","avatar_url":"https://avatars.githubusercontent.com/u/8108788?v=4","gravatar_id":"","url":"https://api.github.com/users/asdf2014","html_url":"https://github.com/asdf2014","followers_url":"https://api.github.com/users/asdf2014/followers","following_url":"https://api.github.com/users/asdf2014/following{/other_user}","gists_url":"https://api.github.com/users/asdf2014/gists{/gist_id}","starred_url":"https://api.github.com/users/asdf2014/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/asdf2014/subscriptions","organizations_url":"https://api.github.com/users/asdf2014/orgs","repos_url":"https://api.github.com/users/asdf2014/repos","events_url":"https://api.github.com/users/asdf2014/events{/privacy}","received_events_url":"https://api.github.com/users/asdf2014/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T08:53:36Z","updated_at":"2019-03-12T08:53:36Z","author_association":"MEMBER","body":"@KazuhitoT BTW, we should also update the `math-expr.md` file at the same time.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471910844/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471960247","html_url":"https://github.com/apache/druid/issues/7027#issuecomment-471960247","issue_url":"https://api.github.com/repos/apache/druid/issues/7027","id":471960247,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTk2MDI0Nw==","user":{"login":"kamaci","id":3921885,"node_id":"MDQ6VXNlcjM5MjE4ODU=","avatar_url":"https://avatars.githubusercontent.com/u/3921885?v=4","gravatar_id":"","url":"https://api.github.com/users/kamaci","html_url":"https://github.com/kamaci","followers_url":"https://api.github.com/users/kamaci/followers","following_url":"https://api.github.com/users/kamaci/following{/other_user}","gists_url":"https://api.github.com/users/kamaci/gists{/gist_id}","starred_url":"https://api.github.com/users/kamaci/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kamaci/subscriptions","organizations_url":"https://api.github.com/users/kamaci/orgs","repos_url":"https://api.github.com/users/kamaci/repos","events_url":"https://api.github.com/users/kamaci/events{/privacy}","received_events_url":"https://api.github.com/users/kamaci/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T11:20:53Z","updated_at":"2019-03-12T11:20:53Z","author_association":"MEMBER","body":"Hi @jihoonson \r\n\r\nThese are possible solutions. I can go with 3th one but I've wanted to talk about it before doing implementation. I can create a proposal with template.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471960247/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471991669","html_url":"https://github.com/apache/druid/issues/7240#issuecomment-471991669","issue_url":"https://api.github.com/repos/apache/druid/issues/7240","id":471991669,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTk5MTY2OQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T13:04:35Z","updated_at":"2019-03-12T13:04:35Z","author_association":"CONTRIBUTOR","body":"How different is it? Floating-point types behave a bit differently from decimal types, and Druid only supports floating point right now. I'm wondering if the behavior you're seeing is expected for floating-point calculations.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471991669/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471992898","html_url":"https://github.com/apache/druid/issues/7239#issuecomment-471992898","issue_url":"https://api.github.com/repos/apache/druid/issues/7239","id":471992898,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTk5Mjg5OA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T13:08:21Z","updated_at":"2019-03-12T13:08:40Z","author_association":"CONTRIBUTOR","body":"Did you manage to nail down which specific change in #6431 introduced this bug?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471992898/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/471999622","html_url":"https://github.com/apache/druid/pull/7121#issuecomment-471999622","issue_url":"https://api.github.com/repos/apache/druid/issues/7121","id":471999622,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTk5OTYyMg==","user":{"login":"kamaci","id":3921885,"node_id":"MDQ6VXNlcjM5MjE4ODU=","avatar_url":"https://avatars.githubusercontent.com/u/3921885?v=4","gravatar_id":"","url":"https://api.github.com/users/kamaci","html_url":"https://github.com/kamaci","followers_url":"https://api.github.com/users/kamaci/followers","following_url":"https://api.github.com/users/kamaci/following{/other_user}","gists_url":"https://api.github.com/users/kamaci/gists{/gist_id}","starred_url":"https://api.github.com/users/kamaci/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kamaci/subscriptions","organizations_url":"https://api.github.com/users/kamaci/orgs","repos_url":"https://api.github.com/users/kamaci/repos","events_url":"https://api.github.com/users/kamaci/events{/privacy}","received_events_url":"https://api.github.com/users/kamaci/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T13:27:02Z","updated_at":"2019-03-12T13:27:02Z","author_association":"MEMBER","body":"@leventov is there anything left to improve my PR?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/471999622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472010080","html_url":"https://github.com/apache/druid/issues/7240#issuecomment-472010080","issue_url":"https://api.github.com/repos/apache/druid/issues/7240","id":472010080,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjAxMDA4MA==","user":{"login":"xqwbx163","id":20455410,"node_id":"MDQ6VXNlcjIwNDU1NDEw","avatar_url":"https://avatars.githubusercontent.com/u/20455410?v=4","gravatar_id":"","url":"https://api.github.com/users/xqwbx163","html_url":"https://github.com/xqwbx163","followers_url":"https://api.github.com/users/xqwbx163/followers","following_url":"https://api.github.com/users/xqwbx163/following{/other_user}","gists_url":"https://api.github.com/users/xqwbx163/gists{/gist_id}","starred_url":"https://api.github.com/users/xqwbx163/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqwbx163/subscriptions","organizations_url":"https://api.github.com/users/xqwbx163/orgs","repos_url":"https://api.github.com/users/xqwbx163/repos","events_url":"https://api.github.com/users/xqwbx163/events{/privacy}","received_events_url":"https://api.github.com/users/xqwbx163/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T13:54:16Z","updated_at":"2019-03-12T13:54:16Z","author_association":"NONE","body":"that is mysql sum result :\r\n![image](https://user-images.githubusercontent.com/20455410/54205129-aade4f00-4510-11e9-8d33-f5ea7af0e5f2.png)\r\norderday:2019-02-01 the sum total is 17058984.3\r\nBut druid sum is 17058984.2967 ,\r\nThis value will be a little less every day, \r\nAnd as the number of days increases, the difference will big more.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472010080/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472072934","html_url":"https://github.com/apache/druid/issues/7239#issuecomment-472072934","issue_url":"https://api.github.com/repos/apache/druid/issues/7239","id":472072934,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjA3MjkzNA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T16:22:54Z","updated_at":"2019-03-12T16:22:54Z","author_association":"CONTRIBUTOR","body":"Yeah, `verifyInitialRecordAndSkipExclusivePartition` was added in #6431. The similar check was done like below before that PR.\r\n\r\n```java\r\n            if (record.offset() < endOffsets.get(record.partition())) {\r\n              if (record.offset() != nextOffsets.get(record.partition())) {\r\n                if (ioConfig.isSkipOffsetGaps()) {\r\n                  log.warn(\r\n                      \"Skipped to offset[%,d] after offset[%,d] in partition[%d].\",\r\n                      record.offset(),\r\n                      nextOffsets.get(record.partition()),\r\n                      record.partition()\r\n                  );\r\n                } else {\r\n                  throw new ISE(\r\n                      \"WTF?! Got offset[%,d] after offset[%,d] in partition[%d].\",\r\n                      record.offset(),\r\n                      nextOffsets.get(record.partition()),\r\n                      record.partition()\r\n                  );\r\n                }\r\n              }\r\n```\r\n\r\n`nextOffsets` was updated only by incrementing an offset by 1 whenever reading a record, not in `setEndOffsets()`. So, after being resumed, the task could read more records to catch up to the assigned end offsets.\r\n\r\nNow, `verifyInitialRecordAndSkipExclusivePartition` checks `initialOffsetsSnapshot` which is updated on `setEndOffsets()`. Since `verifyInitialRecordAndSkipExclusivePartition` checks that record.offset >= initialOffsetsSnapshot, it always throws an error if it tries to read after resume.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472072934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472081406","html_url":"https://github.com/apache/druid/pull/6953#issuecomment-472081406","issue_url":"https://api.github.com/repos/apache/druid/issues/6953","id":472081406,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjA4MTQwNg==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T16:41:28Z","updated_at":"2019-03-12T16:41:28Z","author_association":"CONTRIBUTOR","body":"I still need to update the docs before merging","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472081406/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472101340","html_url":"https://github.com/apache/druid/issues/7233#issuecomment-472101340","issue_url":"https://api.github.com/repos/apache/druid/issues/7233","id":472101340,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjEwMTM0MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T17:28:27Z","updated_at":"2019-03-12T17:28:27Z","author_association":"CONTRIBUTOR","body":"Hmm, ok. It looks that there are some misunderstandings and confusions. First of all, I think it makes sense to keep `is_published` column as it is. But, I also want to add to a new column for non-overshadowed segments in system schema (regardless of their `used` value), like `is_queryable`, `is_available`, or `is_overshadowed` (this is opposite to first 2 names). To keep both columns, I think users can avoid confusions and query more flexibly.\r\n\r\nI also have some questions for the meaning of \"published segments\". \r\n\r\n> `is_published` is meant to mean \"has bee published to the metadata store\" according to the docs.\r\n\r\nI think this means any segments in the `segments` table of the metadata store regardless of their `used` flag. This also matches to the meaning of \"publishing segments\" in indexing tasks. But, you said,\r\n\r\n> All segments with used = true in the metadata store (what it means today)\r\n\r\nThis isn't exactly same with the meaning of `is_published` since overshadowed segments can still be in the metadata store with `used = false`. I'm not sure what you mean by \"what it means today\". Is there any document about this? I feel `is_active` or `is_enabled` is more appropriate for these segments. \r\n\r\n`is_available` (or `is_queryable`) is a bit different. These segments would have mix of `used` if some historicals haven't unannounced them yet. Also, some segments with `used = true` in metadata store can be missing in these segments.\r\n\r\n> This is sorta like is_available. Except I think that one also includes some overshadowed segments, so it's not really what's \"currently being queried\". (I'm not 100% sure about that but maybe 80% sure)\r\n\r\nYeah, if you're thinking the lag in brokers until they refresh their cache, it might not be \"currently\" being queried.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472101340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472125502","html_url":"https://github.com/apache/druid/issues/4947#issuecomment-472125502","issue_url":"https://api.github.com/repos/apache/druid/issues/4947","id":472125502,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjEyNTUwMg==","user":{"login":"peferron","id":7009852,"node_id":"MDQ6VXNlcjcwMDk4NTI=","avatar_url":"https://avatars.githubusercontent.com/u/7009852?v=4","gravatar_id":"","url":"https://api.github.com/users/peferron","html_url":"https://github.com/peferron","followers_url":"https://api.github.com/users/peferron/followers","following_url":"https://api.github.com/users/peferron/following{/other_user}","gists_url":"https://api.github.com/users/peferron/gists{/gist_id}","starred_url":"https://api.github.com/users/peferron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peferron/subscriptions","organizations_url":"https://api.github.com/users/peferron/orgs","repos_url":"https://api.github.com/users/peferron/repos","events_url":"https://api.github.com/users/peferron/events{/privacy}","received_events_url":"https://api.github.com/users/peferron/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T18:26:18Z","updated_at":"2019-03-12T18:26:41Z","author_association":"CONTRIBUTOR","body":"@leventov One of your previous comments indicated that you were using local cache in this setting:\r\n\r\n>  BTW there is hybrid cache and local L1 level is still used for get.\r\n\r\nHave you moved away from this configuration since then?\r\n\r\nI think the local cache could help if the remote cache is churning too much. Since the local cache only stores results for segments located on that historical, it may keep results longer than a remote cache that stores results for all segments in the cluster. Of course it's possible to simply give more memory to the remote cache instead.\r\n\r\nThe admission cache that you linked is also interesting to reduce churn in the remote cache. But even in this situation, you can imagine a local cache being useful to keep results that haven't been deemed worth caching remotely yet. If another query for these results come in, then historicals could get results from the local cache instead of re-scanning the segments, and then potentially write these results to the remote cache if they are now considered worthy.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472125502/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472128679","html_url":"https://github.com/apache/druid/pull/5789#issuecomment-472128679","issue_url":"https://api.github.com/repos/apache/druid/issues/5789","id":472128679,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjEyODY3OQ==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T18:34:30Z","updated_at":"2019-03-12T18:34:30Z","author_association":"CONTRIBUTOR","body":"Hmm, I'm not sure if that's exactly it. I've been trying the standard quickstart Kafka ingestion example with this supervisor:\r\n\r\n```\r\n{\r\n  \"type\": \"kafka\",\r\n  \"dataSchema\": {\r\n    \"dataSource\": \"wikipedia\",\r\n    \"parser\": {\r\n      \"type\": \"string\",\r\n      \"parseSpec\": {\r\n        \"format\": \"json\",\r\n        \"timestampSpec\": {\r\n          \"column\": \"time\",\r\n          \"format\": \"auto\"\r\n        },\r\n        \"dimensionsSpec\": {\r\n          \"dimensions\": [\r\n            \"cityName\",\r\n            \"comment\",\r\n            \"countryIsoCode\",\r\n            \"countryName\",\r\n            \"isAnonymous\",\r\n            \"isMinor\",\r\n            \"isNew\",\r\n            \"isRobot\",\r\n            \"isUnpatrolled\",\r\n            \"metroCode\",\r\n            \"namespace\",\r\n            \"page\",\r\n            \"regionIsoCode\",\r\n            \"regionName\",\r\n            \"user\",\r\n            { \"name\": \"added\", \"type\": \"long\" },\r\n            { \"name\": \"deleted\", \"type\": \"long\" },\r\n            { \"name\": \"delta\", \"type\": \"long\" }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    \"metricsSpec\": [{\r\n      \"name\": \"channel\",\r\n      \"fieldName\": \"channel\",\r\n      \"type\": \"stringFirst\",\r\n      \"maxStringBytes\": 100\r\n    }],\r\n    \"granularitySpec\": {\r\n      \"type\": \"uniform\",\r\n      \"segmentGranularity\": \"DAY\",\r\n      \"queryGranularity\": \"NONE\",\r\n      \"rollup\": false\r\n    }\r\n  },\r\n  \"tuningConfig\": {\r\n    \"type\": \"kafka\",\r\n    \"reportParseExceptions\": false,\r\n    \"maxRowsInMemory\": 3000\r\n  },\r\n  \"ioConfig\": {\r\n    \"topic\": \"wikipedia\",\r\n    \"replicas\": 2,\r\n    \"taskDuration\": \"PT2M\",\r\n    \"completionTimeout\": \"PT20M\",\r\n    \"consumerProperties\": {\r\n      \"bootstrap.servers\": \"localhost:9092\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNote the maxRowsInMemory: 3000, which is less than the number of rows in the wikiticker-2015-09-12-sampled.json. (I tried setting it just to 1 but that leads to OOMs.)  This job runs successfully.\r\n\r\nI should probably try with just an index task instead of kafka to make it simpler though.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472128679/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472135189","html_url":"https://github.com/apache/druid/pull/5789#issuecomment-472135189","issue_url":"https://api.github.com/repos/apache/druid/issues/5789","id":472135189,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjEzNTE4OQ==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T18:52:20Z","updated_at":"2019-03-12T18:52:20Z","author_association":"CONTRIBUTOR","body":"Yeah, running this task against a fresh download of 0.13-incubating succeeds, even though I would think it would need to invoke AggregateCombiner?\r\n\r\n```\r\n{\r\n  \"type\" : \"index\",\r\n  \"spec\" : {\r\n    \"dataSchema\" : {\r\n      \"dataSource\" : \"wikipedia\",\r\n      \"parser\" : {\r\n        \"type\" : \"string\",\r\n        \"parseSpec\" : {\r\n          \"format\" : \"json\",\r\n          \"dimensionsSpec\" : {\r\n            \"dimensions\" : [\r\n              \"cityName\",\r\n              \"comment\",\r\n              \"countryIsoCode\",\r\n              \"countryName\",\r\n              \"isAnonymous\",\r\n              \"isMinor\",\r\n              \"isNew\",\r\n              \"isRobot\",\r\n              \"isUnpatrolled\",\r\n              \"metroCode\",\r\n              \"namespace\",\r\n              \"page\",\r\n              \"regionIsoCode\",\r\n              \"regionName\",\r\n              \"user\",\r\n              { \"name\": \"added\", \"type\": \"long\" },\r\n              { \"name\": \"deleted\", \"type\": \"long\" },\r\n              { \"name\": \"delta\", \"type\": \"long\" }\r\n            ]\r\n          },\r\n          \"timestampSpec\": {\r\n            \"column\": \"time\",\r\n            \"format\": \"iso\"\r\n          }\r\n        }\r\n      },\r\n    \"metricsSpec\": [{\r\n      \"name\": \"channel\",\r\n      \"fieldName\": \"channel\",\r\n      \"type\": \"stringFirst\",\r\n      \"maxStringBytes\": 100\r\n    }],\r\n      \"granularitySpec\" : {\r\n        \"type\" : \"uniform\",\r\n        \"segmentGranularity\" : \"day\",\r\n        \"queryGranularity\" : \"none\",\r\n        \"intervals\" : [\"2015-09-12/2015-09-13\"],\r\n        \"rollup\" : false\r\n      }\r\n    },\r\n    \"ioConfig\" : {\r\n      \"type\" : \"index\",\r\n      \"firehose\" : {\r\n        \"type\" : \"local\",\r\n        \"baseDir\" : \"quickstart/tutorial/\",\r\n        \"filter\" : \"wikiticker-2015-09-12-sampled.json.gz\"\r\n      },\r\n      \"appendToExisting\" : false\r\n    },\r\n    \"tuningConfig\" : {\r\n      \"type\" : \"index\",\r\n      \"targetPartitionSize\" : 5000000,\r\n      \"maxRowsInMemory\" : 1000,\r\n      \"forceExtendableShardSpecs\" : true\r\n    }\r\n  }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472135189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472137069","html_url":"https://github.com/apache/druid/pull/5789#issuecomment-472137069","issue_url":"https://api.github.com/repos/apache/druid/issues/5789","id":472137069,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjEzNzA2OQ==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T18:57:43Z","updated_at":"2019-03-12T18:57:43Z","author_association":"CONTRIBUTOR","body":"Oh hmm. `\"rollup\" : false` looks bad, but fixing that to be `\"rollup\": true` also doesn't reproduce.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472137069/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472138276","html_url":"https://github.com/apache/druid/pull/5789#issuecomment-472138276","issue_url":"https://api.github.com/repos/apache/druid/issues/5789","id":472138276,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjEzODI3Ng==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T19:01:05Z","updated_at":"2019-03-12T19:10:38Z","author_association":"CONTRIBUTOR","body":"Oh, right. We need to actually make things roll up with each other, so set a non-trivial queryGranularity. I now have an actual reproduction so I'll open an issue: #7243.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472138276/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472143133","html_url":"https://github.com/apache/druid/pull/7236#issuecomment-472143133","issue_url":"https://api.github.com/repos/apache/druid/issues/7236","id":472143133,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE0MzEzMw==","user":{"login":"peferron","id":7009852,"node_id":"MDQ6VXNlcjcwMDk4NTI=","avatar_url":"https://avatars.githubusercontent.com/u/7009852?v=4","gravatar_id":"","url":"https://api.github.com/users/peferron","html_url":"https://github.com/peferron","followers_url":"https://api.github.com/users/peferron/followers","following_url":"https://api.github.com/users/peferron/following{/other_user}","gists_url":"https://api.github.com/users/peferron/gists{/gist_id}","starred_url":"https://api.github.com/users/peferron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peferron/subscriptions","organizations_url":"https://api.github.com/users/peferron/orgs","repos_url":"https://api.github.com/users/peferron/repos","events_url":"https://api.github.com/users/peferron/events{/privacy}","received_events_url":"https://api.github.com/users/peferron/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T19:15:01Z","updated_at":"2019-03-12T19:15:01Z","author_association":"CONTRIBUTOR","body":"@gianm I'm glad to see that the original PR led to a comprehensive rewrite of the caching doc :)\r\n\r\nWhat I'm curious about is the performance of broker merging in a fully cached scenario. Imagine that all segment results are available in memcached. Then what's the threshold where a single broker getting all results in bulk from the cache then merging them all, starts falling behind farming it out to historicals? Historical caching has its own issues, such as inability of getting results in bulk, and lower local cache hit ratio when replication > 1, so I have a feeling that this threshold could actually be quite high when merging is cheap (simple sums, no HLLs, etc). It's probably really hard to write a good rule of thumb for this in the doc though, since it depends on many factors such as # of historicals, # of segments, result size, result merging cost, etc.\r\n\r\nWhat could be useful, though, is a curated list of holistic caching setups for the entire cluster. It's easy to get lost between all individual settings for using/populating local/remote/hybrid-L1/hybrid-L2 segment-level caches in the brokers, historicals, and MMs. But probably only a handful of distinct combinations of these settings make sense.\r\n\r\nFor example, a simple setup that would be a good starting point for most users would be:\r\n\r\n- Broker: `useResultLevelCache = true`, `populateResultLevelCache = true`\r\n- Historical: `useCache = true`, `populateCache = true`\r\n- And everything else to default.\r\n\r\nA handful of other setups may make sense in more specific scenarios. The discussion in https://github.com/apache/incubator-druid/issues/4947 contains quite elaborate schemes.\r\n\r\nI'm not familiar enough with caching perf at the moment to write such a list of recommended setups, but I intend to benchmark a few of these setups later so perhaps I'll give it a shot after that.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472143133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472146301","html_url":"https://github.com/apache/druid/issues/7243#issuecomment-472146301","issue_url":"https://api.github.com/repos/apache/druid/issues/7243","id":472146301,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE0NjMwMQ==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T19:24:24Z","updated_at":"2019-03-12T19:24:24Z","author_association":"CONTRIBUTOR","body":"I'd be happy to fix this, and it's probably a small fix, but I'm lost as to where the appropriate place to add a unit test is. It seems like the issue here is less \"a specific class's implementation has a bug\" and more \"a class implements the wrong design which only fails in a larger context\", so it seems like I'd want to write a test that actually uses the larger context that a StringFirstAggregatorFactory is used in, instead of just being a unit test that StringFirstAggregateCombiner implements what we now think it should implement. Anyone have a good idea of where such a test could go?  (An integration test seems overkill.)","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472146301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472146765","html_url":"https://github.com/apache/druid/pull/7236#issuecomment-472146765","issue_url":"https://api.github.com/repos/apache/druid/issues/7236","id":472146765,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE0Njc2NQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T19:25:50Z","updated_at":"2019-03-12T19:25:50Z","author_association":"CONTRIBUTOR","body":"Those are all good questions. I'm not sure what the exact tradeoff is between letting the broker use (but not populate) a remote cache. I am sure that for a big enough cluster it's a bad idea, since it would have the same problems that enabling cache population does.\r\n\r\nI think the setup you mentioned is a good one for most users, and if you're interested in doing a PR to add the recommendation to the doc, please do!\r\n\r\nI also think if we fix #5796 we should add to the recommendation that using an external cache is a good way to boost hit rates, if you don't mind the operational overhead of running the external cache. Doing a bulk get on historicals minimizes the overhead of pulling segments. Cache hit rate is still maximized. And we avoid the broker being a bottleneck.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472146765/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472157066","html_url":"https://github.com/apache/druid/pull/7222#issuecomment-472157066","issue_url":"https://api.github.com/repos/apache/druid/issues/7222","id":472157066,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE1NzA2Ng==","user":{"login":"clintropolis","id":1577461,"node_id":"MDQ6VXNlcjE1Nzc0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/1577461?v=4","gravatar_id":"","url":"https://api.github.com/users/clintropolis","html_url":"https://github.com/clintropolis","followers_url":"https://api.github.com/users/clintropolis/followers","following_url":"https://api.github.com/users/clintropolis/following{/other_user}","gists_url":"https://api.github.com/users/clintropolis/gists{/gist_id}","starred_url":"https://api.github.com/users/clintropolis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintropolis/subscriptions","organizations_url":"https://api.github.com/users/clintropolis/orgs","repos_url":"https://api.github.com/users/clintropolis/repos","events_url":"https://api.github.com/users/clintropolis/events{/privacy}","received_events_url":"https://api.github.com/users/clintropolis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T19:56:23Z","updated_at":"2019-03-12T19:56:23Z","author_association":"MEMBER","body":"Would the module introduced in this PR also be a good solution to the problem of #5727 since it would allow lookup serde without loading lookups? Perhaps I could rename `RouterLookupModule` to something more generic if so.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472157066/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472171439","html_url":"https://github.com/apache/druid/issues/7243#issuecomment-472171439","issue_url":"https://api.github.com/repos/apache/druid/issues/7243","id":472171439,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE3MTQzOQ==","user":{"login":"glasser","id":16724,"node_id":"MDQ6VXNlcjE2NzI0","avatar_url":"https://avatars.githubusercontent.com/u/16724?v=4","gravatar_id":"","url":"https://api.github.com/users/glasser","html_url":"https://github.com/glasser","followers_url":"https://api.github.com/users/glasser/followers","following_url":"https://api.github.com/users/glasser/following{/other_user}","gists_url":"https://api.github.com/users/glasser/gists{/gist_id}","starred_url":"https://api.github.com/users/glasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glasser/subscriptions","organizations_url":"https://api.github.com/users/glasser/orgs","repos_url":"https://api.github.com/users/glasser/repos","events_url":"https://api.github.com/users/glasser/events{/privacy}","received_events_url":"https://api.github.com/users/glasser/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T20:38:19Z","updated_at":"2019-03-12T20:38:19Z","author_association":"CONTRIBUTOR","body":"Maybe this is a question that @leventov (who added AggregateCombiners) could help with? I'm wondering where would be a good place to write a test that verifies that a specific AggregateCombiner works in the context of its AggregatoryFactory. My belief is that StringFirstAggregateCombiner (and StringLastAggregateCombiner) doesn't actually act on the right data type, but it doesn't seem like this is something that should be tested just by testing SFAC itself...","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472171439/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472176539","html_url":"https://github.com/apache/druid/issues/6942#issuecomment-472176539","issue_url":"https://api.github.com/repos/apache/druid/issues/6942","id":472176539,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE3NjUzOQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T20:53:09Z","updated_at":"2019-03-12T20:53:38Z","author_association":"MEMBER","body":"On the other hand, when somebody discovers a small utility in Guava that they would use in their code, but it's not copied yet, they may decide to get away without using that small utility because of the burden (or not knowing the process) of copying a new class from Guava.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472176539/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472177426","html_url":"https://github.com/apache/druid/pull/7121#issuecomment-472177426","issue_url":"https://api.github.com/repos/apache/druid/issues/7121","id":472177426,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE3NzQyNg==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T20:55:45Z","updated_at":"2019-03-12T20:55:45Z","author_association":"MEMBER","body":"@kamaci please fix the TC build (https://teamcity.jetbrains.com/viewLog.html?buildId=2047569&tab=Inspection&buildTypeId=OpenSourceProjects_Druid_InspectionsPullRequests), 3 unused imports.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472177426/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472180143","html_url":"https://github.com/apache/druid/issues/4947#issuecomment-472180143","issue_url":"https://api.github.com/repos/apache/druid/issues/4947","id":472180143,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE4MDE0Mw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T21:03:43Z","updated_at":"2019-03-12T21:03:43Z","author_association":"MEMBER","body":"> I think the local cache could help if the remote cache is churning too much. Since the local cache only stores results for segments located on that historical, it may keep results longer than a remote cache that stores results for all segments in the cluster. Of course it's possible to simply give more memory to the remote cache instead.\r\n\r\nYes, you are right, the local cache is not needed (apart from the admission window) only if the remote cache is large enough.\r\n\r\n> But even in this situation, you can imagine a local cache being useful to keep results that haven't been deemed worth caching remotely yet. If another query for these results come in, then historicals could get results from the local cache instead of re-scanning the segments, and then potentially write these results to the remote cache if they are now considered worthy.\r\n\r\nIt looks to me precisely like the description of the admission window.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472180143/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472180696","html_url":"https://github.com/apache/druid/issues/7217#issuecomment-472180696","issue_url":"https://api.github.com/repos/apache/druid/issues/7217","id":472180696,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE4MDY5Ng==","user":{"login":"justinborromeo","id":9417701,"node_id":"MDQ6VXNlcjk0MTc3MDE=","avatar_url":"https://avatars.githubusercontent.com/u/9417701?v=4","gravatar_id":"","url":"https://api.github.com/users/justinborromeo","html_url":"https://github.com/justinborromeo","followers_url":"https://api.github.com/users/justinborromeo/followers","following_url":"https://api.github.com/users/justinborromeo/following{/other_user}","gists_url":"https://api.github.com/users/justinborromeo/gists{/gist_id}","starred_url":"https://api.github.com/users/justinborromeo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/justinborromeo/subscriptions","organizations_url":"https://api.github.com/users/justinborromeo/orgs","repos_url":"https://api.github.com/users/justinborromeo/repos","events_url":"https://api.github.com/users/justinborromeo/events{/privacy}","received_events_url":"https://api.github.com/users/justinborromeo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T21:05:15Z","updated_at":"2019-03-12T21:05:15Z","author_association":"CONTRIBUTOR","body":"Proposed States:\r\n\r\nPOSTED_NOT_RUNNING_YET: Supervisor spec has been posted but waiting for start delay\r\nTRYING_TO_CONTACT_KAFKA / KINESIS: Initially trying to connect to Kafka/Kinesis…hasn’t connected yet.\r\nLOST_CONTACT_WITH_KAFKA / KINESIS: Trying to connect to Kafka/Kinesis…has connected before\r\nTASKS_NOT_CREATED_YET: Supervisor started but hasn’t started indexing tasks yet\r\nRUNNING: Started tasks and waiting for taskDuration to elapse\r\nAWAITING_SHUTDOWN: Shutdown has been called but the supervisor hasn’t shutdown yet\r\nNO_TASKS_RESPONDING: No tasks are responding to status requests\r\n\r\nDoes anyone have any ideas for other states?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472180696/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472183428","html_url":"https://github.com/apache/druid/pull/7222#issuecomment-472183428","issue_url":"https://api.github.com/repos/apache/druid/issues/7222","id":472183428,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE4MzQyOA==","user":{"login":"clintropolis","id":1577461,"node_id":"MDQ6VXNlcjE1Nzc0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/1577461?v=4","gravatar_id":"","url":"https://api.github.com/users/clintropolis","html_url":"https://github.com/clintropolis","followers_url":"https://api.github.com/users/clintropolis/followers","following_url":"https://api.github.com/users/clintropolis/following{/other_user}","gists_url":"https://api.github.com/users/clintropolis/gists{/gist_id}","starred_url":"https://api.github.com/users/clintropolis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintropolis/subscriptions","organizations_url":"https://api.github.com/users/clintropolis/orgs","repos_url":"https://api.github.com/users/clintropolis/repos","events_url":"https://api.github.com/users/clintropolis/events{/privacy}","received_events_url":"https://api.github.com/users/clintropolis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T21:13:15Z","updated_at":"2019-03-12T21:13:15Z","author_association":"MEMBER","body":">Perhaps I could rename RouterLookupModule to something more generic if so.\r\n\r\nRenamed to `LookupSerdeModule`","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472183428/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472184495","html_url":"https://github.com/apache/druid/issues/7217#issuecomment-472184495","issue_url":"https://api.github.com/repos/apache/druid/issues/7217","id":472184495,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE4NDQ5NQ==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T21:16:26Z","updated_at":"2019-03-12T21:16:26Z","author_association":"CONTRIBUTOR","body":"I think NO_TASKS_RESPONDING is more of a kind of failure than a state (the state would be more why the supervisor was trying to contact tasks).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472184495/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472185432","html_url":"https://github.com/apache/druid/issues/7187#issuecomment-472185432","issue_url":"https://api.github.com/repos/apache/druid/issues/7187","id":472185432,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE4NTQzMg==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T21:19:15Z","updated_at":"2019-03-12T21:31:25Z","author_association":"CONTRIBUTOR","body":"@gianm @leventov \r\n\r\nPerhaps it is \"well-known\" amongst the Druid developers, but I think the Druid team is taking a serious risk with Druid's reputation.  Druid's customers may not fully understand that the current TopN functionality may return garbage, even if it is discussed in the documentation (who reads the manual, anyway  :)  ).  \r\n\r\nQuoting @peferron above:\r\n> Going back to your song example, could FIS support getting the top song titles by number of unique listeners over the past week? The **current topN can do that** using HLL sketches as metric (weight). That's one example of the usefulness of accepting any Druid aggregation or post-aggregation as a metric.\r\n\r\nIt is not clear from his statement whether he realizes that \"accepting any Druid aggregation or post-aggregation\" may not work as intended and, in fact may produce meaningless or misleading results.  \r\n\r\nData sensitivity is not a good thing especially given that there is no easy way for a customer to determine whether the data he/she has processed is producing trustworthy results or not.\r\n\r\nI would consider the current TopN functionality to be broken and unreliable, period.   \r\n\r\nHere are two alternatives (there may be others):\r\n- In any \"TopN\" operation do not allow any aggregation steps after the data set has been \"limited\".  This has to be true both on the nodes and on the broker. \r\n- Adopt the Frequent Items sketch for \"TopN\" operations.  Accept that the ordering weight metric is positive integers (longs) and that the aggregation operation is `add()`.  (If you feel you really need real-valued weights, then we can develop for you an FIS based on doubles.  That is not a big deal.)\r\n\r\nMy point is that a better, more efficient, and free solution exists for the most common TopN type operations. Why not use it?  \r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472185432/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472193691","html_url":"https://github.com/apache/druid/issues/7233#issuecomment-472193691","issue_url":"https://api.github.com/repos/apache/druid/issues/7233","id":472193691,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjE5MzY5MQ==","user":{"login":"surekhasaharan","id":13008746,"node_id":"MDQ6VXNlcjEzMDA4NzQ2","avatar_url":"https://avatars.githubusercontent.com/u/13008746?v=4","gravatar_id":"","url":"https://api.github.com/users/surekhasaharan","html_url":"https://github.com/surekhasaharan","followers_url":"https://api.github.com/users/surekhasaharan/followers","following_url":"https://api.github.com/users/surekhasaharan/following{/other_user}","gists_url":"https://api.github.com/users/surekhasaharan/gists{/gist_id}","starred_url":"https://api.github.com/users/surekhasaharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/surekhasaharan/subscriptions","organizations_url":"https://api.github.com/users/surekhasaharan/orgs","repos_url":"https://api.github.com/users/surekhasaharan/repos","events_url":"https://api.github.com/users/surekhasaharan/events{/privacy}","received_events_url":"https://api.github.com/users/surekhasaharan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T21:45:05Z","updated_at":"2019-03-12T21:45:05Z","author_association":"NONE","body":"Below statement is correct :\r\n>All segments with used = true in the metadata store (what it means today)\r\n\r\nthe `is_published` col in `segments` table represents \"all segments in MD store with used=1\". \r\n>is_published is meant to mean \"has bee published to the metadata store\" according to the docs.\r\n\r\nThe doc [here](http://druid.io/docs/latest/querying/sql#system-schema) says above, but I think it's incomplete, as it omits the part about `used=1`.\r\n\r\n@jihoonson Did you mean to suggest that the `is_published` should include all segments from MD store (irrespective of their used flag value) ? I think we should keep the existing behavior where it only shows segments in MD store with `used=1` as I don't see any use of showing segments with `used=0`. In addition, if we enhance the behavior to also exclude overshadowed segments from this column, then I'd be okay renaming it to `is_active`, `is_queryable` or some other name we can agree on. Then the definition of this _to_be_named_ col becomes \"All non-overshadowed segments in MD store with used=1\". \r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472193691/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472215067","html_url":"https://github.com/apache/druid/issues/7217#issuecomment-472215067","issue_url":"https://api.github.com/repos/apache/druid/issues/7217","id":472215067,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjIxNTA2Nw==","user":{"login":"justinborromeo","id":9417701,"node_id":"MDQ6VXNlcjk0MTc3MDE=","avatar_url":"https://avatars.githubusercontent.com/u/9417701?v=4","gravatar_id":"","url":"https://api.github.com/users/justinborromeo","html_url":"https://github.com/justinborromeo","followers_url":"https://api.github.com/users/justinborromeo/followers","following_url":"https://api.github.com/users/justinborromeo/following{/other_user}","gists_url":"https://api.github.com/users/justinborromeo/gists{/gist_id}","starred_url":"https://api.github.com/users/justinborromeo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/justinborromeo/subscriptions","organizations_url":"https://api.github.com/users/justinborromeo/orgs","repos_url":"https://api.github.com/users/justinborromeo/repos","events_url":"https://api.github.com/users/justinborromeo/events{/privacy}","received_events_url":"https://api.github.com/users/justinborromeo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T23:07:07Z","updated_at":"2019-03-13T00:50:09Z","author_association":"CONTRIBUTOR","body":"Updated proposed states and when they change:\r\n\r\n| State                    | Description                                                       | Where supervisor gets set to this state                                                                                                          |\r\n|--------------------------|-------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| POSTED_NOT_RUNNING_YET   | Supervisor spec has been posted but waiting for start delay       | Upon SeekableStreamSupervisor instantiation                                                                                                      |\r\n| TRYING_TO_CONTACT_STREAM | Trying to connect to Kafka/Kinesis...hasn’t connected before      | Upon the first throw of a BrokerNotFoundException (Kafka) or ResourceNotFoundException (Kinesis) if no record has been polled successfully yet.  |\r\n| LOST_CONTACT_WITH_STREAM | Trying to connect to Kafka/Kinesis...has connected before.        | If a BrokerNotFoundException is thrown when polling Kafka for records or a ResourceNotFoundException is thrown when polling Kinesis for records. |\r\n| UNABLE_TO_POLL_RECORDS   | Non-connectivity related error occurring when polling for records | If any KafkaException that isn't a BrokerNotFoundException (for Kafka) or ResourceNotFoundException (for Kinesis) is thrown                      |\r\n| TASKS_NOT_CREATED_YET    | Supervisor started but hasn’t started indexing tasks yet          | At the end of SeekableStreamSupervisor#tryInit()                                                                                                 |\r\n| RUNNING                  | Started tasks and waiting for taskDuration to elapse              | At the end of SeekableStreamSupervisor#createNewTasks()                                                                                          |\r\n| AWAITING_SHUTDOWN        | Shutdown has been called but the supervisor hasn’t shutdown yet   | At the beginning of SeekableStreamSupervisor#stop()                                                                                              |\r\n| SUSPENDED                | Supervisor is in a suspended state                                | At the beginning of SeekableStreamSupervisor#gracefulShutdownInternal()                                                                          |","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472215067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/472220218","html_url":"https://github.com/apache/druid/pull/7133#issuecomment-472220218","issue_url":"https://api.github.com/repos/apache/druid/issues/7133","id":472220218,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MjIyMDIxOA==","user":{"login":"justinborromeo","id":9417701,"node_id":"MDQ6VXNlcjk0MTc3MDE=","avatar_url":"https://avatars.githubusercontent.com/u/9417701?v=4","gravatar_id":"","url":"https://api.github.com/users/justinborromeo","html_url":"https://github.com/justinborromeo","followers_url":"https://api.github.com/users/justinborromeo/followers","following_url":"https://api.github.com/users/justinborromeo/following{/other_user}","gists_url":"https://api.github.com/users/justinborromeo/gists{/gist_id}","starred_url":"https://api.github.com/users/justinborromeo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/justinborromeo/subscriptions","organizations_url":"https://api.github.com/users/justinborromeo/orgs","repos_url":"https://api.github.com/users/justinborromeo/repos","events_url":"https://api.github.com/users/justinborromeo/events{/privacy}","received_events_url":"https://api.github.com/users/justinborromeo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2019-03-12T23:29:32Z","updated_at":"2019-03-12T23:29:32Z","author_association":"CONTRIBUTOR","body":"The way this PR implements time ordering, the entire query will fail if the limits are exceeded on 1 or more historical.  This behaviour makes sense, right?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/472220218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]