[{"url":"https://api.github.com/repos/apache/storm/issues/comments/174549834","html_url":"https://github.com/apache/storm/pull/1035#issuecomment-174549834","issue_url":"https://api.github.com/repos/apache/storm/issues/1035","id":174549834,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NDU0OTgzNA==","user":{"login":"redsanket","id":8295799,"node_id":"MDQ6VXNlcjgyOTU3OTk=","avatar_url":"https://avatars.githubusercontent.com/u/8295799?v=4","gravatar_id":"","url":"https://api.github.com/users/redsanket","html_url":"https://github.com/redsanket","followers_url":"https://api.github.com/users/redsanket/followers","following_url":"https://api.github.com/users/redsanket/following{/other_user}","gists_url":"https://api.github.com/users/redsanket/gists{/gist_id}","starred_url":"https://api.github.com/users/redsanket/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redsanket/subscriptions","organizations_url":"https://api.github.com/users/redsanket/orgs","repos_url":"https://api.github.com/users/redsanket/repos","events_url":"https://api.github.com/users/redsanket/events{/privacy}","received_events_url":"https://api.github.com/users/redsanket/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T15:48:29Z","updated_at":"2016-01-25T15:48:29Z","author_association":"NONE","body":"@HeartSaVioR yes I agree, that would be better, I am closing it now and will create a PR for master\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/174549834/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705154","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705154","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705154,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxNTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T15:48:30Z","updated_at":"2025-01-24T14:46:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1035#issuecomment-174549834\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1035#issuecomment-174549834</a></p>\n\n<p>    @HeartSaVioR yes I agree, that would be better, I am closing it now and will create a PR for master</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705160","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705160","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705160,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxNjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T15:49:50Z","updated_at":"2025-01-24T14:46:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1035\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1035</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705160/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705279","html_url":"https://github.com/apache/storm/issues/5332#issuecomment-2612705279","issue_url":"https://api.github.com/repos/apache/storm/issues/5332","id":2612705279,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUyNzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T16:12:43Z","updated_at":"2025-01-24T14:46:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\">ptgoetz</a>:</i>\n<p>+1 I've been meaning to do this for a while.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705279/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705166","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705166","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705166,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxNjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T16:38:49Z","updated_at":"2025-01-24T14:46:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user redsanket opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1042\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1042</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1496\" title=\"Nimbus periodically throws blobstore-related exception: No matching method found: readBlob for class java.lang.String\" class=\"issue-link\" data-issue-key=\"STORM-1496\"><del>STORM-1496</del></a> Nimbus periodically throws blobstore-related exception</p>\n\n<p>    Can backport to 1.x-branch</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/redsanket/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/redsanket/storm</a> BLOBSTORE-<a href=\"https://issues.apache.org/jira/browse/STORM-1496\" title=\"Nimbus periodically throws blobstore-related exception: No matching method found: readBlob for class java.lang.String\" class=\"issue-link\" data-issue-key=\"STORM-1496\"><del>STORM-1496</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1042.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1042.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1042</p>\n\n<hr />\n<p>commit bddd0db945baf4752c7cae9cf707fcd1616db38d<br/>\nAuthor: Sanket <schintap@untilservice-lm><br/>\nDate:   2016-01-25T16:37:19Z</p>\n\n<p>    fixing sporadic nimbus log failure and topology visualization</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/174576378","html_url":"https://github.com/apache/storm/pull/1042#issuecomment-174576378","issue_url":"https://api.github.com/repos/apache/storm/issues/1042","id":174576378,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NDU3NjM3OA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T16:43:55Z","updated_at":"2016-01-25T21:45:11Z","author_association":"CONTRIBUTOR","body":"+1 pending travis\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/174576378/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705168","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705168","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705168,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxNjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T16:43:56Z","updated_at":"2025-01-24T14:46:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1042#issuecomment-174576378\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1042#issuecomment-174576378</a></p>\n\n<p>    +1 pending screwdriver</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/174599255","html_url":"https://github.com/apache/storm/pull/986#issuecomment-174599255","issue_url":"https://api.github.com/repos/apache/storm/issues/986","id":174599255,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NDU5OTI1NQ==","user":{"login":"hmcl","id":10284328,"node_id":"MDQ6VXNlcjEwMjg0MzI4","avatar_url":"https://avatars.githubusercontent.com/u/10284328?v=4","gravatar_id":"","url":"https://api.github.com/users/hmcl","html_url":"https://github.com/hmcl","followers_url":"https://api.github.com/users/hmcl/followers","following_url":"https://api.github.com/users/hmcl/following{/other_user}","gists_url":"https://api.github.com/users/hmcl/gists{/gist_id}","starred_url":"https://api.github.com/users/hmcl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hmcl/subscriptions","organizations_url":"https://api.github.com/users/hmcl/orgs","repos_url":"https://api.github.com/users/hmcl/repos","events_url":"https://api.github.com/users/hmcl/events{/privacy}","received_events_url":"https://api.github.com/users/hmcl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T17:43:21Z","updated_at":"2016-01-25T17:53:07Z","author_association":"CONTRIBUTOR","body":"@connieyang I will try to have a patch for review by the end of this week. I will also try to keep you posted on the progress. Thanks!\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/174599255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/174636013","html_url":"https://github.com/apache/storm/pull/1042#issuecomment-174636013","issue_url":"https://api.github.com/repos/apache/storm/issues/1042","id":174636013,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NDYzNjAxMw==","user":{"login":"redsanket","id":8295799,"node_id":"MDQ6VXNlcjgyOTU3OTk=","avatar_url":"https://avatars.githubusercontent.com/u/8295799?v=4","gravatar_id":"","url":"https://api.github.com/users/redsanket","html_url":"https://github.com/redsanket","followers_url":"https://api.github.com/users/redsanket/followers","following_url":"https://api.github.com/users/redsanket/following{/other_user}","gists_url":"https://api.github.com/users/redsanket/gists{/gist_id}","starred_url":"https://api.github.com/users/redsanket/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redsanket/subscriptions","organizations_url":"https://api.github.com/users/redsanket/orgs","repos_url":"https://api.github.com/users/redsanket/repos","events_url":"https://api.github.com/users/redsanket/events{/privacy}","received_events_url":"https://api.github.com/users/redsanket/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T19:43:23Z","updated_at":"2016-01-25T19:43:23Z","author_association":"NONE","body":"@HeartSaVioR - Put a pull request against master as per the suggestion\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/174636013/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705173","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705173","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705173,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxNzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T19:43:24Z","updated_at":"2025-01-24T14:46:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1042#issuecomment-174636013\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1042#issuecomment-174636013</a></p>\n\n<p>    @HeartSaVioR - Put a pull request against master as per the suggestion</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612621274","html_url":"https://github.com/apache/storm/issues/4979#issuecomment-2612621274","issue_url":"https://api.github.com/repos/apache/storm/issues/4979","id":2612621274,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MjEyNzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T19:53:29Z","updated_at":"2025-01-24T14:09:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cburch\">cburch</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=erikdw\" class=\"user-hover\" rel=\"erikdw\">Erik Weathers</a><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\" class=\"user-hover\" rel=\"kabhwan\">Jungtaek Lim</a></p>\n\n<p>Oof thank you for pointing me out to the Hortonworks Community.  I didn't realize they were running on a future release!</p>\n\n<p>For any future people with issues, I was lead to this post: <a href=\"https://community.hortonworks.com/questions/8916/submitting-a-topology-to-strom-cluster-required-fi.html\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://community.hortonworks.com/questions/8916/submitting-a-topology-to-strom-cluster-required-fi.html</a> that has the same issue.  This will leave you to HDP's own maven repo here: 'http://repo.hortonworks.com/content/repositories/releases' If you plumb that in to your pom you can pull the specific version you need for your maven release (e.g. our install of HDP 2.3 was using store-core 0.10.0.2.3.0.0-2557).</p>\n\n<p>Thanks again guys!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612621274/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/174722414","html_url":"https://github.com/apache/storm/pull/1042#issuecomment-174722414","issue_url":"https://api.github.com/repos/apache/storm/issues/1042","id":174722414,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NDcyMjQxNA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T23:09:56Z","updated_at":"2016-01-25T23:09:56Z","author_association":"CONTRIBUTOR","body":"+1 \n\nI think we can merge now cause origin pull request (#1035) waits for 3 days, and now there're two committers' +1. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/174722414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705181","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705181","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705181,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T23:09:57Z","updated_at":"2025-01-24T14:46:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1042#issuecomment-174722414\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1042#issuecomment-174722414</a></p>\n\n<p>    +1 </p>\n\n<p>    I think we can merge now cause origin pull request (#1035) waits for 3 days, and now there're two committers' +1. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705181/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705186","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705186","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705186,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T23:14:26Z","updated_at":"2025-01-24T14:46:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1042\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1042</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705186/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705190","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705190","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705190,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxOTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T23:15:41Z","updated_at":"2025-01-24T14:46:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sanket991\" class=\"user-hover\" rel=\"sanket991\">Sanket Reddy</a> for the quick fix.<br/>\nI merged to master and 1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705190/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704853","html_url":"https://github.com/apache/storm/issues/5329#issuecomment-2612704853","issue_url":"https://api.github.com/repos/apache/storm/issues/5329","id":2612704853,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDQ4NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T23:16:48Z","updated_at":"2025-01-24T14:46:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user dossett opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1044\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1044</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1494\" title=\"Storm UI - Add link to supervisor log\" class=\"issue-link\" data-issue-key=\"STORM-1494\"><del>STORM-1494</del></a>: Support multiple file outputs</p>\n\n<p>    This PR will enable storm-hdfs to write to multiple files in a couple of different circumstances:</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>If a bolt requires multiple output files.  For example, the avro bolt needs to write different Avro records with different schemas to different files.  Schema evolution is a common use of Avro so I expect this to be common use.</li>\n</ul>\n\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>Partitioning output of the HDFS bolt.  Based on mailing discussion, there is demand for this feature.</li>\n</ul>\n\n\n<p>    It does introduce a couple of incompatible changes.  The most obvious is adding a method to the FileRotationPolicy interface.  I tried to minimize other API changes at the expense of some less than elegant code in a couple of places.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/dossett/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/dossett/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1494\" title=\"Storm UI - Add link to supervisor log\" class=\"issue-link\" data-issue-key=\"STORM-1494\"><del>STORM-1494</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1044.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1044.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1044</p>\n\n<hr />\n<p>commit 4e16d7a60771155a9c294e43c7c0db7bcebed646<br/>\nAuthor: Aaron Dossett <aaron.dossett@target.com><br/>\nDate:   2016-01-25T23:12:57Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1494\" title=\"Storm UI - Add link to supervisor log\" class=\"issue-link\" data-issue-key=\"STORM-1494\"><del>STORM-1494</del></a>: Support multiple file outputs</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704853/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/174728333","html_url":"https://github.com/apache/storm/pull/1044#issuecomment-174728333","issue_url":"https://api.github.com/repos/apache/storm/issues/1044","id":174728333,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NDcyODMzMw==","user":{"login":"dossett","id":7207582,"node_id":"MDQ6VXNlcjcyMDc1ODI=","avatar_url":"https://avatars.githubusercontent.com/u/7207582?v=4","gravatar_id":"","url":"https://api.github.com/users/dossett","html_url":"https://github.com/dossett","followers_url":"https://api.github.com/users/dossett/followers","following_url":"https://api.github.com/users/dossett/following{/other_user}","gists_url":"https://api.github.com/users/dossett/gists{/gist_id}","starred_url":"https://api.github.com/users/dossett/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dossett/subscriptions","organizations_url":"https://api.github.com/users/dossett/orgs","repos_url":"https://api.github.com/users/dossett/repos","events_url":"https://api.github.com/users/dossett/events{/privacy}","received_events_url":"https://api.github.com/users/dossett/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T23:26:01Z","updated_at":"2016-01-25T23:26:01Z","author_association":"CONTRIBUTOR","body":"Title updated to reflect correct JIRA.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/174728333/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612699639","html_url":"https://github.com/apache/storm/issues/5299#issuecomment-2612699639","issue_url":"https://api.github.com/repos/apache/storm/issues/5299","id":2612699639,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTk2Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T23:26:04Z","updated_at":"2025-01-24T14:44:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dossett commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1044#issuecomment-174728333\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1044#issuecomment-174728333</a></p>\n\n<p>    Title updated to reflect correct JIRA.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612699639/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705007","html_url":"https://github.com/apache/storm/issues/5330#issuecomment-2612705007","issue_url":"https://api.github.com/repos/apache/storm/issues/5330","id":2612705007,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUwMDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-25T23:28:47Z","updated_at":"2025-01-24T14:46:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kabhwan\">kabhwan</a>:</i>\n<p>Also resolved via <a href=\"https://issues.apache.org/jira/browse/STORM-1496\" title=\"Nimbus periodically throws blobstore-related exception: No matching method found: readBlob for class java.lang.String\" class=\"issue-link\" data-issue-key=\"STORM-1496\"><del>STORM-1496</del></a><br/>\n(check once more to see <a href=\"https://issues.apache.org/jira/browse/STORM-1496\" title=\"Nimbus periodically throws blobstore-related exception: No matching method found: readBlob for class java.lang.String\" class=\"issue-link\" data-issue-key=\"STORM-1496\"><del>STORM-1496</del></a> can resolve <a href=\"https://issues.apache.org/jira/browse/STORM-1495\" title=\"Topology visualization is broken\" class=\"issue-link\" data-issue-key=\"STORM-1495\"><del>STORM-1495</del></a>)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/174821689","html_url":"https://github.com/apache/storm/pull/1042#issuecomment-174821689","issue_url":"https://api.github.com/repos/apache/storm/issues/1042","id":174821689,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NDgyMTY4OQ==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T04:43:03Z","updated_at":"2016-01-26T04:43:03Z","author_association":"MEMBER","body":"Verified that topology visualization works fine with this fix.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/174821689/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705194","html_url":"https://github.com/apache/storm/issues/5331#issuecomment-2612705194","issue_url":"https://api.github.com/repos/apache/storm/issues/5331","id":2612705194,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDUxOTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T04:43:04Z","updated_at":"2025-01-24T14:46:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1042#issuecomment-174821689\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1042#issuecomment-174821689</a></p>\n\n<p>    Verified that topology visualization works fine with this fix.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612705194/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864078","html_url":"https://github.com/apache/storm/issues/5336#issuecomment-2612864078","issue_url":"https://api.github.com/repos/apache/storm/issues/5336","id":2612864078,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjQwNzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T08:08:23Z","updated_at":"2025-01-24T15:58:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user caofangkun opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1046\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1046</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1501\" title=\" launch worker process exception will cause supervisor process exited\" class=\"issue-link\" data-issue-key=\"STORM-1501\"><del>STORM-1501</del></a> launch worker process exception will cause supervisor process exited</p>\n\n<p>    <span class=\"error\">&#91;util.clj/async-loop&#93;</span>(<a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/util.clj#L474\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/util.clj#L474</a>) default kill-fn will kill current process  </p>\n\n<p>    when supervisor use <span class=\"error\">&#91;util.clj/launch-process&#93;</span>(<a href=\"https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/util.clj#L546\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/blob/master/storm-core/src/clj/org/apache/storm/util.clj#L546</a>) to launch worker process , if exeception occurs , supervisor process will exit.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/caofangkun/apache-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/caofangkun/apache-storm</a> storm-1501-1</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1046.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1046.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1046</p>\n\n<hr />\n<p>commit 21ef59cadbe4204a0152cef5cf58dffcd928a469<br/>\nAuthor: caofangkun <caofangkun@gmail.com><br/>\nDate:   2016-01-26T08:04:53Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1501\" title=\" launch worker process exception will cause supervisor process exited\" class=\"issue-link\" data-issue-key=\"STORM-1501\"><del>STORM-1501</del></a> launch worker process exception will cause supervisor process exited</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649858","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649858","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649858,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4NTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T09:33:04Z","updated_at":"2025-01-24T14:22:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=johnbaba\">johnbaba</a>:</i>\n<p>please look at <a href=\"https://github.com/apache/storm/pull/1047\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649858/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649864","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649864","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649864,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4NjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T09:33:36Z","updated_at":"2025-01-24T14:22:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#issuecomment-174924218\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#issuecomment-174924218</a></p>\n\n<p>    test</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649864/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649869","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649869","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649869,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4Njk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T12:18:45Z","updated_at":"2025-01-24T14:22:29Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user wuchong commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50827587\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50827587</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) {<br/>\n    +this.conf = conf;<br/>\n    +this.servers = servers;<br/>\n    +this.zk = zk;<br/>\n    +this.leaderLatch = leaderLatch;<br/>\n    +this.id = id;<br/>\n    +this.leaderLatch = leaderLatch;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    duplicately here</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649869/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649872","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649872","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649872,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T12:19:38Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user wuchong commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50827653\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50827653</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    +List<String> childPathList = null;<br/>\n    +if (existsNode(zk, parentnPath, false)) </p>\n{\n    +    childPathList = getChildren(zk, parentnPath, false);\n    +}\n<p>    +for (String child : childPathList) {<br/>\n    +    if (child.startsWith(hostPortInfo)) </p>\n{\n    +LOG.debug(\"deleteNode child \" + child);\n    +deleteNode(zk, parentnPath + \"/\" + child);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Stat setData(CuratorFramework zk, String path, byte[] data) throws RuntimeException {<br/>\n    +<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    return zk.setData().forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static boolean exists(CuratorFramework zk, String path, boolean watch) throws RuntimeException </p>\n{\n    +return existsNode(zk, path, watch);\n    +    }\n<p>    +<br/>\n    +    public static NIOServerCnxnFactory mkInprocessZookeeper(String localdir, Integer port) throws IOException, InterruptedException {<br/>\n    +LOG.info(\"Starting inprocess zookeeper at port \" + port + \" and dir \" + localdir);<br/>\n    +File localfile = new File(localdir);<br/>\n    +ZooKeeperServer zk = new ZooKeeperServer(localfile, localfile, 2000);<br/>\n    +<br/>\n    +NIOServerCnxnFactory factory = null;<br/>\n    +int report = 2000;<br/>\n    +int limitPort = 65535;<br/>\n    +if (port != null) </p>\n{\n    +    report = port;\n    +    limitPort = port;\n    +}\n<p>    +while (true) {<br/>\n    +    try </p>\n{\n    +factory = new NIOServerCnxnFactory();\n    +factory.configure(new InetSocketAddress(port), 0);\n    +break;\n    +    }\n<p> catch (BindException e) {<br/>\n    +report++;<br/>\n    +if (report > limitPort) </p>\n{\n    +    throw new RuntimeException(\"No port is available to launch an inprocess zookeeper\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +factory.startup(zk);<br/>\n    +return factory;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void shutdownInprocessZookeeper(Factory handle) </p>\n{\n    +handle.shutdown();\n    +    }\n<p>    +<br/>\n    +    public static NimbusInfo toNimbusInfo(Participant participant) {<br/>\n    +String id = participant.getId();<br/>\n    +if (StringUtils.isBlank(id)) </p>\n{\n    +    throw new RuntimeException(\"No nimbus leader participant host found, have you started your nimbus hosts?\");\n    +}\n<p>    +NimbusInfo nimbusInfo = NimbusInfo.parse(id);<br/>\n    +nimbusInfo.setLeader(participant.isLeader());<br/>\n    +return nimbusInfo;<br/>\n    +    }<br/>\n    +<br/>\n    +    // Leader latch listener that will be invoked when we either gain or lose leadership<br/>\n    +    public static LeaderLatchListener leaderLatchListenerImpl(Map conf, CuratorFramework zk, LeaderLatch leaderLatch) throws Exception {<br/>\n    +final String hostName = InetAddress.getLocalHost().getCanonicalHostName();<br/>\n    +return new LeaderLatchListener() {<br/>\n    +    @Override<br/>\n    +    public void isLeader() </p>\n{\n    +LOG.info(hostName + \" gained leadership\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void notLeader() </p>\n{\n    +LOG.info(hostName + \" lost leadership.\");\n    +    }\n<p>    +};<br/>\n    +    }<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    missing comment here? </p>\n\n<p>      \"Zookeeper Implementation of ILeaderElector.\"</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649872/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175044569","html_url":"https://github.com/apache/storm/pull/1047#issuecomment-175044569","issue_url":"https://api.github.com/repos/apache/storm/issues/1047","id":175044569,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTA0NDU2OQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:30:02Z","updated_at":"2016-01-26T14:30:02Z","author_association":"CONTRIBUTOR","body":"Looks like you missed a reference to in-process-zookeeper (from the CI)\n\n```\nException in thread \"main\" java.lang.RuntimeException: No such var: org.apache.storm.zookeeper/mk-inprocess-zookeeper, compiling:(org/apache/storm/transactional_test.clj:105:5)\n```\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175044569/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649878","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649878","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649878,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:30:03Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#issuecomment-175044569\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#issuecomment-175044569</a></p>\n\n<p>    Looks like you missed a reference to in-process-zookeeper (from the CI)<br/>\n    ```<br/>\n    Exception in thread \"main\" java.lang.RuntimeException: No such var: org.apache.storm.zookeeper/mk-inprocess-zookeeper, compiling:(org/apache/storm/transactional_test.clj:105:5)<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649883","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649883","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649883,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4ODM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:34:05Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50841330\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50841330</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/callback/DefaultWatcherCallBack.java &#8212;<br/>\n    @@ -0,0 +1,35 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.callback;<br/>\n    +<br/>\n    +import org.apache.storm.zookeeper.ZkEventTypes;<br/>\n    +import org.apache.storm.zookeeper.ZkKeeperStates;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class DefaultWatcherCallBack implements WatcherCallBack {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(DefaultWatcherCallBack.class);<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +LOG.info(\"Zookeeper state update:\" + ZkKeeperStates.getStateName(state) + \",\" + ZkEventTypes.getStateName(type) + \",\" + path);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is new code that didn't exist in storm proper.  I think it would be cleaner to have this be a debug message instead of an info message.  Also could you use \"{}\" substitution instead of +?</p>\n\n<p>    ```<br/>\n    LOG.info(\"Zookeeper state update: {}, {}, {}\", ZkKeeperStates.getStateName(state),  ZkEventTypes.getStateName(type), path);<br/>\n    ``` </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649883/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175048700","html_url":"https://github.com/apache/storm/pull/1038#issuecomment-175048700","issue_url":"https://api.github.com/repos/apache/storm/issues/1038","id":175048700,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTA0ODcwMA==","user":{"login":"vesense","id":6711230,"node_id":"MDQ6VXNlcjY3MTEyMzA=","avatar_url":"https://avatars.githubusercontent.com/u/6711230?v=4","gravatar_id":"","url":"https://api.github.com/users/vesense","html_url":"https://github.com/vesense","followers_url":"https://api.github.com/users/vesense/followers","following_url":"https://api.github.com/users/vesense/following{/other_user}","gists_url":"https://api.github.com/users/vesense/gists{/gist_id}","starred_url":"https://api.github.com/users/vesense/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vesense/subscriptions","organizations_url":"https://api.github.com/users/vesense/orgs","repos_url":"https://api.github.com/users/vesense/repos","events_url":"https://api.github.com/users/vesense/events{/privacy}","received_events_url":"https://api.github.com/users/vesense/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:37:33Z","updated_at":"2016-01-26T15:18:45Z","author_association":"MEMBER","body":"I fixed some issues. Work is going on for `upsert`. (as I state above)\nAnd I will file a new JIRA for the next phase including `MongoMapState`.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175048700/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702991","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612702991","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612702991,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI5OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:37:34Z","updated_at":"2025-01-24T14:45:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#issuecomment-175048700\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#issuecomment-175048700</a></p>\n\n<p>    I fixed some issues. Work is going on for `upsert`.<br/>\n    And I will file a new JIRA for the next phase including `MongoMapState`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702991/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702995","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612702995","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612702995,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI5OTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:38:07Z","updated_at":"2025-01-24T14:45:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#discussion_r50841871\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#discussion_r50841871</a></p>\n\n<p>    &#8212; Diff: external/storm-mongodb/src/main/java/org/apache/storm/mongodb/common/MongoDBClient.java &#8212;<br/>\n    @@ -0,0 +1,66 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.mongodb.common;<br/>\n    +<br/>\n    +import java.util.List;<br/>\n    +<br/>\n    +import org.bson.Document;<br/>\n    +import org.bson.conversions.Bson;<br/>\n    +<br/>\n    +import com.mongodb.MongoClient;<br/>\n    +import com.mongodb.MongoClientURI;<br/>\n    +import com.mongodb.client.MongoCollection;<br/>\n    +import com.mongodb.client.MongoDatabase;<br/>\n    +<br/>\n    +public class MongoDBClient {<br/>\n    +<br/>\n    +    private MongoClient client;<br/>\n    +    private MongoCollection<Document> collection;<br/>\n    +<br/>\n    +    public MongoDBClient(String url, String collectionName) </p>\n{\n    +//Creates a MongoURI from the given string.\n    +MongoClientURI uri = new MongoClientURI(url);\n    +//Creates a MongoClient described by a URI.\n    +this.client = new MongoClient(uri);\n    +//Gets a Database.\n    +MongoDatabase db = client.getDatabase(uri.getDatabase());\n    +//Gets a collection.\n    +this.collection = db.getCollection(collectionName);\n    +    }\n<p>    +<br/>\n    +    public void insert(Document document) </p>\n{\n    +collection.insertOne(document);\n    +    }\n<p>    +<br/>\n    +    public void insert(List<Document> documents) </p>\n{\n    +//This method is equivalent to a call to the bulkWrite method.\n    +collection.insertMany(documents);\n    +    }\n<p>    +<br/>\n    +    public void update(Bson filter, Bson update) {<br/>\n    +//Update all documents in the collection <br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702995/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703002","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612703002","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612703002,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMwMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:38:17Z","updated_at":"2025-01-24T14:45:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#discussion_r50841890\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#discussion_r50841890</a></p>\n\n<p>    &#8212; Diff: external/storm-mongodb/src/main/java/org/apache/storm/mongodb/trident/state/MongoState.java &#8212;<br/>\n    @@ -0,0 +1,97 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.mongodb.trident.state;<br/>\n    +<br/>\n    +import java.io.Serializable;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import org.apache.commons.lang.Validate;<br/>\n    +import org.apache.storm.mongodb.common.MongoDBClient;<br/>\n    +import org.apache.storm.mongodb.common.mapper.MongoMapper;<br/>\n    +import org.apache.storm.trident.operation.TridentCollector;<br/>\n    +import org.apache.storm.trident.state.State;<br/>\n    +import org.apache.storm.trident.tuple.TridentTuple;<br/>\n    +import org.bson.Document;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +<br/>\n    +public class MongoState implements State {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(MongoState.class);<br/>\n    +<br/>\n    +    private Options options;<br/>\n    +    private MongoDBClient mongoClient;<br/>\n    +    private Map map;<br/>\n    +<br/>\n    +    protected MongoState(Map map, int partitionIndex, int numPartitions, Options options) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649888","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649888","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649888,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:39:30Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50842034\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50842034</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/Utils.java &#8212;<br/>\n    @@ -1382,5 +1382,43 @@ public static TopologyInfo getTopologyInfo(String name, String asUser, Map storm<br/>\n public static int toPositive(int number) </p>\n{\n     return number & Integer.MAX_VALUE;\n }\n<p>    +<br/>\n    +    public static RuntimeException wrapInRuntime(Exception e){<br/>\n    +if (e instanceof RuntimeException)</p>\n{\n    +    return (RuntimeException)e;\n    +}\n<p>else </p>\n{\n    +    return new RuntimeException(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static List<String> tokenizePath(String path) {<br/>\n    +String[] toks = path.split(File.separator);<br/>\n    +java.util.ArrayList<String> rtn = new ArrayList<String>();<br/>\n    +for (String str : toks) {<br/>\n    +    if (!str.isEmpty()) </p>\n{\n    +rtn.add(str);\n    +    }\n<p>    +}<br/>\n    +return rtn;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String toksToPath(List<String> toks) {<br/>\n    +StringBuffer buff = new StringBuffer();<br/>\n    +buff.append(File.separator);<br/>\n    +int size = toks.size();<br/>\n    +for (int i = 0; i < size; i++) {<br/>\n    +    buff.append(toks.get<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/information.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/>);<br/>\n    +    if (i < (size - 1)) </p>\n{\n    +buff.append(File.separator);\n    +    }\n<p>    +<br/>\n    +}<br/>\n    +return buff.toString();<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String normalizePath(String path) </p>\n{\n    +String rtn = toksToPath(tokenizePath(path));\n    +return rtn;\n    +    }\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    Can we please move tokenizePath, toksToPath, and normalizePath to Zookeeper.java?  and change them from using File.separator, to use \"/\".  The issue is that they are specific to zookeeper so need the \"/\", without it on windows it will not work.  They should never have been in util.clj to begin with.  I'll update the util.clj JIRA to indicate this too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649888/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649893","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649893","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649893,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4OTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:43:18Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50842461\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50842461</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) </p>\n{\n    +this.conf = conf;\n    +this.servers = servers;\n    +this.zk = zk;\n    +this.leaderLatch = leaderLatch;\n    +this.id = id;\n    +this.leaderLatch = leaderLatch;\n    +this.leaderLatchListener = leaderLatchListener;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) {<br/>\n    +LOG.info(\"no-op for zookeeper implementation\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Could this be a comment instead of a log message?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649893/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649897","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649897","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649897,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk4OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:46:26Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50842866\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50842866</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/ZkEventTypes.java &#8212;<br/>\n    @@ -0,0 +1,43 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +<br/>\n    +public class ZkEventTypes {<br/>\n    +<br/>\n    +    private static HashMap<Watcher.Event.EventType, String> map;<br/>\n    +<br/>\n    +    static </p>\n{\n    +map = new HashMap<Watcher.Event.EventType, String>();\n    +\n    +map.put(Watcher.Event.EventType.None, \":none\");\n    +map.put(Watcher.Event.EventType.NodeCreated, \":node-created\");\n    +map.put(Watcher.Event.EventType.NodeDeleted, \":node-deleted\");\n    +map.put(Watcher.Event.EventType.NodeDataChanged, \":node-data-changed\");\n    +map.put(Watcher.Event.EventType.NodeChildrenChanged, \":node-children-changed\");\n    +\n    +    }\n<p>    +<br/>\n    +    public static String getStateName(Watcher.Event.EventType type) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I would rather see this called getTypeName instead of getStateName.  Of even just getName.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649897/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649903","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649903","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649903,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5MDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:49:08Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50843248\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50843248</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/callback/DefaultWatcherCallBack.java &#8212;<br/>\n    @@ -0,0 +1,35 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.callback;<br/>\n    +<br/>\n    +import org.apache.storm.zookeeper.ZkEventTypes;<br/>\n    +import org.apache.storm.zookeeper.ZkKeeperStates;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class DefaultWatcherCallBack implements WatcherCallBack {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(DefaultWatcherCallBack.class);<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +LOG.info(\"Zookeeper state update:\" + ZkKeeperStates.getStateName(state) + \",\" + ZkEventTypes.getStateName(type) + \",\" + path);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Never mind about making it debug.  I missed original implementation.  I still would like to use the \"{}\" substitution though.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649903/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649907","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649907","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649907,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T14:54:52Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50844220\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50844220</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Could you please file a follow up JIRA to make all of the 'Object port' parameters 'Integer port' instead?  This should be of the java Utils.newCurator too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649907/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649910","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649910","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649910,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:04:42Z","updated_at":"2025-01-24T14:22:30Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50845596\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50845596</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In the original code we did a try-cause.  I am not sure if that is needed here or not, I assume not, but I wanted to point it out if we run into issues while testing.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649910/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703008","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612703008","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612703008,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMwMDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:07:34Z","updated_at":"2025-01-24T14:45:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#discussion_r50846026\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#discussion_r50846026</a></p>\n\n<p>    &#8212; Diff: external/storm-mongodb/src/main/java/org/apache/storm/mongodb/bolt/MongoUpdateBolt.java &#8212;<br/>\n    @@ -0,0 +1,69 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.mongodb.bolt;<br/>\n    +<br/>\n    +import org.apache.commons.lang.Validate;<br/>\n    +import org.apache.storm.mongodb.common.QueryFilterCreator;<br/>\n    +import org.apache.storm.mongodb.common.mapper.MongoMapper;<br/>\n    +import org.apache.storm.topology.OutputFieldsDeclarer;<br/>\n    +import org.apache.storm.tuple.Tuple;<br/>\n    +import org.bson.Document;<br/>\n    +import org.bson.conversions.Bson;<br/>\n    +<br/>\n    +/**<br/>\n    + * Basic bolt for updating from MongoDB.<br/>\n    + *<br/>\n    + * Note: Each MongoUpdateBolt defined in a topology is tied to a specific collection.<br/>\n    + *<br/>\n    + */<br/>\n    +public class MongoUpdateBolt extends AbstractMongoBolt {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Since `MongoUpdateBolt` uses `QueryFilterCreator` for creating a Mongo query Filter, maybe it's more clear to the user. @arunmahadevan 's advice is also make sence. I'd like to listen to other people's opinions.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703008/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649916","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649916","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649916,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5MTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:14:34Z","updated_at":"2025-01-24T14:22:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50847048\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50847048</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) </p>\n{\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}\n<p>    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In this place we do need to do something like the try-cause that was in the original code.  There is a race condition where multiple clients can be doing a mkdirs.  If that happens we need to ignore the NodeExistsException from createNode, but createNode will have wrapped it in a RuntimeException.  If you want to avoid the wrapping/unwrapping and just catch the exception yourself without unwrapping it you could do the following instead.</p>\n\n<p>    ```<br/>\n    try </p>\n{\nzk.create().withMode(CreateMode.PERSISTENT).withACL(acls).forPath(npath, byteArray);\n    }\n<p> catch (KeeperException.NodeExistsException ignored) </p>\n{\n// this can happen when multiple clients doing mkdir at same time\n    }\n<p>    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649916/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703014","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612703014","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612703014,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMwMTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:14:36Z","updated_at":"2025-01-24T14:45:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user vesense commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#discussion_r50847058\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#discussion_r50847058</a></p>\n\n<p>    &#8212; Diff: external/storm-mongodb/src/main/java/org/apache/storm/mongodb/trident/state/MongoState.java &#8212;<br/>\n    @@ -0,0 +1,97 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.mongodb.trident.state;<br/>\n    +<br/>\n    +import java.io.Serializable;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import org.apache.commons.lang.Validate;<br/>\n    +import org.apache.storm.mongodb.common.MongoDBClient;<br/>\n    +import org.apache.storm.mongodb.common.mapper.MongoMapper;<br/>\n    +import org.apache.storm.trident.operation.TridentCollector;<br/>\n    +import org.apache.storm.trident.state.State;<br/>\n    +import org.apache.storm.trident.tuple.TridentTuple;<br/>\n    +import org.bson.Document;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +<br/>\n    +public class MongoState implements State {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(MongoState.class);<br/>\n    +<br/>\n    +    private Options options;<br/>\n    +    private MongoDBClient mongoClient;<br/>\n    +    private Map map;<br/>\n    +<br/>\n    +    protected MongoState(Map map, int partitionIndex, int numPartitions, Options options) </p>\n{\n    +this.options = options;\n    +this.map = map;\n    +    }\n<p>    +<br/>\n    +    public static class Options implements Serializable {<br/>\n    +private String url;<br/>\n    +private String collectionName;<br/>\n    +private MongoMapper mapper;<br/>\n    +<br/>\n    +public Options withUrl(String url) </p>\n{\n    +    this.url = url;\n    +    return this;\n    +}\n<p>    +<br/>\n    +public Options withCollectionName(String collectionName) </p>\n{\n    +    this.collectionName = collectionName;\n    +    return this;\n    +}\n<p>    +<br/>\n    +public Options withMapper(MongoMapper mapper) </p>\n{\n    +    this.mapper = mapper;\n    +    return this;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void prepare() </p>\n{\n    +Validate.notEmpty(options.url, \"url can not be blank or null\");\n    +Validate.notEmpty(options.collectionName, \"collectionName can not be blank or null\");\n    +Validate.notNull(options.mapper, \"MongoMapper can not be null\");\n    +\n    +this.mongoClient = new MongoDBClient(options.url, options.collectionName);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void beginCommit(Long txid) </p>\n{\n    +LOG.debug(\"beginCommit is noop.\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void commit(Long txid) </p>\n{\n    +LOG.debug(\"commit is noop.\");\n    +    }\n<p>    +<br/>\n    +    public void updateState(List<TridentTuple> tuples, TridentCollector collector) {<br/>\n    +List<Document> documents = Lists.newArrayList();<br/>\n    +for (TridentTuple tuple : tuples) </p>\n{\n    +    Document document = options.mapper.toDocument(tuple);\n    +    documents.add(document);\n    +}\n<p>    +this.mongoClient.insert(documents);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The `MongoStateUpdater` is something like `JdbcUpdater`, just for inserting data to a database. <br/>\n    But what you state is also meaningful. I'll think about it</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703014/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649919","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649919","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649919,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5MTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:18:14Z","updated_at":"2025-01-24T14:22:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50847581\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50847581</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In general we probably should not be declaring that we throw a RuntimeException.  This will force other java code to explicitly handle it.  We were wrapping all of the exceptions in Runtime because they were bubbling up through clojure to java code and were violating the java APIs, because apparently clojure can through an exception that is not declared in the API.  We probably want to file a follow on JIRA to clean up the wrapping so the Zookeeper.java APIs don't wrap exceptions, but throw what they need to, and then only when we have to we wrap the exceptions.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649919/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649923","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649923","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649923,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:20:13Z","updated_at":"2025-01-24T14:22:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50847904\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50847904</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we explicitly catch the NoNodeException here instead?  There are lots of other KeeperExceptions that we want to bubble up.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649923/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649927","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649927","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649927,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5Mjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:21:47Z","updated_at":"2025-01-24T14:22:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50848116\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50848116</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    +List<String> childPathList = null;<br/>\n    +if (existsNode(zk, parentnPath, false)) </p>\n{\n    +    childPathList = getChildren(zk, parentnPath, false);\n    +}\n<p>    +for (String child : childPathList) {<br/>\n    +    if (child.startsWith(hostPortInfo)) </p>\n{\n    +LOG.debug(\"deleteNode child \" + child);\n    +deleteNode(zk, parentnPath + \"/\" + child);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Stat setData(CuratorFramework zk, String path, byte[] data) throws RuntimeException {<br/>\n    +<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    return zk.setData().forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static boolean exists(CuratorFramework zk, String path, boolean watch) throws RuntimeException </p>\n{\n    +return existsNode(zk, path, watch);\n    +    }\n<p>    +<br/>\n    +    public static NIOServerCnxnFactory mkInprocessZookeeper(String localdir, Integer port) throws IOException, InterruptedException {<br/>\n    +LOG.info(\"Starting inprocess zookeeper at port \" + port + \" and dir \" + localdir);<br/>\n    +File localfile = new File(localdir);<br/>\n    +ZooKeeperServer zk = new ZooKeeperServer(localfile, localfile, 2000);<br/>\n    +<br/>\n    +NIOServerCnxnFactory factory = null;<br/>\n    +int report = 2000;<br/>\n    +int limitPort = 65535;<br/>\n    +if (port != null) </p>\n{\n    +    report = port;\n    +    limitPort = port;\n    +}\n<p>    +while (true) {<br/>\n    +    try </p>\n{\n    +factory = new NIOServerCnxnFactory();\n    +factory.configure(new InetSocketAddress(port), 0);\n    +break;\n    +    }\n<p> catch (BindException e) {<br/>\n    +report++;<br/>\n    +if (report > limitPort) </p>\n{\n    +    throw new RuntimeException(\"No port is available to launch an inprocess zookeeper\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +factory.startup(zk);<br/>\n    +return factory;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void shutdownInprocessZookeeper(Factory handle) </p>\n{\n    +handle.shutdown();\n    +    }\n<p>    +<br/>\n    +    public static NimbusInfo toNimbusInfo(Participant participant) {<br/>\n    +String id = participant.getId();<br/>\n    +if (StringUtils.isBlank(id)) </p>\n{\n    +    throw new RuntimeException(\"No nimbus leader participant host found, have you started your nimbus hosts?\");\n    +}\n<p>    +NimbusInfo nimbusInfo = NimbusInfo.parse(id);<br/>\n    +nimbusInfo.setLeader(participant.isLeader());<br/>\n    +return nimbusInfo;<br/>\n    +    }<br/>\n    +<br/>\n    +    // Leader latch listener that will be invoked when we either gain or lose leadership<br/>\n    +    public static LeaderLatchListener leaderLatchListenerImpl(Map conf, CuratorFramework zk, LeaderLatch leaderLatch) throws Exception {<br/>\n    +final String hostName = InetAddress.getLocalHost().getCanonicalHostName();<br/>\n    +return new LeaderLatchListener() {<br/>\n    +    @Override<br/>\n    +    public void isLeader() </p>\n{\n    +LOG.info(hostName + \" gained leadership\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void notLeader() </p>\n{\n    +LOG.info(hostName + \" lost leadership.\");\n    +    }\n<p>    +};<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ILeaderElector zkLeaderElector(Map conf) throws Exception </p>\n{\n    +List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +CuratorFramework zk = mkClient(conf, servers, port, \"\", conf);\n    +String leaderLockPath = conf.get(Config.STORM_ZOOKEEPER_ROOT) + \"/leader-lock\";\n    +String id = NimbusInfo.fromConf(conf).toHostPortString();\n    +AtomicReference<LeaderLatch> leaderLatchAtomicReference = new AtomicReference<>(new LeaderLatch(zk, leaderLockPath, id));\n    +AtomicReference<LeaderLatchListener> leaderLatchListenerAtomicReference =\n    +new AtomicReference<>(leaderLatchListenerImpl(conf, zk, leaderLatchAtomicReference.get()));\n    +return new LeaderElectorImp(conf, servers, zk, leaderLockPath, id, leaderLatchAtomicReference, leaderLatchListenerAtomicReference);\n    +    }\n<p>    +<br/>\n    +    //To do modify @return once don't need persistentArrayMap<br/>\n    +    public static PersistentArrayMap getDataWithVersion(CuratorFramework zk, String path, boolean watch) {<br/>\n    +PersistentArrayMap map = null;<br/>\n    +try {<br/>\n    +    byte[] bytes = null;<br/>\n    +    Stat stats = new Stat();<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    bytes = zk.getData().storingStatIn(stats).watched().forPath(npath);\n    +}\n<p> else {<br/>\n    +    bytes = zk.getData().storingStatIn(stats).forPath(npath);<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Extra line (Very very minor)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649932","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649932","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649932,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5MzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:21:50Z","updated_at":"2025-01-24T14:22:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50848126\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50848126</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/cluster_state/zookeeper_state_factory.clj &#8212;<br/>\n    @@ -143,15 +144,15 @@<br/>\n     (stateChanged<br/>\n       <span class=\"error\">&#91;this client newState&#93;</span><br/>\n       (.stateChanged listener client newState)))]</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(zk/add-listener zk-reader curator-listener)))<br/>\n    + (Zookeeper/addListener zk-reader curator-listener)))</li>\n</ul>\n\n\n<p>  (sync-path<br/>\n    <span class=\"error\">&#91;this path&#93;</span></p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(zk/sync-path zk-writer path))<br/>\n    +       (Zookeeper/syncPath zk-writer path))</li>\n</ul>\n\n\n<p>   (delete-node-blobstore<br/>\n     <span class=\"error\">&#91;this path nimbus-host-port-info&#93;</span></p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(zk/delete-node-blobstore zk-writer path nimbus-host-port-info))<br/>\n    +(Zookeeper/deleteDodeBlobstore zk-writer path nimbus-host-port-info))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    must be deleteNodeBlobstore instead of deleteDodeBlobstore \"spelling\"</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649932/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649935","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649935","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649935,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:23:28Z","updated_at":"2025-01-24T14:22:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50848343\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50848343</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Same here deleteNodeBlobstore \"spelling\"</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649935/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649941","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649941","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649941,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:24:24Z","updated_at":"2025-01-24T14:22:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50848452\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50848452</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    +List<String> childPathList = null;<br/>\n    +if (existsNode(zk, parentnPath, false)) </p>\n{\n    +    childPathList = getChildren(zk, parentnPath, false);\n    +}\n<p>    +for (String child : childPathList) {<br/>\n    +    if (child.startsWith(hostPortInfo)) </p>\n{\n    +LOG.debug(\"deleteNode child \" + child);\n    +deleteNode(zk, parentnPath + \"/\" + child);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Stat setData(CuratorFramework zk, String path, byte[] data) throws RuntimeException {<br/>\n    +<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    return zk.setData().forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static boolean exists(CuratorFramework zk, String path, boolean watch) throws RuntimeException </p>\n{\n    +return existsNode(zk, path, watch);\n    +    }\n<p>    +<br/>\n    +    public static NIOServerCnxnFactory mkInprocessZookeeper(String localdir, Integer port) throws IOException, InterruptedException {<br/>\n    +LOG.info(\"Starting inprocess zookeeper at port \" + port + \" and dir \" + localdir);<br/>\n    +File localfile = new File(localdir);<br/>\n    +ZooKeeperServer zk = new ZooKeeperServer(localfile, localfile, 2000);<br/>\n    +<br/>\n    +NIOServerCnxnFactory factory = null;<br/>\n    +int report = 2000;<br/>\n    +int limitPort = 65535;<br/>\n    +if (port != null) </p>\n{\n    +    report = port;\n    +    limitPort = port;\n    +}\n<p>    +while (true) {<br/>\n    +    try </p>\n{\n    +factory = new NIOServerCnxnFactory();\n    +factory.configure(new InetSocketAddress(port), 0);\n    +break;\n    +    }\n<p> catch (BindException e) {<br/>\n    +report++;<br/>\n    +if (report > limitPort) </p>\n{\n    +    throw new RuntimeException(\"No port is available to launch an inprocess zookeeper\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +factory.startup(zk);<br/>\n    +return factory;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void shutdownInprocessZookeeper(Factory handle) </p>\n{\n    +handle.shutdown();\n    +    }\n<p>    +<br/>\n    +    public static NimbusInfo toNimbusInfo(Participant participant) {<br/>\n    +String id = participant.getId();<br/>\n    +if (StringUtils.isBlank(id)) </p>\n{\n    +    throw new RuntimeException(\"No nimbus leader participant host found, have you started your nimbus hosts?\");\n    +}\n<p>    +NimbusInfo nimbusInfo = NimbusInfo.parse(id);<br/>\n    +nimbusInfo.setLeader(participant.isLeader());<br/>\n    +return nimbusInfo;<br/>\n    +    }<br/>\n    +<br/>\n    +    // Leader latch listener that will be invoked when we either gain or lose leadership<br/>\n    +    public static LeaderLatchListener leaderLatchListenerImpl(Map conf, CuratorFramework zk, LeaderLatch leaderLatch) throws Exception {<br/>\n    +final String hostName = InetAddress.getLocalHost().getCanonicalHostName();<br/>\n    +return new LeaderLatchListener() {<br/>\n    +    @Override<br/>\n    +    public void isLeader() </p>\n{\n    +LOG.info(hostName + \" gained leadership\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void notLeader() </p>\n{\n    +LOG.info(hostName + \" lost leadership.\");\n    +    }\n<p>    +};<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ILeaderElector zkLeaderElector(Map conf) throws Exception </p>\n{\n    +List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +CuratorFramework zk = mkClient(conf, servers, port, \"\", conf);\n    +String leaderLockPath = conf.get(Config.STORM_ZOOKEEPER_ROOT) + \"/leader-lock\";\n    +String id = NimbusInfo.fromConf(conf).toHostPortString();\n    +AtomicReference<LeaderLatch> leaderLatchAtomicReference = new AtomicReference<>(new LeaderLatch(zk, leaderLockPath, id));\n    +AtomicReference<LeaderLatchListener> leaderLatchListenerAtomicReference =\n    +new AtomicReference<>(leaderLatchListenerImpl(conf, zk, leaderLatchAtomicReference.get()));\n    +return new LeaderElectorImp(conf, servers, zk, leaderLockPath, id, leaderLatchAtomicReference, leaderLatchListenerAtomicReference);\n    +    }\n<p>    +<br/>\n    +    //To do modify @return once don't need persistentArrayMap<br/>\n    +    public static PersistentArrayMap getDataWithVersion(CuratorFramework zk, String path, boolean watch) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This does not have to be a PersistentArrayMap.  It can be any Map, but if you want to change it to a specific class right now, and update all of the references to it in the clojure code that is fine with me too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649941/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649947","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649947","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649947,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:24:44Z","updated_at":"2025-01-24T14:22:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50848528\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50848528</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    can we have a better name for than parentnPath, it seems confusing</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649950","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649950","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649950,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:29:14Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50849208\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50849208</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) </p>\n{\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    }\n<p> else </p>\n{\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +    return Integer.valueOf(stat.getVersion());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    There is potentially a race condition here that is not in the previous code.  I know this is minor but the checkExists() was there to eliminate this race.  I think what we want for this function is something more like.<br/>\n    ```<br/>\n    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\nString npath = Utils.normalizePath(path);<br/>\nStat stat = null;<br/>\nif (watch) </p>\n{\n    stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n}\n<p> else </p>\n{\n     stat = zk.checkExists().forPath(Utils.normalizePath(path));\n }\n<p>return stat == null ? null : Integer.valueOf(stat.getVersion());<br/>\n    }<br/>\n    ```</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649950/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649958","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649958","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649958,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5NTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:30:05Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50849322\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50849322</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Could we please be explicit in the types of exception thrown, and not just Exception?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649958/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649964","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649964","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649964,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5NjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:31:33Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50849583\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50849583</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    should be deleteNodeBlobstore, not deleteDodeBlobstore</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649964/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649968","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649968","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649968,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:33:23Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50849882\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50849882</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    `parentnPath` seems too close to `parentPath` for me to easily distinguish between the two.  Could you change it to `normalizedPatentPath`, or just `nParentPath`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649968/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649973","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649973","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649973,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5NzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:34:50Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50850102\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50850102</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    +List<String> childPathList = null;<br/>\n    +if (existsNode(zk, parentnPath, false)) </p>\n{\n    +    childPathList = getChildren(zk, parentnPath, false);\n    +}\n<p>    +for (String child : childPathList) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    If the parent path does not exist we will get an NPE here that we would not get before.  Please move this under the existsNode check.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649973/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649976","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649976","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649976,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5NzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:35:35Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50850244\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50850244</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    +List<String> childPathList = null;<br/>\n    +if (existsNode(zk, parentnPath, false)) </p>\n{\n    +    childPathList = getChildren(zk, parentnPath, false);\n    +}\n<p>    +for (String child : childPathList) {<br/>\n    +    if (child.startsWith(hostPortInfo)) {<br/>\n    +LOG.debug(\"deleteNode child \" + child);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    `LOG.debug(\"deleteNode child {}\", child);` instead</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649976/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649981","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649981","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649981,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:36:56Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50850528\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50850528</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    +List<String> childPathList = null;<br/>\n    +if (existsNode(zk, parentnPath, false)) </p>\n{\n    +    childPathList = getChildren(zk, parentnPath, false);\n    +}\n<p>    +for (String child : childPathList) {<br/>\n    +    if (child.startsWith(hostPortInfo)) </p>\n{\n    +LOG.debug(\"deleteNode child \" + child);\n    +deleteNode(zk, parentnPath + \"/\" + child);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Stat setData(CuratorFramework zk, String path, byte[] data) throws RuntimeException {<br/>\n    +<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    return zk.setData().forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static boolean exists(CuratorFramework zk, String path, boolean watch) throws RuntimeException </p>\n{\n    +return existsNode(zk, path, watch);\n    +    }\n<p>    +<br/>\n    +    public static NIOServerCnxnFactory mkInprocessZookeeper(String localdir, Integer port) throws IOException, InterruptedException {<br/>\n    +LOG.info(\"Starting inprocess zookeeper at port \" + port + \" and dir \" + localdir);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    `LOG.info(\"Starting inprocess zookeeper at port {} and dir {}\", port, localdir);` instead</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649981/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649984","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649984","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649984,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:40:06Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50851022\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50851022</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    +List<String> childPathList = null;<br/>\n    +if (existsNode(zk, parentnPath, false)) </p>\n{\n    +    childPathList = getChildren(zk, parentnPath, false);\n    +}\n<p>    +for (String child : childPathList) {<br/>\n    +    if (child.startsWith(hostPortInfo)) </p>\n{\n    +LOG.debug(\"deleteNode child \" + child);\n    +deleteNode(zk, parentnPath + \"/\" + child);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Stat setData(CuratorFramework zk, String path, byte[] data) throws RuntimeException {<br/>\n    +<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    return zk.setData().forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static boolean exists(CuratorFramework zk, String path, boolean watch) throws RuntimeException </p>\n{\n    +return existsNode(zk, path, watch);\n    +    }\n<p>    +<br/>\n    +    public static NIOServerCnxnFactory mkInprocessZookeeper(String localdir, Integer port) throws IOException, InterruptedException {<br/>\n    +LOG.info(\"Starting inprocess zookeeper at port \" + port + \" and dir \" + localdir);<br/>\n    +File localfile = new File(localdir);<br/>\n    +ZooKeeperServer zk = new ZooKeeperServer(localfile, localfile, 2000);<br/>\n    +<br/>\n    +NIOServerCnxnFactory factory = null;<br/>\n    +int report = 2000;<br/>\n    +int limitPort = 65535;<br/>\n    +if (port != null) </p>\n{\n    +    report = port;\n    +    limitPort = port;\n    +}\n<p>    +while (true) {<br/>\n    +    try </p>\n{\n    +factory = new NIOServerCnxnFactory();\n    +factory.configure(new InetSocketAddress(port), 0);\n    +break;\n    +    }\n<p> catch (BindException e) {<br/>\n    +report++;<br/>\n    +if (report > limitPort) </p>\n{\n    +    throw new RuntimeException(\"No port is available to launch an inprocess zookeeper\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +factory.startup(zk);<br/>\n    +return factory;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Are you sure that we don't need the retport?  I see that factory has a getLocalPort method is that good enough?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649988","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649988","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649988,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:42:08Z","updated_at":"2025-01-24T14:22:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50851363\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50851363</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/Zookeeper.java &#8212;<br/>\n    @@ -0,0 +1,355 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import clojure.lang.PersistentArrayMap;<br/>\n    +import clojure.lang.RT;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.api.CuratorEventType;<br/>\n    +import org.apache.curator.framework.api.CuratorListener;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.callback.DefaultWatcherCallBack;<br/>\n    +import org.apache.storm.callback.WatcherCallBack;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.ZookeeperAuthInfo;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.data.ACL;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.apache.zookeeper.server.NIOServerCnxnFactory;<br/>\n    +import org.apache.zookeeper.server.ZooKeeperServer;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.File;<br/>\n    +import java.io.IOException;<br/>\n    +import java.net.BindException;<br/>\n    +import java.net.InetAddress;<br/>\n    +import java.net.InetSocketAddress;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +public class Zookeeper {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(Zookeeper.class);<br/>\n    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack());\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, Map authConf) </p>\n{\n    +return mkClient(conf, servers, port, root, new DefaultWatcherCallBack(), authConf);\n    +    }\n<p>    +<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {<br/>\n    +CuratorFramework fk;<br/>\n    +if (authConf != null) </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));\n    +}\n<p> else </p>\n{\n    +    fk = Utils.newCurator(conf, servers, port, root);\n    +}\n<p>    +<br/>\n    +fk.getCuratorListenable().addListener(new CuratorListener() {<br/>\n    +    @Override<br/>\n    +    public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {<br/>\n    +if (e.getType().equals(CuratorEventType.WATCHED)) </p>\n{\n    +    WatchedEvent event = e.getWatchedEvent();\n    +\n    +    watcher.execute(event.getState(), event.getType(), event.getPath());\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +});<br/>\n    +fk.start();<br/>\n    +return fk;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * connect ZK, register Watch/unhandle Watch<br/>\n    +     *<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static CuratorFramework mkClient(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher) </p>\n{\n    +\n    +return mkClient(conf, servers, port, root, watcher, null);\n    +    }\n<p>    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, org.apache.zookeeper.CreateMode mode, List<ACL> acls)<br/>\n    +    throws RuntimeException {<br/>\n    +<br/>\n    +String ret = null;<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    ret = zk.create().withMode(mode).withACL(acls).forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String createNode(CuratorFramework zk, String path, byte[] data, List<ACL> acls) throws RuntimeException {\n    +return createNode(zk, path, data, org.apache.zookeeper.CreateMode.PERSISTENT, acls);\n    +    }<br/>\n    +<br/>\n    +    public static boolean existsNode(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +Stat stat = null;<br/>\n    +try {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +<br/>\n    +return stat != null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void deleteNode(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, false)) </p>\n{\n    +zk.delete().deletingChildrenIfNeeded().forPath(Utils.normalizePath(path));\n    +    }\n<p>    +<br/>\n    +} catch (KeeperException.NoNodeException e) </p>\n{\n    +    LOG.info(\"exception\", e);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void mkdirs(CuratorFramework zk, String path, List<ACL> acls) throws RuntimeException {<br/>\n    +<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +if (npath.equals(\"/\")) {\n    +    return;\n    +}<br/>\n    +if (existsNode(zk, npath, false)) {    +    return;    +}<br/>\n    +byte[] byteArray = new byte<span class=\"error\">&#91;1&#93;</span>;<br/>\n    +byteArray<span class=\"error\">&#91;0&#93;</span> = (byte) 7;<br/>\n    +createNode(zk, npath, byteArray, org.apache.zookeeper.CreateMode.PERSISTENT, acls);<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void syncPath(CuratorFramework zk, String path) throws RuntimeException {<br/>\n    +try {\n    +    zk.sync().forPath(Utils.normalizePath(path));\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addListener(CuratorFramework zk, ConnectionStateListener listener) </p>\n{\n    +zk.getConnectionStateListenable().addListener(listener);\n    +    }\n<p>    +<br/>\n    +    public static byte[] getData(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (existsNode(zk, npath, watch)) {<br/>\n    +if (watch) </p>\n{\n    +    return zk.getData().watched().forPath(npath);\n    +}\n<p> else </p>\n{\n    +    return zk.getData().forPath(npath);\n    +}\n<p>    +    }<br/>\n    +} catch (KeeperException e) </p>\n{\n    +    // this is fine b/c we still have a watch from the successful exists call\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Integer getVersion(CuratorFramework zk, String path, boolean watch) throws Exception {<br/>\n    +String npath = Utils.normalizePath(path);<br/>\n    +Stat stat = null;<br/>\n    +if (existsNode(zk, npath, watch)) {<br/>\n    +    if (watch) {\n    +stat = zk.checkExists().watched().forPath(Utils.normalizePath(path));\n    +    } else {\n    +stat = zk.checkExists().forPath(Utils.normalizePath(path));\n    +    }<br/>\n    +    return Integer.valueOf(stat.getVersion());<br/>\n    +}<br/>\n    +<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getChildren(CuratorFramework zk, String path, boolean watch) throws RuntimeException {<br/>\n    +<br/>\n    +try {<br/>\n    +    String npath = Utils.normalizePath(path);<br/>\n    +    if (watch) {\n    +return zk.getChildren().watched().forPath(npath);\n    +    } else {\n    +return zk.getChildren().forPath(npath);\n    +    }<br/>\n    +} catch (Exception e) {    +    throw Utils.wrapInRuntime(e);    +}\n<p>    +    }<br/>\n    +<br/>\n    +    // Deletes the state inside the zookeeper for a key, for which the<br/>\n    +    // contents of the key starts with nimbus host port information<br/>\n    +    public static void deleteDodeBlobstore(CuratorFramework zk, String parentPath, String hostPortInfo) throws RuntimeException {<br/>\n    +String parentnPath = Utils.normalizePath(parentPath);<br/>\n    +List<String> childPathList = null;<br/>\n    +if (existsNode(zk, parentnPath, false)) </p>\n{\n    +    childPathList = getChildren(zk, parentnPath, false);\n    +}\n<p>    +for (String child : childPathList) {<br/>\n    +    if (child.startsWith(hostPortInfo)) </p>\n{\n    +LOG.debug(\"deleteNode child \" + child);\n    +deleteNode(zk, parentnPath + \"/\" + child);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Stat setData(CuratorFramework zk, String path, byte[] data) throws RuntimeException {<br/>\n    +<br/>\n    +try </p>\n{\n    +    String npath = Utils.normalizePath(path);\n    +    return zk.setData().forPath(npath, data);\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static boolean exists(CuratorFramework zk, String path, boolean watch) throws RuntimeException </p>\n{\n    +return existsNode(zk, path, watch);\n    +    }\n<p>    +<br/>\n    +    public static NIOServerCnxnFactory mkInprocessZookeeper(String localdir, Integer port) throws IOException, InterruptedException {<br/>\n    +LOG.info(\"Starting inprocess zookeeper at port \" + port + \" and dir \" + localdir);<br/>\n    +File localfile = new File(localdir);<br/>\n    +ZooKeeperServer zk = new ZooKeeperServer(localfile, localfile, 2000);<br/>\n    +<br/>\n    +NIOServerCnxnFactory factory = null;<br/>\n    +int report = 2000;<br/>\n    +int limitPort = 65535;<br/>\n    +if (port != null) </p>\n{\n    +    report = port;\n    +    limitPort = port;\n    +}\n<p>    +while (true) {<br/>\n    +    try </p>\n{\n    +factory = new NIOServerCnxnFactory();\n    +factory.configure(new InetSocketAddress(port), 0);\n    +break;\n    +    }\n<p> catch (BindException e) {<br/>\n    +report++;<br/>\n    +if (report > limitPort) </p>\n{\n    +    throw new RuntimeException(\"No port is available to launch an inprocess zookeeper\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +factory.startup(zk);<br/>\n    +return factory;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void shutdownInprocessZookeeper(Factory handle) </p>\n{\n    +handle.shutdown();\n    +    }\n<p>    +<br/>\n    +    public static NimbusInfo toNimbusInfo(Participant participant) {<br/>\n    +String id = participant.getId();<br/>\n    +if (StringUtils.isBlank(id)) </p>\n{\n    +    throw new RuntimeException(\"No nimbus leader participant host found, have you started your nimbus hosts?\");\n    +}\n<p>    +NimbusInfo nimbusInfo = NimbusInfo.parse(id);<br/>\n    +nimbusInfo.setLeader(participant.isLeader());<br/>\n    +return nimbusInfo;<br/>\n    +    }<br/>\n    +<br/>\n    +    // Leader latch listener that will be invoked when we either gain or lose leadership<br/>\n    +    public static LeaderLatchListener leaderLatchListenerImpl(Map conf, CuratorFramework zk, LeaderLatch leaderLatch) throws Exception {<br/>\n    +final String hostName = InetAddress.getLocalHost().getCanonicalHostName();<br/>\n    +return new LeaderLatchListener() {<br/>\n    +    @Override<br/>\n    +    public void isLeader() </p>\n{\n    +LOG.info(hostName + \" gained leadership\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void notLeader() </p>\n{\n    +LOG.info(hostName + \" lost leadership.\");\n    +    }\n<p>    +};<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ILeaderElector zkLeaderElector(Map conf) throws Exception {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we be explicit on the Exceptions being thrown?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649992","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649992","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649992,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:44:07Z","updated_at":"2025-01-24T14:22:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50851676\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50851676</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) </p>\n{\n    +this.conf = conf;\n    +this.servers = servers;\n    +this.zk = zk;\n    +this.leaderLatch = leaderLatch;\n    +this.id = id;\n    +this.leaderLatch = leaderLatch;\n    +this.leaderLatchListener = leaderLatchListener;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) {<br/>\n    +LOG.info(\"no-op for zookeeper implementation\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Never mind I see in the code it does the same thing.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649992/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612686952","html_url":"https://github.com/apache/storm/issues/5214#issuecomment-2612686952","issue_url":"https://api.github.com/repos/apache/storm/issues/5214","id":2612686952,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2ODY5NTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:44:23Z","updated_at":"2025-01-24T14:38:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=darion\">darion</a>:</i>\n<p>Hi Rebert </p>\n\n<p>Actually I have create a pull request at github <a href=\"https://github.com/apache/storm/pull/932\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/932</a> but maybe not very successfully .</p>\n\n<p>Thank you for you great work <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612686952/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649998","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612649998","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612649998,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDk5OTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:45:02Z","updated_at":"2025-01-24T14:22:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50851802\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50851802</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) {<br/>\n    +this.conf = conf;<br/>\n    +this.servers = servers;<br/>\n    +this.zk = zk;<br/>\n    +this.leaderLatch = leaderLatch;<br/>\n    +this.id = id;<br/>\n    +this.leaderLatch = leaderLatch;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think this was supposed to be the leaderlockPath, that was not set.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612649998/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650002","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612650002","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612650002,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTAwMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:45:50Z","updated_at":"2025-01-24T14:22:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50851943\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50851943</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we please mark all of these member variables as final?  None of them are ever supposed to change and it would have caught the leaderlockPath not being set.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175084269","html_url":"https://github.com/apache/storm/pull/932#issuecomment-175084269","issue_url":"https://api.github.com/repos/apache/storm/issues/932","id":175084269,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTA4NDI2OQ==","user":{"login":"darionyaphet","id":4414314,"node_id":"MDQ6VXNlcjQ0MTQzMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/4414314?v=4","gravatar_id":"","url":"https://api.github.com/users/darionyaphet","html_url":"https://github.com/darionyaphet","followers_url":"https://api.github.com/users/darionyaphet/followers","following_url":"https://api.github.com/users/darionyaphet/following{/other_user}","gists_url":"https://api.github.com/users/darionyaphet/gists{/gist_id}","starred_url":"https://api.github.com/users/darionyaphet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darionyaphet/subscriptions","organizations_url":"https://api.github.com/users/darionyaphet/orgs","repos_url":"https://api.github.com/users/darionyaphet/repos","events_url":"https://api.github.com/users/darionyaphet/events{/privacy}","received_events_url":"https://api.github.com/users/darionyaphet/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:45:52Z","updated_at":"2016-01-26T15:45:52Z","author_association":"CONTRIBUTOR","body":"This issue have merged [STORM-1379](https://issues.apache.org/jira/browse/STORM-1379)  and close this pull request :)\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175084269/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612686957","html_url":"https://github.com/apache/storm/issues/5214#issuecomment-2612686957","issue_url":"https://api.github.com/repos/apache/storm/issues/5214","id":2612686957,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2ODY5NTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:45:54Z","updated_at":"2025-01-24T14:38:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user darionyaphet commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/932#issuecomment-175084269\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/932#issuecomment-175084269</a></p>\n\n<p>    This issue have merged <a href=\"https://issues.apache.org/jira/browse/STORM-1379\" title=\"Removed Redundant Structure\" class=\"issue-link\" data-issue-key=\"STORM-1379\"><del>STORM-1379</del></a>(<a href=\"https://issues.apache.org/jira/browse/STORM-1379\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1379</a>)  and close this pull request <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612686957/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650006","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612650006","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612650006,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTAwMDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:47:37Z","updated_at":"2025-01-24T14:22:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50852249\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50852249</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) </p>\n{\n    +this.conf = conf;\n    +this.servers = servers;\n    +this.zk = zk;\n    +this.leaderLatch = leaderLatch;\n    +this.id = id;\n    +this.leaderLatch = leaderLatch;\n    +this.leaderLatchListener = leaderLatchListener;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +LOG.info(\"no-op for zookeeper implementation\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void addToLeaderLockQueue() {<br/>\n    +// if this latch is already closed, we need to create new instance.<br/>\n    +try {<br/>\n    +    if (LeaderLatch.State.CLOSED.equals(leaderLatch.get().getState())) {<br/>\n    +leaderLatch.set(new LeaderLatch(zk, leaderlockPath));<br/>\n    +leaderLatchListener.set(Zookeeper.leaderLatchListenerImpl(conf, zk, leaderLatch.get()));<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    missing<br/>\n    `LOG.info(\"LeaderLatch was in closed state. Resetted the leaderLatch and listeners.\");`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650006/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650015","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612650015","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612650015,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTAwMTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:49:36Z","updated_at":"2025-01-24T14:22:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50852541\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50852541</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) </p>\n{\n    +this.conf = conf;\n    +this.servers = servers;\n    +this.zk = zk;\n    +this.leaderLatch = leaderLatch;\n    +this.id = id;\n    +this.leaderLatch = leaderLatch;\n    +this.leaderLatchListener = leaderLatchListener;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +LOG.info(\"no-op for zookeeper implementation\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void addToLeaderLockQueue() {<br/>\n    +// if this latch is already closed, we need to create new instance.<br/>\n    +try {<br/>\n    +    if (LeaderLatch.State.CLOSED.equals(leaderLatch.get().getState())) </p>\n{\n    +leaderLatch.set(new LeaderLatch(zk, leaderlockPath));\n    +leaderLatchListener.set(Zookeeper.leaderLatchListenerImpl(conf, zk, leaderLatch.get()));\n    +    }\n<p>    +    // Only if the latch is not already started we invoke start<br/>\n    +    if (LeaderLatch.State.LATENT.equals(leaderLatch.get().getState())) </p>\n{\n    +leaderLatch.get().addListener(leaderLatchListener.get());\n    +leaderLatch.get().start();\n    +LOG.info(\"Queued up for leader lock.\");\n    +    }\n<p> else </p>\n{\n    +LOG.info(\"Node already in queue for leader lock.\");\n    +    }\n<p>    +} catch (Exception e) </p>\n{\n    +    LOG.warn(\"failed to add LeaderLatchListener\", e);\n    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    The previous code never caught an exception, and especially did not eat it.  Please either update the Interface to support Exceptions or wrap it in a RuntimeException and rethrow it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650015/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650020","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612650020","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612650020,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTAwMjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:57:50Z","updated_at":"2025-01-24T14:22:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50853930\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50853930</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) </p>\n{\n    +this.conf = conf;\n    +this.servers = servers;\n    +this.zk = zk;\n    +this.leaderLatch = leaderLatch;\n    +this.id = id;\n    +this.leaderLatch = leaderLatch;\n    +this.leaderLatchListener = leaderLatchListener;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +LOG.info(\"no-op for zookeeper implementation\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void addToLeaderLockQueue() {<br/>\n    +// if this latch is already closed, we need to create new instance.<br/>\n    +try {<br/>\n    +    if (LeaderLatch.State.CLOSED.equals(leaderLatch.get().getState())) </p>\n{\n    +leaderLatch.set(new LeaderLatch(zk, leaderlockPath));\n    +leaderLatchListener.set(Zookeeper.leaderLatchListenerImpl(conf, zk, leaderLatch.get()));\n    +    }\n<p>    +    // Only if the latch is not already started we invoke start<br/>\n    +    if (LeaderLatch.State.LATENT.equals(leaderLatch.get().getState())) </p>\n{\n    +leaderLatch.get().addListener(leaderLatchListener.get());\n    +leaderLatch.get().start();\n    +LOG.info(\"Queued up for leader lock.\");\n    +    }\n<p> else </p>\n{\n    +LOG.info(\"Node already in queue for leader lock.\");\n    +    }\n<p>    +} catch (Exception e) </p>\n{\n    +    LOG.warn(\"failed to add LeaderLatchListener\", e);\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    // Only started latches can be closed.<br/>\n    +    public void removeFromLeaderLockQueue() {<br/>\n    +if (LeaderLatch.State.STARTED.equals(leaderLatch.get().getState())) {<br/>\n    +    try </p>\n{\n    +leaderLatch.get().close();\n    +LOG.info(\"Removed from leader lock queue.\");\n    +    }\n<p> catch (IOException e) </p>\n{\n    +LOG.warn(\"failed to  close leaderLatch!!\");\n    +    }\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    Here too, lets not eat the exception.  At least wrap it and rethrow it, but preferably update the Interface to allow us to throw it as is.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650024","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612650024","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612650024,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTAwMjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T15:59:04Z","updated_at":"2025-01-24T14:22:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50854133\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50854133</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) </p>\n{\n    +this.conf = conf;\n    +this.servers = servers;\n    +this.zk = zk;\n    +this.leaderLatch = leaderLatch;\n    +this.id = id;\n    +this.leaderLatch = leaderLatch;\n    +this.leaderLatchListener = leaderLatchListener;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +LOG.info(\"no-op for zookeeper implementation\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void addToLeaderLockQueue() {<br/>\n    +// if this latch is already closed, we need to create new instance.<br/>\n    +try {<br/>\n    +    if (LeaderLatch.State.CLOSED.equals(leaderLatch.get().getState())) </p>\n{\n    +leaderLatch.set(new LeaderLatch(zk, leaderlockPath));\n    +leaderLatchListener.set(Zookeeper.leaderLatchListenerImpl(conf, zk, leaderLatch.get()));\n    +    }\n<p>    +    // Only if the latch is not already started we invoke start<br/>\n    +    if (LeaderLatch.State.LATENT.equals(leaderLatch.get().getState())) </p>\n{\n    +leaderLatch.get().addListener(leaderLatchListener.get());\n    +leaderLatch.get().start();\n    +LOG.info(\"Queued up for leader lock.\");\n    +    }\n<p> else </p>\n{\n    +LOG.info(\"Node already in queue for leader lock.\");\n    +    }\n<p>    +} catch (Exception e) </p>\n{\n    +    LOG.warn(\"failed to add LeaderLatchListener\", e);\n    +}\n<p>    +<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    // Only started latches can be closed.<br/>\n    +    public void removeFromLeaderLockQueue() {<br/>\n    +if (LeaderLatch.State.STARTED.equals(leaderLatch.get().getState())) {<br/>\n    +    try </p>\n{\n    +leaderLatch.get().close();\n    +LOG.info(\"Removed from leader lock queue.\");\n    +    }\n<p> catch (IOException e) </p>\n{\n    +LOG.warn(\"failed to  close leaderLatch!!\");\n    +    }\n<p>    +<br/>\n    +} else </p>\n{\n    +    LOG.info(\"leader latch is not started so no removeFromLeaderLockQueue needed.\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public boolean isLeader() throws Exception </p>\n{\n    +return leaderLatch.get().hasLeadership();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public NimbusInfo getLeader() {<br/>\n    +try </p>\n{\n    +    return Zookeeper.toNimbusInfo(leaderLatch.get().getLeader());\n    +}\n<p> catch (Exception e) </p>\n{\n    +    throw Utils.wrapInRuntime(e);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public List<NimbusInfo> getAllNimbuses() {<br/>\n    +List<NimbusInfo> nimbusInfos = new ArrayList<>();<br/>\n    +try {<br/>\n    +    Collection<Participant> participants = leaderLatch.get().getParticipants();<br/>\n    +    for (Participant participant : participants) </p>\n{\n    +nimbusInfos.add(Zookeeper.toNimbusInfo(participant));\n    +    }\n<p>    +} catch (Exception e) </p>\n{\n    +    LOG.warn(\"failed to get nimbuses\", e);\n    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    Again don't eat the exception throw it, and wrap it if you cannot update the interface.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650024/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175091255","html_url":"https://github.com/apache/storm/pull/1047#issuecomment-175091255","issue_url":"https://api.github.com/repos/apache/storm/issues/1047","id":175091255,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTA5MTI1NQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T16:00:55Z","updated_at":"2016-01-26T16:00:55Z","author_association":"CONTRIBUTOR","body":"I am done with my first pass through the code.  Overall things look good, but there are a few corner cases around error recovery and running on Windows that need to be fixed before this can go in.  Also please be sure to run all of the tests and that they all pass.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175091255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650036","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612650036","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612650036,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTAwMzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T16:00:56Z","updated_at":"2025-01-24T14:22:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#issuecomment-175091255\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#issuecomment-175091255</a></p>\n\n<p>    I am done with my first pass through the code.  Overall things look good, but there are a few corner cases around error recovery and running on Windows that need to be fixed before this can go in.  Also please be sure to run all of the tests and that they all pass.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650036/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703022","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612703022","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612703022,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMwMjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T17:10:44Z","updated_at":"2025-01-24T14:45:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#discussion_r50866045\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#discussion_r50866045</a></p>\n\n<p>    &#8212; Diff: external/storm-mongodb/src/main/java/org/apache/storm/mongodb/trident/state/MongoState.java &#8212;<br/>\n    @@ -0,0 +1,97 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.mongodb.trident.state;<br/>\n    +<br/>\n    +import java.io.Serializable;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import org.apache.commons.lang.Validate;<br/>\n    +import org.apache.storm.mongodb.common.MongoDBClient;<br/>\n    +import org.apache.storm.mongodb.common.mapper.MongoMapper;<br/>\n    +import org.apache.storm.trident.operation.TridentCollector;<br/>\n    +import org.apache.storm.trident.state.State;<br/>\n    +import org.apache.storm.trident.tuple.TridentTuple;<br/>\n    +import org.bson.Document;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import com.google.common.collect.Lists;<br/>\n    +<br/>\n    +public class MongoState implements State {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(MongoState.class);<br/>\n    +<br/>\n    +    private Options options;<br/>\n    +    private MongoDBClient mongoClient;<br/>\n    +    private Map map;<br/>\n    +<br/>\n    +    protected MongoState(Map map, int partitionIndex, int numPartitions, Options options) </p>\n{\n    +this.options = options;\n    +this.map = map;\n    +    }\n<p>    +<br/>\n    +    public static class Options implements Serializable {<br/>\n    +private String url;<br/>\n    +private String collectionName;<br/>\n    +private MongoMapper mapper;<br/>\n    +<br/>\n    +public Options withUrl(String url) </p>\n{\n    +    this.url = url;\n    +    return this;\n    +}\n<p>    +<br/>\n    +public Options withCollectionName(String collectionName) </p>\n{\n    +    this.collectionName = collectionName;\n    +    return this;\n    +}\n<p>    +<br/>\n    +public Options withMapper(MongoMapper mapper) </p>\n{\n    +    this.mapper = mapper;\n    +    return this;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    protected void prepare() </p>\n{\n    +Validate.notEmpty(options.url, \"url can not be blank or null\");\n    +Validate.notEmpty(options.collectionName, \"collectionName can not be blank or null\");\n    +Validate.notNull(options.mapper, \"MongoMapper can not be null\");\n    +\n    +this.mongoClient = new MongoDBClient(options.url, options.collectionName);\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void beginCommit(Long txid) </p>\n{\n    +LOG.debug(\"beginCommit is noop.\");\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void commit(Long txid) </p>\n{\n    +LOG.debug(\"commit is noop.\");\n    +    }\n<p>    +<br/>\n    +    public void updateState(List<TridentTuple> tuples, TridentCollector collector) {<br/>\n    +List<Document> documents = Lists.newArrayList();<br/>\n    +for (TridentTuple tuple : tuples) </p>\n{\n    +    Document document = options.mapper.toDocument(tuple);\n    +    documents.add(document);\n    +}\n<p>    +this.mongoClient.insert(documents);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The issue here is with failures.  I am not an mongodb expert so I don't know what happens if you insert in a document that is already there. If you have a distributed state there will be multiple instances of this class spear throughout your topology.  If a single tuple fails as part of the updateState trident will replay the entire batch.  In that case we can try to insert documents that were already inserted.  I am not worried about consistency, because there is no query possible from trident.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175123625","html_url":"https://github.com/apache/storm/pull/1038#issuecomment-175123625","issue_url":"https://api.github.com/repos/apache/storm/issues/1038","id":175123625,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTEyMzYyNQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T17:13:20Z","updated_at":"2016-01-26T17:13:20Z","author_association":"CONTRIBUTOR","body":"I am no expert on mongodb but overall it looks rather good.  @vesense if you do need a +1 from me to get this in please let me know, The code is simple enough I feel OK with doing it, but I would rather have someone else who knows the DB better then I do lend their support.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175123625/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703026","html_url":"https://github.com/apache/storm/issues/5318#issuecomment-2612703026","issue_url":"https://api.github.com/repos/apache/storm/issues/5318","id":2612703026,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMwMjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T17:13:22Z","updated_at":"2025-01-24T14:45:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1038#issuecomment-175123625\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1038#issuecomment-175123625</a></p>\n\n<p>    I am no expert on mongodb but overall it looks rather good.  @vesense if you do need a +1 from me to get this in please let me know, The code is simple enough I feel OK with doing it, but I would rather have someone else who knows the DB better then I do lend their support.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703026/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175125963","html_url":"https://github.com/apache/storm/pull/1046#issuecomment-175125963","issue_url":"https://api.github.com/repos/apache/storm/issues/1046","id":175125963,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTEyNTk2Mw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T17:19:12Z","updated_at":"2016-01-26T17:19:12Z","author_association":"CONTRIBUTOR","body":"I am a bit curious why we need this?  What exception/error did you see come from the worker process?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175125963/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864084","html_url":"https://github.com/apache/storm/issues/5336#issuecomment-2612864084","issue_url":"https://api.github.com/repos/apache/storm/issues/5336","id":2612864084,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjQwODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T17:19:13Z","updated_at":"2025-01-24T15:58:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1046#issuecomment-175125963\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1046#issuecomment-175125963</a></p>\n\n<p>    I am a bit curious why we need this?  What exception/error did you see come from the worker process?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864092","html_url":"https://github.com/apache/storm/issues/5336#issuecomment-2612864092","issue_url":"https://api.github.com/repos/apache/storm/issues/5336","id":2612864092,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjQwOTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T17:21:30Z","updated_at":"2025-01-24T15:58:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1046#discussion_r50867596\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1046#discussion_r50867596</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/util.clj &#8212;<br/>\n    @@ -553,7 +553,8 @@<br/>\n    (catch InterruptedException e<br/>\n      (log-message log-prefix \" interrupted.\")))<br/>\n  (exit-code-callback (.exitValue process)))</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>nil)))<br/>\n    +   nil)<br/>\n    +  :kill-fn (fn <span class=\"error\">&#91;error&#93;</span> (log-error (RuntimeException. (\"launch process failed...\"))))))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Why are we throwing away error?</p>\n\n<p>    What happens if this does not exit?  I assume that the heartbeat monitoring will detect it and do the right thing, but are there other places in the code besides a worker process that we use this?  Will there be problems especially around the exit-code-callback if they are not called?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864092/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864308","html_url":"https://github.com/apache/storm/issues/5338#issuecomment-2612864308","issue_url":"https://api.github.com/repos/apache/storm/issues/5338","id":2612864308,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjQzMDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T17:53:08Z","updated_at":"2025-01-24T15:58:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user kishorvpatil opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1048\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1048</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1503\" title=\"PacemakerClient Reconnection issue\" class=\"issue-link\" data-issue-key=\"STORM-1503\"><del>STORM-1503</del></a> Worker should not crash on failure to send heartbeats to Pacemaker/ZK</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>Worker should catch and log Exception related to sending worker heartbeats to ZK/pacemaker.</li>\n\t<li>`PacemakerClient` should not leave open previous channels.. If successfully reconnected - made new `Channel`. This avoids worker having unused Channel open to Pacemaker around.</li>\n</ul>\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/kishorvpatil/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/kishorvpatil/incubator-storm</a> storm1503</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1048.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1048.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1048</p>\n\n<hr />\n<p>commit 01116450cfe981fdd37830d7ef2821ea3c0bf99a<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2016-01-22T16:27:46Z</p>\n\n<p>    Pacemaker client must try to reconnect on netty connecton failure</p>\n\n<p>commit b0e696062ec690dc7e279349ce4d0015cd96c08d<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2016-01-26T17:49:11Z</p>\n\n<p>    Worker should retry later instead of dying on failure to send heartbeats to ZK/Pacemaker</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864308/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175144958","html_url":"https://github.com/apache/storm/pull/1048#issuecomment-175144958","issue_url":"https://api.github.com/repos/apache/storm/issues/1048","id":175144958,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTE0NDk1OA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T18:01:01Z","updated_at":"2016-01-26T18:01:01Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175144958/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864316","html_url":"https://github.com/apache/storm/issues/5338#issuecomment-2612864316","issue_url":"https://api.github.com/repos/apache/storm/issues/5338","id":2612864316,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjQzMTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T18:01:03Z","updated_at":"2025-01-24T15:58:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1048#issuecomment-175144958\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1048#issuecomment-175144958</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864316/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175146222","html_url":"https://github.com/apache/storm/pull/1026#issuecomment-175146222","issue_url":"https://api.github.com/repos/apache/storm/issues/1026","id":175146222,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTE0NjIyMg==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T18:03:31Z","updated_at":"2016-01-26T18:03:31Z","author_association":"CONTRIBUTOR","body":"Thanks @revans2 . Fixed the compilation error. I had missed some changes. To put these changes in 1.0 release, do I need to open another pull request?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175146222/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612698418","html_url":"https://github.com/apache/storm/issues/5290#issuecomment-2612698418","issue_url":"https://api.github.com/repos/apache/storm/issues/5290","id":2612698418,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTg0MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T18:03:32Z","updated_at":"2025-01-24T14:43:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1026#issuecomment-175146222\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1026#issuecomment-175146222</a></p>\n\n<p>    Thanks @revans2 . Fixed the compilation error. I had missed some changes. To put these changes in 1.0 release, do I need to open another pull request?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612698418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175148840","html_url":"https://github.com/apache/storm/pull/1026#issuecomment-175148840","issue_url":"https://api.github.com/repos/apache/storm/issues/1026","id":175148840,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTE0ODg0MA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T18:11:16Z","updated_at":"2016-01-26T18:11:16Z","author_association":"CONTRIBUTOR","body":"Typically you don't need a separate pull request.  Just ask for it and we will cherry-pick it.  If there are merge conflicts we may come back and ask for a separate pull request.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175148840/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612698420","html_url":"https://github.com/apache/storm/issues/5290#issuecomment-2612698420","issue_url":"https://api.github.com/repos/apache/storm/issues/5290","id":2612698420,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTg0MjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T18:11:17Z","updated_at":"2025-01-24T14:43:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1026#issuecomment-175148840\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1026#issuecomment-175148840</a></p>\n\n<p>    Typically you don't need a separate pull request.  Just ask for it and we will cherry-pick it.  If there are merge conflicts we may come back and ask for a separate pull request.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612698420/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175175561","html_url":"https://github.com/apache/storm/pull/1048#issuecomment-175175561","issue_url":"https://api.github.com/repos/apache/storm/issues/1048","id":175175561,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTE3NTU2MQ==","user":{"login":"redsanket","id":8295799,"node_id":"MDQ6VXNlcjgyOTU3OTk=","avatar_url":"https://avatars.githubusercontent.com/u/8295799?v=4","gravatar_id":"","url":"https://api.github.com/users/redsanket","html_url":"https://github.com/redsanket","followers_url":"https://api.github.com/users/redsanket/followers","following_url":"https://api.github.com/users/redsanket/following{/other_user}","gists_url":"https://api.github.com/users/redsanket/gists{/gist_id}","starred_url":"https://api.github.com/users/redsanket/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redsanket/subscriptions","organizations_url":"https://api.github.com/users/redsanket/orgs","repos_url":"https://api.github.com/users/redsanket/repos","events_url":"https://api.github.com/users/redsanket/events{/privacy}","received_events_url":"https://api.github.com/users/redsanket/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T18:53:14Z","updated_at":"2016-01-26T18:53:14Z","author_association":"NONE","body":"+1 NB\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175175561/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864324","html_url":"https://github.com/apache/storm/issues/5338#issuecomment-2612864324","issue_url":"https://api.github.com/repos/apache/storm/issues/5338","id":2612864324,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjQzMjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T18:53:15Z","updated_at":"2025-01-24T15:58:42Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1048#issuecomment-175175561\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1048#issuecomment-175175561</a></p>\n\n<p>    +1 NB</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864324/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704860","html_url":"https://github.com/apache/storm/issues/5329#issuecomment-2612704860","issue_url":"https://api.github.com/repos/apache/storm/issues/5329","id":2612704860,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDQ4NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T19:02:20Z","updated_at":"2025-01-24T14:46:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user yegortokmakov opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1049\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1049</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1494\" title=\"Storm UI - Add link to supervisor log\" class=\"issue-link\" data-issue-key=\"STORM-1494\"><del>STORM-1494</del></a> Link to supervisor logs form UI</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/yegortokmakov/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/yegortokmakov/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1494\" title=\"Storm UI - Add link to supervisor log\" class=\"issue-link\" data-issue-key=\"STORM-1494\"><del>STORM-1494</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1049.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1049.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1049</p>\n\n<hr />\n<p>commit 21f56e91efd4af4a8b2c54d6ba6b50b717f2aca7<br/>\nAuthor: Yegor Tokmakov <yegor@tokmakov.biz><br/>\nDate:   2016-01-26T18:58:59Z</p>\n\n<p>    Link to supervisor logs form UI</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704860/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175180562","html_url":"https://github.com/apache/storm/pull/1049#issuecomment-175180562","issue_url":"https://api.github.com/repos/apache/storm/issues/1049","id":175180562,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTE4MDU2Mg==","user":{"login":"yegortokmakov","id":1442948,"node_id":"MDQ6VXNlcjE0NDI5NDg=","avatar_url":"https://avatars.githubusercontent.com/u/1442948?v=4","gravatar_id":"","url":"https://api.github.com/users/yegortokmakov","html_url":"https://github.com/yegortokmakov","followers_url":"https://api.github.com/users/yegortokmakov/followers","following_url":"https://api.github.com/users/yegortokmakov/following{/other_user}","gists_url":"https://api.github.com/users/yegortokmakov/gists{/gist_id}","starred_url":"https://api.github.com/users/yegortokmakov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yegortokmakov/subscriptions","organizations_url":"https://api.github.com/users/yegortokmakov/orgs","repos_url":"https://api.github.com/users/yegortokmakov/repos","events_url":"https://api.github.com/users/yegortokmakov/events{/privacy}","received_events_url":"https://api.github.com/users/yegortokmakov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T19:03:00Z","updated_at":"2016-01-26T19:03:00Z","author_association":"CONTRIBUTOR","body":"I've also removed not used argument in nimbus-log-link\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175180562/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704864","html_url":"https://github.com/apache/storm/issues/5329#issuecomment-2612704864","issue_url":"https://api.github.com/repos/apache/storm/issues/5329","id":2612704864,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDQ4NjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T19:03:01Z","updated_at":"2025-01-24T14:46:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user yegortokmakov commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1049#issuecomment-175180562\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1049#issuecomment-175180562</a></p>\n\n<p>    I've also removed not used argument in nimbus-log-link</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704864/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175186654","html_url":"https://github.com/apache/storm/pull/1048#issuecomment-175186654","issue_url":"https://api.github.com/repos/apache/storm/issues/1048","id":175186654,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTE4NjY1NA==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T19:17:11Z","updated_at":"2016-01-26T19:17:11Z","author_association":"NONE","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175186654/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864330","html_url":"https://github.com/apache/storm/issues/5338#issuecomment-2612864330","issue_url":"https://api.github.com/repos/apache/storm/issues/5338","id":2612864330,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NjQzMzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T19:17:12Z","updated_at":"2025-01-24T15:58:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1048#issuecomment-175186654\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1048#issuecomment-175186654</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612864330/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175205323","html_url":"https://github.com/apache/storm/pull/1043#issuecomment-175205323","issue_url":"https://api.github.com/repos/apache/storm/issues/1043","id":175205323,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTIwNTMyMw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T20:10:28Z","updated_at":"2016-01-26T20:10:28Z","author_association":"CONTRIBUTOR","body":"First off RAT is complaining about 3 files.  Please take a look into that.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175205323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175242193","html_url":"https://github.com/apache/storm/pull/1043#issuecomment-175242193","issue_url":"https://api.github.com/repos/apache/storm/issues/1043","id":175242193,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTI0MjE5Mw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T21:36:19Z","updated_at":"2016-01-26T21:36:19Z","author_association":"CONTRIBUTOR","body":"Finished with my first pass through the code.  For the most part things are looking very good.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175242193/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175250031","html_url":"https://github.com/apache/storm/pull/1049#issuecomment-175250031","issue_url":"https://api.github.com/repos/apache/storm/issues/1049","id":175250031,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTI1MDAzMQ==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T21:55:51Z","updated_at":"2016-01-26T21:55:51Z","author_association":"NONE","body":"LGTM! +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175250031/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704871","html_url":"https://github.com/apache/storm/issues/5329#issuecomment-2612704871","issue_url":"https://api.github.com/repos/apache/storm/issues/5329","id":2612704871,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDQ4NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T21:55:52Z","updated_at":"2025-01-24T14:46:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1049#issuecomment-175250031\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1049#issuecomment-175250031</a></p>\n\n<p>    LGTM! +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175263760","html_url":"https://github.com/apache/storm/pull/1049#issuecomment-175263760","issue_url":"https://api.github.com/repos/apache/storm/issues/1049","id":175263760,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTI2Mzc2MA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T22:22:57Z","updated_at":"2016-01-26T22:22:57Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175263760/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704878","html_url":"https://github.com/apache/storm/issues/5329#issuecomment-2612704878","issue_url":"https://api.github.com/repos/apache/storm/issues/5329","id":2612704878,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDQ4Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T22:22:58Z","updated_at":"2025-01-24T14:46:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1049#issuecomment-175263760\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1049#issuecomment-175263760</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/175275852","html_url":"https://github.com/apache/storm/pull/1049#issuecomment-175275852","issue_url":"https://api.github.com/repos/apache/storm/issues/1049","id":175275852,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTI3NTg1Mg==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T22:47:11Z","updated_at":"2016-01-26T22:47:11Z","author_association":"CONTRIBUTOR","body":"+1\nSince this modifies clj file, we may want to decide how to apply this to master.\nWould it better to merge to 1.x first and just leave notice? Or do we just want to change PR's destination to master, and doing backport?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/175275852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704881","html_url":"https://github.com/apache/storm/issues/5329#issuecomment-2612704881","issue_url":"https://api.github.com/repos/apache/storm/issues/5329","id":2612704881,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDQ4ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-26T22:47:12Z","updated_at":"2025-01-24T14:46:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1049#issuecomment-175275852\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1049#issuecomment-175275852</a></p>\n\n<p>    +1<br/>\n    Since this modifies clj file, we may want to decide how to apply this to master.<br/>\n    Would it better to merge to 1.x first and just leave notice? Or do we just want to change PR's destination to master, and doing backport?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612704881/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650039","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612650039","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612650039,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTAwMzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-27T01:17:32Z","updated_at":"2025-01-24T14:22:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50929299\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50929299</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/zookeeper/LeaderElectorImp.java &#8212;<br/>\n    @@ -0,0 +1,135 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.zookeeper;<br/>\n    +<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatch;<br/>\n    +import org.apache.curator.framework.recipes.leader.LeaderLatchListener;<br/>\n    +import org.apache.curator.framework.recipes.leader.Participant;<br/>\n    +import org.apache.storm.nimbus.ILeaderElector;<br/>\n    +import org.apache.storm.nimbus.NimbusInfo;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +<br/>\n    +public class LeaderElectorImp implements ILeaderElector {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(LeaderElectorImp.class);<br/>\n    +    private Map conf;<br/>\n    +    private List<String> servers;<br/>\n    +    private CuratorFramework zk;<br/>\n    +    private String leaderlockPath;<br/>\n    +    private String id;<br/>\n    +    private AtomicReference<LeaderLatch> leaderLatch;<br/>\n    +    private AtomicReference<LeaderLatchListener> leaderLatchListener;<br/>\n    +<br/>\n    +    public LeaderElectorImp(Map conf, List<String> servers, CuratorFramework zk, String leaderlockPath, String id, AtomicReference<LeaderLatch> leaderLatch,<br/>\n    +    AtomicReference<LeaderLatchListener> leaderLatchListener) {<br/>\n    +this.conf = conf;<br/>\n    +this.servers = servers;<br/>\n    +this.zk = zk;<br/>\n    +this.leaderLatch = leaderLatch;<br/>\n    +this.id = id;<br/>\n    +this.leaderLatch = leaderLatch;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    sorry, I made a mistake</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650039/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650044","html_url":"https://github.com/apache/storm/issues/5094#issuecomment-2612650044","issue_url":"https://api.github.com/repos/apache/storm/issues/5094","id":2612650044,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTAwNDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-27T01:24:49Z","updated_at":"2025-01-24T14:22:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1047#discussion_r50929871\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1047#discussion_r50929871</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/callback/DefaultWatcherCallBack.java &#8212;<br/>\n    @@ -0,0 +1,35 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.callback;<br/>\n    +<br/>\n    +import org.apache.storm.zookeeper.ZkEventTypes;<br/>\n    +import org.apache.storm.zookeeper.ZkKeeperStates;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class DefaultWatcherCallBack implements WatcherCallBack {<br/>\n    +<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(DefaultWatcherCallBack.class);<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void execute(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path) {<br/>\n    +LOG.info(\"Zookeeper state update:\" + ZkKeeperStates.getStateName(state) + \",\" + ZkEventTypes.getStateName(type) + \",\" + path);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    ok</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612650044/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]