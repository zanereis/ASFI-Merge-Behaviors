[{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434187543","html_url":"https://github.com/apache/tvm/pull/1970#issuecomment-434187543","issue_url":"https://api.github.com/repos/apache/tvm/issues/1970","id":434187543,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDE4NzU0Mw==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T06:33:57Z","updated_at":"2018-10-30T06:33:57Z","author_association":"MEMBER","body":"There are some errors with nvptx backend. We found some cases before.\r\n\r\nThe solution can be\r\n1. Update llvm in CI to 6.0\r\n2. Disable that test case (for nvptx)","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434187543/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434189063","html_url":"https://github.com/apache/tvm/pull/1973#issuecomment-434189063","issue_url":"https://api.github.com/repos/apache/tvm/issues/1973","id":434189063,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDE4OTA2Mw==","user":{"login":"xqdan","id":23742050,"node_id":"MDQ6VXNlcjIzNzQyMDUw","avatar_url":"https://avatars.githubusercontent.com/u/23742050?v=4","gravatar_id":"","url":"https://api.github.com/users/xqdan","html_url":"https://github.com/xqdan","followers_url":"https://api.github.com/users/xqdan/followers","following_url":"https://api.github.com/users/xqdan/following{/other_user}","gists_url":"https://api.github.com/users/xqdan/gists{/gist_id}","starred_url":"https://api.github.com/users/xqdan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqdan/subscriptions","organizations_url":"https://api.github.com/users/xqdan/orgs","repos_url":"https://api.github.com/users/xqdan/repos","events_url":"https://api.github.com/users/xqdan/events{/privacy}","received_events_url":"https://api.github.com/users/xqdan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T06:42:35Z","updated_at":"2018-10-30T06:42:35Z","author_association":"CONTRIBUTOR","body":"@denis0x0D I'm considering move the dump ir to C++ side.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434189063/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434189354","html_url":"https://github.com/apache/tvm/pull/1970#issuecomment-434189354","issue_url":"https://api.github.com/repos/apache/tvm/issues/1970","id":434189354,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDE4OTM1NA==","user":{"login":"vinx13","id":7195739,"node_id":"MDQ6VXNlcjcxOTU3Mzk=","avatar_url":"https://avatars.githubusercontent.com/u/7195739?v=4","gravatar_id":"","url":"https://api.github.com/users/vinx13","html_url":"https://github.com/vinx13","followers_url":"https://api.github.com/users/vinx13/followers","following_url":"https://api.github.com/users/vinx13/following{/other_user}","gists_url":"https://api.github.com/users/vinx13/gists{/gist_id}","starred_url":"https://api.github.com/users/vinx13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vinx13/subscriptions","organizations_url":"https://api.github.com/users/vinx13/orgs","repos_url":"https://api.github.com/users/vinx13/repos","events_url":"https://api.github.com/users/vinx13/events{/privacy}","received_events_url":"https://api.github.com/users/vinx13/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T06:44:04Z","updated_at":"2018-10-30T06:44:04Z","author_association":"MEMBER","body":"> There are some errors with nvptx backend. We found some cases before.\r\n> \r\n> The solution can be\r\n> \r\n> 1. Update llvm in CI to 6.0\r\n> 2. Disable that test case (for nvptx)\r\n\r\nI tried llvm-6.0 locally but the error still occurs. This error can be fixed by updating tophub logs with dilation arg, or disabling fallback schedule generated from reference log","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434189354/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434191271","html_url":"https://github.com/apache/tvm/pull/2028#issuecomment-434191271","issue_url":"https://api.github.com/repos/apache/tvm/issues/2028","id":434191271,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDE5MTI3MQ==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T06:53:59Z","updated_at":"2018-10-30T07:11:20Z","author_association":"MEMBER","body":"I am afraid that we have to put this PR on hold for a while. Since the current structure of TOPI is not easy to do such an update. But this can be a good example for other people who are interested in ARM CPU.\r\n\r\nCurrently,\r\n* We have tuned records (tophub) / benchmark for a lot of devices.\r\n* We are doing some refactoring to TOPI ( #1970 #1993 )\r\n\r\nWe will first finish the refactor, and then think about how to make such kind of update more easily.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434191271/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434227636","html_url":"https://github.com/apache/tvm/pull/1970#issuecomment-434227636","issue_url":"https://api.github.com/repos/apache/tvm/issues/1970","id":434227636,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDIyNzYzNg==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T09:22:13Z","updated_at":"2018-10-30T09:34:12Z","author_association":"MEMBER","body":"OK. We will first merge #2034, and then merge this PR.\r\n\r\nIn the meanwhile, you can do update to tophub\r\n\r\n1. Use your converter to convert all latest logs under https://github.com/uwsampl/tvm-distro/tree/master/tophub\r\n    - arm_cpu_v0.03 -> arm_cpu_v0.04, cuda_v0.03 -> cuda_v0.04,  opencl_v0.01 -> opencl_v0.02, ..., the only special case is **vta_v0.01 -> vta_v0.04**\r\n    - Note there are also dense layer workloads. So your convert should only convert conv layers.\r\n    - Then I will merge your PR\r\n2. Update tophub versions for all backends in tvm\r\n    -  Update them to your version\r\n https://github.com/dmlc/tvm/blob/b840e9602e357c50124d0c7fb131c52321062570/python/tvm/autotvm/tophub.py#L22-L31\r\n    - Then you should be able to pass your test","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434227636/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434231850","html_url":"https://github.com/apache/tvm/pull/2032#issuecomment-434231850","issue_url":"https://api.github.com/repos/apache/tvm/issues/2032","id":434231850,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDIzMTg1MA==","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T09:35:52Z","updated_at":"2018-10-30T09:35:52Z","author_association":"MEMBER","body":"Do you know why std dev are such large values? It's larger than mean inference time itself.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434231850/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434241947","html_url":"https://github.com/apache/tvm/pull/2028#issuecomment-434241947","issue_url":"https://api.github.com/repos/apache/tvm/issues/2028","id":434241947,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDI0MTk0Nw==","user":{"login":"FrozenGene","id":7287321,"node_id":"MDQ6VXNlcjcyODczMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7287321?v=4","gravatar_id":"","url":"https://api.github.com/users/FrozenGene","html_url":"https://github.com/FrozenGene","followers_url":"https://api.github.com/users/FrozenGene/followers","following_url":"https://api.github.com/users/FrozenGene/following{/other_user}","gists_url":"https://api.github.com/users/FrozenGene/gists{/gist_id}","starred_url":"https://api.github.com/users/FrozenGene/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FrozenGene/subscriptions","organizations_url":"https://api.github.com/users/FrozenGene/orgs","repos_url":"https://api.github.com/users/FrozenGene/repos","events_url":"https://api.github.com/users/FrozenGene/events{/privacy}","received_events_url":"https://api.github.com/users/FrozenGene/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T10:08:54Z","updated_at":"2018-10-30T10:08:54Z","author_association":"MEMBER","body":"`We have tuned records (tophub) / benchmark for a lot of devices.`\r\nYes, we can not require every committer has so many devices. If committer change the schedule template, everything will be changed. How do we avoid it? Do you have any idea? I think we can not let you do this thing every time. \r\n\r\nI come up one way is we can have x86's fall_back schedule: https://github.com/dmlc/tvm/blob/master/topi/python/topi/x86/conv2d_avx_common.py#L12","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434241947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434242520","html_url":"https://github.com/apache/tvm/pull/2034#issuecomment-434242520","issue_url":"https://api.github.com/repos/apache/tvm/issues/2034","id":434242520,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDI0MjUyMA==","user":{"login":"FrozenGene","id":7287321,"node_id":"MDQ6VXNlcjcyODczMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7287321?v=4","gravatar_id":"","url":"https://api.github.com/users/FrozenGene","html_url":"https://github.com/FrozenGene","followers_url":"https://api.github.com/users/FrozenGene/followers","following_url":"https://api.github.com/users/FrozenGene/following{/other_user}","gists_url":"https://api.github.com/users/FrozenGene/gists{/gist_id}","starred_url":"https://api.github.com/users/FrozenGene/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FrozenGene/subscriptions","organizations_url":"https://api.github.com/users/FrozenGene/orgs","repos_url":"https://api.github.com/users/FrozenGene/repos","events_url":"https://api.github.com/users/FrozenGene/events{/privacy}","received_events_url":"https://api.github.com/users/FrozenGene/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T10:10:39Z","updated_at":"2018-10-30T10:10:39Z","author_association":"MEMBER","body":"I like this design, previous way is strange to handle two situations.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434242520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434245874","html_url":"https://github.com/apache/tvm/issues/1887#issuecomment-434245874","issue_url":"https://api.github.com/repos/apache/tvm/issues/1887","id":434245874,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDI0NTg3NA==","user":{"login":"Rasterer","id":7001169,"node_id":"MDQ6VXNlcjcwMDExNjk=","avatar_url":"https://avatars.githubusercontent.com/u/7001169?v=4","gravatar_id":"","url":"https://api.github.com/users/Rasterer","html_url":"https://github.com/Rasterer","followers_url":"https://api.github.com/users/Rasterer/followers","following_url":"https://api.github.com/users/Rasterer/following{/other_user}","gists_url":"https://api.github.com/users/Rasterer/gists{/gist_id}","starred_url":"https://api.github.com/users/Rasterer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rasterer/subscriptions","organizations_url":"https://api.github.com/users/Rasterer/orgs","repos_url":"https://api.github.com/users/Rasterer/repos","events_url":"https://api.github.com/users/Rasterer/events{/privacy}","received_events_url":"https://api.github.com/users/Rasterer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T10:21:51Z","updated_at":"2018-10-30T10:21:51Z","author_association":"CONTRIBUTOR","body":"@merrymercy Thank you very much for your detail explanation. I applied this change locally, the time cost of my model reduced from 300+ms to 50ms, great performance boost! However, I still have some questions here:\r\n\r\n1. I reviewed your code, how about changing the implementation like this:\r\n```\r\n    rc = tvm.reduce_axis((0, CI), name='rc')\r\n    ry = tvm.reduce_axis((0, KH), name='ry')\r\n    rx = tvm.reduce_axis((0, KW), name='rx')\r\n    conv = tvm.compute((N, CO, out_height, out_width),\r\n                       lambda nn, ff, yy, xx: tvm.sum(\r\n                           pad_data[nn, rc, yy * strides[0] + ry * dilation[0], xx * strides[1] + rx * dilation[1]]*\r\n                           raw_kernel[ff, rc, ry, rx], axis=[rc, ry, rx]))\r\n```\r\nI limit the axis **ry  rx** extent within original kernel size **KH KW**, and put dilation address calculation into pad_data array indexing. So there is no need to call dilate_kernel, and unrolling is not necessary either. This code is also more intuitive for developers to understand generated IR.\r\n\r\n2. There is another problem in the change. That's the pad_temp loading. As you can see in your log, it loads 9x9 input data, which only 3x3 of them are used for final calculation. I found I can solve this issue by removing cache write of pad_data. But this is not good for data reusing. Do you have better idea about this?\r\n\r\nI post all my code here:\r\n```\r\nimport tvm\r\nimport topi\r\nfrom tvm.contrib.util import get_lower_ir\r\nfrom topi.nn.util import get_pad_tuple\r\nfrom topi.util import equal_const_int\r\n\r\n# args of a conv2d\r\nN, H, W, CO, CI, KH, KW, strides, padding = 1, 14, 14, 512, 512, 3, 3, (1, 1), (1, 1)\r\n# large dilation\r\ndilation = (4, 4)\r\n\r\ndef current_schedule():\r\n    \"\"\"The current bad schedule, as a reference\"\"\"\r\n    data = tvm.placeholder((N, CI, H, W), name='data')\r\n    raw_kernel = tvm.placeholder((CO, CI, KH, KW), name='kernel')\r\n\r\n    # dilate as a separate stage before conv\r\n    dilated_kernel = topi.nn.dilate(raw_kernel, (1, 1) + dilation, name='DilatedKernel')\r\n\r\n    conv = topi.nn.conv2d_nchw(data, dilated_kernel, strides, padding, 'float32')\r\n    s = tvm.create_schedule([conv.op])\r\n\r\n    pad_data = s[conv].op.input_tensors[0]\r\n    s[pad_data].compute_inline()\r\n    s[dilated_kernel].compute_inline()\r\n\r\n    AA = s.cache_read(pad_data, 'shared', conv)\r\n    BB = s.cache_read(dilated_kernel, 'shared', conv)\r\n\r\n    ci = s[conv].op.reduce_axis[0]\r\n    s[AA].compute_at(s[conv], ci)\r\n    s[BB].compute_at(s[conv], ci)\r\n\r\n    print(get_lower_ir(s))\r\n\r\ndef better_schedule():\r\n    \"\"\"The better schedule optimized for dilation\"\"\"\r\n    data = tvm.placeholder((N, CI, H, W), name='data')\r\n    raw_kernel = tvm.placeholder((CO, CI, KH, KW), name='kernel')\r\n\r\n    dilate_args = (1, 1)  + dilation\r\n    def dilate_kernel(*indices):   # This function is the same as topi.nn.dilate, but inlined\r\n        not_zero = []\r\n        index_tuple = []\r\n        for i in range(len(dilate_args)):\r\n            if not equal_const_int(dilate_args[i], 1):\r\n                index_tuple.append(indices[i] // dilate_args[i])\r\n                not_zero.append((indices[i] % dilate_args[i]).equal(0))\r\n            else:\r\n                index_tuple.append(indices[i])\r\n        if not_zero:\r\n            not_zero = tvm.all(*not_zero)\r\n            return tvm.select(not_zero, raw_kernel(*index_tuple), tvm.const(0.0, data.dtype))\r\n        return raw_kernel(*index_tuple)\r\n\r\n    kernel_h = (KH - 1) * dilation[0] + 1\r\n    kernel_w = (KW - 1) * dilation[1] + 1\r\n\r\n    # vanilla conv\r\n    pad_top, pad_left, pad_down, pad_right = get_pad_tuple(padding, (kernel_h, kernel_w))\r\n    out_height = (H - kernel_h + pad_top + pad_down) // strides[0] + 1\r\n    out_width = (W - kernel_h + pad_left + pad_right) // strides[1] + 1\r\n    pad_before = [0, 0, pad_top, pad_left]\r\n    pad_after = [0, 0, pad_down, pad_right]\r\n    pad_data = topi.nn.pad(data, pad_before, pad_after, name=\"pad_temp\")\r\n\r\n    rc = tvm.reduce_axis((0, CI), name='rc')\r\n    # ry = tvm.reduce_axis((0, kernel_h), name='ry')\r\n    # rx = tvm.reduce_axis((0, kernel_w), name='rx')\r\n    # conv = tvm.compute((N, CO, out_height, out_width),\r\n                       # lambda nn, ff, yy, xx: tvm.sum(\r\n                           # pad_data[nn, rc, yy * strides[0] + ry, xx * strides[1] + rx]*\r\n                           # dilate_kernel(ff, rc, ry, rx), axis=[rc, ry, rx]))\r\n                         # call inlined dilation function here\r\n\r\n    ry = tvm.reduce_axis((0, KH), name='ry')\r\n    rx = tvm.reduce_axis((0, KW), name='rx')\r\n    conv = tvm.compute((N, CO, out_height, out_width),\r\n                       lambda nn, ff, yy, xx: tvm.sum(\r\n                           # pad_data[nn, rc, yy * strides[0] + ry, xx * strides[1] + rx]*\r\n                           pad_data[nn, rc, yy * strides[0] + ry * dilation[0], xx * strides[1] + rx * dilation[1]]*\r\n                           raw_kernel[ff, rc, ry, rx], axis=[rc, ry, rx]))\r\n                           # dilate_kernel(ff, rc, ry, rx), axis=[rc, ry, rx]))\r\n\r\n    s = tvm.create_schedule([conv.op])\r\n\r\n    pad_data = s[conv].op.input_tensors[0]\r\n    s[pad_data].compute_inline()\r\n\r\n    # AA = s.cache_read(pad_data, 'shared', conv)\r\n    BB = s.cache_read(raw_kernel, 'shared', conv)\r\n\r\n    n, c, h, w = s[conv].op.axis\r\n    ci, kh, kw = s[conv].op.reduce_axis\r\n\r\n    # s[AA].compute_at(s[conv], ci)\r\n    s[BB].compute_at(s[conv], ci)\r\n\r\n    # use unroll + simpilier to eliminate multiplications of zeros\r\n    s[conv].unroll(kh)\r\n    s[conv].unroll(kw)\r\n\r\n    print(get_lower_ir(s))\r\n\r\n\r\nprint(\"Current Schedule\")\r\ncurrent_schedule()\r\n\r\nprint(\"=================================\")\r\nprint(\"Better Schedule\")\r\nbetter_schedule()\r\n```\r\noutput:\r\n```\r\nCurrent Schedule\r\n// attr [compute] storage_scope = \"global\"\r\nallocate compute[float32 * 1 * 512 * 8 * 8]\r\n// attr [pad_temp.shared] storage_scope = \"shared\"\r\nallocate pad_temp.shared[float32 * 1 * 1 * 9 * 9]\r\n// attr [DilatedKernel.shared] storage_scope = \"shared\"\r\nallocate DilatedKernel.shared[float32 * 1 * 1 * 9 * 9]\r\nproduce compute {\r\n  for (ff, 0, 512) {\r\n    for (yy, 0, 8) {\r\n      for (xx, 0, 8) {\r\n        compute[((((ff*8) + yy)*8) + xx)] = 0.000000f\r\n        for (rc, 0, 512) {\r\n          produce pad_temp.shared {\r\n            for (ax2, 0, 9) {\r\n              for (ax3, 0, 9) {\r\n                pad_temp.shared[((ax2*9) + ax3)] = tvm_if_then_else((((((1 - ax2) <= yy) && (yy < (15 - ax2))) && ((1 - ax3) <= xx)) && (xx < (15 - ax3))), data[((((((yy*14) + xx) + (rc*196)) + (ax2*14)) + ax3) + -15)], 0.000000f)\r\n              }\r\n            }\r\n          }\r\n          produce DilatedKernel.shared {\r\n            for (ax2, 0, 9) {\r\n              for (ax3, 0, 9) {\r\n                DilatedKernel.shared[((ax2*9) + ax3)] = tvm_if_then_else((((ax2 % 4) == 0) && ((ax3 % 4) == 0)), kernel[((((((ff*512) + rc)*3) + (ax2/4))*3) + (ax3/4))], 0.000000f)\r\n              }\r\n            }\r\n          }\r\n          for (ry, 0, 9) {\r\n            for (rx, 0, 9) {\r\n              compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (pad_temp.shared[((ry*9) + rx)]*DilatedKernel.shared[((ry*9) + rx)]))\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n=================================\r\nBetter Schedule\r\n// attr [compute] storage_scope = \"global\"\r\nallocate compute[float32 * 1 * 512 * 8 * 8]\r\n// attr [kernel.shared] storage_scope = \"shared\"\r\nallocate kernel.shared[float32 * 1 * 1 * 3 * 3]\r\nproduce compute {\r\n  for (ff, 0, 512) {\r\n    for (yy, 0, 8) {\r\n      for (xx, 0, 8) {\r\n        compute[((((ff*8) + yy)*8) + xx)] = 0.000000f\r\n        for (rc, 0, 512) {\r\n          produce kernel.shared {\r\n            for (ax2, 0, 3) {\r\n              for (ax3, 0, 3) {\r\n                kernel.shared[((ax2*3) + ax3)] = kernel[((((((ff*512) + rc)*3) + ax2)*3) + ax3)]\r\n              }\r\n            }\r\n          }\r\n          for (ry, 0, 3) {\r\n            for (rx, 0, 3) {\r\n              compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (tvm_if_then_else((((((1 - (ry*4)) <= yy) && (yy < (15 - (ry*4)))) && ((1 - (rx*4)) <= xx)) && (xx < (15 - (rx*4)))), data[((((((yy*14) + xx) + (rc*196)) + (ry*56)) + (rx*4)) + -15)], 0.000000f)*kernel.shared[((ry*3) + rx)]))\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434245874/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434262170","html_url":"https://github.com/apache/tvm/issues/2037#issuecomment-434262170","issue_url":"https://api.github.com/repos/apache/tvm/issues/2037","id":434262170,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDI2MjE3MA==","user":{"login":"srkreddy1238","id":14215163,"node_id":"MDQ6VXNlcjE0MjE1MTYz","avatar_url":"https://avatars.githubusercontent.com/u/14215163?v=4","gravatar_id":"","url":"https://api.github.com/users/srkreddy1238","html_url":"https://github.com/srkreddy1238","followers_url":"https://api.github.com/users/srkreddy1238/followers","following_url":"https://api.github.com/users/srkreddy1238/following{/other_user}","gists_url":"https://api.github.com/users/srkreddy1238/gists{/gist_id}","starred_url":"https://api.github.com/users/srkreddy1238/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/srkreddy1238/subscriptions","organizations_url":"https://api.github.com/users/srkreddy1238/orgs","repos_url":"https://api.github.com/users/srkreddy1238/repos","events_url":"https://api.github.com/users/srkreddy1238/events{/privacy}","received_events_url":"https://api.github.com/users/srkreddy1238/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T11:18:16Z","updated_at":"2018-10-30T11:18:16Z","author_association":"CONTRIBUTOR","body":"This look like a bug in onnx frontend.\r\n\r\nNNVM expects indices as an ascending ordered list which indicates the indices to split with start as 0 and end as length of dimension, hence the ```+1```.\r\nIn ONNX the ```split``` arg indicates the length of splits instead of indices.\r\n\r\nYou are welcome to contribute a fix for this.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434262170/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434296389","html_url":"https://github.com/apache/tvm/pull/1967#issuecomment-434296389","issue_url":"https://api.github.com/repos/apache/tvm/issues/1967","id":434296389,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDI5NjM4OQ==","user":{"login":"cnuernber","id":40426,"node_id":"MDQ6VXNlcjQwNDI2","avatar_url":"https://avatars.githubusercontent.com/u/40426?v=4","gravatar_id":"","url":"https://api.github.com/users/cnuernber","html_url":"https://github.com/cnuernber","followers_url":"https://api.github.com/users/cnuernber/followers","following_url":"https://api.github.com/users/cnuernber/following{/other_user}","gists_url":"https://api.github.com/users/cnuernber/gists{/gist_id}","starred_url":"https://api.github.com/users/cnuernber/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cnuernber/subscriptions","organizations_url":"https://api.github.com/users/cnuernber/orgs","repos_url":"https://api.github.com/users/cnuernber/repos","events_url":"https://api.github.com/users/cnuernber/events{/privacy}","received_events_url":"https://api.github.com/users/cnuernber/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T13:16:33Z","updated_at":"2018-10-30T13:16:33Z","author_association":"CONTRIBUTOR","body":"@liangfu: Addressed :-).  Ready for next round.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434296389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434300040","html_url":"https://github.com/apache/tvm/pull/1967#issuecomment-434300040","issue_url":"https://api.github.com/repos/apache/tvm/issues/1967","id":434300040,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDMwMDA0MA==","user":{"login":"liangfu","id":857821,"node_id":"MDQ6VXNlcjg1NzgyMQ==","avatar_url":"https://avatars.githubusercontent.com/u/857821?v=4","gravatar_id":"","url":"https://api.github.com/users/liangfu","html_url":"https://github.com/liangfu","followers_url":"https://api.github.com/users/liangfu/followers","following_url":"https://api.github.com/users/liangfu/following{/other_user}","gists_url":"https://api.github.com/users/liangfu/gists{/gist_id}","starred_url":"https://api.github.com/users/liangfu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liangfu/subscriptions","organizations_url":"https://api.github.com/users/liangfu/orgs","repos_url":"https://api.github.com/users/liangfu/repos","events_url":"https://api.github.com/users/liangfu/events{/privacy}","received_events_url":"https://api.github.com/users/liangfu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T13:27:37Z","updated_at":"2018-10-30T13:27:37Z","author_association":"MEMBER","body":"@cnuernber thank you for your valuable contribution, this LGTM.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434300040/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434300269","html_url":"https://github.com/apache/tvm/issues/2037#issuecomment-434300269","issue_url":"https://api.github.com/repos/apache/tvm/issues/2037","id":434300269,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDMwMDI2OQ==","user":{"login":"BobLiu20","id":6102702,"node_id":"MDQ6VXNlcjYxMDI3MDI=","avatar_url":"https://avatars.githubusercontent.com/u/6102702?v=4","gravatar_id":"","url":"https://api.github.com/users/BobLiu20","html_url":"https://github.com/BobLiu20","followers_url":"https://api.github.com/users/BobLiu20/followers","following_url":"https://api.github.com/users/BobLiu20/following{/other_user}","gists_url":"https://api.github.com/users/BobLiu20/gists{/gist_id}","starred_url":"https://api.github.com/users/BobLiu20/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BobLiu20/subscriptions","organizations_url":"https://api.github.com/users/BobLiu20/orgs","repos_url":"https://api.github.com/users/BobLiu20/repos","events_url":"https://api.github.com/users/BobLiu20/events{/privacy}","received_events_url":"https://api.github.com/users/BobLiu20/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T13:28:10Z","updated_at":"2018-10-30T13:32:00Z","author_association":"NONE","body":"Add PR to fixed this issue. Waiting for merge.\r\n\r\n@srkreddy1238  Thanks","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434300269/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434314008","html_url":"https://github.com/apache/tvm/pull/2004#issuecomment-434314008","issue_url":"https://api.github.com/repos/apache/tvm/issues/2004","id":434314008,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDMxNDAwOA==","user":{"login":"srkreddy1238","id":14215163,"node_id":"MDQ6VXNlcjE0MjE1MTYz","avatar_url":"https://avatars.githubusercontent.com/u/14215163?v=4","gravatar_id":"","url":"https://api.github.com/users/srkreddy1238","html_url":"https://github.com/srkreddy1238","followers_url":"https://api.github.com/users/srkreddy1238/followers","following_url":"https://api.github.com/users/srkreddy1238/following{/other_user}","gists_url":"https://api.github.com/users/srkreddy1238/gists{/gist_id}","starred_url":"https://api.github.com/users/srkreddy1238/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/srkreddy1238/subscriptions","organizations_url":"https://api.github.com/users/srkreddy1238/orgs","repos_url":"https://api.github.com/users/srkreddy1238/repos","events_url":"https://api.github.com/users/srkreddy1238/events{/privacy}","received_events_url":"https://api.github.com/users/srkreddy1238/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T14:05:18Z","updated_at":"2018-10-30T14:05:18Z","author_association":"CONTRIBUTOR","body":"@reminisce welcome to share the patch by handling in LLVM which is a clean fix for this issue.\r\nHence closing this PR here, further discussion can be on issue tracker #1676 \r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434314008/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434362470","html_url":"https://github.com/apache/tvm/issues/1656#issuecomment-434362470","issue_url":"https://api.github.com/repos/apache/tvm/issues/1656","id":434362470,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM2MjQ3MA==","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T16:04:03Z","updated_at":"2018-10-30T16:04:03Z","author_association":"CONTRIBUTOR","body":"@liangfu the `fetch` module grabs the instructions from DDR via DMA over the ACP port. It pushes the instruction it streams in into FIFO queues, that all take 1 block ram.\r\n\r\nIf you have vivado installed on your machine, you can build the design, and visualize the board diagram by opening the .xpr project file in the Vivado GUI, and then open the vta_wrapper.bd board design. This will show you how all of the modules are integrated within the Zynq SoC chip. \r\n\r\nHope this helps!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434362470/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434363647","html_url":"https://github.com/apache/tvm/issues/2017#issuecomment-434363647","issue_url":"https://api.github.com/repos/apache/tvm/issues/2017","id":434363647,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM2MzY0Nw==","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T16:07:12Z","updated_at":"2018-10-30T16:07:12Z","author_association":"CONTRIBUTOR","body":"I do have a preference for using the discuss forums, but @nhynes brings up a good point w.r.t. getting quick answers in Slack. \r\n\r\nHowever, one of the benefits of the forums is being able to search through history, and the latter being indexable by search engines. Would Slack give us the same benefits? Right now we have a free slack organization, and we'd certainly have to upgrade to a paid one to at least be able to preserve chat history. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434363647/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434373361","html_url":"https://github.com/apache/tvm/issues/2017#issuecomment-434373361","issue_url":"https://api.github.com/repos/apache/tvm/issues/2017","id":434373361,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM3MzM2MQ==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T16:30:48Z","updated_at":"2018-10-30T16:30:48Z","author_association":"MEMBER","body":"I like the idea of nominating committers and reviewers more from other organizations, it helps build diversity and improves collaboration within the community.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434373361/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434376273","html_url":"https://github.com/apache/tvm/pull/2039#issuecomment-434376273","issue_url":"https://api.github.com/repos/apache/tvm/issues/2039","id":434376273,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM3NjI3Mw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T16:38:15Z","updated_at":"2018-10-30T16:38:15Z","author_association":"MEMBER","body":"Thanks @xqdan @kun-zh , this is merged!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434376273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434376607","html_url":"https://github.com/apache/tvm/pull/2034#issuecomment-434376607","issue_url":"https://api.github.com/repos/apache/tvm/issues/2034","id":434376607,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM3NjYwNw==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T16:39:06Z","updated_at":"2018-10-30T16:39:06Z","author_association":"MEMBER","body":"nice.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434376607/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434377463","html_url":"https://github.com/apache/tvm/pull/2032#issuecomment-434377463","issue_url":"https://api.github.com/repos/apache/tvm/issues/2032","id":434377463,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM3NzQ2Mw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T16:41:15Z","updated_at":"2018-10-30T16:41:15Z","author_association":"MEMBER","body":"We need to be careful here, note that we do need the sequential execution even between functions in different modules, would a separate queue for each module breaks that?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434377463/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434379020","html_url":"https://github.com/apache/tvm/pull/2032#issuecomment-434379020","issue_url":"https://api.github.com/repos/apache/tvm/issues/2032","id":434379020,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM3OTAyMA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T16:45:01Z","updated_at":"2018-10-30T16:45:01Z","author_association":"MEMBER","body":"The concept of queue(stream) in cuda should not be tied to the function itself. The OpenCL runtime does have a limitation that we are only tied to pre-created queues.\r\n\r\nThe module we used in CUDA is that we allow the call of https://github.com/dmlc/tvm/blob/master/src/runtime/cuda/cuda_device_api.cc#L167 to change the threadlocal context of current stream. This enables concurrency in CUDA, maybe we want to adopt a model similar to that one\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434379020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434382574","html_url":"https://github.com/apache/tvm/pull/2031#issuecomment-434382574","issue_url":"https://api.github.com/repos/apache/tvm/issues/2031","id":434382574,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM4MjU3NA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T16:53:40Z","updated_at":"2018-10-30T16:53:40Z","author_association":"MEMBER","body":"Thanks @siju-samuel @junrushao1994 , this is now merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434382574/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434386198","html_url":"https://github.com/apache/tvm/issues/2036#issuecomment-434386198","issue_url":"https://api.github.com/repos/apache/tvm/issues/2036","id":434386198,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM4NjE5OA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T17:02:56Z","updated_at":"2018-10-30T17:02:56Z","author_association":"MEMBER","body":"Thanks for bringing up the question, please open a new thread at https://discuss.tvm.ai/","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434386198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434389630","html_url":"https://github.com/apache/tvm/pull/2028#issuecomment-434389630","issue_url":"https://api.github.com/repos/apache/tvm/issues/2028","id":434389630,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDM4OTYzMA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T17:11:47Z","updated_at":"2018-10-30T17:11:47Z","author_association":"MEMBER","body":"I think the general idea moving forward, once we have a good idea of schedule template, is always create a new \"fork\" of an existing template when we make improvements, and keep the versioned template stable for two releases","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434389630/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434438002","html_url":"https://github.com/apache/tvm/pull/2032#issuecomment-434438002","issue_url":"https://api.github.com/repos/apache/tvm/issues/2032","id":434438002,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDQzODAwMg==","user":{"login":"kazum","id":812126,"node_id":"MDQ6VXNlcjgxMjEyNg==","avatar_url":"https://avatars.githubusercontent.com/u/812126?v=4","gravatar_id":"","url":"https://api.github.com/users/kazum","html_url":"https://github.com/kazum","followers_url":"https://api.github.com/users/kazum/followers","following_url":"https://api.github.com/users/kazum/following{/other_user}","gists_url":"https://api.github.com/users/kazum/gists{/gist_id}","starred_url":"https://api.github.com/users/kazum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kazum/subscriptions","organizations_url":"https://api.github.com/users/kazum/orgs","repos_url":"https://api.github.com/users/kazum/repos","events_url":"https://api.github.com/users/kazum/events{/privacy}","received_events_url":"https://api.github.com/users/kazum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T19:29:48Z","updated_at":"2018-10-30T19:29:48Z","author_association":"CONTRIBUTOR","body":"@masahi I'm not sure the reason but some of module.run() calls in the result take too much time.  The result is similar even when the CUDA runtime is used.  I guess there's a plenty of room for improvement on module concurrency.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434438002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434438824","html_url":"https://github.com/apache/tvm/pull/2032#issuecomment-434438824","issue_url":"https://api.github.com/repos/apache/tvm/issues/2032","id":434438824,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDQzODgyNA==","user":{"login":"kazum","id":812126,"node_id":"MDQ6VXNlcjgxMjEyNg==","avatar_url":"https://avatars.githubusercontent.com/u/812126?v=4","gravatar_id":"","url":"https://api.github.com/users/kazum","html_url":"https://github.com/kazum","followers_url":"https://api.github.com/users/kazum/followers","following_url":"https://api.github.com/users/kazum/following{/other_user}","gists_url":"https://api.github.com/users/kazum/gists{/gist_id}","starred_url":"https://api.github.com/users/kazum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kazum/subscriptions","organizations_url":"https://api.github.com/users/kazum/orgs","repos_url":"https://api.github.com/users/kazum/repos","events_url":"https://api.github.com/users/kazum/events{/privacy}","received_events_url":"https://api.github.com/users/kazum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T19:32:20Z","updated_at":"2018-10-30T19:32:20Z","author_association":"CONTRIBUTOR","body":"@tqchen  Can you share the example where we need the sequential execution between modules?  I was not aware of the case.\r\n\r\nI'll rework this PR based on the stream api.  It looks the right way to go, thanks!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434438824/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434466201","html_url":"https://github.com/apache/tvm/pull/2032#issuecomment-434466201","issue_url":"https://api.github.com/repos/apache/tvm/issues/2032","id":434466201,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDQ2NjIwMQ==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T20:55:46Z","updated_at":"2018-10-30T20:55:58Z","author_association":"MEMBER","body":"Although there is no exact example, you can imagine that users would load in multiple modules and call functions from each one of them. Usually user will expect that these functions  have serial ordering","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434466201/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434472806","html_url":"https://github.com/apache/tvm/issues/2017#issuecomment-434472806","issue_url":"https://api.github.com/repos/apache/tvm/issues/2017","id":434472806,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDQ3MjgwNg==","user":{"login":"slyubomirsky","id":5624871,"node_id":"MDQ6VXNlcjU2MjQ4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/5624871?v=4","gravatar_id":"","url":"https://api.github.com/users/slyubomirsky","html_url":"https://github.com/slyubomirsky","followers_url":"https://api.github.com/users/slyubomirsky/followers","following_url":"https://api.github.com/users/slyubomirsky/following{/other_user}","gists_url":"https://api.github.com/users/slyubomirsky/gists{/gist_id}","starred_url":"https://api.github.com/users/slyubomirsky/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/slyubomirsky/subscriptions","organizations_url":"https://api.github.com/users/slyubomirsky/orgs","repos_url":"https://api.github.com/users/slyubomirsky/repos","events_url":"https://api.github.com/users/slyubomirsky/events{/privacy}","received_events_url":"https://api.github.com/users/slyubomirsky/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T21:16:21Z","updated_at":"2018-10-30T21:16:21Z","author_association":"CONTRIBUTOR","body":"I agree with @tmoreau89 on the benefit of forums being conveniently searchable. It is much easier and more natural to resurrect an old forum thread if the topic has become relevant again than it is to keep a discussion going in a Slack channel","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434472806/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434473478","html_url":"https://github.com/apache/tvm/issues/2017#issuecomment-434473478","issue_url":"https://api.github.com/repos/apache/tvm/issues/2017","id":434473478,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDQ3MzQ3OA==","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T21:18:31Z","updated_at":"2018-10-30T21:18:31Z","author_association":"MEMBER","body":"Yeah I think @nhynes brings up a good point about slack being a good place for people to do quick knowledge exchanges while developing/hacking on TVM.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434473478/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434494408","html_url":"https://github.com/apache/tvm/pull/1954#issuecomment-434494408","issue_url":"https://api.github.com/repos/apache/tvm/issues/1954","id":434494408,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDQ5NDQwOA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T22:34:16Z","updated_at":"2018-10-30T22:34:16Z","author_association":"MEMBER","body":"Thanks, @jroesch @junrushao1994 @joshpoll @zhiics @slyubomirsky @MarisaKirisame , this is now merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434494408/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434506213","html_url":"https://github.com/apache/tvm/pull/1781#issuecomment-434506213","issue_url":"https://api.github.com/repos/apache/tvm/issues/1781","id":434506213,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDUwNjIxMw==","user":{"login":"joshpoll","id":21694516,"node_id":"MDQ6VXNlcjIxNjk0NTE2","avatar_url":"https://avatars.githubusercontent.com/u/21694516?v=4","gravatar_id":"","url":"https://api.github.com/users/joshpoll","html_url":"https://github.com/joshpoll","followers_url":"https://api.github.com/users/joshpoll/followers","following_url":"https://api.github.com/users/joshpoll/following{/other_user}","gists_url":"https://api.github.com/users/joshpoll/gists{/gist_id}","starred_url":"https://api.github.com/users/joshpoll/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joshpoll/subscriptions","organizations_url":"https://api.github.com/users/joshpoll/orgs","repos_url":"https://api.github.com/users/joshpoll/repos","events_url":"https://api.github.com/users/joshpoll/events{/privacy}","received_events_url":"https://api.github.com/users/joshpoll/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T23:21:55Z","updated_at":"2018-10-30T23:21:55Z","author_association":"CONTRIBUTOR","body":"This PR is feature-complete and will be merged soon.\r\n\r\n@jroesch @MarisaKirisame @slyubomirsky @tqchen @yuruofeifei @grwlf @nhynes @junrushao1994 please review.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434506213/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434506341","html_url":"https://github.com/apache/tvm/pull/2035#issuecomment-434506341","issue_url":"https://api.github.com/repos/apache/tvm/issues/2035","id":434506341,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDUwNjM0MQ==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-30T23:22:29Z","updated_at":"2018-10-30T23:22:29Z","author_association":"MEMBER","body":"@eqy please review again","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434506341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434537834","html_url":"https://github.com/apache/tvm/pull/2011#issuecomment-434537834","issue_url":"https://api.github.com/repos/apache/tvm/issues/2011","id":434537834,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDUzNzgzNA==","user":{"login":"slyubomirsky","id":5624871,"node_id":"MDQ6VXNlcjU2MjQ4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/5624871?v=4","gravatar_id":"","url":"https://api.github.com/users/slyubomirsky","html_url":"https://github.com/slyubomirsky","followers_url":"https://api.github.com/users/slyubomirsky/followers","following_url":"https://api.github.com/users/slyubomirsky/following{/other_user}","gists_url":"https://api.github.com/users/slyubomirsky/gists{/gist_id}","starred_url":"https://api.github.com/users/slyubomirsky/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/slyubomirsky/subscriptions","organizations_url":"https://api.github.com/users/slyubomirsky/orgs","repos_url":"https://api.github.com/users/slyubomirsky/repos","events_url":"https://api.github.com/users/slyubomirsky/events{/privacy}","received_events_url":"https://api.github.com/users/slyubomirsky/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T02:21:02Z","updated_at":"2018-10-31T02:21:02Z","author_association":"CONTRIBUTOR","body":"Something gives one way or another: Type unification is inadequate (I had to annotate the types because it would not be able to conclude that you can unify tuple(tensor, tensor) and tuple(unknown, unknown) -- there should really be a visitor for unification!) and the error reporting is worse (I know there's a shape mismatch somewhere but not where)","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434537834/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434538070","html_url":"https://github.com/apache/tvm/issues/2030#issuecomment-434538070","issue_url":"https://api.github.com/repos/apache/tvm/issues/2030","id":434538070,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDUzODA3MA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T02:22:28Z","updated_at":"2018-10-31T02:22:28Z","author_association":"MEMBER","body":"I think in general we could support some of this. This is more of like information registry for intrinsics, can we have a more specific design RFC to make sure it is concise and informative and we can talk again? This is a bit like operator registry we have for high level ops","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434538070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434538597","html_url":"https://github.com/apache/tvm/issues/1996#issuecomment-434538597","issue_url":"https://api.github.com/repos/apache/tvm/issues/1996","id":434538597,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDUzODU5Nw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T02:25:49Z","updated_at":"2018-10-31T02:25:49Z","author_association":"MEMBER","body":"This looks great. I would also encourage us to think a bit more on how this can play together with the current system. Specifically, while being able to run AD in tensor expression level end to end is fun, we may not necessarily use this method, as AD on high-level IR still offers advantages of things like general graph optimizations and pick of algorithms(winograd vs direct), so technically we would still encourage the use of high-level IR AD.\r\n\r\nOn the other hand, this would become practical if we could have a proposal on how to write quick expression op, that can be integrated together with other high-level IR and its AD system, this would enable a powerful to write custom operators and automatically generate gradient for it\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434538597/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434539477","html_url":"https://github.com/apache/tvm/pull/1781#issuecomment-434539477","issue_url":"https://api.github.com/repos/apache/tvm/issues/1781","id":434539477,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDUzOTQ3Nw==","user":{"login":"MarisaKirisame","id":3397377,"node_id":"MDQ6VXNlcjMzOTczNzc=","avatar_url":"https://avatars.githubusercontent.com/u/3397377?v=4","gravatar_id":"","url":"https://api.github.com/users/MarisaKirisame","html_url":"https://github.com/MarisaKirisame","followers_url":"https://api.github.com/users/MarisaKirisame/followers","following_url":"https://api.github.com/users/MarisaKirisame/following{/other_user}","gists_url":"https://api.github.com/users/MarisaKirisame/gists{/gist_id}","starred_url":"https://api.github.com/users/MarisaKirisame/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarisaKirisame/subscriptions","organizations_url":"https://api.github.com/users/MarisaKirisame/orgs","repos_url":"https://api.github.com/users/MarisaKirisame/repos","events_url":"https://api.github.com/users/MarisaKirisame/events{/privacy}","received_events_url":"https://api.github.com/users/MarisaKirisame/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T02:31:06Z","updated_at":"2018-10-31T02:31:06Z","author_association":"CONTRIBUTOR","body":"@joshpoll did you get a version number? if so it is all good to me","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434539477/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434539901","html_url":"https://github.com/apache/tvm/pull/1967#issuecomment-434539901","issue_url":"https://api.github.com/repos/apache/tvm/issues/1967","id":434539901,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDUzOTkwMQ==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T02:33:44Z","updated_at":"2018-10-31T02:33:44Z","author_association":"MEMBER","body":"Thanks, @cnuernber for contributing and @liangfu for the reviews, this is now merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434539901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434541345","html_url":"https://github.com/apache/tvm/pull/1781#issuecomment-434541345","issue_url":"https://api.github.com/repos/apache/tvm/issues/1781","id":434541345,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU0MTM0NQ==","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T02:42:57Z","updated_at":"2018-10-31T02:51:40Z","author_association":"MEMBER","body":"Assuming ANTLR is pre-installed like [here](https://github.com/dmlc/tvm/blob/master/docker/install/ubuntu_install_antlr.sh), everything looks good to me","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434541345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434548141","html_url":"https://github.com/apache/tvm/pull/1970#issuecomment-434548141","issue_url":"https://api.github.com/repos/apache/tvm/issues/1970","id":434548141,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU0ODE0MQ==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T03:24:29Z","updated_at":"2018-10-31T03:24:29Z","author_association":"MEMBER","body":"Can you also help to update the style of cuda winograd and cuda int8 according to #2034 ?\r\nSo we can delete all strange logic in things like `_conv2d_arg_to_workloads`","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434548141/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434552438","html_url":"https://github.com/apache/tvm/pull/2028#issuecomment-434552438","issue_url":"https://api.github.com/repos/apache/tvm/issues/2028","id":434552438,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU1MjQzOA==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T03:54:11Z","updated_at":"2018-10-31T03:54:11Z","author_association":"MEMBER","body":"My proposal is to bring version number to autotvm template. So we will have template keys like `direct#0`, `direct#1`, `direct#4`.\r\nCurrently, we always use `direct` as the default/fallback template key. Users also use it to create tuning tasks. We can still keep this. But the system will redirect `direct` to the latest version.\r\nIn the log, we will log template key with the version number, so we can dispatch them to correct templates when using `apply_history_best`.\r\n\r\nAnother critical problem of this template is that XGBTuner with default parameters doesn't support tuning `compute_at`. I think I have to solve this problem before we pick this template as default template.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434552438/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434557128","html_url":"https://github.com/apache/tvm/pull/2011#issuecomment-434557128","issue_url":"https://api.github.com/repos/apache/tvm/issues/2011","id":434557128,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU1NzEyOA==","user":{"login":"slyubomirsky","id":5624871,"node_id":"MDQ6VXNlcjU2MjQ4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/5624871?v=4","gravatar_id":"","url":"https://api.github.com/users/slyubomirsky","html_url":"https://github.com/slyubomirsky","followers_url":"https://api.github.com/users/slyubomirsky/followers","following_url":"https://api.github.com/users/slyubomirsky/following{/other_user}","gists_url":"https://api.github.com/users/slyubomirsky/gists{/gist_id}","starred_url":"https://api.github.com/users/slyubomirsky/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/slyubomirsky/subscriptions","organizations_url":"https://api.github.com/users/slyubomirsky/orgs","repos_url":"https://api.github.com/users/slyubomirsky/repos","events_url":"https://api.github.com/users/slyubomirsky/events{/privacy}","received_events_url":"https://api.github.com/users/slyubomirsky/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T04:28:52Z","updated_at":"2018-10-31T04:28:52Z","author_association":"CONTRIBUTOR","body":"I will do a substantial refactor using the ScopeBuilder to see if that might help anything","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434557128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434562409","html_url":"https://github.com/apache/tvm/issues/1996#issuecomment-434562409","issue_url":"https://api.github.com/repos/apache/tvm/issues/1996","id":434562409,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU2MjQwOQ==","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T05:05:22Z","updated_at":"2018-10-31T05:05:22Z","author_association":"MEMBER","body":"@MarisaKirisame after PLDI could you provide more feedback.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434562409/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434564560","html_url":"https://github.com/apache/tvm/issues/1996#issuecomment-434564560","issue_url":"https://api.github.com/repos/apache/tvm/issues/1996","id":434564560,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU2NDU2MA==","user":{"login":"MarisaKirisame","id":3397377,"node_id":"MDQ6VXNlcjMzOTczNzc=","avatar_url":"https://avatars.githubusercontent.com/u/3397377?v=4","gravatar_id":"","url":"https://api.github.com/users/MarisaKirisame","html_url":"https://github.com/MarisaKirisame","followers_url":"https://api.github.com/users/MarisaKirisame/followers","following_url":"https://api.github.com/users/MarisaKirisame/following{/other_user}","gists_url":"https://api.github.com/users/MarisaKirisame/gists{/gist_id}","starred_url":"https://api.github.com/users/MarisaKirisame/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarisaKirisame/subscriptions","organizations_url":"https://api.github.com/users/MarisaKirisame/orgs","repos_url":"https://api.github.com/users/MarisaKirisame/repos","events_url":"https://api.github.com/users/MarisaKirisame/events{/privacy}","received_events_url":"https://api.github.com/users/MarisaKirisame/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T05:20:04Z","updated_at":"2018-10-31T05:20:04Z","author_association":"CONTRIBUTOR","body":"@jroesch yeah","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434564560/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434568924","html_url":"https://github.com/apache/tvm/issues/1887#issuecomment-434568924","issue_url":"https://api.github.com/repos/apache/tvm/issues/1887","id":434568924,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU2ODkyNA==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T05:48:40Z","updated_at":"2018-10-31T05:50:53Z","author_association":"MEMBER","body":"Good observation. Cache_read can only cache a continuous range. This is the current limitation. We can add an explicit packing stage as a workaround.\r\n\r\n```python\r\nimport tvm\r\nimport topi\r\nfrom tvm.contrib.util import get_lower_ir\r\nfrom topi.nn.util import get_pad_tuple\r\nfrom topi.util import equal_const_int\r\n\r\n# args of a conv2d\r\nN, H, W, CO, CI, KH, KW, strides, padding = 1, 14, 14, 512, 512, 3, 3, (1, 1), (1, 1)\r\n# large dilation\r\ndilation = (4, 4)\r\n\r\ndef current_schedule():\r\n    \"\"\"The current bad schedule, as a reference\"\"\"\r\n    data = tvm.placeholder((N, CI, H, W), name='data')\r\n    raw_kernel = tvm.placeholder((CO, CI, KH, KW), name='kernel')\r\n\r\n    # dilate as a separate stage before conv\r\n    dilated_kernel = topi.nn.dilate(raw_kernel, (1, 1) + dilation, name='DilatedKernel')\r\n\r\n    conv = topi.nn.conv2d_nchw(data, dilated_kernel, strides, padding, 'float32')\r\n    s = tvm.create_schedule([conv.op])\r\n\r\n    pad_data = s[conv].op.input_tensors[0]\r\n    s[pad_data].compute_inline()\r\n    s[dilated_kernel].compute_inline()\r\n\r\n    AA = s.cache_read(pad_data, 'shared', conv)\r\n    BB = s.cache_read(dilated_kernel, 'shared', conv)\r\n\r\n    ci = s[conv].op.reduce_axis[0]\r\n    s[AA].compute_at(s[conv], ci)\r\n    s[BB].compute_at(s[conv], ci)\r\n\r\n    print(get_lower_ir(s))\r\n\r\ndef better_schedule():\r\n    \"\"\"The better schedule optimized for dilation\"\"\"\r\n    data = tvm.placeholder((N, CI, H, W), name='data')\r\n    raw_kernel = tvm.placeholder((CO, CI, KH, KW), name='kernel')\r\n\r\n    dilate_args = (1, 1)  + dilation\r\n    def dilate_kernel(*indices):   # This function is the same as topi.nn.dilate, but inlined\r\n        not_zero = []\r\n        index_tuple = []\r\n        for i in range(len(dilate_args)):\r\n            if not equal_const_int(dilate_args[i], 1):\r\n                index_tuple.append(indices[i] // dilate_args[i])\r\n                not_zero.append((indices[i] % dilate_args[i]).equal(0))\r\n            else:\r\n                index_tuple.append(indices[i])\r\n        if not_zero:\r\n            not_zero = tvm.all(*not_zero)\r\n            return tvm.select(not_zero, raw_kernel(*index_tuple), tvm.const(0.0, data.dtype))\r\n        return raw_kernel(*index_tuple)\r\n\r\n    kernel_h = (KH - 1) * dilation[0] + 1\r\n    kernel_w = (KW - 1) * dilation[1] + 1\r\n\r\n    # vanilla conv\r\n    pad_top, pad_left, pad_down, pad_right = get_pad_tuple(padding, (kernel_h, kernel_w))\r\n    out_height = (H - kernel_h + pad_top + pad_down) // strides[0] + 1\r\n    out_width = (W - kernel_h + pad_left + pad_right) // strides[1] + 1\r\n    pad_before = [0, 0, pad_top, pad_left]\r\n    pad_after = [0, 0, pad_down, pad_right]\r\n    pad_data = topi.nn.pad(data, pad_before, pad_after, name=\"pad_temp\")\r\n\r\n    ##### EXPLICIT PACKING #####\r\n    packed_data = tvm.compute((N, CO, out_height, out_width, KH, KW), lambda n, f, y, x, kh, kw:\r\n            pad_data[n, f, y * strides[0] + kh * dilation[0], x * strides[1] + kw * dilation[1]], name='packed_data')\r\n\r\n    rc = tvm.reduce_axis((0, CI), name='rc')\r\n    ry = tvm.reduce_axis((0, KH), name='ry')\r\n    rx = tvm.reduce_axis((0, KW), name='rx')\r\n    conv = tvm.compute((N, CO, out_height, out_width),\r\n                       lambda nn, ff, yy, xx: tvm.sum(\r\n                           packed_data[nn, rc, yy, xx, ry, rx] *\r\n                           raw_kernel[ff, rc, ry, rx], axis=[rc, ry, rx]))\r\n\r\n    s = tvm.create_schedule([conv.op])\r\n\r\n    s[pad_data].compute_inline()\r\n\r\n    BB = s.cache_read(raw_kernel, 'shared', conv)\r\n\r\n    n, c, h, w = s[conv].op.axis\r\n    ci, kh, kw = s[conv].op.reduce_axis\r\n\r\n    s[BB].compute_at(s[conv], ci)\r\n    s[packed_data].compute_at(s[conv], ci)\r\n\r\n    # use unroll + simpilier to eliminate multiplications of zeros\r\n    s[conv].unroll(kh)\r\n    s[conv].unroll(kw)\r\n\r\n    print(get_lower_ir(s))\r\n\r\n\r\nprint(\"Current Schedule\")\r\ncurrent_schedule()\r\n\r\nprint(\"=================================\")\r\nprint(\"Better Schedule\")\r\nbetter_schedule()\r\n```\r\n\r\noutput\r\n```\r\nCurrent Schedule\r\n// attr [compute] storage_scope = \"global\"\r\nallocate compute[float32 * 1 * 512 * 8 * 8]\r\n// attr [pad_temp.shared] storage_scope = \"shared\"\r\nallocate pad_temp.shared[float32 * 1 * 1 * 9 * 9]\r\n// attr [DilatedKernel.shared] storage_scope = \"shared\"\r\nallocate DilatedKernel.shared[float32 * 1 * 1 * 9 * 9]\r\nproduce compute {\r\n  for (ff, 0, 512) {\r\n    for (yy, 0, 8) {\r\n      for (xx, 0, 8) {\r\n        compute[((((ff*8) + yy)*8) + xx)] = 0.000000f\r\n        for (rc, 0, 512) {\r\n          produce pad_temp.shared {\r\n            for (ax2, 0, 9) {\r\n              for (ax3, 0, 9) {\r\n                pad_temp.shared[((ax2*9) + ax3)] = tvm_if_then_else((((((1 - ax2) <= yy) && (yy < (15 - ax2))) && ((1 - ax3) <= xx)) && (xx < (15 - ax3))), data[((((((yy*14) + xx) + (rc*196)) + (ax2*14)) + ax3) + -15)], 0.000000f)\r\n              }\r\n            }\r\n          }\r\n          produce DilatedKernel.shared {\r\n            for (ax2, 0, 9) {\r\n              for (ax3, 0, 9) {\r\n                DilatedKernel.shared[((ax2*9) + ax3)] = tvm_if_then_else((((ax2 % 4) == 0) && ((ax3 % 4) == 0)), kernel[((((((ff*512) + rc)*3) + (ax2/4))*3) + (ax3/4))], 0.000000f)\r\n              }\r\n            }\r\n          }\r\n          for (ry, 0, 9) {\r\n            for (rx, 0, 9) {\r\n              compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (pad_temp.shared[((ry*9) + rx)]*DilatedKernel.shared[((ry*9) + rx)]))\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n=================================\r\nBetter Schedule\r\n// attr [compute] storage_scope = \"global\"\r\nallocate compute[float32 * 1 * 512 * 8 * 8]\r\n// attr [packed_data] storage_scope = \"global\"\r\nallocate packed_data[float32 * 1 * 1 * 1 * 1 * 3 * 3]\r\n// attr [kernel.shared] storage_scope = \"shared\"\r\nallocate kernel.shared[float32 * 1 * 1 * 3 * 3]\r\nproduce compute {\r\n  for (ff, 0, 512) {\r\n    for (yy, 0, 8) {\r\n      for (xx, 0, 8) {\r\n        compute[((((ff*8) + yy)*8) + xx)] = 0.000000f\r\n        for (rc, 0, 512) {\r\n          produce packed_data {\r\n           // Minimal load\r\n            for (kh, 0, 3) {\r\n              for (kw, 0, 3) {\r\n                packed_data[((kh*3) + kw)] = tvm_if_then_else((((((1 - (kh*4)) <= yy) && (yy < (15 - (kh*4)))) && ((1 - (kw*4)) <= xx)) && (xx < (15 - (kw*4)))), data[((((((yy*14) + xx) + (rc*196)) + (kh*56)) + (kw*4)) + -15)], 0.000000f)\r\n              }\r\n            }\r\n          }\r\n          // Minimal load\r\n          produce kernel.shared {\r\n            for (ax2, 0, 3) {\r\n              for (ax3, 0, 3) {\r\n                kernel.shared[((ax2*3) + ax3)] = kernel[((((((ff*512) + rc)*3) + ax2)*3) + ax3)]\r\n              }\r\n            }\r\n          }\r\n          // Minimal computation\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[0]*kernel.shared[0]))\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[1]*kernel.shared[1]))\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[2]*kernel.shared[2]))\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[3]*kernel.shared[3]))\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[4]*kernel.shared[4]))\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[5]*kernel.shared[5]))\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[6]*kernel.shared[6]))\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[7]*kernel.shared[7]))\r\n          compute[((((ff*8) + yy)*8) + xx)] = (compute[((((ff*8) + yy)*8) + xx)] + (packed_data[8]*kernel.shared[8]))\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434568924/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434576962","html_url":"https://github.com/apache/tvm/issues/2030#issuecomment-434576962","issue_url":"https://api.github.com/repos/apache/tvm/issues/2030","id":434576962,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU3Njk2Mg==","user":{"login":"xqdan","id":23742050,"node_id":"MDQ6VXNlcjIzNzQyMDUw","avatar_url":"https://avatars.githubusercontent.com/u/23742050?v=4","gravatar_id":"","url":"https://api.github.com/users/xqdan","html_url":"https://github.com/xqdan","followers_url":"https://api.github.com/users/xqdan/followers","following_url":"https://api.github.com/users/xqdan/following{/other_user}","gists_url":"https://api.github.com/users/xqdan/gists{/gist_id}","starred_url":"https://api.github.com/users/xqdan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqdan/subscriptions","organizations_url":"https://api.github.com/users/xqdan/orgs","repos_url":"https://api.github.com/users/xqdan/repos","events_url":"https://api.github.com/users/xqdan/events{/privacy}","received_events_url":"https://api.github.com/users/xqdan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T06:34:32Z","updated_at":"2018-10-31T06:37:35Z","author_association":"CONTRIBUTOR","body":"### Support buffer reuse for intrinsics\r\nStorageRewrite can reuse/inplace buffers for load/store, and other halide based operations, but doesn't support for intrinsics, just treat intrinsics opaque, since for different backends, thet may get different behaviors/requirements.  \r\nFor ASICs, we may have lots of intrinsics when we are in storage rewrite pass, if we can reuse buffers for these intrinsics, we can get more performance. For example, we can have better performance, if we do inplace as below.\r\n\r\n```\r\nvadd(tvm_access_ptr(0.000000h, Res_UB_F16, 7936, 7936, 2), tvm_access_ptr(0.000000h, Res_UB_F16, 7936, 7936, 1), tvm_access_ptr(0.000000h, Res_UB_F16, 16, 128, 1))\r\ncopy_matrix_cc_to_ubuf(tvm_access_ptr(0.000000h, Res_UB_F16, 0, 63488, 2), tvm_access_ptr(0.000000h, Res_UB_F16, 0, 63488, 1))\r\n```\r\n\r\n\r\n### How to support this\r\nThe main idea is registering hooks for different backends.\r\n\r\nThe steps to do this\r\n\r\n- Expose target name for StorageRewrite\r\n  One way is adding a target name for StorageRewrite. to do this, also we need to a target name in lower api \r\n  `Stmt StorageRewrite(Stmt stmt, const std::string& target)`\r\n\r\n  Another way is having a function like tvm::Target Target::current_target, but this api only works for \"with target\", we can't get the current target in all passes in build function.\r\n\r\n- When check the inplace of stmt, add a hook for Evaluate(intrinsics is always inside of Evaluate node)\r\n```\r\n@@ -229,7 +232,11 @@ class InplaceOpVerifier : public IRVisitor {\r\n     } else if (stmt->is_type<Store>()) {\r\n       Visit_(static_cast<const Store*>(stmt));\r\n+     }else if (stmt->is_type<Evaluate>()){\r\n+      if (target_.empty()) return false;\r\n+      std::string reuse_hook = \"tvm.\"+target_+\".intrin_inplace\";\r\n+      const PackedFunc* f = runtime::Registry::Get(reuse_hook);\r\n+      if (f == nullptr) return false;\r\n+      result_ = f(static_cast<const Evaluate*>(stmt));\r\n     } else {\r\n       return false;\r\n     }\r\n```\r\n\r\n- Define a target packed function, in which we do analysis for Evaluate node, return the result of inplace for the intrinsics, and register this function to tvm.target.intrin_inplace, both python or c++ packed function is ok.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434576962/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434580289","html_url":"https://github.com/apache/tvm/issues/1601#issuecomment-434580289","issue_url":"https://api.github.com/repos/apache/tvm/issues/1601","id":434580289,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDU4MDI4OQ==","user":{"login":"ehsanmok","id":6980212,"node_id":"MDQ6VXNlcjY5ODAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/6980212?v=4","gravatar_id":"","url":"https://api.github.com/users/ehsanmok","html_url":"https://github.com/ehsanmok","followers_url":"https://api.github.com/users/ehsanmok/followers","following_url":"https://api.github.com/users/ehsanmok/following{/other_user}","gists_url":"https://api.github.com/users/ehsanmok/gists{/gist_id}","starred_url":"https://api.github.com/users/ehsanmok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ehsanmok/subscriptions","organizations_url":"https://api.github.com/users/ehsanmok/orgs","repos_url":"https://api.github.com/users/ehsanmok/repos","events_url":"https://api.github.com/users/ehsanmok/events{/privacy}","received_events_url":"https://api.github.com/users/ehsanmok/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T06:52:04Z","updated_at":"2018-10-31T06:52:04Z","author_association":"CONTRIBUTOR","body":"@tqchen Sorry, I was quite detached for some time and trying to finish it as soon as I can in my free time. I'm working on ergonimic registration of callbacks in Rust, when that's done I'd probably need help for the RPC as looking at the python and java RPC it's seems they have been sort of done from scratch!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434580289/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434615803","html_url":"https://github.com/apache/tvm/issues/1601#issuecomment-434615803","issue_url":"https://api.github.com/repos/apache/tvm/issues/1601","id":434615803,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDYxNTgwMw==","user":{"login":"nhynes","id":2353785,"node_id":"MDQ6VXNlcjIzNTM3ODU=","avatar_url":"https://avatars.githubusercontent.com/u/2353785?v=4","gravatar_id":"","url":"https://api.github.com/users/nhynes","html_url":"https://github.com/nhynes","followers_url":"https://api.github.com/users/nhynes/followers","following_url":"https://api.github.com/users/nhynes/following{/other_user}","gists_url":"https://api.github.com/users/nhynes/gists{/gist_id}","starred_url":"https://api.github.com/users/nhynes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nhynes/subscriptions","organizations_url":"https://api.github.com/users/nhynes/orgs","repos_url":"https://api.github.com/users/nhynes/repos","events_url":"https://api.github.com/users/nhynes/events{/privacy}","received_events_url":"https://api.github.com/users/nhynes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T09:20:12Z","updated_at":"2018-10-31T14:04:22Z","author_association":"MEMBER","body":"> RPC [...] seems they have been sort of done from scratch!\r\n\r\nNow that we're on the topic, might it be a good time to start experimenting with a more established framework like [grpc](https://grpc.io/)? There's even a nice [crate](https://crates.io/crates/grpc) for it!\r\n\r\nI may be completely incorrect in saying this, but I think that many of the roll-your-own components are a result of C++ having a terrible package ecosystem. For instance, [the dmlc-core json parser](https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/json.h), [the memory stream reader](https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/memory_io.h) used for params serdes, the [thread-local store](https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/thread_local.h). In Rust, these become `serde`, `nom`, and `thread_local!`, respectively.\r\n\r\nIn some version of reality, the TVM compiler is rewritten in Rust (with clear separation from the python components!) and is much more maintainable because of it.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434615803/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434627120","html_url":"https://github.com/apache/tvm/pull/1923#issuecomment-434627120","issue_url":"https://api.github.com/repos/apache/tvm/issues/1923","id":434627120,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDYyNzEyMA==","user":{"login":"srkreddy1238","id":14215163,"node_id":"MDQ6VXNlcjE0MjE1MTYz","avatar_url":"https://avatars.githubusercontent.com/u/14215163?v=4","gravatar_id":"","url":"https://api.github.com/users/srkreddy1238","html_url":"https://github.com/srkreddy1238","followers_url":"https://api.github.com/users/srkreddy1238/followers","following_url":"https://api.github.com/users/srkreddy1238/following{/other_user}","gists_url":"https://api.github.com/users/srkreddy1238/gists{/gist_id}","starred_url":"https://api.github.com/users/srkreddy1238/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/srkreddy1238/subscriptions","organizations_url":"https://api.github.com/users/srkreddy1238/orgs","repos_url":"https://api.github.com/users/srkreddy1238/repos","events_url":"https://api.github.com/users/srkreddy1238/events{/privacy}","received_events_url":"https://api.github.com/users/srkreddy1238/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T09:57:17Z","updated_at":"2018-10-31T09:57:17Z","author_association":"CONTRIBUTOR","body":"cc @nishi-t have another look pls.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434627120/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434751263","html_url":"https://github.com/apache/tvm/issues/1996#issuecomment-434751263","issue_url":"https://api.github.com/repos/apache/tvm/issues/1996","id":434751263,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDc1MTI2Mw==","user":{"login":"sgrechanik-h","id":41160472,"node_id":"MDQ6VXNlcjQxMTYwNDcy","avatar_url":"https://avatars.githubusercontent.com/u/41160472?v=4","gravatar_id":"","url":"https://api.github.com/users/sgrechanik-h","html_url":"https://github.com/sgrechanik-h","followers_url":"https://api.github.com/users/sgrechanik-h/followers","following_url":"https://api.github.com/users/sgrechanik-h/following{/other_user}","gists_url":"https://api.github.com/users/sgrechanik-h/gists{/gist_id}","starred_url":"https://api.github.com/users/sgrechanik-h/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sgrechanik-h/subscriptions","organizations_url":"https://api.github.com/users/sgrechanik-h/orgs","repos_url":"https://api.github.com/users/sgrechanik-h/repos","events_url":"https://api.github.com/users/sgrechanik-h/events{/privacy}","received_events_url":"https://api.github.com/users/sgrechanik-h/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T16:18:22Z","updated_at":"2018-10-31T16:18:22Z","author_association":"CONTRIBUTOR","body":"@tqchen A couple of months ago I tried to integrate this autodiff into NNVM, the attempt (now abandoned) is still preserved in some old commits:\r\nhttps://github.com/sgrechanik-h/tvm/blob/109d2f785d3e73e56665fbc987f6bd0dc5823d60/nnvm/src/top/tensor/gradient.cc\r\nThe idea was to add a special operation called gradient which accepted as attributes the original operation name and the original operation's attributes. This operation's compute function consisted in automatically differentiating the original operation's compute. But I suppose there must be a better approach.\r\n\r\nBeing able to easily define new high-level ops just from tensor expressions sounds like a good idea. I definitely missed something like this in NNVM.\r\n\r\nAlso I think it would be nice to be able to override operations' attributes, like gradients, from python code. At least, this would be great for comparing automatic gradients with manually written gradients.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434751263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434767266","html_url":"https://github.com/apache/tvm/pull/2042#issuecomment-434767266","issue_url":"https://api.github.com/repos/apache/tvm/issues/2042","id":434767266,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDc2NzI2Ng==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T17:01:18Z","updated_at":"2018-10-31T17:01:18Z","author_association":"MEMBER","body":"See comments, I see that there is a need of creating two kinds of interpreter here, how about we change the API to a factory function?\r\n\r\n```python\r\nintrp = relay.create_interpreter(mode='debug', env=env)\r\n\r\n# alternative name\r\ngraph = relay.create_executor(mode='graph', env=env)\r\n```","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434767266/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434769112","html_url":"https://github.com/apache/tvm/issues/1996#issuecomment-434769112","issue_url":"https://api.github.com/repos/apache/tvm/issues/1996","id":434769112,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDc2OTExMg==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T17:06:27Z","updated_at":"2018-10-31T17:06:45Z","author_association":"MEMBER","body":"FYI, we are moving toward NNVMv2(relay) and this is a good time to think about related questions as scaffolding are being done. Relay already support override op's attributes from python","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434769112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434774628","html_url":"https://github.com/apache/tvm/issues/1601#issuecomment-434774628","issue_url":"https://api.github.com/repos/apache/tvm/issues/1601","id":434774628,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDc3NDYyOA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T17:21:39Z","updated_at":"2018-10-31T17:21:39Z","author_association":"MEMBER","body":"We roll out our own RPC because the requirement is somewhat different from grpc. We need a lightweight stateful session that persists over multiple function calls, it also helps porting into devices like android.\r\n\r\nSo there is a reason for rolling out the rpc module. I agree that json parser and thread local are somewhat unnecessary(thread_local is already supported in c++11 and it is there only for old compilers)","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434774628/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434776763","html_url":"https://github.com/apache/tvm/issues/1601#issuecomment-434776763","issue_url":"https://api.github.com/repos/apache/tvm/issues/1601","id":434776763,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDc3Njc2Mw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T17:27:30Z","updated_at":"2018-10-31T17:28:02Z","author_association":"MEMBER","body":"On the topic of TVM compiler in Rust, I have seriously thought about it and discussed with @jroesch on possibilities. \r\n\r\nMy current take is that the things would be fine if everything is in Rust, but that is not what we really want. We want something that can interop (i.e. a good runtime system) and still enables writing pass in python, things might break in that land because of that ventures into a new territory. We will need a clear C data structure, and rust wrappers that gives you the safety guarantee you want.\r\n\r\nIn the most ideal world, we want the following thing:\r\n- A core data structure, in C that can be shared across c++/rust/python\r\n- A primary language(currently c++, maybe it could be rust), which serves the task of scaffolding.\r\n- Patchable pass modules that can be in any language and can be attached to the project\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434776763/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434785508","html_url":"https://github.com/apache/tvm/pull/1997#issuecomment-434785508","issue_url":"https://api.github.com/repos/apache/tvm/issues/1997","id":434785508,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDc4NTUwOA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T17:51:40Z","updated_at":"2018-10-31T17:51:40Z","author_association":"MEMBER","body":"Thanks @joshpoll @eqy this is now merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434785508/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434807272","html_url":"https://github.com/apache/tvm/issues/1601#issuecomment-434807272","issue_url":"https://api.github.com/repos/apache/tvm/issues/1601","id":434807272,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDgwNzI3Mg==","user":{"login":"ehsanmok","id":6980212,"node_id":"MDQ6VXNlcjY5ODAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/6980212?v=4","gravatar_id":"","url":"https://api.github.com/users/ehsanmok","html_url":"https://github.com/ehsanmok","followers_url":"https://api.github.com/users/ehsanmok/followers","following_url":"https://api.github.com/users/ehsanmok/following{/other_user}","gists_url":"https://api.github.com/users/ehsanmok/gists{/gist_id}","starred_url":"https://api.github.com/users/ehsanmok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ehsanmok/subscriptions","organizations_url":"https://api.github.com/users/ehsanmok/orgs","repos_url":"https://api.github.com/users/ehsanmok/repos","events_url":"https://api.github.com/users/ehsanmok/events{/privacy}","received_events_url":"https://api.github.com/users/ehsanmok/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T18:57:24Z","updated_at":"2019-01-05T01:13:10Z","author_association":"CONTRIBUTOR","body":"@nhynes right! I already looked a little into [tarpc](https://github.com/google/tarpc) and [jsonrpc](https://github.com/paritytech/jsonrpc) to get some ideas. Given\r\n\r\n>We need a lightweight stateful session that persists over multiple function calls\r\n\r\nI cannot find a Rust lib that we can leverage so probably should write our own! Do you know such a lib and what do you suggest?\r\n\r\n@tqchen I like the most ideal case, but since \r\n\r\n> We want something that can interop (i.e. a good runtime system) and still enables writing pass in python, things might break in that land because of that ventures into a new territory\r\n\r\nis a major requirement, maybe I'm wrong but I don't think using some promising Rust python bindings such as [pyo3](https://github.com/PyO3/pyo3) can handle that easily yet! ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434807272/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434812244","html_url":"https://github.com/apache/tvm/issues/1601#issuecomment-434812244","issue_url":"https://api.github.com/repos/apache/tvm/issues/1601","id":434812244,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDgxMjI0NA==","user":{"login":"nhynes","id":2353785,"node_id":"MDQ6VXNlcjIzNTM3ODU=","avatar_url":"https://avatars.githubusercontent.com/u/2353785?v=4","gravatar_id":"","url":"https://api.github.com/users/nhynes","html_url":"https://github.com/nhynes","followers_url":"https://api.github.com/users/nhynes/followers","following_url":"https://api.github.com/users/nhynes/following{/other_user}","gists_url":"https://api.github.com/users/nhynes/gists{/gist_id}","starred_url":"https://api.github.com/users/nhynes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nhynes/subscriptions","organizations_url":"https://api.github.com/users/nhynes/orgs","repos_url":"https://api.github.com/users/nhynes/repos","events_url":"https://api.github.com/users/nhynes/events{/privacy}","received_events_url":"https://api.github.com/users/nhynes/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T19:12:17Z","updated_at":"2018-10-31T19:12:17Z","author_association":"MEMBER","body":"Of `{tarpc, jsonrpc}`, I'd definitely go with _not_ jsonrpc. The reason jsonrpc exists is to serve web3 clients on the ethereum blockchain (which is what paritytech is all about). They don't necessarily care about this use case. `tarpc` doesn't look bad and might work with some `lazy_static!`s, but it also looks a bit more complicated than necessary. Whatever you'd find productive, I guess--as long as it's your rust lib on both ends; interop with existing TVM RPC is probably better, though.\r\n\r\n> the most ideal case\r\n\r\nrust-python programming isn't bad if there's a C repr. Unfortunately, that's the really hard part since it'd need _yet another_ IR, as the HalideIR is also C++.\r\n\r\nThe real issue I have with python-c++ is that even if the ops are written in C++, the schedules and patterns are still in python!\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434812244/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434827196","html_url":"https://github.com/apache/tvm/issues/1601#issuecomment-434827196","issue_url":"https://api.github.com/repos/apache/tvm/issues/1601","id":434827196,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDgyNzE5Ng==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T19:59:39Z","updated_at":"2018-10-31T19:59:39Z","author_association":"MEMBER","body":"I won't worry about the IR, but what we really want is a node system(like the one we had in tvm::Node), once we have that, we can always build an IR around","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434827196/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434864217","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-434864217","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":434864217,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDg2NDIxNw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T22:05:13Z","updated_at":"2018-10-31T22:05:13Z","author_association":"MEMBER","body":"cc @FrozenGene , what is the relation of this PR with #2028? ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434864217/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434865984","html_url":"https://github.com/apache/tvm/pull/1970#issuecomment-434865984","issue_url":"https://api.github.com/repos/apache/tvm/issues/1970","id":434865984,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDg2NTk4NA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T22:12:54Z","updated_at":"2018-10-31T22:12:54Z","author_association":"MEMBER","body":"Thanks @merrymercy @vinx13 this is now merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434865984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434869806","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-434869806","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":434869806,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDg2OTgwNg==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T22:29:55Z","updated_at":"2018-10-31T22:44:09Z","author_association":"MEMBER","body":"@tqchen this is for x86, #2028 is for arm. \r\n\r\nI'm a little curious about #2028 , I tested ARM schedule on CPU (basically c5.9xlarge) , @FrozenGene 's branch got ~21.4 ms (I added registers for intel cpu manually since #2028 removes them), while previous ARM schedule (in current tvm) got ~2.2ms. I know it is not fair to benchmark ARM schedule on x86 CPU and it is not tuned, but I believe current ARM depthwise schedule is also not tuned on x86 CPU - such a large performance drop looks somewhat weird. @merrymercy @FrozenGene Could you double check?\r\n\r\nI can also help to test that on ARM once I got a device.\r\n\r\nAnother comment is, on x86, the most efficient layout for normal conv2d turns to be NCHW[x]c, so by having depthwise-conv remain the same layout, we can get rid of layout transformation between layers. Thus I believe on x86, solution in this PR would be better than NCHW ARM schedule. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434869806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434877955","html_url":"https://github.com/apache/tvm/pull/2011#issuecomment-434877955","issue_url":"https://api.github.com/repos/apache/tvm/issues/2011","id":434877955,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDg3Nzk1NQ==","user":{"login":"slyubomirsky","id":5624871,"node_id":"MDQ6VXNlcjU2MjQ4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/5624871?v=4","gravatar_id":"","url":"https://api.github.com/users/slyubomirsky","html_url":"https://github.com/slyubomirsky","followers_url":"https://api.github.com/users/slyubomirsky/followers","following_url":"https://api.github.com/users/slyubomirsky/following{/other_user}","gists_url":"https://api.github.com/users/slyubomirsky/gists{/gist_id}","starred_url":"https://api.github.com/users/slyubomirsky/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/slyubomirsky/subscriptions","organizations_url":"https://api.github.com/users/slyubomirsky/orgs","repos_url":"https://api.github.com/users/slyubomirsky/repos","events_url":"https://api.github.com/users/slyubomirsky/events{/privacy}","received_events_url":"https://api.github.com/users/slyubomirsky/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T23:07:56Z","updated_at":"2018-10-31T23:07:56Z","author_association":"CONTRIBUTOR","body":"Annotated every type and am no longer getting type errors in Relay (this points to some serious shortcomings in type unification and inference), but now it hangs on create_workload, possibly looping infinitely. Would appreciate pointers as to what could be done differently.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434877955/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434885370","html_url":"https://github.com/apache/tvm/pull/2042#issuecomment-434885370","issue_url":"https://api.github.com/repos/apache/tvm/issues/2042","id":434885370,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDg4NTM3MA==","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-10-31T23:47:55Z","updated_at":"2018-10-31T23:47:55Z","author_association":"MEMBER","body":"@zhiics @junrushao1994 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434885370/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434895514","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-434895514","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":434895514,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDg5NTUxNA==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T00:54:41Z","updated_at":"2018-11-01T00:54:41Z","author_association":"MEMBER","body":"Did you turn for #2028 ?  #2028 didn't upload any tuned configs.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434895514/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434897829","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-434897829","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":434897829,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDg5NzgyOQ==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T01:08:42Z","updated_at":"2018-11-01T01:08:42Z","author_association":"MEMBER","body":"We should add dilation arguments as in #1970, then we don't have to convert log when we start to optimize for dilation.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434897829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434911065","html_url":"https://github.com/apache/tvm/pull/2046#issuecomment-434911065","issue_url":"https://api.github.com/repos/apache/tvm/issues/2046","id":434911065,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkxMTA2NQ==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T02:33:53Z","updated_at":"2018-11-01T02:33:53Z","author_association":"MEMBER","body":"Thanks @ajtulloch ! This is now merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434911065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434912233","html_url":"https://github.com/apache/tvm/pull/2042#issuecomment-434912233","issue_url":"https://api.github.com/repos/apache/tvm/issues/2042","id":434912233,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkxMjIzMw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T02:41:53Z","updated_at":"2018-11-01T02:41:53Z","author_association":"MEMBER","body":"Thanks @jroesch this is merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434912233/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434913519","html_url":"https://github.com/apache/tvm/pull/2042#issuecomment-434913519","issue_url":"https://api.github.com/repos/apache/tvm/issues/2042","id":434913519,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkxMzUxOQ==","user":{"login":"zhiics","id":5145158,"node_id":"MDQ6VXNlcjUxNDUxNTg=","avatar_url":"https://avatars.githubusercontent.com/u/5145158?v=4","gravatar_id":"","url":"https://api.github.com/users/zhiics","html_url":"https://github.com/zhiics","followers_url":"https://api.github.com/users/zhiics/followers","following_url":"https://api.github.com/users/zhiics/following{/other_user}","gists_url":"https://api.github.com/users/zhiics/gists{/gist_id}","starred_url":"https://api.github.com/users/zhiics/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhiics/subscriptions","organizations_url":"https://api.github.com/users/zhiics/orgs","repos_url":"https://api.github.com/users/zhiics/repos","events_url":"https://api.github.com/users/zhiics/events{/privacy}","received_events_url":"https://api.github.com/users/zhiics/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T02:50:40Z","updated_at":"2018-11-01T03:15:44Z","author_association":"MEMBER","body":"@jroesch Sorry for not being able to review it a little earlier. I just realize that it is merged when I was walking though. But I do have some comments/questions. Feel free to ignore them if you think they don't make sense.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434913519/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434914579","html_url":"https://github.com/apache/tvm/issues/2036#issuecomment-434914579","issue_url":"https://api.github.com/repos/apache/tvm/issues/2036","id":434914579,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkxNDU3OQ==","user":{"login":"you-old","id":16161846,"node_id":"MDQ6VXNlcjE2MTYxODQ2","avatar_url":"https://avatars.githubusercontent.com/u/16161846?v=4","gravatar_id":"","url":"https://api.github.com/users/you-old","html_url":"https://github.com/you-old","followers_url":"https://api.github.com/users/you-old/followers","following_url":"https://api.github.com/users/you-old/following{/other_user}","gists_url":"https://api.github.com/users/you-old/gists{/gist_id}","starred_url":"https://api.github.com/users/you-old/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/you-old/subscriptions","organizations_url":"https://api.github.com/users/you-old/orgs","repos_url":"https://api.github.com/users/you-old/repos","events_url":"https://api.github.com/users/you-old/events{/privacy}","received_events_url":"https://api.github.com/users/you-old/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T02:57:44Z","updated_at":"2018-11-01T02:57:44Z","author_association":"NONE","body":"在makefile里面\r\n把最后的一行改成：\r\n$(CXX) $(PDG_CFLAGS) -o $@ $^ -ltvm_runtime -Wl,--no-as-needed $(PKG_LDFLAGS)\r\n\r\n然后重新执行./run_example.sh","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434914579/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434915331","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-434915331","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":434915331,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkxNTMzMQ==","user":{"login":"FrozenGene","id":7287321,"node_id":"MDQ6VXNlcjcyODczMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7287321?v=4","gravatar_id":"","url":"https://api.github.com/users/FrozenGene","html_url":"https://github.com/FrozenGene","followers_url":"https://api.github.com/users/FrozenGene/followers","following_url":"https://api.github.com/users/FrozenGene/following{/other_user}","gists_url":"https://api.github.com/users/FrozenGene/gists{/gist_id}","starred_url":"https://api.github.com/users/FrozenGene/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FrozenGene/subscriptions","organizations_url":"https://api.github.com/users/FrozenGene/orgs","repos_url":"https://api.github.com/users/FrozenGene/repos","events_url":"https://api.github.com/users/FrozenGene/events{/privacy}","received_events_url":"https://api.github.com/users/FrozenGene/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T03:02:31Z","updated_at":"2018-11-01T03:06:56Z","author_association":"MEMBER","body":"> @tqchen this is for x86, #2028 is for arm.\r\n> \r\n> I'm a little curious about #2028 , I tested ARM schedule on CPU (basically c5.9xlarge) , @FrozenGene 's branch got ~21.4 ms (I added registers for intel cpu manually since #2028 removes them), while previous ARM schedule (in current tvm) got ~2.2ms. I know it is not fair to benchmark ARM schedule on x86 CPU and it is not tuned, but I believe current ARM depthwise schedule is also not tuned on x86 CPU - such a large performance drop looks somewhat weird. @merrymercy @FrozenGene Could you double check?\r\n> \r\n> I can also help to test that on ARM once I got a device.\r\n> \r\n> Another comment is, on x86, the most efficient layout for normal conv2d turns to be NCHW[x]c, so by having depthwise-conv remain the same layout, we can get rid of layout transformation between layers. Thus I believe on x86, solution in this PR would be better than NCHW ARM schedule.\r\n\r\nAs @merrymercy said, we haven't uploaded any tuned config logs for #2028 . I want to know how do you compare? Do you use these two schedules to tune on x86 CPU and run or just run without tuning? If you tune, as #2028 said, you should notice that You should make the XGBTunner constructor’s feature type argument be feature_type= 'knob'. i.e. XGBTuner(tsk, loss_type='rank', feature_type='knob').\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434915331/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434916708","html_url":"https://github.com/apache/tvm/pull/2042#issuecomment-434916708","issue_url":"https://api.github.com/repos/apache/tvm/issues/2042","id":434916708,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkxNjcwOA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T03:11:24Z","updated_at":"2018-11-01T03:11:24Z","author_association":"MEMBER","body":"@zhiics sorry I merged it because this influences the interface and this change is clearly towards a good direction, feel free to follow up with discussions","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434916708/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434917364","html_url":"https://github.com/apache/tvm/issues/2030#issuecomment-434917364","issue_url":"https://api.github.com/repos/apache/tvm/issues/2030","id":434917364,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkxNzM2NA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T03:15:54Z","updated_at":"2018-11-01T03:15:54Z","author_association":"MEMBER","body":"I agree that this is useful, but the hook does sounds a bit ad hoc. In general, we need additional meta-data for our intrinsic, and we want to register them in a reasonable pattern.\r\n\r\nA better way could be something like the operator registry https://github.com/dmlc/tvm/blob/master/include/tvm/relay/op.h#L337 which allows us to register additional properties of each operator. Maybe we want something similar for intrinsics, assuming there will be more optimizations which depend on different properties of intrinsics\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434917364/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434928425","html_url":"https://github.com/apache/tvm/pull/2046#issuecomment-434928425","issue_url":"https://api.github.com/repos/apache/tvm/issues/2046","id":434928425,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkyODQyNQ==","user":{"login":"ajtulloch","id":1121581,"node_id":"MDQ6VXNlcjExMjE1ODE=","avatar_url":"https://avatars.githubusercontent.com/u/1121581?v=4","gravatar_id":"","url":"https://api.github.com/users/ajtulloch","html_url":"https://github.com/ajtulloch","followers_url":"https://api.github.com/users/ajtulloch/followers","following_url":"https://api.github.com/users/ajtulloch/following{/other_user}","gists_url":"https://api.github.com/users/ajtulloch/gists{/gist_id}","starred_url":"https://api.github.com/users/ajtulloch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajtulloch/subscriptions","organizations_url":"https://api.github.com/users/ajtulloch/orgs","repos_url":"https://api.github.com/users/ajtulloch/repos","events_url":"https://api.github.com/users/ajtulloch/events{/privacy}","received_events_url":"https://api.github.com/users/ajtulloch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T04:38:55Z","updated_at":"2018-11-01T04:38:55Z","author_association":"CONTRIBUTOR","body":"Thanks @tqchen!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434928425/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434929803","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-434929803","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":434929803,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDkyOTgwMw==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T04:49:52Z","updated_at":"2018-11-01T04:54:30Z","author_association":"MEMBER","body":"@FrozenGene I run without tuning. My question is rather about the default/fallback schedule, looks like the previous one is far better. When running the previous one, I also got warnings like,\r\n```\r\nWARNING:autotvm:Cannot find config for target=llvm -mcpu=skylake-avx512, workload=('depthwise_conv2d_nchw', (1, 32, 112, 112, 'float32'), (32, 1, 3, 3, 'float32'), (1, 1), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.\r\n```\r\nLet's continue this discussion in #2028 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434929803/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434941282","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-434941282","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":434941282,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDk0MTI4Mg==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T06:09:58Z","updated_at":"2018-11-01T06:09:58Z","author_association":"MEMBER","body":"@yzliu Your error should not happen. Maybe it is due to this bug #2047 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434941282/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434943264","html_url":"https://github.com/apache/tvm/issues/2030#issuecomment-434943264","issue_url":"https://api.github.com/repos/apache/tvm/issues/2030","id":434943264,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDk0MzI2NA==","user":{"login":"xqdan","id":23742050,"node_id":"MDQ6VXNlcjIzNzQyMDUw","avatar_url":"https://avatars.githubusercontent.com/u/23742050?v=4","gravatar_id":"","url":"https://api.github.com/users/xqdan","html_url":"https://github.com/xqdan","followers_url":"https://api.github.com/users/xqdan/followers","following_url":"https://api.github.com/users/xqdan/following{/other_user}","gists_url":"https://api.github.com/users/xqdan/gists{/gist_id}","starred_url":"https://api.github.com/users/xqdan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xqdan/subscriptions","organizations_url":"https://api.github.com/users/xqdan/orgs","repos_url":"https://api.github.com/users/xqdan/repos","events_url":"https://api.github.com/users/xqdan/events{/privacy}","received_events_url":"https://api.github.com/users/xqdan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T06:20:42Z","updated_at":"2018-11-01T06:20:59Z","author_association":"CONTRIBUTOR","body":"Thanks.\r\n\r\nSuppose we have done as what you said, i still don't see we can have a uniform optimizations for different backends, since we may have different optimizations for the same property of different backends, we can not just treat intrinsics as the same for different backends. \r\n\r\nIf we want to do it in your way, we need to have intrinsics first and then abstract the properties among them. For operators you mentioned are easy, because those are accessible in public. we can not just have all the ASICs' intrinsics and have a sound and complete design in one public pass. \r\n\r\nBackends hooks are ad hoc, that's true. We have lots of hooks even for a pass in gcc and llvm. In a sense TVM is a Tensor compiler, we should consider to bring some useful and mature design idea from them when we need to, such as this backend hooks design, pass dump ir design(we've done), compilers' separation of compute and schedule, even the basic analysis frameworks such as CFG/DFA.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434943264/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434958339","html_url":"https://github.com/apache/tvm/pull/2042#issuecomment-434958339","issue_url":"https://api.github.com/repos/apache/tvm/issues/2042","id":434958339,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDk1ODMzOQ==","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T07:38:18Z","updated_at":"2018-11-01T07:38:18Z","author_association":"MEMBER","body":"@zhiics I will follow up with your comments tomorrow in another small PR. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434958339/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434962321","html_url":"https://github.com/apache/tvm/issues/1799#issuecomment-434962321","issue_url":"https://api.github.com/repos/apache/tvm/issues/1799","id":434962321,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDk2MjMyMQ==","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T07:56:35Z","updated_at":"2018-11-01T07:56:35Z","author_association":"MEMBER","body":"Thanks to everyone for the hard work on getting 99% of the way there. I'm making a push to now add the compute and scheduling behavior for all of these operators which should enable users to use Relay for end-to-end inference tasks, enable new frontends and more. If you you would be interested in helping read more here: https://github.com/dmlc/tvm/issues/2051.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434962321/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434988811","html_url":"https://github.com/apache/tvm/issues/1887#issuecomment-434988811","issue_url":"https://api.github.com/repos/apache/tvm/issues/1887","id":434988811,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDk4ODgxMQ==","user":{"login":"Rasterer","id":7001169,"node_id":"MDQ6VXNlcjcwMDExNjk=","avatar_url":"https://avatars.githubusercontent.com/u/7001169?v=4","gravatar_id":"","url":"https://api.github.com/users/Rasterer","html_url":"https://github.com/Rasterer","followers_url":"https://api.github.com/users/Rasterer/followers","following_url":"https://api.github.com/users/Rasterer/following{/other_user}","gists_url":"https://api.github.com/users/Rasterer/gists{/gist_id}","starred_url":"https://api.github.com/users/Rasterer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rasterer/subscriptions","organizations_url":"https://api.github.com/users/Rasterer/orgs","repos_url":"https://api.github.com/users/Rasterer/repos","events_url":"https://api.github.com/users/Rasterer/events{/privacy}","received_events_url":"https://api.github.com/users/Rasterer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T09:49:40Z","updated_at":"2018-11-01T09:49:40Z","author_association":"CONTRIBUTOR","body":"@merrymercy Great idea! Based on your code, I made packed_data inline, and cache read from it. So the unnecessary memory loading is eliminated and I can still cache the data for reusing.\r\nWell, I think all my problems are properly addressed by now. Great appreciaiton! BTW, are you going to integrate this change into TOPI? If yes, maybe we can leave this ticket open to track your integration status.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434988811/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434999677","html_url":"https://github.com/apache/tvm/pull/2050#issuecomment-434999677","issue_url":"https://api.github.com/repos/apache/tvm/issues/2050","id":434999677,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDk5OTY3Nw==","user":{"login":"MarisaKirisame","id":3397377,"node_id":"MDQ6VXNlcjMzOTczNzc=","avatar_url":"https://avatars.githubusercontent.com/u/3397377?v=4","gravatar_id":"","url":"https://api.github.com/users/MarisaKirisame","html_url":"https://github.com/MarisaKirisame","followers_url":"https://api.github.com/users/MarisaKirisame/followers","following_url":"https://api.github.com/users/MarisaKirisame/following{/other_user}","gists_url":"https://api.github.com/users/MarisaKirisame/gists{/gist_id}","starred_url":"https://api.github.com/users/MarisaKirisame/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarisaKirisame/subscriptions","organizations_url":"https://api.github.com/users/MarisaKirisame/orgs","repos_url":"https://api.github.com/users/MarisaKirisame/repos","events_url":"https://api.github.com/users/MarisaKirisame/events{/privacy}","received_events_url":"https://api.github.com/users/MarisaKirisame/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T10:32:15Z","updated_at":"2018-11-01T10:34:51Z","author_association":"CONTRIBUTOR","body":"this code seems way too highly repetitive to me.\r\nthis is a typical snippet of _tensor.py, with every other line being virtually like this.\r\n```python\r\ndef sqrt_compute(attrs, inputs, output_type, target):\r\n    assert len(inputs) == 1\r\n    return [topi.sqrt(inputs[0])]\r\nregister_compute(\"sqrt\", sqrt_compute)\r\nregister_schedule(\"sqrt\", schedule_broadcast)\r\n```\r\nthere are 3 things:\r\ndefine, which assert len and use topi\r\nregister_compute\r\nregister_schedule\r\n\r\nregister_compute, register_schedule could be merged into one single function\r\nsqrt_compute can be made into one line by writing a hof that take two argument (the topi func and num of input)\r\n\r\nIf I were to write this, I will declare a table that store the name, and the num of input, traverse it, and define function with metaprogramming, to minimize the chance of error, and to maximize reuse(other code that build ontop of relay can simply read the table).\r\nIt will be \r\n```python\r\nregistry = {}\r\nregistry['log'] = 1\r\nregistry['add'] = 2\r\n...\r\n```\r\nOf course, it might be going too far for tvm coding style, but fusing register_compute/register_schedule is certainly doable, and so is using a hof.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/434999677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435023105","html_url":"https://github.com/apache/tvm/issues/1996#issuecomment-435023105","issue_url":"https://api.github.com/repos/apache/tvm/issues/1996","id":435023105,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTAyMzEwNQ==","user":{"login":"sergei-mironov","id":4477729,"node_id":"MDQ6VXNlcjQ0Nzc3Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4477729?v=4","gravatar_id":"","url":"https://api.github.com/users/sergei-mironov","html_url":"https://github.com/sergei-mironov","followers_url":"https://api.github.com/users/sergei-mironov/followers","following_url":"https://api.github.com/users/sergei-mironov/following{/other_user}","gists_url":"https://api.github.com/users/sergei-mironov/gists{/gist_id}","starred_url":"https://api.github.com/users/sergei-mironov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sergei-mironov/subscriptions","organizations_url":"https://api.github.com/users/sergei-mironov/orgs","repos_url":"https://api.github.com/users/sergei-mironov/repos","events_url":"https://api.github.com/users/sergei-mironov/events{/privacy}","received_events_url":"https://api.github.com/users/sergei-mironov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T12:17:22Z","updated_at":"2018-11-01T12:17:22Z","author_association":"CONTRIBUTOR","body":"> On the other hand, this would become practical if we could have a proposal on how to write quick expression op, that can be integrated together with other high-level IR and its AD system, this would enable a powerful to write custom operators and automatically generate gradient for it\r\n\r\nIndeed, I think that higher level IRs will always be able to decide which method to use. As far as Relay uses TVM under the hood, it should be in good position to make a choice: either substitute operations during building the backward path  (e.g. Winograd -> matmul), switch to hand-written gradients or use a semantically-correct default implementation which is provided by the current approach.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435023105/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435097290","html_url":"https://github.com/apache/tvm/pull/2050#issuecomment-435097290","issue_url":"https://api.github.com/repos/apache/tvm/issues/2050","id":435097290,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTA5NzI5MA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T16:23:22Z","updated_at":"2018-11-01T16:23:32Z","author_association":"MEMBER","body":"As per https://docs.tvm.ai/contribute/code_review.html#ensure-test-coverage please add test case for each of the operator added \r\n\r\nreference to https://github.com/dmlc/tvm/blob/master/nnvm/tests/python/compiler/test_top_level1.py#L167","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435097290/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435098222","html_url":"https://github.com/apache/tvm/pull/2049#issuecomment-435098222","issue_url":"https://api.github.com/repos/apache/tvm/issues/2049","id":435098222,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTA5ODIyMg==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T16:26:07Z","updated_at":"2018-11-01T16:26:07Z","author_association":"MEMBER","body":"Thanks, @lixiaoquan! this is merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435098222/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435101590","html_url":"https://github.com/apache/tvm/pull/1781#issuecomment-435101590","issue_url":"https://api.github.com/repos/apache/tvm/issues/1781","id":435101590,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTEwMTU5MA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T16:36:17Z","updated_at":"2018-11-01T16:36:17Z","author_association":"MEMBER","body":"OK, here are a few final steps to make sure we have a working test.\r\n\r\n- [ ] Expose a relay.fromtext function(in parser.py) and expose in __init__.py , which lazily import necessary parser component when a user calls the function\r\n   - There should be no distinguishment between parse_prog vs parse_expr\r\n   - Catch import error if necessary and tell the user to build with USE_ANTLR=ON\r\n- [ ] Switch USE_ANTLR to ON in our test\r\n   - Note that there are three lines of test-cases: gpu, cpu and i386 \r\n   - I recommend we run the parser test in one of them for now, say in cpu\r\n   - Add a script test_relay_parser.sh which just runs the parser test\r\n- [ ] Make sure that the test script still pass if ANTLR is not available\r\n   - We can add a relay.parser.enabled() function to test if parser is enabled.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435101590/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435114599","html_url":"https://github.com/apache/tvm/pull/2050#issuecomment-435114599","issue_url":"https://api.github.com/repos/apache/tvm/issues/2050","id":435114599,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTExNDU5OQ==","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T17:15:17Z","updated_at":"2018-11-01T17:15:17Z","author_association":"MEMBER","body":"@MarisaKirisame the argument against that style (which is roughly) what NNVM has done is that it becomes much harder for users to read and modify. Most code is effectively read-only, and especially code like this will not change often. I think it is better to err on repetitive and readable than inscrutable. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435114599/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435116831","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-435116831","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":435116831,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTExNjgzMQ==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T17:22:03Z","updated_at":"2018-11-01T17:22:03Z","author_association":"MEMBER","body":"@merrymercy Thanks, I'll checkout and verify.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435116831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435144977","html_url":"https://github.com/apache/tvm/issues/1887#issuecomment-435144977","issue_url":"https://api.github.com/repos/apache/tvm/issues/1887","id":435144977,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTE0NDk3Nw==","user":{"login":"merrymercy","id":15100009,"node_id":"MDQ6VXNlcjE1MTAwMDA5","avatar_url":"https://avatars.githubusercontent.com/u/15100009?v=4","gravatar_id":"","url":"https://api.github.com/users/merrymercy","html_url":"https://github.com/merrymercy","followers_url":"https://api.github.com/users/merrymercy/followers","following_url":"https://api.github.com/users/merrymercy/following{/other_user}","gists_url":"https://api.github.com/users/merrymercy/gists{/gist_id}","starred_url":"https://api.github.com/users/merrymercy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merrymercy/subscriptions","organizations_url":"https://api.github.com/users/merrymercy/orgs","repos_url":"https://api.github.com/users/merrymercy/repos","events_url":"https://api.github.com/users/merrymercy/events{/privacy}","received_events_url":"https://api.github.com/users/merrymercy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T18:46:31Z","updated_at":"2018-11-01T18:46:31Z","author_association":"MEMBER","body":"Your contributions are welcome","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435144977/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435158274","html_url":"https://github.com/apache/tvm/pull/1923#issuecomment-435158274","issue_url":"https://api.github.com/repos/apache/tvm/issues/1923","id":435158274,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTE1ODI3NA==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-01T19:30:13Z","updated_at":"2018-11-01T19:30:13Z","author_association":"MEMBER","body":"Thanks! this is now merged.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435158274/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435339956","html_url":"https://github.com/apache/tvm/pull/1973#issuecomment-435339956","issue_url":"https://api.github.com/repos/apache/tvm/issues/1973","id":435339956,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTMzOTk1Ng==","user":{"login":"denis0x0D","id":25140014,"node_id":"MDQ6VXNlcjI1MTQwMDE0","avatar_url":"https://avatars.githubusercontent.com/u/25140014?v=4","gravatar_id":"","url":"https://api.github.com/users/denis0x0D","html_url":"https://github.com/denis0x0D","followers_url":"https://api.github.com/users/denis0x0D/followers","following_url":"https://api.github.com/users/denis0x0D/following{/other_user}","gists_url":"https://api.github.com/users/denis0x0D/gists{/gist_id}","starred_url":"https://api.github.com/users/denis0x0D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/denis0x0D/subscriptions","organizations_url":"https://api.github.com/users/denis0x0D/orgs","repos_url":"https://api.github.com/users/denis0x0D/repos","events_url":"https://api.github.com/users/denis0x0D/events{/privacy}","received_events_url":"https://api.github.com/users/denis0x0D/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-02T10:45:38Z","updated_at":"2018-11-02T10:45:38Z","author_association":"CONTRIBUTOR","body":"@tqchen  the strange thing I've faced with packed function - when I increase the shape of the buffer or so on.\r\nFor example:\r\n```\r\nimport tvm\r\nimport numpy as np\r\n\r\n@tvm.register_func\r\ndef my_debug(x):\r\n    return 0\r\n\r\nx = tvm.placeholder((1024, 1024), name=\"x\", dtype=\"int32\")\r\nxbuffer = tvm.decl_buffer(x.shape, dtype=x.dtype)\r\ny = tvm.compute(x.shape, lambda i, j: tvm.call_packed(\"my_debug\", xbuffer))\r\ns = tvm.create_schedule(y.op)\r\n\r\nf = tvm.build(s, [xbuffer, y], binds={x:xbuffer})\r\nxnd = tvm.nd.array(np.ones((1024, 1024), dtype=x.dtype))\r\nynd = tvm.nd.array(np.zeros((1024, 1024), dtype=y.dtype))\r\nf(xnd, ynd)\r\n```\r\n\r\nI got Segmentation fault on 3 different platform and spent some time to debug, the segfault happens in hash table which registry the packed function. May be  I miss something or may it is a bug, it would be good to get confirmation from someone else. Also I have a backtrace of error and tests case on c++.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435339956/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435443313","html_url":"https://github.com/apache/tvm/pull/2054#issuecomment-435443313","issue_url":"https://api.github.com/repos/apache/tvm/issues/2054","id":435443313,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTQ0MzMxMw==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-02T16:54:13Z","updated_at":"2018-11-02T16:54:13Z","author_association":"MEMBER","body":"please fix the lint error http://ci.tvm.ai:8080/blue/organizations/jenkins/tvm/detail/PR-2054/4/pipeline","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435443313/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435470270","html_url":"https://github.com/apache/tvm/pull/2050#issuecomment-435470270","issue_url":"https://api.github.com/repos/apache/tvm/issues/2050","id":435470270,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTQ3MDI3MA==","user":{"login":"zhiics","id":5145158,"node_id":"MDQ6VXNlcjUxNDUxNTg=","avatar_url":"https://avatars.githubusercontent.com/u/5145158?v=4","gravatar_id":"","url":"https://api.github.com/users/zhiics","html_url":"https://github.com/zhiics","followers_url":"https://api.github.com/users/zhiics/followers","following_url":"https://api.github.com/users/zhiics/following{/other_user}","gists_url":"https://api.github.com/users/zhiics/gists{/gist_id}","starred_url":"https://api.github.com/users/zhiics/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhiics/subscriptions","organizations_url":"https://api.github.com/users/zhiics/orgs","repos_url":"https://api.github.com/users/zhiics/repos","events_url":"https://api.github.com/users/zhiics/events{/privacy}","received_events_url":"https://api.github.com/users/zhiics/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-02T18:34:02Z","updated_at":"2018-11-02T18:34:02Z","author_association":"MEMBER","body":"It seems that we have several classes named as `Module` including the ones from runtime. I am totally okay with them, but would it be a little confusing for TVM beginners? But again, I like the renaming from `Environment` to `Module` as it is more friendly to those who are familiar with LLVM.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435470270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435516432","html_url":"https://github.com/apache/tvm/issues/2053#issuecomment-435516432","issue_url":"https://api.github.com/repos/apache/tvm/issues/2053","id":435516432,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTUxNjQzMg==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-02T21:36:19Z","updated_at":"2018-11-02T21:36:19Z","author_association":"MEMBER","body":"Looks like it is something wrong with autotvm or rpc library loading. I encountered same problem running https://docs.tvm.ai/tutorials/autotvm/tune_nnvm_x86.html. llvm 6 is good. @merrymercy any idea?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435516432/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435521670","html_url":"https://github.com/apache/tvm/issues/2053#issuecomment-435521670","issue_url":"https://api.github.com/repos/apache/tvm/issues/2053","id":435521670,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTUyMTY3MA==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-02T21:59:12Z","updated_at":"2018-11-02T21:59:12Z","author_association":"MEMBER","body":"Local compiling & runtime is good with llvm 7, as far as I see.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435521670/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435539026","html_url":"https://github.com/apache/tvm/issues/2055#issuecomment-435539026","issue_url":"https://api.github.com/repos/apache/tvm/issues/2055","id":435539026,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTUzOTAyNg==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-02T23:35:58Z","updated_at":"2018-11-02T23:35:58Z","author_association":"MEMBER","body":"moved to https://discuss.tvm.ai/t/tvm-compute-can-implement-cumsum/1085","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435539026/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435539088","html_url":"https://github.com/apache/tvm/issues/2053#issuecomment-435539088","issue_url":"https://api.github.com/repos/apache/tvm/issues/2053","id":435539088,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTUzOTA4OA==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-02T23:36:22Z","updated_at":"2018-11-02T23:36:22Z","author_association":"MEMBER","body":"seems to be duplicate with https://github.com/dmlc/tvm/issues/2005, let us move all discussion to there","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435539088/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435640141","html_url":"https://github.com/apache/tvm/pull/2059#issuecomment-435640141","issue_url":"https://api.github.com/repos/apache/tvm/issues/2059","id":435640141,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTY0MDE0MQ==","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-04T03:59:15Z","updated_at":"2018-11-04T03:59:23Z","author_association":"MEMBER","body":"cc @jroesch @eqy @MarisaKirisame @ZihengJiang   please review","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435640141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435644622","html_url":"https://github.com/apache/tvm/pull/2059#issuecomment-435644622","issue_url":"https://api.github.com/repos/apache/tvm/issues/2059","id":435644622,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTY0NDYyMg==","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-04T06:01:01Z","updated_at":"2018-11-04T06:01:01Z","author_association":"MEMBER","body":"I will review first thing in the morning. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435644622/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435647095","html_url":"https://github.com/apache/tvm/pull/2045#issuecomment-435647095","issue_url":"https://api.github.com/repos/apache/tvm/issues/2045","id":435647095,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTY0NzA5NQ==","user":{"login":"yzhliu","id":631860,"node_id":"MDQ6VXNlcjYzMTg2MA==","avatar_url":"https://avatars.githubusercontent.com/u/631860?v=4","gravatar_id":"","url":"https://api.github.com/users/yzhliu","html_url":"https://github.com/yzhliu","followers_url":"https://api.github.com/users/yzhliu/followers","following_url":"https://api.github.com/users/yzhliu/following{/other_user}","gists_url":"https://api.github.com/users/yzhliu/gists{/gist_id}","starred_url":"https://api.github.com/users/yzhliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzhliu/subscriptions","organizations_url":"https://api.github.com/users/yzhliu/orgs","repos_url":"https://api.github.com/users/yzhliu/repos","events_url":"https://api.github.com/users/yzhliu/events{/privacy}","received_events_url":"https://api.github.com/users/yzhliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-04T07:01:48Z","updated_at":"2018-11-04T07:01:48Z","author_association":"MEMBER","body":"@merrymercy @anijain2305 @kevinthesun Please review again.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435647095/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435652273","html_url":"https://github.com/apache/tvm/issues/2051#issuecomment-435652273","issue_url":"https://api.github.com/repos/apache/tvm/issues/2051","id":435652273,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTY1MjI3Mw==","user":{"login":"MarisaKirisame","id":3397377,"node_id":"MDQ6VXNlcjMzOTczNzc=","avatar_url":"https://avatars.githubusercontent.com/u/3397377?v=4","gravatar_id":"","url":"https://api.github.com/users/MarisaKirisame","html_url":"https://github.com/MarisaKirisame","followers_url":"https://api.github.com/users/MarisaKirisame/followers","following_url":"https://api.github.com/users/MarisaKirisame/following{/other_user}","gists_url":"https://api.github.com/users/MarisaKirisame/gists{/gist_id}","starred_url":"https://api.github.com/users/MarisaKirisame/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarisaKirisame/subscriptions","organizations_url":"https://api.github.com/users/MarisaKirisame/orgs","repos_url":"https://api.github.com/users/MarisaKirisame/repos","events_url":"https://api.github.com/users/MarisaKirisame/events{/privacy}","received_events_url":"https://api.github.com/users/MarisaKirisame/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-04T09:48:42Z","updated_at":"2018-11-04T09:48:42Z","author_association":"CONTRIBUTOR","body":"dense, softmax, log_softmax, concatenate, dropout","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435652273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435662229","html_url":"https://github.com/apache/tvm/pull/2061#issuecomment-435662229","issue_url":"https://api.github.com/repos/apache/tvm/issues/2061","id":435662229,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTY2MjIyOQ==","user":{"login":"BobLiu20","id":6102702,"node_id":"MDQ6VXNlcjYxMDI3MDI=","avatar_url":"https://avatars.githubusercontent.com/u/6102702?v=4","gravatar_id":"","url":"https://api.github.com/users/BobLiu20","html_url":"https://github.com/BobLiu20","followers_url":"https://api.github.com/users/BobLiu20/followers","following_url":"https://api.github.com/users/BobLiu20/following{/other_user}","gists_url":"https://api.github.com/users/BobLiu20/gists{/gist_id}","starred_url":"https://api.github.com/users/BobLiu20/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BobLiu20/subscriptions","organizations_url":"https://api.github.com/users/BobLiu20/orgs","repos_url":"https://api.github.com/users/BobLiu20/repos","events_url":"https://api.github.com/users/BobLiu20/events{/privacy}","received_events_url":"https://api.github.com/users/BobLiu20/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-04T11:36:55Z","updated_at":"2018-11-04T11:36:55Z","author_association":"NONE","body":"@srkreddy1238  welcome to review. thanks","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435662229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435729525","html_url":"https://github.com/apache/tvm/pull/2059#issuecomment-435729525","issue_url":"https://api.github.com/repos/apache/tvm/issues/2059","id":435729525,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNTcyOTUyNQ==","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2018-11-05T01:30:48Z","updated_at":"2018-11-05T01:30:48Z","author_association":"MEMBER","body":"Overall looks good 👍, I think we should still lift all local functions into global definitions before optimizing, it is a good invariant and allows us to do global transformations (in follow-up passes) without having to rewrite the functions which depend on them. If we are worried about performance we can re-perform inning at the end. \r\n\r\n@MarisaKirisame could you take a look at this? it effect us.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/435729525/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]