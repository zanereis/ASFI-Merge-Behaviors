[{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612646440","html_url":"https://github.com/apache/storm/issues/5079#issuecomment-2612646440","issue_url":"https://api.github.com/repos/apache/storm/issues/5079","id":2612646440,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDY0NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T21:03:08Z","updated_at":"2025-01-24T14:21:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1059\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1059</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612646440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612646446","html_url":"https://github.com/apache/storm/issues/5079#issuecomment-2612646446","issue_url":"https://api.github.com/repos/apache/storm/issues/5079","id":2612646446,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDY0NDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T21:03:34Z","updated_at":"2025-01-24T14:21:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Merged this into master</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612646446/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183060852","html_url":"https://github.com/apache/storm/pull/1095#issuecomment-183060852","issue_url":"https://api.github.com/repos/apache/storm/issues/1095","id":183060852,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzA2MDg1Mg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T21:10:01Z","updated_at":"2016-02-11T21:10:01Z","author_association":"CONTRIBUTOR","body":"Looks good to me +1 pending Travis\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183060852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653329","html_url":"https://github.com/apache/storm/issues/5109#issuecomment-2612653329","issue_url":"https://api.github.com/repos/apache/storm/issues/5109","id":2612653329,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTMzMjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T21:10:02Z","updated_at":"2025-01-24T14:24:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1095#issuecomment-183060852\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1095#issuecomment-183060852</a></p>\n\n<p>    Looks good to me +1 pending Travis</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183061460","html_url":"https://github.com/apache/storm/pull/1097#issuecomment-183061460","issue_url":"https://api.github.com/repos/apache/storm/issues/1097","id":183061460,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzA2MTQ2MA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T21:12:35Z","updated_at":"2016-02-11T21:12:35Z","author_association":"CONTRIBUTOR","body":"+1 pending travis\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183061460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647663","html_url":"https://github.com/apache/storm/issues/5085#issuecomment-2612647663","issue_url":"https://api.github.com/repos/apache/storm/issues/5085","id":2612647663,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDc2NjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T21:12:37Z","updated_at":"2025-01-24T14:21:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1097#issuecomment-183061460\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1097#issuecomment-183061460</a></p>\n\n<p>    +1 pending travis</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647663/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648528","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648528","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648528,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg1Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:24:54Z","updated_at":"2025-01-24T14:22:00Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user jerrypeng opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1253\" title=\"port  backtype.storm.timer to java\" class=\"issue-link\" data-issue-key=\"STORM-1253\"><del>STORM-1253</del></a> - port backtype.storm.timer to java</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/jerrypeng/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/jerrypeng/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1253\" title=\"port  backtype.storm.timer to java\" class=\"issue-link\" data-issue-key=\"STORM-1253\"><del>STORM-1253</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1098</p>\n\n<hr />\n<p>commit b51389feaedcf1902550565a3d8e3a8fa604e1ad<br/>\nAuthor: Boyang Jerry Peng <jerrypeng@yahoo-inc.com><br/>\nDate:   2016-02-05T20:22:08Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1253\" title=\"port  backtype.storm.timer to java\" class=\"issue-link\" data-issue-key=\"STORM-1253\"><del>STORM-1253</del></a> - port backtype.storm.timer to java</p>\n\n<p>commit 2327bb328e73a53b738c422ef10aa5bc9ec3c85d<br/>\nAuthor: Boyang Jerry Peng <jerrypeng@yahoo-inc.com><br/>\nDate:   2016-02-09T15:41:47Z</p>\n\n<p>    translating timer</p>\n\n<p>commit 41a27f9ef897c6e3cb4c8ede76c5b6ed2a63e1c1<br/>\nAuthor: Boyang Jerry Peng <jerrypeng@yahoo-inc.com><br/>\nDate:   2016-02-11T20:13:31Z</p>\n\n<p>    replacing clojure with java</p>\n\n<p>commit ee10ec177e0b0205360f27029b7cd17dce84beee<br/>\nAuthor: Boyang Jerry Peng <jerrypeng@yahoo-inc.com><br/>\nDate:   2016-02-11T21:01:43Z</p>\n\n<p>    cleaning up</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648528/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870480","html_url":"https://github.com/apache/storm/issues/5373#issuecomment-2612870480","issue_url":"https://api.github.com/repos/apache/storm/issues/5373","id":2612870480,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA0ODA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:30:48Z","updated_at":"2025-01-24T16:01:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user knusbaum opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1099\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1099</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1538\" title=\"Exception being thrown after Utils conversion to java\" class=\"issue-link\" data-issue-key=\"STORM-1538\"><del>STORM-1538</del></a>: Exception being thrown after Utils conversion to java</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/knusbaum/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/knusbaum/incubator-storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1538\" title=\"Exception being thrown after Utils conversion to java\" class=\"issue-link\" data-issue-key=\"STORM-1538\"><del>STORM-1538</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1099.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1099.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1099</p>\n\n<hr />\n<p>commit 747080e08af0bd46624e53264111cc3be1a0a74f<br/>\nAuthor: Kyle Nusbaum <kylejnusbaum@gmail.com><br/>\nDate:   2016-02-11T22:17:20Z</p>\n\n<p>    Fixing Plus thingy.</p>\n\n<p>commit d3d0a868069ff783ba25d9698ff4b9311e58d796<br/>\nAuthor: Kyle Nusbaum <kylejnusbaum@gmail.com><br/>\nDate:   2016-02-11T22:30:09Z</p>\n\n<p>    Fixing other exceptions.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870480/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870484","html_url":"https://github.com/apache/storm/issues/5373#issuecomment-2612870484","issue_url":"https://api.github.com/repos/apache/storm/issues/5373","id":2612870484,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA0ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:46:01Z","updated_at":"2025-01-24T16:01:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\">ptgoetz</a>:</i>\n<p>What branches does this affect?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870484/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183089890","html_url":"https://github.com/apache/storm/pull/1099#issuecomment-183089890","issue_url":"https://api.github.com/repos/apache/storm/issues/1099","id":183089890,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzA4OTg5MA==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:46:07Z","updated_at":"2016-02-11T22:46:07Z","author_association":"CONTRIBUTOR","body":"+1 pending Travis CI Build..\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183089890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870486","html_url":"https://github.com/apache/storm/issues/5373#issuecomment-2612870486","issue_url":"https://api.github.com/repos/apache/storm/issues/5373","id":2612870486,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA0ODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:46:09Z","updated_at":"2025-01-24T16:01:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1099#issuecomment-183089890\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1099#issuecomment-183089890</a></p>\n\n<p>    +1 pending Travis CI Build..</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870486/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183091692","html_url":"https://github.com/apache/storm/pull/1099#issuecomment-183091692","issue_url":"https://api.github.com/repos/apache/storm/issues/1099","id":183091692,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzA5MTY5Mg==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:53:38Z","updated_at":"2016-02-11T22:53:38Z","author_association":"CONTRIBUTOR","body":"+1 pending Travis CI\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183091692/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870489","html_url":"https://github.com/apache/storm/issues/5373#issuecomment-2612870489","issue_url":"https://api.github.com/repos/apache/storm/issues/5373","id":2612870489,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA0ODk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:53:39Z","updated_at":"2025-01-24T16:01:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1099#issuecomment-183091692\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1099#issuecomment-183091692</a></p>\n\n<p>    +1 pending Travis CI</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870489/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183092097","html_url":"https://github.com/apache/storm/pull/1053#issuecomment-183092097","issue_url":"https://api.github.com/repos/apache/storm/issues/1053","id":183092097,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzA5MjA5Nw==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:55:22Z","updated_at":"2016-02-11T22:55:22Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183092097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870619","html_url":"https://github.com/apache/storm/issues/5374#issuecomment-2612870619","issue_url":"https://api.github.com/repos/apache/storm/issues/5374","id":2612870619,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA2MTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T22:56:08Z","updated_at":"2025-01-24T16:01:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=roshan_naik\">roshan_naik</a>:</i>\n<p>Attaching before/after  screenshots of profiler screenshots</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870619/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870626","html_url":"https://github.com/apache/storm/issues/5374#issuecomment-2612870626","issue_url":"https://api.github.com/repos/apache/storm/issues/5374","id":2612870626,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA2MjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T23:00:52Z","updated_at":"2025-01-24T16:01:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=roshan_naik\">roshan_naik</a>:</i>\n<p>The attached profiler info related to the amount of time taken by ~45k invocations each of  Spout.nextTuple() and  Bolt.execute()  suggests a perf boost of:</p>\n\n<p><b>Spout.nextTuple() :</b>   6953ms -> 5396ms  =  <b>~30%</b> improvement<br/>\n<b>Bolt.execute() :</b> 5313ms -> 3687ms =   <b>~ 44%</b> improvement</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644327","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644327","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644327,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzMjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T23:32:37Z","updated_at":"2025-01-24T14:20:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user zhuoliu opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1230\" title=\"port  backtype.storm.process-simulator to java\" class=\"issue-link\" data-issue-key=\"STORM-1230\"><del>STORM-1230</del></a> port backtype.storm.process-simulator to java.</p>\n\n<p>    From storm-core/src/clj/org/apache/storm/process-simulator.clj to storm-core/src/jvm/org/apache/storm/ProcessSimulator.java</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/zhuoliu/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/zhuoliu/storm</a> 1230</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1100</p>\n\n<hr />\n<p>commit 6965605105bf45f88b3e0225caf28a8e3f806926<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-02-11T23:30:55Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1230\" title=\"port  backtype.storm.process-simulator to java\" class=\"issue-link\" data-issue-key=\"STORM-1230\"><del>STORM-1230</del></a> port backtype.storm.process-simulator to java.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870631","html_url":"https://github.com/apache/storm/issues/5374#issuecomment-2612870631","issue_url":"https://api.github.com/repos/apache/storm/issues/5374","id":2612870631,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA2MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T23:43:37Z","updated_at":"2025-01-24T16:01:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user roshannaik opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1101\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1101</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1539\" title=\"Improve Storm ACK-ing performance\" class=\"issue-link\" data-issue-key=\"STORM-1539\"><del>STORM-1539</del></a> - Improve Storm ACK-ing performance</p>\n\n<p>    Implemented the ACK-ing logic in Java.<br/>\n    See Jira for profiler info on performance boost.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/roshannaik/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/roshannaik/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1539\" title=\"Improve Storm ACK-ing performance\" class=\"issue-link\" data-issue-key=\"STORM-1539\"><del>STORM-1539</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1101.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1101.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1101</p>\n\n<hr />\n<p>commit 74bfd23c383ce21cc8294bed79242bb00e2bd354<br/>\nAuthor: Roshan Naik <roshan@hortonworks.com><br/>\nDate:   2016-02-11T23:40:39Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1539\" title=\"Improve Storm ACK-ing performance\" class=\"issue-link\" data-issue-key=\"STORM-1539\"><del>STORM-1539</del></a> - Improve Storm ACK-ing performance</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870631/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183113689","html_url":"https://github.com/apache/storm/pull/1101#issuecomment-183113689","issue_url":"https://api.github.com/repos/apache/storm/issues/1101","id":183113689,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzExMzY4OQ==","user":{"login":"Parth-Brahmbhatt","id":6914358,"node_id":"MDQ6VXNlcjY5MTQzNTg=","avatar_url":"https://avatars.githubusercontent.com/u/6914358?v=4","gravatar_id":"","url":"https://api.github.com/users/Parth-Brahmbhatt","html_url":"https://github.com/Parth-Brahmbhatt","followers_url":"https://api.github.com/users/Parth-Brahmbhatt/followers","following_url":"https://api.github.com/users/Parth-Brahmbhatt/following{/other_user}","gists_url":"https://api.github.com/users/Parth-Brahmbhatt/gists{/gist_id}","starred_url":"https://api.github.com/users/Parth-Brahmbhatt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Parth-Brahmbhatt/subscriptions","organizations_url":"https://api.github.com/users/Parth-Brahmbhatt/orgs","repos_url":"https://api.github.com/users/Parth-Brahmbhatt/repos","events_url":"https://api.github.com/users/Parth-Brahmbhatt/events{/privacy}","received_events_url":"https://api.github.com/users/Parth-Brahmbhatt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T23:48:23Z","updated_at":"2016-02-11T23:48:23Z","author_association":"CONTRIBUTOR","body":"+1.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183113689/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870633","html_url":"https://github.com/apache/storm/issues/5374#issuecomment-2612870633","issue_url":"https://api.github.com/repos/apache/storm/issues/5374","id":2612870633,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA2MzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T23:48:24Z","updated_at":"2025-01-24T16:01:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Parth-Brahmbhatt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1101#issuecomment-183113689\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1101#issuecomment-183113689</a></p>\n\n<p>    +1.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870633/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183116228","html_url":"https://github.com/apache/storm/pull/1101#issuecomment-183116228","issue_url":"https://api.github.com/repos/apache/storm/issues/1101","id":183116228,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzExNjIyOA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T23:53:57Z","updated_at":"2016-02-11T23:53:57Z","author_association":"CONTRIBUTOR","body":"Nice, +1\nAccording to https://gist.github.com/tolitius/1721519, maybe we can try recursive approach to improve performance if we want to stick in clojure. But now we don't need to, and this PR is clearer.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183116228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870643","html_url":"https://github.com/apache/storm/issues/5374#issuecomment-2612870643","issue_url":"https://api.github.com/repos/apache/storm/issues/5374","id":2612870643,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA2NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-11T23:53:59Z","updated_at":"2025-01-24T16:01:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1101#issuecomment-183116228\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1101#issuecomment-183116228</a></p>\n\n<p>    Nice, +1<br/>\n    According to <a href=\"https://gist.github.com/tolitius/1721519\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://gist.github.com/tolitius/1721519</a>, maybe we can try recursive approach to improve performance if we want to stick in clojure. But now we don't need to, and this PR is clearer.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870643/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183119614","html_url":"https://github.com/apache/storm/pull/1101#issuecomment-183119614","issue_url":"https://api.github.com/repos/apache/storm/issues/1101","id":183119614,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzExOTYxNA==","user":{"login":"roshannaik","id":2366541,"node_id":"MDQ6VXNlcjIzNjY1NDE=","avatar_url":"https://avatars.githubusercontent.com/u/2366541?v=4","gravatar_id":"","url":"https://api.github.com/users/roshannaik","html_url":"https://github.com/roshannaik","followers_url":"https://api.github.com/users/roshannaik/followers","following_url":"https://api.github.com/users/roshannaik/following{/other_user}","gists_url":"https://api.github.com/users/roshannaik/gists{/gist_id}","starred_url":"https://api.github.com/users/roshannaik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/roshannaik/subscriptions","organizations_url":"https://api.github.com/users/roshannaik/orgs","repos_url":"https://api.github.com/users/roshannaik/repos","events_url":"https://api.github.com/users/roshannaik/events{/privacy}","received_events_url":"https://api.github.com/users/roshannaik/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T00:08:47Z","updated_at":"2016-02-12T00:08:47Z","author_association":"CONTRIBUTOR","body":"I was able to run the unit tests successfully for this.. but wanted to ensure a committer is able to review the Java ACKing logic implementation and confirm it looks good.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183119614/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870649","html_url":"https://github.com/apache/storm/issues/5374#issuecomment-2612870649","issue_url":"https://api.github.com/repos/apache/storm/issues/5374","id":2612870649,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA2NDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T00:08:49Z","updated_at":"2025-01-24T16:01:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user roshannaik commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1101#issuecomment-183119614\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1101#issuecomment-183119614</a></p>\n\n<p>    I was able to run the unit tests successfully for this.. but wanted to ensure a committer is able to review the Java ACKing logic implementation and confirm it looks good.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870649/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870987","html_url":"https://github.com/apache/storm/issues/5376#issuecomment-2612870987","issue_url":"https://api.github.com/repos/apache/storm/issues/5376","id":2612870987,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA5ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T01:10:38Z","updated_at":"2025-01-24T16:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user HeartSaVioR opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1102\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1102</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1541\" title=\"Change scope of &#39;hadoop-minicluster&#39; to test\" class=\"issue-link\" data-issue-key=\"STORM-1541\"><del>STORM-1541</del></a> Change scope of 'hadoop-minicluster' to test</p>\n\n<p>    Since it affects 2.0.0 and 1.0.0, I'd like to apply both branches when vote for merging passes.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/HeartSaVioR/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/HeartSaVioR/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1541\" title=\"Change scope of &#39;hadoop-minicluster&#39; to test\" class=\"issue-link\" data-issue-key=\"STORM-1541\"><del>STORM-1541</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1102.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1102.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1102</p>\n\n<hr />\n<p>commit 5fe7559aa1ac9bc12accdc2af7ded2f43bea1cf0<br/>\nAuthor: Jungtaek Lim <kabhwan@gmail.com><br/>\nDate:   2016-02-12T00:43:45Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1541\" title=\"Change scope of &#39;hadoop-minicluster&#39; to test\" class=\"issue-link\" data-issue-key=\"STORM-1541\"><del>STORM-1541</del></a> Change scope of 'hadoop-minicluster' to test</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870987/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183139018","html_url":"https://github.com/apache/storm/pull/1101#issuecomment-183139018","issue_url":"https://api.github.com/repos/apache/storm/issues/1101","id":183139018,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzEzOTAxOA==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T01:14:38Z","updated_at":"2016-02-12T01:14:38Z","author_association":"MEMBER","body":"+1\n\nI haven't looked at the conflicts yet, But we may need separate pull requests for the mast and 1.x branches. But that should be trivial.\n\nCan you add this to STORM-1491?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183139018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870655","html_url":"https://github.com/apache/storm/issues/5374#issuecomment-2612870655","issue_url":"https://api.github.com/repos/apache/storm/issues/5374","id":2612870655,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA2NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T01:14:40Z","updated_at":"2025-01-24T16:01:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1101#issuecomment-183139018\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1101#issuecomment-183139018</a></p>\n\n<p>    +1</p>\n\n<p>    I haven't looked at the conflicts yet, But we may need separate pull requests for the mast and 1.x branches. But that should be trivial.</p>\n\n<p>    Can you add this to <a href=\"https://issues.apache.org/jira/browse/STORM-1491\" title=\"Release Apache Storm 1.0.0\" class=\"issue-link\" data-issue-key=\"STORM-1491\"><del>STORM-1491</del></a>?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183144295","html_url":"https://github.com/apache/storm/pull/1101#issuecomment-183144295","issue_url":"https://api.github.com/repos/apache/storm/issues/1101","id":183144295,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzE0NDI5NQ==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T01:37:48Z","updated_at":"2016-02-12T01:37:48Z","author_association":"MEMBER","body":"+1 \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183144295/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870659","html_url":"https://github.com/apache/storm/issues/5374#issuecomment-2612870659","issue_url":"https://api.github.com/repos/apache/storm/issues/5374","id":2612870659,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA2NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T01:37:49Z","updated_at":"2025-01-24T16:01:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1101#issuecomment-183144295\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1101#issuecomment-183144295</a></p>\n\n<p>    +1 </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870659/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183147381","html_url":"https://github.com/apache/storm/pull/1102#issuecomment-183147381","issue_url":"https://api.github.com/repos/apache/storm/issues/1102","id":183147381,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzE0NzM4MQ==","user":{"login":"dossett","id":7207582,"node_id":"MDQ6VXNlcjcyMDc1ODI=","avatar_url":"https://avatars.githubusercontent.com/u/7207582?v=4","gravatar_id":"","url":"https://api.github.com/users/dossett","html_url":"https://github.com/dossett","followers_url":"https://api.github.com/users/dossett/followers","following_url":"https://api.github.com/users/dossett/following{/other_user}","gists_url":"https://api.github.com/users/dossett/gists{/gist_id}","starred_url":"https://api.github.com/users/dossett/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dossett/subscriptions","organizations_url":"https://api.github.com/users/dossett/orgs","repos_url":"https://api.github.com/users/dossett/repos","events_url":"https://api.github.com/users/dossett/events{/privacy}","received_events_url":"https://api.github.com/users/dossett/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T01:58:33Z","updated_at":"2016-02-12T01:58:33Z","author_association":"CONTRIBUTOR","body":"+1 for both branches\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183147381/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870996","html_url":"https://github.com/apache/storm/issues/5376#issuecomment-2612870996","issue_url":"https://api.github.com/repos/apache/storm/issues/5376","id":2612870996,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA5OTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T01:58:34Z","updated_at":"2025-01-24T16:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dossett commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1102#issuecomment-183147381\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1102#issuecomment-183147381</a></p>\n\n<p>    +1 for both branches</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870996/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183201819","html_url":"https://github.com/apache/storm/pull/1095#issuecomment-183201819","issue_url":"https://api.github.com/repos/apache/storm/issues/1095","id":183201819,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzIwMTgxOQ==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T06:48:58Z","updated_at":"2016-02-12T06:48:58Z","author_association":"CONTRIBUTOR","body":"Travis check has passed. Ready for merge now.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183201819/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653335","html_url":"https://github.com/apache/storm/issues/5109#issuecomment-2612653335","issue_url":"https://api.github.com/repos/apache/storm/issues/5109","id":2612653335,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTMzMzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T06:49:00Z","updated_at":"2025-01-24T14:24:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1095#issuecomment-183201819\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1095#issuecomment-183201819</a></p>\n\n<p>    Travis check has passed. Ready for merge now.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653335/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183201855","html_url":"https://github.com/apache/storm/pull/1097#issuecomment-183201855","issue_url":"https://api.github.com/repos/apache/storm/issues/1097","id":183201855,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzIwMTg1NQ==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T06:49:18Z","updated_at":"2016-02-12T06:49:18Z","author_association":"CONTRIBUTOR","body":"Travis check passed. Ready for merge\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183201855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647668","html_url":"https://github.com/apache/storm/issues/5085#issuecomment-2612647668","issue_url":"https://api.github.com/repos/apache/storm/issues/5085","id":2612647668,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDc2Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T06:49:19Z","updated_at":"2025-01-24T14:21:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1097#issuecomment-183201855\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1097#issuecomment-183201855</a></p>\n\n<p>    Travis check passed. Ready for merge</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647668/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644329","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644329","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644329,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzMjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:08:52Z","updated_at":"2025-01-24T14:20:05Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52710917\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52710917</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ProcessSimulator.class);<br/>\n    +    protected static Object lock = new Object();<br/>\n    +    protected static ConcurrentHashMap<String, Shutdownable> processMap = new ConcurrentHashMap<String, Shutdownable>();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Register a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @param shutdownable<br/>\n    +     */<br/>\n    +    public static void registerProcess(String pid, Shutdownable shutdownable) </p>\n{\n    +processMap.put(pid, shutdownable);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    protected static Shutdownable getProcessHandle(String pid) </p>\n{\n    +return processMap.get(pid);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get all process handles<br/>\n    +     * <br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static Collection<Shutdownable> getAllProcessHandles() </p>\n{\n    +return processMap.values();\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Kill a process<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     */<br/>\n    +    public static void killProcess(String pid) {<br/>\n    +synchronized (lock) {<br/>\n    +    LOG.info(\"Begin killing process \" + pid);<br/>\n    +    Shutdownable shutdownHandle = getProcessHandle(pid);<br/>\n    +    if (shutdownHandle != null) </p>\n{\n    +shutdownHandle.shutdown();\n    +    }\n<p>    +    processMap.remove(pid);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think this should be moved inside the if block and before the shutdown call. Once process is marked for shutdown, it should be removed from map (similar to clojure code) <br/>\n    ``` <br/>\n    Shutdownable shutdownHandle = processMap.remove(pid)<br/>\n    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644336","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644336","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644336,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzMzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:09:55Z","updated_at":"2025-01-24T14:20:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52710964\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52710964</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ProcessSimulator.class);<br/>\n    +    protected static Object lock = new Object();<br/>\n    +    protected static ConcurrentHashMap<String, Shutdownable> processMap = new ConcurrentHashMap<String, Shutdownable>();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Register a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @param shutdownable<br/>\n    +     */<br/>\n    +    public static void registerProcess(String pid, Shutdownable shutdownable) </p>\n{\n    +processMap.put(pid, shutdownable);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    protected static Shutdownable getProcessHandle(String pid) </p>\n{\n    +return processMap.get(pid);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get all process handles<br/>\n    +     * <br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static Collection<Shutdownable> getAllProcessHandles() </p>\n{\n    +return processMap.values();\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Kill a process<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     */<br/>\n    +    public static void killProcess(String pid) {<br/>\n    +synchronized (lock) {<br/>\n    +    LOG.info(\"Begin killing process \" + pid);<br/>\n    +    Shutdownable shutdownHandle = getProcessHandle(pid);<br/>\n    +    if (shutdownHandle != null) </p>\n{\n    +shutdownHandle.shutdown();\n    +    }\n<p>    +    processMap.remove(pid);<br/>\n    +    LOG.info(\"Successfully killing process \" + pid);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    typo: killed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644336/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644340","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644340","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644340,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzNDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:10:21Z","updated_at":"2025-01-24T14:20:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52710990\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52710990</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ProcessSimulator.class);<br/>\n    +    protected static Object lock = new Object();<br/>\n    +    protected static ConcurrentHashMap<String, Shutdownable> processMap = new ConcurrentHashMap<String, Shutdownable>();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Register a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @param shutdownable<br/>\n    +     */<br/>\n    +    public static void registerProcess(String pid, Shutdownable shutdownable) </p>\n{\n    +processMap.put(pid, shutdownable);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    protected static Shutdownable getProcessHandle(String pid) </p>\n{\n    +return processMap.get(pid);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get all process handles<br/>\n    +     * <br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static Collection<Shutdownable> getAllProcessHandles() </p>\n{\n    +return processMap.values();\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Kill a process<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     */<br/>\n    +    public static void killProcess(String pid) {<br/>\n    +synchronized (lock) {<br/>\n    +    LOG.info(\"Begin killing process \" + pid);<br/>\n    +    Shutdownable shutdownHandle = getProcessHandle(pid);<br/>\n    +    if (shutdownHandle != null) </p>\n{\n    +shutdownHandle.shutdown();\n    +    }\n<p>    +    processMap.remove(pid);<br/>\n    +    LOG.info(\"Successfully killing process \" + pid);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    and should this be logged only if pid is present?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644344","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644344","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644344,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzNDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:11:03Z","updated_at":"2025-01-24T14:20:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52711023\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52711023</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ProcessSimulator.class);<br/>\n    +    protected static Object lock = new Object();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    why are these declared protected?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644351","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644351","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644351,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzNTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:12:27Z","updated_at":"2025-01-24T14:20:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52711091\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52711091</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ProcessSimulator.class);<br/>\n    +    protected static Object lock = new Object();<br/>\n    +    protected static ConcurrentHashMap<String, Shutdownable> processMap = new ConcurrentHashMap<String, Shutdownable>();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Register a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @param shutdownable<br/>\n    +     */<br/>\n    +    public static void registerProcess(String pid, Shutdownable shutdownable) </p>\n{\n    +processMap.put(pid, shutdownable);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    protected static Shutdownable getProcessHandle(String pid) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This function is only used in this class. It can be inlined.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644355","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644355","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644355,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzNTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:13:33Z","updated_at":"2025-01-24T14:20:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52711184\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52711184</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ProcessSimulator.class);<br/>\n    +    protected static Object lock = new Object();<br/>\n    +    protected static ConcurrentHashMap<String, Shutdownable> processMap = new ConcurrentHashMap<String, Shutdownable>();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Register a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @param shutdownable<br/>\n    +     */<br/>\n    +    public static void registerProcess(String pid, Shutdownable shutdownable) </p>\n{\n    +processMap.put(pid, shutdownable);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    protected static Shutdownable getProcessHandle(String pid) </p>\n{\n    +return processMap.get(pid);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get all process handles<br/>\n    +     * <br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static Collection<Shutdownable> getAllProcessHandles() </p>\n{\n    +return processMap.values();\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Kill a process<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     */<br/>\n    +    public static void killProcess(String pid) {<br/>\n    +synchronized (lock) {<br/>\n    +    LOG.info(\"Begin killing process \" + pid);<br/>\n    +    Shutdownable shutdownHandle = getProcessHandle(pid);<br/>\n    +    if (shutdownHandle != null) </p>\n{\n    +shutdownHandle.shutdown();\n    +    }\n<p>    +    processMap.remove(pid);<br/>\n    +    LOG.info(\"Successfully killing process \" + pid);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * kill all processes<br/>\n    +     */<br/>\n    +    public static void killAllProcesses() {<br/>\n    +Set<String> pids = processMap.keySet();<br/>\n    +for (String pid : pids) </p>\n{\n    +    killProcess(pid);\n    +}\n<p>    +LOG.info(\"Successfully kill all processes\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    typo: killed. You can add a begin info message as well. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644355/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644361","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644361","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644361,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzNjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:16:00Z","updated_at":"2025-01-24T14:20:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52711320\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52711320</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Also ProcessSimulator name is misleading judging from how it is being used in supervisor. ProcessManager sounds a better name to me. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644363","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644363","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644363,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzNjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:17:38Z","updated_at":"2025-01-24T14:20:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52711383\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52711383</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Ahh. Ignore that. code is doing something else. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644363/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648536","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648536","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648536,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg1MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:29:30Z","updated_at":"2025-01-24T14:22:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52711933\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52711933</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/supervisor.clj &#8212;<br/>\n    @@ -332,19 +333,24 @@<br/>\n:assignment-id (.getAssignmentId isupervisor)<br/>\n:my-hostname (Utils/hostname conf)<br/>\n:curr-assignment (atom nil) ;; used for reporting used ports when heartbeating</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>:heartbeat-timer (mk-timer :kill-fn (fn <span class=\"error\">&#91;t&#93;</span></li>\n\t<li>(log-error t \"Error when processing event\")</li>\n\t<li>(Utils/exitProcess 20 \"Error when processing an event\")</li>\n\t<li>))</li>\n\t<li>:event-timer (mk-timer :kill-fn (fn <span class=\"error\">&#91;t&#93;</span></li>\n\t<li>(log-error t \"Error when processing event\")</li>\n\t<li>(Utils/exitProcess 20 \"Error when processing an event\")</li>\n\t<li>))</li>\n\t<li>:blob-update-timer (mk-timer :kill-fn (defn blob-update-timer</li>\n\t<li><span class=\"error\">&#91;t&#93;</span></li>\n\t<li>(log-error t \"Error when processing event\")</li>\n\t<li>(Utils/exitProcess 20 \"Error when processing a event\"))</li>\n\t<li>:timer-name \"blob-update-timer\")<br/>\n    +   :heartbeat-timer (StormTimer/mkTimer nil<br/>\n    +      (reify StormTimer$TimerFunc\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    This implementation of TimerFunc is repeated in many places. Does it make sense to move it to java based implementation of TimerFunc and use everywhere? </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648536/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648549","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648549","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648549,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg1NDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:42:52Z","updated_at":"2025-01-24T14:22:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52712565\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52712565</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    +if (task == null) </p>\n{\n    +    throw new RuntimeException(\"task is null!\");\n    +}\n<p>    +if (afn == null) </p>\n{\n    +    throw new RuntimeException(\"function to schedule is null!\");\n    +}\n<p>    +String id = Utils.uuid();<br/>\n    +long endTimeMs = Time.currentTimeMillis() + Time.secsToMillisLong(delaySecs);<br/>\n    +if (jitterMs > 0) </p>\n{\n    +    endTimeMs = task.random.nextInt(jitterMs) + endTimeMs;\n    +}\n<p>    +synchronized (task.lock) </p>\n{\n    +    task.add(new QueueEntry(endTimeMs, afn, id));\n    +}\n<p>    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn) </p>\n{\n    +schedule(task, delaySecs, afn, true, 0);\n    +    }\n<p>    +<br/>\n    +    public static void scheduleRecurring(final StormTimerTask task, int delaySecs, final int recurSecs, final TimerFunc afn) {<br/>\n    +schedule(task, delaySecs, new TimerFunc() {<br/>\n    +    @Override<br/>\n    +    public void run(Object o) {<br/>\n    +afn.run(null);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    can you rename afn since it is a java object</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648570","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648570","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648570,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg1NzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:45:44Z","updated_at":"2025-01-24T14:22:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52712695\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52712695</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    +if (task == null) </p>\n{\n    +    throw new RuntimeException(\"task is null!\");\n    +}\n<p>    +if (afn == null) </p>\n{\n    +    throw new RuntimeException(\"function to schedule is null!\");\n    +}\n<p>    +String id = Utils.uuid();<br/>\n    +long endTimeMs = Time.currentTimeMillis() + Time.secsToMillisLong(delaySecs);<br/>\n    +if (jitterMs > 0) </p>\n{\n    +    endTimeMs = task.random.nextInt(jitterMs) + endTimeMs;\n    +}\n<p>    +synchronized (task.lock) </p>\n{\n    +    task.add(new QueueEntry(endTimeMs, afn, id));\n    +}\n<p>    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn) </p>\n{\n    +schedule(task, delaySecs, afn, true, 0);\n    +    }\n<p>    +<br/>\n    +    public static void scheduleRecurring(final StormTimerTask task, int delaySecs, final int recurSecs, final TimerFunc afn) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    can you keep the order of arguments consistent with above scheduleFunction? <br/>\n    `<br/>\n    StormTimerTask task, int delaySecs, TimerFunc afn, final int recurSecs<br/>\n    `</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648570/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648581","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648581","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648581,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg1ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:46:24Z","updated_at":"2025-01-24T14:22:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52712733\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52712733</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    +if (task == null) </p>\n{\n    +    throw new RuntimeException(\"task is null!\");\n    +}\n<p>    +if (afn == null) </p>\n{\n    +    throw new RuntimeException(\"function to schedule is null!\");\n    +}\n<p>    +String id = Utils.uuid();<br/>\n    +long endTimeMs = Time.currentTimeMillis() + Time.secsToMillisLong(delaySecs);<br/>\n    +if (jitterMs > 0) </p>\n{\n    +    endTimeMs = task.random.nextInt(jitterMs) + endTimeMs;\n    +}\n<p>    +synchronized (task.lock) </p>\n{\n    +    task.add(new QueueEntry(endTimeMs, afn, id));\n    +}\n<p>    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn) </p>\n{\n    +schedule(task, delaySecs, afn, true, 0);\n    +    }\n<p>    +<br/>\n    +    public static void scheduleRecurring(final StormTimerTask task, int delaySecs, final int recurSecs, final TimerFunc afn) {<br/>\n    +schedule(task, delaySecs, new TimerFunc() {<br/>\n    +    @Override<br/>\n    +    public void run(Object o) </p>\n{\n    +afn.run(null);\n    +// This avoids a race condition with cancel-timer.\n    +schedule(task, recurSecs, this, false, 0);\n    +    }\n<p>    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void scheduleRecurringWithJitter(final StormTimerTask task, int delaySecs, final int recurSecs, final int jitterMs, final TimerFunc afn) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    same comment regarding the method parameters ordering. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648581/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648588","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648588","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648588,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg1ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:48:36Z","updated_at":"2025-01-24T14:22:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52712839\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52712839</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    +if (task == null) </p>\n{\n    +    throw new RuntimeException(\"task is null!\");\n    +}\n<p>    +if (afn == null) </p>\n{\n    +    throw new RuntimeException(\"function to schedule is null!\");\n    +}\n<p>    +String id = Utils.uuid();<br/>\n    +long endTimeMs = Time.currentTimeMillis() + Time.secsToMillisLong(delaySecs);<br/>\n    +if (jitterMs > 0) </p>\n{\n    +    endTimeMs = task.random.nextInt(jitterMs) + endTimeMs;\n    +}\n<p>    +synchronized (task.lock) </p>\n{\n    +    task.add(new QueueEntry(endTimeMs, afn, id));\n    +}\n<p>    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn) </p>\n{\n    +schedule(task, delaySecs, afn, true, 0);\n    +    }\n<p>    +<br/>\n    +    public static void scheduleRecurring(final StormTimerTask task, int delaySecs, final int recurSecs, final TimerFunc afn) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I see now that it will lead to changes in parameter order everywhere so I am fine with this order.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648588/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648594","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648594","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648594,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg1OTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T07:52:36Z","updated_at":"2025-01-24T14:22:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52713030\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52713030</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    is it needed? </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648594/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648596","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648596","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648596,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg1OTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T08:04:52Z","updated_at":"2025-01-24T14:22:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52713780\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52713780</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Timer active check is missing. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871119","html_url":"https://github.com/apache/storm/issues/5377#issuecomment-2612871119","issue_url":"https://api.github.com/repos/apache/storm/issues/5377","id":2612871119,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzExMTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T11:16:16Z","updated_at":"2025-01-24T16:01:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\">abhishek.agarwal</a>:</i>\n<p>Now I can give an easy fix just to counter this specific scenario, I do not like the whole flow involved in this debugging utility. I send a jstack request and then I have to go to files section to wait for jstack dump to appear (which in itself is not intuitive). And the requests are being routed through zookeeper, which leads to error scenarios like these. </p>\n\n<p>These calls should be inline and synchronous for a better user experience. One option is to have an admin port in worker. jstack, jmap requests can be sent to this admin port. Downside is that for each worker, two ports need to be configured. </p>\n\n<p>Another option is to have an admin port in supervisor itself. Supervisor can execute the jstack, jmap commands in a separate process, read the results/errors and return them back to user in the UI. </p>\n\n<p>Any thoughts/suggestions?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871122","html_url":"https://github.com/apache/storm/issues/5377#issuecomment-2612871122","issue_url":"https://api.github.com/repos/apache/storm/issues/5377","id":2612871122,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzExMjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T11:18:52Z","updated_at":"2025-01-24T16:01:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\">abhishek.agarwal</a>:</i>\n<p>Another problem is handling retention for the dumps being created on disk</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648614","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648614","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648614,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg2MTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T14:41:34Z","updated_at":"2025-01-24T14:22:02Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52748470\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52748470</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/supervisor.clj &#8212;<br/>\n    @@ -332,19 +333,24 @@<br/>\n:assignment-id (.getAssignmentId isupervisor)<br/>\n:my-hostname (Utils/hostname conf)<br/>\n:curr-assignment (atom nil) ;; used for reporting used ports when heartbeating</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>:heartbeat-timer (mk-timer :kill-fn (fn <span class=\"error\">&#91;t&#93;</span></li>\n\t<li>(log-error t \"Error when processing event\")</li>\n\t<li>(Utils/exitProcess 20 \"Error when processing an event\")</li>\n\t<li>))</li>\n\t<li>:event-timer (mk-timer :kill-fn (fn <span class=\"error\">&#91;t&#93;</span></li>\n\t<li>(log-error t \"Error when processing event\")</li>\n\t<li>(Utils/exitProcess 20 \"Error when processing an event\")</li>\n\t<li>))</li>\n\t<li>:blob-update-timer (mk-timer :kill-fn (defn blob-update-timer</li>\n\t<li><span class=\"error\">&#91;t&#93;</span></li>\n\t<li>(log-error t \"Error when processing event\")</li>\n\t<li>(Utils/exitProcess 20 \"Error when processing a event\"))</li>\n\t<li>:timer-name \"blob-update-timer\")<br/>\n    +   :heartbeat-timer (StormTimer/mkTimer nil<br/>\n    +      (reify StormTimer$TimerFunc\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Perhaps it does, but lets try to keep things as close to the same as before during this initial round of translation.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648614/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648654","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648654","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648654,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg2NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T14:45:48Z","updated_at":"2025-01-24T14:22:02Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52749006\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52749006</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    +if (task == null) </p>\n{\n    +    throw new RuntimeException(\"task is null!\");\n    +}\n<p>    +if (afn == null) </p>\n{\n    +    throw new RuntimeException(\"function to schedule is null!\");\n    +}\n<p>    +String id = Utils.uuid();<br/>\n    +long endTimeMs = Time.currentTimeMillis() + Time.secsToMillisLong(delaySecs);<br/>\n    +if (jitterMs > 0) </p>\n{\n    +    endTimeMs = task.random.nextInt(jitterMs) + endTimeMs;\n    +}\n<p>    +synchronized (task.lock) </p>\n{\n    +    task.add(new QueueEntry(endTimeMs, afn, id));\n    +}\n<p>    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn) </p>\n{\n    +schedule(task, delaySecs, afn, true, 0);\n    +    }\n<p>    +<br/>\n    +    public static void scheduleRecurring(final StormTimerTask task, int delaySecs, final int recurSecs, final TimerFunc afn) {<br/>\n    +schedule(task, delaySecs, new TimerFunc() {<br/>\n    +    @Override<br/>\n    +    public void run(Object o) {<br/>\n    +afn.run(null);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will refactor</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648654/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648678","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648678","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648678,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg2Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T14:46:25Z","updated_at":"2025-01-24T14:22:02Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52749084\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52749084</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    +if (task == null) </p>\n{\n    +    throw new RuntimeException(\"task is null!\");\n    +}\n<p>    +if (afn == null) </p>\n{\n    +    throw new RuntimeException(\"function to schedule is null!\");\n    +}\n<p>    +String id = Utils.uuid();<br/>\n    +long endTimeMs = Time.currentTimeMillis() + Time.secsToMillisLong(delaySecs);<br/>\n    +if (jitterMs > 0) </p>\n{\n    +    endTimeMs = task.random.nextInt(jitterMs) + endTimeMs;\n    +}\n<p>    +synchronized (task.lock) </p>\n{\n    +    task.add(new QueueEntry(endTimeMs, afn, id));\n    +}\n<p>    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn) </p>\n{\n    +schedule(task, delaySecs, afn, true, 0);\n    +    }\n<p>    +<br/>\n    +    public static void scheduleRecurring(final StormTimerTask task, int delaySecs, final int recurSecs, final TimerFunc afn) {<br/>\n    +schedule(task, delaySecs, new TimerFunc() {<br/>\n    +    @Override<br/>\n    +    public void run(Object o) </p>\n{\n    +afn.run(null);\n    +// This avoids a race condition with cancel-timer.\n    +schedule(task, recurSecs, this, false, 0);\n    +    }\n<p>    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void scheduleRecurringWithJitter(final StormTimerTask task, int delaySecs, final int recurSecs, final int jitterMs, final TimerFunc afn) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @abhishekagarwal87 So I guess you are ok with this?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648678/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648693","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648693","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648693,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg2OTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T14:47:23Z","updated_at":"2025-01-24T14:22:02Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52749203\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52749203</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    only for debugging but we can remove it</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648693/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648705","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648705","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648705,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg3MDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T14:49:47Z","updated_at":"2025-01-24T14:22:02Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52749466\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52749466</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will add</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648705/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648710","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648710","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648710,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg3MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T14:58:13Z","updated_at":"2025-01-24T14:22:02Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52750639\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52750639</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,231 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public String toString() </p>\n{\n    +    return this.id + \" \" + this.endTimeMs + \" \" + this.afn;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    +if (onKill == null) </p>\n{\n    +    throw new RuntimeException(\"onKill func is null!\");\n    +}\n<p>    +StormTimerTask task  = new StormTimerTask();<br/>\n    +if (name == null) </p>\n{\n    +    task.setName(\"timer\");\n    +}\n<p> else </p>\n{\n    +    task.setName(name);\n    +}\n<p>    +task.setOnKillFunc(onKill);<br/>\n    +task.setActive(true);<br/>\n    +<br/>\n    +task.setDaemon(true);<br/>\n    +task.setPriority(Thread.MAX_PRIORITY);<br/>\n    +task.start();<br/>\n    +return task;<br/>\n    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn, boolean checkActive, int jitterMs) {<br/>\n    +if (task == null) </p>\n{\n    +    throw new RuntimeException(\"task is null!\");\n    +}\n<p>    +if (afn == null) </p>\n{\n    +    throw new RuntimeException(\"function to schedule is null!\");\n    +}\n<p>    +String id = Utils.uuid();<br/>\n    +long endTimeMs = Time.currentTimeMillis() + Time.secsToMillisLong(delaySecs);<br/>\n    +if (jitterMs > 0) </p>\n{\n    +    endTimeMs = task.random.nextInt(jitterMs) + endTimeMs;\n    +}\n<p>    +synchronized (task.lock) </p>\n{\n    +    task.add(new QueueEntry(endTimeMs, afn, id));\n    +}\n<p>    +    }<br/>\n    +    public static void schedule(StormTimerTask task, int delaySecs, TimerFunc afn) </p>\n{\n    +schedule(task, delaySecs, afn, true, 0);\n    +    }\n<p>    +<br/>\n    +    public static void scheduleRecurring(final StormTimerTask task, int delaySecs, final int recurSecs, final TimerFunc afn) {<br/>\n    +schedule(task, delaySecs, new TimerFunc() {<br/>\n    +    @Override<br/>\n    +    public void run(Object o) </p>\n{\n    +afn.run(null);\n    +// This avoids a race condition with cancel-timer.\n    +schedule(task, recurSecs, this, false, 0);\n    +    }\n<p>    +});<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void scheduleRecurringWithJitter(final StormTimerTask task, int delaySecs, final int recurSecs, final int jitterMs, final TimerFunc afn) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648710/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870497","html_url":"https://github.com/apache/storm/issues/5373#issuecomment-2612870497","issue_url":"https://api.github.com/repos/apache/storm/issues/5373","id":2612870497,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA0OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T15:15:17Z","updated_at":"2025-01-24T16:01:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1099\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1099</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870497/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183372754","html_url":"https://github.com/apache/storm/pull/1102#issuecomment-183372754","issue_url":"https://api.github.com/repos/apache/storm/issues/1102","id":183372754,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzM3Mjc1NA==","user":{"login":"redsanket","id":8295799,"node_id":"MDQ6VXNlcjgyOTU3OTk=","avatar_url":"https://avatars.githubusercontent.com/u/8295799?v=4","gravatar_id":"","url":"https://api.github.com/users/redsanket","html_url":"https://github.com/redsanket","followers_url":"https://api.github.com/users/redsanket/followers","following_url":"https://api.github.com/users/redsanket/following{/other_user}","gists_url":"https://api.github.com/users/redsanket/gists{/gist_id}","starred_url":"https://api.github.com/users/redsanket/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redsanket/subscriptions","organizations_url":"https://api.github.com/users/redsanket/orgs","repos_url":"https://api.github.com/users/redsanket/repos","events_url":"https://api.github.com/users/redsanket/events{/privacy}","received_events_url":"https://api.github.com/users/redsanket/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T15:26:09Z","updated_at":"2016-02-12T15:26:09Z","author_association":"NONE","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183372754/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871000","html_url":"https://github.com/apache/storm/issues/5376#issuecomment-2612871000","issue_url":"https://api.github.com/repos/apache/storm/issues/5376","id":2612871000,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzEwMDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T15:26:11Z","updated_at":"2025-01-24T16:01:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1102#issuecomment-183372754\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1102#issuecomment-183372754</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871266","html_url":"https://github.com/apache/storm/issues/5378#issuecomment-2612871266","issue_url":"https://api.github.com/repos/apache/storm/issues/5378","id":2612871266,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzEyNjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T16:49:48Z","updated_at":"2025-01-24T16:01:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user kishorvpatil opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1103\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1103</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1543\" title=\"DRPCSpout should always try to reconnect disconnected DRPCInvocationsClient\" class=\"issue-link\" data-issue-key=\"STORM-1543\"><del>STORM-1543</del></a> Always try to reconnect disconnected DRPCInvocationsClient</p>\n\n<p>    `DRPCSpout` should be able to reconnect to DRPC server.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/kishorvpatil/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/kishorvpatil/incubator-storm</a> storm1543</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1103.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1103.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1103</p>\n\n<hr />\n<p>commit 0bf82362e110ffaa916e496534b5babb23f0e666<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2016-02-12T16:48:24Z</p>\n\n<p>    Always try to reconnect disconnected DRPCInvocationsClient</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612871266/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870502","html_url":"https://github.com/apache/storm/issues/5373#issuecomment-2612870502","issue_url":"https://api.github.com/repos/apache/storm/issues/5373","id":2612870502,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA1MDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T17:27:04Z","updated_at":"2025-01-24T16:01:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\">ptgoetz</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jerrypeng\" class=\"user-hover\" rel=\"jerrypeng\">Boyang Jerry Peng</a> Just a gentle reminder that pull requests should remain open for review for at least 24 hrs. after the last code change to allow others to review. Not a big deal for this one since it was somewhat minor and had a lot of committer support.</p>\n\n<p>Also please try to remember to resolve the JIRA and set the fix version.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870502/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870504","html_url":"https://github.com/apache/storm/issues/5373#issuecomment-2612870504","issue_url":"https://api.github.com/repos/apache/storm/issues/5373","id":2612870504,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzA1MDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T17:27:41Z","updated_at":"2025-01-24T16:01:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ptgoetz\">ptgoetz</a>:</i>\n<p>Merged to master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870504/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870282","html_url":"https://github.com/apache/storm/issues/5372#issuecomment-2612870282","issue_url":"https://api.github.com/repos/apache/storm/issues/5372","id":2612870282,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzAyODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T18:01:57Z","updated_at":"2025-01-24T16:01:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=posco\">posco</a>:</i>\n<p>Okay: Soren. You're up. Chill 0.8.0 is out that depends on Kryo 3.0.3. If you can make the change, then storm is ready to go.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870282/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183436838","html_url":"https://github.com/apache/storm/pull/1055#issuecomment-183436838","issue_url":"https://api.github.com/repos/apache/storm/issues/1055","id":183436838,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQzNjgzOA==","user":{"login":"redsanket","id":8295799,"node_id":"MDQ6VXNlcjgyOTU3OTk=","avatar_url":"https://avatars.githubusercontent.com/u/8295799?v=4","gravatar_id":"","url":"https://api.github.com/users/redsanket","html_url":"https://github.com/redsanket","followers_url":"https://api.github.com/users/redsanket/followers","following_url":"https://api.github.com/users/redsanket/following{/other_user}","gists_url":"https://api.github.com/users/redsanket/gists{/gist_id}","starred_url":"https://api.github.com/users/redsanket/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redsanket/subscriptions","organizations_url":"https://api.github.com/users/redsanket/orgs","repos_url":"https://api.github.com/users/redsanket/repos","events_url":"https://api.github.com/users/redsanket/events{/privacy}","received_events_url":"https://api.github.com/users/redsanket/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T18:15:25Z","updated_at":"2016-02-12T18:15:25Z","author_association":"NONE","body":"@revans2 rebased..\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183436838/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183445741","html_url":"https://github.com/apache/storm/pull/1053#issuecomment-183445741","issue_url":"https://api.github.com/repos/apache/storm/issues/1053","id":183445741,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ0NTc0MQ==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T18:44:16Z","updated_at":"2016-02-12T18:44:51Z","author_association":"CONTRIBUTOR","body":"I upmerged and addressed @revans2 comment by adding a config that gives cgroup a margin of tolerance\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183445741/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648724","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648724","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648724,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg3MjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T18:50:02Z","updated_at":"2025-01-24T14:22:02Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52781328\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52781328</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +// boolean to indicate whether timer is active<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +// function to call when timer is killed<br/>\n    +private TimerFunc onKill;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    In other places we have translated the killFunc to be a Thread.UncaughtExceptionHandler, and I think in this case we should stay with that.  It makes things more java compatible.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648724/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648736","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648736","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648736,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg3MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T18:51:44Z","updated_at":"2025-01-24T14:22:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52781609\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52781609</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    For these timer funcs they don't take any parameters, and in other places for these we have used a Runnable for this.  Using a Runnable also makes integration with clojure very nice because a function with no arguments is already a Runnable.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648736/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648748","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648748","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648748,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg3NDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T18:53:52Z","updated_at":"2025-01-24T14:22:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52781890\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52781890</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +// boolean to indicate whether timer is active<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +// function to call when timer is killed<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +//random number generator<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +// synchronization for cancelling the timer<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +//used for synchronization<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Makes a Timer in the form of a StormTimerTask Object<br/>\n    +     * @param name name of the timer<br/>\n    +     * @param onKill function to call when timer is killed unexpectedly<br/>\n    +     * @return StormTimerTask object that was initialized<br/>\n    +     */<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Why not just make this a constructor?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648748/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648761","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648761","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648761,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg3NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T18:55:47Z","updated_at":"2025-01-24T14:22:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52782172\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52782172</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +// boolean to indicate whether timer is active<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +// function to call when timer is killed<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +//random number generator<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +// synchronization for cancelling the timer<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +//used for synchronization<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) </p>\n{\n    +this.onKill.run(t);\n    +this.setActive(false);\n    +throw new RuntimeException(t);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    this.cancelNotifier.release();<br/>\n    +}<br/>\n    +<br/>\n    +public void setOnKillFunc(TimerFunc onKill) </p>\n{\n    +    this.onKill = onKill;\n    +}\n<p>    +<br/>\n    +public void setActive(boolean flag) </p>\n{\n    +    this.active.set(flag);\n    +}\n<p>    +<br/>\n    +public boolean isActive() </p>\n{\n    +    return this.active.get();\n    +}\n<p>    +<br/>\n    +public void add(QueueEntry queueEntry) </p>\n{\n    +    this.queue.add(queueEntry);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Makes a Timer in the form of a StormTimerTask Object<br/>\n    +     * @param name name of the timer<br/>\n    +     * @param onKill function to call when timer is killed unexpectedly<br/>\n    +     * @return StormTimerTask object that was initialized<br/>\n    +     */<br/>\n    +    public static StormTimerTask mkTimer(String name, TimerFunc onKill) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Why not make this a Constructor, and hide StormTimerTask as an implementation detail?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648761/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648771","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648771","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648771,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg3NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T18:59:17Z","updated_at":"2025-01-24T14:22:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52782697\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52782697</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    `s/Comparator/Comparator<QueueEntry>/`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648771/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183452870","html_url":"https://github.com/apache/storm/pull/1053#issuecomment-183452870","issue_url":"https://api.github.com/repos/apache/storm/issues/1053","id":183452870,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ1Mjg3MA==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:07:49Z","updated_at":"2016-02-12T19:07:49Z","author_association":"NONE","body":"One comment about the new tolerance config name, other than that it looks OK.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183452870/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648801","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648801","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648801,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg4MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:24:54Z","updated_at":"2025-01-24T14:22:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52786150\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52786150</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +// boolean to indicate whether timer is active<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +// function to call when timer is killed<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +//random number generator<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +// synchronization for cancelling the timer<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +//used for synchronization<br/>\n    +private Object lock = new Object();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    The lock in the original code is used for access to the PrioirtyQueue and only covered critical sections that were single operations.  In this code we are using a PriorityBlockingQueue which is thread safe so there is no reason for this lock.</p>\n\n<p>    For some reason we also held the lock when trying to shut down the thread, which I just don't understand and we should be able to ignore.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648801/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648814","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648814","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648814,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg4MTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:31:31Z","updated_at":"2025-01-24T14:22:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52786981\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52786981</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +// boolean to indicate whether timer is active<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +// function to call when timer is killed<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +//random number generator<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +// synchronization for cancelling the timer<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I personally would rather use Thread.join instead of rewriting that same functionality using a Semaphore.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648814/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612684379","html_url":"https://github.com/apache/storm/issues/5203#issuecomment-2612684379","issue_url":"https://api.github.com/repos/apache/storm/issues/5203","id":2612684379,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2ODQzNzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:40:07Z","updated_at":"2025-01-24T14:37:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1078#discussion_r52788111\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1078#discussion_r52788111</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/Config.java &#8212;<br/>\n    @@ -231,7 +231,7 @@</p>\n\n<p> /**</p>\n<ul>\n\t<li>Whether we want to display all the resource capacity and scheduled usage on the UI page.</li>\n</ul>\n<ul class=\"alternate\" type=\"square\">\n\t<li>* We suggest to have this variable set if you are using any kind of resource-related scheduler.<br/>\n    +     * You msut have this variable set if you are using any kind of resource-related scheduler.\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    msut</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612684379/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183461680","html_url":"https://github.com/apache/storm/pull/1073#issuecomment-183461680","issue_url":"https://api.github.com/repos/apache/storm/issues/1073","id":183461680,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ2MTY4MA==","user":{"login":"redsanket","id":8295799,"node_id":"MDQ6VXNlcjgyOTU3OTk=","avatar_url":"https://avatars.githubusercontent.com/u/8295799?v=4","gravatar_id":"","url":"https://api.github.com/users/redsanket","html_url":"https://github.com/redsanket","followers_url":"https://api.github.com/users/redsanket/followers","following_url":"https://api.github.com/users/redsanket/following{/other_user}","gists_url":"https://api.github.com/users/redsanket/gists{/gist_id}","starred_url":"https://api.github.com/users/redsanket/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redsanket/subscriptions","organizations_url":"https://api.github.com/users/redsanket/orgs","repos_url":"https://api.github.com/users/redsanket/repos","events_url":"https://api.github.com/users/redsanket/events{/privacy}","received_events_url":"https://api.github.com/users/redsanket/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:40:23Z","updated_at":"2016-02-12T19:40:23Z","author_association":"NONE","body":"@abhishekagarwal87 @knusbaum please take a look at it, it must go into Utils.java\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183461680/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612867877","html_url":"https://github.com/apache/storm/issues/5358#issuecomment-2612867877","issue_url":"https://api.github.com/repos/apache/storm/issues/5358","id":2612867877,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njc4Nzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:40:24Z","updated_at":"2025-01-24T16:00:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1073#issuecomment-183461680\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1073#issuecomment-183461680</a></p>\n\n<p>    @abhishekagarwal87 @knusbaum please take a look at it, it must go into Utils.java</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612867877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183461871","html_url":"https://github.com/apache/storm/pull/1078#issuecomment-183461871","issue_url":"https://api.github.com/repos/apache/storm/issues/1078","id":183461871,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ2MTg3MQ==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:40:47Z","updated_at":"2016-02-12T19:40:47Z","author_association":"CONTRIBUTOR","body":"Minor nit, then +1 pending travis.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183461871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612684392","html_url":"https://github.com/apache/storm/issues/5203#issuecomment-2612684392","issue_url":"https://api.github.com/repos/apache/storm/issues/5203","id":2612684392,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2ODQzOTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:40:49Z","updated_at":"2025-01-24T14:37:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1078#issuecomment-183461871\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1078#issuecomment-183461871</a></p>\n\n<p>    Minor nit, then +1 pending travis.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612684392/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612867882","html_url":"https://github.com/apache/storm/issues/5358#issuecomment-2612867882","issue_url":"https://api.github.com/repos/apache/storm/issues/5358","id":2612867882,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njc4ODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:42:48Z","updated_at":"2025-01-24T16:00:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1073#issuecomment-183462361\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1073#issuecomment-183462361</a></p>\n\n<p>    Just a moment, will test it once more</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612867882/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648829","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648829","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648829,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg4Mjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:45:01Z","updated_at":"2025-01-24T14:22:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52788861\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52788861</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +// boolean to indicate whether timer is active<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +// function to call when timer is killed<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +//random number generator<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +// synchronization for cancelling the timer<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +//used for synchronization<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) {<br/>\n    +    this.queue.poll();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Crud.  There is actually a race here.  It is in the original code too  We cannot blindly do a poll and throw away the next thing on the queue, because something else may have been prioritized ahead of what we just peeked at.</p>\n\n<p>    We don't run at a high enough load that I think this is critical, but we should fix it.  Just replacing the queueEntry with the polled one is probably enough.</p>\n\n<p>    ```<br/>\n    queueEntry = queue.peek();<br/>\n    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) </p>\n{\n      queueEntry = queue.poll();\n      queueEntry.afn.run();\n    }\n<p>    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648838","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648838","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648838,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg4Mzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:46:28Z","updated_at":"2025-01-24T14:22:03Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52789091\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52789091</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +// boolean to indicate whether timer is active<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +// function to call when timer is killed<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +//random number generator<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +// synchronization for cancelling the timer<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +//used for synchronization<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) {<br/>\n    +//  If any events are scheduled, sleep until<br/>\n    +// event generation. If any recurring events<br/>\n    +// are scheduled then we will always go<br/>\n    +// through this branch, sleeping only the<br/>\n    +// exact necessary amount of time. We give<br/>\n    +// an upper bound, e.g. 1000 millis, to the<br/>\n    +// sleeping time, to limit the response time<br/>\n    +// for detecting any new event within 1 secs.<br/>\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Could you file a follow on JIRA so we can figure out a way to do a notify with simulate time, so we don't need this 1 second polling. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648838/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648850","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648850","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648850,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg4NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:47:28Z","updated_at":"2025-01-24T14:22:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#discussion_r52789245\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#discussion_r52789245</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/StormTimer.java &#8212;<br/>\n    @@ -0,0 +1,274 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm;<br/>\n    +<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.Comparator;<br/>\n    +import java.util.Random;<br/>\n    +import java.util.concurrent.PriorityBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.atomic.AtomicBoolean;<br/>\n    +<br/>\n    +/**<br/>\n    + * The timer defined in this file is very similar to java.util.Timer, except<br/>\n    + * it integrates with Storm's time simulation capabilities. This lets us test<br/>\n    + * code that does asynchronous work on the timer thread<br/>\n    + */<br/>\n    +<br/>\n    +public class StormTimer {<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormTimer.class);<br/>\n    +<br/>\n    +    public interface TimerFunc </p>\n{\n    +public void run(Object o);\n    +    }\n<p>    +<br/>\n    +    public static class QueueEntry {<br/>\n    +public final Long endTimeMs;<br/>\n    +public final TimerFunc afn;<br/>\n    +public final String id;<br/>\n    +<br/>\n    +public QueueEntry(Long endTimeMs, TimerFunc afn, String id) </p>\n{\n    +    this.endTimeMs = endTimeMs;\n    +    this.afn = afn;\n    +    this.id = id;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class StormTimerTask extends Thread {<br/>\n    +<br/>\n    +private PriorityBlockingQueue<QueueEntry> queue = new PriorityBlockingQueue<QueueEntry>(10, new Comparator() {<br/>\n    +    @Override<br/>\n    +    public int compare(Object o1, Object o2) </p>\n{\n    +return ((QueueEntry)o1).endTimeMs.intValue() - ((QueueEntry)o2).endTimeMs.intValue();\n    +    }\n<p>    +});<br/>\n    +<br/>\n    +// boolean to indicate whether timer is active<br/>\n    +private AtomicBoolean active = new AtomicBoolean(false);<br/>\n    +<br/>\n    +// function to call when timer is killed<br/>\n    +private TimerFunc onKill;<br/>\n    +<br/>\n    +//random number generator<br/>\n    +private Random random = new Random();<br/>\n    +<br/>\n    +// synchronization for cancelling the timer<br/>\n    +private Semaphore cancelNotifier = new Semaphore(0);<br/>\n    +<br/>\n    +//used for synchronization<br/>\n    +private Object lock = new Object();<br/>\n    +<br/>\n    +@Override<br/>\n    +public void run() {<br/>\n    +    while (this.active.get()) {<br/>\n    +QueueEntry queueEntry = null;<br/>\n    +try {<br/>\n    +    synchronized (this.lock) </p>\n{\n    +queueEntry = this.queue.peek();\n    +    }\n<p>    +    if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {<br/>\n    +// It is imperative to not run the function<br/>\n    +// inside the timer lock. Otherwise, it is<br/>\n    +// possible to deadlock if the fn deals with<br/>\n    +// other locks, like the submit lock.<br/>\n    +synchronized (this.lock) </p>\n{\n    +    this.queue.poll();\n    +}\n<p>    +queueEntry.afn.run(null);<br/>\n    +    } else if (queueEntry != null) </p>\n{\n    +//  If any events are scheduled, sleep until\n    +// event generation. If any recurring events\n    +// are scheduled then we will always go\n    +// through this branch, sleeping only the\n    +// exact necessary amount of time. We give\n    +// an upper bound, e.g. 1000 millis, to the\n    +// sleeping time, to limit the response time\n    +// for detecting any new event within 1 secs.\n    +Time.sleep(Math.min(1000, (queueEntry.endTimeMs - Time.currentTimeMillis())));\n    +    }\n<p> else </p>\n{\n    +// Otherwise poll to see if any new event\n    +// was scheduled. This is, in essence, the\n    +// response time for detecting any new event\n    +// schedulings when there are no scheduled\n    +// events.\n    +Time.sleep(1000);\n    +    }\n<p>    +} catch (Throwable t) {<br/>\n    +    if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class, t))) {<br/>\n    +this.onKill.run(t);<br/>\n    +this.setActive(false);<br/>\n    +throw new RuntimeException(t);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    We can just return here instead of throwing the exception that we just handled.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648850/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183464954","html_url":"https://github.com/apache/storm/pull/1098#issuecomment-183464954","issue_url":"https://api.github.com/repos/apache/storm/issues/1098","id":183464954,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ2NDk1NA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:50:05Z","updated_at":"2016-02-12T19:50:05Z","author_association":"CONTRIBUTOR","body":"I didn't realize how messed up timer.clj really was.  Besides fixing the locking issues in the code, my biggest suggestion would be to make it fully object oriented and make all of the static methods regular methods/constructors.  It is already object oriented, we just need to take it the rest of the way.  And then we can make it AutoClosable too.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183464954/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648854","html_url":"https://github.com/apache/storm/issues/5090#issuecomment-2612648854","issue_url":"https://api.github.com/repos/apache/storm/issues/5090","id":2612648854,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg4NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:50:08Z","updated_at":"2025-01-24T14:22:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1098#issuecomment-183464954\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1098#issuecomment-183464954</a></p>\n\n<p>    I didn't realize how messed up timer.clj really was.  Besides fixing the locking issues in the code, my biggest suggestion would be to make it fully object oriented and make all of the static methods regular methods/constructors.  It is already object oriented, we just need to take it the rest of the way.  And then we can make it AutoClosable too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183466471","html_url":"https://github.com/apache/storm/pull/1078#issuecomment-183466471","issue_url":"https://api.github.com/repos/apache/storm/issues/1078","id":183466471,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ2NjQ3MQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:55:10Z","updated_at":"2016-02-12T19:55:10Z","author_association":"CONTRIBUTOR","body":"This breaks windows by default, and is only needed when security is turned on.  Why don't we have the logviewer + worker_launcher change the permissions instead of using the odd, and I would say scary, feature to change the permissions.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183466471/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612684399","html_url":"https://github.com/apache/storm/issues/5203#issuecomment-2612684399","issue_url":"https://api.github.com/repos/apache/storm/issues/5203","id":2612684399,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2ODQzOTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:55:12Z","updated_at":"2025-01-24T14:37:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1078#issuecomment-183466471\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1078#issuecomment-183466471</a></p>\n\n<p>    This breaks windows by default, and is only needed when security is turned on.  Why don't we have the logviewer + worker_launcher change the permissions instead of using the odd, and I would say scary, feature to change the permissions.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612684399/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870288","html_url":"https://github.com/apache/storm/issues/5372#issuecomment-2612870288","issue_url":"https://api.github.com/repos/apache/storm/issues/5372","id":2612870288,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzAyODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:55:55Z","updated_at":"2025-01-24T16:01:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sorenmacbeth\">sorenmacbeth</a>:</i>\n<p>On it. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644369","html_url":"https://github.com/apache/storm/issues/5067#issuecomment-2612644369","issue_url":"https://api.github.com/repos/apache/storm/issues/5067","id":2612644369,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDQzNjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T19:59:31Z","updated_at":"2025-01-24T14:20:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1100#discussion_r52790876\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1100#discussion_r52790876</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/ProcessSimulator.java &#8212;<br/>\n    @@ -0,0 +1,89 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm;<br/>\n    +import org.apache.storm.daemon.Shutdownable;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +public class ProcessSimulator {<br/>\n    +    private static Logger LOG = LoggerFactory.getLogger(ProcessSimulator.class);<br/>\n    +    protected static Object lock = new Object();<br/>\n    +    protected static ConcurrentHashMap<String, Shutdownable> processMap = new ConcurrentHashMap<String, Shutdownable>();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Register a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @param shutdownable<br/>\n    +     */<br/>\n    +    public static void registerProcess(String pid, Shutdownable shutdownable) </p>\n{\n    +processMap.put(pid, shutdownable);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get a process' handle<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    protected static Shutdownable getProcessHandle(String pid) </p>\n{\n    +return processMap.get(pid);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get all process handles<br/>\n    +     * <br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static Collection<Shutdownable> getAllProcessHandles() </p>\n{\n    +return processMap.values();\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Kill a process<br/>\n    +     * <br/>\n    +     * @param pid<br/>\n    +     */<br/>\n    +    public static void killProcess(String pid) {<br/>\n    +synchronized (lock) {<br/>\n    +    LOG.info(\"Begin killing process \" + pid);<br/>\n    +    Shutdownable shutdownHandle = getProcessHandle(pid);<br/>\n    +    if (shutdownHandle != null) </p>\n{\n    +shutdownHandle.shutdown();\n    +    }\n<p>    +    processMap.remove(pid);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Here I would prefer to keep it unchanged since It would be possible that <pid, null> be wrongly put in the map by registerPorcess. Place the \"remove\" outside of the \"if\" would help and not hurt, also this translation conforms the original clj code logic.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612644369/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183469078","html_url":"https://github.com/apache/storm/pull/1073#issuecomment-183469078","issue_url":"https://api.github.com/repos/apache/storm/issues/1073","id":183469078,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ2OTA3OA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T20:03:35Z","updated_at":"2016-02-12T20:03:35Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183469078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612867888","html_url":"https://github.com/apache/storm/issues/5358#issuecomment-2612867888","issue_url":"https://api.github.com/repos/apache/storm/issues/5358","id":2612867888,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njc4ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T20:03:37Z","updated_at":"2025-01-24T16:00:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1073#issuecomment-183469078\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1073#issuecomment-183469078</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612867888/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870291","html_url":"https://github.com/apache/storm/issues/5372#issuecomment-2612870291","issue_url":"https://api.github.com/repos/apache/storm/issues/5372","id":2612870291,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzAyOTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T20:06:10Z","updated_at":"2025-01-24T16:01:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sorenmacbeth\">sorenmacbeth</a>:</i>\n<p>carbonite 1.5.0 targeting chill 0.8.0 and kryo 3.0.3 is up on clojars.org</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612870291/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647678","html_url":"https://github.com/apache/storm/issues/5085#issuecomment-2612647678","issue_url":"https://api.github.com/repos/apache/storm/issues/5085","id":2612647678,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDc2Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T20:07:09Z","updated_at":"2025-01-24T14:21:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1097\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1097</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647678/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647685","html_url":"https://github.com/apache/storm/issues/5085#issuecomment-2612647685","issue_url":"https://api.github.com/repos/apache/storm/issues/5085","id":2612647685,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDc2ODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T20:08:20Z","updated_at":"2025-01-24T14:21:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\" class=\"user-hover\" rel=\"abhishek.agarwal\">Abhishek Agarwal</a>,</p>\n\n<p>I merged this into master</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647685/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647485","html_url":"https://github.com/apache/storm/issues/5084#issuecomment-2612647485","issue_url":"https://api.github.com/repos/apache/storm/issues/5084","id":2612647485,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDc0ODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T20:08:40Z","updated_at":"2025-01-24T14:21:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>This went in with <a href=\"https://issues.apache.org/jira/browse/STORM-1248\" title=\"port  backtype.storm.messaging.loader to java\" class=\"issue-link\" data-issue-key=\"STORM-1248\"><del>STORM-1248</del></a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612647485/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653341","html_url":"https://github.com/apache/storm/issues/5109#issuecomment-2612653341","issue_url":"https://api.github.com/repos/apache/storm/issues/5109","id":2612653341,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTMzNDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T20:22:05Z","updated_at":"2025-01-24T14:24:04Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abhishek.agarwal\" class=\"user-hover\" rel=\"abhishek.agarwal\">Abhishek Agarwal</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612653341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183489364","html_url":"https://github.com/apache/storm/pull/1087#issuecomment-183489364","issue_url":"https://api.github.com/repos/apache/storm/issues/1087","id":183489364,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ4OTM2NA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T21:10:40Z","updated_at":"2016-02-12T21:10:40Z","author_association":"CONTRIBUTOR","body":"@kishorvpatil Needs upmerge.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183489364/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868912","html_url":"https://github.com/apache/storm/issues/5364#issuecomment-2612868912","issue_url":"https://api.github.com/repos/apache/storm/issues/5364","id":2612868912,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4Njg5MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T21:10:41Z","updated_at":"2025-01-24T16:00:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1087#issuecomment-183489364\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1087#issuecomment-183489364</a></p>\n\n<p>    @kishorvpatil Needs upmerge.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612868912/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/183492172","html_url":"https://github.com/apache/storm/pull/1101#issuecomment-183492172","issue_url":"https://api.github.com/repos/apache/storm/issues/1101","id":183492172,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzQ5MjE3Mg==","user":{"login":"roshannaik","id":2366541,"node_id":"MDQ6VXNlcjIzNjY1NDE=","avatar_url":"https://avatars.githubusercontent.com/u/2366541?v=4","gravatar_id":"","url":"https://api.github.com/users/roshannaik","html_url":"https://github.com/roshannaik","followers_url":"https://api.github.com/users/roshannaik/followers","following_url":"https://api.github.com/users/roshannaik/following{/other_user}","gists_url":"https://api.github.com/users/roshannaik/gists{/gist_id}","starred_url":"https://api.github.com/users/roshannaik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/roshannaik/subscriptions","organizations_url":"https://api.github.com/users/roshannaik/orgs","repos_url":"https://api.github.com/users/roshannaik/repos","events_url":"https://api.github.com/users/roshannaik/events{/privacy}","received_events_url":"https://api.github.com/users/roshannaik/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-02-12T21:21:45Z","updated_at":"2016-02-12T21:21:45Z","author_association":"CONTRIBUTOR","body":"Added it to STORM-1491.\nThe PR for 1.x branch is  https://github.com/apache/storm/pull/1105\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/183492172/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]