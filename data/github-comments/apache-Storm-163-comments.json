[{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633642","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633642","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633642,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2NDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T15:57:31Z","updated_at":"2025-01-24T14:15:14Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50273025\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50273025</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/Stream.java &#8212;<br/>\n    @@ -57,6 +57,23 @@<br/>\n     import org.apache.storm.trident.state.StateUpdater;<br/>\n     import org.apache.storm.trident.util.TridentUtils;</p>\n\n<p>    +/**<br/>\n    + * A Stream represents the core data model in Trident, and can be thought of as a \"stream\" of tuples that are processed<br/>\n    + * as a series of small batches. A stream is partitioned accross the nodes in the in the cluster, and operations are<br/>\n    + * applied to a stream in parallel accross each partition.<br/>\n    + *<br/>\n    + * There are five types of operations that can be performed on streams in Trident<br/>\n    + *<br/>\n    + * 1. *<b>Partiton-Local Operations</b>* - Operations that are applied locally to each partition and do not involve network<br/>\n    + * transfer<br/>\n    + * 2. *<b>Repartitioning Operations</b>* - Operations that that change how tuples are partitioned across tasks(thus causing<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    `Operations that <b>that</b> change` extra that</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643533","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643533","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643533,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1MzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:03:44Z","updated_at":"2025-01-24T14:19:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user zhuoliu opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1227\" title=\"port backtype.storm.config to java\" class=\"issue-link\" data-issue-key=\"STORM-1227\"><del>STORM-1227</del></a> port org.apache.storm.config to java</p>\n\n<p>    1. Port \"org.apache.storm.config\" to java at \"org.apache.storm.config.ConfigUtils\".<br/>\n    2. Update all the callings to the config functions.<br/>\n    3. Mock the java static functions for test purposes.<br/>\n    4. Address issues in unit and manual tests.<br/>\n    5. Comment out most functions in config.clj except a few: cluster-mode (used in multimethod),  ALL-CONFIGS, clojure-config-name.</p>\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/zhuoliu/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/zhuoliu/storm</a> 1227</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1030</p>\n\n<hr />\n<p>commit 6ce984128fd92e42ae7018d6b27be753e7dfa30d<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-13T19:55:47Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1227\" title=\"port backtype.storm.config to java\" class=\"issue-link\" data-issue-key=\"STORM-1227\"><del>STORM-1227</del></a> Init commit for config.clj function translation to java</p>\n\n<p>commit 0b90a63d5ac7075524e9fabc7a49bda47b41b946<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-13T22:45:39Z</p>\n\n<p>    To continue update callers to read-storm-config</p>\n\n<p>commit cb4cdf6910b9bc8bc9077d5ad0750707d14e5cb2<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-14T19:44:12Z</p>\n\n<p>    mock read-storm-config in drpc_test</p>\n\n<p>commit f350f1ae9aaa44ea8f931c5e48eef5051d79770d<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-14T20:34:43Z</p>\n\n<p>    Update all the callings to read-storm-config and add the import for ConfigUtils</p>\n\n<p>commit 3d2796d2fbd7ae182d7414db985cf7de167fcd82<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-14T21:25:47Z</p>\n\n<p>    Update callings to supervisor-isupervisor-dir</p>\n\n<p>commit 635488db5e0670f1e4348fab5e3fd7d3970c5e63<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-15T18:50:00Z</p>\n\n<p>    Updated to callings for supervisor-stormjar-path</p>\n\n<p>commit 99189a6016d24aff485b9206323ad68988d32be1<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-15T19:10:20Z</p>\n\n<p>    Updated to supervisor-storm-resources-path</p>\n\n<p>commit 310128d9469f2151851d4e44710593b6ebcbac59<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-15T19:33:52Z</p>\n\n<p>    updated to nimbus-topo-history-state</p>\n\n<p>commit ba70bf1cfe72aeabec104d8ea664f087b719a08c<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-15T20:28:04Z</p>\n\n<p>    Updated to read-supervisor-storm-conf</p>\n\n<p>commit 0dbdcf39bf411a4ee5abac5e740c07e8813ea025<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-17T22:37:35Z</p>\n\n<p>    Updates workerRoot, worker user, path, state, set. To do a few left.</p>\n\n<p>commit 7c3fec6502ab23855a0b31dbb93debe7e22e73ff<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-19T17:23:26Z</p>\n\n<p>    Updated callings before get-topo-logs-users</p>\n\n<p>commit 13ab1515c503ad3eefe10871b5972d4bce60fde6<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-19T17:38:05Z</p>\n\n<p>    Updated all callings</p>\n\n<p>commit fd37de911ad73cf1a6f0d5500d0c1532a7ece209<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-19T22:54:10Z</p>\n\n<p>    Updated for all the rest that we can do</p>\n\n<p>commit b4847b76f0222344a51987fce1c8180616a4c279<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-19T23:33:51Z</p>\n\n<p>    Manual test</p>\n\n<p>commit b7374d2bb4cf49111936ec1cbd2a4f4f22661100<br/>\nAuthor: zhuol <zhuol@yahoo-inc.com><br/>\nDate:   2016-01-20T15:54:30Z</p>\n\n<p>    Cleanup the comments</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643533/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633644","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633644","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633644,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2NDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:03:56Z","updated_at":"2025-01-24T14:15:14Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50273965\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50273965</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/operation/Assembly.java &#8212;<br/>\n    @@ -20,6 +20,26 @@<br/>\n     import org.apache.storm.trident.Stream;</p>\n\n\n<p>    +/**<br/>\n    + * The `Assembly` interface provides a means to encapsulate logic applied to a </p>\n{@link storm.trident.Stream}\n<p>.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This one too should be org.apache....</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633644/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633649","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633649","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633649,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2NDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:15:50Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50275791\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50275791</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/operation/Filter.java &#8212;<br/>\n    @@ -19,6 +19,30 @@</p>\n\n<p>     import org.apache.storm.trident.tuple.TridentTuple;</p>\n\n<p>    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Filters take in a tuple as input and decide whether or not to keep that tuple or not.<br/>\n    + *<br/>\n    + * If the `isKeep()` method of a Filter returns `false` for a tuple, that tuple will be filtered out of the Stream<br/>\n    + *<br/>\n    + *<br/>\n    + * ### Configuration<br/>\n    + * If your `Filter` implementation has configuration requirements, you will typically want to extend<br/>\n    + * </p>\n{@link storm.trident.operation.BaseFilter}\n<p> and override the<br/>\n    + * </p>\n{@link storm.trident.operation.Operation#prepare(Map, TridentOperationContext)}\n<p> method to perform your custom<br/>\n    + * initialization.<br/>\n    +<br/>\n    + *<br/>\n    + * @see storm.trident.Stream<br/>\n    + */<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    all the links here need to be org.apache....</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633649/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633653","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633653","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633653,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:20:15Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50276631\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50276631</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/operation/Function.java &#8212;<br/>\n    @@ -19,6 +19,73 @@</p>\n\n<p>     import org.apache.storm.trident.tuple.TridentTuple;</p>\n\n<p>    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * A function takes in a set of input fields and emits zero or more tuples as output. The fields of the output tuple<br/>\n    + * are appended to the original input tuple in the stream. If a function emits no tuples, the original input tuple is<br/>\n    + * filtered out. Otherwise, the input tuple is duplicated for each output tuple.<br/>\n    + *<br/>\n    + * For example, if you have the following function:<br/>\n    + *<br/>\n    + * ```java<br/>\n    + * public class MyFunction extends BaseFunction {<br/>\n    + *      public void execute(TridentTuple tuple, TridentCollector collector) {<br/>\n    + *      for(int i=0; i < tuple.getInteger(0); i++) </p>\n{\n    + *  collector.emit(new Values(i));\n    + *      }\n<p>    + *    }<br/>\n    + * }<br/>\n    + *<br/>\n    + * ```<br/>\n    + *<br/>\n    + * Now suppose you have a stream in the variable `mystream` with the fields `<span class=\"error\">&#91;\"a\", \"b\", \"c\"&#93;</span>` with the following tuples:<br/>\n    + *<br/>\n    + * ```<br/>\n    + * <span class=\"error\">&#91;1, 2, 3&#93;</span><br/>\n    + * <span class=\"error\">&#91;4, 1, 6&#93;</span><br/>\n    + * <span class=\"error\">&#91;3, 0, 8&#93;</span><br/>\n    + * ```<br/>\n    + * If you had the following code in your topology definition:<br/>\n    + *<br/>\n    + * ```java<br/>\n    + * mystream.each(new Fields(\"b\"), new MyFunction(), new Fields(\"d\")))<br/>\n    + * ```<br/>\n    + *<br/>\n    + * The resulting tuples would have the fields `<span class=\"error\">&#91;\"a\", \"b\", \"c\", \"d\"&#93;</span>` and look like this:<br/>\n    + *<br/>\n    + * ```<br/>\n    + * <span class=\"error\">&#91;1, 2, 3, 0&#93;</span><br/>\n    + * <span class=\"error\">&#91;1, 2, 3, 1&#93;</span><br/>\n    + * <span class=\"error\">&#91;4, 1, 6, 0&#93;</span><br/>\n    + * ```<br/>\n    + *<br/>\n    + * In this case, the parameter `new Fields(\"b\")` tells Trident that you would like to select the field \"b\" as input<br/>\n    + * to the function, and that will be the only field in the Tuple passed to the `execute()` method. The value of \"b\" in<br/>\n    + * the first tuple (2) causes the for loop to execute twice, so 2 tuples are emitted. similarly the second tuple causes<br/>\n    + * one tuple to be emitted. For the third tuple, the value of 0 causes the `for` loop to be skipped, so nothing is<br/>\n    + * emitted and the incoming tuple is filtered out of the stream.<br/>\n    + *<br/>\n    + * ### Configuration<br/>\n    + * If your `Function` implementation has configuration requirements, you will typically want to extend<br/>\n    + * </p>\n{@link storm.trident.operation.BaseFunction}\n<p> and override the<br/>\n    + * </p>\n{@link storm.trident.operation.Operation#prepare(Map, TridentOperationContext)}\n<p> method to perform your custom<br/>\n    + * initialization.<br/>\n    + *<br/>\n    + * ### Performance Considerations<br/>\n    + * Because Trident Functions perform logic on individual tuples &#8211; as opposed to batches &#8211; it is advisable<br/>\n    + * to avoid expensive operations such as database operations in a Function, if possible. For data store interactions<br/>\n    + * it is better to use a </p>\n{@link storm.trident.state.State}\n<p> or </p>\n{@link storm.trident.state.QueryFunction}\n<p> implementation<br/>\n    + * since Trident states operate on batch partitions and can perform bulk updates to a database.<br/>\n    + *<br/>\n    + *<br/>\n    + */<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    org.apache in the links here too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633653/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173260026","html_url":"https://github.com/apache/storm/pull/994#issuecomment-173260026","issue_url":"https://api.github.com/repos/apache/storm/issues/994","id":173260026,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2MDAyNg==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:25:01Z","updated_at":"2016-01-20T16:25:01Z","author_association":"CONTRIBUTOR","body":"@revans2 I see what you are saying. Will document this incompatibility.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173260026/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697331","html_url":"https://github.com/apache/storm/issues/5284#issuecomment-2612697331","issue_url":"https://api.github.com/repos/apache/storm/issues/5284","id":2612697331,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTczMzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:25:02Z","updated_at":"2025-01-24T14:43:08Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/994#issuecomment-173260026\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/994#issuecomment-173260026</a></p>\n\n<p>    @revans2 I see what you are saying. Will document this incompatibility.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697331/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633658","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633658","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633658,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2NTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:25:51Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50277552\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50277552</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/operation/Operation.java &#8212;<br/>\n    @@ -20,7 +20,26 @@<br/>\n     import java.io.Serializable;<br/>\n     import java.util.Map;</p>\n\n<p>    +/**<br/>\n    + * Parent interface for Trident `Filter`s and `Function`s.<br/>\n    + *<br/>\n    + * `Operation` defines two lifecycle methods for Trident components. The `prepare()` method is called once when the<br/>\n    + * `Operation` is first initialized. The `cleanup()` method is called in local mode when the local cluster is<br/>\n    + * being shut down.<br/>\n    + */<br/>\n     public interface Operation extends Serializable {<br/>\n    +    /**<br/>\n    +     * Called when the `Operation` is first initialized.<br/>\n    +     * @param conf the Storm configuration map<br/>\n    +     * @param context the operation context which provides information such as the number of partitions in the stream,<br/>\n    +     *and the current partition index. It also provides methods for registering operation-specific<br/>\n    +     *metrics.<br/>\n    +     * @see storm.trident.operation.TridentOperationContext<br/>\n    +     */<br/>\n void prepare(Map conf, TridentOperationContext context);<br/>\n    +<br/>\n    +    /**<br/>\n    +     * When running in local mode, called when the local cluster is being shut down.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Is this true for only local mode?  We made some changes so it should work in distributed mode, but it is best effort, and not guaranteed to happen.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633658/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633662","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633662","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633662,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2NjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:26:59Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50277718\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50277718</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/operation/TridentCollector.java &#8212;<br/>\n    @@ -20,7 +20,33 @@<br/>\n     import java.util.List;</p>\n\n\n<p>    +/**<br/>\n    + * Interface for publishing tuples to a stream and reporting exceptions (to be displayed in Storm UI).<br/>\n    + *<br/>\n    + * Trident components that have the ability to emit tuples to a stream are passed an instance of this<br/>\n    + * interface.<br/>\n    + *<br/>\n    + * For example, to emit a new tuple to a stream, you would do something like the following:<br/>\n    + *<br/>\n    + * ```java<br/>\n    + *      collector.emit(new Values(\"a\", \"b\", \"c\"));<br/>\n    + * ```<br/>\n    + * @see storm.trident.Stream<br/>\n    + * @see backtype.storm.tuple.Values<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Links need org.apache here too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633662/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633666","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633666","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633666,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2NjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:30:35Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50278349\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50278349</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/operation/TridentCollector.java &#8212;<br/>\n    @@ -20,7 +20,33 @@<br/>\n     import java.util.List;</p>\n\n\n<p>    +/**<br/>\n    + * Interface for publishing tuples to a stream and reporting exceptions (to be displayed in Storm UI).<br/>\n    + *<br/>\n    + * Trident components that have the ability to emit tuples to a stream are passed an instance of this<br/>\n    + * interface.<br/>\n    + *<br/>\n    + * For example, to emit a new tuple to a stream, you would do something like the following:<br/>\n    + *<br/>\n    + * ```java<br/>\n    + *      collector.emit(new Values(\"a\", \"b\", \"c\"));<br/>\n    + * ```<br/>\n    + * @see storm.trident.Stream<br/>\n    + * @see backtype.storm.tuple.Values<br/>\n    + */<br/>\n     public interface TridentCollector {<br/>\n    +    /**<br/>\n    +     * Emits a tuple to a Stream<br/>\n    +     * @param values a list of values of which the tuple will be composed<br/>\n    +     */<br/>\n void emit(List<Object> values);<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Reports an error. The corresponding stack trace will be visible in the Storm UI.<br/>\n    +     *<br/>\n    +     * Note that calling this method does not alter the processing of a batch. To explicitly fail a batch and trigger<br/>\n    +     * a replay, components should throw </p>\n{@link backtype.storm.topology.FailedException}\n<p>.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Link here too</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633666/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633672","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633672","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633672,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:31:14Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50278465\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50278465</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/operation/builtin/FirstN.java &#8212;<br/>\n    @@ -28,6 +28,11 @@<br/>\n     import org.apache.storm.trident.tuple.TridentTuple;</p>\n\n\n<p>    +/**<br/>\n    + *<br/>\n    + * An </p>\n{@link storm.trident.operation.Assembly}\n<p> implementation<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    org.apache.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633672/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263005","html_url":"https://github.com/apache/storm/pull/1029#issuecomment-173263005","issue_url":"https://api.github.com/repos/apache/storm/issues/1029","id":173263005,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2MzAwNQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:32:37Z","updated_at":"2016-01-20T16:32:37Z","author_association":"CONTRIBUTOR","body":"Looks good over all.  Just a few comments about org.apache.storm instead or backtype.storm and storm.trident\n\nAlso one question about cleanup that I think needs to be updated.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263005/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633684","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633684","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633684,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:32:39Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#issuecomment-173263005\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#issuecomment-173263005</a></p>\n\n<p>    Looks good over all.  Just a few comments about org.apache.storm instead or backtype.storm and storm.trident</p>\n\n<p>    Also one question about cleanup that I think needs to be updated.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633684/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263339","html_url":"https://github.com/apache/storm/pull/1027#issuecomment-173263339","issue_url":"https://api.github.com/repos/apache/storm/issues/1027","id":173263339,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2MzMzOQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:33:45Z","updated_at":"2016-01-20T16:33:45Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263339/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703518","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703518","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703518,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:33:46Z","updated_at":"2025-01-24T14:45:43Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1027#issuecomment-173263339\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1027#issuecomment-173263339</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703518/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263458","html_url":"https://github.com/apache/storm/pull/1028#issuecomment-173263458","issue_url":"https://api.github.com/repos/apache/storm/issues/1028","id":173263458,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2MzQ1OA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:34:05Z","updated_at":"2016-01-20T16:34:05Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263458/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703527","html_url":"https://github.com/apache/storm/issues/5320#issuecomment-2612703527","issue_url":"https://api.github.com/repos/apache/storm/issues/5320","id":2612703527,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDM1Mjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:34:06Z","updated_at":"2025-01-24T14:45:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1028#issuecomment-173263458\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1028#issuecomment-173263458</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703527/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263700","html_url":"https://github.com/apache/storm/pull/1025#issuecomment-173263700","issue_url":"https://api.github.com/repos/apache/storm/issues/1025","id":173263700,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2MzcwMA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:34:49Z","updated_at":"2016-01-20T16:34:49Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263700/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703355","html_url":"https://github.com/apache/storm/issues/5319#issuecomment-2612703355","issue_url":"https://api.github.com/repos/apache/storm/issues/5319","id":2612703355,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMzNTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:34:51Z","updated_at":"2025-01-24T14:45:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1025#issuecomment-173263700\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1025#issuecomment-173263700</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703355/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263989","html_url":"https://github.com/apache/storm/pull/1022#issuecomment-173263989","issue_url":"https://api.github.com/repos/apache/storm/issues/1022","id":173263989,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2Mzk4OQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:35:47Z","updated_at":"2016-01-20T16:35:47Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173263989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702475","html_url":"https://github.com/apache/storm/issues/5315#issuecomment-2612702475","issue_url":"https://api.github.com/repos/apache/storm/issues/5315","id":2612702475,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI0NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:35:48Z","updated_at":"2025-01-24T14:45:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1022#issuecomment-173263989\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1022#issuecomment-173263989</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702475/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173264377","html_url":"https://github.com/apache/storm/pull/1015#issuecomment-173264377","issue_url":"https://api.github.com/repos/apache/storm/issues/1015","id":173264377,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2NDM3Nw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:37:02Z","updated_at":"2016-01-20T16:37:02Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173264377/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701525","html_url":"https://github.com/apache/storm/issues/5308#issuecomment-2612701525","issue_url":"https://api.github.com/repos/apache/storm/issues/5308","id":2612701525,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE1MjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:37:04Z","updated_at":"2025-01-24T14:44:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1015#issuecomment-173264377\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1015#issuecomment-173264377</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701525/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173266000","html_url":"https://github.com/apache/storm/pull/1014#issuecomment-173266000","issue_url":"https://api.github.com/repos/apache/storm/issues/1014","id":173266000,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2NjAwMA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:39:51Z","updated_at":"2016-01-20T16:39:51Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173266000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701417","html_url":"https://github.com/apache/storm/issues/5307#issuecomment-2612701417","issue_url":"https://api.github.com/repos/apache/storm/issues/5307","id":2612701417,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE0MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:39:54Z","updated_at":"2025-01-24T14:44:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1014#issuecomment-173266000\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1014#issuecomment-173266000</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697865","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697865","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697865,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc4NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:41:50Z","updated_at":"2025-01-24T14:43:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#discussion_r50280146\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#discussion_r50280146</a></p>\n\n<p>    &#8212; Diff: docs/documentation/ui-rest-api.md &#8212;<br/>\n    @@ -548,6 +548,10 @@ Response fields:</p>\n<div class='table-wrap'>\n<table class='confluenceTable'><tbody>\n<tr>\n<td class='confluenceTd'>boltStats.processLatency</td>\n<td class='confluenceTd'> String (double value returned in String format)  </td>\n<td class='confluenceTd'>Average time of the bolt to ack a message after it was received</td>\n</tr>\n<tr>\n<td class='confluenceTd'>boltStats.acked</td>\n<td class='confluenceTd'> Long </td>\n<td class='confluenceTd'>Number of messages acked</td>\n</tr>\n<tr>\n<td class='confluenceTd'>boltStats.failed</td>\n<td class='confluenceTd'> Long </td>\n<td class='confluenceTd'>Number of messages failed</td>\n</tr>\n</tbody></table>\n</div>\n\n<p>    +|profilingAndDebuggingCapable| Boolean |true if there is support for Profiling and Debugging Actions|<br/>\n    +|profilActionEnabled| Boolean |true if worker profiling (Java Flight Recorder) is enabled|<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Should this be profil*<b>e</b>*ActionEnabled?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697865/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697868","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697868","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697868,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc4Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:44:39Z","updated_at":"2025-01-24T14:43:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#discussion_r50280610\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#discussion_r50280610</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/ui/core.clj &#8212;<br/>\n    @@ -863,6 +855,7 @@<br/>\n   (.get_eventlog_host comp-page-info)<br/>\n   (.get_eventlog_port comp-page-info)<br/>\n   secure?)<br/>\n    +       \"profilingAndDebuggingCapable\" (not on-windows?)<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we file a follow on JIRA to make this a bit cleaner?  Perhaps a script for different environments that we can check at run time if the script is there?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697874","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697874","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697874,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc4NzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:46:52Z","updated_at":"2025-01-24T14:43:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#discussion_r50280960\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#discussion_r50280960</a></p>\n\n<p>    &#8212; Diff: docs/documentation/ui-rest-api.md &#8212;<br/>\n    @@ -548,6 +548,10 @@ Response fields:</p>\n<div class='table-wrap'>\n<table class='confluenceTable'><tbody>\n<tr>\n<td class='confluenceTd'>boltStats.processLatency</td>\n<td class='confluenceTd'> String (double value returned in String format)  </td>\n<td class='confluenceTd'>Average time of the bolt to ack a message after it was received</td>\n</tr>\n<tr>\n<td class='confluenceTd'>boltStats.acked</td>\n<td class='confluenceTd'> Long </td>\n<td class='confluenceTd'>Number of messages acked</td>\n</tr>\n<tr>\n<td class='confluenceTd'>boltStats.failed</td>\n<td class='confluenceTd'> Long </td>\n<td class='confluenceTd'>Number of messages failed</td>\n</tr>\n</tbody></table>\n</div>\n\n<p>    +|profilingAndDebuggingCapable| Boolean |true if there is support for Profiling and Debugging Actions|<br/>\n    +|profilActionEnabled| Boolean |true if worker profiling (Java Flight Recorder) is enabled|<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Good catch! Will fix it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697874/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173268259","html_url":"https://github.com/apache/storm/pull/1012#issuecomment-173268259","issue_url":"https://api.github.com/repos/apache/storm/issues/1012","id":173268259,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2ODI1OQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:46:59Z","updated_at":"2016-01-20T16:46:59Z","author_association":"CONTRIBUTOR","body":"It looks like this needs to be upmerged, because the docs are no longer on master, so the REST API docs needs a separate pull request :(\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173268259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697878","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697878","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697878,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc4Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:47:01Z","updated_at":"2025-01-24T14:43:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#issuecomment-173268259\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#issuecomment-173268259</a></p>\n\n<p>    It looks like this needs to be upmerged, because the docs are no longer on master, so the REST API docs needs a separate pull request <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/sad.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697887","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697887","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697887,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc4ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:47:49Z","updated_at":"2025-01-24T14:43:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#discussion_r50281086\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#discussion_r50281086</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/ui/core.clj &#8212;<br/>\n    @@ -863,6 +855,7 @@<br/>\n   (.get_eventlog_host comp-page-info)<br/>\n   (.get_eventlog_port comp-page-info)<br/>\n   secure?)<br/>\n    +       \"profilingAndDebuggingCapable\" (not on-windows?)<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Sure.  We are using this var in several places, and I did not want to change all of them to fix this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697887/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173268746","html_url":"https://github.com/apache/storm/pull/1012#issuecomment-173268746","issue_url":"https://api.github.com/repos/apache/storm/issues/1012","id":173268746,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI2ODc0Ng==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:48:28Z","updated_at":"2016-01-20T16:48:28Z","author_association":"NONE","body":"> It looks like this needs to be upmerged, because the docs are no longer on master, so the REST API docs needs a separate pull request :(\n\nOK, I did not realize that.  I'll do so.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173268746/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697895","html_url":"https://github.com/apache/storm/issues/5287#issuecomment-2612697895","issue_url":"https://api.github.com/repos/apache/storm/issues/5287","id":2612697895,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2OTc4OTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T16:48:29Z","updated_at":"2025-01-24T14:43:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1012#issuecomment-173268746\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1012#issuecomment-173268746</a></p>\n\n<p>    > It looks like this needs to be upmerged, because the docs are no longer on master, so the REST API docs needs a separate pull request <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/sad.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>\n\n<p>    OK, I did not realize that.  I'll do so.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612697895/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643536","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643536","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643536,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:07:15Z","updated_at":"2025-01-24T14:19:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50284210\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50284210</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -18,14 +18,14 @@<br/>\n       (:import <span class=\"error\">&#91;java.io FileReader File IOException&#93;</span><br/>\n<span class=\"error\">&#91;org.apache.storm.generated StormTopology&#93;</span>)<br/>\n       (:import <span class=\"error\">&#91;org.apache.storm Config&#93;</span>)</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(:import <span class=\"error\">&#91;org.apache.storm.utils Utils LocalState&#93;</span>)<br/>\n    +  (:import <span class=\"error\">&#91;org.apache.storm.utils Utils LocalState ConfigUtils&#93;</span>)<br/>\n       (:import <span class=\"error\">&#91;org.apache.storm.validation ConfigValidation&#93;</span>)<br/>\n       (:import <span class=\"error\">&#91;org.apache.commons.io FileUtils&#93;</span>)<br/>\n       (:require [clojure <span class=\"error\">&#91;string :as str&#93;</span>])<br/>\n       (:use <span class=\"error\">&#91;org.apache.storm log util&#93;</span>))</li>\n</ul>\n\n\n<p>    -(def RESOURCES-SUBDIR \"resources\")<br/>\n    -(def NIMBUS-DO-NOT-REASSIGN \"NIMBUS-DO-NOT-REASSIGN\")<br/>\n    +;; (def RESOURCES-SUBDIR \"resources\")<br/>\n    +;; (def NIMBUS-DO-NOT-REASSIGN \"NIMBUS-DO-NOT-REASSIGN\")<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    If these are not used we should delete them, not comment them out.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643536/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643539","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643539","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643539,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:08:17Z","updated_at":"2025-01-24T14:19:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50284391\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50284391</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -41,11 +41,30 @@<br/>\n       (dofor <span class=\"error\">&#91;f (seq (.getFields Config))&#93;</span><br/>\n      (.get f nil)))</p>\n\n<p>    -<br/>\n    +;; TODO this function and its callings will be replace when nimbus and supervisor move to Java<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Don't need the TODO.  Please file a separate JIRA to remove the code when it is no longer needed.  You can leave the comment, but preferably with the JIRA number instead.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643539/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643543","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643543","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643543,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:09:48Z","updated_at":"2025-01-24T14:19:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50284634\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50284634</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -41,11 +41,30 @@<br/>\n       (dofor <span class=\"error\">&#91;f (seq (.getFields Config))&#93;</span><br/>\n      (.get f nil)))</p>\n\n<p>    -<br/>\n    +;; TODO this function and its callings will be replace when nimbus and supervisor move to Java<br/>\n     (defn cluster-mode<br/>\n       <span class=\"error\">&#91;conf & args&#93;</span><br/>\n       (keyword (conf STORM-CLUSTER-MODE)))</p>\n\n<p>    +(defn sampling-rate<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (->> (conf TOPOLOGY-STATS-SAMPLE-RATE)<br/>\n    +    (/ 1)<br/>\n    +    int))<br/>\n    +<br/>\n    +;; TODO this function together with sampling-rate are to be replaced with Java version when util.clj is in<br/>\n    +(defn mk-stats-sampler<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (even-sampler (sampling-rate conf)))<br/>\n    +<br/>\n    +;; TODO this function is to be replaced with Java version when util.clj is in<br/>\n    +(defn read-default-config<br/>\n    +  []<br/>\n    +  (clojurify-structure (Utils/readDefaultConfig)))<br/>\n    +<br/>\n    +<br/>\n    +<br/>\n    +(comment<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Why is all of this code commented out and not deleted?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643543/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643546","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643546","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643546,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1NDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:10:01Z","updated_at":"2025-01-24T14:19:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50284660\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50284660</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -41,11 +41,30 @@<br/>\n       (dofor <span class=\"error\">&#91;f (seq (.getFields Config))&#93;</span><br/>\n      (.get f nil)))</p>\n\n<p>    -<br/>\n    +;; TODO this function and its callings will be replace when nimbus and supervisor move to Java<br/>\n     (defn cluster-mode<br/>\n       <span class=\"error\">&#91;conf & args&#93;</span><br/>\n       (keyword (conf STORM-CLUSTER-MODE)))</p>\n\n<p>    +(defn sampling-rate<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (->> (conf TOPOLOGY-STATS-SAMPLE-RATE)<br/>\n    +    (/ 1)<br/>\n    +    int))<br/>\n    +<br/>\n    +;; TODO this function together with sampling-rate are to be replaced with Java version when util.clj is in<br/>\n    +(defn mk-stats-sampler<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (even-sampler (sampling-rate conf)))<br/>\n    +<br/>\n    +;; TODO this function is to be replaced with Java version when util.clj is in<br/>\n    +(defn read-default-config<br/>\n    +  []<br/>\n    +  (clojurify-structure (Utils/readDefaultConfig)))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Are these functions still needed?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643546/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643550","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643550","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643550,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:13:45Z","updated_at":"2025-01-24T14:19:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50285565\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50285565</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Exceptions in static code blocks are really confusing to debug.  I personally would prefer to see a static function to get the log dir, that caches the saved result. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643550/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643554","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643554","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643554,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:14:20Z","updated_at":"2025-01-24T14:19:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50285640\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50285640</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +return mode;<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Extra line</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643554/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701421","html_url":"https://github.com/apache/storm/issues/5307#issuecomment-2612701421","issue_url":"https://api.github.com/repos/apache/storm/issues/5307","id":2612701421,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE0MjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:15:43Z","updated_at":"2025-01-24T14:44:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1014\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1014</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701424","html_url":"https://github.com/apache/storm/issues/5307#issuecomment-2612701424","issue_url":"https://api.github.com/repos/apache/storm/issues/5307","id":2612701424,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE0MjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:16:24Z","updated_at":"2025-01-24T14:44:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zhuoliu\" class=\"user-hover\" rel=\"zhuoliu\">Zhuo Liu</a>,</p>\n\n<p>I merged this into master and 1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701424/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173280863","html_url":"https://github.com/apache/storm/pull/1015#issuecomment-173280863","issue_url":"https://api.github.com/repos/apache/storm/issues/1015","id":173280863,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI4MDg2Mw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:18:07Z","updated_at":"2016-01-20T17:18:07Z","author_association":"CONTRIBUTOR","body":"@zhuoliu I see from the JIRA that you have targeted this to 1.0.  It is a really small change so I am inclined to merge it in, but I would like to hear others opinions before doing so.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173280863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701528","html_url":"https://github.com/apache/storm/issues/5308#issuecomment-2612701528","issue_url":"https://api.github.com/repos/apache/storm/issues/5308","id":2612701528,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE1Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:18:08Z","updated_at":"2025-01-24T14:44:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1015#issuecomment-173280863\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1015#issuecomment-173280863</a></p>\n\n<p>    @zhuoliu I see from the JIRA that you have targeted this to 1.0.  It is a really small change so I am inclined to merge it in, but I would like to hear others opinions before doing so.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701528/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702480","html_url":"https://github.com/apache/storm/issues/5315#issuecomment-2612702480","issue_url":"https://api.github.com/repos/apache/storm/issues/5315","id":2612702480,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI0ODA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:20:42Z","updated_at":"2025-01-24T14:45:18Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1022\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1022</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702480/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702487","html_url":"https://github.com/apache/storm/issues/5315#issuecomment-2612702487","issue_url":"https://api.github.com/repos/apache/storm/issues/5315","id":2612702487,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI0ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:21:21Z","updated_at":"2025-01-24T14:45:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vesense\" class=\"user-hover\" rel=\"vesense\">Xin Wang</a>,</p>\n\n<p>I merged this into asf-site</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702487/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173284929","html_url":"https://github.com/apache/storm/pull/1015#issuecomment-173284929","issue_url":"https://api.github.com/repos/apache/storm/issues/1015","id":173284929,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI4NDkyOQ==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:21:59Z","updated_at":"2016-01-20T17:21:59Z","author_association":"NONE","body":"Sure. Merging it in directly makes sense.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173284929/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701531","html_url":"https://github.com/apache/storm/issues/5308#issuecomment-2612701531","issue_url":"https://api.github.com/repos/apache/storm/issues/5308","id":2612701531,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE1MzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:22:00Z","updated_at":"2025-01-24T14:44:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1015#issuecomment-173284929\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1015#issuecomment-173284929</a></p>\n\n<p>    Sure. Merging it in directly makes sense.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701531/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643560","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643560","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643560,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1NjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:22:30Z","updated_at":"2025-01-24T14:19:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50286960\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50286960</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -18,14 +18,14 @@<br/>\n       (:import <span class=\"error\">&#91;java.io FileReader File IOException&#93;</span><br/>\n<span class=\"error\">&#91;org.apache.storm.generated StormTopology&#93;</span>)<br/>\n       (:import <span class=\"error\">&#91;org.apache.storm Config&#93;</span>)</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(:import <span class=\"error\">&#91;org.apache.storm.utils Utils LocalState&#93;</span>)<br/>\n    +  (:import <span class=\"error\">&#91;org.apache.storm.utils Utils LocalState ConfigUtils&#93;</span>)<br/>\n       (:import <span class=\"error\">&#91;org.apache.storm.validation ConfigValidation&#93;</span>)<br/>\n       (:import <span class=\"error\">&#91;org.apache.commons.io FileUtils&#93;</span>)<br/>\n       (:require [clojure <span class=\"error\">&#91;string :as str&#93;</span>])<br/>\n       (:use <span class=\"error\">&#91;org.apache.storm log util&#93;</span>))</li>\n</ul>\n\n\n<p>    -(def RESOURCES-SUBDIR \"resources\")<br/>\n    -(def NIMBUS-DO-NOT-REASSIGN \"NIMBUS-DO-NOT-REASSIGN\")<br/>\n    +;; (def RESOURCES-SUBDIR \"resources\")<br/>\n    +;; (def NIMBUS-DO-NOT-REASSIGN \"NIMBUS-DO-NOT-REASSIGN\")<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Will delete.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643560/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643565","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643565","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643565,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:22:32Z","updated_at":"2025-01-24T14:19:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50287040\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50287040</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -41,11 +41,30 @@<br/>\n       (dofor <span class=\"error\">&#91;f (seq (.getFields Config))&#93;</span><br/>\n      (.get f nil)))</p>\n\n<p>    -<br/>\n    +;; TODO this function and its callings will be replace when nimbus and supervisor move to Java<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Will address.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643565/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173285410","html_url":"https://github.com/apache/storm/pull/986#issuecomment-173285410","issue_url":"https://api.github.com/repos/apache/storm/issues/986","id":173285410,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI4NTQxMA==","user":{"login":"ooasis","id":10720176,"node_id":"MDQ6VXNlcjEwNzIwMTc2","avatar_url":"https://avatars.githubusercontent.com/u/10720176?v=4","gravatar_id":"","url":"https://api.github.com/users/ooasis","html_url":"https://github.com/ooasis","followers_url":"https://api.github.com/users/ooasis/followers","following_url":"https://api.github.com/users/ooasis/following{/other_user}","gists_url":"https://api.github.com/users/ooasis/gists{/gist_id}","starred_url":"https://api.github.com/users/ooasis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ooasis/subscriptions","organizations_url":"https://api.github.com/users/ooasis/orgs","repos_url":"https://api.github.com/users/ooasis/repos","events_url":"https://api.github.com/users/ooasis/events{/privacy}","received_events_url":"https://api.github.com/users/ooasis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:22:48Z","updated_at":"2016-01-20T17:22:48Z","author_association":"NONE","body":"@revans2 and all,\n\nI feel my PR ([STORM-1015]: Allow Kafka offsets to be saved using Kafka's consumer offset management api) is kind of independent of this PR as it is not related to the Kafka consumer API changes. I don't see major changes in consumer offset API in 0.9.0 so my feeling is that once you guys have the 0.9.0 branch ready, I can just merge in my change. \n\nI am curious to know what is the plan to support both 0.8.x and 0.9.x in coming releases, or what is the general strategy to support incompatible Kafka versions in the future.  \n\nAnother question that is not related to this topic, but maybe I can get help from you. How does the cross compiling of Scala version 2.10, 2.11 works in the build process? I cannot figure out how to do it locally on my laptop.\n\n-thanks\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173285410/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643573","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643573","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643573,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1NzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:23:15Z","updated_at":"2025-01-24T14:19:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50287206\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50287206</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -41,11 +41,30 @@<br/>\n       (dofor <span class=\"error\">&#91;f (seq (.getFields Config))&#93;</span><br/>\n      (.get f nil)))</p>\n\n<p>    -<br/>\n    +;; TODO this function and its callings will be replace when nimbus and supervisor move to Java<br/>\n     (defn cluster-mode<br/>\n       <span class=\"error\">&#91;conf & args&#93;</span><br/>\n       (keyword (conf STORM-CLUSTER-MODE)))</p>\n\n<p>    +(defn sampling-rate<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (->> (conf TOPOLOGY-STATS-SAMPLE-RATE)<br/>\n    +    (/ 1)<br/>\n    +    int))<br/>\n    +<br/>\n    +;; TODO this function together with sampling-rate are to be replaced with Java version when util.clj is in<br/>\n    +(defn mk-stats-sampler<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (even-sampler (sampling-rate conf)))<br/>\n    +<br/>\n    +;; TODO this function is to be replaced with Java version when util.clj is in<br/>\n    +(defn read-default-config<br/>\n    +  []<br/>\n    +  (clojurify-structure (Utils/readDefaultConfig)))<br/>\n    +<br/>\n    +<br/>\n    +<br/>\n    +(comment<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Will delete.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643573/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643579","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643579","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643579,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:24:15Z","updated_at":"2025-01-24T14:19:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50287342\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50287342</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -41,11 +41,30 @@<br/>\n       (dofor <span class=\"error\">&#91;f (seq (.getFields Config))&#93;</span><br/>\n      (.get f nil)))</p>\n\n<p>    -<br/>\n    +;; TODO this function and its callings will be replace when nimbus and supervisor move to Java<br/>\n     (defn cluster-mode<br/>\n       <span class=\"error\">&#91;conf & args&#93;</span><br/>\n       (keyword (conf STORM-CLUSTER-MODE)))</p>\n\n<p>    +(defn sampling-rate<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (->> (conf TOPOLOGY-STATS-SAMPLE-RATE)<br/>\n    +    (/ 1)<br/>\n    +    int))<br/>\n    +<br/>\n    +;; TODO this function together with sampling-rate are to be replaced with Java version when util.clj is in<br/>\n    +(defn mk-stats-sampler<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (even-sampler (sampling-rate conf)))<br/>\n    +<br/>\n    +;; TODO this function is to be replaced with Java version when util.clj is in<br/>\n    +(defn read-default-config<br/>\n    +  []<br/>\n    +  (clojurify-structure (Utils/readDefaultConfig)))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    These 2 functions are actually depending on util.clj. I may just translate those two util functions within this pull request and delete these two.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643579/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643581","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643581","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643581,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:24:55Z","updated_at":"2025-01-24T14:19:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50287433\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50287433</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK. Will turn it into a static function instead.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643581/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173287607","html_url":"https://github.com/apache/storm/pull/1023#issuecomment-173287607","issue_url":"https://api.github.com/repos/apache/storm/issues/1023","id":173287607,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI4NzYwNw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:24:57Z","updated_at":"2016-01-20T17:24:57Z","author_association":"CONTRIBUTOR","body":"@vesense I don't see any indication in the JIRA which branches you want this fix merged into.  master and 1.x seem simple enough, but it appears to be a bug in 10.x and 9.x releases too.  I'm not sure it is critical enough to go back to either of them, but I wanted to check with you before merging this in.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173287607/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702620","html_url":"https://github.com/apache/storm/issues/5316#issuecomment-2612702620","issue_url":"https://api.github.com/repos/apache/storm/issues/5316","id":2612702620,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI2MjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:24:58Z","updated_at":"2025-01-24T14:45:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1023#issuecomment-173287607\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1023#issuecomment-173287607</a></p>\n\n<p>    @vesense I don't see any indication in the JIRA which branches you want this fix merged into.  master and 1.x seem simple enough, but it appears to be a bug in 10.x and 9.x releases too.  I'm not sure it is critical enough to go back to either of them, but I wanted to check with you before merging this in.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702620/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643587","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643587","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643587,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:25:06Z","updated_at":"2025-01-24T14:19:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50287458\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50287458</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +return mode;<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Will delete.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643587/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173290288","html_url":"https://github.com/apache/storm/pull/1029#issuecomment-173290288","issue_url":"https://api.github.com/repos/apache/storm/issues/1029","id":173290288,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzI5MDI4OA==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:27:18Z","updated_at":"2016-01-20T17:27:18Z","author_association":"MEMBER","body":"Sorry for the package renaming noise. I missed a commit.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173290288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633691","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633691","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633691,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:27:19Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#issuecomment-173290288\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#issuecomment-173290288</a></p>\n\n<p>    Sorry for the package renaming noise. I missed a commit.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633691/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703359","html_url":"https://github.com/apache/storm/issues/5319#issuecomment-2612703359","issue_url":"https://api.github.com/repos/apache/storm/issues/5319","id":2612703359,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMzNTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:28:54Z","updated_at":"2025-01-24T14:45:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1025\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1025</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703364","html_url":"https://github.com/apache/storm/issues/5319#issuecomment-2612703364","issue_url":"https://api.github.com/repos/apache/storm/issues/5319","id":2612703364,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDMzNjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:29:15Z","updated_at":"2025-01-24T14:45:40Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vesense\" class=\"user-hover\" rel=\"vesense\">Xin Wang</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612703364/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633694","html_url":"https://github.com/apache/storm/issues/5052#issuecomment-2612633694","issue_url":"https://api.github.com/repos/apache/storm/issues/5052","id":2612633694,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzM2OTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:30:51Z","updated_at":"2025-01-24T14:15:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1029#discussion_r50288291\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1029#discussion_r50288291</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/operation/Operation.java &#8212;<br/>\n    @@ -20,7 +20,26 @@<br/>\n     import java.io.Serializable;<br/>\n     import java.util.Map;</p>\n\n<p>    +/**<br/>\n    + * Parent interface for Trident `Filter`s and `Function`s.<br/>\n    + *<br/>\n    + * `Operation` defines two lifecycle methods for Trident components. The `prepare()` method is called once when the<br/>\n    + * `Operation` is first initialized. The `cleanup()` method is called in local mode when the local cluster is<br/>\n    + * being shut down.<br/>\n    + */<br/>\n     public interface Operation extends Serializable {<br/>\n    +    /**<br/>\n    +     * Called when the `Operation` is first initialized.<br/>\n    +     * @param conf the Storm configuration map<br/>\n    +     * @param context the operation context which provides information such as the number of partitions in the stream,<br/>\n    +     *and the current partition index. It also provides methods for registering operation-specific<br/>\n    +     *metrics.<br/>\n    +     * @see storm.trident.operation.TridentOperationContext<br/>\n    +     */<br/>\n void prepare(Map conf, TridentOperationContext context);<br/>\n    +<br/>\n    +    /**<br/>\n    +     * When running in local mode, called when the local cluster is being shut down.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Good catch. I'll fix this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612633694/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643592","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643592","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643592,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM1OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:31:17Z","updated_at":"2025-01-24T14:19:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50288346\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50288346</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/config.clj &#8212;<br/>\n    @@ -41,11 +41,30 @@<br/>\n       (dofor <span class=\"error\">&#91;f (seq (.getFields Config))&#93;</span><br/>\n      (.get f nil)))</p>\n\n<p>    -<br/>\n    +;; TODO this function and its callings will be replace when nimbus and supervisor move to Java<br/>\n     (defn cluster-mode<br/>\n       <span class=\"error\">&#91;conf & args&#93;</span><br/>\n       (keyword (conf STORM-CLUSTER-MODE)))</p>\n\n<p>    +(defn sampling-rate<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (->> (conf TOPOLOGY-STATS-SAMPLE-RATE)<br/>\n    +    (/ 1)<br/>\n    +    int))<br/>\n    +<br/>\n    +;; TODO this function together with sampling-rate are to be replaced with Java version when util.clj is in<br/>\n    +(defn mk-stats-sampler<br/>\n    +  <span class=\"error\">&#91;conf&#93;</span><br/>\n    +  (even-sampler (sampling-rate conf)))<br/>\n    +<br/>\n    +;; TODO this function is to be replaced with Java version when util.clj is in<br/>\n    +(defn read-default-config<br/>\n    +  []<br/>\n    +  (clojurify-structure (Utils/readDefaultConfig)))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Either way is fine with me so long as they are not dropped.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643592/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643601","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643601","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643601,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:33:33Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50288645\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50288645</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Extra line</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643601/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643605","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643605","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643605,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2MDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:34:43Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50288819\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50288819</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Why the string \"null\" here and an actual null in absoluteStormLocalDir?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643605/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643608","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643608","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643608,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2MDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:35:18Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50288899\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50288899</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +}\n<p> catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Extra line</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643608/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643613","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643613","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643613,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2MTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:39:06Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50289425\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50289425</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +}\n<p> catch (IOException e) {<br/>\n    +    LOG.error(\"Failed to create dir \" + ret, e);<br/>\n    +    throw e;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Catching an exception to log it an rethrow it is not typically good practice.  Could we remove the catch/rethrow?  I also am confused why we do a mkdir here, but that is what the original code did so it is a good translation.  Could we file a JIRA to clean this up later?  Creating directories does not feel like something ConfigUtils should be doing.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643613/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643615","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643615","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643615,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T17:40:02Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50289560\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50289560</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +}\n<p> catch (IOException e) {<br/>\n    +    LOG.error(\"Failed to create dir \" + ret, e);<br/>\n    +    throw e;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Actually can you just make it generic about all of the forceMkdir calls in ConfigUtils?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643615/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173310578","html_url":"https://github.com/apache/storm/pull/1023#issuecomment-173310578","issue_url":"https://api.github.com/repos/apache/storm/issues/1023","id":173310578,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzMxMDU3OA==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:10:54Z","updated_at":"2016-01-20T18:10:54Z","author_association":"MEMBER","body":"+1\n\nI wouldn't mind seeing this go back to 1.x and 0.10.x (0.10.x has a few other minor fixes). But I don't think we need to support 0.9.x too much longer.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173310578/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702623","html_url":"https://github.com/apache/storm/issues/5316#issuecomment-2612702623","issue_url":"https://api.github.com/repos/apache/storm/issues/5316","id":2612702623,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDI2MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:10:55Z","updated_at":"2025-01-24T14:45:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1023#issuecomment-173310578\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1023#issuecomment-173310578</a></p>\n\n<p>    +1</p>\n\n<p>    I wouldn't mind seeing this go back to 1.x and 0.10.x (0.10.x has a few other minor fixes). But I don't think we need to support 0.9.x too much longer.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612702623/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173314105","html_url":"https://github.com/apache/storm/pull/1015#issuecomment-173314105","issue_url":"https://api.github.com/repos/apache/storm/issues/1015","id":173314105,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzMxNDEwNQ==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:21:42Z","updated_at":"2016-01-20T18:21:42Z","author_association":"MEMBER","body":"+1 (and +1 for merging to 1.x as well)\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173314105/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701536","html_url":"https://github.com/apache/storm/issues/5308#issuecomment-2612701536","issue_url":"https://api.github.com/repos/apache/storm/issues/5308","id":2612701536,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDE1MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:21:45Z","updated_at":"2025-01-24T14:44:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1015#issuecomment-173314105\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1015#issuecomment-173314105</a></p>\n\n<p>    +1 (and +1 for merging to 1.x as well)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612701536/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643619","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643619","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643619,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2MTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:40:38Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50298176\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50298176</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +}\n<p> catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) </p>\n{\n    +return (topologyId + \"-stormjar.jar\");\n    +    }\n<p>    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) </p>\n{\n    +return (topologyId + \"-stormcode.ser\");\n    +    }\n<p>    +<br/>\n    +    public static String masterStormConfKey(String topologyId) </p>\n{\n    +return (topologyId + \"-stormconf.ser\");\n    +    }\n<p>    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException </p>\n{\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException </p>\n{\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }\n<p>    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}\n<p>    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) </p>\n{\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes lets delete it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643619/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643622","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643622","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643622,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2MjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:40:51Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50298206\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50298206</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +}\n<p> catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) </p>\n{\n    +return (topologyId + \"-stormjar.jar\");\n    +    }\n<p>    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) </p>\n{\n    +return (topologyId + \"-stormcode.ser\");\n    +    }\n<p>    +<br/>\n    +    public static String masterStormConfKey(String topologyId) </p>\n{\n    +return (topologyId + \"-stormconf.ser\");\n    +    }\n<p>    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException </p>\n{\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException </p>\n{\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }\n<p>    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}\n<p>    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) </p>\n{\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    And the others that are not used.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643628","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643628","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643628,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:42:16Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50298399\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50298399</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +}\n<p> catch (IOException e) {<br/>\n    +    LOG.error(\"Failed to create dir \" + ret, e);<br/>\n    +    throw e;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Again lets remove the try/catch/log/rethrow</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643628/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643635","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643635","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643635,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:42:50Z","updated_at":"2025-01-24T14:19:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50298493\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50298493</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think this should be `return mockedSupervisorLocalDir`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643635/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643641","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643641","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643641,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:44:11Z","updated_at":"2025-01-24T14:19:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50298726\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50298726</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}\n<p>    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException </p>\n{\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }\n<p>    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) </p>\n{\n    +    mockedSupervisorStormDistRoot = conf;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormDistRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    And here too `return  mockedSupervisorStormDistRoot`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643641/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643647","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643647","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643647,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:44:39Z","updated_at":"2025-01-24T14:19:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50298796\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50298796</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    If clj does not, lets not do it either, just remove the TODO.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643647/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643651","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643651","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643651,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2NTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:45:45Z","updated_at":"2025-01-24T14:19:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50298950\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50298950</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}\n<p>    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes we need to do the url-encode</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643651/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643655","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643655","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643655,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:47:15Z","updated_at":"2025-01-24T14:19:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50299218\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50299218</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}\n<p>    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}\n<p>    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}\n<p>    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException </p>\n{\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}\n<p>    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) </p>\n{\n    +    mockedSupervisorState = conf;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorState = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    `return mockedSupervisorState`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643661","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643661","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643661,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2NjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:47:32Z","updated_at":"2025-01-24T14:19:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50299266\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50299266</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) </p>\n{\n    +    mockedNimbusTopoHistoryState = conf;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedNimbusTopoHistoryState = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    `return mockedNimbusTopoHistoryState;`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643661/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643665","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643665","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643665,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:48:24Z","updated_at":"2025-01-24T14:19:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50299404\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50299404</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) </p>\n{\n    +    mockedNimbusTopoHistoryState = conf;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedNimbusTopoHistoryState = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is not a Map.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643665/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643670","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643670","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643670,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2NzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:50:01Z","updated_at":"2025-01-24T14:19:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50299666\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50299666</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) {<br/>\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This matches the code, but I don't think we want the extra \"/\"  we should file a JIRA to check on that. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643670/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643675","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643675","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643675,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:50:17Z","updated_at":"2025-01-24T14:19:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50299712\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50299712</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    yes delete this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643675/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643679","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643679","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643679,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:51:39Z","updated_at":"2025-01-24T14:19:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50299901\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50299901</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) {<br/>\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Lest use \"{}\" replacement here.  Very minor.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643679/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643687","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643687","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643687,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:55:20Z","updated_at":"2025-01-24T14:19:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50300449\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50300449</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    This works, it is not the RE used in the clojure, but it should be fine.  My only comment would be to have static final strings for \"-stormjar.jar\", etc. and use the .length() of the static final string instead of the hard coded length in the substring.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643687/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643694","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643694","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643694,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM2OTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:55:42Z","updated_at":"2025-01-24T14:19:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50300517\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50300517</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) </p>\n{\n    +    mockedWorkerUserWSE = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerUserWSE = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This should be a boolean.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643694/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643702","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643702","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643702,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3MDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:56:12Z","updated_at":"2025-01-24T14:19:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50300594\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50300594</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This should be renamed to something like IgnoreMockedWorkerUserWSE</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643702/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643706","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643706","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643706,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:59:05Z","updated_at":"2025-01-24T14:19:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50301027\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50301027</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) </p>\n{\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +}\n<p> else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) </p>\n{\n    +return artifactsDir;\n    +    }\n<p> else </p>\n{\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {<br/>\n    +    return mockedWorkerArtifactsRoot;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I'm not sure how the mocking worked in the clj code.  This looks OK, but is confusing because we are not including the ID.  It might be worth a comment here on why that is.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643706/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643710","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643710","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643710,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:59:09Z","updated_at":"2025-01-24T14:19:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50301038\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50301038</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}\n<p>    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}\n<p>    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}\n<p>    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException </p>\n{\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}\n<p>    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) </p>\n{\n    +    mockedSupervisorState = conf;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorState = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Actually here we should return null. I know it is not straightforward: by default, mockedSupervisorState is null. Only when the test set this variable to be not null then we return \"null\". </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643710/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643715","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643715","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643715,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T18:59:33Z","updated_at":"2025-01-24T14:19:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50301097\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50301097</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) {\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +} else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) {\n    +return artifactsDir;\n    +    } else {\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {<br/>\n    +    return mockedWorkerArtifactsRoot;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Same comment here about why we are not including the port/etc in this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643720","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643720","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643720,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3MjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:00:31Z","updated_at":"2025-01-24T14:19:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50301231\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50301231</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}\n<p>    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}\n<p>    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}\n<p>    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException </p>\n{\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}\n<p>    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) </p>\n{\n    +    mockedSupervisorState = conf;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorState = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Or we can do the opposite, by default this \"mockedSupervisorState\" is not null, only when test set this not be null, we return null in the static function</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643720/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643728","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643728","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643728,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3Mjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:00:38Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50301246\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50301246</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) {\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +} else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) {\n    +return artifactsDir;\n    +    } else {\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +return (workerArtifactsRoot(conf, id) + FILE_SEPARATOR + port);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsPidPath(Map conf, String id, Integer port) </p>\n{\n    +return (workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR +  \"worker.pid\");\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(String fname) {<br/>\n    +String[] subStrings = fname.split(FILE_SEPARATOR); // TODO: does this work well on windows?<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This does not even work all that well off windows.  We should file a JIRA to look at using File for this instead.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643728/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643735","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643735","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643735,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:01:16Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50301324\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50301324</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}\n<p>    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}\n<p>    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}\n<p>    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException </p>\n{\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) </p>\n{\n    +    ret = stormRoot;\n    +}\n<p>    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) </p>\n{\n    +    mockedSupervisorState = conf;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorState = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {<br/>\n    +    return null;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is also why the type of \"mockedSupervisorState\" does not really matter.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643735/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643740","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643740","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643740,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:05:19Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50301784\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50301784</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) {\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +} else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) {\n    +return artifactsDir;\n    +    } else {\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +return (workerArtifactsRoot(conf, id) + FILE_SEPARATOR + port);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsPidPath(Map conf, String id, Integer port) </p>\n{\n    +return (workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR +  \"worker.pid\");\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(String fname) </p>\n{\n    +String[] subStrings = fname.split(FILE_SEPARATOR); // TODO: does this work well on windows?\n    +String id = subStrings[0];\n    +Integer port = Integer.parseInt(subStrings[1]);\n    +return getLogMetaDataFile(Utils.readStormConfig(), id, port);\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(Map conf, String id, Integer port) </p>\n{\n    +String fname = workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR + \"worker.yaml\";\n    +return new File(fname);\n    +    }\n<p>    +<br/>\n    +    public static File getWorkerDirFromRoot(String logRoot, String id, Integer port) </p>\n{\n    +return new File((logRoot + FILE_SEPARATOR + id + FILE_SEPARATOR + port));\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"workers\");\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf) + FILE_SEPARATOR + id);\n    +    }\n<p>    +<br/>\n    +    public static String workerPidsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"pids\");\n    +    }\n<p>    +<br/>\n    +    public static String workerPidPath(Map conf, String id, String pid) </p>\n{\n    +return (workerPidsRoot(conf, id) + FILE_SEPARATOR + pid);\n    +    }\n<p>    +<br/>\n    +    public static String workerHeartbeatsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"heartbeats\");\n    +    }\n<p>    +<br/>\n    +    public static LocalState workerState(Map conf, String id) throws IOException </p>\n{\n    +return new LocalState(workerHeartbeatsRoot(conf, id));\n    +    }\n<p>    +<br/>\n    +    public static Map overrideLoginConfigWithSystemProperty(Map conf) { // note that we delete the return value<br/>\n    +String loginConfFile = System.getProperty(\"java.security.auth.login.config\");<br/>\n    +if (loginConfFile != null) </p>\n{\n    +     conf.put(\"java.security.auth.login.config\", loginConfFile);\n    +}\n<p>    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    /* TODO: make sure test these two functions in manual tests */<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    What is the result of this TODO?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643740/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643745","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643745","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643745,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3NDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:05:44Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50301841\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50301841</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) </p>\n{\n    +    mockedStormConfig = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedStormConfig = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() </p>\n{\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) </p>\n{\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }\n<p>    +<br/>\n    +    public static Map readYamlConfig(String name) </p>\n{\n    +return  readYamlConfig(name, true);\n    +    }\n<p>    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +}\n<p> else {<br/>\n    +    if (new File(localDir).isAbsolute()) </p>\n{\n    +return localDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) </p>\n{\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +}\n<p> else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) </p>\n{\n    +return healthCheckDir;\n    +    }\n<p> else </p>\n{\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try </p>\n{\n    +    FileUtils.forceMkdir(new File(ret));\n    +}\n<p> catch (IOException e) {<br/>\n    +    LOG.error(\"Failed to create dir \" + ret, e);<br/>\n    +    throw e;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes, this is a direct translation master-local-dir does have a forceMkdir with it. </p>\n\n<p>    So where should we put those forceMkdir, or we require the calling code to check and create by themselves? I can file a JIRA for that if needed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643745/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643747","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643747","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643747,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3NDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:07:07Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50302004\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50302004</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) {\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +} else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) {\n    +return artifactsDir;\n    +    } else {\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +return (workerArtifactsRoot(conf, id) + FILE_SEPARATOR + port);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsPidPath(Map conf, String id, Integer port) </p>\n{\n    +return (workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR +  \"worker.pid\");\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(String fname) </p>\n{\n    +String[] subStrings = fname.split(FILE_SEPARATOR); // TODO: does this work well on windows?\n    +String id = subStrings[0];\n    +Integer port = Integer.parseInt(subStrings[1]);\n    +return getLogMetaDataFile(Utils.readStormConfig(), id, port);\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(Map conf, String id, Integer port) </p>\n{\n    +String fname = workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR + \"worker.yaml\";\n    +return new File(fname);\n    +    }\n<p>    +<br/>\n    +    public static File getWorkerDirFromRoot(String logRoot, String id, Integer port) </p>\n{\n    +return new File((logRoot + FILE_SEPARATOR + id + FILE_SEPARATOR + port));\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"workers\");\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf) + FILE_SEPARATOR + id);\n    +    }\n<p>    +<br/>\n    +    public static String workerPidsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"pids\");\n    +    }\n<p>    +<br/>\n    +    public static String workerPidPath(Map conf, String id, String pid) </p>\n{\n    +return (workerPidsRoot(conf, id) + FILE_SEPARATOR + pid);\n    +    }\n<p>    +<br/>\n    +    public static String workerHeartbeatsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"heartbeats\");\n    +    }\n<p>    +<br/>\n    +    public static LocalState workerState(Map conf, String id) throws IOException </p>\n{\n    +return new LocalState(workerHeartbeatsRoot(conf, id));\n    +    }\n<p>    +<br/>\n    +    public static Map overrideLoginConfigWithSystemProperty(Map conf) { // note that we delete the return value<br/>\n    +String loginConfFile = System.getProperty(\"java.security.auth.login.config\");<br/>\n    +if (loginConfFile != null) </p>\n{\n    +     conf.put(\"java.security.auth.login.config\", loginConfFile);\n    +}\n<p>    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    /* TODO: make sure test these two functions in manual tests */<br/>\n    +    public static List<String> getTopoLogsUsers(Map topologyConf) {<br/>\n    +List<String> logsUsers = (List<String>)topologyConf.get(Config.LOGS_USERS);<br/>\n    +List<String> topologyUsers = (List<String>)topologyConf.get(Config.TOPOLOGY_USERS);<br/>\n    +Set<String> mergedUsers = new HashSet<String>();<br/>\n    +if (logsUsers != null) {<br/>\n    +    for (String user : logsUsers) {<br/>\n    +if (user != null) </p>\n{\n    +    mergedUsers.add(user);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This can be reduced to<br/>\n    ```<br/>\n    if (logsUsers != null) </p>\n{\n      mergedUsers.addAll(logsUsers);\n    }\n<p>    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643747/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643748","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643748","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643748,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3NDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:07:57Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50302126\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50302126</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) {\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +} else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) {\n    +return artifactsDir;\n    +    } else {\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +return (workerArtifactsRoot(conf, id) + FILE_SEPARATOR + port);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsPidPath(Map conf, String id, Integer port) </p>\n{\n    +return (workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR +  \"worker.pid\");\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(String fname) </p>\n{\n    +String[] subStrings = fname.split(FILE_SEPARATOR); // TODO: does this work well on windows?\n    +String id = subStrings[0];\n    +Integer port = Integer.parseInt(subStrings[1]);\n    +return getLogMetaDataFile(Utils.readStormConfig(), id, port);\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(Map conf, String id, Integer port) </p>\n{\n    +String fname = workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR + \"worker.yaml\";\n    +return new File(fname);\n    +    }\n<p>    +<br/>\n    +    public static File getWorkerDirFromRoot(String logRoot, String id, Integer port) </p>\n{\n    +return new File((logRoot + FILE_SEPARATOR + id + FILE_SEPARATOR + port));\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"workers\");\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf) + FILE_SEPARATOR + id);\n    +    }\n<p>    +<br/>\n    +    public static String workerPidsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"pids\");\n    +    }\n<p>    +<br/>\n    +    public static String workerPidPath(Map conf, String id, String pid) </p>\n{\n    +return (workerPidsRoot(conf, id) + FILE_SEPARATOR + pid);\n    +    }\n<p>    +<br/>\n    +    public static String workerHeartbeatsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"heartbeats\");\n    +    }\n<p>    +<br/>\n    +    public static LocalState workerState(Map conf, String id) throws IOException </p>\n{\n    +return new LocalState(workerHeartbeatsRoot(conf, id));\n    +    }\n<p>    +<br/>\n    +    public static Map overrideLoginConfigWithSystemProperty(Map conf) { // note that we delete the return value<br/>\n    +String loginConfFile = System.getProperty(\"java.security.auth.login.config\");<br/>\n    +if (loginConfFile != null) </p>\n{\n    +     conf.put(\"java.security.auth.login.config\", loginConfFile);\n    +}\n<p>    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    /* TODO: make sure test these two functions in manual tests */<br/>\n    +    public static List<String> getTopoLogsUsers(Map topologyConf) {<br/>\n    +List<String> logsUsers = (List<String>)topologyConf.get(Config.LOGS_USERS);<br/>\n    +List<String> topologyUsers = (List<String>)topologyConf.get(Config.TOPOLOGY_USERS);<br/>\n    +Set<String> mergedUsers = new HashSet<String>();<br/>\n    +if (logsUsers != null) {<br/>\n    +    for (String user : logsUsers) {<br/>\n    +if (user != null) </p>\n{\n    +    mergedUsers.add(user);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +if (topologyUsers != null) {<br/>\n    +    for (String user : topologyUsers) {<br/>\n    +if (user != null) {    +    mergedUsers.add(user);    +}\n<p>    +    }<br/>\n    +}<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    And this can similarly be<br/>\n    ```<br/>\n    if (topologyUsers != null) </p>\n{\nmergedUsers.addAll(topologyUsers);\n    }\n<p>    ```</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643748/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643753","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643753","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643753,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:08:28Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#discussion_r50302203\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#discussion_r50302203</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java &#8212;<br/>\n    @@ -0,0 +1,711 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.storm.utils;<br/>\n    +<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.validation.ConfigValidation;<br/>\n    +import org.apache.storm.generated.StormTopology;<br/>\n    +import org.apache.commons.io.FileUtils;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.io.*;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.List;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Collections;<br/>\n    +<br/>\n    +public class ConfigUtils {<br/>\n    +    private final static Logger LOG = LoggerFactory.getLogger(ConfigUtils.class);<br/>\n    +    public final static String RESOURCES_SUBDIR = \"resources\";<br/>\n    +    public final static String NIMBUS_DO_NOT_REASSIGN = \"NIMBUS-DO-NOT-REASSIGN\";<br/>\n    +    public static final String FILE_SEPARATOR = File.separator;<br/>\n    +    public final static String LOG_DIR;<br/>\n    +<br/>\n    +    static {<br/>\n    +String dir;<br/>\n    +Map conf;<br/>\n    +if (System.getProperty(\"storm.log.dir\") != null) </p>\n{\n    +    dir = System.getProperty(\"storm.log.dir\");\n    +}\n<p> else if ((conf = readStormConfig()).get(\"storm.log.dir\") != null) </p>\n{\n    +    dir = String.valueOf(conf.get(\"storm.log.dir\"));\n    +}\n<p> else {<br/>\n    +    if (System.getProperty(\"storm.home\") != null) </p>\n{\n    +dir = System.getProperty(\"storm.home\") + FILE_SEPARATOR + \"logs\";\n    +    }\n<p> else </p>\n{\n    +dir = FILE_SEPARATOR + \"logs\";\n    +    }\n<p>    +}<br/>\n    +try </p>\n{\n    +    LOG_DIR = new File(dir).getCanonicalPath();\n    +}\n<p> catch (IOException ex) </p>\n{\n    +    throw new IllegalArgumentException(\"Illegal storm.log.dir in conf: \" + dir);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String clojureConfigName(String name) </p>\n{\n    +return name.toUpperCase().replace(\"_\", \"-\");\n    +    }\n<p>    +<br/>\n    +    // ALL-CONFIGS is only used by executor.clj once, do we want to do it here? TODO<br/>\n    +    public static List<Object> All_CONFIGS() {<br/>\n    +List<Object> ret = new ArrayList<Object>();<br/>\n    +Config config = new Config();<br/>\n    +Class<?> ConfigClass = config.getClass();<br/>\n    +Field[] fields = ConfigClass.getFields();<br/>\n    +for (int i = 0; i < fields.length; i++) {<br/>\n    +    try </p>\n{\n    +Object obj = fields[i].get(null);\n    +ret.add(obj);\n    +    }\n<p> catch (IllegalArgumentException e) </p>\n{\n    +LOG.error(e.getMessage(), e);\n    +    } catch (IllegalAccessException e) {    +LOG.error(e.getMessage(), e);    +    }\n<p>    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterMode(Map conf) </p>\n{\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);\n    +return mode;\n    +\n    +    }\n<p>    +<br/>\n    +    public static boolean isLocalMode(Map conf) {<br/>\n    +String mode = (String) conf.get(Config.STORM_CLUSTER_MODE);<br/>\n    +if (mode != null) {<br/>\n    +    if (\"local\".equals(mode)) </p>\n{\n    +return true;\n    +    }\n<p>    +    if (\"distributed\".equals(mode)) </p>\n{\n    +return false;\n    +    }\n<p>    +}<br/>\n    +throw new IllegalArgumentException(\"Illegal cluster mode in conf: \" + mode);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static int samplingRate(Map conf) {<br/>\n    +double rate = Utils.getDouble(conf.get(Config.TOPOLOGY_STATS_SAMPLE_RATE));<br/>\n    +if (rate != 0) </p>\n{\n    +    return (int) (1 / rate);\n    +}\n<p>    +throw new IllegalArgumentException(\"Illegal topology.stats.sample.rate in conf: \" + rate);<br/>\n    +    }<br/>\n    +<br/>\n    +    // public static mkStatsSampler // depends on Utils.evenSampler() TODO, this is sth we need to do after util<br/>\n    +    // public static readDefaultConfig // depends on Utils.clojurifyStructure and Utils.readDefaultConfig // TODO<br/>\n    +    // validate-configs-with-schemas is just a wrapper of ConfigValidation.validateFields(conf)<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedStormConfig mocked = new SetMockedStormConfig(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedStormConfig. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedStormConfig implements Closeable {<br/>\n    +public SetMockedStormConfig(Map conf) {\n    +    mockedStormConfig = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedStormConfig = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedStormConfig = null;<br/>\n    +    public static Map readStormConfig() {\n    +if (mockedStormConfig != null) return mockedStormConfig;\n    +Map conf = Utils.readStormConfig();\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name, boolean mustExist) {\n    +Map conf = Utils.findAndReadConfigFile(name, mustExist);\n    +ConfigValidation.validateFields(conf);\n    +return conf;\n    +    }<br/>\n    +<br/>\n    +    public static Map readYamlConfig(String name) {\n    +return  readYamlConfig(name, true);\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteStormLocalDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String localDir = (String) conf.get(Config.STORM_LOCAL_DIR);<br/>\n    +if (localDir == null) {\n    +    return (stormHome + FILE_SEPARATOR + \"storm-local\");\n    +} else {<br/>\n    +    if (new File(localDir).isAbsolute()) {\n    +return localDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + localDir);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String absoluteHealthCheckDir(Map conf) {<br/>\n    +String stormHome = System.getProperty(\"storm.home\");<br/>\n    +String healthCheckDir = String.valueOf(conf.get(Config.STORM_HEALTH_CHECK_DIR));<br/>\n    +if (healthCheckDir.equals(\"null\")) {\n    +    return (stormHome + FILE_SEPARATOR + \"healthchecks\");\n    +} else {<br/>\n    +    if (new File(healthCheckDir).isAbsolute()) {\n    +return healthCheckDir;\n    +    } else {\n    +return (stormHome + FILE_SEPARATOR + healthCheckDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterLocalDir(Map conf) throws IOException {<br/>\n    +String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + \"nimbus\";<br/>\n    +try {\n    +    FileUtils.forceMkdir(new File(ret));\n    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +<br/>\n    +    public static String masterStormJarKey(String topologyId) {\n    +return (topologyId + \"-stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormCodeKey(String topologyId) {\n    +return (topologyId + \"-stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormConfKey(String topologyId) {\n    +return (topologyId + \"-stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf) throws IOException {\n    +String ret = stormDistPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormDistRoot(Map conf, String stormId) throws IOException {\n    +return (masterStormDistRoot(conf) + FILE_SEPARATOR + stormId);\n    +    }<br/>\n    +<br/>\n    +    public static String stormDistPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return ret + FILE_SEPARATOR + \"stormdist\";<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String stormTmpPath(String stormRoot) {\n    +return stormRoot + FILE_SEPARATOR + \"tmp\";\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : delete it*/<br/>\n    +    public static String masterTmpDir(Map conf) throws IOException {\n    +String ret = stormTmpPath(masterLocalDir(conf));\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static Map readSupervisorStormConfGivenPath(Map conf, String stormConfPath) throws  IOException {\n    +Map ret = new HashMap(conf);\n    +ret.putAll(Utils.fromCompressedJsonConf(FileUtils.readFileToByteArray(new File(stormConfPath))));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormMetaFilePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"storm-code-distributor.meta\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterStormJarPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormjar.jar\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormCodePath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormcode.ser\");\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String masterStormConfPath(String stormRoot) {\n    +return (stormRoot + FILE_SEPARATOR + \"stormconf.ser\");\n    +    }<br/>\n    +<br/>\n    +    public static String masterInbox(Map conf) throws IOException {<br/>\n    +String ret = masterLocalDir(conf) + FILE_SEPARATOR + \"inbox\";<br/>\n    +try {    +    FileUtils.forceMkdir(new File(ret));    +} catch (IOException e) {\n    +    LOG.error(\"Failed to create dir \" + ret, e);\n    +    throw e;\n    +}<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String masterInimbusDir(Map conf) throws IOException {\n    +return (masterLocalDir(conf) + FILE_SEPARATOR + \"inimbus\");\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorLocalDir mocked = new SetMockedSupervisorLocalDir(dir)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorLocalDir. dir)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorLocalDir implements Closeable {<br/>\n    +public SetMockedSupervisorLocalDir(String dir) </p>\n{\n    +    mockedSupervisorLocalDir = dir;\n    +}\n<p>    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorLocalDir = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedSupervisorLocalDir = null;<br/>\n    +    public static String supervisorLocalDir(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorLocalDir != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +String ret = absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"supervisor\";<br/>\n    +FileUtils.forceMkdir(new File(ret));<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorIsupervisorDir(Map conf) throws IOException {\n    +return ((supervisorLocalDir(conf) + FILE_SEPARATOR + \"isupervisor\"));\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormDistRoot mocked = new SetMockedSupervisorStormDistRoot(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormDistRoot. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormDistRoot implements Closeable {<br/>\n    +public SetMockedSupervisorStormDistRoot(Map conf) {\n    +    mockedSupervisorStormDistRoot = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorStormDistRoot = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorStormDistRoot = null;<br/>\n    +    public static String supervisorStormDistRoot(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) {    +    return null;    +}\n<p>    +return stormDistPath(supervisorLocalDir(conf)); // TODO: no need to forceMake here?, clj does not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormDistRoot(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormDistRoot != null) </p>\n{\n    +    return null;\n    +}<br/>\n    +return supervisorStormDistRoot(conf) + FILE_SEPARATOR + stormId; // TODO: need to (url-encode storm-id)? Not.<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormJarPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormjar.jar\");<br/>\n    +    }<br/>\n    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String supervisorStormMetaFilePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"storm-code-distributor.meta\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormCodePath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormcode.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormConfPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +if (stormRoot != null) {    +    ret = stormRoot;    +}<br/>\n    +return (ret + FILE_SEPARATOR + \"stormconf.ser\");<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorTmpDir(Map conf) throws IOException {\n    +String ret = supervisorLocalDir(conf) + FILE_SEPARATOR + \"tmp\";\n    +FileUtils.forceMkdir(new File(ret));\n    +return ret;\n    +    }<br/>\n    +<br/>\n    +    public static String supervisorStormResourcesPath(String stormRoot) {<br/>\n    +String ret = \"\";<br/>\n    +// we do this since to concat a null String will actually concat a \"null\", which is not the expected: \"\"<br/>\n    +if (stormRoot != null) {\n    +    ret = stormRoot;\n    +}<br/>\n    +return (ret + FILE_SEPARATOR + RESOURCES_SUBDIR);<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorState mocked = new SetMockedSupervisorState(conf)) {\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorState implements Closeable {<br/>\n    +public SetMockedSupervisorState(Map conf) {\n    +    mockedSupervisorState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedSupervisorState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedSupervisorState = null;<br/>\n    +    public static LocalState supervisorState(Map conf) throws IOException {<br/>\n    +if (mockedSupervisorState != null) {    +    return null;    +}\n<p>    +return new LocalState((supervisorLocalDir(conf) + FILE_SEPARATOR + \"localstate\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedNimbusTopoHistoryState mocked = new SetMockedNimbusTopoHistoryState(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedNimbusTopoHistoryState. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedNimbusTopoHistoryState implements Closeable {<br/>\n    +public SetMockedNimbusTopoHistoryState(Map conf) {\n    +    mockedNimbusTopoHistoryState = conf;\n    +}<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedNimbusTopoHistoryState = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedNimbusTopoHistoryState = null;<br/>\n    +    public static LocalState nimbusTopoHistoryState(Map conf) throws IOException {<br/>\n    +if (mockedNimbusTopoHistoryState != null) {\n    +    return null;\n    +}<br/>\n    +return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"));<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedSupervisorStormConf mocked = new SetMockedSupervisorStormConf(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedSupervisorStormConf. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedSupervisorStormConf implements Closeable {<br/>\n    +public SetMockedSupervisorStormConf(Map conf) </p>\n{\n    +    mockedSupervisorStormConf = conf;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedSupervisorStormConf = null;\n    +}\n<p>    +    }<br/>\n    +    private static Map mockedSupervisorStormConf = null;<br/>\n    +    public static Map readSupervisorStormConf(Map conf, String stormId) throws IOException {<br/>\n    +if (mockedSupervisorStormConf != null) </p>\n{\n    +    return mockedSupervisorStormConf;\n    +}\n<p>    +String stormRoot = supervisorStormDistRoot(conf, stormId);<br/>\n    +String confPath = supervisorStormConfPath(stormRoot);<br/>\n    +return readSupervisorStormConfGivenPath(conf, confPath);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static StormTopology readSupervisorTopology(Map conf, String stormId) throws IOException </p>\n{\n    +String stormRoot = supervisorStormDistRoot(conf, stormId);\n    +String topologyPath = supervisorStormCodePath(stormRoot);\n    +return Utils.deserialize(FileUtils.readFileToByteArray(new File(topologyPath)), StormTopology.class);\n    +    }\n<p>    +<br/>\n    +    public static String workerUserRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"/workers-users\");\n    +    }\n<p>    +<br/>\n    +    /* Never get used TODO : may delete it*/<br/>\n    +    public static String workerUserFile(Map conf, String workerId) </p>\n{\n    +return (workerUserRoot(conf) + FILE_SEPARATOR + workerId);\n    +    }\n<p>    +<br/>\n    +    public static String getWorkerUser(Map conf, String workerId) {<br/>\n    +LOG.info(\"GET worker-user for {}\", workerId);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +<br/>\n    +try (InputStream in = new FileInputStream(file);<br/>\n    +     Reader reader = new InputStreamReader(in);<br/>\n    +     BufferedReader br = new BufferedReader(reader)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {<br/>\n    +    StringBuilder sb = new StringBuilder();<br/>\n    +    int r;<br/>\n    +    while ((r = br.read()) != -1) </p>\n{\n    +char ch = (char)r;\n    +sb.append(ch);\n    +    }\n<p>    +    String ret = sb.toString().trim();<br/>\n    +    return ret;<br/>\n    +} catch (IOException e) </p>\n{\n    +    LOG.error(\"Failed to get worker user for \" + workerId + \".\");\n    +    return null;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getIdFromBlobKey(String key) {<br/>\n    +if (key == null) return null;<br/>\n    +String ret = null;<br/>\n    +if (key.endsWith(\"-stormjar.jar\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 13);\n    +}\n<p> else if (key.endsWith(\"-stormcode.ser\")) </p>\n{\n    +    ret = key.substring(0, key.length() - 14);\n    +} else if (key.endsWith(\"-stormconf.ser\")) {    +    ret = key.substring(0, key.length() - 14);    +}\n<p>    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerUserWSE mocked = new SetMockedWorkerUserWSE(conf)) </p>\n{\n    +    //    run test ...\n    +    // }<br/>\n    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerUserWSE. conf)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerUserWSE implements Closeable {<br/>\n    +public SetMockedWorkerUserWSE(Map conf) {\n    +    mockedWorkerUserWSE = conf;\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void close() {\n    +    mockedWorkerUserWSE = null;\n    +}<br/>\n    +    }<br/>\n    +    private static Map mockedWorkerUserWSE = null;<br/>\n    +    public static void setWorkerUserWSE(Map conf, String workerId, String user) throws IOException {<br/>\n    +if (mockedWorkerUserWSE != null) {\n    +    return;\n    +}<br/>\n    +LOG.info(\"SET worker-user {} {}\", workerId, user);<br/>\n    +File file = new File(workerUserFile(conf, workerId));<br/>\n    +file.getParentFile().mkdirs();<br/>\n    +<br/>\n    +try (FileWriter fw = new FileWriter(file);<br/>\n    +     BufferedWriter writer = new BufferedWriter(fw)<img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/wink.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/> {\n    +    writer.write(user);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void removeWorkerUserWSE(Map conf, String workerId) {<br/>\n    +LOG.info(\"REMOVE worker-user {}\", workerId);<br/>\n    +new File(workerUserFile(conf, workerId)).delete();<br/>\n    +    }<br/>\n    +<br/>\n    +    //For testing only<br/>\n    +    // for java<br/>\n    +    // try (SetMockedWorkerArtifactsRoot mocked = new SetMockedWorkerArtifactsRoot(conf)) {    +    //    run test ...    +    // }\n<p>    +    //<br/>\n    +    // for clojure<br/>\n    +    // (with-open <span class=\"error\">&#91;mock (SetMockedWorkerArtifactsRoot. root)&#93;</span><br/>\n    +    //     run test ...)<br/>\n    +    public static class SetMockedWorkerArtifactsRoot implements Closeable {<br/>\n    +public SetMockedWorkerArtifactsRoot(String root) </p>\n{\n    +    mockedWorkerArtifactsRoot = root;\n    +}\n<p>    +<br/>\n    +@Override<br/>\n    +public void close() </p>\n{\n    +    mockedWorkerArtifactsRoot = null;\n    +}\n<p>    +    }<br/>\n    +    private static String mockedWorkerArtifactsRoot = null;<br/>\n    +    public static String workerArtifactsRoot(Map conf) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}<br/>\n    +String artifactsDir = (String)conf.get(Config.STORM_WORKERS_ARTIFACTS_DIR);<br/>\n    +if (artifactsDir == null) {\n    +    return (LOG_DIR + FILE_SEPARATOR + \"workers-artifacts\");\n    +} else {<br/>\n    +    if (new File(artifactsDir).isAbsolute()) {\n    +return artifactsDir;\n    +    } else {\n    +return (LOG_DIR + FILE_SEPARATOR + artifactsDir);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) {    +    return mockedWorkerArtifactsRoot;    +}\n<p>    +return (workerArtifactsRoot(conf) + FILE_SEPARATOR + id);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsRoot(Map conf, String id, Integer port) {<br/>\n    +if (mockedWorkerArtifactsRoot != null) </p>\n{\n    +    return mockedWorkerArtifactsRoot;\n    +}\n<p>    +return (workerArtifactsRoot(conf, id) + FILE_SEPARATOR + port);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String workerArtifactsPidPath(Map conf, String id, Integer port) </p>\n{\n    +return (workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR +  \"worker.pid\");\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(String fname) </p>\n{\n    +String[] subStrings = fname.split(FILE_SEPARATOR); // TODO: does this work well on windows?\n    +String id = subStrings[0];\n    +Integer port = Integer.parseInt(subStrings[1]);\n    +return getLogMetaDataFile(Utils.readStormConfig(), id, port);\n    +    }\n<p>    +<br/>\n    +    public static File getLogMetaDataFile(Map conf, String id, Integer port) </p>\n{\n    +String fname = workerArtifactsRoot(conf, id, port) + FILE_SEPARATOR + \"worker.yaml\";\n    +return new File(fname);\n    +    }\n<p>    +<br/>\n    +    public static File getWorkerDirFromRoot(String logRoot, String id, Integer port) </p>\n{\n    +return new File((logRoot + FILE_SEPARATOR + id + FILE_SEPARATOR + port));\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf) </p>\n{\n    +return (absoluteStormLocalDir(conf) + FILE_SEPARATOR + \"workers\");\n    +    }\n<p>    +<br/>\n    +    public static String workerRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf) + FILE_SEPARATOR + id);\n    +    }\n<p>    +<br/>\n    +    public static String workerPidsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"pids\");\n    +    }\n<p>    +<br/>\n    +    public static String workerPidPath(Map conf, String id, String pid) </p>\n{\n    +return (workerPidsRoot(conf, id) + FILE_SEPARATOR + pid);\n    +    }\n<p>    +<br/>\n    +    public static String workerHeartbeatsRoot(Map conf, String id) </p>\n{\n    +return (workerRoot(conf, id) + FILE_SEPARATOR + \"heartbeats\");\n    +    }\n<p>    +<br/>\n    +    public static LocalState workerState(Map conf, String id) throws IOException </p>\n{\n    +return new LocalState(workerHeartbeatsRoot(conf, id));\n    +    }\n<p>    +<br/>\n    +    public static Map overrideLoginConfigWithSystemProperty(Map conf) { // note that we delete the return value<br/>\n    +String loginConfFile = System.getProperty(\"java.security.auth.login.config\");<br/>\n    +if (loginConfFile != null) </p>\n{\n    +     conf.put(\"java.security.auth.login.config\", loginConfFile);\n    +}\n<p>    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    /* TODO: make sure test these two functions in manual tests */<br/>\n    +    public static List<String> getTopoLogsUsers(Map topologyConf) {<br/>\n    +List<String> logsUsers = (List<String>)topologyConf.get(Config.LOGS_USERS);<br/>\n    +List<String> topologyUsers = (List<String>)topologyConf.get(Config.TOPOLOGY_USERS);<br/>\n    +Set<String> mergedUsers = new HashSet<String>();<br/>\n    +if (logsUsers != null) {<br/>\n    +    for (String user : logsUsers) {<br/>\n    +if (user != null) </p>\n{\n    +    mergedUsers.add(user);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +if (topologyUsers != null) {<br/>\n    +    for (String user : topologyUsers) {<br/>\n    +if (user != null) {    +    mergedUsers.add(user);    +}\n<p>    +    }<br/>\n    +}<br/>\n    +List<String> ret = new ArrayList<String>(mergedUsers);<br/>\n    +Collections.sort(ret);<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> getTopoLogsGroups(Map topologyConf) {<br/>\n    +List<String> logsGroups = (List<String>)topologyConf.get(Config.LOGS_GROUPS);<br/>\n    +List<String> topologyGroups = (List<String>)topologyConf.get(Config.TOPOLOGY_GROUPS);<br/>\n    +Set<String> mergedGroups = new HashSet<String>();<br/>\n    +if (logsGroups != null) {<br/>\n    +    for (String group : logsGroups) {<br/>\n    +if (group != null) </p>\n{\n    +    mergedGroups.add(group);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +if (topologyGroups != null) {<br/>\n    +    for (String group : topologyGroups) {<br/>\n    +if (group != null) {    +    mergedGroups.add(group);    +}\n<p>    +    }<br/>\n    +}<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    See the above comment for users.  This should apply to groups as well.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643753/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/173327601","html_url":"https://github.com/apache/storm/pull/1030#issuecomment-173327601","issue_url":"https://api.github.com/repos/apache/storm/issues/1030","id":173327601,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MzMyNzYwMQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:09:50Z","updated_at":"2016-01-20T19:09:50Z","author_association":"CONTRIBUTOR","body":"overall things look fairly good.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/173327601/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643756","html_url":"https://github.com/apache/storm/issues/5064#issuecomment-2612643756","issue_url":"https://api.github.com/repos/apache/storm/issues/5064","id":2612643756,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDM3NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-01-20T19:09:51Z","updated_at":"2025-01-24T14:19:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1030#issuecomment-173327601\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1030#issuecomment-173327601</a></p>\n\n<p>    overall things look fairly good.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612643756/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]