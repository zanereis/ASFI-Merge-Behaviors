[{"url":"https://api.github.com/repos/apache/druid/issues/comments/300037496","html_url":"https://github.com/apache/druid/pull/4254#issuecomment-300037496","issue_url":"https://api.github.com/repos/apache/druid/issues/4254","id":300037496,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDAzNzQ5Ng==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T01:40:54Z","updated_at":"2017-05-09T01:40:54Z","author_association":"CONTRIBUTOR","body":"@jihoonson, yeah, code reviews are OK and just some doc changes were needed.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300037496/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300041440","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300041440","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300041440,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA0MTQ0MA==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T02:09:45Z","updated_at":"2017-05-09T02:09:45Z","author_association":"MEMBER","body":"Sure replicas pause when its the checkpoint time however both replicas may have read till different offsets in different partition. So after checkpoint is decided when they resume reading then some records for some partition may fall into next set of segments (after checkpoint) and some for the current set of segments (before checkpoint).\r\n\r\nI thought of the approach that you mentioned of having different sequenceName for set of segments corresponding to a checkpoint, so there will be a map of sequenceName -> activeSegments. In this case as you said, AppenderatorDriver will have to maintain state of map of sequenceName -> activeSegments, state of pending publishes which is essentially what DriverHolder is doing now.\r\n\r\nHowever, a kind of checkpoint table will still be needed because when a replica dies and a new task \r\nis spawned in its place, it needs to replay whatever has happened in the replica, for that it needs to know the checkpoints that have already been agreed on.\r\n\r\nBTW task checkpoint can be cleaned up automatically by making a simple change to the Segment published where the checkpoint information is also deleted as soon as corresponding driver has finished publishing its segments.\r\n\r\nHaving said all this I am totally OK with having a single AppenderatoDriver and getting rid of DriverHolder and task checkPoint table if we make it to work.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300041440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300046036","html_url":"https://github.com/apache/druid/pull/4252#issuecomment-300046036","issue_url":"https://api.github.com/repos/apache/druid/issues/4252","id":300046036,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA0NjAzNg==","user":{"login":"SerialVelocity","id":422338,"node_id":"MDQ6VXNlcjQyMjMzOA==","avatar_url":"https://avatars.githubusercontent.com/u/422338?v=4","gravatar_id":"","url":"https://api.github.com/users/SerialVelocity","html_url":"https://github.com/SerialVelocity","followers_url":"https://api.github.com/users/SerialVelocity/followers","following_url":"https://api.github.com/users/SerialVelocity/following{/other_user}","gists_url":"https://api.github.com/users/SerialVelocity/gists{/gist_id}","starred_url":"https://api.github.com/users/SerialVelocity/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SerialVelocity/subscriptions","organizations_url":"https://api.github.com/users/SerialVelocity/orgs","repos_url":"https://api.github.com/users/SerialVelocity/repos","events_url":"https://api.github.com/users/SerialVelocity/events{/privacy}","received_events_url":"https://api.github.com/users/SerialVelocity/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T02:44:01Z","updated_at":"2017-05-09T02:44:01Z","author_association":"NONE","body":"Just as a note, we think we've found a bug in the JDK9 compiler that is breaking things for us. It may be worth waiting until JDK9 is stable.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300046036/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300067423","html_url":"https://github.com/apache/druid/issues/4227#issuecomment-300067423","issue_url":"https://api.github.com/repos/apache/druid/issues/4227","id":300067423,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA2NzQyMw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T05:47:25Z","updated_at":"2017-05-09T05:47:25Z","author_association":"CONTRIBUTOR","body":"@gianm thanks for your comment. \r\n\r\n> For (3.2) there's no need to wait for handoff (meaning historical nodes loading the data), we just need to wait for publishing.\r\n\r\nActually, IndexTask uses ```NoopSegmentHandoffNotifierFactory``` which does nothing, so I think it would be fine to wait for handoff. However, [your another comment](https://github.com/druid-io/druid/pull/4238#discussion_r115151352) sounds good and it would be better if we can skip unnecessary call of ```NoopSegmentHandoffNotifierFactory```.\r\n\r\n> The lack of atomic publishing would mean that replacing existing data will be done non-atomically, which for some users is not acceptable. So I guess while early publishing is a useful option for other users, we would really want an option for loading large datasets \"all at once\" too so we can get guaranteed rollup and atomic publishing. Probably through parallelization. It could be a later patch though.\r\n\r\nDo you mean that it would be ok if I add a way for [guaranteed rollup](https://github.com/druid-io/druid/pull/4238#issuecomment-298817242) in a follow-up patch?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300067423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300068140","html_url":"https://github.com/apache/druid/issues/4227#issuecomment-300068140","issue_url":"https://api.github.com/repos/apache/druid/issues/4227","id":300068140,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA2ODE0MA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T05:53:03Z","updated_at":"2017-05-09T05:53:03Z","author_association":"CONTRIBUTOR","body":"> Actually, IndexTask uses NoopSegmentHandoffNotifierFactory which does nothing, so I think it would be fine to wait for handoff. However, your another comment sounds good and it would be better if we can skip unnecessary call of NoopSegmentHandoffNotifierFactory.\r\n\r\nFYI we're having a discussion about that design on a thread in https://github.com/druid-io/druid/pull/4178#issuecomment-299977548 too; I think that PR and #4238 have a lot of similarity in goals. I'm hoping we can find a design that will be simple and effective for everyone…\r\n\r\n> Do you mean that it would be ok if I add a way for guaranteed rollup in a follow-up patch?\r\n\r\nYeah, that's what I mean. Assuming guaranteeing rollup also means doing atomic publishing (it probably could; they seem related to me).","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300068140/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300068837","html_url":"https://github.com/apache/druid/issues/4227#issuecomment-300068837","issue_url":"https://api.github.com/repos/apache/druid/issues/4227","id":300068837,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA2ODgzNw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T05:58:11Z","updated_at":"2017-05-09T05:58:11Z","author_association":"CONTRIBUTOR","body":"Right, they would be related each other. \r\nOk. I'll first read #4178 and finish #4238, and then raise another pr for guaranteed rollup. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300068837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300069074","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300069074","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300069074,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDA2OTA3NA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T06:00:07Z","updated_at":"2017-05-09T06:00:07Z","author_association":"CONTRIBUTOR","body":"> I thought of the approach that you mentioned of having different sequenceName for set of segments corresponding to a checkpoint, so there will be a map of sequenceName -> activeSegments. In this case as you said, AppenderatorDriver will have to maintain state of map of sequenceName -> activeSegments, state of pending publishes which is essentially what DriverHolder is doing now.\r\n\r\nAh, that makes sense. It seems possible to me that making AppenderatorDriver the thing that does that would be simpler overall, so only one layer (namely: AppenderatorDriver) needs to worry about how active segments are tracked. Do you think it'd be better or worse to teach AppenderatorDriver how to do that sort of stuff?\r\n\r\n> However, a kind of checkpoint table will still be needed because when a replica dies and a new task is spawned in its place, it needs to replay whatever has happened in the replica, for that it needs to know the checkpoints that have already been agreed on.\r\n\r\nCould the supervisor start off the replacement task from the most recent metadata in the druid_datasources table we already have? It's acting like a checkpoint already, just there's only one of them. I think that should work if we assume that there will be at most one publish happening at a time. This is already assumed by the current system (the supervisor does start new tasks before old ones exit, but only one can be publishing or else there will be txn failures). For the sake of keeping things simple I think it's OK to keep assuming that.\r\n\r\n> Having said all this I am totally OK with having a single AppenderatoDriver and getting rid of DriverHolder and task checkPoint table if we make it to work.\r\n\r\nI hope we can do something like that in order to keep things simple, but if we end up not being able to, that's life. I'd at least try to work it all out though. Thanks for bearing with me.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300069074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300210109","html_url":"https://github.com/apache/druid/pull/4252#issuecomment-300210109","issue_url":"https://api.github.com/repos/apache/druid/issues/4252","id":300210109,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDIxMDEwOQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T15:55:46Z","updated_at":"2017-05-09T15:55:46Z","author_association":"MEMBER","body":"@gianm @drcrallen ok, I finally reverted `pom.xml` almost to the same state as before this PR, so Error Prone is optional, enabled via `mvn -Pstrict` in Travis. I updated `travis.yml` to omit `mvn install -DskipTests` step, because it was causing build timeouts, and seems unnecessary since we already do `mvn test` and `mvn -Pstrict compile test-compile`.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300210109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300210447","html_url":"https://github.com/apache/druid/pull/4252#issuecomment-300210447","issue_url":"https://api.github.com/repos/apache/druid/issues/4252","id":300210447,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDIxMDQ0Nw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T15:56:49Z","updated_at":"2017-05-09T15:56:49Z","author_association":"MEMBER","body":"@SerialVelocity interesting. Could you please share any details? E. g. link to OpenJDK mailing list thread, where this bug is discussed?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300210447/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300215656","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300215656","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300215656,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDIxNTY1Ng==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T16:10:24Z","updated_at":"2017-05-09T16:10:40Z","author_association":"MEMBER","body":"> Could the supervisor start off the replacement task from the most recent metadata in the druid_datasources table we already have? It's acting like a checkpoint already, just there's only one of them. I think that should work if we assume that there will be at most one publish happening at a time. This is already assumed by the current system (the supervisor does start new tasks before old ones exit, but only one can be publishing or else there will be txn failures). For the sake of keeping things simple I think it's OK to keep assuming that.\r\n\r\nThere is a corner case here - Suppose two replicas decided on a checkpoint and then one of the replica dies. Another replica has not consumed till the checkpoint and have not published segments corresponding to the checkpoint, thus dataSourceMetadata does not yet reflect the checkpoint. Supervisor start a replacement task which will miss this checkpoint and at some point when it reaches its maxRowsInSegmentLimit will send a CheckPoint request and wrong things will happen.\r\n\r\n> I hope we can do something like that in order to keep things simple, but if we end up not being able to, that's life. I'd at least try to work it all out though. Thanks for bearing with me.\r\n\r\nNo worries, I am fully onboard with making things simple.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300215656/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300243395","html_url":"https://github.com/apache/druid/pull/4229#issuecomment-300243395","issue_url":"https://api.github.com/repos/apache/druid/issues/4229","id":300243395,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDI0MzM5NQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T17:35:48Z","updated_at":"2017-05-09T17:35:48Z","author_association":"CONTRIBUTOR","body":"Discussed on the dev sync: since this is useful to you as-is, and making the change that you suggested would make the feature less useful to you, then it makes sense to go through with it as-is but to make it clear in the docs what the behavior would be and what the expected use case is. It seems like something pretty special-case to me.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300243395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300258776","html_url":"https://github.com/apache/druid/pull/3902#issuecomment-300258776","issue_url":"https://api.github.com/repos/apache/druid/issues/3902","id":300258776,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDI1ODc3Ng==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T18:26:16Z","updated_at":"2017-05-09T18:26:16Z","author_association":"CONTRIBUTOR","body":"@cheddar I also introduced `DataSegmentServerAnnouncer` and removed server announcements from `DataSegmentAnnouncer` implementation. Now only node who really serve segments will announce themselves in inventory and not random peon task processes.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300258776/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300260605","html_url":"https://github.com/apache/druid/pull/3902#issuecomment-300260605","issue_url":"https://api.github.com/repos/apache/druid/issues/3902","id":300260605,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDI2MDYwNQ==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T18:32:36Z","updated_at":"2017-05-09T18:32:36Z","author_association":"CONTRIBUTOR","body":"@gianm I still think we should keep it undocumented for now and not confuse regular users with a feature which is just to optimize things and haven't been used at scale yet. We will try and document it in next release probably.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300260605/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300260981","html_url":"https://github.com/apache/druid/pull/4229#issuecomment-300260981","issue_url":"https://api.github.com/repos/apache/druid/issues/4229","id":300260981,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDI2MDk4MQ==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T18:33:58Z","updated_at":"2017-05-09T18:33:58Z","author_association":"CONTRIBUTOR","body":"@gianm yep, lets keep it as is.\r\ntimeout handling is still very general and applies to everyone. maxScatterGatherBytes, may be not so much.\r\n\r\ni will updated the docs and resolve review comments.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300260981/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300263753","html_url":"https://github.com/apache/druid/pull/4259#issuecomment-300263753","issue_url":"https://api.github.com/repos/apache/druid/issues/4259","id":300263753,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDI2Mzc1Mw==","user":{"login":"gkc2104","id":5611566,"node_id":"MDQ6VXNlcjU2MTE1NjY=","avatar_url":"https://avatars.githubusercontent.com/u/5611566?v=4","gravatar_id":"","url":"https://api.github.com/users/gkc2104","html_url":"https://github.com/gkc2104","followers_url":"https://api.github.com/users/gkc2104/followers","following_url":"https://api.github.com/users/gkc2104/following{/other_user}","gists_url":"https://api.github.com/users/gkc2104/gists{/gist_id}","starred_url":"https://api.github.com/users/gkc2104/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gkc2104/subscriptions","organizations_url":"https://api.github.com/users/gkc2104/orgs","repos_url":"https://api.github.com/users/gkc2104/repos","events_url":"https://api.github.com/users/gkc2104/events{/privacy}","received_events_url":"https://api.github.com/users/gkc2104/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T18:43:44Z","updated_at":"2017-05-09T18:43:44Z","author_association":"CONTRIBUTOR","body":"Given that the config is specific to the broker's `runtime.properties`, would other nodes like historical's be able to have their own `SegmentMetadataQueryConfig`, as this where it gets set, and that would also mean that they would be using different ToolChests as well, is it intended for them to be able to set different `defaultHistory` as well.\r\n\r\nIt has been reimplemented to not be reliant on the query for analysisTypes in `SegmentMetadataQueryQueryToolChest `, I extract it from the ToolChest in\r\nhttps://github.com/metamx/druid/blob/defaultAnalysisUpdate/processing/src/main/java/io/druid/query/metadata/SegmentMetadataQueryRunnerFactory.java#L93\r\nand use that at all the places analysisTypes is required in the QueryRunnerFactory, to rely on analysisTypes of the config, if not in the query.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300263753/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300266523","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300266523","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300266523,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDI2NjUyMw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T18:53:21Z","updated_at":"2017-05-09T18:53:33Z","author_association":"CONTRIBUTOR","body":"> There is a corner case here - Suppose two replicas decided on a checkpoint and then one of the replica dies. Another replica has not consumed till the checkpoint and have not published segments corresponding to the checkpoint, thus dataSourceMetadata does not yet reflect the checkpoint. Supervisor start a replacement task which will miss this checkpoint and at some point when it reaches its maxRowsInSegmentLimit will send a CheckPoint request and wrong things will happen.\r\n\r\nWhat sort of wrong things would happen?\r\n\r\nI think in the case you're talking about, the supervisor would get a checkpoint request that is \"behind\" the currently published datasource metadata. Would it help if the supervisor then told the task something like, \"hey, you're really behind, you should toss out what you have and start over from here: &lt;insert current metadata&gt;\"","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300266523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300272491","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300272491","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300272491,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDI3MjQ5MQ==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T19:15:04Z","updated_at":"2017-05-09T19:15:04Z","author_association":"MEMBER","body":"So you are assuming that when the replacement task reaches its maxRowsInSegment limit then the other replica which was alive would have published the segments and updated the metadata store. I was not assuming this. Although it seems like a valid assumption, I am not sure if there is a corner case where this assumption breaks. Anyways assuming the assumption is correct, the approach you described could work. I guess only once it is implemented the corner cases will be known.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300272491/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300282710","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300282710","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300282710,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDI4MjcxMA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T19:54:44Z","updated_at":"2017-05-09T19:54:44Z","author_association":"CONTRIBUTOR","body":"> So you are assuming that when the replacement task reaches its maxRowsInSegment limit then the other replica which was alive would have published the segments and updated the metadata store.\r\n\r\nI was thinking not necessarily that it would have, but more that if it did, then we could detect that and skip forwards the laggard. But talking about this makes me think that the system for replacing failed tasks might respond too slowly and re-read too much data from kafka. So probably what I suggested wouldn't work well for that reason.\r\n\r\nWould it work to do something like this instead?\r\n\r\n1. Store \"committed checkpoint\" in druid_datasources, same as current master.\r\n2. Store \"pending checkpoints\" (the start/end offsets that the tasks are currently trying to agree on, or have agreed on, but haven't published yet) in memory on tasks and on the supervisor -- not in a table. The supervisor's job is to help the tasks negotiate the specific ending offsets.\r\n3. If a task dies, the supervisor can replace it and have it participate in the most recent pending checkpoint (by reading from the start and participating in negotiation). If there is none then have it start from the most recently committed checkpoint (in the druid_datasources table)\r\n4. If the supervisor dies, the its replacement supervisor should check the committed metadata in druid_datasources, then contact the running tasks and ask them (via http) if there is a pending checkpoint or not, and based on their answers, initialize its view of the world and continue negotiation if necessary. If the tasks provide contradictory answers for some reason, the supervisor should pick its favorite and kill and replace tasks that don't agree (this shouldn't happen in any normal situation but is more of a sanity check).\r\n5. If a supervisor comes to know that a task is lagging really far behind (perhaps through a checkpoint request for offsets earlier than the currently committed ones) then it should kill and replace the task.\r\n6. If all the tasks and the supervisor all die, the new supervisor should resume from the last committed checkpoint in druid_datasources.\r\n\r\nDo you think this seems better or worse? In my mind the benefit is not needing a checkpoint table, and instead keeping decisions about what tasks should be doing in the hands of the supervisor.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300282710/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300316420","html_url":"https://github.com/apache/druid/pull/4260#issuecomment-300316420","issue_url":"https://api.github.com/repos/apache/druid/issues/4260","id":300316420,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDMxNjQyMA==","user":{"login":"akashdw","id":5886276,"node_id":"MDQ6VXNlcjU4ODYyNzY=","avatar_url":"https://avatars.githubusercontent.com/u/5886276?v=4","gravatar_id":"","url":"https://api.github.com/users/akashdw","html_url":"https://github.com/akashdw","followers_url":"https://api.github.com/users/akashdw/followers","following_url":"https://api.github.com/users/akashdw/following{/other_user}","gists_url":"https://api.github.com/users/akashdw/gists{/gist_id}","starred_url":"https://api.github.com/users/akashdw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akashdw/subscriptions","organizations_url":"https://api.github.com/users/akashdw/orgs","repos_url":"https://api.github.com/users/akashdw/repos","events_url":"https://api.github.com/users/akashdw/events{/privacy}","received_events_url":"https://api.github.com/users/akashdw/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-09T22:10:14Z","updated_at":"2017-05-09T22:10:14Z","author_association":"CONTRIBUTOR","body":"test timed out, reopening PR.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300316420/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300335463","html_url":"https://github.com/apache/druid/pull/4198#issuecomment-300335463","issue_url":"https://api.github.com/repos/apache/druid/issues/4198","id":300335463,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDMzNTQ2Mw==","user":{"login":"fjy","id":428325,"node_id":"MDQ6VXNlcjQyODMyNQ==","avatar_url":"https://avatars.githubusercontent.com/u/428325?v=4","gravatar_id":"","url":"https://api.github.com/users/fjy","html_url":"https://github.com/fjy","followers_url":"https://api.github.com/users/fjy/followers","following_url":"https://api.github.com/users/fjy/following{/other_user}","gists_url":"https://api.github.com/users/fjy/gists{/gist_id}","starred_url":"https://api.github.com/users/fjy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fjy/subscriptions","organizations_url":"https://api.github.com/users/fjy/orgs","repos_url":"https://api.github.com/users/fjy/repos","events_url":"https://api.github.com/users/fjy/events{/privacy}","received_events_url":"https://api.github.com/users/fjy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T00:02:15Z","updated_at":"2017-05-10T00:02:15Z","author_association":"CONTRIBUTOR","body":"@jihoonson let me know when i should close this PR","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300335463/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300337334","html_url":"https://github.com/apache/druid/pull/4259#issuecomment-300337334","issue_url":"https://api.github.com/repos/apache/druid/issues/4259","id":300337334,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDMzNzMzNA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T00:15:15Z","updated_at":"2017-05-10T00:15:15Z","author_association":"MEMBER","body":"@fjy this PR actually blocks us from updating to **0.10.0** (even not 0.10.1), so it fits the criteria that I suggested before, unlike many other PRs that currently target 0.10.1, and don't block anybody from updating to 0.10.0.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300337334/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300341020","html_url":"https://github.com/apache/druid/pull/3718#issuecomment-300341020","issue_url":"https://api.github.com/repos/apache/druid/issues/3718","id":300341020,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDM0MTAyMA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T00:43:24Z","updated_at":"2017-05-10T00:43:24Z","author_association":"MEMBER","body":"@jihoonson do you still need this?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300341020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300341264","html_url":"https://github.com/apache/druid/pull/4259#issuecomment-300341264","issue_url":"https://api.github.com/repos/apache/druid/issues/4259","id":300341264,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDM0MTI2NA==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T00:44:37Z","updated_at":"2017-05-10T00:45:01Z","author_association":"CONTRIBUTOR","body":"I think @gianm is proposing that the broker overwrite the analysis types if null is passed in, and if someone sets `druid.query.segmentMetadata.defaultAnalysisType` differently on historicals than brokers, then the broker setting should be enforced. If someone queries historicals directly, then caveat emptor. Or in other words, `druid.query.segmentMetadata.defaultAnalysisType` should never do anything on historicals unless someone is querying the historicals directly.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300341264/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300347537","html_url":"https://github.com/apache/druid/pull/4254#issuecomment-300347537","issue_url":"https://api.github.com/repos/apache/druid/issues/4254","id":300347537,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDM0NzUzNw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T01:26:52Z","updated_at":"2017-05-10T01:26:52Z","author_association":"CONTRIBUTOR","body":"@gianm I merged #4198 and addressed your comments.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300347537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300347681","html_url":"https://github.com/apache/druid/pull/3718#issuecomment-300347681","issue_url":"https://api.github.com/repos/apache/druid/issues/3718","id":300347681,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDM0NzY4MQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T01:27:48Z","updated_at":"2017-05-10T01:27:48Z","author_association":"CONTRIBUTOR","body":"@leventov hmm, no. I'll close this pr.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300347681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300349008","html_url":"https://github.com/apache/druid/pull/4198#issuecomment-300349008","issue_url":"https://api.github.com/repos/apache/druid/issues/4198","id":300349008,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDM0OTAwOA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T01:36:40Z","updated_at":"2017-05-10T01:36:40Z","author_association":"CONTRIBUTOR","body":"@fjy I've just merged this patch into #4254.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300349008/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300410518","html_url":"https://github.com/apache/druid/pull/4259#issuecomment-300410518","issue_url":"https://api.github.com/repos/apache/druid/issues/4259","id":300410518,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDQxMDUxOA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T08:20:17Z","updated_at":"2017-05-10T08:20:17Z","author_association":"CONTRIBUTOR","body":"Yeah, I meant what @drcrallen said.\r\n\r\nIn particular I'm suggesting that if the broker receives a query without analysisTypes set, it should rewrite the query to include analysisTypes before it passes it down to other nodes. Otherwise different nodes involved in the query might not agree on what the analysisTypes are, which could cause weird results.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300410518/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300532132","html_url":"https://github.com/apache/druid/pull/4184#issuecomment-300532132","issue_url":"https://api.github.com/repos/apache/druid/issues/4184","id":300532132,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDUzMjEzMg==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T16:08:12Z","updated_at":"2017-05-10T16:08:12Z","author_association":"CONTRIBUTOR","body":"I'm holding off on merge for a few hours to give @cheddar a chance to check it out at a high level.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300532132/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300549054","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300549054","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300549054,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDU0OTA1NA==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T17:07:40Z","updated_at":"2017-05-10T17:07:40Z","author_association":"MEMBER","body":"Conceptually this sound good to me. I have some more questions/comments - \r\n1. I don't fully understand what you mean by _\"have it participate in the most recent pending checkpoint (by reading from the start and participating in negotiation)\"_ I see it working this way - Once a pending checkpoint is decided on by replicas it is fixed and after that if one or all of them dies, the replacement task will always start reading from the last commit checkpoint and will get all the pending checkpoints which are logically after the last committed checkpoint. So there is no negotiation as such which the replacement task will do, can you clarify this ?\r\n2. In the new implementation also the task will have to locally persist metadata about list of sequenceNames and their corresponding start, end offsets and final checkpoint so that when task is restarted the state can be restored locally. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300549054/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300575400","html_url":"https://github.com/apache/druid/pull/4184#issuecomment-300575400","issue_url":"https://api.github.com/repos/apache/druid/issues/4184","id":300575400,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDU3NTQwMA==","user":{"login":"cheddar","id":216778,"node_id":"MDQ6VXNlcjIxNjc3OA==","avatar_url":"https://avatars.githubusercontent.com/u/216778?v=4","gravatar_id":"","url":"https://api.github.com/users/cheddar","html_url":"https://github.com/cheddar","followers_url":"https://api.github.com/users/cheddar/followers","following_url":"https://api.github.com/users/cheddar/following{/other_user}","gists_url":"https://api.github.com/users/cheddar/gists{/gist_id}","starred_url":"https://api.github.com/users/cheddar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cheddar/subscriptions","organizations_url":"https://api.github.com/users/cheddar/orgs","repos_url":"https://api.github.com/users/cheddar/repos","events_url":"https://api.github.com/users/cheddar/events{/privacy}","received_events_url":"https://api.github.com/users/cheddar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T18:39:21Z","updated_at":"2017-05-10T18:39:21Z","author_association":"CONTRIBUTOR","body":"Looked over the general interfaces and stuff and it looks good to me.  The one bit of a rabbit hole I went down is why we are lazily instantiating the QueryMetrics instead of doing it at `wrap`, which was clearly because we need the `Toolchest`.  That then got me thinking that it might be nice to actually attach the Toolchest to QueryPlus at some point as well.\r\n\r\n👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300575400/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300586017","html_url":"https://github.com/apache/druid/pull/4184#issuecomment-300586017","issue_url":"https://api.github.com/repos/apache/druid/issues/4184","id":300586017,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDU4NjAxNw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-10T19:20:16Z","updated_at":"2017-05-10T19:20:16Z","author_association":"MEMBER","body":"@cheddar thanks. Please merge?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300586017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300647255","html_url":"https://github.com/apache/druid/pull/4193#issuecomment-300647255","issue_url":"https://api.github.com/repos/apache/druid/issues/4193","id":300647255,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDY0NzI1NQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T00:15:04Z","updated_at":"2017-05-11T00:15:04Z","author_association":"CONTRIBUTOR","body":"The travis failure seems to not relate to this patch. I'll close and reopen this pr.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300647255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300652803","html_url":"https://github.com/apache/druid/pull/4259#issuecomment-300652803","issue_url":"https://api.github.com/repos/apache/druid/issues/4259","id":300652803,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDY1MjgwMw==","user":{"login":"gkc2104","id":5611566,"node_id":"MDQ6VXNlcjU2MTE1NjY=","avatar_url":"https://avatars.githubusercontent.com/u/5611566?v=4","gravatar_id":"","url":"https://api.github.com/users/gkc2104","html_url":"https://github.com/gkc2104","followers_url":"https://api.github.com/users/gkc2104/followers","following_url":"https://api.github.com/users/gkc2104/following{/other_user}","gists_url":"https://api.github.com/users/gkc2104/gists{/gist_id}","starred_url":"https://api.github.com/users/gkc2104/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gkc2104/subscriptions","organizations_url":"https://api.github.com/users/gkc2104/orgs","repos_url":"https://api.github.com/users/gkc2104/repos","events_url":"https://api.github.com/users/gkc2104/events{/privacy}","received_events_url":"https://api.github.com/users/gkc2104/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T00:57:25Z","updated_at":"2017-05-11T00:57:25Z","author_association":"CONTRIBUTOR","body":"I'm not sure if this was the best way of doing it, but I made the `analysisType` field of `SegmentMetadatQuery` not final, and provided a setter, that is used to updated the query in all calls of query in the overridden methods of `QueryToolChest` not only `mergeResults`, and also defaulted the cache strategy and other methods that relied on analysis Tupe to be provided by the query","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300652803/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300661734","html_url":"https://github.com/apache/druid/pull/4193#issuecomment-300661734","issue_url":"https://api.github.com/repos/apache/druid/issues/4193","id":300661734,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDY2MTczNA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T02:02:21Z","updated_at":"2017-05-11T02:02:21Z","author_association":"CONTRIBUTOR","body":"Hmm, I'm looking at the failure.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300661734/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300676958","html_url":"https://github.com/apache/druid/pull/4207#issuecomment-300676958","issue_url":"https://api.github.com/repos/apache/druid/issues/4207","id":300676958,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDY3Njk1OA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T04:07:47Z","updated_at":"2017-05-11T04:07:47Z","author_association":"CONTRIBUTOR","body":"I have to admit. Sometimes I think that a better approach, instead of this, would be to extend expressions to be able to return strings, and implement some extra functions for expressions like strlen, substring, etc. Then expressions could be the one layer to rule them all.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300676958/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300677871","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300677871","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300677871,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDY3Nzg3MQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T04:15:50Z","updated_at":"2017-05-11T04:15:50Z","author_association":"CONTRIBUTOR","body":"What I was thinking was,\r\n\r\n1. By \"have it participate in the most recent pending checkpoint (by reading from the start and participating in negotiation)\" I meant just that if a the checkpoint negotiation process had started, but a checkpoint hadn't been settled on yet, the new task could participate. If one was already settled on then the supervisor should just tell the new task about it and the new task should respect that.\r\n\r\n2. That doesn't sound too crazy to me, it's similar-ish to the kinds of metadata they persist already.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300677871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300678890","html_url":"https://github.com/apache/druid/pull/4254#issuecomment-300678890","issue_url":"https://api.github.com/repos/apache/druid/issues/4254","id":300678890,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDY3ODg5MA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T04:25:19Z","updated_at":"2017-05-11T04:25:19Z","author_association":"CONTRIBUTOR","body":"thx @jihoonson, just re-reviewed.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300678890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300706421","html_url":"https://github.com/apache/druid/pull/4254#issuecomment-300706421","issue_url":"https://api.github.com/repos/apache/druid/issues/4254","id":300706421,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDcwNjQyMQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T07:29:25Z","updated_at":"2017-05-11T07:29:25Z","author_association":"CONTRIBUTOR","body":"@gianm thanks. I addressed your comments.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300706421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300855182","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300855182","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300855182,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDg1NTE4Mg==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T17:10:32Z","updated_at":"2017-05-11T17:13:18Z","author_association":"MEMBER","body":"This sounds good to me. Another point that came in up in internal discussion is that we should not change `finish` and `publishAll` to return `Future` rather have the task decide whether to call these methods in a separate executor so that tasks have control of thread management.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300855182/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300888100","html_url":"https://github.com/apache/druid/pull/4265#issuecomment-300888100","issue_url":"https://api.github.com/repos/apache/druid/issues/4265","id":300888100,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDg4ODEwMA==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T19:09:35Z","updated_at":"2017-05-11T19:09:35Z","author_association":"CONTRIBUTOR","body":"@blugowski thanks for the contribution, i am on board with the change but if my understanding is correct the plain text one you are adding will not support batching of multiple events. If my claim is correct we need to make sure to update the docs to make sure that users understand the eventual difference in terms of operation and performance as well.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300888100/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300894657","html_url":"https://github.com/apache/druid/pull/4079#issuecomment-300894657","issue_url":"https://api.github.com/repos/apache/druid/issues/4079","id":300894657,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDg5NDY1Nw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T19:35:49Z","updated_at":"2017-05-11T19:35:49Z","author_association":"MEMBER","body":"@drcrallen I've changed existing tests so that they cover all added \"prototypes\" (and it helped to find bugs).\r\n\r\nRegarding testing `inspectRuntimeShape()`, I don't think it's needed. Mistakes in inspectRuntimeShape would cause performance regression at worst, and to the level not worse than pre-#3798.\r\n\r\nManual testing of `inspectRuntimeShape()` is\r\n 1) a giant amount of work\r\n 2) often not possible, with anonymous or private classes\r\n 3) still won't help much, because most likely type of mistake is adding a new field to `HotLoopCallee`-extending class, that should be inspected, but forgetting to add it to `inspectRuntimeShape()`. But in this case manual test would still pass, because it is also not updated.\r\n\r\nWays to test `inspectRuntimeShape()` automatically *could* exist, some approaches possibly similar to mocking, when entering `@CalledFromHotLoop`-annotated methods is recorded, entering downstream methods is recorded, and checking that for the same runtime shape, the same methods are called at all downstream call sites. However it's a huge and complex task to develop such automated `inspectRuntimeShape()` testing framework, and definitely not as part of this PR.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300894657/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300930571","html_url":"https://github.com/apache/druid/pull/4259#issuecomment-300930571","issue_url":"https://api.github.com/repos/apache/druid/issues/4259","id":300930571,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDkzMDU3MQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T22:08:29Z","updated_at":"2017-05-11T22:08:29Z","author_association":"MEMBER","body":"@gkc2104 BTW is this valid that `SegmentMetadataQueryQueryToolChest.filterSegments()` doesn't use intervals of the query?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300930571/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300942301","html_url":"https://github.com/apache/druid/pull/4259#issuecomment-300942301","issue_url":"https://api.github.com/repos/apache/druid/issues/4259","id":300942301,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDk0MjMwMQ==","user":{"login":"gkc2104","id":5611566,"node_id":"MDQ6VXNlcjU2MTE1NjY=","avatar_url":"https://avatars.githubusercontent.com/u/5611566?v=4","gravatar_id":"","url":"https://api.github.com/users/gkc2104","html_url":"https://github.com/gkc2104","followers_url":"https://api.github.com/users/gkc2104/followers","following_url":"https://api.github.com/users/gkc2104/following{/other_user}","gists_url":"https://api.github.com/users/gkc2104/gists{/gist_id}","starred_url":"https://api.github.com/users/gkc2104/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gkc2104/subscriptions","organizations_url":"https://api.github.com/users/gkc2104/orgs","repos_url":"https://api.github.com/users/gkc2104/repos","events_url":"https://api.github.com/users/gkc2104/events{/privacy}","received_events_url":"https://api.github.com/users/gkc2104/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-11T23:19:34Z","updated_at":"2017-05-11T23:19:34Z","author_association":"CONTRIBUTOR","body":"@leventov Agreed, it is building a new interval using Default History and the max segment time.\r\nI added a failing test that shows this as well, If you feel that the filtering is being handled incorrectly, I could update it in this PR itself\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300942301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300990810","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-300990810","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":300990810,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDk5MDgxMA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T05:58:29Z","updated_at":"2017-05-12T05:58:29Z","author_association":"CONTRIBUTOR","body":"> Another point that came in up in internal discussion is that we should not change finish and publishAll to return Future rather have the task decide whether to call these methods in a separate executor so that tasks have control of thread management.\r\n\r\nI don't understand what that buys us. AppenderatorImpl already does its own thread management and many of its methods return futures already.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300990810/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/300999301","html_url":"https://github.com/apache/druid/pull/4236#issuecomment-300999301","issue_url":"https://api.github.com/repos/apache/druid/issues/4236","id":300999301,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDk5OTMwMQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T06:57:09Z","updated_at":"2017-05-12T06:57:09Z","author_association":"CONTRIBUTOR","body":"@drcrallen what is the incompatible thing about this?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/300999301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301015637","html_url":"https://github.com/apache/druid/pull/4265#issuecomment-301015637","issue_url":"https://api.github.com/repos/apache/druid/issues/4265","id":301015637,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTAxNTYzNw==","user":{"login":"blugowski","id":22055014,"node_id":"MDQ6VXNlcjIyMDU1MDE0","avatar_url":"https://avatars.githubusercontent.com/u/22055014?v=4","gravatar_id":"","url":"https://api.github.com/users/blugowski","html_url":"https://github.com/blugowski","followers_url":"https://api.github.com/users/blugowski/followers","following_url":"https://api.github.com/users/blugowski/following{/other_user}","gists_url":"https://api.github.com/users/blugowski/gists{/gist_id}","starred_url":"https://api.github.com/users/blugowski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blugowski/subscriptions","organizations_url":"https://api.github.com/users/blugowski/orgs","repos_url":"https://api.github.com/users/blugowski/repos","events_url":"https://api.github.com/users/blugowski/events{/privacy}","received_events_url":"https://api.github.com/users/blugowski/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T08:23:43Z","updated_at":"2017-05-12T08:23:43Z","author_association":"CONTRIBUTOR","body":"@b-slim yes, you're correct, batching is supported only by pickle protocol. I've added appropriate comments in _Introduction_ and description of `druid.emitter.graphite.batchSize`. Is it good enough?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301015637/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301026199","html_url":"https://github.com/apache/druid/pull/4252#issuecomment-301026199","issue_url":"https://api.github.com/repos/apache/druid/issues/4252","id":301026199,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTAyNjE5OQ==","user":{"login":"SerialVelocity","id":422338,"node_id":"MDQ6VXNlcjQyMjMzOA==","avatar_url":"https://avatars.githubusercontent.com/u/422338?v=4","gravatar_id":"","url":"https://api.github.com/users/SerialVelocity","html_url":"https://github.com/SerialVelocity","followers_url":"https://api.github.com/users/SerialVelocity/followers","following_url":"https://api.github.com/users/SerialVelocity/following{/other_user}","gists_url":"https://api.github.com/users/SerialVelocity/gists{/gist_id}","starred_url":"https://api.github.com/users/SerialVelocity/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SerialVelocity/subscriptions","organizations_url":"https://api.github.com/users/SerialVelocity/orgs","repos_url":"https://api.github.com/users/SerialVelocity/repos","events_url":"https://api.github.com/users/SerialVelocity/events{/privacy}","received_events_url":"https://api.github.com/users/SerialVelocity/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T09:12:59Z","updated_at":"2017-05-12T09:13:11Z","author_association":"NONE","body":"@leventov I haven't submitted it as a bug yet, I may do in a couple of days when I have some more time, but here's a minimal repro (writing from memory):\r\n```java\r\nimport java.util.function.BiFunction;\r\n\r\npublic class Bob {\r\n  private static int getVarArgsSize(Bob... bobs) {\r\n    return bobs.length;\r\n  }\r\n\r\n  private static int runBiFunction(BiFunction<Bob, Bob, Integer> function, Bob a, Bob b) {\r\n    return function.apply(a, b);\r\n  }\r\n\r\n  public static void main(String[] args) {\r\n    assert runBiFunction(Bob::getVarArgsSize, new Bob(), new Bob()) == 2;\r\n  }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301026199/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301089017","html_url":"https://github.com/apache/druid/pull/4236#issuecomment-301089017","issue_url":"https://api.github.com/repos/apache/druid/issues/4236","id":301089017,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTA4OTAxNw==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T14:17:22Z","updated_at":"2017-05-12T14:17:22Z","author_association":"CONTRIBUTOR","body":"It exposed an mbean as a way of configuring log level. It was an undocumented \"api\" so is probably ok to remove, but if anyone happened to use the mbean it can screw up their operations stuff.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301089017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301091522","html_url":"https://github.com/apache/druid/pull/4269#issuecomment-301091522","issue_url":"https://api.github.com/repos/apache/druid/issues/4269","id":301091522,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTA5MTUyMg==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T14:26:32Z","updated_at":"2017-05-12T14:26:32Z","author_association":"CONTRIBUTOR","body":"@logarithm, out of curiosity,  any measurable difference  ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301091522/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301111449","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-301111449","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":301111449,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTExMTQ0OQ==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T15:40:05Z","updated_at":"2017-05-12T15:40:05Z","author_association":"MEMBER","body":"So that Index Task can do publish and finish in same thread and KafkaIndexTask can do in another executor. Are you proposing to change the methods to accept executor as well which will be used to do the work or the driver always uses its own executor irrespective of task type ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301111449/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301118996","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-301118996","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":301118996,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTExODk5Ng==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T16:09:29Z","updated_at":"2017-05-12T16:09:29Z","author_association":"CONTRIBUTOR","body":"I was thinking that if the AppenderatorDriver needs an executor, it would have its own, which I guess could be passed in by the task if Index and KafkaIndex want to do different things.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301118996/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301120294","html_url":"https://github.com/apache/druid/pull/2660#issuecomment-301120294","issue_url":"https://api.github.com/repos/apache/druid/issues/2660","id":301120294,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTEyMDI5NA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T16:14:44Z","updated_at":"2017-05-12T16:14:44Z","author_association":"CONTRIBUTOR","body":"@himanshug are you still planning on working on this?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301120294/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301127389","html_url":"https://github.com/apache/druid/pull/3902#issuecomment-301127389","issue_url":"https://api.github.com/repos/apache/druid/issues/3902","id":301127389,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTEyNzM4OQ==","user":{"login":"cheddar","id":216778,"node_id":"MDQ6VXNlcjIxNjc3OA==","avatar_url":"https://avatars.githubusercontent.com/u/216778?v=4","gravatar_id":"","url":"https://api.github.com/users/cheddar","html_url":"https://github.com/cheddar","followers_url":"https://api.github.com/users/cheddar/followers","following_url":"https://api.github.com/users/cheddar/following{/other_user}","gists_url":"https://api.github.com/users/cheddar/gists{/gist_id}","starred_url":"https://api.github.com/users/cheddar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cheddar/subscriptions","organizations_url":"https://api.github.com/users/cheddar/orgs","repos_url":"https://api.github.com/users/cheddar/repos","events_url":"https://api.github.com/users/cheddar/events{/privacy}","received_events_url":"https://api.github.com/users/cheddar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T16:44:53Z","updated_at":"2017-05-12T16:44:53Z","author_association":"CONTRIBUTOR","body":"👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301127389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301130126","html_url":"https://github.com/apache/druid/pull/4229#issuecomment-301130126","issue_url":"https://api.github.com/repos/apache/druid/issues/4229","id":301130126,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTEzMDEyNg==","user":{"login":"cheddar","id":216778,"node_id":"MDQ6VXNlcjIxNjc3OA==","avatar_url":"https://avatars.githubusercontent.com/u/216778?v=4","gravatar_id":"","url":"https://api.github.com/users/cheddar","html_url":"https://github.com/cheddar","followers_url":"https://api.github.com/users/cheddar/followers","following_url":"https://api.github.com/users/cheddar/following{/other_user}","gists_url":"https://api.github.com/users/cheddar/gists{/gist_id}","starred_url":"https://api.github.com/users/cheddar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cheddar/subscriptions","organizations_url":"https://api.github.com/users/cheddar/orgs","repos_url":"https://api.github.com/users/cheddar/repos","events_url":"https://api.github.com/users/cheddar/events{/privacy}","received_events_url":"https://api.github.com/users/cheddar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T16:56:38Z","updated_at":"2017-05-12T16:56:38Z","author_association":"CONTRIBUTOR","body":"👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301130126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301145555","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301145555","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301145555,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE0NTU1NQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T18:02:12Z","updated_at":"2017-05-12T18:02:37Z","author_association":"CONTRIBUTOR","body":"@pjain1 very cool! Will fit in well with work we've been doing to add basic authentication, which requires https to be effective…\r\n\r\nHow would a transition from http to https look for a cluster? For outwards-facing APIs, could they be served on both http and https for some transition period, before the user decides to cut over to https completely? I think something like that is necessary to avoid disrupting clients. (i.e. a three part migration: first enable both http/https on Druid, then switch clients to https, then turn off http on Druid)\r\n\r\nFor inwards-facing APIs, like historical, middleManager, task announcement, etc, what's the idea there? The fact that \"scheme\" is added but there's still only one \"port\" makes me think that they won't support both http and https at the same time. How would we do a rolling update in that case?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301145555/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301146501","html_url":"https://github.com/apache/druid/pull/3482#issuecomment-301146501","issue_url":"https://api.github.com/repos/apache/druid/issues/3482","id":301146501,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE0NjUwMQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T18:06:15Z","updated_at":"2017-05-12T18:06:15Z","author_association":"CONTRIBUTOR","body":"@himanshug sorry for not replying so many months ago. I bet it was right before holiday and then I forgot about it! IIRC, those things I mentioned were the only major issues I had at the time.\r\n\r\nAre you still interested in working on this? Some desire for similar functionality has come up internally so we have renewed interest.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301146501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301158714","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301158714","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301158714,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE1ODcxNA==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T18:58:33Z","updated_at":"2017-05-12T18:58:41Z","author_association":"MEMBER","body":"We did not wanted to support two ports simultaneously on nodes to avoid complexity and code which will not be useful in future. This is what we thought about how rolling upgrade will work - \r\n1. Upgrade code on all nodes and put all other necessary infrastructure for certificates and keys. By default all service will keep on running using `http`.\r\n2. Provide an implementation of `SSLContext` at all nodes (through an extension). Now the HttpClient on all nodes can talk to https enabled services if they are announcing scheme as https.\r\n3. Now all the nodes can be upgraded one by one since nodes always look at the scheme to decide whether to talk on http or https.\r\n4. External client have to handle https at some point so they should somehow handle this transition, probably they can have some logic where they can try connecting on https and if it doesn't work then fall back to http.\r\n\r\nWe thought of the three phase approach but thought it might a lot of unnecessary complexity to code which is not so nice. What do you think ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301158714/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301159606","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301159606","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301159606,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE1OTYwNg==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T19:02:13Z","updated_at":"2017-05-12T19:02:13Z","author_association":"MEMBER","body":"For the 4. point about external clients, actually they should also the external discovery to figure out the scheme and use that and then there won't be any disruptions.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301159606/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301167103","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301167103","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301167103,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE2NzEwMw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T19:35:49Z","updated_at":"2017-05-12T19:35:49Z","author_association":"CONTRIBUTOR","body":"For the internally-facing APIs I think it's workable to only listen/announce one scheme at a time.\r\n\r\nBut for the externally-facing APIs I think users will really appreciate it if we listen on two ports for a while. That's because a _lot_ of peoples' clients don't use Curator service discovery to find Druid -- they use some other mechanism, like load balancers, VIPs, or even hard-coded URLs.\r\n\r\n> External client have to handle https at some point so they should somehow handle this transition, probably they can have some logic where they can try connecting on https and if it doesn't work then fall back to http.\r\n\r\nSome clients don't have the ability to use such custom logic, such as if your client is actually a load balancer or VIP where you can't configure a fallback like that. And even for clients that do have the ability to use custom logic, we'd be asking users to write code to implement that, which is a burden on them.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301167103/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301168189","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301168189","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301168189,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE2ODE4OQ==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T19:41:12Z","updated_at":"2017-05-12T19:41:12Z","author_association":"MEMBER","body":"Sounds like a valid concern. @himanshug @cheddar Do you have any opinions on Gian's comment.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301168189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301172253","html_url":"https://github.com/apache/druid/pull/4256#issuecomment-301172253","issue_url":"https://api.github.com/repos/apache/druid/issues/4256","id":301172253,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE3MjI1Mw==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:01:08Z","updated_at":"2017-05-12T20:01:08Z","author_association":"MEMBER","body":"If some offsets are skipped for a partition, does the offset in nextOffsets map for that partition still need to increment by only 1 or should it be update to an offset after the latest ingested offset ?\r\n\r\nAlso after updating nextOffsets map, there is check for whether the task has ingested all the records for a particular partition and that is done by checking if the next offset is equal to the end offset. Does this need to change to equal to or greater than check ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301172253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301172793","html_url":"https://github.com/apache/druid/pull/4229#issuecomment-301172793","issue_url":"https://api.github.com/repos/apache/druid/issues/4229","id":301172793,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE3Mjc5Mw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:03:52Z","updated_at":"2017-05-12T20:03:52Z","author_association":"CONTRIBUTOR","body":"@cheddar, should be good to merge if you reviewed the code, since I assume @himanshug implicitly approves the design of his own patch.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301172793/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301175709","html_url":"https://github.com/apache/druid/pull/4201#issuecomment-301175709","issue_url":"https://api.github.com/repos/apache/druid/issues/4201","id":301175709,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE3NTcwOQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:17:32Z","updated_at":"2017-05-12T20:17:32Z","author_association":"CONTRIBUTOR","body":"IMO we should go with radically fewer, but more detailed, pages. I think Druid's large number of doc pages doesn't really help make things organized, it just makes it hard to find information. IMO, this is because for some questions people have, it's not clear which doc to click on, and their needs would be better served by longer doc pages that collect everything related to a topic.\r\n\r\nFor example see Spark, which has relatively few pages for how complex it is. The \"Programming Guide\" page is quite long and collects a lot of information together: http://spark.apache.org/docs/2.1.0/\r\n\r\nFor an extreme example see Kafka, which has just one, linear page for the whole project: https://kafka.apache.org/documentation/","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301175709/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301177337","html_url":"https://github.com/apache/druid/pull/4201#issuecomment-301177337","issue_url":"https://api.github.com/repos/apache/druid/issues/4201","id":301177337,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE3NzMzNw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:24:54Z","updated_at":"2017-05-12T20:25:05Z","author_association":"CONTRIBUTOR","body":"Oops mistype","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301177337/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301182219","html_url":"https://github.com/apache/druid/pull/2660#issuecomment-301182219","issue_url":"https://api.github.com/repos/apache/druid/issues/2660","id":301182219,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE4MjIxOQ==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:47:17Z","updated_at":"2017-05-12T20:47:17Z","author_association":"CONTRIBUTOR","body":"@AlexanderSaydakov is working on it now, we're preparing to release a version internally for testing, there will be a separate PR for that.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301182219/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301182361","html_url":"https://github.com/apache/druid/pull/2660#issuecomment-301182361","issue_url":"https://api.github.com/repos/apache/druid/issues/2660","id":301182361,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE4MjM2MQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:48:00Z","updated_at":"2017-05-12T20:48:00Z","author_association":"CONTRIBUTOR","body":"ok, thank you.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301182361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301182867","html_url":"https://github.com/apache/druid/pull/3482#issuecomment-301182867","issue_url":"https://api.github.com/repos/apache/druid/issues/3482","id":301182867,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE4Mjg2Nw==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:50:42Z","updated_at":"2017-05-12T20:50:42Z","author_association":"CONTRIBUTOR","body":"@gianm I will resolve the conflicts sometime next week and remove single dataSource from task, this is still something nice to have for some teams here.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301182867/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301183376","html_url":"https://github.com/apache/druid/pull/3482#issuecomment-301183376","issue_url":"https://api.github.com/repos/apache/druid/issues/3482","id":301183376,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE4MzM3Ng==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:53:19Z","updated_at":"2017-05-12T20:53:19Z","author_association":"CONTRIBUTOR","body":"thanks @himanshug. FYI the context in which this came up internally was thinking about having realtime and non-hadoop indexing tasks able to generate multiple datasources at the same time with different rollups of the same data. Was your case something similar?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301183376/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301184127","html_url":"https://github.com/apache/druid/pull/3482#issuecomment-301184127","issue_url":"https://api.github.com/repos/apache/druid/issues/3482","id":301184127,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE4NDEyNw==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T20:56:51Z","updated_at":"2017-05-12T20:56:51Z","author_association":"CONTRIBUTOR","body":"@gianm in our case the motivator was to be able to create multiple dataSources in one hadoop task atomically.... but i see ability for tasks to deal with multiple dataSources is more general and useful in other cases too.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301184127/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301186460","html_url":"https://github.com/apache/druid/pull/4201#issuecomment-301186460","issue_url":"https://api.github.com/repos/apache/druid/issues/4201","id":301186460,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE4NjQ2MA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T21:08:31Z","updated_at":"2017-05-12T21:09:01Z","author_association":"CONTRIBUTOR","body":"What do people think of this? In my mind each of the top level bullets is its own page, and the secondary bullets are headings within that page -- not their own pages.\r\n\r\n- Getting started\r\n  - What is Druid? (explains that we're \"big olap\" and explains how we compare to related systems)\r\n  - Use cases (what we're good for, plus \"anti-use-cases\" for things that Druid is not targeting)\r\n  - Quickstart. Single machine.\r\n- Design\r\n  - Motivation: describe why Druid is the way it is. I'd say the design is all about targeting maximum query and ingest performance for append-based workloads.\r\n  - Introduce terminology: dataSource, segment, dimensions, metrics, rollup\r\n  - Discuss segments and their internals and the fact that they are immutable once built\r\n  - Discuss the segment timeline and how Druid uses that to partition a datasource. This should cover how locking works and how batch and realtime ingestion work together. Probably need a graphic here to make it clear.\r\n  - Discuss implications of the segment timeline, such as how load/drop rules are able to use it to move data around quickly, and how the broker is able to use it to target specific segments based on your time filter.\r\n  - Discuss how realtime indexing builds segments. Probably need a graphic here too.\r\n- Cluster setup\r\n  - Hardware recommendations\r\n  - Deep storage, metadata store, zookeeper\r\n  - What configs are important to tune first\r\n  - Scaling\r\n  - High availability\r\n  - Backup\r\n- Querying\r\n  - SQL\r\n  - Native Druid queries\r\n- Ingestion\r\n  - Overview. Hit the basics. Rollup is a thing and can be on or off. You can ingest the same data multiple times with different rollups. Ingestion is largely pull-based, except for one exception: tranquility provides a way to push streams. Ingestion is always partitioned by time, and you can run different kinds of ingestion on different time buckets simultaneously, but not two at once on the same time bucket. And finally, link to \"design\" for people that want the gory details.\r\n  - Index task\r\n  - Hadoop index task\r\n  - Kafka index task\r\n  - Tranquility\r\n  - Data formats that apply to all of those\r\n  - Reindexing mechanisms that apply to all of the above\r\n  - Strategies for handling updates\r\n- Configuration\r\n  - All runtime properties for all node types, organized by what file they should appear in (common vs system specific). This will be long but will be very useful to have in one place.\r\n  - All kinds of dynamic configuration, including coordinator dynamic config, load/drop rules, overlord worker config, & anything else like that.\r\n  - JVM configuration. Discuss memory tuning and also call out things like user.timezone.\r\n- Administration and monitoring\r\n  - All the endpoints on the coordinator, overlord, broker that do administrative things.\r\n  - Docs about the administrative UIs that are available (coordinator/overlord console).\r\n  - Docs about emitted metrics and alerts, and where they can be emitted to.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301186460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301187445","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301187445","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301187445,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE4NzQ0NQ==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T21:13:42Z","updated_at":"2017-05-12T21:13:42Z","author_association":"CONTRIBUTOR","body":"@gianm it was discussed internally whether to enable same process to run both http and https simultaneously , but with scheme discovery via zookeeper it was possible to support druid's rolling upgrade and become https. so we decided not to go that route.\r\ni think external clients can be taken care of if we add the feature on druid, so that if anyone sends `http://host:port/xxx` then server responds with \"HTTP 301 Redirect\" to `https://host:port/xxx` . Now, user would first upgrade the software one by one on all the external clients to handle https and the redirect... then enable https on druid side.... then change configuration on all the external clients to explicitly use https url.\r\ndoes that sound ok ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301187445/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301190856","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301190856","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301190856,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE5MDg1Ng==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T21:31:29Z","updated_at":"2017-05-12T21:31:29Z","author_association":"CONTRIBUTOR","body":"Sorry but it still sounds too user-unfriendly to me.\r\n\r\nRedirects aren't always easy or even possible for clients to follow. Consider the case where the brokers are fronted by a load balancer, which is super common (amazon ELB in particular is quite common, as are other kinds of load balancers). In many cases the user doesn't have access to the brokers directly and has to go through the balancer. If the load balancer doesn't follow redirects -- and many don't -- the client will get redirected to a url it can't access.\r\n\r\nAlso, many http libraries don't follow redirects by default, if they support it at all (our own http-client doesn't, and I've worked with others that also don't). And some libraries will follow for GET, but not for POST.\r\n\r\nI think asking users to get all their clients to be able to deal with this kind of stuff before they can switch to https is going to be a pain for them, if it is even possible at all.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301190856/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301191267","html_url":"https://github.com/apache/druid/pull/4259#issuecomment-301191267","issue_url":"https://api.github.com/repos/apache/druid/issues/4259","id":301191267,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE5MTI2Nw==","user":{"login":"gkc2104","id":5611566,"node_id":"MDQ6VXNlcjU2MTE1NjY=","avatar_url":"https://avatars.githubusercontent.com/u/5611566?v=4","gravatar_id":"","url":"https://api.github.com/users/gkc2104","html_url":"https://github.com/gkc2104","followers_url":"https://api.github.com/users/gkc2104/followers","following_url":"https://api.github.com/users/gkc2104/following{/other_user}","gists_url":"https://api.github.com/users/gkc2104/gists{/gist_id}","starred_url":"https://api.github.com/users/gkc2104/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gkc2104/subscriptions","organizations_url":"https://api.github.com/users/gkc2104/orgs","repos_url":"https://api.github.com/users/gkc2104/repos","events_url":"https://api.github.com/users/gkc2104/events{/privacy}","received_events_url":"https://api.github.com/users/gkc2104/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T21:33:32Z","updated_at":"2017-05-12T21:33:32Z","author_association":"CONTRIBUTOR","body":"Updated `filterSegments` implementation to take into consideration the query's intervals, and not return everything after DefaultHistory and nothing before even if overridden by the query.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301191267/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301192998","html_url":"https://github.com/apache/druid/pull/4201#issuecomment-301192998","issue_url":"https://api.github.com/repos/apache/druid/issues/4201","id":301192998,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE5Mjk5OA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T21:43:10Z","updated_at":"2017-05-12T21:43:10Z","author_association":"CONTRIBUTOR","body":"There's some stuff in the existing ToC I don't have in that outline. Not sure where to put them though. See: http://druid.io/docs/0.10.0/design/index.html\r\n\r\nLike multitenancy, multi-value dimensions, information about extensions.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301192998/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301196271","html_url":"https://github.com/apache/druid/pull/4079#issuecomment-301196271","issue_url":"https://api.github.com/repos/apache/druid/issues/4079","id":301196271,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE5NjI3MQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T22:03:50Z","updated_at":"2017-05-12T22:03:50Z","author_association":"MEMBER","body":"On https://github.com/druid-io/druid/pull/4079#discussion_r116312988: no, because it's in the method called \"advance**Un**interruptibly\"","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301196271/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301198074","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301198074","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301198074,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE5ODA3NA==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T22:15:33Z","updated_at":"2017-05-12T22:15:33Z","author_association":"CONTRIBUTOR","body":"hmmm, in the case when brokers are behind a load balancer and all external clients talk to that ... then rolling upgrade is pretty simple ... remove `http://broker-1` from LB, then enable https on broker-1 and then add `https://broker-1` to LB ... and repeat same for all brokers.\r\n\r\nthat said, in the most general case only option would be to have broker accept both http and https. @cheddar any additional thoughts?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301198074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301198301","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301198301","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301198301,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTE5ODMwMQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T22:17:02Z","updated_at":"2017-05-12T22:19:21Z","author_association":"CONTRIBUTOR","body":"> remove http://broker-1 from LB, then enable https on broker-1 and then add https://broker-1 to LB ... and repeat same for all brokers.\r\n\r\nThat wouldn't work for Amazon ELBs, at least, which don't let you specify different schemes or ports for different instances behind a load balancer. Those have to match across all of them.\r\n\r\nI think in this case it's best for us to take the complexity hit in order to make life simpler for users.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301198301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301207345","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301207345","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301207345,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTIwNzM0NQ==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-12T23:26:10Z","updated_at":"2017-05-12T23:26:10Z","author_association":"CONTRIBUTOR","body":"yeah, may be, so user would probably configure additional `druid.sslPort` which will be used to start additional jetty https connector.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301207345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301219151","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301219151","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301219151,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTIxOTE1MQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-13T02:12:51Z","updated_at":"2017-05-13T02:12:51Z","author_association":"CONTRIBUTOR","body":"Yeah, that makes sense to me.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301219151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301224359","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-301224359","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":301224359,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTIyNDM1OQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-13T04:27:21Z","updated_at":"2017-05-13T04:27:21Z","author_association":"CONTRIBUTOR","body":"Hmm, I wrote simple codes for checking the new design would work ([add](https://github.com/jihoonson/druid/blob/appenderator-driver-test/server/src/main/java/io/druid/segment/realtime/appenderator/FiniteAppenderatorDriver.java#L201) and [publish](https://github.com/jihoonson/druid/blob/appenderator-driver-test/server/src/main/java/io/druid/segment/realtime/appenderator/FiniteAppenderatorDriver.java#L446)). @gianm @pjain1 does it makes sense to you?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301224359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301258632","html_url":"https://github.com/apache/druid/pull/4271#issuecomment-301258632","issue_url":"https://api.github.com/repos/apache/druid/issues/4271","id":301258632,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTI1ODYzMg==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-13T16:24:34Z","updated_at":"2017-05-13T16:25:01Z","author_association":"MEMBER","body":"@jon-wei I just read the proposal and it sounds great. I am not sure if I missed it but I do not find much information about the Basic HTTP Authentication mechanism that would be built-in, can you provide some details on that ? A side note that the RBAC system that we use with Druid was open sourced this week at www.athenz.io in case you are interested to have a look. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301258632/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301264753","html_url":"https://github.com/apache/druid/pull/4269#issuecomment-301264753","issue_url":"https://api.github.com/repos/apache/druid/issues/4269","id":301264753,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTI2NDc1Mw==","user":{"login":"logarithm","id":427623,"node_id":"MDQ6VXNlcjQyNzYyMw==","avatar_url":"https://avatars.githubusercontent.com/u/427623?v=4","gravatar_id":"","url":"https://api.github.com/users/logarithm","html_url":"https://github.com/logarithm","followers_url":"https://api.github.com/users/logarithm/followers","following_url":"https://api.github.com/users/logarithm/following{/other_user}","gists_url":"https://api.github.com/users/logarithm/gists{/gist_id}","starred_url":"https://api.github.com/users/logarithm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/logarithm/subscriptions","organizations_url":"https://api.github.com/users/logarithm/orgs","repos_url":"https://api.github.com/users/logarithm/repos","events_url":"https://api.github.com/users/logarithm/events{/privacy}","received_events_url":"https://api.github.com/users/logarithm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-13T18:09:14Z","updated_at":"2017-05-13T18:09:14Z","author_association":"CONTRIBUTOR","body":"@b-slim I don't have any numbers for memory footprint but since we removed boxed types memory usage should be less. Synthetic `IndexMergeBenchmark` and `IncrementalIndexReadBenchmark` benchmarks show numbers close to previous. Code with these changes (but not only these) is working in our cluster and shows significantly less CPU usage on production data.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301264753/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301334155","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-301334155","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":301334155,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTMzNDE1NQ==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-14T19:28:20Z","updated_at":"2017-05-14T19:28:20Z","author_association":"MEMBER","body":"@jihoonson `add` looks OK but `publish` needs to change to understand sequenceName also, thus it can be used to publish segments for a particular sequenceName. \r\n\r\nFor Kafka Indexing task publish call should never block and from the code it seems like it can block. I would suggest to have an unbounded queue to which publish tasks can be submitted and `publishExecutor` will keep on taking tasks from the queue and do the publish. Similarly have a queue for handoff tasks as well and handOffExecutor will keep on polling queue to check for handoffs. `publishExecutor` once done can push tasks to `handOffQueue`. It is very similar to what I have done in the `KafkaIndexTask` in this PR. Does this make sense ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301334155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301353426","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-301353426","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":301353426,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTM1MzQyNg==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T01:05:38Z","updated_at":"2017-05-15T01:05:38Z","author_association":"MEMBER","body":"@jihoonson Or IMO better option would be to run the `publish` method in the same thread which calls the method and not use `publishExecutor`. This way `KafkaIndexTask` can use an executor to call this method and do the queueing logic that I described in previous comment and `IndexTask` can just call the method in same thread and block until it finishes. What do you think ?\r\n\r\n@gianm This and previous comment are the reasons why we thought it might be better for tasks to decide how to call and handle publish and not to use executor in the AppenderatorDriver. What do you think ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301353426/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301388634","html_url":"https://github.com/apache/druid/pull/4271#issuecomment-301388634","issue_url":"https://api.github.com/repos/apache/druid/issues/4271","id":301388634,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTM4ODYzNA==","user":{"login":"nishantmonu51","id":5023786,"node_id":"MDQ6VXNlcjUwMjM3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/5023786?v=4","gravatar_id":"","url":"https://api.github.com/users/nishantmonu51","html_url":"https://github.com/nishantmonu51","followers_url":"https://api.github.com/users/nishantmonu51/followers","following_url":"https://api.github.com/users/nishantmonu51/following{/other_user}","gists_url":"https://api.github.com/users/nishantmonu51/gists{/gist_id}","starred_url":"https://api.github.com/users/nishantmonu51/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nishantmonu51/subscriptions","organizations_url":"https://api.github.com/users/nishantmonu51/orgs","repos_url":"https://api.github.com/users/nishantmonu51/repos","events_url":"https://api.github.com/users/nishantmonu51/events{/privacy}","received_events_url":"https://api.github.com/users/nishantmonu51/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T06:37:30Z","updated_at":"2017-05-15T06:37:30Z","author_association":"MEMBER","body":"havn't looked at the code changes yet, went through the proposal and It seems good,\r\nfew comments - \r\n1. AuthorizationManager interface -  usesBuiltInTables looks like exposing details for one of the implementations, is it possible to remove this ? \r\n2. Row/Column based authorization - the complete feature implementation may be out of scope for this but we should think about how we are prosing to achieve that going forward since we are introducing the new authorization interface to be able to support that. \r\n3. User/Role/Permission Management - Would be nice if this can also be pluggable, where one default implementation is to store the users/roles in druid metadata store, which can be later be extended to manage these on other projects like Apache Ranger. HIVE has added these methods to the Authorizer interface itself -\r\n https://github.com/apache/hive/blob/master/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HiveAuthorizer.java  \r\nWe can choose to do the same or add them in a separate interface which custom authorization providers can opt-in to implement.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301388634/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301393939","html_url":"https://github.com/apache/druid/pull/4178#issuecomment-301393939","issue_url":"https://api.github.com/repos/apache/druid/issues/4178","id":301393939,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTM5MzkzOQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T07:09:13Z","updated_at":"2017-05-15T07:09:13Z","author_association":"CONTRIBUTOR","body":"> For Kafka Indexing task publish call should never block and from the code it seems like it can block. I would suggest to have an unbounded queue to which publish tasks can be submitted and ```publishExecutor``` will keep on taking tasks from the queue and do the publish. Similarly have a queue for handoff tasks as well and ```handOffExecutor``` will keep on polling queue to check for handoffs. ```publishExecutor``` once done can push tasks to ```handOffQueue```. It is very similar to what I have done in the ```KafkaIndexTask``` in this PR. Does this make sense ?\r\n\r\n@pjain1 ah right. I missed changing it to be unbounded. ```publishExecutor``` with an unbounded capacity sounds good to me, but for ```handOffExecutor```, IndexTask does not need to wait for hand off. Currently it is using ```NoopSegmentHandoffNotifierFactory``` to use the same code path of AppenderatorDriver, but it would be good if we can avoid. \r\nThis is why I added a new method called ```waitForHandoff()``` in the sample implementation. It allows the callers of ```publish()``` can decide to call ```waitForHandoff()``` subsequently or not. \r\n\r\nI'm still difficult to understand what the benefits are when ```publishExecutor``` (and ```handOffExecutor```) is in ```KafkaIndexTask``` rather than ```AppenderatorDriver```. I think it would be good to use in ```KafkaIndexTask``` if ```AppenderatorDriver``` returns a ```ListenableFuture``` which supports completion callbacks. In this world, the callers of ```AppenderatorDriver``` doesn't have to worry about handling threads individually. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301393939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301408206","html_url":"https://github.com/apache/druid/issues/4199#issuecomment-301408206","issue_url":"https://api.github.com/repos/apache/druid/issues/4199","id":301408206,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTQwODIwNg==","user":{"login":"kaijianding","id":8663725,"node_id":"MDQ6VXNlcjg2NjM3MjU=","avatar_url":"https://avatars.githubusercontent.com/u/8663725?v=4","gravatar_id":"","url":"https://api.github.com/users/kaijianding","html_url":"https://github.com/kaijianding","followers_url":"https://api.github.com/users/kaijianding/followers","following_url":"https://api.github.com/users/kaijianding/following{/other_user}","gists_url":"https://api.github.com/users/kaijianding/gists{/gist_id}","starred_url":"https://api.github.com/users/kaijianding/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaijianding/subscriptions","organizations_url":"https://api.github.com/users/kaijianding/orgs","repos_url":"https://api.github.com/users/kaijianding/repos","events_url":"https://api.github.com/users/kaijianding/events{/privacy}","received_events_url":"https://api.github.com/users/kaijianding/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T08:20:03Z","updated_at":"2017-05-15T08:20:03Z","author_association":"CONTRIBUTOR","body":"new trace when extracting from cache @gianm \r\n\r\n> 2017-05-15T15:37:49,527 ERROR [background-cacher-4] io.druid.client.CachingQueryRunner - Error while getting future for cache task\r\n> java.lang.RuntimeException: com.fasterxml.jackson.databind.JsonMappingException: (was java.nio.BufferOverflowException) (through reference chain: java.util.ArrayList[211]->java.util.ArrayList[1]->io.druid.query.aggregation.hyperloglog.HLLCV1[\"toByteArray()\"])\r\n>         at com.google.common.base.Throwables.propagate(Throwables.java:160) ~[guava-16.0.1.jar:?]\r\n>         at io.druid.client.CacheUtil.populate(CacheUtil.java:76) ~[druid-server-0.9.2.jar:0.9.2]\r\n>         at io.druid.client.CachingQueryRunner$3.run(CachingQueryRunner.java:191) [druid-server-0.9.2.jar:0.9.2]\r\n>         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1147) [?:1.8.0_102]\r\n>         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:622) [?:1.8.0_102]\r\n>         at java.lang.Thread.run(Thread.java:834) [?:1.8.0_102]\r\n> Caused by: com.fasterxml.jackson.databind.JsonMappingException: (was java.nio.BufferOverflowException) (through reference chain: java.util.ArrayList[211]->java.util.ArrayList[1]->io.druid.query.aggregation.hyperloglog.HLLCV1[\"toByteArray()\"])\r\n>         at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:210) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:177) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.serialize(JsonValueSerializer.java:184) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:100) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:21) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serialize(AsArraySerializerBase.java:183) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:100) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:21) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serialize(AsArraySerializerBase.java:183) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:128) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:2881) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:2362) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at io.druid.client.CacheUtil.populate(CacheUtil.java:61) ~[druid-server-0.9.2.jar:0.9.2]\r\n>         ... 4 more\r\n> Caused by: java.nio.BufferOverflowException\r\n>         at java.nio.Buffer.nextPutIndex(Buffer.java:527) ~[?:1.8.0_102]\r\n>         at java.nio.HeapByteBuffer.putShort(HeapByteBuffer.java:321) ~[?:1.8.0_102]\r\n>         at io.druid.query.aggregation.hyperloglog.HyperLogLogCollector.toByteBuffer(HyperLogLogCollector.java:472) ~[druid-processing-0.9.2.jar:0.9.2]\r\n>         at io.druid.query.aggregation.hyperloglog.HyperLogLogCollector.toByteArray(HyperLogLogCollector.java:486) ~[druid-processing-0.9.2.jar:0.9.2]\r\n>         at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source) ~[?:?]\r\n>         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_102]\r\n>         at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_102]\r\n>         at com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.serialize(JsonValueSerializer.java:155) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:100) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:21) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serialize(AsArraySerializerBase.java:183) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:100) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:21) ~[jackson-databind-2.4.6.jar:2.4.6]\r\n>         at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serialize(AsArraySerializerBase.java:183) ~[jackson-databind-2.4.6.jar:2.4.6]","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301408206/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301538839","html_url":"https://github.com/apache/druid/pull/4265#issuecomment-301538839","issue_url":"https://api.github.com/repos/apache/druid/issues/4265","id":301538839,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTUzODgzOQ==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T17:06:40Z","updated_at":"2017-05-15T17:06:50Z","author_association":"CONTRIBUTOR","body":"@blugowski can you fill the CLA http://druid.io/community/cla.html","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301538839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301582831","html_url":"https://github.com/apache/druid/pull/4271#issuecomment-301582831","issue_url":"https://api.github.com/repos/apache/druid/issues/4271","id":301582831,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTU4MjgzMQ==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T19:45:07Z","updated_at":"2017-05-15T19:45:07Z","author_association":"CONTRIBUTOR","body":"like the proposal and I agree with @nishantmonu51  on not having `usesBuiltInTable()` method or any other hint of the implementation if possible and do the default implementation in a core extension, that will also serve as a good reference to others if they want to integrate druid with their own authentication and authorization infrastructure.\r\n\r\ni loved the idea of enforcing the check that the request passed through authorization and didn't silently succeed.\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301582831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301583481","html_url":"https://github.com/apache/druid/pull/3954#issuecomment-301583481","issue_url":"https://api.github.com/repos/apache/druid/issues/3954","id":301583481,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTU4MzQ4MQ==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T19:47:42Z","updated_at":"2017-05-15T19:47:42Z","author_association":"MEMBER","body":"@leventov Getting this exception while running `ITRealtimeIndexTaskTest` -\r\n```\r\n2017-05-15T17:08:11,027 WARN [qtp141388791-91[timeseries_[wikipedia_index_test]_1ef1da8a-c624-41c2-933a-895f2f4ffcb4]] io.druid.server.QueryResource - Exception occurred on request [TimeseriesQuery{dataSource='wi\r\nkipedia_index_test', querySegmentSpec=MultipleSpecificSegmentSpec{descriptors=[SegmentDescriptor{interval=2017-05-15T17:06:00.000Z/2017-05-15T17:07:00.000Z, version='2017-05-15T17:06:37.343Z', partitionNumber=0},\r\n SegmentDescriptor{interval=2017-05-15T17:07:00.000Z/2017-05-15T17:08:00.000Z, version='2017-05-15T17:07:01.280Z', partitionNumber=0}, SegmentDescriptor{interval=2017-05-15T17:08:00.000Z/2017-05-15T17:09:00.000Z,\r\n version='2017-05-15T17:08:01.419Z', partitionNumber=0}]}, descending=false, virtualColumns=[], dimFilter=null, granularity='AllGranularity', aggregatorSpecs=[LongSumAggregatorFactory{fieldName='count', expressio\r\nn='null', name='edit_count'}, DoubleSumAggregatorFactory{fieldName='added', expression='null', name='chars_added'}], postAggregatorSpecs=[], context={defaultTimeout=300000, finalize=false, queryId=1ef1da8a-c624-4\r\n1c2-933a-895f2f4ffcb4}}]\r\njava.util.ConcurrentModificationException\r\n        at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429) ~[?:1.8.0_60]\r\n        at java.util.HashMap$EntryIterator.next(HashMap.java:1463) ~[?:1.8.0_60]\r\n        at java.util.HashMap$EntryIterator.next(HashMap.java:1461) ~[?:1.8.0_60]\r\n        at io.druid.query.DefaultQueryMetrics.emit(DefaultQueryMetrics.java:221) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.query.MetricsEmittingQueryRunner$1.after(MetricsEmittingQueryRunner.java:120) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:66) ~[java-util-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50) ~[java-util-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.query.CPUTimeMetricQueryRunner$1.wrap(CPUTimeMetricQueryRunner.java:75) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45) ~[java-util-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.query.spec.SpecificSegmentQueryRunner$2.accumulate(SpecificSegmentQueryRunner.java:85) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50) ~[java-util-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.query.spec.SpecificSegmentQueryRunner.doNamed(SpecificSegmentQueryRunner.java:171) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.query.spec.SpecificSegmentQueryRunner.access$200(SpecificSegmentQueryRunner.java:44) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.query.spec.SpecificSegmentQueryRunner$3.wrap(SpecificSegmentQueryRunner.java:151) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45) ~[java-util-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.java.util.common.guava.Sequences.toList(Sequences.java:150) ~[java-util-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.query.ChainedExecutionQueryRunner$1$1$1.call(ChainedExecutionQueryRunner.java:130) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at io.druid.query.ChainedExecutionQueryRunner$1$1$1.call(ChainedExecutionQueryRunner.java:120) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_60]\r\n        at io.druid.query.PrioritizedListenableFutureTask.run(PrioritizedExecutorService.java:271) ~[druid-processing-0.10.1-1494863481-55349dd-1358.jar:0.10.1-1494863481-55349dd-1358]\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_60]\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_60]\r\n        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_60]\r\nMay 15, 2017 5:08:11 PM com.google.common.util.concurrent.Futures$CombinedFuture setExceptionAndMaybeLog\r\nSEVERE: input future failed.\r\njava.util.ConcurrentModificationException\r\n        at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)\r\n        at java.util.HashMap$EntryIterator.next(HashMap.java:1463)\r\n        at java.util.HashMap$EntryIterator.next(HashMap.java:1461)\r\n        at io.druid.query.DefaultQueryMetrics.emit(DefaultQueryMetrics.java:221)\r\n        at io.druid.query.MetricsEmittingQueryRunner$1.after(MetricsEmittingQueryRunner.java:120)\r\n        at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:66)\r\n        at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)\r\n        at io.druid.query.CPUTimeMetricQueryRunner$1.wrap(CPUTimeMetricQueryRunner.java:75)\r\n        at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)\r\n        at io.druid.query.spec.SpecificSegmentQueryRunner$2.accumulate(SpecificSegmentQueryRunner.java:85)\r\n        at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)\r\n        at io.druid.query.spec.SpecificSegmentQueryRunner.doNamed(SpecificSegmentQueryRunner.java:171)\r\n        at io.druid.query.spec.SpecificSegmentQueryRunner.access$200(SpecificSegmentQueryRunner.java:44)\r\n        at io.druid.query.spec.SpecificSegmentQueryRunner$3.wrap(SpecificSegmentQueryRunner.java:151)\r\n        at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)\r\n        at io.druid.java.util.common.guava.Sequences.toList(Sequences.java:150)\r\n        at io.druid.query.ChainedExecutionQueryRunner$1$1$1.call(ChainedExecutionQueryRunner.java:130)\r\n        at io.druid.query.ChainedExecutionQueryRunner$1$1$1.call(ChainedExecutionQueryRunner.java:120)\r\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        at io.druid.query.PrioritizedListenableFutureTask.run(PrioritizedExecutorService.java:271)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301583481/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301583752","html_url":"https://github.com/apache/druid/pull/3954#issuecomment-301583752","issue_url":"https://api.github.com/repos/apache/druid/issues/3954","id":301583752,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTU4Mzc1Mg==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T19:48:42Z","updated_at":"2017-05-15T19:48:42Z","author_association":"MEMBER","body":"Got similar exception with `ITTwitterQueryTest`","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301583752/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301613847","html_url":"https://github.com/apache/druid/pull/3954#issuecomment-301613847","issue_url":"https://api.github.com/repos/apache/druid/issues/3954","id":301613847,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTYxMzg0Nw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T21:44:08Z","updated_at":"2017-05-15T21:44:08Z","author_association":"MEMBER","body":"@pjain1 could you try with the attached patch?\r\n[queryPlus.txt](https://github.com/druid-io/druid/files/1002579/queryPlus.txt)\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301613847/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301619128","html_url":"https://github.com/apache/druid/pull/4273#issuecomment-301619128","issue_url":"https://api.github.com/repos/apache/druid/issues/4273","id":301619128,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTYxOTEyOA==","user":{"login":"fuji-151a","id":5730685,"node_id":"MDQ6VXNlcjU3MzA2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/5730685?v=4","gravatar_id":"","url":"https://api.github.com/users/fuji-151a","html_url":"https://github.com/fuji-151a","followers_url":"https://api.github.com/users/fuji-151a/followers","following_url":"https://api.github.com/users/fuji-151a/following{/other_user}","gists_url":"https://api.github.com/users/fuji-151a/gists{/gist_id}","starred_url":"https://api.github.com/users/fuji-151a/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fuji-151a/subscriptions","organizations_url":"https://api.github.com/users/fuji-151a/orgs","repos_url":"https://api.github.com/users/fuji-151a/repos","events_url":"https://api.github.com/users/fuji-151a/events{/privacy}","received_events_url":"https://api.github.com/users/fuji-151a/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-15T22:08:32Z","updated_at":"2017-05-15T22:08:32Z","author_association":"CONTRIBUTOR","body":"Thanks for the review @leventov !! \r\nI done it.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301619128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301644060","html_url":"https://github.com/apache/druid/pull/4254#issuecomment-301644060","issue_url":"https://api.github.com/repos/apache/druid/issues/4254","id":301644060,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTY0NDA2MA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T00:49:54Z","updated_at":"2017-05-16T00:49:54Z","author_association":"CONTRIBUTOR","body":"@leventov thanks for your review. I addressed your comments.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301644060/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301654033","html_url":"https://github.com/apache/druid/pull/4270#issuecomment-301654033","issue_url":"https://api.github.com/repos/apache/druid/issues/4270","id":301654033,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTY1NDAzMw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T02:01:09Z","updated_at":"2017-05-16T02:01:09Z","author_association":"CONTRIBUTOR","body":"We might want additional configs too to determine what ports to listen on. Something to make it possible to disable http when we don't want it anymore.\r\n\r\nWould we also add 'standard' SSL ports for Druid services, meant to replace the 808x and 81xx ports we currently use?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301654033/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301674370","html_url":"https://github.com/apache/druid/pull/4271#issuecomment-301674370","issue_url":"https://api.github.com/repos/apache/druid/issues/4271","id":301674370,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTY3NDM3MA==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T04:47:19Z","updated_at":"2017-05-16T04:47:19Z","author_association":"CONTRIBUTOR","body":"Thanks for the feedback so far!\r\n\r\n@pjain1 I'll add more documentation for that part\r\n\r\n@nishantmonu51 I'll add some thoughts to the \"Future Work\" section on row/column level authorization. \r\n\r\nRegarding point 3, I think that's reasonable to support for cases where the external security store's model aligns closely enough with the core security model, that would allow such similar systems to reuse the coordinator API endpoints\r\n\r\n@himanshug Moving this into a core extension sounds good, I'll need to take another look at the MySQL/Postgres support and see if there any complications from that\r\n\r\nI'll think about some ways to get rid of useBuiltInTables().","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301674370/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301679277","html_url":"https://github.com/apache/druid/pull/4271#issuecomment-301679277","issue_url":"https://api.github.com/repos/apache/druid/issues/4271","id":301679277,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTY3OTI3Nw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T05:28:08Z","updated_at":"2017-05-16T05:28:08Z","author_association":"CONTRIBUTOR","body":"@nishantmonu51 \r\n\r\n> Row/Column based authorization - the complete feature implementation may be out of scope for this but we should think about how we are prosing to achieve that going forward since we are introducing the new authorization interface to be able to support that.\r\n\r\nMaybe we could do this through views. Like, create a view with a particular set of columns and a particular filter, and then grant access to that view but not to the base dataSource.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301679277/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301679449","html_url":"https://github.com/apache/druid/pull/4135#issuecomment-301679449","issue_url":"https://api.github.com/repos/apache/druid/issues/4135","id":301679449,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTY3OTQ0OQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T05:29:33Z","updated_at":"2017-05-16T05:29:33Z","author_association":"MEMBER","body":"@asdf2014 could you please resolve conflicts? Then we can merge this PR.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301679449/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301706393","html_url":"https://github.com/apache/druid/pull/4135#issuecomment-301706393","issue_url":"https://api.github.com/repos/apache/druid/issues/4135","id":301706393,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTcwNjM5Mw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T08:02:08Z","updated_at":"2017-05-16T08:02:08Z","author_association":"MEMBER","body":"@asdf2014 your latest commit doesn't have druid-io's master HEAD commit as parent, so Github doesn't hide repetitive changes. Could you please add parent to your latest commit (http://stackoverflow.com/a/4264151/648955 might help) and re-push it?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301706393/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/301706916","html_url":"https://github.com/apache/druid/pull/4135#issuecomment-301706916","issue_url":"https://api.github.com/repos/apache/druid/issues/4135","id":301706916,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMTcwNjkxNg==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-05-16T08:04:27Z","updated_at":"2017-05-16T08:04:27Z","author_association":"MEMBER","body":"In the future please resolve conflicts via `git merge master`, as described here: https://github.com/druid-io/druid/blob/master/CONTRIBUTING.md#github-workflow","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/301706916/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]