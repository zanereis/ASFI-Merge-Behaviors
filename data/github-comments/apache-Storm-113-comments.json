[{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571118","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571118","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571118,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExMTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:27:20Z","updated_at":"2025-01-24T13:47:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40732244\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40732244</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +96,304 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +} else {\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any bolts!\");\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else {<br/>\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Ok so this is rather odd, this should probably be a warning.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571118/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571121","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571121","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571121,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExMjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:27:59Z","updated_at":"2025-01-24T13:47:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40732321\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40732321</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +96,304 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +} else {\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any bolts!\");\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.info(</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Can we make this debug instead?  I don't think we need to tell everyone all the time about all of the topologies resources.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571121/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571126","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571126","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571126,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExMjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:29:11Z","updated_at":"2025-01-24T13:47:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40732462\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40732462</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/StormSubmitter.java &#8212;<br/>\n    @@ -442,4 +444,36 @@ public static String submitJar(Map conf, String localJar, ProgressListener liste<br/>\n      */<br/>\n     public void onCompleted(String srcFile, String targetFile, long totalBytes);<br/>\n }<br/>\n    +    <br/>\n    +<br/>\n    +    private static void validateConfs(Map stormConf, StormTopology topology) throws IllegalArgumentException {<br/>\n    +LOG.info(\"Validating storm Confs...\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will delete</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571128","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571128","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571128,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExMjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:30:38Z","updated_at":"2025-01-24T13:47:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40732622\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40732622</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +96,304 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +} else {\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any bolts!\");\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.info(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, RAS_Component> getRAS_Components() {</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    I'm not sure that RAS_Component is the right name for this class or this method.  The class has nothing to do with resources at all.  Perhaps we can call it a Component and the method getComponentGraph instead?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144197151","html_url":"https://github.com/apache/storm/pull/766#issuecomment-144197151","issue_url":"https://api.github.com/repos/apache/storm/issues/766","id":144197151,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDE5NzE1MQ==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:30:55Z","updated_at":"2015-09-29T21:30:55Z","author_association":"NONE","body":"Tested with storm.starter.clj.word_count on a non-secured cluster.  Seems to work. +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144197151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612478610","html_url":"https://github.com/apache/storm/issues/4254#issuecomment-2612478610","issue_url":"https://api.github.com/repos/apache/storm/issues/4254","id":2612478610,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0Nzg2MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:30:56Z","updated_at":"2025-01-24T13:00:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/766#issuecomment-144197151\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/766#issuecomment-144197151</a></p>\n\n<p>    Tested with storm.starter.clj.word_count on a non-secured cluster.  Seems to work. +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612478610/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571134","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571134","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571134,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExMzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:32:50Z","updated_at":"2025-01-24T13:47:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40732961\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40732961</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/StormSubmitter.java &#8212;<br/>\n    @@ -442,4 +444,36 @@ public static String submitJar(Map conf, String localJar, ProgressListener liste<br/>\n      */<br/>\n     public void onCompleted(String srcFile, String targetFile, long totalBytes);<br/>\n }<br/>\n    +    <br/>\n    +<br/>\n    +    private static void validateConfs(Map stormConf, StormTopology topology) throws IllegalArgumentException {<br/>\n    +LOG.info(\"Validating storm Confs...\");<br/>\n    +double largestMemReq = getMaxExecutorMemoryUsageForTopo(topology, stormConf);<br/>\n    +Double topologyWorkerMaxHeapSize = Utils.getDouble(stormConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB));<br/>\n    +if(topologyWorkerMaxHeapSize < largestMemReq) </p>\n{\n    +    throw new IllegalArgumentException(\"Topology will not be able to be successfully scheduled: Config TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB=\"\n    +    +Utils.getDouble(stormConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB)) + \" < \" \n    +    + largestMemReq + \" (Largest memory requirement of a component in the topology). Perhaps set TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB to a larger amount\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +<br/>\n    +    private static double getMaxExecutorMemoryUsageForTopo(StormTopology topology, Map topologyConf) {<br/>\n    +double largestMemoryOperator = 0.0;<br/>\n    +for(Map<String, Double> entry : backtype.storm.scheduler.resource.Utils.getBoltsResources(topology, topologyConf).values()) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    rename</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571134/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571137","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571137","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571137,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExMzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:44:10Z","updated_at":"2025-01-24T13:47:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40734280\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40734280</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -31,41 +42,47 @@<br/>\n StormTopology topology;<br/>\n Map<ExecutorDetails, String> executorToComponent;<br/>\n int numWorkers;</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +    //<ExecutorDetails - Task, Map<String - Type of resource, Map<String - type of that resource, Double - amount>>><br/>\n    +    private Map<ExecutorDetails, Map<String, Double>> _resourceList;<br/>\n    +    //Scheduler this topology should be scheduled with<br/>\n    +    private String scheduler;</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will delete</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571137/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571141","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571141","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571141,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExNDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:46:03Z","updated_at":"2025-01-24T13:47:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40734496\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40734496</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +96,304 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else {<br/>\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any bolts!\");</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571148","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571148","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571148,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExNDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:46:18Z","updated_at":"2025-01-24T13:47:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40734516\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40734516</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +96,304 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +} else {\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any bolts!\");\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.info(</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will change</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571148/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571152","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571152","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571152,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExNTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:54:41Z","updated_at":"2025-01-24T13:47:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40735533\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40735533</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +96,304 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +} else {\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any bolts!\");\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = backtype.storm.scheduler.resource.Utils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +backtype.storm.scheduler.resource.Utils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.info(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, RAS_Component> getRAS_Components() {</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will rename</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571157","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571157","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571157,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExNTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:54:55Z","updated_at":"2025-01-24T13:47:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40735548\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40735548</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/Topologies.java &#8212;<br/>\n    @@ -21,10 +21,17 @@<br/>\n     import java.util.HashMap;<br/>\n     import java.util.Map;</p>\n\n<p>    +import backtype.storm.scheduler.resource.RAS_Component;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n     public class Topologies {<br/>\n Map<String, TopologyDetails> topologies;<br/>\n Map<String, String> nameToId;</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +    Map<String, Map<String, RAS_Component>> _allRAS_Components;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Topologies.class);</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571157/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144203098","html_url":"https://github.com/apache/storm/pull/694#issuecomment-144203098","issue_url":"https://api.github.com/repos/apache/storm/issues/694","id":144203098,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDIwMzA5OA==","user":{"login":"mjsax","id":8959638,"node_id":"MDQ6VXNlcjg5NTk2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/8959638?v=4","gravatar_id":"","url":"https://api.github.com/users/mjsax","html_url":"https://github.com/mjsax","followers_url":"https://api.github.com/users/mjsax/followers","following_url":"https://api.github.com/users/mjsax/following{/other_user}","gists_url":"https://api.github.com/users/mjsax/gists{/gist_id}","starred_url":"https://api.github.com/users/mjsax/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjsax/subscriptions","organizations_url":"https://api.github.com/users/mjsax/orgs","repos_url":"https://api.github.com/users/mjsax/repos","events_url":"https://api.github.com/users/mjsax/events{/privacy}","received_events_url":"https://api.github.com/users/mjsax/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:58:01Z","updated_at":"2015-09-29T21:58:01Z","author_association":"MEMBER","body":"I just pushed a new version (rebased to current master and squahed commits etc). The PR is in much cleaner state now. Looking forward to your feedback.\n\nBatching does now work with acks and each output stream can have a different batch size. The ack streams (`__ack_init`, `__ack_ack`, and `__ack_fail`) are treated as regular streams from a batching point of view. Metric and Eventlogger should work too (but I did not test is).\n\nIf you want to test this, be aware that hybrid batching is **not supported** yet (for performance reasons -- at least for the non-acking case). Thus, right now you set batch size via and `int` only if acking is disabled or via `HashMap` and the map must contain an entry for each output stream (including ack streams) and the batch size must be at least 1. (After we decided how to proceed -- see next paragraph --, this can be cleaned up.)\n\nThe problem with hybrid batching is the serialization path in _executor.clj_ at `mk-transfer-fn` and `start-batch-transfer->worker-handler!`. I wrote the code for hybrid serialization already but disabled it, ie, put it into comments. Because, I am not able to set different serializers for different output stream, only a hybrid serializer could be used. However, the runtime binding to the correct method for TupleImpl or Batch reduced the throughput (see numbers below). Not sure if/how this could be resolved. On the other hand, a batch size of one does not have a big performance penalty -- maybe it would be worth to enable batching all the time (ie, even for the non-batching case, just use a batch size of one) to avoid the hybrid setup.\n\nI also did some network monitoring using `nmon`. It shows that batching does reduce the actually transfered number of byte over the network. The perf tool does not measure but compute the number of transfered bytes (what is not quite accurate). Right now, I don't have the numbers, but if you wish I could rerun those experiments and post here.\n\nI collected the following number for non-acking and acking:\n\n**NO ACKING**\n\n`--name test -l 1 -n 1 --messageSize 100 --workers 24 --spout 1 --bolt 10 --testTimeSec 40`\n\nno batching:\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   11  0   1443539268669   0   0   0.0\nWAITING 1   96  11  11  11  1443539298669   30000   6688960 21.263631184895832\nWAITING 1   96  11  11  11  1443539328669   30000   7518460 23.900540669759113\nRUNNING 1   96  11  11  11  1443539358669   30000   10428980    33.15283457438151\nRUNNING 1   96  11  11  11  1443539388669   30000   10395200    33.045450846354164\n```\n\nbatch size = 1 (to measure overhead; about 5%):\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   11  0   1443539471193   0   0   0.0\nWAITING 1   96  11  11  11  1443539501193   30000   3089120 9.820048014322916\nWAITING 1   96  11  11  11  1443539531193   30000   9134740 29.038556416829426\nRUNNING 1   96  11  11  11  1443539561193   30000   9502680 30.208206176757812\nRUNNING 1   96  11  11  11  1443539591193   30000   9672300 30.747413635253906\n```\n\nbatch size = 100 (throughput improvement by about 85%)\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   11  0   1443539658994   0   0   0.0\nWAITING 1   96  11  11  11  1443539688994   30000   8345560 26.529820760091145\nWAITING 1   96  11  11  11  1443539718994   30000   19876460    63.18556467692057\nRUNNING 1   96  11  11  11  1443539748994   30000   18229880    57.95122782389323\nRUNNING 1   96  11  11  11  1443539778994   30000   18294660    58.15715789794922\n```\n\n**ACKING**\n\n`--name test -l 1 -n 1 --messageSize 100 --workers 24 --spout 1 --bolt 10 --testTimeSec 40 --ack --ackers 10`\n\nno batching:\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   21  0   1443539868024   0   0   0.0\nWAITING 1   96  21  21  21  1443539898024   30000   864800  2.7491251627604165\nWAITING 1   96  21  21  21  1443539928024   30000   1768760 5.6227366129557295\nRUNNING 1   96  21  21  21  1443539958024   30000   1910340 6.072807312011719\nRUNNING 1   96  21  21  21  1443539988025   30001   1888740 6.003942629809475\n```\n\nComplete Latency (from WebUI): 6.256\n\nall batch sizes = 1 (to measure overhead; acking dominates; no overhead measurable):\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  2   21  0   1443540043224   0   0   0.0\nWAITING 1   96  21  21  21  1443540073225   30001   803060  2.552773895980811\nWAITING 1   96  21  21  21  1443540103225   30000   2001520 6.362660725911458\nRUNNING 1   96  21  21  21  1443540133224   29999   1789860 5.690001373255411\nRUNNING 1   96  21  21  21  1443540163224   30000   1925420 6.120745340983073\n```\n\nComplete Latency (from WebUI): 9.686 (no impact -- 3ms difference is just too small to be a reliable number)\n\ndefault batch size = 100 (almost no throughput improvement; about 15%; acking dominates as acks are not batched)\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   21  0   1443540446423   0   0   0.0\nWAITING 1   96  21  21  21  1443540476423   30000   866980  2.7560551961263022\nWAITING 1   96  21  21  21  1443540506423   30000   2076100 6.599744160970052\nRUNNING 1   96  21  21  21  1443540536424   30001   2100200 6.676133459939356\nRUNNING 1   96  21  21  21  1443540566424   30000   2191620 6.966972351074219\n```\n\nComplete Latency (from WebUI): 11.721 (compared to 6ms, almost doubles, but this is still tiny)\n\nall batch sizes = 100 (acks are batched too; throughput improvement increases to more than 50%)\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   21  0   1443540631845   0   0   0.0\nWAITING 1   96  21  21  21  1443540661846   30001   1728100 5.493298843977336\nWAITING 1   96  21  21  21  1443540691845   29999   2814100 8.946081182035496\nRUNNING 1   96  21  21  21  1443540721845   30000   2084440 6.6262563069661455\nRUNNING 1   96  21  21  21  1443540751845   30000   2949700 9.376843770345053\n```\n\nComplete Latency (from WebUI): 65.225 (latency increased by factor of 10 due to ack batching)\n\n**===== Hybrid =====**\nI repeated the same experiment using hybrid serializer (`KryoTupleBatchSerializer`): It is a similar, however with reduced throughput by 25% for the non-acking case. In the acking case, the hybrid approach has no influence as acking dominates.\n\n**NO ACKING (hybrid)**\n\n`--name test -l 1 -n 1 --messageSize 100 --workers 24 --spout 1 --bolt 10 --testTimeSec 40`\n\nno batching:\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   11  0   1443536488016   0   0   0.0\nWAITING 1   96  11  11  11  1443536518016   30000   5118760 16.27209981282552\nWAITING 1   96  11  11  11  1443536548017   30001   8131680 25.84905291568406\nRUNNING 1   96  11  11  11  1443536578016   29999   7960300 25.305955734820067\nRUNNING 1   96  11  11  11  1443536608016   30000   7711800 24.515151977539062\n```\n\nbatch size = 1 (to measure overhead):\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   11  0   1443536668726   0   0   0.0\nWAITING 1   96  11  11  11  1443536698726   30000   4799100 15.255928039550781\nWAITING 1   96  11  11  11  1443536728726   30000   7695580 24.463589986165363\nRUNNING 1   96  11  11  11  1443536758727   30001   7828800 24.886255419090197\nRUNNING 1   96  11  11  11  1443536788726   29999   5613780 17.84632089054661\n```\n\nbatch size = 100:\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   11  0   1443536914666   0   0   0.0\nWAITING 1   96  11  11  11  1443536944666   30000   9114920 28.975550333658855\nWAITING 1   96  11  11  11  1443536974666   30000   16459180    52.32232411702474\nRUNNING 1   96  11  11  11  1443537004666   30000   16347100    51.96603139241537\nRUNNING 1   96  11  11  11  1443537034666   30000   16594400    52.752176920572914\n```\n\n**ACKING  (hybrid)**\n\n`--name test -l 1 -n 1 --messageSize 100 --workers 24 --spout 1 --bolt 10 --testTimeSec 40 --ack --ackers 10`\n\nno batching:\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   21  0   1443538020486   0   0   0.0\nWAITING 1   96  21  21  21  1443538050486   30000   934640  2.9711405436197915\nWAITING 1   96  21  21  21  1443538080486   30000   1774140 5.639839172363281\nRUNNING 1   96  21  21  21  1443538110486   30000   1875420 5.961799621582031\nRUNNING 1   96  21  21  21  1443538140486   30000   1832160 5.82427978515625\n```\n\nComplete Latency (from WebUI): 43.945\n\nall batch sizes = 1 (to measure overhead):\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  3   21  0   1443538188807   0   0   0.0\nWAITING 1   96  21  21  21  1443538218807   30000   1192380 3.7904739379882812\nWAITING 1   96  21  21  21  1443538248807   30000   1915040 6.087748209635417\nRUNNING 1   96  21  21  21  1443538278808   30001   1387960 4.412058945365883\nRUNNING 1   96  21  21  21  1443538308807   29999   2106580 6.696860700206934\n```\n\nComplete Latency (from WebUI): 9.132\n\ndefault batch size = 100:\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  5   21  0   1443538350612   0   0   0.0\nWAITING 1   96  21  21  21  1443538380612   30000   1449080 4.6065012613932295\nWAITING 1   96  21  21  21  1443538410613   30001   2369020 7.5306607414843985\nRUNNING 1   96  21  21  21  1443538440612   29999   2323580 7.386708117321359\nRUNNING 1   96  21  21  21  1443538470612   30000   2414040 7.6740264892578125\n\n```\n\nComplete Latency (from WebUI): 11.063\n\nall batch sizes = 100:\n\n```\nstatus  topologies  totalSlots  slotsUsed   totalExecutors  executorsWithMetrics    time    time-diff ms    transferred throughput (MB/s)\nWAITING 1   96  0   21  0   1443538562562   0   0   0.0\nWAITING 1   96  21  21  21  1443538592562   30000   1278060 4.062843322753906\nWAITING 1   96  21  21  21  1443538622562   30000   2170020 6.898307800292969\nRUNNING 1   96  21  21  21  1443538652563   30001   2209060 7.022178545383122\nRUNNING 1   96  21  21  21  1443538682562   29999   2155180 6.851361089477723\n```\n\nComplete Latency (from WebUI): 122.958\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144203098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612563667","html_url":"https://github.com/apache/storm/issues/4695#issuecomment-2612563667","issue_url":"https://api.github.com/repos/apache/storm/issues/4695","id":2612563667,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjM2Njc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:58:03Z","updated_at":"2025-01-24T13:43:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user mjsax commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/694#issuecomment-144203098\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/694#issuecomment-144203098</a></p>\n\n<p>    I just pushed a new version (rebased to current master and squahed commits etc). The PR is in much cleaner state now. Looking forward to your feedback.</p>\n\n<p>    Batching does now work with acks and each output stream can have a different batch size. The ack streams (`_<em>ack_init`, `</em><em>ack_ack`, and `</em>_ack_fail`) are treated as regular streams from a batching point of view. Metric and Eventlogger should work too (but I did not test is).</p>\n\n<p>    If you want to test this, be aware that hybrid batching is *<b>not supported</b>* yet (for performance reasons &#8211; at least for the non-acking case). Thus, right now you set batch size via and `int` only if acking is disabled or via `HashMap` and the map must contain an entry for each output stream (including ack streams) and the batch size must be at least 1. (After we decided how to proceed &#8211; see next paragraph --, this can be cleaned up.)</p>\n\n<p>    The problem with hybrid batching is the serialization path in <b>executor.clj</b> at `mk-transfer-fn` and `start-batch-transfer->worker-handler!`. I wrote the code for hybrid serialization already but disabled it, ie, put it into comments. Because, I am not able to set different serializers for different output stream, only a hybrid serializer could be used. However, the runtime binding to the correct method for TupleImpl or Batch reduced the throughput (see numbers below). Not sure if/how this could be resolved. On the other hand, a batch size of one does not have a big performance penalty &#8211; maybe it would be worth to enable batching all the time (ie, even for the non-batching case, just use a batch size of one) to avoid the hybrid setup.</p>\n\n<p>    I also did some network monitoring using `nmon`. It shows that batching does reduce the actually transfered number of byte over the network. The perf tool does not measure but compute the number of transfered bytes (what is not quite accurate). Right now, I don't have the numbers, but if you wish I could rerun those experiments and post here.</p>\n\n<p>    I collected the following number for non-acking and acking:</p>\n\n<p>    *<b>NO ACKING</b>*</p>\n\n<p>    `--name test -l 1 -n 1 --messageSize 100 --workers 24 --spout 1 --bolt 10 --testTimeSec 40`</p>\n\n<p>    no batching:<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t11\t0\t1443539268669\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443539298669\t30000\t6688960\t21.263631184895832<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443539328669\t30000\t7518460\t23.900540669759113<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443539358669\t30000\t10428980\t33.15283457438151<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443539388669\t30000\t10395200\t33.045450846354164<br/>\n    ```</p>\n\n<p>    batch size = 1 (to measure overhead; about 5%):<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t11\t0\t1443539471193\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443539501193\t30000\t3089120\t9.820048014322916<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443539531193\t30000\t9134740\t29.038556416829426<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443539561193\t30000\t9502680\t30.208206176757812<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443539591193\t30000\t9672300\t30.747413635253906<br/>\n    ```</p>\n\n<p>    batch size = 100 (throughput improvement by about 85%)<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t11\t0\t1443539658994\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443539688994\t30000\t8345560\t26.529820760091145<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443539718994\t30000\t19876460\t63.18556467692057<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443539748994\t30000\t18229880\t57.95122782389323<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443539778994\t30000\t18294660\t58.15715789794922<br/>\n    ```</p>\n\n<p>    *<b>ACKING</b>*</p>\n\n<p>    `--name test -l 1 -n 1 --messageSize 100 --workers 24 --spout 1 --bolt 10 --testTimeSec 40 --ack --ackers 10`</p>\n\n<p>    no batching:<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t21\t0\t1443539868024\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443539898024\t30000\t864800\t2.7491251627604165<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443539928024\t30000\t1768760\t5.6227366129557295<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443539958024\t30000\t1910340\t6.072807312011719<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443539988025\t30001\t1888740\t6.003942629809475<br/>\n    ```<br/>\n    Complete Latency (from WebUI): 6.256</p>\n\n<p>    all batch sizes = 1 (to measure overhead; acking dominates; no overhead measurable):<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t2\t21\t0\t1443540043224\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443540073225\t30001\t803060\t2.552773895980811<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443540103225\t30000\t2001520\t6.362660725911458<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443540133224\t29999\t1789860\t5.690001373255411<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443540163224\t30000\t1925420\t6.120745340983073<br/>\n    ```<br/>\n    Complete Latency (from WebUI): 9.686 (no impact &#8211; 3ms difference is just too small to be a reliable number)</p>\n\n<p>    default batch size = 100 (almost no throughput improvement; about 15%; acking dominates as acks are not batched)<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t21\t0\t1443540446423\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443540476423\t30000\t866980\t2.7560551961263022<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443540506423\t30000\t2076100\t6.599744160970052<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443540536424\t30001\t2100200\t6.676133459939356<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443540566424\t30000\t2191620\t6.966972351074219<br/>\n    ```<br/>\n    Complete Latency (from WebUI): 11.721 (compared to 6ms, almost doubles, but this is still tiny)</p>\n\n<p>    all batch sizes = 100 (acks are batched too; throughput improvement increases to more than 50%)<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t21\t0\t1443540631845\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443540661846\t30001\t1728100\t5.493298843977336<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443540691845\t29999\t2814100\t8.946081182035496<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443540721845\t30000\t2084440\t6.6262563069661455<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443540751845\t30000\t2949700\t9.376843770345053<br/>\n    ```<br/>\n    Complete Latency (from WebUI): 65.225 (latency increased by factor of 10 due to ack batching)</p>\n\n<p>    *<b>===== Hybrid =====</b>*<br/>\n    I repeated the same experiment using hybrid serializer (`KryoTupleBatchSerializer`): It is a similar, however with reduced throughput by 25% for the non-acking case. In the acking case, the hybrid approach has no influence as acking dominates.</p>\n\n<p>    *<b>NO ACKING (hybrid)</b>*</p>\n\n<p>    `--name test -l 1 -n 1 --messageSize 100 --workers 24 --spout 1 --bolt 10 --testTimeSec 40`</p>\n\n<p>    no batching:<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t11\t0\t1443536488016\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443536518016\t30000\t5118760\t16.27209981282552<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443536548017\t30001\t8131680\t25.84905291568406<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443536578016\t29999\t7960300\t25.305955734820067<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443536608016\t30000\t7711800\t24.515151977539062<br/>\n    ```</p>\n\n<p>    batch size = 1 (to measure overhead):<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t11\t0\t1443536668726\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443536698726\t30000\t4799100\t15.255928039550781<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443536728726\t30000\t7695580\t24.463589986165363<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443536758727\t30001\t7828800\t24.886255419090197<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443536788726\t29999\t5613780\t17.84632089054661<br/>\n    ```</p>\n\n<p>    batch size = 100:<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t11\t0\t1443536914666\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443536944666\t30000\t9114920\t28.975550333658855<br/>\n    WAITING\t1\t96\t11\t11\t11\t1443536974666\t30000\t16459180\t52.32232411702474<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443537004666\t30000\t16347100\t51.96603139241537<br/>\n    RUNNING\t1\t96\t11\t11\t11\t1443537034666\t30000\t16594400\t52.752176920572914<br/>\n    ```</p>\n\n<p>    *<b>ACKING  (hybrid)</b>*</p>\n\n<p>    `--name test -l 1 -n 1 --messageSize 100 --workers 24 --spout 1 --bolt 10 --testTimeSec 40 --ack --ackers 10`</p>\n\n<p>    no batching:<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t21\t0\t1443538020486\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443538050486\t30000\t934640\t2.9711405436197915<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443538080486\t30000\t1774140\t5.639839172363281<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443538110486\t30000\t1875420\t5.961799621582031<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443538140486\t30000\t1832160\t5.82427978515625<br/>\n    ```<br/>\n    Complete Latency (from WebUI): 43.945</p>\n\n<p>    all batch sizes = 1 (to measure overhead):<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t3\t21\t0\t1443538188807\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443538218807\t30000\t1192380\t3.7904739379882812<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443538248807\t30000\t1915040\t6.087748209635417<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443538278808\t30001\t1387960\t4.412058945365883<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443538308807\t29999\t2106580\t6.696860700206934<br/>\n    ```<br/>\n    Complete Latency (from WebUI): 9.132</p>\n\n<p>    default batch size = 100:<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t5\t21\t0\t1443538350612\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443538380612\t30000\t1449080\t4.6065012613932295<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443538410613\t30001\t2369020\t7.5306607414843985<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443538440612\t29999\t2323580\t7.386708117321359<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443538470612\t30000\t2414040\t7.6740264892578125</p>\n\n<p>    ```<br/>\n    Complete Latency (from WebUI): 11.063</p>\n\n<p>    all batch sizes = 100:<br/>\n    ```<br/>\n    status\ttopologies\ttotalSlots\tslotsUsed\ttotalExecutors\texecutorsWithMetrics\ttime\ttime-diff ms\ttransferred\tthroughput (MB/s)<br/>\n    WAITING\t1\t96\t0\t21\t0\t1443538562562\t0\t0\t0.0<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443538592562\t30000\t1278060\t4.062843322753906<br/>\n    WAITING\t1\t96\t21\t21\t21\t1443538622562\t30000\t2170020\t6.898307800292969<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443538652563\t30001\t2209060\t7.022178545383122<br/>\n    RUNNING\t1\t96\t21\t21\t21\t1443538682562\t29999\t2155180\t6.851361089477723<br/>\n    ```<br/>\n    Complete Latency (from WebUI): 122.958</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612563667/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612478612","html_url":"https://github.com/apache/storm/issues/4254#issuecomment-2612478612","issue_url":"https://api.github.com/repos/apache/storm/issues/4254","id":2612478612,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0Nzg2MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T21:59:06Z","updated_at":"2025-01-24T13:00:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Parth-Brahmbhatt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/766#discussion_r40736026\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/766#discussion_r40736026</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/backtype/storm/cluster.clj &#8212;<br/>\n    @@ -518,6 +540,13 @@<br/>\n       (catch KeeperException e<br/>\n (log-warn-error e \"Could not teardown errors for \" storm-id))))</p>\n\n<p>    +      (teardown-topology-log-config!<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I saw that you are calling it from cleanup thread,  I am just wondering why not call cleanup with all the other topology cleanup methods? <br/>\n    From what I understand the nimbus cleanup thread is designed to identify topologies that have no nimbus local disk state but their zookeeper state is somehow not cleared up. It seems like a handler for rare failure scenarios which we are abusing now. Let me know if you have some other reason for not deleting this with rest of the topology.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612478612/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144207108","html_url":"https://github.com/apache/storm/pull/765#issuecomment-144207108","issue_url":"https://api.github.com/repos/apache/storm/issues/765","id":144207108,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDIwNzEwOA==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T22:18:23Z","updated_at":"2015-09-29T22:42:34Z","author_association":"NONE","body":"Really exciting work! It is very interesting that we move the overflow buffer inside the disruptor queue and use it for batch publishing purpose. I would also look forward to seeing how tuning the disruptor queue size, batch interval will impact the throughput of topologies with different tuple-sending/processing speeds. \nA little concern is that this triples the number of threads for each executor (from 1 to 3). If more extensive tests show that it does not cause too much contention on CPU and thus lower throughput/high resource usage, it should be fine.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144207108/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144211924","html_url":"https://github.com/apache/storm/pull/694#issuecomment-144211924","issue_url":"https://api.github.com/repos/apache/storm/issues/694","id":144211924,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDIxMTkyNA==","user":{"login":"mjsax","id":8959638,"node_id":"MDQ6VXNlcjg5NTk2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/8959638?v=4","gravatar_id":"","url":"https://api.github.com/users/mjsax","html_url":"https://github.com/mjsax","followers_url":"https://api.github.com/users/mjsax/followers","following_url":"https://api.github.com/users/mjsax/following{/other_user}","gists_url":"https://api.github.com/users/mjsax/gists{/gist_id}","starred_url":"https://api.github.com/users/mjsax/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjsax/subscriptions","organizations_url":"https://api.github.com/users/mjsax/orgs","repos_url":"https://api.github.com/users/mjsax/repos","events_url":"https://api.github.com/users/mjsax/events{/privacy}","received_events_url":"https://api.github.com/users/mjsax/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T22:47:07Z","updated_at":"2015-09-29T22:47:07Z","author_association":"MEMBER","body":"One question: There are a lot of changes in `storm-core/src/jvm/backtype/storm/generated/*` resulting from rebuild those files with `genthrift.sh`. However, it seems to me that only the changes to `ComponentCommon.java` (and I guess to `storm-core/src/py/storm/ttypes.py`) are relevant. For all other classes it this package it seems they include variable renaming only. The files in which only the generation date was changed are not included already. Can I safely revert those other files, too? Or might I break something? \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144211924/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612563681","html_url":"https://github.com/apache/storm/issues/4695#issuecomment-2612563681","issue_url":"https://api.github.com/repos/apache/storm/issues/4695","id":2612563681,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NjM2ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-29T22:47:08Z","updated_at":"2025-01-24T13:43:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user mjsax commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/694#issuecomment-144211924\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/694#issuecomment-144211924</a></p>\n\n<p>    One question: There are a lot of changes in `storm-core/src/jvm/backtype/storm/generated/*` resulting from rebuild those files with `genthrift.sh`. However, it seems to me that only the changes to `ComponentCommon.java` (and I guess to `storm-core/src/py/storm/ttypes.py`) are relevant. For all other classes it this package it seems they include variable renaming only. The files in which only the generation date was changed are not included already. Can I safely revert those other files, too? Or might I break something? </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612563681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612594408","html_url":"https://github.com/apache/storm/issues/4850#issuecomment-2612594408","issue_url":"https://api.github.com/repos/apache/storm/issues/4850","id":2612594408,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTQ0MDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T03:23:17Z","updated_at":"2025-01-24T13:58:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user erikdw commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/736#discussion_r40755399\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/736#discussion_r40755399</a></p>\n\n<p>    &#8212; Diff: DEVELOPER.md &#8212;<br/>\n    @@ -222,6 +222,11 @@ To pull in a merge request you should generally follow the command line instruct</p>\n\n<ol>\n\t<li>Build the code and run the tests</li>\n</ol>\n\n\n<p>    +Storm has some oddities with packaging and plugin dependencies.  We build our own plugins and shade storm-core,<br/>\n    +but have sub-modules that depend on storm-core.  Because of this the build needs to be split into two parts.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can you please explain in a bit more detail why this split is needed, and how the change accomplishes that?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612594408/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144335514","html_url":"https://github.com/apache/storm/pull/688#issuecomment-144335514","issue_url":"https://api.github.com/repos/apache/storm/issues/688","id":144335514,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDMzNTUxNA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T09:17:09Z","updated_at":"2015-09-30T09:17:09Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144335514/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612587518","html_url":"https://github.com/apache/storm/issues/4831#issuecomment-2612587518","issue_url":"https://api.github.com/repos/apache/storm/issues/4831","id":2612587518,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODc1MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T09:17:18Z","updated_at":"2025-01-24T13:55:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/688#issuecomment-144335514\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/688#issuecomment-144335514</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612587518/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144387766","html_url":"https://github.com/apache/storm/pull/766#issuecomment-144387766","issue_url":"https://api.github.com/repos/apache/storm/issues/766","id":144387766,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDM4Nzc2Ng==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T12:55:46Z","updated_at":"2015-09-30T12:55:46Z","author_association":"CONTRIBUTOR","body":"@Parth-Brahmbhatt, thank you for pointing that out that nimbus cleanup thread is not right place for removing ZK nodes for logconfigs. I have moved the zk-node deletion to `remove-storm!`. Please let me know if you have any other suggestions.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144387766/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612478618","html_url":"https://github.com/apache/storm/issues/4254#issuecomment-2612478618","issue_url":"https://api.github.com/repos/apache/storm/issues/4254","id":2612478618,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0Nzg2MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T12:55:48Z","updated_at":"2025-01-24T13:00:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/766#issuecomment-144387766\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/766#issuecomment-144387766</a></p>\n\n<p>    @Parth-Brahmbhatt, thank you for pointing that out that nimbus cleanup thread is not right place for removing ZK nodes for logconfigs. I have moved the zk-node deletion to `remove-storm!`. Please let me know if you have any other suggestions.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612478618/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144429694","html_url":"https://github.com/apache/storm/pull/765#issuecomment-144429694","issue_url":"https://api.github.com/repos/apache/storm/issues/765","id":144429694,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDQyOTY5NA==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T14:28:51Z","updated_at":"2015-09-30T14:28:51Z","author_association":"CONTRIBUTOR","body":"Ran some sanity tests. LGTM. +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144429694/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144451299","html_url":"https://github.com/apache/storm/pull/746#issuecomment-144451299","issue_url":"https://api.github.com/repos/apache/storm/issues/746","id":144451299,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDQ1MTI5OQ==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T15:42:29Z","updated_at":"2015-09-30T15:42:29Z","author_association":"CONTRIBUTOR","body":"upmerged!\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144451299/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571164","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571164","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571164,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExNjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T15:42:31Z","updated_at":"2025-01-24T13:47:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#issuecomment-144451299\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#issuecomment-144451299</a></p>\n\n<p>    upmerged!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571164/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612594412","html_url":"https://github.com/apache/storm/issues/4850#issuecomment-2612594412","issue_url":"https://api.github.com/repos/apache/storm/issues/4850","id":2612594412,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTQ0MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T17:24:03Z","updated_at":"2025-01-24T13:58:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/736#discussion_r40823287\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/736#discussion_r40823287</a></p>\n\n<p>    &#8212; Diff: DEVELOPER.md &#8212;<br/>\n    @@ -222,6 +222,11 @@ To pull in a merge request you should generally follow the command line instruct</p>\n\n<ol>\n\t<li>Build the code and run the tests</li>\n</ol>\n\n\n<p>    +Storm has some oddities with packaging and plugin dependencies.  We build our own plugins and shade storm-core,<br/>\n    +but have sub-modules that depend on storm-core.  Because of this the build needs to be split into two parts.<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Essentially what happens is that if you build a multi-module project where one module depends on another module that is a part of the same build, maven tries to be smart and will use the pom.xml and .jar or .class directory from the module that is a dependency.</p>\n\n<p>    So if we have a project set up like the following where we have b depends on a, and a is shaded.  b will see different versions of the code and pom.xml from a depending on what maven command is run.</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>base/</li>\n\t<li>pom.xml</li>\n\t<li>a/</li>\n\t<li>pom.xml</li>\n\t<li>dependency-reduce-pom.xml</li>\n\t<li>target/</li>\n\t<li>classes/</li>\n\t<li>a.jar (shaded)</li>\n\t<li>a.orig.jar (no-shaded)</li>\n\t<li>b/</li>\n\t<li>pom.xml (depends on a)</li>\n</ul>\n\n\n<p>    If I run `mvn clean compile` the classpath for compiling b will include `base/a/target/classes` which is not shaded, and if b is written to use a shaded class it will fail to compile.  b will also see the full set of non-shaded dependencies from a, so if b is creating an uber jar, it will assume that all of those dependencies will be provided by a, when in reality they will not be.</p>\n\n<p>    If I run `mvn clean package` or `mvn clean install` b will see the shaded a.jar on its classpath, but it will still see the full non-shaded set of a's dependencies.</p>\n\n<p>    The only way I found to make b use the dependency-reduced-pom.xml from a, is to first build/install a without b, and then build/install b without a.  That way a will install the shaded jar and dependency-reduced-pom.xml into the local repository.  Then b will get its dependencies from the local repo instead of trying to rebuild a.</p>\n\n<p>    I'll try to add this to the documentation. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612594412/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144487889","html_url":"https://github.com/apache/storm/pull/736#issuecomment-144487889","issue_url":"https://api.github.com/repos/apache/storm/issues/736","id":144487889,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDQ4Nzg4OQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T17:44:02Z","updated_at":"2015-09-30T17:44:02Z","author_association":"CONTRIBUTOR","body":"@ptgoetz if it does work for you, I'll file a follow on JIRA to look at how we can clean this entire process up.  To me it feels like a bug in the shade plugin, but I don't know for sure.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144487889/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612594418","html_url":"https://github.com/apache/storm/issues/4850#issuecomment-2612594418","issue_url":"https://api.github.com/repos/apache/storm/issues/4850","id":2612594418,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTQ0MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T17:44:03Z","updated_at":"2025-01-24T13:58:19Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/736#issuecomment-144487889\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/736#issuecomment-144487889</a></p>\n\n<p>    @ptgoetz if it does work for you, I'll file a follow on JIRA to look at how we can clean this entire process up.  To me it feels like a bug in the shade plugin, but I don't know for sure.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612594418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144491158","html_url":"https://github.com/apache/storm/pull/736#issuecomment-144491158","issue_url":"https://api.github.com/repos/apache/storm/issues/736","id":144491158,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDQ5MTE1OA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T17:58:11Z","updated_at":"2015-09-30T17:58:11Z","author_association":"CONTRIBUTOR","body":"I filed https://issues.apache.org/jira/browse/MSHADE-206 to see if there is something we can do as part of the shade plugin to address this.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144491158/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612594423","html_url":"https://github.com/apache/storm/issues/4850#issuecomment-2612594423","issue_url":"https://api.github.com/repos/apache/storm/issues/4850","id":2612594423,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTQ0MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T17:58:13Z","updated_at":"2025-01-24T13:58:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/736#issuecomment-144491158\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/736#issuecomment-144491158</a></p>\n\n<p>    I filed <a href=\"https://issues.apache.org/jira/browse/MSHADE-206\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/MSHADE-206</a> to see if there is something we can do as part of the shade plugin to address this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612594423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603537","html_url":"https://github.com/apache/storm/issues/4898#issuecomment-2612603537","issue_url":"https://api.github.com/repos/apache/storm/issues/4898","id":2612603537,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDM1Mzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T18:42:00Z","updated_at":"2025-01-24T14:01:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/757\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/757</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571167","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571167","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571167,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:08:57Z","updated_at":"2025-01-24T13:47:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40837341\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40837341</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/StormSubmitter.java &#8212;<br/>\n    @@ -442,4 +446,35 @@ public static String submitJar(Map conf, String localJar, ProgressListener liste<br/>\n      */<br/>\n     public void onCompleted(String srcFile, String targetFile, long totalBytes);<br/>\n }<br/>\n    +    <br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Extra space</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571167/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571171","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571171","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571171,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExNzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:09:21Z","updated_at":"2025-01-24T13:47:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40837399\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40837399</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/StormSubmitter.java &#8212;<br/>\n    @@ -442,4 +446,35 @@ public static String submitJar(Map conf, String localJar, ProgressListener liste<br/>\n      */<br/>\n     public void onCompleted(String srcFile, String targetFile, long totalBytes);<br/>\n }<br/>\n    +    <br/>\n    +<br/>\n    +    private static void validateConfs(Map stormConf, StormTopology topology) throws IllegalArgumentException {<br/>\n    +double largestMemReq = getMaxExecutorMemoryUsageForTopo(topology, stormConf);<br/>\n    +Double topologyWorkerMaxHeapSize = Utils.getDouble(stormConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB));<br/>\n    +if(topologyWorkerMaxHeapSize < largestMemReq) </p>\n{\n    +    throw new IllegalArgumentException(\"Topology will not be able to be successfully scheduled: Config TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB=\"\n    +    +Utils.getDouble(stormConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB)) + \" < \" \n    +    + largestMemReq + \" (Largest memory requirement of a component in the topology). Perhaps set TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB to a larger amount\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Extra line</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571171/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571175","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571175","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571175,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExNzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:09:51Z","updated_at":"2025-01-24T13:47:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40837456\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40837456</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/generated/AlreadyAliveException.java &#8212;<br/>\n    @@ -51,7 +51,7 @@<br/>\n     import org.slf4j.LoggerFactory;</p>\n\n<p>     @SuppressWarnings(</p>\n{\"cast\", \"rawtypes\", \"serial\", \"unchecked\"}\n<p>)<br/>\n    -@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2015-2-6\")<br/>\n    +@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2015-9-30\")<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we revert the generated files that only have a date change in them?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571185","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571185","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571185,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExODU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:11:33Z","updated_at":"2025-01-24T13:47:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40837655\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40837655</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/networktopography/AbstractDNSToSwitchMapping.java &#8212;<br/>\n    @@ -0,0 +1,97 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.networktopography;<br/>\n    +<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +<br/>\n    +/**<br/>\n    + * This is a base class for DNS to Switch mappings. <p/> It is not mandatory to<br/>\n    + * derive </p>\n{@link DNSToSwitchMapping}\n<p> implementations from it, but it is strongly<br/>\n    + * recommended, as it makes it easy for the developers to add new methods<br/>\n    + * to this base class that are automatically picked up by all implementations.<br/>\n    + * <p/><br/>\n    + *<br/>\n    + */<br/>\n    +public abstract class AbstractDNSToSwitchMapping<br/>\n    +    implements DNSToSwitchMapping {<br/>\n    +<br/>\n    +//  private Configuration conf;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Lets remove this if it is not used. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571185/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571192","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571192","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571192,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExOTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:15:01Z","updated_at":"2025-01-24T13:47:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838080\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838080</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +95,302 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.debug(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, Component> getComponents() {<br/>\n    +Map<String, Component> all_comp = new HashMap<String, Component>();<br/>\n    +<br/>\n    +StormTopology storm_topo = this.topology;<br/>\n    +// spouts<br/>\n    +if (storm_topo.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spoutEntry : storm_topo<br/>\n    +    .get_spouts().entrySet()) {<br/>\n    +if (!Utils.isSystemId(spoutEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(spoutEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(spoutEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.SPOUT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> spoutInput : spoutEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(spoutInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(spoutInput    +.getKey().get_componentId())) {\n    +    all_comp.put(spoutInput.getKey()\n    +    .get_componentId(),\n    +    new Component(spoutInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(spoutInput.getKey()    +.get_componentId()).children.add(spoutEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// bolts<br/>\n    +if (storm_topo.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> boltEntry : storm_topo.get_bolts()<br/>\n    +    .entrySet()) {<br/>\n    +if (!Utils.isSystemId(boltEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(boltEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(boltEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.BOLT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> boltInput : boltEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(boltInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(boltInput    +.getKey().get_componentId())) {\n    +    all_comp.put(boltInput.getKey()\n    +    .get_componentId(),\n    +    new Component(boltInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(boltInput.getKey()    +.get_componentId()).children.add(boltEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return all_comp;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the on heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of on heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOnHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the off heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of off heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOffHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory requirement for a task<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the total memory requirement<br/>\n    +     *  for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getTotalMemReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return getOffHeapMemoryRequirement(exec)\n    +    + getOnHeapMemoryRequirement(exec);\n    +}\n<p>    +LOG.info(\"cannot find {}\", exec);</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Why does this need a log message? Does not seem to add much.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571192/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571197","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571197","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571197,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzExOTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:15:17Z","updated_at":"2025-01-24T13:47:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838121\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838121</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +95,302 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.debug(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, Component> getComponents() {<br/>\n    +Map<String, Component> all_comp = new HashMap<String, Component>();<br/>\n    +<br/>\n    +StormTopology storm_topo = this.topology;<br/>\n    +// spouts<br/>\n    +if (storm_topo.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spoutEntry : storm_topo<br/>\n    +    .get_spouts().entrySet()) {<br/>\n    +if (!Utils.isSystemId(spoutEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(spoutEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(spoutEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.SPOUT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> spoutInput : spoutEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(spoutInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(spoutInput    +.getKey().get_componentId())) {\n    +    all_comp.put(spoutInput.getKey()\n    +    .get_componentId(),\n    +    new Component(spoutInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(spoutInput.getKey()    +.get_componentId()).children.add(spoutEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// bolts<br/>\n    +if (storm_topo.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> boltEntry : storm_topo.get_bolts()<br/>\n    +    .entrySet()) {<br/>\n    +if (!Utils.isSystemId(boltEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(boltEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(boltEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.BOLT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> boltInput : boltEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(boltInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(boltInput    +.getKey().get_componentId())) {\n    +    all_comp.put(boltInput.getKey()\n    +    .get_componentId(),\n    +    new Component(boltInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(boltInput.getKey()    +.get_componentId()).children.add(boltEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return all_comp;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the on heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of on heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOnHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the off heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of off heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOffHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory requirement for a task<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the total memory requirement<br/>\n    +     *  for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getTotalMemReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return getOffHeapMemoryRequirement(exec)\n    +    + getOnHeapMemoryRequirement(exec);\n    +}\n<p>    +LOG.info(\"cannot find {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory resource list for a<br/>\n    +     * set of tasks that is part of a topology.<br/>\n    +     * @return Map<ExecutorDetails, Double> a map of the total memory requirement<br/>\n    +     *  for all tasks in topology topoId.<br/>\n    +     */<br/>\n    +    public Map<ExecutorDetails, Double> getTotalMemoryResourceList() </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Map<ExecutorDetails, Double> ret = new HashMap<ExecutorDetails, Double>();    +for (ExecutorDetails exec }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get the total CPU requirement for executor<br/>\n    +     * @param exec<br/>\n    +     * @return Double the total about of cpu requirement for executor<br/>\n    +     */<br/>\n    +    public Double getTotalCpuReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Again I don't think this log message adds much.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571197/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571206","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571206","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571206,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyMDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:15:39Z","updated_at":"2025-01-24T13:47:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838180\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838180</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +95,302 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.debug(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, Component> getComponents() {<br/>\n    +Map<String, Component> all_comp = new HashMap<String, Component>();<br/>\n    +<br/>\n    +StormTopology storm_topo = this.topology;<br/>\n    +// spouts<br/>\n    +if (storm_topo.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spoutEntry : storm_topo<br/>\n    +    .get_spouts().entrySet()) {<br/>\n    +if (!Utils.isSystemId(spoutEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(spoutEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(spoutEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.SPOUT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> spoutInput : spoutEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(spoutInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(spoutInput    +.getKey().get_componentId())) {\n    +    all_comp.put(spoutInput.getKey()\n    +    .get_componentId(),\n    +    new Component(spoutInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(spoutInput.getKey()    +.get_componentId()).children.add(spoutEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// bolts<br/>\n    +if (storm_topo.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> boltEntry : storm_topo.get_bolts()<br/>\n    +    .entrySet()) {<br/>\n    +if (!Utils.isSystemId(boltEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(boltEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(boltEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.BOLT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> boltInput : boltEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(boltInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(boltInput    +.getKey().get_componentId())) {\n    +    all_comp.put(boltInput.getKey()\n    +    .get_componentId(),\n    +    new Component(boltInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(boltInput.getKey()    +.get_componentId()).children.add(boltEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return all_comp;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the on heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of on heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOnHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the off heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of off heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOffHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory requirement for a task<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the total memory requirement<br/>\n    +     *  for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getTotalMemReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return getOffHeapMemoryRequirement(exec)\n    +    + getOnHeapMemoryRequirement(exec);\n    +}\n<p>    +LOG.info(\"cannot find {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory resource list for a<br/>\n    +     * set of tasks that is part of a topology.<br/>\n    +     * @return Map<ExecutorDetails, Double> a map of the total memory requirement<br/>\n    +     *  for all tasks in topology topoId.<br/>\n    +     */<br/>\n    +    public Map<ExecutorDetails, Double> getTotalMemoryResourceList() </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Map<ExecutorDetails, Double> ret = new HashMap<ExecutorDetails, Double>();    +for (ExecutorDetails exec }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get the total CPU requirement for executor<br/>\n    +     * @param exec<br/>\n    +     * @return Double the total about of cpu requirement for executor<br/>\n    +     */<br/>\n    +    public Double getTotalCpuReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * get the resources requirements for a executor<br/>\n    +     * @param exec<br/>\n    +     * @return a map containing the resource requirements for this exec<br/>\n    +     */<br/>\n    +    public Map<String, Double> getTaskResourceReqList(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList.get(exec);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    And here too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571206/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571214","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571214","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571214,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyMTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:16:18Z","updated_at":"2025-01-24T13:47:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838272\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838272</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +95,302 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.debug(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, Component> getComponents() {<br/>\n    +Map<String, Component> all_comp = new HashMap<String, Component>();<br/>\n    +<br/>\n    +StormTopology storm_topo = this.topology;<br/>\n    +// spouts<br/>\n    +if (storm_topo.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spoutEntry : storm_topo<br/>\n    +    .get_spouts().entrySet()) {<br/>\n    +if (!Utils.isSystemId(spoutEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(spoutEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(spoutEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.SPOUT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> spoutInput : spoutEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(spoutInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(spoutInput    +.getKey().get_componentId())) {\n    +    all_comp.put(spoutInput.getKey()\n    +    .get_componentId(),\n    +    new Component(spoutInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(spoutInput.getKey()    +.get_componentId()).children.add(spoutEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// bolts<br/>\n    +if (storm_topo.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> boltEntry : storm_topo.get_bolts()<br/>\n    +    .entrySet()) {<br/>\n    +if (!Utils.isSystemId(boltEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(boltEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(boltEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.BOLT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> boltInput : boltEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(boltInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(boltInput    +.getKey().get_componentId())) {\n    +    all_comp.put(boltInput.getKey()\n    +    .get_componentId(),\n    +    new Component(boltInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(boltInput.getKey()    +.get_componentId()).children.add(boltEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return all_comp;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the on heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of on heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOnHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the off heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of off heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOffHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory requirement for a task<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the total memory requirement<br/>\n    +     *  for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getTotalMemReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return getOffHeapMemoryRequirement(exec)\n    +    + getOnHeapMemoryRequirement(exec);\n    +}\n<p>    +LOG.info(\"cannot find {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory resource list for a<br/>\n    +     * set of tasks that is part of a topology.<br/>\n    +     * @return Map<ExecutorDetails, Double> a map of the total memory requirement<br/>\n    +     *  for all tasks in topology topoId.<br/>\n    +     */<br/>\n    +    public Map<ExecutorDetails, Double> getTotalMemoryResourceList() </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Map<ExecutorDetails, Double> ret = new HashMap<ExecutorDetails, Double>();    +for (ExecutorDetails exec }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get the total CPU requirement for executor<br/>\n    +     * @param exec<br/>\n    +     * @return Double the total about of cpu requirement for executor<br/>\n    +     */<br/>\n    +    public Double getTotalCpuReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * get the resources requirements for a executor<br/>\n    +     * @param exec<br/>\n    +     * @return a map containing the resource requirements for this exec<br/>\n    +     */<br/>\n    +    public Map<String, Double> getTaskResourceReqList(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList.get(exec);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Checks if a executor is part of this topology<br/>\n    +     * @return Boolean whether or not a certain ExecutorDetail is included in the _resourceList.<br/>\n    +     */<br/>\n    +    public boolean hasExecInTopo(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +if (_resourceList != null) { // null is possible if the first constructor of TopologyDetails is used\n    +    return _resourceList.containsKey(exec);\n    +} else {\n    +    return false;\n    +}    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * add resource requirements for a executor<br/>\n    +     * @param exec<br/>\n    +     * @param resourceList<br/>\n    +     */<br/>\n    +    public void addResourcesForExec(ExecutorDetails exec, Map<String, Double> resourceList) {<br/>\n    +if (hasExecInTopo(exec)) {<br/>\n    +    LOG.warn(\"Executor {} already exists...ResourceList: {}\", exec, getTaskResourceReqList(exec));<br/>\n    +    return;<br/>\n    +}<br/>\n    +_resourceList.put(exec, resourceList);<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Add default resource requirements for a executor<br/>\n    +     * @param exec<br/>\n    +     */<br/>\n    +    public void addDefaultResforExec(ExecutorDetails exec) {<br/>\n    +Map<String, Double> defaultResourceList = new HashMap<String, Double>();<br/>\n    +defaultResourceList.put(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT,<br/>\n    +Utils.getDouble(topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT), null));<br/>\n    +defaultResourceList.put(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB,<br/>\n    +Utils.getDouble(topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB), null));<br/>\n    +defaultResourceList.put(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB,<br/>\n    +Utils.getDouble(topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB), null));<br/>\n    +LOG.warn(\"Scheduling Executor: {} with memory requirement as onHeap: {} - offHeap: {} \" +</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    This should either be debug or should be removed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571214/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571219","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571219","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571219,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyMTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:18:18Z","updated_at":"2025-01-24T13:47:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838543\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838543</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/ResourceAwareScheduler.java &#8212;<br/>\n    @@ -0,0 +1,152 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.scheduler.resource;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I don't really like .* imports they can result in errors if new classes are added to that package.  It is not a big deal, but would be nice to avoid.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571219/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571224","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571224","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571224,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyMjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:18:33Z","updated_at":"2025-01-24T13:47:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838571\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838571</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/ResourceAwareScheduler.java &#8212;<br/>\n    @@ -0,0 +1,152 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.scheduler.resource;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +import backtype.storm.Config;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import backtype.storm.scheduler.Cluster;<br/>\n    +import backtype.storm.scheduler.ExecutorDetails;<br/>\n    +import backtype.storm.scheduler.IScheduler;<br/>\n    +import backtype.storm.scheduler.Topologies;<br/>\n    +import backtype.storm.scheduler.TopologyDetails;<br/>\n    +import backtype.storm.scheduler.WorkerSlot;<br/>\n    +import backtype.storm.scheduler.resource.strategies.ResourceAwareStrategy;<br/>\n    +<br/>\n    +public class ResourceAwareScheduler implements IScheduler {<br/>\n    +    private static final Logger LOG = LoggerFactory<br/>\n    +    .getLogger(ResourceAwareScheduler.class);<br/>\n    +    @SuppressWarnings(\"rawtypes\")<br/>\n    +    private Map _conf;<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +_conf = conf;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void schedule(Topologies topologies, Cluster cluster) {<br/>\n    +LOG.info(\"\\n\\n\\nRerunning ResourceAwareScheduler...\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    debug or remove.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571224/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571228","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571228","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571228,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyMjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:20:11Z","updated_at":"2025-01-24T13:47:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838769\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838769</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/ResourceUtils.java &#8212;<br/>\n    @@ -0,0 +1,117 @@<br/>\n    +package backtype.storm.scheduler.resource;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This file needs the apache header.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571230","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571230","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571230,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyMzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:20:42Z","updated_at":"2025-01-24T13:47:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838824\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838824</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/ResourceUtils.java &#8212;<br/>\n    @@ -0,0 +1,117 @@<br/>\n    +package backtype.storm.scheduler.resource;<br/>\n    +<br/>\n    +import backtype.storm.Config;<br/>\n    +import backtype.storm.generated.Bolt;<br/>\n    +import backtype.storm.generated.SpoutSpec;<br/>\n    +import backtype.storm.generated.StormTopology;<br/>\n    +import org.json.simple.JSONObject;<br/>\n    +import org.json.simple.parser.JSONParser;<br/>\n    +import org.json.simple.parser.ParseException;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Created by jerrypeng on 9/22/15.<br/>\n    + */<br/>\n    +public class ResourceUtils {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    git should take care of history instead of code comments.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571233","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571233","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571233,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyMzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:21:28Z","updated_at":"2025-01-24T13:47:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40838906\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40838906</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/strategies/IStrategy.java &#8212;<br/>\n    @@ -0,0 +1,33 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.scheduler.resource.strategies;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import backtype.storm.scheduler.Topologies;<br/>\n    +import backtype.storm.scheduler.ExecutorDetails;<br/>\n    +import backtype.storm.scheduler.TopologyDetails;<br/>\n    +import backtype.storm.scheduler.WorkerSlot;<br/>\n    +import backtype.storm.scheduler.resource.RAS_Node;<br/>\n    +<br/>\n    +public interface IStrategy {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we add a comment about what a Strategy is?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571233/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144514012","html_url":"https://github.com/apache/storm/pull/746#issuecomment-144514012","issue_url":"https://api.github.com/repos/apache/storm/issues/746","id":144514012,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDUxNDAxMg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:25:05Z","updated_at":"2015-09-30T19:25:05Z","author_association":"CONTRIBUTOR","body":"@jerrypeng for the most part the code looks really good.  I would mostly just like to see a lot of the debug logging turned into LOG.debug instead of LOG.info statements.\n\nFor everyone else I think it is important to point out that resource aware scheduling is still an experimental feature.  The APIs should be fairly stable, but there is a lot more work to be done with it before it is production ready.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144514012/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571235","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571235","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571235,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyMzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:25:06Z","updated_at":"2025-01-24T13:47:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#issuecomment-144514012\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#issuecomment-144514012</a></p>\n\n<p>    @jerrypeng for the most part the code looks really good.  I would mostly just like to see a lot of the debug logging turned into LOG.debug instead of LOG.info statements.</p>\n\n<p>    For everyone else I think it is important to point out that resource aware scheduling is still an experimental feature.  The APIs should be fairly stable, but there is a lot more work to be done with it before it is production ready.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571235/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144514881","html_url":"https://github.com/apache/storm/pull/770#issuecomment-144514881","issue_url":"https://api.github.com/repos/apache/storm/issues/770","id":144514881,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDUxNDg4MQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:29:14Z","updated_at":"2015-09-30T19:29:14Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144514881/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144515204","html_url":"https://github.com/apache/storm/pull/769#issuecomment-144515204","issue_url":"https://api.github.com/repos/apache/storm/issues/769","id":144515204,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDUxNTIwNA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:30:31Z","updated_at":"2015-09-30T19:30:31Z","author_association":"CONTRIBUTOR","body":"+1 looks good to me.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144515204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604341","html_url":"https://github.com/apache/storm/issues/4904#issuecomment-2612604341","issue_url":"https://api.github.com/repos/apache/storm/issues/4904","id":2612604341,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDQzNDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:30:32Z","updated_at":"2025-01-24T14:02:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/769#issuecomment-144515204\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/769#issuecomment-144515204</a></p>\n\n<p>    +1 looks good to me.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612604341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603969","html_url":"https://github.com/apache/storm/issues/4901#issuecomment-2612603969","issue_url":"https://api.github.com/repos/apache/storm/issues/4901","id":2612603969,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDM5Njk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:50:10Z","updated_at":"2025-01-24T14:02:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/760\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/760</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603969/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603975","html_url":"https://github.com/apache/storm/issues/4901#issuecomment-2612603975","issue_url":"https://api.github.com/repos/apache/storm/issues/4901","id":2612603975,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDM5NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T19:51:33Z","updated_at":"2025-01-24T14:02:07Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zhuoliu\" class=\"user-hover\" rel=\"zhuoliu\">Zhuo Liu</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144522660","html_url":"https://github.com/apache/storm/pull/756#issuecomment-144522660","issue_url":"https://api.github.com/repos/apache/storm/issues/756","id":144522660,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDUyMjY2MA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:00:12Z","updated_at":"2015-09-30T20:00:12Z","author_association":"CONTRIBUTOR","body":"+1 looks good.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144522660/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603302","html_url":"https://github.com/apache/storm/issues/4896#issuecomment-2612603302","issue_url":"https://api.github.com/repos/apache/storm/issues/4896","id":2612603302,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDMzMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:00:16Z","updated_at":"2025-01-24T14:01:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/756#issuecomment-144522660\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/756#issuecomment-144522660</a></p>\n\n<p>    +1 looks good.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603308","html_url":"https://github.com/apache/storm/issues/4896#issuecomment-2612603308","issue_url":"https://api.github.com/repos/apache/storm/issues/4896","id":2612603308,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDMzMDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:13:03Z","updated_at":"2025-01-24T14:01:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/756\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/756</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603308/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603321","html_url":"https://github.com/apache/storm/issues/4896#issuecomment-2612603321","issue_url":"https://api.github.com/repos/apache/storm/issues/4896","id":2612603321,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDMzMjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:13:48Z","updated_at":"2025-01-24T14:01:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zhuoliu\" class=\"user-hover\" rel=\"zhuoliu\">Zhuo Liu</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612603321/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602707","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602707","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602707,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:16:55Z","updated_at":"2025-01-24T14:01:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40845429\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40845429</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/backtype/storm/daemon/executor.clj &#8212;<br/>\n    @@ -550,14 +553,16 @@<br/>\n     has-ackers? (has-ackers? storm-conf)<br/>\n     has-eventloggers? (has-eventloggers? storm-conf)<br/>\n     emitted-count (MutableLong. 0)</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>empty-emit-streak (MutableLong. 0)]</li>\n\t<li><p>    +empty-emit-streak (MutableLong. 0)<br/>\n    +spout-counts (count task-datas)</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    spout-counts does not appear to be used anywhere.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602707/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602724","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602724","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602724,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3MjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:18:05Z","updated_at":"2025-01-24T14:01:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40845541\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40845541</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/backtype/storm/daemon/executor.clj &#8212;<br/>\n    @@ -663,8 +673,9 @@<br/>\n (reset! last-active true)<br/>\n (log-message \"Activating spout \" component-id \":\" (keys task-datas))<br/>\n (fast-list-iter <span class=\"error\">&#91;^ISpout spout spouts&#93;</span> (.activate spout)))</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li></li>\n\t<li>(fast-list-iter <span class=\"error\">&#91;^ISpout spout spouts&#93;</span> (.nextTuple spout)))<br/>\n    +<br/>\n    +  (fast-list-iter <span class=\"error\">&#91;^ISpout spout spouts&#93;</span> (.nextTuple spout))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    I'm not sure we want to split the ')' onto a new line.  It does not follow the formatting.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602724/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602730","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602730","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602730,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3MzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:22:05Z","updated_at":"2025-01-24T14:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40846010\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40846010</a></p>\n\n<p>    &#8212; Diff: storm-core/src/storm.thrift &#8212;<br/>\n    @@ -204,6 +203,7 @@ struct ExecutorStats {<br/>\n       2: required map<string, map<string, i64>> transferred;<br/>\n       3: required ExecutorSpecificStats specific;<br/>\n       4: required double rate;<br/>\n    +  5: required map<string, map<string, double>> throughput;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    If we want to be able to add this as a rolling upgrade this needs to be optional, and we need the code everywhere to be able to handle when it is not provided.</p>\n\n<p>    To me this feature is not important enough to force downtime in a cluster.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602730/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602739","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602739","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602739,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3Mzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:22:36Z","updated_at":"2025-01-24T14:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40846081\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40846081</a></p>\n\n<p>    &#8212; Diff: storm-core/src/ui/public/js/visualization.js &#8212;<br/>\n    @@ -127,13 +127,13 @@ function renderGraph(elem) {<br/>\n     }</p>\n\n<p>     var w = Math.max(55, 25 + gfx.textWidth(node.name));</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Can we revert this entire file.  No reason to change it just for white space differences.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602739/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602746","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602746","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602746,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3NDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:24:17Z","updated_at":"2025-01-24T14:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40846293\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40846293</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/utils/RateTracker.java &#8212;<br/>\n    @@ -87,7 +95,7 @@ public final float reportRate() </p>\n{\n sum += _histograms[i];\n     }\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>return sum / (float) duration * 1000;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Isn't the disruptor queue using RateTracker already?  Is this a bug in rate tracker where it said it was doing milliseconds but was really doing seconds?  Or is this going to make the disruptor metrics wrong?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602746/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602754","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602754","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602754,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:25:47Z","updated_at":"2025-01-24T14:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40846514\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40846514</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/utils/RateTracker.java &#8212;<br/>\n    @@ -60,6 +65,9 @@ public RateTracker(int validTimeWindowInMils, int numOfSlides, boolean simulate<br/>\n     assert(_slideSizeInMils > 1);<br/>\n     _histograms = new long<span class=\"error\">&#91;_numOfSlides&#93;</span>;<br/>\n     Arrays.fill(_histograms,0L);<br/>\n    +/* the first instance of RateTracker is responsible for creating this globally shared timer. */<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we use c++ style comments `<br class=\"atl-forced-newline\" />`` instead of `&#42; *\\`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602754/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602759","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602759","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602759,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:30:10Z","updated_at":"2025-01-24T14:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40847090\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40847090</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/utils/RateTracker.java &#8212;<br/>\n    @@ -72,7 +80,7 @@ public RateTracker(int validTimeWindowInMils, int numOfSlides, boolean simulate</p>\n<ul>\n\t<li>@param count number of arrivals<br/>\n  */<br/>\n public void notify(long count) {</li>\n</ul>\n<ul class=\"alternate\" type=\"square\">\n\t<li>_histograms<span class=\"error\">&#91;_histograms.length-1&#93;</span>+=count;<br/>\n    +_histograms<span class=\"error\">&#91;_numOfSlides - 1&#93;</span> += count;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    I don't think this is thread safe.  I'm not sure that is a big deal for this code, as I am not aware of any spouts that emit from multiple threads ignoring the call to nextTuple.  But we should file a JIRA at least to fix it because the disruptor code calls it from multiple threads, and the counts will get off.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602759/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602768","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602768","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602768,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:38:26Z","updated_at":"2025-01-24T14:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40848077\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40848077</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/utils/RateTracker.java &#8212;<br/>\n    @@ -72,7 +80,7 @@ public RateTracker(int validTimeWindowInMils, int numOfSlides, boolean simulate</p>\n<ul>\n\t<li>@param count number of arrivals<br/>\n  */<br/>\n public void notify(long count) {</li>\n</ul>\n<ul class=\"alternate\" type=\"square\">\n\t<li>_histograms<span class=\"error\">&#91;_histograms.length-1&#93;</span>+=count;<br/>\n    +_histograms<span class=\"error\">&#91;_numOfSlides - 1&#93;</span> += count;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Never mind I filed <a href=\"https://issues.apache.org/jira/browse/STORM-1078\" title=\"RateTracker.java is not thread safe\" class=\"issue-link\" data-issue-key=\"STORM-1078\"><del>STORM-1078</del></a> myself.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602768/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602778","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602778","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602778,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:40:18Z","updated_at":"2025-01-24T14:01:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40848297\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40848297</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/backtype/storm/stats.clj &#8212;<br/>\n    @@ -218,11 +220,17 @@<br/>\n       <span class=\"error\">&#91;stats stream amt&#93;</span><br/>\n       (update-executor-stat! stats <span class=\"error\">&#91;:common :transferred&#93;</span> stream (* (stats-rate stats) amt)))</p>\n\n<p>    +(defn update-stats-throughput! <span class=\"error\">&#91;stats stream throughput&#93;</span><br/>\n    +  (update-executor-stat! stats <span class=\"error\">&#91;:common :throughput&#93;</span> stream (* (stats-rate stats) throughput)))<br/>\n    +<br/>\n     (defn bolt-execute-tuple!</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><span class=\"error\">&#91;^BoltExecutorStats stats component stream latency-ms&#93;</span><br/>\n    +  <span class=\"error\">&#91;^BoltExecutorStats stats component stream throughput latency-ms&#93;</span><br/>\n       (let [key <span class=\"error\">&#91;component stream&#93;</span>]<br/>\n (update-executor-stat! stats :executed key (stats-rate stats))</li>\n\t<li>(update-executor-stat! stats :execute-latencies key latency-ms)))<br/>\n    +    (update-executor-stat! stats :execute-latencies key latency-ms)<br/>\n    +    (update-stats-throughput! stats stream throughput)<br/>\n    +    ))<br/>\n    +\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Extra blank line here.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602778/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571240","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571240","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571240,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:45:20Z","updated_at":"2025-01-24T13:47:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40848979\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40848979</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/StormSubmitter.java &#8212;<br/>\n    @@ -442,4 +446,35 @@ public static String submitJar(Map conf, String localJar, ProgressListener liste<br/>\n      */<br/>\n     public void onCompleted(String srcFile, String targetFile, long totalBytes);<br/>\n }<br/>\n    +    <br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571240/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571249","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571249","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571249,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:46:24Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40849130\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40849130</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/networktopography/AbstractDNSToSwitchMapping.java &#8212;<br/>\n    @@ -0,0 +1,97 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.networktopography;<br/>\n    +<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +import java.util.Set;<br/>\n    +<br/>\n    +/**<br/>\n    + * This is a base class for DNS to Switch mappings. <p/> It is not mandatory to<br/>\n    + * derive </p>\n{@link DNSToSwitchMapping}\n<p> implementations from it, but it is strongly<br/>\n    + * recommended, as it makes it easy for the developers to add new methods<br/>\n    + * to this base class that are automatically picked up by all implementations.<br/>\n    + * <p/><br/>\n    + *<br/>\n    + */<br/>\n    +public abstract class AbstractDNSToSwitchMapping<br/>\n    +    implements DNSToSwitchMapping {<br/>\n    +<br/>\n    +//  private Configuration conf;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571249/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602784","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602784","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602784,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:47:20Z","updated_at":"2025-01-24T14:01:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40849246\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40849246</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/backtype/storm/daemon/executor.clj &#8212;<br/>\n    @@ -570,7 +575,11 @@<br/>\n      (tasks-fn out-stream-id values))<br/>\n  rooted? (and message-id has-ackers?)<br/>\n  root-id (if rooted? (MessageId/generateId rand))</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>out-ids (fast-list-for <span class=\"error\">&#91;t out-tasks&#93;</span> (if rooted? (MessageId/generateId rand)))]<br/>\n    +     out-ids (fast-list-for <span class=\"error\">&#91;t out-tasks&#93;</span> (if rooted? (MessageId/generateId rand)))<br/>\n    +     sampler? (sampler)]<br/>\n    + (when sampler?<br/>\n    +   (.notify rate-tracker (count out-tasks))<br/>\n    +   (stats/update-stats-throughput! (:stats executor-data) out-stream-id (.reportRate rate-tracker)))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    This is calculating the rate for the spout ignoring the stream-id, and then storing it into the other stats saying it is for a specific stream id.  That does not work.  Either we have to drop the stream-id from the reported stats or we have to calculate it correctly per stream id.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602784/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571253","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571253","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571253,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:47:34Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40849279\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40849279</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +95,302 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.debug(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, Component> getComponents() {<br/>\n    +Map<String, Component> all_comp = new HashMap<String, Component>();<br/>\n    +<br/>\n    +StormTopology storm_topo = this.topology;<br/>\n    +// spouts<br/>\n    +if (storm_topo.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spoutEntry : storm_topo<br/>\n    +    .get_spouts().entrySet()) {<br/>\n    +if (!Utils.isSystemId(spoutEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(spoutEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(spoutEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.SPOUT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> spoutInput : spoutEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(spoutInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(spoutInput    +.getKey().get_componentId())) {\n    +    all_comp.put(spoutInput.getKey()\n    +    .get_componentId(),\n    +    new Component(spoutInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(spoutInput.getKey()    +.get_componentId()).children.add(spoutEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// bolts<br/>\n    +if (storm_topo.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> boltEntry : storm_topo.get_bolts()<br/>\n    +    .entrySet()) {<br/>\n    +if (!Utils.isSystemId(boltEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(boltEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(boltEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.BOLT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> boltInput : boltEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(boltInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(boltInput    +.getKey().get_componentId())) {\n    +    all_comp.put(boltInput.getKey()\n    +    .get_componentId(),\n    +    new Component(boltInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(boltInput.getKey()    +.get_componentId()).children.add(boltEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return all_comp;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the on heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of on heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOnHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the off heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of off heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOffHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory requirement for a task<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the total memory requirement<br/>\n    +     *  for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getTotalMemReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return getOffHeapMemoryRequirement(exec)\n    +    + getOnHeapMemoryRequirement(exec);\n    +}\n<p>    +LOG.info(\"cannot find {}\", exec);</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571258","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571258","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571258,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:47:37Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40849297\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40849297</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +95,302 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.debug(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, Component> getComponents() {<br/>\n    +Map<String, Component> all_comp = new HashMap<String, Component>();<br/>\n    +<br/>\n    +StormTopology storm_topo = this.topology;<br/>\n    +// spouts<br/>\n    +if (storm_topo.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spoutEntry : storm_topo<br/>\n    +    .get_spouts().entrySet()) {<br/>\n    +if (!Utils.isSystemId(spoutEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(spoutEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(spoutEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.SPOUT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> spoutInput : spoutEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(spoutInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(spoutInput    +.getKey().get_componentId())) {\n    +    all_comp.put(spoutInput.getKey()\n    +    .get_componentId(),\n    +    new Component(spoutInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(spoutInput.getKey()    +.get_componentId()).children.add(spoutEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// bolts<br/>\n    +if (storm_topo.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> boltEntry : storm_topo.get_bolts()<br/>\n    +    .entrySet()) {<br/>\n    +if (!Utils.isSystemId(boltEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(boltEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(boltEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.BOLT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> boltInput : boltEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(boltInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(boltInput    +.getKey().get_componentId())) {\n    +    all_comp.put(boltInput.getKey()\n    +    .get_componentId(),\n    +    new Component(boltInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(boltInput.getKey()    +.get_componentId()).children.add(boltEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return all_comp;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the on heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of on heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOnHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the off heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of off heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOffHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory requirement for a task<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the total memory requirement<br/>\n    +     *  for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getTotalMemReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return getOffHeapMemoryRequirement(exec)\n    +    + getOnHeapMemoryRequirement(exec);\n    +}\n<p>    +LOG.info(\"cannot find {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory resource list for a<br/>\n    +     * set of tasks that is part of a topology.<br/>\n    +     * @return Map<ExecutorDetails, Double> a map of the total memory requirement<br/>\n    +     *  for all tasks in topology topoId.<br/>\n    +     */<br/>\n    +    public Map<ExecutorDetails, Double> getTotalMemoryResourceList() </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Map<ExecutorDetails, Double> ret = new HashMap<ExecutorDetails, Double>();    +for (ExecutorDetails exec }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get the total CPU requirement for executor<br/>\n    +     * @param exec<br/>\n    +     * @return Double the total about of cpu requirement for executor<br/>\n    +     */<br/>\n    +    public Double getTotalCpuReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571258/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571262","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571262","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571262,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:47:39Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40849301\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40849301</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +95,302 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.debug(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, Component> getComponents() {<br/>\n    +Map<String, Component> all_comp = new HashMap<String, Component>();<br/>\n    +<br/>\n    +StormTopology storm_topo = this.topology;<br/>\n    +// spouts<br/>\n    +if (storm_topo.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spoutEntry : storm_topo<br/>\n    +    .get_spouts().entrySet()) {<br/>\n    +if (!Utils.isSystemId(spoutEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(spoutEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(spoutEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.SPOUT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> spoutInput : spoutEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(spoutInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(spoutInput    +.getKey().get_componentId())) {\n    +    all_comp.put(spoutInput.getKey()\n    +    .get_componentId(),\n    +    new Component(spoutInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(spoutInput.getKey()    +.get_componentId()).children.add(spoutEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// bolts<br/>\n    +if (storm_topo.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> boltEntry : storm_topo.get_bolts()<br/>\n    +    .entrySet()) {<br/>\n    +if (!Utils.isSystemId(boltEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(boltEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(boltEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.BOLT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> boltInput : boltEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(boltInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(boltInput    +.getKey().get_componentId())) {\n    +    all_comp.put(boltInput.getKey()\n    +    .get_componentId(),\n    +    new Component(boltInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(boltInput.getKey()    +.get_componentId()).children.add(boltEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return all_comp;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the on heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of on heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOnHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the off heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of off heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOffHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory requirement for a task<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the total memory requirement<br/>\n    +     *  for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getTotalMemReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return getOffHeapMemoryRequirement(exec)\n    +    + getOnHeapMemoryRequirement(exec);\n    +}\n<p>    +LOG.info(\"cannot find {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory resource list for a<br/>\n    +     * set of tasks that is part of a topology.<br/>\n    +     * @return Map<ExecutorDetails, Double> a map of the total memory requirement<br/>\n    +     *  for all tasks in topology topoId.<br/>\n    +     */<br/>\n    +    public Map<ExecutorDetails, Double> getTotalMemoryResourceList() </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Map<ExecutorDetails, Double> ret = new HashMap<ExecutorDetails, Double>();    +for (ExecutorDetails exec }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get the total CPU requirement for executor<br/>\n    +     * @param exec<br/>\n    +     * @return Double the total about of cpu requirement for executor<br/>\n    +     */<br/>\n    +    public Double getTotalCpuReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * get the resources requirements for a executor<br/>\n    +     * @param exec<br/>\n    +     * @return a map containing the resource requirements for this exec<br/>\n    +     */<br/>\n    +    public Map<String, Double> getTaskResourceReqList(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList.get(exec);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571262/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571266","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571266","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571266,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:48:20Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40849422\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40849422</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/TopologyDetails.java &#8212;<br/>\n    @@ -79,11 +95,302 @@ public StormTopology getTopology() </p>\n{\n     ret.put(executor, compId);\n }\n<p>     }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n     return ret;<br/>\n }</p></li>\n\t<li><p>    +<br/>\n public Collection<ExecutorDetails> getExecutors() </p>\n{\n     return this.executorToComponent.keySet();\n }\n<p>    +<br/>\n    +    private void initResourceList() {<br/>\n    +_resourceList = new HashMap<ExecutorDetails, Map<String, Double>>();<br/>\n    +// Extract bolt memory info<br/>\n    +if (this.topology.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> bolt : this.topology.get_bolts().entrySet()) {<br/>\n    +//the json_conf is populated by TopologyBuilder (e.g. boltDeclarer.setMemoryLoad)<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(bolt<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, bolt.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (bolt.getKey().equals(anExecutorToComponent.getValue())) {\n    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// Extract spout memory info<br/>\n    +if (this.topology.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spout : this.topology.get_spouts().entrySet()) {<br/>\n    +Map<String, Double> topology_resources = ResourceUtils.parseResources(spout<br/>\n    +.getValue().get_common().get_json_conf());<br/>\n    +ResourceUtils.checkIntialization(topology_resources, spout.getValue().toString(), this.topologyConf);<br/>\n    +for (Map.Entry<ExecutorDetails, String> anExecutorToComponent : executorToComponent.entrySet()) {<br/>\n    +    if (spout.getKey().equals(anExecutorToComponent.getValue())) {    +_resourceList.put(anExecutorToComponent.getKey(), topology_resources);    +    }    +}</span> </div>\n<p>    +    }<br/>\n    +} else </p>\n{\n    +    LOG.warn(\"Topology \" + topologyId + \" does not seem to have any spouts!\");\n    +}\n<p>    +//schedule tasks that are not part of components returned from topology.get_spout or topology.getbolt (AKA sys tasks most specifically __acker tasks)<br/>\n    +for(ExecutorDetails exec : this.getExecutors()) {<br/>\n    +    if (_resourceList.containsKey(exec) == false) {<br/>\n    +LOG.debug(<br/>\n    +\"Scheduling {} {} with memory requirement as 'on heap' - {} and 'off heap' - {} and CPU requirement as {}\",<br/>\n    +this.getExecutorToComponent().get(exec),<br/>\n    +exec,<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB),<br/>\n    +this.topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT));<br/>\n    +this.addDefaultResforExec(exec);<br/>\n    +    } <br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private List<ExecutorDetails> componentToExecs(String comp) {<br/>\n    +List<ExecutorDetails> execs = new ArrayList<>();<br/>\n    +for (Map.Entry<ExecutorDetails, String> entry : executorToComponent.entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +    if (entry.getValue().equals(comp)) {\n    +execs.add(entry.getKey());\n    +    }    +}</span> </div>\n<p>    +return execs;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Returns a representation of the non-system components of the topology graph<br/>\n    +     * Each Component object in the returning map is populated with the list of its<br/>\n    +     * parents, children and execs assigned to that component.<br/>\n    +     * @return a map of components<br/>\n    +     */<br/>\n    +    public Map<String, Component> getComponents() {<br/>\n    +Map<String, Component> all_comp = new HashMap<String, Component>();<br/>\n    +<br/>\n    +StormTopology storm_topo = this.topology;<br/>\n    +// spouts<br/>\n    +if (storm_topo.get_spouts() != null) {<br/>\n    +    for (Map.Entry<String, SpoutSpec> spoutEntry : storm_topo<br/>\n    +    .get_spouts().entrySet()) {<br/>\n    +if (!Utils.isSystemId(spoutEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(spoutEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(spoutEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(spoutEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.SPOUT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> spoutInput : spoutEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(spoutInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(spoutInput    +.getKey().get_componentId())) {\n    +    all_comp.put(spoutInput.getKey()\n    +    .get_componentId(),\n    +    new Component(spoutInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(spoutInput.getKey()    +.get_componentId()).children.add(spoutEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +// bolts<br/>\n    +if (storm_topo.get_bolts() != null) {<br/>\n    +    for (Map.Entry<String, Bolt> boltEntry : storm_topo.get_bolts()<br/>\n    +    .entrySet()) {<br/>\n    +if (!Utils.isSystemId(boltEntry.getKey())) {<br/>\n    +    Component newComp = null;<br/>\n    +    if (all_comp.containsKey(boltEntry.getKey())) </p>\n{\n    +newComp = all_comp.get(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +    }\n<p> else </p>\n{\n    +newComp = new Component(boltEntry.getKey());\n    +newComp.execs = componentToExecs(newComp.id);\n    +all_comp.put(boltEntry.getKey(), newComp);\n    +    }\n<p>    +    newComp.type = Component.ComponentType.BOLT;<br/>\n    +<br/>\n    +    for (Map.Entry<GlobalStreamId, Grouping> boltInput : boltEntry<br/>\n    +    .getValue().get_common().get_inputs()<br/>\n    +    .entrySet()) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +newComp.parents.add(boltInput.getKey()    +.get_componentId());    +if (!all_comp.containsKey(boltInput    +.getKey().get_componentId())) {\n    +    all_comp.put(boltInput.getKey()\n    +    .get_componentId(),\n    +    new Component(boltInput.getKey()\n    +    .get_componentId()));\n    +}    +all_comp.get(boltInput.getKey()    +.get_componentId()).children.add(boltEntry    +.getKey());    +    }</span> </div>\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return all_comp;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the on heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of on heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOnHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the off heap memory requirement for a<br/>\n    +     * certain task within a topology<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the amount of off heap memory<br/>\n    +     * requirement for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getOffHeapMemoryRequirement(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Double ret = null;    +if (hasExecInTopo(exec)) {\n    +    ret = _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB);\n    +}    +return ret;    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory requirement for a task<br/>\n    +     * @param exec the executor the inquiry is concerning.<br/>\n    +     * @return Double the total memory requirement<br/>\n    +     *  for this exec in topology topoId.<br/>\n    +     */<br/>\n    +    public Double getTotalMemReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return getOffHeapMemoryRequirement(exec)\n    +    + getOnHeapMemoryRequirement(exec);\n    +}\n<p>    +LOG.info(\"cannot find {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Gets the total memory resource list for a<br/>\n    +     * set of tasks that is part of a topology.<br/>\n    +     * @return Map<ExecutorDetails, Double> a map of the total memory requirement<br/>\n    +     *  for all tasks in topology topoId.<br/>\n    +     */<br/>\n    +    public Map<ExecutorDetails, Double> getTotalMemoryResourceList() </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +Map<ExecutorDetails, Double> ret = new HashMap<ExecutorDetails, Double>();    +for (ExecutorDetails exec }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * Get the total CPU requirement for executor<br/>\n    +     * @param exec<br/>\n    +     * @return Double the total about of cpu requirement for executor<br/>\n    +     */<br/>\n    +    public Double getTotalCpuReqTask(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList\n    +    .get(exec)\n    +    .get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * get the resources requirements for a executor<br/>\n    +     * @param exec<br/>\n    +     * @return a map containing the resource requirements for this exec<br/>\n    +     */<br/>\n    +    public Map<String, Double> getTaskResourceReqList(ExecutorDetails exec) {<br/>\n    +if (hasExecInTopo(exec)) </p>\n{\n    +    return _resourceList.get(exec);\n    +}\n<p>    +LOG.warn(\"cannot find - {}\", exec);<br/>\n    +return null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Checks if a executor is part of this topology<br/>\n    +     * @return Boolean whether or not a certain ExecutorDetail is included in the _resourceList.<br/>\n    +     */<br/>\n    +    public boolean hasExecInTopo(ExecutorDetails exec) </p>\n<div class=\"error\"><span class=\"error\">Unknown macro: {    +if (_resourceList != null) { // null is possible if the first constructor of TopologyDetails is used\n    +    return _resourceList.containsKey(exec);\n    +} else {\n    +    return false;\n    +}    +    }</span> </div>\n<p>    +<br/>\n    +    /**<br/>\n    +     * add resource requirements for a executor<br/>\n    +     * @param exec<br/>\n    +     * @param resourceList<br/>\n    +     */<br/>\n    +    public void addResourcesForExec(ExecutorDetails exec, Map<String, Double> resourceList) {<br/>\n    +if (hasExecInTopo(exec)) {<br/>\n    +    LOG.warn(\"Executor {} already exists...ResourceList: {}\", exec, getTaskResourceReqList(exec));<br/>\n    +    return;<br/>\n    +}<br/>\n    +_resourceList.put(exec, resourceList);<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Add default resource requirements for a executor<br/>\n    +     * @param exec<br/>\n    +     */<br/>\n    +    public void addDefaultResforExec(ExecutorDetails exec) {<br/>\n    +Map<String, Double> defaultResourceList = new HashMap<String, Double>();<br/>\n    +defaultResourceList.put(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT,<br/>\n    +Utils.getDouble(topologyConf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT), null));<br/>\n    +defaultResourceList.put(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB,<br/>\n    +Utils.getDouble(topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB), null));<br/>\n    +defaultResourceList.put(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB,<br/>\n    +Utils.getDouble(topologyConf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB), null));<br/>\n    +LOG.warn(\"Scheduling Executor: {} with memory requirement as onHeap: {} - offHeap: {} \" +</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    will change to debug</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571266/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571269","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571269","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571269,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:49:24Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40849566\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40849566</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/ResourceAwareScheduler.java &#8212;<br/>\n    @@ -0,0 +1,152 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.scheduler.resource;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will change</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571269/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602788","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602788","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602788,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:53:18Z","updated_at":"2025-01-24T14:01:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r40850076\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r40850076</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/backtype/storm/daemon/executor.clj &#8212;<br/>\n    @@ -570,7 +575,11 @@<br/>\n      (tasks-fn out-stream-id values))<br/>\n  rooted? (and message-id has-ackers?)<br/>\n  root-id (if rooted? (MessageId/generateId rand))</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>out-ids (fast-list-for <span class=\"error\">&#91;t out-tasks&#93;</span> (if rooted? (MessageId/generateId rand)))]<br/>\n    +     out-ids (fast-list-for <span class=\"error\">&#91;t out-tasks&#93;</span> (if rooted? (MessageId/generateId rand)))<br/>\n    +     sampler? (sampler)]<br/>\n    + (when sampler?<br/>\n    +   (.notify rate-tracker (count out-tasks))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Wait I just thought about this again.  How in the world can we get an accurate rate if we are only counting a subset of the tuples?  Wouldn't we also have to increase the rate proportionally to the sampling rate?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602788/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144539829","html_url":"https://github.com/apache/storm/pull/753#issuecomment-144539829","issue_url":"https://api.github.com/repos/apache/storm/issues/753","id":144539829,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDUzOTgyOQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:54:41Z","updated_at":"2015-09-30T20:54:41Z","author_association":"CONTRIBUTOR","body":"@wangli1426 I am done with my first pass through the code.  There may be other things in here too that I missed on the first pass.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144539829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602796","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602796","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602796,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI3OTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:54:43Z","updated_at":"2025-01-24T14:01:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#issuecomment-144539829\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#issuecomment-144539829</a></p>\n\n<p>    @wangli1426 I am done with my first pass through the code.  There may be other things in here too that I missed on the first pass.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602796/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571271","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571271","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571271,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:55:03Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40850307\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40850307</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/ResourceAwareScheduler.java &#8212;<br/>\n    @@ -0,0 +1,152 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.scheduler.resource;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +import backtype.storm.Config;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import backtype.storm.scheduler.Cluster;<br/>\n    +import backtype.storm.scheduler.ExecutorDetails;<br/>\n    +import backtype.storm.scheduler.IScheduler;<br/>\n    +import backtype.storm.scheduler.Topologies;<br/>\n    +import backtype.storm.scheduler.TopologyDetails;<br/>\n    +import backtype.storm.scheduler.WorkerSlot;<br/>\n    +import backtype.storm.scheduler.resource.strategies.ResourceAwareStrategy;<br/>\n    +<br/>\n    +public class ResourceAwareScheduler implements IScheduler {<br/>\n    +    private static final Logger LOG = LoggerFactory<br/>\n    +    .getLogger(ResourceAwareScheduler.class);<br/>\n    +    @SuppressWarnings(\"rawtypes\")<br/>\n    +    private Map _conf;<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void prepare(Map conf) </p>\n{\n    +_conf = conf;\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public void schedule(Topologies topologies, Cluster cluster) {<br/>\n    +LOG.info(\"\\n\\n\\nRerunning ResourceAwareScheduler...\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will remove/change</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571271/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571275","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571275","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571275,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyNzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:56:32Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40850487\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40850487</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/ResourceUtils.java &#8212;<br/>\n    @@ -0,0 +1,117 @@<br/>\n    +package backtype.storm.scheduler.resource;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will add</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571282","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571282","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571282,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:56:53Z","updated_at":"2025-01-24T13:47:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40850542\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40850542</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/ResourceUtils.java &#8212;<br/>\n    @@ -0,0 +1,117 @@<br/>\n    +package backtype.storm.scheduler.resource;<br/>\n    +<br/>\n    +import backtype.storm.Config;<br/>\n    +import backtype.storm.generated.Bolt;<br/>\n    +import backtype.storm.generated.SpoutSpec;<br/>\n    +import backtype.storm.generated.StormTopology;<br/>\n    +import org.json.simple.JSONObject;<br/>\n    +import org.json.simple.parser.JSONParser;<br/>\n    +import org.json.simple.parser.ParseException;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Created by jerrypeng on 9/22/15.<br/>\n    + */<br/>\n    +public class ResourceUtils {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571282/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571289","html_url":"https://github.com/apache/storm/issues/4732#issuecomment-2612571289","issue_url":"https://api.github.com/repos/apache/storm/issues/4732","id":2612571289,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1NzEyODk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T20:59:09Z","updated_at":"2025-01-24T13:47:28Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/746#discussion_r40850849\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/746#discussion_r40850849</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/scheduler/resource/strategies/IStrategy.java &#8212;<br/>\n    @@ -0,0 +1,33 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.scheduler.resource.strategies;<br/>\n    +<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +import backtype.storm.scheduler.Topologies;<br/>\n    +import backtype.storm.scheduler.ExecutorDetails;<br/>\n    +import backtype.storm.scheduler.TopologyDetails;<br/>\n    +import backtype.storm.scheduler.WorkerSlot;<br/>\n    +import backtype.storm.scheduler.resource.RAS_Node;<br/>\n    +<br/>\n    +public interface IStrategy {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will add</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612571289/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144542259","html_url":"https://github.com/apache/storm/pull/744#issuecomment-144542259","issue_url":"https://api.github.com/repos/apache/storm/issues/744","id":144542259,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDU0MjI1OQ==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:05:22Z","updated_at":"2015-09-30T21:05:22Z","author_association":"NONE","body":"Looks good to me. The only nit is the title of this JIRA: new Kafka Producer API rather than kafka-client.\n the new Kafka Clients API is still in the process in STORM-822.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144542259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602091","html_url":"https://github.com/apache/storm/issues/4891#issuecomment-2612602091","issue_url":"https://api.github.com/repos/apache/storm/issues/4891","id":2612602091,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDIwOTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:05:23Z","updated_at":"2025-01-24T14:01:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/744#issuecomment-144542259\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/744#issuecomment-144542259</a></p>\n\n<p>    Looks good to me. The only nit is the title of this JIRA: new Kafka Producer API rather than kafka-client.<br/>\n     the new Kafka Clients API is still in the process in <a href=\"https://issues.apache.org/jira/browse/STORM-822\" title=\"Kafka Spout New Consumer API\" class=\"issue-link\" data-issue-key=\"STORM-822\"><del>STORM-822</del></a>.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602091/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144543081","html_url":"https://github.com/apache/storm/pull/753#issuecomment-144543081","issue_url":"https://api.github.com/repos/apache/storm/issues/753","id":144543081,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDU0MzA4MQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:08:53Z","updated_at":"2015-09-30T21:08:53Z","author_association":"CONTRIBUTOR","body":"Actually I thought about this a bit more and I am not sure what value this adds over dividing the emitted counts that we already have by the time window that they are for.  I don't see a reason to add in more code to get a number we already know.  I am -1 for this approach.  I am fine with doing the calculation for the rate and displaying it in the UI.  That would be helpful, but I don't see a reason to try and collect it again, in a different way.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144543081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602803","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602803","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602803,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI4MDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:08:58Z","updated_at":"2025-01-24T14:01:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#issuecomment-144543081\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#issuecomment-144543081</a></p>\n\n<p>    Actually I thought about this a bit more and I am not sure what value this adds over dividing the emitted counts that we already have by the time window that they are for.  I don't see a reason to add in more code to get a number we already know.  I am -1 for this approach.  I am fine with doing the calculation for the rate and displaying it in the UI.  That would be helpful, but I don't see a reason to try and collect it again, in a different way.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602803/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144543208","html_url":"https://github.com/apache/storm/pull/744#issuecomment-144543208","issue_url":"https://api.github.com/repos/apache/storm/issues/744","id":144543208,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDU0MzIwOA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:09:28Z","updated_at":"2015-09-30T21:09:28Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144543208/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602095","html_url":"https://github.com/apache/storm/issues/4891#issuecomment-2612602095","issue_url":"https://api.github.com/repos/apache/storm/issues/4891","id":2612602095,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDIwOTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:09:30Z","updated_at":"2025-01-24T14:01:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/744#issuecomment-144543208\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/744#issuecomment-144543208</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602095/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602098","html_url":"https://github.com/apache/storm/issues/4891#issuecomment-2612602098","issue_url":"https://api.github.com/repos/apache/storm/issues/4891","id":2612602098,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDIwOTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:12:13Z","updated_at":"2025-01-24T14:01:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/744\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/744</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602099","html_url":"https://github.com/apache/storm/issues/4891#issuecomment-2612602099","issue_url":"https://api.github.com/repos/apache/storm/issues/4891","id":2612602099,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDIwOTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:12:48Z","updated_at":"2025-01-24T14:01:20Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vesense\" class=\"user-hover\" rel=\"vesense\">Xin Wang</a>,</p>\n\n<p>I merged this into master.  Keep up the good work.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602099/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144545013","html_url":"https://github.com/apache/storm/pull/725#issuecomment-144545013","issue_url":"https://api.github.com/repos/apache/storm/issues/725","id":144545013,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDU0NTAxMw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:14:38Z","updated_at":"2015-09-30T21:14:38Z","author_association":"CONTRIBUTOR","body":"+1 looks good to me.\n\n@HeartSaVioR have you ever pushed a new version of the web site out?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144545013/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597832","html_url":"https://github.com/apache/storm/issues/4871#issuecomment-2612597832","issue_url":"https://api.github.com/repos/apache/storm/issues/4871","id":2612597832,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTc4MzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:14:39Z","updated_at":"2025-01-24T13:59:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/725#issuecomment-144545013\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/725#issuecomment-144545013</a></p>\n\n<p>    +1 looks good to me.</p>\n\n<p>    @HeartSaVioR have you ever pushed a new version of the web site out?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597832/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144547247","html_url":"https://github.com/apache/storm/pull/725#issuecomment-144547247","issue_url":"https://api.github.com/repos/apache/storm/issues/725","id":144547247,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDU0NzI0Nw==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:25:29Z","updated_at":"2015-09-30T21:25:29Z","author_association":"CONTRIBUTOR","body":"@revans2 \nNo, I'm not. Since it's merged to another branch (asf-site), I'll close this PR and re-work.\nThanks for reviewing. :)\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144547247/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597836","html_url":"https://github.com/apache/storm/issues/4871#issuecomment-2612597836","issue_url":"https://api.github.com/repos/apache/storm/issues/4871","id":2612597836,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTc4MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:25:30Z","updated_at":"2025-01-24T13:59:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/725#issuecomment-144547247\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/725#issuecomment-144547247</a></p>\n\n<p>    @revans2 <br/>\n    No, I'm not. Since it's merged to another branch (asf-site), I'll close this PR and re-work.<br/>\n    Thanks for reviewing. <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597838","html_url":"https://github.com/apache/storm/issues/4871#issuecomment-2612597838","issue_url":"https://api.github.com/repos/apache/storm/issues/4871","id":2612597838,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTc4Mzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:25:31Z","updated_at":"2025-01-24T13:59:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/725\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/725</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597838/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597845","html_url":"https://github.com/apache/storm/issues/4871#issuecomment-2612597845","issue_url":"https://api.github.com/repos/apache/storm/issues/4871","id":2612597845,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTc4NDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:32:43Z","updated_at":"2025-01-24T13:59:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user HeartSaVioR opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/771\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/771</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1033\" title=\"TLP site&#39;s download link should be updated to refer closer.lua instead of closer.cgi\" class=\"issue-link\" data-issue-key=\"STORM-1033\"><del>STORM-1033</del></a> replace closer.cgi to closer.lua</p>\n\n<p>    It's another version of #725, only difference is base branch. It is asf-site now.<br/>\n    Please refer <a href=\"https://issues.apache.org/jira/browse/STORM-1033\" title=\"TLP site&#39;s download link should be updated to refer closer.lua instead of closer.cgi\" class=\"issue-link\" data-issue-key=\"STORM-1033\"><del>STORM-1033</del></a> or #725 to more details.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/HeartSaVioR/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/HeartSaVioR/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1033\" title=\"TLP site&#39;s download link should be updated to refer closer.lua instead of closer.cgi\" class=\"issue-link\" data-issue-key=\"STORM-1033\"><del>STORM-1033</del></a>-to-asf-site</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/771.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/771.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #771</p>\n\n<hr />\n<p>commit 37e38cda571f1e8f6010ee76a5d0c6c6b798f25b<br/>\nAuthor: Jungtaek Lim <kabhwan@gmail.com><br/>\nDate:   2015-09-30T21:29:28Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1033\" title=\"TLP site&#39;s download link should be updated to refer closer.lua instead of closer.cgi\" class=\"issue-link\" data-issue-key=\"STORM-1033\"><del>STORM-1033</del></a> replace closer.cgi to closer.lua</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597845/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144550315","html_url":"https://github.com/apache/storm/pull/771#issuecomment-144550315","issue_url":"https://api.github.com/repos/apache/storm/issues/771","id":144550315,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDU1MDMxNQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:40:36Z","updated_at":"2015-09-30T21:40:36Z","author_association":"CONTRIBUTOR","body":"@revans2 It's another version of #725. Please check.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144550315/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597850","html_url":"https://github.com/apache/storm/issues/4871#issuecomment-2612597850","issue_url":"https://api.github.com/repos/apache/storm/issues/4871","id":2612597850,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTc4NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:40:37Z","updated_at":"2025-01-24T13:59:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/771#issuecomment-144550315\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/771#issuecomment-144550315</a></p>\n\n<p>    @revans2 It's another version of #725. Please check.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597850/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612606373","html_url":"https://github.com/apache/storm/issues/4917#issuecomment-2612606373","issue_url":"https://api.github.com/repos/apache/storm/issues/4917","id":2612606373,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDYzNzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:45:46Z","updated_at":"2025-01-24T14:03:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user harshach opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/772\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/772</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1079\" title=\"Batch Puts to HBase\" class=\"issue-link\" data-issue-key=\"STORM-1079\"><del>STORM-1079</del></a>. Batch Puts to HBase.</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/harshach/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/harshach/incubator-storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1079\" title=\"Batch Puts to HBase\" class=\"issue-link\" data-issue-key=\"STORM-1079\"><del>STORM-1079</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/772.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/772.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #772</p>\n\n<hr />\n<p>commit e3b5c2701f1ce912dde052af3e81b9c4ce517f3f<br/>\nAuthor: Sriharsha Chintalapani <mail@harsha.io><br/>\nDate:   2015-09-30T21:44:28Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1079\" title=\"Batch Puts to HBase\" class=\"issue-link\" data-issue-key=\"STORM-1079\"><del>STORM-1079</del></a>. Batch Puts to HBase.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612606373/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144553323","html_url":"https://github.com/apache/storm/pull/771#issuecomment-144553323","issue_url":"https://api.github.com/repos/apache/storm/issues/771","id":144553323,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDU1MzMyMw==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:55:24Z","updated_at":"2015-09-30T21:55:24Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144553323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597856","html_url":"https://github.com/apache/storm/issues/4871#issuecomment-2612597856","issue_url":"https://api.github.com/repos/apache/storm/issues/4871","id":2612597856,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTc4NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T21:55:25Z","updated_at":"2025-01-24T13:59:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/771#issuecomment-144553323\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/771#issuecomment-144553323</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612597856/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/144565292","html_url":"https://github.com/apache/storm/pull/772#issuecomment-144565292","issue_url":"https://api.github.com/repos/apache/storm/issues/772","id":144565292,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDU2NTI5Mg==","user":{"login":"Parth-Brahmbhatt","id":6914358,"node_id":"MDQ6VXNlcjY5MTQzNTg=","avatar_url":"https://avatars.githubusercontent.com/u/6914358?v=4","gravatar_id":"","url":"https://api.github.com/users/Parth-Brahmbhatt","html_url":"https://github.com/Parth-Brahmbhatt","followers_url":"https://api.github.com/users/Parth-Brahmbhatt/followers","following_url":"https://api.github.com/users/Parth-Brahmbhatt/following{/other_user}","gists_url":"https://api.github.com/users/Parth-Brahmbhatt/gists{/gist_id}","starred_url":"https://api.github.com/users/Parth-Brahmbhatt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Parth-Brahmbhatt/subscriptions","organizations_url":"https://api.github.com/users/Parth-Brahmbhatt/orgs","repos_url":"https://api.github.com/users/Parth-Brahmbhatt/repos","events_url":"https://api.github.com/users/Parth-Brahmbhatt/events{/privacy}","received_events_url":"https://api.github.com/users/Parth-Brahmbhatt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-09-30T22:38:29Z","updated_at":"2015-09-30T22:38:29Z","author_association":"CONTRIBUTOR","body":"+1. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/144565292/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]